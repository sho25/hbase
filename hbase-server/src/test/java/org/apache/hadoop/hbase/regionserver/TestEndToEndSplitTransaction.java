begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Chore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|PayloadCarryingRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
operator|.
name|BaseCoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PairOfSameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|StoppableImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestEndToEndSplitTransaction
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestEndToEndSplitTransaction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMasterOpsWhileSplitting
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestSplit"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|familyName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
name|HTable
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|ht
argument_list|,
name|familyName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
name|HRegionServer
name|server
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|firstRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|splitRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"lll"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|lastRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz"
argument_list|)
decl_stmt|;
name|HConnection
name|con
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// this will also cache the region
name|byte
index|[]
name|regionName
init|=
name|con
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|splitRow
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|HRegion
name|region
init|=
name|server
operator|.
name|getRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|SplitTransaction
name|split
init|=
operator|new
name|SplitTransaction
argument_list|(
name|region
argument_list|,
name|splitRow
argument_list|)
decl_stmt|;
name|split
operator|.
name|prepare
argument_list|()
expr_stmt|;
comment|// 1. phase I
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|split
operator|.
name|createDaughters
argument_list|(
name|server
argument_list|,
name|server
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|test
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|firstRow
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|test
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|lastRow
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
comment|// passing null as services prevents final step
comment|// 2, most of phase II
name|split
operator|.
name|openDaughters
argument_list|(
name|server
argument_list|,
literal|null
argument_list|,
name|regions
operator|.
name|getFirst
argument_list|()
argument_list|,
name|regions
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|test
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|firstRow
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|test
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|lastRow
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. finish phase II
comment|// note that this replicates some code from SplitTransaction
comment|// 2nd daughter first
name|server
operator|.
name|postOpenDeployTasks
argument_list|(
name|regions
operator|.
name|getSecond
argument_list|()
argument_list|,
name|server
operator|.
name|getCatalogTracker
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add to online regions
name|server
operator|.
name|addToOnlineRegions
argument_list|(
name|regions
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
comment|// THIS is the crucial point:
comment|// the 2nd daughter was added, so querying before the split key should fail.
name|assertFalse
argument_list|(
name|test
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|firstRow
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
comment|// past splitkey is ok.
name|assertTrue
argument_list|(
name|test
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|lastRow
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
comment|// first daughter second
name|server
operator|.
name|postOpenDeployTasks
argument_list|(
name|regions
operator|.
name|getFirst
argument_list|()
argument_list|,
name|server
operator|.
name|getCatalogTracker
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add to online regions
name|server
operator|.
name|addToOnlineRegions
argument_list|(
name|regions
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|firstRow
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|lastRow
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. phase III
operator|(
operator|(
name|BaseCoordinatedStateManager
operator|)
name|server
operator|.
name|getCoordinatedStateManager
argument_list|()
operator|)
operator|.
name|getSplitTransactionCoordination
argument_list|()
operator|.
name|completeSplitTransaction
argument_list|(
name|server
argument_list|,
name|regions
operator|.
name|getFirst
argument_list|()
argument_list|,
name|regions
operator|.
name|getSecond
argument_list|()
argument_list|,
name|split
operator|.
name|std
argument_list|,
name|region
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|firstRow
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test
argument_list|(
name|con
argument_list|,
name|tableName
argument_list|,
name|lastRow
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * attempt to locate the region and perform a get and scan    * @return True if successful, False otherwise.    */
specifier|private
name|boolean
name|test
parameter_list|(
name|HConnection
name|con
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|HRegionServer
name|server
parameter_list|)
block|{
comment|// not using HTable to avoid timeouts and retries
try|try
block|{
name|byte
index|[]
name|regionName
init|=
name|con
operator|.
name|relocateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
comment|// get and scan should now succeed without exception
name|ClientProtos
operator|.
name|GetRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildGetRequest
argument_list|(
name|regionName
argument_list|,
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|server
operator|.
name|getRSRpcServices
argument_list|()
operator|.
name|get
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|ScanRequest
name|scanRequest
init|=
name|RequestConverter
operator|.
name|buildScanRequest
argument_list|(
name|regionName
argument_list|,
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|server
operator|.
name|getRSRpcServices
argument_list|()
operator|.
name|scan
argument_list|(
operator|new
name|PayloadCarryingRpcController
argument_list|()
argument_list|,
name|scanRequest
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|x
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Tests that the client sees meta table changes as atomic during splits    */
annotation|@
name|Test
specifier|public
name|void
name|testFromClientSideWhileSplitting
parameter_list|()
throws|throws
name|Throwable
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testFromClientSideWhileSplitting"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testFromClientSideWhileSplitting"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
comment|//SplitTransaction will update the meta table by offlining the parent region, and adding info
comment|//for daughters.
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Stoppable
name|stopper
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|RegionSplitter
name|regionSplitter
init|=
operator|new
name|RegionSplitter
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|RegionChecker
name|regionChecker
init|=
operator|new
name|RegionChecker
argument_list|(
name|conf
argument_list|,
name|stopper
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
name|regionChecker
operator|.
name|start
argument_list|()
expr_stmt|;
name|regionSplitter
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//wait until the splitter is finished
name|regionSplitter
operator|.
name|join
argument_list|()
expr_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|regionChecker
operator|.
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|regionChecker
operator|.
name|ex
throw|;
block|}
if|if
condition|(
name|regionSplitter
operator|.
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|regionSplitter
operator|.
name|ex
throw|;
block|}
comment|//one final check
name|regionChecker
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|RegionSplitter
extends|extends
name|Thread
block|{
name|Throwable
name|ex
decl_stmt|;
name|HTable
name|table
decl_stmt|;
name|TableName
name|tableName
decl_stmt|;
name|byte
index|[]
name|family
decl_stmt|;
name|HBaseAdmin
name|admin
decl_stmt|;
name|HRegionServer
name|rs
decl_stmt|;
name|RegionSplitter
parameter_list|(
name|HTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|table
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|family
operator|=
name|table
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getFamiliesKeys
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
expr_stmt|;
name|rs
operator|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
init|=
name|MetaScanner
operator|.
name|allTableRegions
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|int
name|regionIndex
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//pick a random region and split it into two
name|HRegionInfo
name|region
init|=
name|Iterators
operator|.
name|get
argument_list|(
name|regions
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|regionIndex
argument_list|)
decl_stmt|;
comment|//pick the mid split point
name|int
name|start
init|=
literal|0
decl_stmt|,
name|end
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|start
operator|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|region
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|end
operator|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|region
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|mid
init|=
name|start
operator|+
operator|(
operator|(
name|end
operator|-
name|start
operator|)
operator|/
literal|2
operator|)
decl_stmt|;
name|byte
index|[]
name|splitPoint
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mid
argument_list|)
decl_stmt|;
comment|//put some rows to the regions
name|addData
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|addData
argument_list|(
name|mid
argument_list|)
expr_stmt|;
name|flushAndBlockUntilDone
argument_list|(
name|admin
argument_list|,
name|rs
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|compactAndBlockUntilDone
argument_list|(
name|admin
argument_list|,
name|rs
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Initiating region split for:"
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|split
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|splitPoint
argument_list|)
expr_stmt|;
comment|//wait until the split is complete
name|blockUntilRegionSplit
argument_list|(
name|conf
argument_list|,
literal|50000
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotServingRegionException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|this
operator|.
name|ex
operator|=
name|ex
expr_stmt|;
block|}
block|}
name|void
name|addData
parameter_list|(
name|int
name|start
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Checks regions using MetaScanner, MetaReader and HTable methods    */
specifier|static
class|class
name|RegionChecker
extends|extends
name|Chore
block|{
name|Configuration
name|conf
decl_stmt|;
name|TableName
name|tableName
decl_stmt|;
name|Throwable
name|ex
decl_stmt|;
name|RegionChecker
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Stoppable
name|stopper
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
literal|"RegionChecker"
argument_list|,
literal|10
argument_list|,
name|stopper
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** verify region boundaries obtained from MetaScanner */
name|void
name|verifyRegionsUsingMetaScanner
parameter_list|()
throws|throws
name|Exception
block|{
comment|//MetaScanner.allTableRegions()
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
init|=
name|MetaScanner
operator|.
name|allTableRegions
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|verifyTableRegions
argument_list|(
name|regions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|//MetaScanner.listAllRegions()
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionList
init|=
name|MetaScanner
operator|.
name|listAllRegions
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|verifyTableRegions
argument_list|(
name|Sets
operator|.
name|newTreeSet
argument_list|(
name|regionList
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** verify region boundaries obtained from HTable.getStartEndKeys() */
name|void
name|verifyRegionsUsingHTable
parameter_list|()
throws|throws
name|IOException
block|{
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//HTable.getStartEndKeys()
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|keys
init|=
name|table
operator|.
name|getStartEndKeys
argument_list|()
decl_stmt|;
name|verifyStartEndKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
comment|//HTable.getRegionsInfo()
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
init|=
name|table
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
name|verifyTableRegions
argument_list|(
name|regions
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|verify
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyRegionsUsingMetaScanner
argument_list|()
expr_stmt|;
name|verifyRegionsUsingHTable
argument_list|()
expr_stmt|;
block|}
name|void
name|verifyTableRegions
parameter_list|(
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
block|{
name|log
argument_list|(
literal|"Verifying "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|startKeys
init|=
operator|new
name|byte
index|[
name|regions
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|byte
index|[]
index|[]
name|endKeys
init|=
operator|new
name|byte
index|[
name|regions
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|startKeys
index|[
name|i
index|]
operator|=
name|region
operator|.
name|getStartKey
argument_list|()
expr_stmt|;
name|endKeys
index|[
name|i
index|]
operator|=
name|region
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|keys
init|=
operator|new
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
argument_list|(
name|startKeys
argument_list|,
name|endKeys
argument_list|)
decl_stmt|;
name|verifyStartEndKeys
argument_list|(
name|keys
argument_list|)
expr_stmt|;
block|}
name|void
name|verifyStartEndKeys
parameter_list|(
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|keys
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|startKeys
init|=
name|keys
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|endKeys
init|=
name|keys
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|startKeys
operator|.
name|length
argument_list|,
name|endKeys
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Found 0 regions for the table"
argument_list|,
name|startKeys
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Start key for the first region is not byte[0]"
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|startKeys
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|prevEndKey
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
comment|// ensure that we do not have any gaps
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertArrayEquals
argument_list|(
literal|"Hole in hbase:meta is detected. prevEndKey="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|prevEndKey
argument_list|)
operator|+
literal|" ,regionStartKey="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|startKeys
index|[
name|i
index|]
argument_list|)
argument_list|,
name|prevEndKey
argument_list|,
name|startKeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|prevEndKey
operator|=
name|endKeys
index|[
name|i
index|]
expr_stmt|;
block|}
name|assertArrayEquals
argument_list|(
literal|"End key for the last region is not byte[0]"
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
name|endKeys
index|[
name|endKeys
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|chore
parameter_list|()
block|{
try|try
block|{
name|verify
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|this
operator|.
name|ex
operator|=
name|ex
expr_stmt|;
name|stopper
operator|.
name|stop
argument_list|(
literal|"caught exception"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|log
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|/* some utility methods for split tests */
specifier|public
specifier|static
name|void
name|flushAndBlockUntilDone
parameter_list|(
name|HBaseAdmin
name|admin
parameter_list|,
name|HRegionServer
name|rs
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|log
argument_list|(
literal|"flushing region: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"blocking until flush is complete: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|500
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|cacheFlusher
operator|.
name|getFlushQueueSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|compactAndBlockUntilDone
parameter_list|(
name|HBaseAdmin
name|admin
parameter_list|,
name|HRegionServer
name|rs
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|log
argument_list|(
literal|"Compacting region: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"blocking until compaction is complete: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|500
argument_list|)
expr_stmt|;
while|while
condition|(
name|rs
operator|.
name|compactSplitThread
operator|.
name|getCompactionQueueSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Blocks until the region split is complete in hbase:meta and region server opens the daughters */
specifier|public
specifier|static
name|void
name|blockUntilRegionSplit
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|timeout
parameter_list|,
specifier|final
name|byte
index|[]
name|regionName
parameter_list|,
name|boolean
name|waitForDaughters
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|log
argument_list|(
literal|"blocking until region is split:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|daughterA
init|=
literal|null
decl_stmt|,
name|daughterB
init|=
literal|null
decl_stmt|;
name|HTable
name|metaTable
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|timeout
condition|)
block|{
name|Result
name|result
init|=
name|getRegionRow
argument_list|(
name|metaTable
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|HRegionInfo
name|region
init|=
name|HRegionInfo
operator|.
name|getHRegionInfo
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|isSplitParent
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"found parent region: "
operator|+
name|region
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|PairOfSameType
argument_list|<
name|HRegionInfo
argument_list|>
name|pair
init|=
name|HRegionInfo
operator|.
name|getDaughterRegions
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|daughterA
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|daughterB
operator|=
name|pair
operator|.
name|getSecond
argument_list|()
expr_stmt|;
break|break;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|//if we are here, this means the region split is complete or timed out
if|if
condition|(
name|waitForDaughters
condition|)
block|{
name|long
name|rem
init|=
name|timeout
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
decl_stmt|;
name|blockUntilRegionIsInMeta
argument_list|(
name|metaTable
argument_list|,
name|rem
argument_list|,
name|daughterA
argument_list|)
expr_stmt|;
name|rem
operator|=
name|timeout
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
expr_stmt|;
name|blockUntilRegionIsInMeta
argument_list|(
name|metaTable
argument_list|,
name|rem
argument_list|,
name|daughterB
argument_list|)
expr_stmt|;
name|rem
operator|=
name|timeout
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
expr_stmt|;
name|blockUntilRegionIsOpened
argument_list|(
name|conf
argument_list|,
name|rem
argument_list|,
name|daughterA
argument_list|)
expr_stmt|;
name|rem
operator|=
name|timeout
operator|-
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
expr_stmt|;
name|blockUntilRegionIsOpened
argument_list|(
name|conf
argument_list|,
name|rem
argument_list|,
name|daughterB
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|metaTable
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Result
name|getRegionRow
parameter_list|(
name|HTable
name|metaTable
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
return|return
name|metaTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|blockUntilRegionIsInMeta
parameter_list|(
name|HTable
name|metaTable
parameter_list|,
name|long
name|timeout
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|log
argument_list|(
literal|"blocking until region is in META: "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|timeout
condition|)
block|{
name|Result
name|result
init|=
name|getRegionRow
argument_list|(
name|metaTable
argument_list|,
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|HRegionInfo
name|info
init|=
name|HRegionInfo
operator|.
name|getHRegionInfo
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
operator|!
name|info
operator|.
name|isOffline
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"found region in META: "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|blockUntilRegionIsOpened
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|timeout
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|log
argument_list|(
literal|"blocking until region is opened for reading:"
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|row
init|=
name|hri
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
comment|// Check for null/empty row.  If we find one, use a key that is likely to be in first region.
if|if
condition|(
name|row
operator|==
literal|null
operator|||
name|row
operator|.
name|length
operator|<=
literal|0
condition|)
name|row
operator|=
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|<
name|timeout
condition|)
block|{
try|try
block|{
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|//wait some more
block|}
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

