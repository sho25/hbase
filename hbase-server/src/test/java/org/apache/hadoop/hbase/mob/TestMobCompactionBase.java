begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|CompactionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**   * Mob file compaction base test.   * 1. Enables batch mode for regular MOB compaction,   *    Sets batch size to 7 regions. (Optional)   * 2. Disables periodic MOB compactions, sets minimum age to archive to 10 sec   * 3. Creates MOB table with 20 regions   * 4. Loads MOB data (randomized keys, 1000 rows), flushes data.   * 5. Repeats 4. two more times   * 6. Verifies that we have 20 *3 = 60 mob files (equals to number of regions x 3)   * 7. Runs major MOB compaction.   * 8. Verifies that number of MOB files in a mob directory is 20 x4 = 80   * 9. Waits for a period of time larger than minimum age to archive   * 10. Runs Mob cleaner chore   * 11 Verifies that number of MOB files in a mob directory is 20.   * 12 Runs scanner and checks all 3 * 1000 rows.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|abstract
class|class
name|TestMobCompactionBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMobCompactionBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|HBaseTestingUtility
name|HTU
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|famStr
init|=
literal|"f1"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|famStr
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|long
name|mobLen
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|byte
index|[]
name|mobVal
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"01234567890123456789012345678901234567890123456789012345678901234567890123456789"
argument_list|)
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|HTableDescriptor
name|hdt
decl_stmt|;
specifier|private
name|HColumnDescriptor
name|hcd
decl_stmt|;
specifier|protected
name|Admin
name|admin
decl_stmt|;
specifier|protected
name|Table
name|table
init|=
literal|null
decl_stmt|;
specifier|protected
name|long
name|minAgeToArchive
init|=
literal|10000
decl_stmt|;
specifier|protected
name|int
name|numRegions
init|=
literal|20
decl_stmt|;
specifier|protected
name|int
name|rows
init|=
literal|1000
decl_stmt|;
specifier|protected
name|MobFileCleanerChore
name|cleanerChore
decl_stmt|;
specifier|public
name|TestMobCompactionBase
parameter_list|()
block|{   }
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|HTU
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|hdt
operator|=
name|HTU
operator|.
name|createTableDescriptor
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
name|HTU
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|initConf
argument_list|()
expr_stmt|;
name|HTU
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|admin
operator|=
name|HTU
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|cleanerChore
operator|=
operator|new
name|MobFileCleanerChore
argument_list|()
expr_stmt|;
name|hcd
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
name|mobLen
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|RegionSplitter
operator|.
name|UniformSplit
name|splitAlgo
init|=
operator|new
name|RegionSplitter
operator|.
name|UniformSplit
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|splitAlgo
operator|.
name|split
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
name|table
operator|=
name|HTU
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initConf
parameter_list|()
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Disable automatic MOB compaction
name|conf
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_CHORE_PERIOD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Disable automatic MOB file cleaner chore
name|conf
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MOB_CLEANER_PERIOD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Set minimum age to archive to 10 sec
name|conf
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MIN_AGE_TO_ARCHIVE_KEY
argument_list|,
name|minAgeToArchive
argument_list|)
expr_stmt|;
comment|// Set compacted file discharger interval to a half minAgeToArchive
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.hfile.compaction.discharger.interval"
argument_list|,
name|minAgeToArchive
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadData
parameter_list|(
name|int
name|num
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Started loading {} rows"
argument_list|,
name|num
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|32
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qualifier
argument_list|,
name|mobVal
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished loading {} rows"
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MOB file compaction chore test FAILED"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"MOB file compaction chore test FAILED"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|baseTestMobFileCompaction
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Load and flush data 3 times
name|loadData
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|long
name|num
init|=
name|getNumberOfMobFiles
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|fam
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numRegions
operator|*
literal|3
argument_list|,
name|num
argument_list|)
expr_stmt|;
comment|// Major MOB compact
name|mobCompact
argument_list|(
name|admin
argument_list|,
name|hdt
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
comment|// wait until compaction is complete
while|while
condition|(
name|admin
operator|.
name|getCompactionState
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|!=
name|CompactionState
operator|.
name|NONE
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|num
operator|=
name|getNumberOfMobFiles
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|fam
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numRegions
operator|*
literal|4
argument_list|,
name|num
argument_list|)
expr_stmt|;
comment|// We have guarantee, that compacted file discharger will run during this pause
comment|// because it has interval less than this wait time
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for {}ms"
argument_list|,
name|minAgeToArchive
operator|+
literal|1000
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|minAgeToArchive
operator|+
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning up MOB files"
argument_list|)
expr_stmt|;
comment|// Cleanup again
name|cleanerChore
operator|.
name|cleanupObsoleteMobFiles
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|num
operator|=
name|getNumberOfMobFiles
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|String
argument_list|(
name|fam
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numRegions
argument_list|,
name|num
argument_list|)
expr_stmt|;
name|long
name|scanned
init|=
name|scanTable
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
operator|*
name|rows
argument_list|,
name|scanned
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|mobCompact
parameter_list|(
name|Admin
name|admin2
parameter_list|,
name|HTableDescriptor
name|hdt2
parameter_list|,
name|HColumnDescriptor
name|hcd2
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
specifier|protected
name|long
name|getNumberOfMobFiles
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|stat
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|st
range|:
name|stat
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"MOB Directory content: {}"
argument_list|,
name|st
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"MOB Directory content total files: {}"
argument_list|,
name|stat
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|stat
operator|.
name|length
return|;
block|}
specifier|protected
name|long
name|scanTable
parameter_list|()
block|{
try|try
block|{
name|Result
name|result
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|fam
argument_list|)
decl_stmt|;
name|long
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam
argument_list|,
name|qualifier
argument_list|)
argument_list|,
name|mobVal
argument_list|)
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
return|return
name|counter
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MOB file compaction test FAILED"
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|HTU
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

