begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForkJoinPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|AbstractFSWAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Testcase for HBASE-21503.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRaceBetweenGetWALAndGetWALs
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRaceBetweenGetWALAndGetWALs
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Future
argument_list|<
name|List
argument_list|<
name|WAL
argument_list|>
argument_list|>
name|GET_WALS_FUTURE
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|FSWALProvider
extends|extends
name|AbstractFSWALProvider
argument_list|<
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
annotation|@
name|Override
specifier|protected
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
name|createWAL
parameter_list|()
throws|throws
name|IOException
block|{
comment|// just like what may do in the WALListeners, schedule an asynchronous task to call the
comment|// getWALs method.
name|GET_WALS_FUTURE
operator|=
name|ForkJoinPool
operator|.
name|commonPool
argument_list|()
operator|.
name|submit
argument_list|(
name|this
operator|::
name|getWALs
argument_list|)
expr_stmt|;
comment|// sleep a while to make the getWALs arrive before we return
name|Threads
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
return|return
name|Mockito
operator|.
name|mock
argument_list|(
name|AbstractFSWAL
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doInit
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRace
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|FSWALProvider
name|p
init|=
operator|new
name|FSWALProvider
argument_list|()
decl_stmt|;
name|WAL
name|wal
init|=
name|p
operator|.
name|getWAL
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|GET_WALS_FUTURE
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|WAL
argument_list|>
name|wals
init|=
name|GET_WALS_FUTURE
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|wal
argument_list|,
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|wals
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

