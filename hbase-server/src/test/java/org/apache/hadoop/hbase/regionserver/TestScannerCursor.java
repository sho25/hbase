begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTestConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestScannerCursor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestScannerCursor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Table
name|TABLE
init|=
literal|null
decl_stmt|;
comment|/**    * Table configuration    */
specifier|private
specifier|static
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestScannerCursor"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_ROWS
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|ROWS
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|ROW
argument_list|,
name|NUM_ROWS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_FAMILIES
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
name|NUM_FAMILIES
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_QUALIFIERS
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|QUALIFIER
argument_list|,
name|NUM_QUALIFIERS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|VALUE_SIZE
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|createMaxByteArray
argument_list|(
name|VALUE_SIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|4000
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
comment|// Check the timeout condition after every cell
name|conf
operator|.
name|setLong
argument_list|(
name|StoreScanner
operator|.
name|HBASE_CELLS_SCANNED_PER_HEARTBEAT_CHECK
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TABLE
operator|=
name|createTestTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Table
name|createTestTable
parameter_list|(
name|TableName
name|name
parameter_list|,
name|byte
index|[]
index|[]
name|rows
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|,
name|byte
index|[]
name|cellValue
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|families
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|createPuts
argument_list|(
name|rows
argument_list|,
name|families
argument_list|,
name|qualifiers
argument_list|,
name|cellValue
argument_list|)
decl_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
return|return
name|ht
return|;
block|}
specifier|static
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|createPuts
parameter_list|(
name|byte
index|[]
index|[]
name|rows
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
decl_stmt|;
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rows
operator|.
name|length
condition|;
name|row
operator|++
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rows
index|[
name|row
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fam
init|=
literal|0
init|;
name|fam
operator|<
name|families
operator|.
name|length
condition|;
name|fam
operator|++
control|)
block|{
for|for
control|(
name|int
name|qual
init|=
literal|0
init|;
name|qual
operator|<
name|qualifiers
operator|.
name|length
condition|;
name|qual
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rows
index|[
name|row
index|]
argument_list|,
name|families
index|[
name|fam
index|]
argument_list|,
name|qualifiers
index|[
name|qual
index|]
argument_list|,
name|qual
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
return|return
name|puts
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|SparseFilter
extends|extends
name|FilterBase
block|{
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|Cell
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|TIMEOUT
operator|/
literal|2
operator|+
literal|100
argument_list|)
expr_stmt|;
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|v
argument_list|)
argument_list|,
name|ROWS
index|[
name|NUM_ROWS
operator|-
literal|1
index|]
argument_list|)
condition|?
name|ReturnCode
operator|.
name|INCLUDE
else|:
name|ReturnCode
operator|.
name|SKIP
return|;
block|}
specifier|public
specifier|static
name|Filter
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|pbBytes
parameter_list|)
block|{
return|return
operator|new
name|SparseFilter
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeatWithSparseFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setNeedCursorResult
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|SparseFilter
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
name|Result
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|num
operator|<
operator|(
name|NUM_ROWS
operator|-
literal|1
operator|)
operator|*
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isCursor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|ROWS
index|[
name|num
operator|/
name|NUM_FAMILIES
operator|/
name|NUM_QUALIFIERS
index|]
argument_list|,
name|r
operator|.
name|getCursor
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isCursor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|ROWS
index|[
name|num
operator|/
name|NUM_FAMILIES
operator|/
name|NUM_QUALIFIERS
index|]
argument_list|,
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|num
operator|++
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSizeLimit
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setNeedCursorResult
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|num
init|=
literal|0
decl_stmt|;
name|Result
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|num
operator|%
operator|(
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
operator|)
operator|!=
operator|(
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
operator|)
operator|-
literal|1
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|isCursor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|ROWS
index|[
name|num
operator|/
name|NUM_FAMILIES
operator|/
name|NUM_QUALIFIERS
index|]
argument_list|,
name|r
operator|.
name|getCursor
argument_list|()
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|r
operator|.
name|isCursor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|ROWS
index|[
name|num
operator|/
name|NUM_FAMILIES
operator|/
name|NUM_QUALIFIERS
index|]
argument_list|,
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|num
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

