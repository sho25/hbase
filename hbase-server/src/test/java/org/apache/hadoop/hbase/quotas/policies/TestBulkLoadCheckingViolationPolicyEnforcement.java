begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|policies
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceLimitingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
operator|.
name|SpaceQuotaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceViolationPolicyEnforcement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestBulkLoadCheckingViolationPolicyEnforcement
block|{
name|FileSystem
name|fs
decl_stmt|;
name|RegionServerServices
name|rss
decl_stmt|;
name|TableName
name|tableName
decl_stmt|;
name|SpaceViolationPolicyEnforcement
name|policy
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|fs
operator|=
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|rss
operator|=
name|mock
argument_list|(
name|RegionServerServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|policy
operator|=
operator|new
name|DefaultViolationPolicyEnforcement
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilesUnderLimit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|long
name|length
init|=
literal|100L
operator|*
literal|1024L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
literal|"/"
operator|+
name|i
decl_stmt|;
name|FileStatus
name|status
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|status
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|statuses
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
comment|// Quota is not in violation now
name|SpaceQuotaSnapshot
name|snapshot
init|=
operator|new
name|SpaceQuotaSnapshot
argument_list|(
name|SpaceQuotaStatus
operator|.
name|notInViolation
argument_list|()
argument_list|,
literal|0
argument_list|,
name|length
operator|*
literal|6
argument_list|)
decl_stmt|;
name|policy
operator|.
name|initialize
argument_list|(
name|rss
argument_list|,
name|tableName
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|policy
operator|.
name|checkBulkLoad
argument_list|(
name|fs
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFileIsNotAFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"/1"
decl_stmt|;
name|FileStatus
name|status
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1000L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|status
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
comment|// Quota is not in violation now
name|SpaceQuotaSnapshot
name|snapshot
init|=
operator|new
name|SpaceQuotaSnapshot
argument_list|(
name|SpaceQuotaStatus
operator|.
name|notInViolation
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|policy
operator|.
name|initialize
argument_list|(
name|rss
argument_list|,
name|tableName
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
comment|// If the file to bulk load isn't a file, this should throw an exception
name|policy
operator|.
name|checkBulkLoad
argument_list|(
name|fs
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SpaceLimitingException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testOneFileInBatchOverLimit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|long
name|length
init|=
literal|1000L
operator|*
literal|1024L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
literal|"/"
operator|+
name|i
decl_stmt|;
name|FileStatus
name|status
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|status
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|statuses
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
comment|// Quota is not in violation now
name|SpaceQuotaSnapshot
name|snapshot
init|=
operator|new
name|SpaceQuotaSnapshot
argument_list|(
name|SpaceQuotaStatus
operator|.
name|notInViolation
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1024L
argument_list|)
decl_stmt|;
name|policy
operator|.
name|initialize
argument_list|(
name|rss
argument_list|,
name|tableName
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|policy
operator|.
name|checkBulkLoad
argument_list|(
name|fs
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SpaceLimitingException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSumOfFilesOverLimit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FileStatus
argument_list|>
name|statuses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|long
name|length
init|=
literal|1024L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
literal|"/"
operator|+
name|i
decl_stmt|;
name|FileStatus
name|status
init|=
name|mock
argument_list|(
name|FileStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|status
operator|.
name|getLen
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|status
operator|.
name|isFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|statuses
operator|.
name|add
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
comment|// Quota is not in violation now, but 5*1024 files would push us to violation
name|SpaceQuotaSnapshot
name|snapshot
init|=
operator|new
name|SpaceQuotaSnapshot
argument_list|(
name|SpaceQuotaStatus
operator|.
name|notInViolation
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|5000L
argument_list|)
decl_stmt|;
name|policy
operator|.
name|initialize
argument_list|(
name|rss
argument_list|,
name|tableName
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|policy
operator|.
name|checkBulkLoad
argument_list|(
name|fs
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

