begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TestHRegionServerBulkLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CommonFSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHFilePrettyPrinter
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestHFilePrettyPrinter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHFilePrettyPrinter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|PrintStream
name|original
decl_stmt|;
specifier|private
specifier|static
name|PrintStream
name|ps
decl_stmt|;
specifier|private
specifier|static
name|ByteArrayOutputStream
name|stream
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// Runs on local filesystem. Test does not need sync. Turn off checks.
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonFSUtils
operator|.
name|UNSAFE_STREAM_CAPABILITY_ENFORCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|=
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
name|stream
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|ps
operator|=
operator|new
name|PrintStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|original
operator|=
name|System
operator|.
name|out
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|original
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHFilePrettyPrinterNonRootDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|fileNotInRootDir
init|=
name|UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"hfile"
argument_list|)
decl_stmt|;
name|TestHRegionServerBulkLoad
operator|.
name|createHFile
argument_list|(
name|fs
argument_list|,
name|fileNotInRootDir
argument_list|,
name|cf
argument_list|,
name|fam
argument_list|,
name|value
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"directory used is not an HBase root dir"
argument_list|,
name|UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
argument_list|,
name|fileNotInRootDir
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|ps
argument_list|)
expr_stmt|;
operator|new
name|HFilePrettyPrinter
argument_list|(
name|conf
argument_list|)
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-v"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|fileNotInRootDir
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|String
name|result
init|=
operator|new
name|String
argument_list|(
name|stream
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expectedResult
init|=
literal|"Scanning -> "
operator|+
name|fileNotInRootDir
operator|+
literal|"\n"
operator|+
literal|"Scanned kv count -> 1000\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHFilePrettyPrinterRootDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|rootPath
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|rootString
init|=
name|rootPath
operator|+
name|rootPath
operator|.
name|SEPARATOR
decl_stmt|;
name|Path
name|fileInRootDir
init|=
operator|new
name|Path
argument_list|(
name|rootString
operator|+
literal|"hfile"
argument_list|)
decl_stmt|;
name|TestHRegionServerBulkLoad
operator|.
name|createHFile
argument_list|(
name|fs
argument_list|,
name|fileInRootDir
argument_list|,
name|cf
argument_list|,
name|fam
argument_list|,
name|value
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"directory used is a root dir"
argument_list|,
name|fileInRootDir
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|rootString
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setOut
argument_list|(
name|ps
argument_list|)
expr_stmt|;
name|HFilePrettyPrinter
name|printer
init|=
operator|new
name|HFilePrettyPrinter
argument_list|()
decl_stmt|;
name|printer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|printer
operator|.
name|processFile
argument_list|(
name|fileInRootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|printer
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-v"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|fileInRootDir
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|String
name|result
init|=
operator|new
name|String
argument_list|(
name|stream
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expectedResult
init|=
literal|"Scanning -> "
operator|+
name|fileInRootDir
operator|+
literal|"\n"
operator|+
literal|"Scanned kv count -> 1000\n"
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

