begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FilterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|LocalFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|permission
operator|.
name|FsPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellBuilderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MemoryCompactionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|IllegalArgumentIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|DefaultCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|querymatcher
operator|.
name|ScanQueryMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|NoLimitThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManagerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|IncrementingEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ManualEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Progressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Test class for the HStore  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHStore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHStore
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
name|HRegion
name|region
decl_stmt|;
name|HStore
name|store
decl_stmt|;
name|byte
index|[]
name|table
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf6
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf6"
argument_list|)
decl_stmt|;
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
operator|new
name|ConcurrentSkipListSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|id
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestStore"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|/**    * Setup    * @throws IOException    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|qualifiers
operator|.
name|add
argument_list|(
name|qf1
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|qf3
argument_list|)
expr_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|qf5
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|byte
index|[]
argument_list|>
name|iter
init|=
name|qualifiers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|byte
index|[]
name|next
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|next
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|init
parameter_list|(
name|String
name|methodName
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|methodName
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HStore
name|init
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
comment|// some of the tests write 4 versions and then flush
comment|// (with HBASE-4241, lower versions are collected on flush)
return|return
name|init
argument_list|(
name|methodName
argument_list|,
name|conf
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|4
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|HStore
name|init
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|ColumnFamilyDescriptor
name|hcd
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|init
argument_list|(
name|methodName
argument_list|,
name|conf
argument_list|,
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|,
name|hcd
argument_list|)
return|;
block|}
specifier|private
name|HStore
name|init
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TableDescriptorBuilder
name|builder
parameter_list|,
name|ColumnFamilyDescriptor
name|hcd
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|init
argument_list|(
name|methodName
argument_list|,
name|conf
argument_list|,
name|builder
argument_list|,
name|hcd
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|HStore
name|init
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TableDescriptorBuilder
name|builder
parameter_list|,
name|ColumnFamilyDescriptor
name|hcd
parameter_list|,
name|MyStoreHook
name|hook
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|init
argument_list|(
name|methodName
argument_list|,
name|conf
argument_list|,
name|builder
argument_list|,
name|hcd
argument_list|,
name|hook
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|void
name|initHRegion
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TableDescriptorBuilder
name|builder
parameter_list|,
name|ColumnFamilyDescriptor
name|hcd
parameter_list|,
name|MyStoreHook
name|hook
parameter_list|,
name|boolean
name|switchToPread
parameter_list|)
throws|throws
name|IOException
block|{
name|TableDescriptor
name|htd
init|=
name|builder
operator|.
name|addColumnFamily
argument_list|(
name|hcd
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
name|methodName
argument_list|)
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|basedir
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|logdir
init|=
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|AbstractFSWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|methodName
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|logdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ChunkCreator
operator|.
name|initialize
argument_list|(
name|MemStoreLABImpl
operator|.
name|CHUNK_SIZE_DEFAULT
argument_list|,
literal|false
argument_list|,
name|MemStoreLABImpl
operator|.
name|CHUNK_SIZE_DEFAULT
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Configuration
name|walConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|walConf
argument_list|,
name|basedir
argument_list|)
expr_stmt|;
name|WALFactory
name|wals
init|=
operator|new
name|WALFactory
argument_list|(
name|walConf
argument_list|,
literal|null
argument_list|,
name|methodName
argument_list|)
decl_stmt|;
name|region
operator|=
operator|new
name|HRegion
argument_list|(
operator|new
name|HRegionFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|info
argument_list|)
argument_list|,
name|wals
operator|.
name|getWAL
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|info
operator|.
name|getTable
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HStore
name|init
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TableDescriptorBuilder
name|builder
parameter_list|,
name|ColumnFamilyDescriptor
name|hcd
parameter_list|,
name|MyStoreHook
name|hook
parameter_list|,
name|boolean
name|switchToPread
parameter_list|)
throws|throws
name|IOException
block|{
name|initHRegion
argument_list|(
name|methodName
argument_list|,
name|conf
argument_list|,
name|builder
argument_list|,
name|hcd
argument_list|,
name|hook
argument_list|,
name|switchToPread
argument_list|)
expr_stmt|;
if|if
condition|(
name|hook
operator|==
literal|null
condition|)
block|{
name|store
operator|=
operator|new
name|HStore
argument_list|(
name|region
argument_list|,
name|hcd
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|store
operator|=
operator|new
name|MyStore
argument_list|(
name|region
argument_list|,
name|hcd
argument_list|,
name|conf
argument_list|,
name|hook
argument_list|,
name|switchToPread
argument_list|)
expr_stmt|;
block|}
return|return
name|store
return|;
block|}
comment|/**    * Test we do not lose data if we fail a flush and then close.    * Part of HBase-10466    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFlushSizeSizing
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting up a faulty file system that cannot write in "
operator|+
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Only retry once.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.flush.retries.number"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|}
argument_list|)
decl_stmt|;
comment|// Inject our faulty LocalFileSystem
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|FaultyFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure it worked (above is sensitive to caching details in hadoop core)
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FaultyFileSystem
operator|.
name|class
argument_list|,
name|fs
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|FaultyFileSystem
name|ffs
init|=
operator|(
name|FaultyFileSystem
operator|)
name|fs
decl_stmt|;
comment|// Initialize region
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|MemStoreSize
name|size
init|=
name|store
operator|.
name|memstore
operator|.
name|getFlushableSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding some data"
argument_list|)
expr_stmt|;
name|MemStoreSizing
name|kvSize
init|=
operator|new
name|MemStoreSizing
argument_list|()
decl_stmt|;
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
name|kvSize
argument_list|)
expr_stmt|;
comment|// add the heap size of active (mutable) segment
name|kvSize
operator|.
name|incMemStoreSize
argument_list|(
literal|0
argument_list|,
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|)
expr_stmt|;
name|size
operator|=
name|store
operator|.
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|kvSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
comment|// Flush.  Bug #1 from HBASE-10466.  Make sure size calculation on failed flush is right.
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Flushing"
argument_list|)
expr_stmt|;
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't bubble up IOE!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Fault injected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// due to snapshot, change mutable to immutable segment
name|kvSize
operator|.
name|incMemStoreSize
argument_list|(
literal|0
argument_list|,
name|CSLMImmutableSegment
operator|.
name|DEEP_OVERHEAD_CSLM
operator|-
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|)
expr_stmt|;
name|size
operator|=
name|store
operator|.
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|kvSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|MemStoreSizing
name|kvSize2
init|=
operator|new
name|MemStoreSizing
argument_list|()
decl_stmt|;
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|2
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
name|kvSize2
argument_list|)
expr_stmt|;
name|kvSize2
operator|.
name|incMemStoreSize
argument_list|(
literal|0
argument_list|,
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|)
expr_stmt|;
comment|// Even though we add a new kv, we expect the flushable size to be 'same' since we have
comment|// not yet cleared the snapshot -- the above flush failed.
name|assertEquals
argument_list|(
name|kvSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|ffs
operator|.
name|fault
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|size
operator|=
name|store
operator|.
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
comment|// Size should be the foreground kv size.
name|assertEquals
argument_list|(
name|kvSize2
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|size
operator|=
name|store
operator|.
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
argument_list|,
name|size
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that compression and data block encoding are respected by the    * Store.createWriterInTmp() method, used on store flush.    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|hcd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|family
argument_list|)
operator|.
name|setCompressionType
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|GZ
argument_list|)
operator|.
name|setDataBlockEncoding
argument_list|(
name|DataBlockEncoding
operator|.
name|DIFF
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
comment|// Test createWriterInTmp()
name|StoreFileWriter
name|writer
init|=
name|store
operator|.
name|createWriterInTmp
argument_list|(
literal|4
argument_list|,
name|hcd
operator|.
name|getCompressionType
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|writer
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Verify that compression and encoding settings are respected
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hcd
operator|.
name|getCompressionType
argument_list|()
argument_list|,
name|reader
operator|.
name|getCompressionAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hcd
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|,
name|reader
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteExpiredStoreFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|testDeleteExpiredStoreFiles
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testDeleteExpiredStoreFiles
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param minVersions the MIN_VERSIONS for the column family    */
specifier|public
name|void
name|testDeleteExpiredStoreFiles
parameter_list|(
name|int
name|minVersions
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|storeFileNum
init|=
literal|4
decl_stmt|;
name|int
name|ttl
init|=
literal|4
decl_stmt|;
name|IncrementingEnvironmentEdge
name|edge
init|=
operator|new
name|IncrementingEnvironmentEdge
argument_list|()
decl_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Enable the expired store file deletion
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.store.delete.expired.storefile"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Set the compaction threshold higher to avoid normal compactions.
name|conf
operator|.
name|setInt
argument_list|(
name|CompactionConfiguration
operator|.
name|HBASE_HSTORE_COMPACTION_MIN_KEY
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|minVersions
argument_list|,
name|conf
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|family
argument_list|)
operator|.
name|setMinVersions
argument_list|(
name|minVersions
argument_list|)
operator|.
name|setTimeToLive
argument_list|(
name|ttl
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|storeTtl
init|=
name|this
operator|.
name|store
operator|.
name|getScanInfo
argument_list|()
operator|.
name|getTtl
argument_list|()
decl_stmt|;
name|long
name|sleepTime
init|=
name|storeTtl
operator|/
name|storeFileNum
decl_stmt|;
name|long
name|timeStamp
decl_stmt|;
comment|// There are 4 store files and the max time stamp difference among these
comment|// store files will be (this.store.ttl / storeFileNum)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|storeFileNum
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding some data for the store file #"
operator|+
name|i
argument_list|)
expr_stmt|;
name|timeStamp
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|timeStamp
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
name|timeStamp
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
name|timeStamp
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|flush
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|edge
operator|.
name|incrementTime
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
comment|// Verify the total number of store files
name|assertEquals
argument_list|(
name|storeFileNum
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Each call will find one expired store file and delete it before compaction happens.
comment|// There will be no compaction due to threshold above. Last file will not be replaced.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|storeFileNum
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
comment|// verify the expired store file.
name|assertFalse
argument_list|(
name|this
operator|.
name|store
operator|.
name|requestCompaction
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|sfs
init|=
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
comment|// Ensure i files are gone.
if|if
condition|(
name|minVersions
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|storeFileNum
operator|-
name|i
argument_list|,
name|sfs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Ensure only non-expired files remain.
for|for
control|(
name|HStoreFile
name|sf
range|:
name|sfs
control|)
block|{
name|assertTrue
argument_list|(
name|sf
operator|.
name|getReader
argument_list|()
operator|.
name|getMaxTimestamp
argument_list|()
operator|>=
operator|(
name|edge
operator|.
name|currentTime
argument_list|()
operator|-
name|storeTtl
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|storeFileNum
argument_list|,
name|sfs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Let the next store file expired.
name|edge
operator|.
name|incrementTime
argument_list|(
name|sleepTime
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|this
operator|.
name|store
operator|.
name|requestCompaction
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|sfs
init|=
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
comment|// Assert the last expired file is not removed.
if|if
condition|(
name|minVersions
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sfs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|ts
init|=
name|sfs
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getReader
argument_list|()
operator|.
name|getMaxTimestamp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ts
operator|<
operator|(
name|edge
operator|.
name|currentTime
argument_list|()
operator|-
name|storeTtl
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HStoreFile
name|sf
range|:
name|sfs
control|)
block|{
name|sf
operator|.
name|closeStoreFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLowestModificationTime
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Initialize region
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|storeFileNum
init|=
literal|4
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|storeFileNum
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding some data for the store file #"
operator|+
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
name|i
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
name|i
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
name|i
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|flush
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// after flush; check the lowest time stamp
name|long
name|lowestTimeStampFromManager
init|=
name|StoreUtils
operator|.
name|getLowestTimestamp
argument_list|(
name|store
operator|.
name|getStorefiles
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|lowestTimeStampFromFS
init|=
name|getLowestTimeStampFromFS
argument_list|(
name|fs
argument_list|,
name|store
operator|.
name|getStorefiles
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|lowestTimeStampFromManager
argument_list|,
name|lowestTimeStampFromFS
argument_list|)
expr_stmt|;
comment|// after compact; check the lowest time stamp
name|store
operator|.
name|compact
argument_list|(
name|store
operator|.
name|requestCompaction
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|NoLimitThroughputController
operator|.
name|INSTANCE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|lowestTimeStampFromManager
operator|=
name|StoreUtils
operator|.
name|getLowestTimestamp
argument_list|(
name|store
operator|.
name|getStorefiles
argument_list|()
argument_list|)
expr_stmt|;
name|lowestTimeStampFromFS
operator|=
name|getLowestTimeStampFromFS
argument_list|(
name|fs
argument_list|,
name|store
operator|.
name|getStorefiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lowestTimeStampFromManager
argument_list|,
name|lowestTimeStampFromFS
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
name|getLowestTimeStampFromFS
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|candidates
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|minTs
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
name|candidates
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|minTs
return|;
block|}
name|Path
index|[]
name|p
init|=
operator|new
name|Path
index|[
name|candidates
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HStoreFile
name|sf
range|:
name|candidates
control|)
block|{
name|p
index|[
name|i
index|]
operator|=
name|sf
operator|.
name|getPath
argument_list|()
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|FileStatus
index|[]
name|stats
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
operator|||
name|stats
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|minTs
return|;
block|}
for|for
control|(
name|FileStatus
name|s
range|:
name|stats
control|)
block|{
name|minTs
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minTs
argument_list|,
name|s
operator|.
name|getModificationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|minTs
return|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Get tests
comment|//////////////////////////////////////////////////////////////////////////////
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKSIZE_SMALL
init|=
literal|8192
decl_stmt|;
comment|/**    * Test for hbase-1686.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testEmptyStoreFile
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write a store file.
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Now put in place an empty store file.  Its a little tricky.  Have to
comment|// do manually with hacked in sequence id.
name|HStoreFile
name|f
init|=
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Path
name|storedir
init|=
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|long
name|seqid
init|=
name|f
operator|.
name|getMaxSequenceId
argument_list|()
decl_stmt|;
name|Configuration
name|c
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|BLOCKSIZE_SMALL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFileWriter
name|w
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|c
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|c
argument_list|)
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|storedir
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|w
operator|.
name|appendMetadata
argument_list|(
name|seqid
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Reopen it... should pick up two files
name|this
operator|.
name|store
operator|=
operator|new
name|HStore
argument_list|(
name|this
operator|.
name|store
operator|.
name|getHRegion
argument_list|()
argument_list|,
name|this
operator|.
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|qualifiers
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Getting data from memstore only    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testGet_FromMemStoreOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Get
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|qualifiers
argument_list|)
expr_stmt|;
comment|//Compare
name|assertCheck
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeRangeIfSomeCellsAreDroppedInFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|testTimeRangeIfSomeCellsAreDroppedInFlush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|testTimeRangeIfSomeCellsAreDroppedInFlush
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|testTimeRangeIfSomeCellsAreDroppedInFlush
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testTimeRangeIfSomeCellsAreDroppedInFlush
parameter_list|(
name|int
name|maxVersion
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|maxVersion
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|currentTs
init|=
literal|100
decl_stmt|;
name|long
name|minTs
init|=
name|currentTs
decl_stmt|;
comment|// the extra cell won't be flushed to disk,
comment|// so the min of timerange will be different between memStore and hfile.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
operator|(
name|maxVersion
operator|+
literal|1
operator|)
condition|;
operator|++
name|i
control|)
block|{
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
operator|++
name|currentTs
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|minTs
operator|=
name|currentTs
expr_stmt|;
block|}
block|}
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|files
init|=
name|store
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|files
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HStoreFile
name|f
init|=
name|files
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|f
operator|.
name|initReader
argument_list|()
expr_stmt|;
name|StoreFileReader
name|reader
init|=
name|f
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|minTs
argument_list|,
name|reader
operator|.
name|timeRange
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentTs
argument_list|,
name|reader
operator|.
name|timeRange
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Getting data from files only    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testGet_FromFilesOnly
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|//Get
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|qualifiers
argument_list|)
expr_stmt|;
comment|//this.store.get(get, qualifiers, result);
comment|//Need to sort the result since multiple files
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|,
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
comment|//Compare
name|assertCheck
argument_list|()
expr_stmt|;
block|}
comment|/**    * Getting data from memstore and files    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testGet_FromMemStoreAndFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
comment|//Put data in memstore
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf4
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//flush
name|flush
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//Add more data
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf5
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf6
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Get
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
operator|.
name|getRow
argument_list|()
argument_list|,
name|qualifiers
argument_list|)
expr_stmt|;
comment|//Need to sort the result since multiple files
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|,
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
comment|//Compare
name|assertCheck
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|flush
parameter_list|(
name|int
name|storeFilessize
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|storeFilessize
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|AbstractMemStore
operator|)
name|this
operator|.
name|store
operator|.
name|memstore
operator|)
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCheck
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|EnvironmentEdgeManagerTestHelper
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
name|store
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|region
operator|!=
literal|null
condition|)
block|{
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|IOException
block|{
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandleErrorsInFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setting up a faulty file system that cannot write"
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"testhandleerrorsinflush"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"foo"
block|}
argument_list|)
decl_stmt|;
comment|// Inject our faulty LocalFileSystem
name|conf
operator|.
name|setClass
argument_list|(
literal|"fs.file.impl"
argument_list|,
name|FaultyFileSystem
operator|.
name|class
argument_list|,
name|FileSystem
operator|.
name|class
argument_list|)
expr_stmt|;
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make sure it worked (above is sensitive to caching details in hadoop core)
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|FaultyFileSystem
operator|.
name|class
argument_list|,
name|fs
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initialize region
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding some data"
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Before flush, we should have no files"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|StoreFileInfo
argument_list|>
name|files
init|=
name|store
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getStoreFiles
argument_list|(
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|files
operator|!=
literal|null
condition|?
name|files
operator|.
name|size
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
comment|//flush
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Flushing"
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't bubble up IOE!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Fault injected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"After failed flush, we should still have no files!"
argument_list|)
expr_stmt|;
name|files
operator|=
name|store
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getStoreFiles
argument_list|(
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|files
operator|!=
literal|null
condition|?
name|files
operator|.
name|size
argument_list|()
else|:
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|getHRegion
argument_list|()
operator|.
name|getWAL
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|user
operator|.
name|getUGI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Faulty file system that will fail if you write past its fault position the FIRST TIME    * only; thereafter it will succeed.  Used by {@link TestHRegion} too.    */
specifier|static
class|class
name|FaultyFileSystem
extends|extends
name|FilterFileSystem
block|{
name|List
argument_list|<
name|SoftReference
argument_list|<
name|FaultyOutputStream
argument_list|>
argument_list|>
name|outStreams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|faultPos
init|=
literal|200
decl_stmt|;
name|AtomicBoolean
name|fault
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|FaultyFileSystem
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|LocalFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Creating faulty!"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FaultyOutputStream
argument_list|(
name|super
operator|.
name|create
argument_list|(
name|p
argument_list|)
argument_list|,
name|faultPos
argument_list|,
name|fault
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|create
parameter_list|(
name|Path
name|f
parameter_list|,
name|FsPermission
name|permission
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FaultyOutputStream
argument_list|(
name|super
operator|.
name|create
argument_list|(
name|f
argument_list|,
name|permission
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
argument_list|,
name|faultPos
argument_list|,
name|fault
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FSDataOutputStream
name|createNonRecursive
parameter_list|(
name|Path
name|f
parameter_list|,
name|boolean
name|overwrite
parameter_list|,
name|int
name|bufferSize
parameter_list|,
name|short
name|replication
parameter_list|,
name|long
name|blockSize
parameter_list|,
name|Progressable
name|progress
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Fake it.  Call create instead.  The default implementation throws an IOE
comment|// that this is not supported.
return|return
name|create
argument_list|(
name|f
argument_list|,
name|overwrite
argument_list|,
name|bufferSize
argument_list|,
name|replication
argument_list|,
name|blockSize
argument_list|,
name|progress
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|FaultyOutputStream
extends|extends
name|FSDataOutputStream
block|{
specifier|volatile
name|long
name|faultPos
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|fault
decl_stmt|;
specifier|public
name|FaultyOutputStream
parameter_list|(
name|FSDataOutputStream
name|out
parameter_list|,
name|long
name|faultPos
parameter_list|,
specifier|final
name|AtomicBoolean
name|fault
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|faultPos
operator|=
name|faultPos
expr_stmt|;
name|this
operator|.
name|fault
operator|=
name|fault
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|buf
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"faulty stream write at pos "
operator|+
name|getPos
argument_list|()
argument_list|)
expr_stmt|;
name|injectFault
argument_list|()
expr_stmt|;
name|super
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|injectFault
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|fault
operator|.
name|get
argument_list|()
operator|&&
name|getPos
argument_list|()
operator|>=
name|faultPos
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Fault injected"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|flushStore
parameter_list|(
name|HStore
name|store
parameter_list|,
name|long
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFlushContext
name|storeFlushCtx
init|=
name|store
operator|.
name|createFlushContext
argument_list|(
name|id
argument_list|,
name|FlushLifeCycleTracker
operator|.
name|DUMMY
argument_list|)
decl_stmt|;
name|storeFlushCtx
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|storeFlushCtx
operator|.
name|flushCache
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|storeFlushCtx
operator|.
name|commit
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Generate a list of KeyValues for testing based on given parameters    * @param timestamps    * @param numRows    * @param qualifier    * @param family    * @return    */
name|List
argument_list|<
name|Cell
argument_list|>
name|getKeyValueSet
parameter_list|(
name|long
index|[]
name|timestamps
parameter_list|,
name|int
name|numRows
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|kvList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|timestamp
range|:
name|timestamps
control|)
block|{
name|kvList
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|kvList
return|;
block|}
comment|/**    * Test to ensure correctness when using Stores with multiple timestamps    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testMultipleTimestamps
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numRows
init|=
literal|1
decl_stmt|;
name|long
index|[]
name|timestamps1
init|=
operator|new
name|long
index|[]
block|{
literal|1
block|,
literal|5
block|,
literal|10
block|,
literal|20
block|}
decl_stmt|;
name|long
index|[]
name|timestamps2
init|=
operator|new
name|long
index|[]
block|{
literal|30
block|,
literal|80
block|}
decl_stmt|;
name|init
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|kvList1
init|=
name|getKeyValueSet
argument_list|(
name|timestamps1
argument_list|,
name|numRows
argument_list|,
name|qf1
argument_list|,
name|family
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|kvList1
control|)
block|{
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
name|kv
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|store
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|kvList2
init|=
name|getKeyValueSet
argument_list|(
name|timestamps2
argument_list|,
name|numRows
argument_list|,
name|qf1
argument_list|,
name|family
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|kvList2
control|)
block|{
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
name|kv
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|result
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|40
argument_list|,
literal|90
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|10
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|80
argument_list|,
literal|145
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|90
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|result
operator|=
name|HBaseTestingUtility
operator|.
name|getFromStoreFile
argument_list|(
name|store
argument_list|,
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for HBASE-3492 - Test split on empty colfam (no store files).    *    * @throws IOException When the IO operations fail.    */
annotation|@
name|Test
specifier|public
name|void
name|testSplitWithEmptyColFam
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|getSplitPoint
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|getHRegion
argument_list|()
operator|.
name|forceSplit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|getSplitPoint
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|getHRegion
argument_list|()
operator|.
name|clearSplit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreUsesConfigurationFromHcdAndHtd
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|CONFIG_KEY
init|=
literal|"hbase.regionserver.thread.compaction.throttle"
decl_stmt|;
name|long
name|anyValue
init|=
literal|10
decl_stmt|;
comment|// We'll check that it uses correct config and propagates it appropriately by going thru
comment|// the simplest "real" path I can find - "throttleCompaction", which just checks whether
comment|// a number we pass in is higher than some config value, inside compactionPolicy.
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CONFIG_KEY
argument_list|,
name|anyValue
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-xml"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|store
operator|.
name|throttleCompaction
argument_list|(
name|anyValue
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|throttleCompaction
argument_list|(
name|anyValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// HTD overrides XML.
operator|--
name|anyValue
expr_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-htd"
argument_list|,
name|conf
argument_list|,
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
operator|.
name|setValue
argument_list|(
name|CONFIG_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|anyValue
argument_list|)
argument_list|)
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|store
operator|.
name|throttleCompaction
argument_list|(
name|anyValue
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|throttleCompaction
argument_list|(
name|anyValue
argument_list|)
argument_list|)
expr_stmt|;
comment|// HCD overrides them both.
operator|--
name|anyValue
expr_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-hcd"
argument_list|,
name|conf
argument_list|,
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
operator|.
name|setValue
argument_list|(
name|CONFIG_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|anyValue
argument_list|)
argument_list|)
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|family
argument_list|)
operator|.
name|setValue
argument_list|(
name|CONFIG_KEY
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|anyValue
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|store
operator|.
name|throttleCompaction
argument_list|(
name|anyValue
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|throttleCompaction
argument_list|(
name|anyValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|DummyStoreEngine
extends|extends
name|DefaultStoreEngine
block|{
specifier|public
specifier|static
name|DefaultCompactor
name|lastCreatedCompactor
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|createComponents
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HStore
name|store
parameter_list|,
name|CellComparator
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|createComponents
argument_list|(
name|conf
argument_list|,
name|store
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|lastCreatedCompactor
operator|=
name|this
operator|.
name|compactor
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreUsesSearchEngineOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|StoreEngine
operator|.
name|STORE_ENGINE_CLASS_KEY
argument_list|,
name|DummyStoreEngine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DummyStoreEngine
operator|.
name|lastCreatedCompactor
argument_list|,
name|this
operator|.
name|store
operator|.
name|storeEngine
operator|.
name|getCompactor
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addStoreFile
parameter_list|()
throws|throws
name|IOException
block|{
name|HStoreFile
name|f
init|=
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Path
name|storedir
init|=
name|f
operator|.
name|getPath
argument_list|()
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|long
name|seqid
init|=
name|this
operator|.
name|store
operator|.
name|getMaxSequenceId
argument_list|()
operator|.
name|orElse
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
name|Configuration
name|c
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|HFileContext
name|fileContext
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|BLOCKSIZE_SMALL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFileWriter
name|w
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|c
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|c
argument_list|)
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|storedir
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|fileContext
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|w
operator|.
name|appendMetadata
argument_list|(
name|seqid
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added store file:"
operator|+
name|w
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|archiveStoreFile
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|files
init|=
name|this
operator|.
name|store
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
name|HStoreFile
name|sf
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|HStoreFile
argument_list|>
name|it
init|=
name|files
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|index
condition|;
name|i
operator|++
control|)
block|{
name|sf
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|store
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|removeStoreFiles
argument_list|(
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|sf
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|closeCompactedFile
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|files
init|=
name|this
operator|.
name|store
operator|.
name|getStoreEngine
argument_list|()
operator|.
name|getStoreFileManager
argument_list|()
operator|.
name|getCompactedfiles
argument_list|()
decl_stmt|;
name|HStoreFile
name|sf
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|HStoreFile
argument_list|>
name|it
init|=
name|files
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|index
condition|;
name|i
operator|++
control|)
block|{
name|sf
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|sf
operator|.
name|closeStoreFile
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|getStoreEngine
argument_list|()
operator|.
name|getStoreFileManager
argument_list|()
operator|.
name|removeCompactedFiles
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|sf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRefreshStoreFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test refreshing store files when no store files are there
name|store
operator|.
name|refreshStoreFiles
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// add some data, flush
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// add one more file
name|addStoreFile
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|refreshStoreFiles
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// add three more files
name|addStoreFile
argument_list|()
expr_stmt|;
name|addStoreFile
argument_list|()
expr_stmt|;
name|addStoreFile
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|refreshStoreFiles
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|closeCompactedFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|archiveStoreFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|refreshStoreFiles
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|archiveStoreFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|archiveStoreFile
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|archiveStoreFile
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|refreshStoreFiles
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|archiveStoreFile
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|refreshStoreFiles
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testRefreshStoreFilesNotChanged
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// add some data, flush
name|this
operator|.
name|store
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// add one more file
name|addStoreFile
argument_list|()
expr_stmt|;
name|HStore
name|spiedStore
init|=
name|spy
argument_list|(
name|store
argument_list|)
decl_stmt|;
comment|// call first time after files changed
name|spiedStore
operator|.
name|refreshStoreFiles
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spiedStore
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|replaceStoreFiles
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
comment|// call second time
name|spiedStore
operator|.
name|refreshStoreFiles
argument_list|()
expr_stmt|;
comment|//ensure that replaceStoreFiles is not called if files are not refreshed
name|verify
argument_list|(
name|spiedStore
argument_list|,
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|replaceStoreFiles
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|countMemStoreScanner
parameter_list|(
name|StoreScanner
name|scanner
parameter_list|)
block|{
if|if
condition|(
name|scanner
operator|.
name|currentScanners
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|scanner
operator|.
name|currentScanners
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isFileScanner
argument_list|()
argument_list|)
operator|.
name|count
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNumberOfMemStoreScannersAfterFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|seqId
init|=
literal|100
decl_stmt|;
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Cell
name|cell0
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|DEEP_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qf1
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
operator|.
name|setType
argument_list|(
name|CellBuilder
operator|.
name|DataType
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|qf1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|cell0
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
name|testNumberOfMemStoreScannersAfterFlush
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cell0
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|cell1
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|DEEP_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qf2
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
operator|.
name|setType
argument_list|(
name|CellBuilder
operator|.
name|DataType
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|qf1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|cell1
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
name|testNumberOfMemStoreScannersAfterFlush
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cell0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|cell1
argument_list|)
argument_list|)
expr_stmt|;
name|seqId
operator|=
literal|101
expr_stmt|;
name|timestamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|Cell
name|cell2
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|DEEP_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|row2
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qf2
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|timestamp
argument_list|)
operator|.
name|setType
argument_list|(
name|CellBuilder
operator|.
name|DataType
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|qf1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|cell2
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
name|testNumberOfMemStoreScannersAfterFlush
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cell0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|cell1
argument_list|,
name|cell2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testNumberOfMemStoreScannersAfterFlush
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|inputCellsBeforeSnapshot
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|inputCellsAfterSnapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-"
operator|+
name|inputCellsBeforeSnapshot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|quals
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|long
name|seqId
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|inputCellsBeforeSnapshot
control|)
block|{
name|quals
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|seqId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|seqId
argument_list|,
name|c
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Cell
name|c
range|:
name|inputCellsAfterSnapshot
control|)
block|{
name|quals
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|seqId
operator|=
name|Math
operator|.
name|max
argument_list|(
name|seqId
argument_list|,
name|c
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|inputCellsBeforeSnapshot
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|store
operator|.
name|add
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|StoreFlushContext
name|storeFlushCtx
init|=
name|store
operator|.
name|createFlushContext
argument_list|(
name|id
operator|++
argument_list|,
name|FlushLifeCycleTracker
operator|.
name|DUMMY
argument_list|)
decl_stmt|;
name|storeFlushCtx
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|inputCellsAfterSnapshot
operator|.
name|forEach
argument_list|(
name|c
lambda|->
name|store
operator|.
name|add
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numberOfMemScannersBeforeFlush
init|=
name|inputCellsAfterSnapshot
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
literal|2
decl_stmt|;
try|try
init|(
name|StoreScanner
name|s
init|=
operator|(
name|StoreScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|,
name|quals
argument_list|,
name|seqId
argument_list|)
init|)
block|{
comment|// snapshot + active (if inputCellsAfterSnapshot isn't empty)
name|assertEquals
argument_list|(
name|numberOfMemScannersBeforeFlush
argument_list|,
name|countMemStoreScanner
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|storeFlushCtx
operator|.
name|flushCache
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|storeFlushCtx
operator|.
name|commit
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// snapshot has no data after flush
name|int
name|numberOfMemScannersAfterFlush
init|=
name|inputCellsAfterSnapshot
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
literal|1
decl_stmt|;
name|boolean
name|more
decl_stmt|;
name|int
name|cellCount
init|=
literal|0
decl_stmt|;
do|do
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|more
operator|=
name|s
operator|.
name|next
argument_list|(
name|cells
argument_list|)
expr_stmt|;
name|cellCount
operator|+=
name|cells
operator|.
name|size
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|more
condition|?
name|numberOfMemScannersAfterFlush
else|:
literal|0
argument_list|,
name|countMemStoreScanner
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|more
condition|)
do|;
name|assertEquals
argument_list|(
literal|"The number of cells added before snapshot is "
operator|+
name|inputCellsBeforeSnapshot
operator|.
name|size
argument_list|()
operator|+
literal|", The number of cells added after snapshot is "
operator|+
name|inputCellsAfterSnapshot
operator|.
name|size
argument_list|()
argument_list|,
name|inputCellsBeforeSnapshot
operator|.
name|size
argument_list|()
operator|+
name|inputCellsAfterSnapshot
operator|.
name|size
argument_list|()
argument_list|,
name|cellCount
argument_list|)
expr_stmt|;
comment|// the current scanners is cleared
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countMemStoreScanner
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Cell
name|createCell
parameter_list|(
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|ts
parameter_list|,
name|long
name|sequenceId
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createCell
argument_list|(
name|row
argument_list|,
name|qualifier
argument_list|,
name|ts
argument_list|,
name|sequenceId
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|private
name|Cell
name|createCell
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|ts
parameter_list|,
name|long
name|sequenceId
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
name|c
init|=
name|CellBuilderFactory
operator|.
name|create
argument_list|(
name|CellBuilderType
operator|.
name|DEEP_COPY
argument_list|)
operator|.
name|setRow
argument_list|(
name|row
argument_list|)
operator|.
name|setFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setQualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
operator|.
name|setType
argument_list|(
name|CellBuilder
operator|.
name|DataType
operator|.
name|Put
argument_list|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|c
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushBeforeCompletingScanWoFilter
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|AtomicBoolean
name|timeToGoNextRow
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|expectedSize
init|=
literal|3
decl_stmt|;
name|testFlushBeforeCompletingScan
argument_list|(
operator|new
name|MyListHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|hook
parameter_list|(
name|int
name|currentSize
parameter_list|)
block|{
if|if
condition|(
name|currentSize
operator|==
name|expectedSize
operator|-
literal|1
condition|)
block|{
try|try
block|{
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|timeToGoNextRow
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
argument_list|,
operator|new
name|FilterBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
operator|.
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
block|}
argument_list|,
name|expectedSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushBeforeCompletingScanWithFilter
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|AtomicBoolean
name|timeToGoNextRow
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|expectedSize
init|=
literal|2
decl_stmt|;
name|testFlushBeforeCompletingScan
argument_list|(
operator|new
name|MyListHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|hook
parameter_list|(
name|int
name|currentSize
parameter_list|)
block|{
if|if
condition|(
name|currentSize
operator|==
name|expectedSize
operator|-
literal|1
condition|)
block|{
try|try
block|{
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|timeToGoNextRow
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
argument_list|,
operator|new
name|FilterBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
operator|.
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timeToGoNextRow
operator|.
name|get
argument_list|()
condition|)
block|{
name|timeToGoNextRow
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|ReturnCode
operator|.
name|NEXT_ROW
return|;
block|}
else|else
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
block|}
block|}
argument_list|,
name|expectedSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushBeforeCompletingScanWithFilterHint
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|AtomicBoolean
name|timeToGetHint
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|expectedSize
init|=
literal|2
decl_stmt|;
name|testFlushBeforeCompletingScan
argument_list|(
operator|new
name|MyListHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|hook
parameter_list|(
name|int
name|currentSize
parameter_list|)
block|{
if|if
condition|(
name|currentSize
operator|==
name|expectedSize
operator|-
literal|1
condition|)
block|{
try|try
block|{
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
name|timeToGetHint
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
argument_list|,
operator|new
name|FilterBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Filter
operator|.
name|ReturnCode
name|filterCell
parameter_list|(
specifier|final
name|Cell
name|c
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|timeToGetHint
operator|.
name|get
argument_list|()
condition|)
block|{
name|timeToGetHint
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|Filter
operator|.
name|ReturnCode
operator|.
name|SEEK_NEXT_USING_HINT
return|;
block|}
else|else
block|{
return|return
name|Filter
operator|.
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextCellHint
parameter_list|(
name|Cell
name|currentCell
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|currentCell
return|;
block|}
block|}
argument_list|,
name|expectedSize
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testFlushBeforeCompletingScan
parameter_list|(
name|MyListHook
name|hook
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|int
name|expectedSize
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|byte
index|[]
name|r0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row0"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|r1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|r2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value0"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
name|MemStoreSizing
name|memStoreSizing
init|=
operator|new
name|MemStoreSizing
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|seqId
init|=
literal|100
decl_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|MyStoreHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|getSmallestReadPoint
parameter_list|(
name|HStore
name|store
parameter_list|)
block|{
return|return
name|seqId
operator|+
literal|3
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// The cells having the value0 won't be flushed to disk because the value of max version is 1
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r0
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value0
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r0
argument_list|,
name|qf2
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value0
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r0
argument_list|,
name|qf3
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value0
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r1
argument_list|,
name|qf1
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|value1
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r1
argument_list|,
name|qf2
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|value1
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r1
argument_list|,
name|qf3
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|value1
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r2
argument_list|,
name|qf1
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|seqId
operator|+
literal|2
argument_list|,
name|value2
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r2
argument_list|,
name|qf2
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|seqId
operator|+
literal|2
argument_list|,
name|value2
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r2
argument_list|,
name|qf3
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|seqId
operator|+
literal|2
argument_list|,
name|value2
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r1
argument_list|,
name|qf1
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
name|seqId
operator|+
literal|3
argument_list|,
name|value1
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r1
argument_list|,
name|qf2
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
name|seqId
operator|+
literal|3
argument_list|,
name|value1
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|r1
argument_list|,
name|qf3
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
name|seqId
operator|+
literal|3
argument_list|,
name|value1
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|myList
init|=
operator|new
name|MyList
argument_list|<>
argument_list|(
name|hook
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|r1
argument_list|)
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
decl_stmt|;
try|try
init|(
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
literal|null
argument_list|,
name|seqId
operator|+
literal|3
argument_list|)
init|)
block|{
comment|// r1
name|scanner
operator|.
name|next
argument_list|(
name|myList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|myList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|myList
control|)
block|{
name|byte
index|[]
name|actualValue
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value1
argument_list|)
operator|+
literal|", actual:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|actualValue
argument_list|)
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|actualValue
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|normalList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// r2
name|scanner
operator|.
name|next
argument_list|(
name|normalList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|normalList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|normalList
control|)
block|{
name|byte
index|[]
name|actualValue
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value2
argument_list|)
operator|+
literal|", actual:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|actualValue
argument_list|)
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|actualValue
argument_list|,
name|value2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateScannerAndSnapshotConcurrently
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HStore
operator|.
name|MEMSTORE_CLASS_NAME
argument_list|,
name|MyCompactingMemStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|family
argument_list|)
operator|.
name|setInMemoryCompaction
argument_list|(
name|MemoryCompactionPolicy
operator|.
name|BASIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|MemStoreSizing
name|memStoreSizing
init|=
operator|new
name|MemStoreSizing
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|seqId
init|=
literal|100
decl_stmt|;
comment|// older data whihc shouldn't be "seen" by client
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf2
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf3
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|quals
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|quals
operator|.
name|add
argument_list|(
name|qf1
argument_list|)
expr_stmt|;
name|quals
operator|.
name|add
argument_list|(
name|qf2
argument_list|)
expr_stmt|;
name|quals
operator|.
name|add
argument_list|(
name|qf3
argument_list|)
expr_stmt|;
name|StoreFlushContext
name|storeFlushCtx
init|=
name|store
operator|.
name|createFlushContext
argument_list|(
name|id
operator|++
argument_list|,
name|FlushLifeCycleTracker
operator|.
name|DUMMY
argument_list|)
decl_stmt|;
name|MyCompactingMemStore
operator|.
name|START_TEST
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Runnable
name|flush
init|=
parameter_list|()
lambda|->
block|{
comment|// this is blocked until we create first scanner from pipeline and snapshot -- phase (1/5)
comment|// recreate the active memstore -- phase (4/5)
name|storeFlushCtx
operator|.
name|prepare
argument_list|()
expr_stmt|;
block|}
decl_stmt|;
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|service
operator|.
name|submit
argument_list|(
name|flush
argument_list|)
expr_stmt|;
comment|// we get scanner from pipeline and snapshot but they are empty. -- phase (2/5)
comment|// this is blocked until we recreate the active memstore -- phase (3/5)
comment|// we get scanner from active memstore but it is empty -- phase (5/5)
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|,
name|quals
argument_list|,
name|seqId
operator|+
literal|1
argument_list|)
decl_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|service
operator|.
name|awaitTermination
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
try|try
block|{
try|try
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|results
control|)
block|{
name|byte
index|[]
name|actualValue
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value
argument_list|)
operator|+
literal|", actual:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|actualValue
argument_list|)
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|actualValue
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|MyCompactingMemStore
operator|.
name|START_TEST
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|storeFlushCtx
operator|.
name|flushCache
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|storeFlushCtx
operator|.
name|commit
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanWithDoubleFlush
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Initialize region
name|MyStore
name|myStore
init|=
name|initMyStore
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
operator|new
name|MyStoreHook
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getScanners
parameter_list|(
name|MyStore
name|store
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|tmpId
init|=
name|id
operator|++
decl_stmt|;
name|ExecutorService
name|s
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|s
operator|.
name|submit
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
comment|// flush the store before storescanner updates the scanners from store.
comment|// The current data will be flushed into files, and the memstore will
comment|// be clear.
comment|// -- phase (4/4)
name|flushStore
argument_list|(
name|store
argument_list|,
name|tmpId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|s
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
comment|// wait for the flush, the thread will be blocked in HStore#notifyChangedReadersObservers.
name|s
operator|.
name|awaitTermination
argument_list|(
literal|3
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{         }
block|}
block|}
argument_list|)
decl_stmt|;
name|byte
index|[]
name|oldValue
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"oldValue"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|currentValue
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"currentValue"
argument_list|)
decl_stmt|;
name|MemStoreSizing
name|memStoreSizing
init|=
operator|new
name|MemStoreSizing
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|seqId
init|=
literal|100
decl_stmt|;
comment|// older data whihc shouldn't be "seen" by client
name|myStore
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|oldValue
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|myStore
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf2
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|oldValue
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|myStore
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf3
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|oldValue
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|long
name|snapshotId
init|=
name|id
operator|++
decl_stmt|;
comment|// push older data into snapshot -- phase (1/4)
name|StoreFlushContext
name|storeFlushCtx
init|=
name|store
operator|.
name|createFlushContext
argument_list|(
name|snapshotId
argument_list|,
name|FlushLifeCycleTracker
operator|.
name|DUMMY
argument_list|)
decl_stmt|;
name|storeFlushCtx
operator|.
name|prepare
argument_list|()
expr_stmt|;
comment|// insert current data into active -- phase (2/4)
name|myStore
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|myStore
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf2
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|myStore
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf3
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|currentValue
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|quals
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|quals
operator|.
name|add
argument_list|(
name|qf1
argument_list|)
expr_stmt|;
name|quals
operator|.
name|add
argument_list|(
name|qf2
argument_list|)
expr_stmt|;
name|quals
operator|.
name|add
argument_list|(
name|qf3
argument_list|)
expr_stmt|;
try|try
init|(
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|myStore
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|,
name|quals
argument_list|,
name|seqId
operator|+
literal|1
argument_list|)
init|)
block|{
comment|// complete the flush -- phase (3/4)
name|storeFlushCtx
operator|.
name|flushCache
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|storeFlushCtx
operator|.
name|commit
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|results
control|)
block|{
name|byte
index|[]
name|actualValue
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|currentValue
argument_list|)
operator|+
literal|", actual:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|actualValue
argument_list|)
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|actualValue
argument_list|,
name|currentValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReclaimChunkWhenScaning
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|(
literal|"testReclaimChunkWhenScaning"
argument_list|)
expr_stmt|;
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|seqId
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
comment|// older data whihc shouldn't be "seen" by client
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf2
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf3
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|quals
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|quals
operator|.
name|add
argument_list|(
name|qf1
argument_list|)
expr_stmt|;
name|quals
operator|.
name|add
argument_list|(
name|qf2
argument_list|)
expr_stmt|;
name|quals
operator|.
name|add
argument_list|(
name|qf3
argument_list|)
expr_stmt|;
try|try
init|(
name|InternalScanner
name|scanner
init|=
operator|(
name|InternalScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|,
name|quals
argument_list|,
name|seqId
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|MyList
argument_list|<>
argument_list|(
name|size
lambda|->
block|{
switch|switch
condition|(
name|size
condition|)
block|{
comment|// 1) we get the first cell (qf1)
comment|// 2) flush the data to have StoreScanner update inner scanners
comment|// 3) the chunk will be reclaimed after updaing
case|case
literal|1
case|:
try|try
block|{
name|flushStore
argument_list|(
name|store
argument_list|,
name|id
operator|++
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
comment|// 1) we get the second cell (qf2)
comment|// 2) add some cell to fill some byte into the chunk (we have only one chunk)
case|case
literal|2
case|:
try|try
block|{
name|byte
index|[]
name|newValue
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"newValue"
argument_list|)
decl_stmt|;
comment|// older data whihc shouldn't be "seen" by client
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|newValue
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf2
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|newValue
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf3
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|newValue
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
break|break;
block|}
block|}
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|results
control|)
block|{
name|byte
index|[]
name|actualValue
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value
argument_list|)
operator|+
literal|", actual:"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|actualValue
argument_list|)
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|actualValue
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * If there are two running InMemoryFlushRunnable, the later InMemoryFlushRunnable    * may change the versionedList. And the first InMemoryFlushRunnable will use the chagned    * versionedList to remove the corresponding segments.    * In short, there will be some segements which isn't in merge are removed.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testRunDoubleMemStoreCompactors
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|flushSize
init|=
literal|500
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HStore
operator|.
name|MEMSTORE_CLASS_NAME
argument_list|,
name|MyCompactingMemStoreWithCustomCompactor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|flushSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the lower threshold to invoke the "MERGE" policy
name|conf
operator|.
name|set
argument_list|(
name|MemStoreCompactionStrategy
operator|.
name|COMPACTING_MEMSTORE_THRESHOLD_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|family
argument_list|)
operator|.
name|setInMemoryCompaction
argument_list|(
name|MemoryCompactionPolicy
operator|.
name|BASIC
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"thisisavarylargevalue"
argument_list|)
decl_stmt|;
name|MemStoreSizing
name|memStoreSizing
init|=
operator|new
name|MemStoreSizing
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|long
name|seqId
init|=
literal|100
decl_stmt|;
comment|// older data whihc shouldn't be "seen" by client
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf2
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf3
argument_list|,
name|ts
argument_list|,
name|seqId
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MyCompactingMemStoreWithCustomCompactor
operator|.
name|RUNNER_COUNT
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|StoreFlushContext
name|storeFlushCtx
init|=
name|store
operator|.
name|createFlushContext
argument_list|(
name|id
operator|++
argument_list|,
name|FlushLifeCycleTracker
operator|.
name|DUMMY
argument_list|)
decl_stmt|;
name|storeFlushCtx
operator|.
name|prepare
argument_list|()
expr_stmt|;
comment|// This shouldn't invoke another in-memory flush because the first compactor thread
comment|// hasn't accomplished the in-memory compaction.
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|seqId
operator|+
literal|1
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MyCompactingMemStoreWithCustomCompactor
operator|.
name|RUNNER_COUNT
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|//okay. Let the compaction be completed
name|MyMemStoreCompactor
operator|.
name|START_COMPACTOR_LATCH
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|CompactingMemStore
name|mem
init|=
call|(
name|CompactingMemStore
call|)
argument_list|(
operator|(
name|HStore
operator|)
name|store
argument_list|)
operator|.
name|memstore
decl_stmt|;
while|while
condition|(
name|mem
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// This should invoke another in-memory flush.
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|seqId
operator|+
literal|2
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|seqId
operator|+
literal|2
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|qf1
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|seqId
operator|+
literal|2
argument_list|,
name|value
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|MyCompactingMemStoreWithCustomCompactor
operator|.
name|RUNNER_COUNT
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|TableDescriptorBuilder
operator|.
name|DEFAULT_MEMSTORE_FLUSH_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|storeFlushCtx
operator|.
name|flushCache
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|storeFlushCtx
operator|.
name|commit
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|MonitoredTask
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAge
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|currentTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ManualEnvironmentEdge
name|edge
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|edge
operator|.
name|setValue
argument_list|(
name|currentTime
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ColumnFamilyDescriptor
name|hcd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|initHRegion
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|,
name|hcd
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HStore
name|store
init|=
operator|new
name|HStore
argument_list|(
name|region
argument_list|,
name|hcd
argument_list|,
name|conf
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|StoreEngine
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|createStoreEngine
parameter_list|(
name|HStore
name|store
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CellComparator
name|kvComparator
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HStoreFile
argument_list|>
name|storefiles
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|mockStoreFile
argument_list|(
name|currentTime
operator|-
literal|10
argument_list|)
argument_list|,
name|mockStoreFile
argument_list|(
name|currentTime
operator|-
literal|100
argument_list|)
argument_list|,
name|mockStoreFile
argument_list|(
name|currentTime
operator|-
literal|1000
argument_list|)
argument_list|,
name|mockStoreFile
argument_list|(
name|currentTime
operator|-
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|StoreFileManager
name|sfm
init|=
name|mock
argument_list|(
name|StoreFileManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sfm
operator|.
name|getStorefiles
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|storefiles
argument_list|)
expr_stmt|;
name|StoreEngine
argument_list|<
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|,
name|?
argument_list|>
name|storeEngine
init|=
name|mock
argument_list|(
name|StoreEngine
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|storeEngine
operator|.
name|getStoreFileManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sfm
argument_list|)
expr_stmt|;
return|return
name|storeEngine
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
literal|10L
argument_list|,
name|store
operator|.
name|getMinStoreFileAge
argument_list|()
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10000L
argument_list|,
name|store
operator|.
name|getMaxStoreFileAge
argument_list|()
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|10
operator|+
literal|100
operator|+
literal|1000
operator|+
literal|10000
operator|)
operator|/
literal|4.0
argument_list|,
name|store
operator|.
name|getAvgStoreFileAge
argument_list|()
operator|.
name|getAsDouble
argument_list|()
argument_list|,
literal|1E
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HStoreFile
name|mockStoreFile
parameter_list|(
name|long
name|createdTime
parameter_list|)
block|{
name|StoreFileInfo
name|info
init|=
name|mock
argument_list|(
name|StoreFileInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|info
operator|.
name|getCreatedTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|createdTime
argument_list|)
expr_stmt|;
name|HStoreFile
name|sf
init|=
name|mock
argument_list|(
name|HStoreFile
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|getReader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|StoreFileReader
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|isHFile
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|getFileInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|info
argument_list|)
expr_stmt|;
return|return
name|sf
return|;
block|}
specifier|private
name|MyStore
name|initMyStore
parameter_list|(
name|String
name|methodName
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|MyStoreHook
name|hook
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|MyStore
operator|)
name|init
argument_list|(
name|methodName
argument_list|,
name|conf
argument_list|,
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|hook
argument_list|)
return|;
block|}
specifier|private
class|class
name|MyStore
extends|extends
name|HStore
block|{
specifier|private
specifier|final
name|MyStoreHook
name|hook
decl_stmt|;
name|MyStore
parameter_list|(
specifier|final
name|HRegion
name|region
parameter_list|,
specifier|final
name|ColumnFamilyDescriptor
name|family
parameter_list|,
specifier|final
name|Configuration
name|confParam
parameter_list|,
name|MyStoreHook
name|hook
parameter_list|,
name|boolean
name|switchToPread
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|region
argument_list|,
name|family
argument_list|,
name|confParam
argument_list|)
expr_stmt|;
name|this
operator|.
name|hook
operator|=
name|hook
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|getScanners
parameter_list|(
name|List
argument_list|<
name|HStoreFile
argument_list|>
name|files
parameter_list|,
name|boolean
name|cacheBlocks
parameter_list|,
name|boolean
name|usePread
parameter_list|,
name|boolean
name|isCompaction
parameter_list|,
name|ScanQueryMatcher
name|matcher
parameter_list|,
name|byte
index|[]
name|startRow
parameter_list|,
name|boolean
name|includeStartRow
parameter_list|,
name|byte
index|[]
name|stopRow
parameter_list|,
name|boolean
name|includeStopRow
parameter_list|,
name|long
name|readPt
parameter_list|,
name|boolean
name|includeMemstoreScanner
parameter_list|)
throws|throws
name|IOException
block|{
name|hook
operator|.
name|getScanners
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getScanners
argument_list|(
name|files
argument_list|,
name|cacheBlocks
argument_list|,
name|usePread
argument_list|,
name|isCompaction
argument_list|,
name|matcher
argument_list|,
name|startRow
argument_list|,
literal|true
argument_list|,
name|stopRow
argument_list|,
literal|false
argument_list|,
name|readPt
argument_list|,
name|includeMemstoreScanner
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSmallestReadPoint
parameter_list|()
block|{
return|return
name|hook
operator|.
name|getSmallestReadPoint
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|abstract
class|class
name|MyStoreHook
block|{
name|void
name|getScanners
parameter_list|(
name|MyStore
name|store
parameter_list|)
throws|throws
name|IOException
block|{     }
name|long
name|getSmallestReadPoint
parameter_list|(
name|HStore
name|store
parameter_list|)
block|{
return|return
name|store
operator|.
name|getHRegion
argument_list|()
operator|.
name|getSmallestReadPoint
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSwitchingPreadtoStreamParallelyWithCompactionDischarger
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.hstore.engine.class"
argument_list|,
name|DummyStoreEngine
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|StoreScanner
operator|.
name|STORESCANNER_PREAD_MAX_BYTES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Set the lower threshold to invoke the "MERGE" policy
name|MyStore
name|store
init|=
name|initMyStore
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|conf
argument_list|,
operator|new
name|MyStoreHook
argument_list|()
block|{}
argument_list|)
decl_stmt|;
name|MemStoreSizing
name|memStoreSizing
init|=
operator|new
name|MemStoreSizing
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|seqID
init|=
literal|1l
decl_stmt|;
comment|// Add some data to the region and do some flushes
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|seqID
operator|++
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
block|}
comment|// flush them
name|flushStore
argument_list|(
name|store
argument_list|,
name|seqID
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|11
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|seqID
operator|++
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
block|}
comment|// flush them
name|flushStore
argument_list|(
name|store
argument_list|,
name|seqID
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|21
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|seqID
operator|++
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
block|}
comment|// flush them
name|flushStore
argument_list|(
name|store
argument_list|,
name|seqID
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|HStoreFile
argument_list|>
name|storefiles2
init|=
name|store
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|HStoreFile
argument_list|>
name|actualStorefiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|storefiles2
argument_list|)
decl_stmt|;
name|StoreScanner
name|storeScanner
init|=
operator|(
name|StoreScanner
operator|)
name|store
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|family
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// get the current heap
name|KeyValueHeap
name|heap
init|=
name|storeScanner
operator|.
name|heap
decl_stmt|;
comment|// create more store files
for|for
control|(
name|int
name|i
init|=
literal|31
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|seqID
operator|++
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
block|}
comment|// flush them
name|flushStore
argument_list|(
name|store
argument_list|,
name|seqID
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|41
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|add
argument_list|(
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|seqID
operator|++
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|,
name|memStoreSizing
argument_list|)
expr_stmt|;
block|}
comment|// flush them
name|flushStore
argument_list|(
name|store
argument_list|,
name|seqID
argument_list|)
expr_stmt|;
name|storefiles2
operator|=
name|store
operator|.
name|getStorefiles
argument_list|()
expr_stmt|;
name|ArrayList
argument_list|<
name|HStoreFile
argument_list|>
name|actualStorefiles1
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|storefiles2
argument_list|)
decl_stmt|;
name|actualStorefiles1
operator|.
name|removeAll
argument_list|(
name|actualStorefiles
argument_list|)
expr_stmt|;
comment|// Do compaction
name|MyThread
name|thread
init|=
operator|new
name|MyThread
argument_list|(
name|storeScanner
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|store
operator|.
name|replaceStoreFiles
argument_list|(
name|actualStorefiles
argument_list|,
name|actualStorefiles1
argument_list|)
expr_stmt|;
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
name|KeyValueHeap
name|heap2
init|=
name|thread
operator|.
name|getHeap
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|heap
operator|.
name|equals
argument_list|(
name|heap2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|MyThread
extends|extends
name|Thread
block|{
specifier|private
name|StoreScanner
name|scanner
decl_stmt|;
specifier|private
name|KeyValueHeap
name|heap
decl_stmt|;
specifier|public
name|MyThread
parameter_list|(
name|StoreScanner
name|scanner
parameter_list|)
block|{
name|this
operator|.
name|scanner
operator|=
name|scanner
expr_stmt|;
block|}
specifier|public
name|KeyValueHeap
name|getHeap
parameter_list|()
block|{
return|return
name|this
operator|.
name|heap
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|scanner
operator|.
name|trySwitchToStreamRead
argument_list|()
expr_stmt|;
name|heap
operator|=
name|scanner
operator|.
name|heap
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MyMemStoreCompactor
extends|extends
name|MemStoreCompactor
block|{
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|RUNNER_COUNT
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CountDownLatch
name|START_COMPACTOR_LATCH
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|MyMemStoreCompactor
parameter_list|(
name|CompactingMemStore
name|compactingMemStore
parameter_list|,
name|MemoryCompactionPolicy
name|compactionPolicy
parameter_list|)
throws|throws
name|IllegalArgumentIOException
block|{
name|super
argument_list|(
name|compactingMemStore
argument_list|,
name|compactionPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|start
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|isFirst
init|=
name|RUNNER_COUNT
operator|.
name|getAndIncrement
argument_list|()
operator|==
literal|0
decl_stmt|;
name|boolean
name|rval
init|=
name|super
operator|.
name|start
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFirst
condition|)
block|{
try|try
block|{
name|START_COMPACTOR_LATCH
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
return|return
name|rval
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MyCompactingMemStoreWithCustomCompactor
extends|extends
name|CompactingMemStore
block|{
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|RUNNER_COUNT
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|MyCompactingMemStoreWithCustomCompactor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CellComparatorImpl
name|c
parameter_list|,
name|HStore
name|store
parameter_list|,
name|RegionServicesForStores
name|regionServices
parameter_list|,
name|MemoryCompactionPolicy
name|compactionPolicy
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|c
argument_list|,
name|store
argument_list|,
name|regionServices
argument_list|,
name|compactionPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|MemStoreCompactor
name|createMemStoreCompactor
parameter_list|(
name|MemoryCompactionPolicy
name|compactionPolicy
parameter_list|)
throws|throws
name|IllegalArgumentIOException
block|{
return|return
operator|new
name|MyMemStoreCompactor
argument_list|(
name|this
argument_list|,
name|compactionPolicy
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|shouldFlushInMemory
parameter_list|()
block|{
name|boolean
name|rval
init|=
name|super
operator|.
name|shouldFlushInMemory
argument_list|()
decl_stmt|;
if|if
condition|(
name|rval
condition|)
block|{
name|RUNNER_COUNT
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|rval
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MyCompactingMemStore
extends|extends
name|CompactingMemStore
block|{
specifier|private
specifier|static
specifier|final
name|AtomicBoolean
name|START_TEST
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|getScannerLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|snapshotLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|MyCompactingMemStore
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CellComparatorImpl
name|c
parameter_list|,
name|HStore
name|store
parameter_list|,
name|RegionServicesForStores
name|regionServices
parameter_list|,
name|MemoryCompactionPolicy
name|compactionPolicy
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|c
argument_list|,
name|store
argument_list|,
name|regionServices
argument_list|,
name|compactionPolicy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|createList
parameter_list|(
name|int
name|capacity
parameter_list|)
block|{
if|if
condition|(
name|START_TEST
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|getScannerLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|snapshotLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|capacity
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|pushActiveToPipeline
parameter_list|(
name|MutableSegment
name|active
parameter_list|)
block|{
if|if
condition|(
name|START_TEST
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|getScannerLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|super
operator|.
name|pushActiveToPipeline
argument_list|(
name|active
argument_list|)
expr_stmt|;
if|if
condition|(
name|START_TEST
operator|.
name|get
argument_list|()
condition|)
block|{
name|snapshotLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
interface|interface
name|MyListHook
block|{
name|void
name|hook
parameter_list|(
name|int
name|currentSize
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|MyList
parameter_list|<
name|T
parameter_list|>
implements|implements
name|List
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|delegatee
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MyListHook
name|hookAtAdd
decl_stmt|;
name|MyList
parameter_list|(
specifier|final
name|MyListHook
name|hookAtAdd
parameter_list|)
block|{
name|this
operator|.
name|hookAtAdd
operator|=
name|hookAtAdd
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|contains
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|iterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|toArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
index|[]
name|toArray
parameter_list|(
name|R
index|[]
name|a
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|toArray
argument_list|(
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|T
name|e
parameter_list|)
block|{
name|hookAtAdd
operator|.
name|hook
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|delegatee
operator|.
name|add
argument_list|(
name|e
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|containsAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|addAll
argument_list|(
name|index
argument_list|,
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|delegatee
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|set
parameter_list|(
name|int
name|index
parameter_list|,
name|T
name|element
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|T
name|element
parameter_list|)
block|{
name|delegatee
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|remove
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|indexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|indexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|lastIndexOf
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|lastIndexOf
argument_list|(
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|T
argument_list|>
name|listIterator
parameter_list|()
block|{
return|return
name|delegatee
operator|.
name|listIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ListIterator
argument_list|<
name|T
argument_list|>
name|listIterator
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|listIterator
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|subList
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
return|return
name|delegatee
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

