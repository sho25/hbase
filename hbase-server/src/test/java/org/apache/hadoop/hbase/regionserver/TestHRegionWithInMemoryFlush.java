begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CategoryBasedTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|VerySlowRegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|START_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * A test similar to TestHRegion, but with in-memory flush families.  * Also checks wal truncation after in-memory compaction.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|VerySlowRegionServerTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|TestHRegionWithInMemoryFlush
extends|extends
name|TestHRegion
block|{
comment|// Do not spin up clusters in here. If you need to spin up a cluster, do it
comment|// over in TestHRegionOnCluster.
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHRegionWithInMemoryFlush
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|TestRule
name|timeout
init|=
name|CategoryBasedTimeout
operator|.
name|forClass
argument_list|(
name|TestHRegionWithInMemoryFlush
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * @return A region on which you must call    *         {@link HBaseTestingUtility#closeRegionAndWAL(HRegion)} when done.    */
annotation|@
name|Override
specifier|public
name|HRegion
name|initHRegion
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|stopKey
parameter_list|,
name|boolean
name|isReadOnly
parameter_list|,
name|Durability
name|durability
parameter_list|,
name|WAL
name|wal
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
index|[]
name|inMemory
init|=
operator|new
name|boolean
index|[
name|families
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inMemory
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inMemory
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|TEST_UTIL
operator|.
name|createLocalHRegionWithInMemoryFlags
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|stopKey
argument_list|,
name|isReadOnly
argument_list|,
name|durability
argument_list|,
name|wal
argument_list|,
name|inMemory
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|/**    * Splits twice and verifies getting from each of the split regions.    *    * @throws Exception    */
annotation|@
name|Override
specifier|public
name|void
name|testBasicSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|}
decl_stmt|;
name|Configuration
name|hc
init|=
name|initSplit
argument_list|()
decl_stmt|;
comment|// Setting up region
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|hc
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|region
argument_list|,
name|fam3
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|byte
index|[]
name|splitRow
init|=
name|region
operator|.
name|checkSplit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|splitRow
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SplitRow: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|splitRow
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
index|[]
name|regions
init|=
name|splitRegion
argument_list|(
name|region
argument_list|,
name|splitRow
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Need to open the regions.
comment|// TODO: Add an 'open' to HRegion... don't do open by constructing
comment|// instance.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regions
index|[
name|i
index|]
operator|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Assert can get rows out of new regions. Should be able to get first
comment|// row from first region and the midkey from second region.
name|assertGet
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
name|fam3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|regions
index|[
literal|1
index|]
argument_list|,
name|fam3
argument_list|,
name|splitRow
argument_list|)
expr_stmt|;
comment|// Test I can get scanner and that it starts at right place.
name|assertScan
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
name|fam3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertScan
argument_list|(
name|regions
index|[
literal|1
index|]
argument_list|,
name|fam3
argument_list|,
name|splitRow
argument_list|)
expr_stmt|;
comment|// Now prove can't split regions that have references.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Add so much data to this region, we create a store file that is>
comment|// than one of our unsplitable references. it will.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|fam3
argument_list|)
expr_stmt|;
block|}
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|fam2
argument_list|)
expr_stmt|;
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|regions
index|[
name|i
index|]
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|midkeys
init|=
operator|new
name|byte
index|[
name|regions
operator|.
name|length
index|]
index|[]
decl_stmt|;
comment|// To make regions splitable force compaction.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regions
index|[
name|i
index|]
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|midkeys
index|[
name|i
index|]
operator|=
name|regions
index|[
name|i
index|]
operator|.
name|checkSplit
argument_list|()
expr_stmt|;
block|}
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|sortedMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
comment|// Split these two daughter regions so then I'll have 4 regions. Will
comment|// split because added data above.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HRegion
index|[]
name|rs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|midkeys
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|rs
operator|=
name|splitRegion
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|midkeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|sortedMap
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rs
index|[
name|j
index|]
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|rs
index|[
name|j
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Made 4 regions"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|regions
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
block|}
block|}
block|}
finally|finally
block|{
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

