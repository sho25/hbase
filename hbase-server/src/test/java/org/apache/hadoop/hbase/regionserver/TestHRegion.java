begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|COLUMNS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|FIRST_CHAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|LAST_CHAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|START_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam3
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilitySingletonFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|OperationStatusCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HDFSBlocksDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
operator|.
name|RepeatingTestThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MultithreadedTestUtil
operator|.
name|TestThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NotServingRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|FailedSanityCheckException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnCountGetFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|NullComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueExcludeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredRPCHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|TaskMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
operator|.
name|CompactionDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
operator|.
name|RegionScannerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
operator|.
name|RowLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|MetricsWALSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
operator|.
name|MetricsAssertHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManagerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|IncrementingEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|PairOfSameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Basic stand-alone testing of HRegion.  *   * A lot of the meta information for an HRegion now lives inside other HRegions  * or in the HBaseMaster, so only basic testing is possible.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|TestHRegion
block|{
comment|// Do not spin up clusters in here. If you need to spin up a cluster, do it
comment|// over in TestHRegionOnCluster.
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHRegion
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLUMN_FAMILY
init|=
literal|"MyCF"
decl_stmt|;
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
comment|// do not run unit tests in parallel
specifier|public
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|String
name|DIR
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|int
name|MAX_VERSIONS
init|=
literal|2
decl_stmt|;
comment|// Test names
specifier|protected
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|protected
name|String
name|method
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|qual1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|qual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|qual3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual3"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|MetricsAssertHelper
name|metricsAssertHelper
init|=
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsAssertHelper
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|TEST_UTIL
operator|=
name|HBaseTestingUtility
operator|.
name|createLocalHTU
argument_list|()
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|DIR
operator|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestHRegion"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|method
operator|=
name|name
operator|.
name|getMethodName
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|EnvironmentEdgeManagerTestHelper
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning test directory: "
operator|+
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
operator|.
name|getMethodName
argument_list|()
return|;
block|}
comment|// ////////////////////////////////////////////////////////////////////////////
comment|// New tests that doesn't spin up a mini cluster but rather just test the
comment|// individual code pieces in the HRegion. Putting files locally in
comment|// /tmp/testtable
comment|// ////////////////////////////////////////////////////////////////////////////
annotation|@
name|Test
specifier|public
name|void
name|testCompactionAffectedByScanners
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// open the first scanner
name|RegionScanner
name|scanner1
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// open the second scanner
name|RegionScanner
name|scanner2
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Smallest read point:"
operator|+
name|region
operator|.
name|getSmallestReadPoint
argument_list|()
argument_list|)
expr_stmt|;
comment|// make a major compaction
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// open the third scanner
name|RegionScanner
name|scanner3
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
comment|// get data from scanner 1, 2, 3 after major compaction
name|scanner1
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scanner2
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scanner3
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToShowNPEOnRegionScannerReseek
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r2"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// open the first scanner
name|RegionScanner
name|scanner1
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Smallest read point:"
operator|+
name|region
operator|.
name|getSmallestReadPoint
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|reseek
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner1
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Cell
name|keyValue
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|keyValue
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r2"
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSkipRecoveredEditsReplay
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|method
init|=
literal|"testSkipRecoveredEditsReplay"
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
try|try
block|{
name|Path
name|regiondir
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
name|Path
name|recoveredEditsDir
init|=
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regiondir
argument_list|)
decl_stmt|;
name|long
name|maxSeqId
init|=
literal|1050
decl_stmt|;
name|long
name|minSeqId
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|minSeqId
init|;
name|i
operator|<=
name|maxSeqId
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|Path
name|recoveredEdits
init|=
operator|new
name|Path
argument_list|(
name|recoveredEditsDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|recoveredEdits
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Writer
name|writer
init|=
name|HLogFactory
operator|.
name|createRecoveredEditsWriter
argument_list|(
name|fs
argument_list|,
name|recoveredEdits
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|time
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
operator|new
name|HLogKey
argument_list|(
name|regionName
argument_list|,
name|tableName
argument_list|,
name|i
argument_list|,
name|time
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
argument_list|,
name|edit
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|maxSeqIdInStores
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|maxSeqIdInStores
operator|.
name|put
argument_list|(
name|store
operator|.
name|getColumnFamilyName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|minSeqId
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|long
name|seqId
init|=
name|region
operator|.
name|replayRecoveredEditsIfAny
argument_list|(
name|regiondir
argument_list|,
name|maxSeqIdInStores
argument_list|,
literal|null
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|maxSeqId
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|minSeqId
init|;
name|i
operator|<=
name|maxSeqId
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
name|result
operator|.
name|getColumnCells
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSkipRecoveredEditsReplaySomeIgnored
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|method
init|=
literal|"testSkipRecoveredEditsReplaySomeIgnored"
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
try|try
block|{
name|Path
name|regiondir
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
name|Path
name|recoveredEditsDir
init|=
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regiondir
argument_list|)
decl_stmt|;
name|long
name|maxSeqId
init|=
literal|1050
decl_stmt|;
name|long
name|minSeqId
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|minSeqId
init|;
name|i
operator|<=
name|maxSeqId
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|Path
name|recoveredEdits
init|=
operator|new
name|Path
argument_list|(
name|recoveredEditsDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|recoveredEdits
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Writer
name|writer
init|=
name|HLogFactory
operator|.
name|createRecoveredEditsWriter
argument_list|(
name|fs
argument_list|,
name|recoveredEdits
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|time
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
operator|new
name|HLogKey
argument_list|(
name|regionName
argument_list|,
name|tableName
argument_list|,
name|i
argument_list|,
name|time
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
argument_list|,
name|edit
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|long
name|recoverSeqId
init|=
literal|1030
decl_stmt|;
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|maxSeqIdInStores
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|maxSeqIdInStores
operator|.
name|put
argument_list|(
name|store
operator|.
name|getColumnFamilyName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|recoverSeqId
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|long
name|seqId
init|=
name|region
operator|.
name|replayRecoveredEditsIfAny
argument_list|(
name|regiondir
argument_list|,
name|maxSeqIdInStores
argument_list|,
literal|null
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|maxSeqId
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|minSeqId
init|;
name|i
operator|<=
name|maxSeqId
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
name|result
operator|.
name|getColumnCells
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|recoverSeqId
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSkipRecoveredEditsReplayAllIgnored
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
try|try
block|{
name|Path
name|regiondir
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|recoveredEditsDir
init|=
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regiondir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1000
init|;
name|i
operator|<
literal|1050
condition|;
name|i
operator|+=
literal|10
control|)
block|{
name|Path
name|recoveredEdits
init|=
operator|new
name|Path
argument_list|(
name|recoveredEditsDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|recoveredEdits
argument_list|)
decl_stmt|;
name|dos
operator|.
name|writeInt
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|long
name|minSeqId
init|=
literal|2000
decl_stmt|;
name|Path
name|recoveredEdits
init|=
operator|new
name|Path
argument_list|(
name|recoveredEditsDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|minSeqId
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|recoveredEdits
argument_list|)
decl_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|maxSeqIdInStores
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|maxSeqIdInStores
operator|.
name|put
argument_list|(
name|store
operator|.
name|getColumnFamilyName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|,
name|minSeqId
argument_list|)
expr_stmt|;
block|}
name|long
name|seqId
init|=
name|region
operator|.
name|replayRecoveredEditsIfAny
argument_list|(
name|regiondir
argument_list|,
name|maxSeqIdInStores
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|minSeqId
argument_list|,
name|seqId
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecoveredEditsReplayCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|method
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
try|try
block|{
name|Path
name|regiondir
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
name|long
name|maxSeqId
init|=
literal|3
decl_stmt|;
name|long
name|minSeqId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|minSeqId
init|;
name|i
operator|<
name|maxSeqId
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
comment|// this will create a region with 3 files
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|region
operator|.
name|getStore
argument_list|(
name|family
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|storeFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|StoreFile
name|sf
range|:
name|region
operator|.
name|getStore
argument_list|(
name|family
argument_list|)
operator|.
name|getStorefiles
argument_list|()
control|)
block|{
name|storeFiles
operator|.
name|add
argument_list|(
name|sf
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// disable compaction completion
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.hstore.compaction.complete"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
comment|// ensure that nothing changed
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|region
operator|.
name|getStore
argument_list|(
name|family
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// now find the compacted file, and manually add it to the recovered edits
name|Path
name|tmpDir
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getTempDir
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|tmpDir
argument_list|)
decl_stmt|;
name|String
name|errorMsg
init|=
literal|"Expected to find 1 file in the region temp directory "
operator|+
literal|"from the compaction, could not find any"
decl_stmt|;
name|assertNotNull
argument_list|(
name|errorMsg
argument_list|,
name|files
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|errorMsg
argument_list|,
literal|1
argument_list|,
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// move the file inside region dir
name|Path
name|newFile
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|commitStoreFile
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|,
name|files
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|CompactionDescriptor
name|compactionDescriptor
init|=
name|ProtobufUtil
operator|.
name|toCompactionDescriptor
argument_list|(
name|this
operator|.
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|family
argument_list|,
name|storeFiles
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|newFile
argument_list|)
argument_list|,
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getStoreDir
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|HLogUtil
operator|.
name|writeCompactionMarker
argument_list|(
name|region
operator|.
name|getLog
argument_list|()
argument_list|,
name|this
operator|.
name|region
operator|.
name|getTableDesc
argument_list|()
argument_list|,
name|this
operator|.
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|compactionDescriptor
argument_list|,
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|recoveredEditsDir
init|=
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regiondir
argument_list|)
decl_stmt|;
name|Path
name|recoveredEdits
init|=
operator|new
name|Path
argument_list|(
name|recoveredEditsDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
literal|1000
argument_list|)
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|recoveredEdits
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Writer
name|writer
init|=
name|HLogFactory
operator|.
name|createRecoveredEditsWriter
argument_list|(
name|fs
argument_list|,
name|recoveredEdits
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
operator|new
name|HLogKey
argument_list|(
name|regionName
argument_list|,
name|tableName
argument_list|,
literal|10
argument_list|,
name|time
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
argument_list|,
name|WALEdit
operator|.
name|createCompaction
argument_list|(
name|compactionDescriptor
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// close the region now, and reopen again
name|HTableDescriptor
name|htd
init|=
name|region
operator|.
name|getTableDesc
argument_list|()
decl_stmt|;
name|HRegionInfo
name|info
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|region
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// now check whether we have only one store file, the compacted one
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|sfs
init|=
name|region
operator|.
name|getStore
argument_list|(
name|family
argument_list|)
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFile
name|sf
range|:
name|sfs
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|sf
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|region
operator|.
name|getStore
argument_list|(
name|family
argument_list|)
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|tmpDir
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to find 0 files inside "
operator|+
name|tmpDir
argument_list|,
name|files
operator|==
literal|null
operator|||
name|files
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
name|minSeqId
init|;
name|i
operator|<
name|maxSeqId
condition|;
name|i
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|result
operator|.
name|getValue
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWhileRegionClose
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|hc
init|=
name|initSplit
argument_list|()
decl_stmt|;
name|int
name|numRows
init|=
literal|100
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|}
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|hc
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Put data in region
specifier|final
name|int
name|startRow
init|=
literal|100
decl_stmt|;
name|putData
argument_list|(
name|startRow
argument_list|,
name|numRows
argument_list|,
name|qual1
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|startRow
argument_list|,
name|numRows
argument_list|,
name|qual2
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|putData
argument_list|(
name|startRow
argument_list|,
name|numRows
argument_list|,
name|qual3
argument_list|,
name|families
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|done
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|gets
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|GetTillDoneOrException
index|[]
name|threads
init|=
operator|new
name|GetTillDoneOrException
index|[
literal|10
index|]
decl_stmt|;
try|try
block|{
comment|// Set ten threads running concurrently getting from the region.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|GetTillDoneOrException
argument_list|(
name|i
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|startRow
argument_list|)
argument_list|,
name|done
argument_list|,
name|gets
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// Artificially make the condition by setting closing flag explicitly.
comment|// I can't make the issue happen with a call to region.close().
name|this
operator|.
name|region
operator|.
name|closing
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|threads
operator|.
name|length
operator|/
literal|2
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|GetTillDoneOrException
argument_list|(
name|i
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|startRow
argument_list|)
argument_list|,
name|done
argument_list|,
name|gets
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|this
operator|.
name|region
operator|!=
literal|null
condition|)
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
block|}
block|}
name|done
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|GetTillDoneOrException
name|t
range|:
name|threads
control|)
block|{
try|try
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|.
name|e
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Exception="
operator|+
name|t
operator|.
name|e
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Found a NPE in "
operator|+
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|t
operator|.
name|e
operator|instanceof
name|NullPointerException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/*    * Thread that does get on single row until 'done' flag is flipped. If an    * exception causes us to fail, it records it.    */
class|class
name|GetTillDoneOrException
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|Get
name|g
decl_stmt|;
specifier|private
specifier|final
name|AtomicBoolean
name|done
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|count
decl_stmt|;
specifier|private
name|Exception
name|e
decl_stmt|;
name|GetTillDoneOrException
parameter_list|(
specifier|final
name|int
name|i
parameter_list|,
specifier|final
name|byte
index|[]
name|r
parameter_list|,
specifier|final
name|AtomicBoolean
name|d
parameter_list|,
specifier|final
name|AtomicInteger
name|c
parameter_list|)
block|{
name|super
argument_list|(
literal|"getter."
operator|+
name|i
argument_list|)
expr_stmt|;
name|this
operator|.
name|g
operator|=
operator|new
name|Get
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|d
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|c
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|this
operator|.
name|done
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/*    * An involved filter test. Has multiple column families and deletes in mix.    */
annotation|@
name|Test
specifier|public
name|void
name|testWeirdCacheBehaviour
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testWeirdCacheBehaviour"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
block|}
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|TABLE
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|value
init|=
literal|"this is the value"
decl_stmt|;
name|String
name|value2
init|=
literal|"this is some other value"
decl_stmt|;
name|String
name|keyPrefix1
init|=
literal|"prefix1"
decl_stmt|;
name|String
name|keyPrefix2
init|=
literal|"prefix2"
decl_stmt|;
name|String
name|keyPrefix3
init|=
literal|"prefix3"
decl_stmt|;
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|this
operator|.
name|region
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix3
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|this
operator|.
name|region
argument_list|,
name|value2
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|this
operator|.
name|region
argument_list|,
name|value2
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|this
operator|.
name|region
argument_list|,
name|value2
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting important checks....."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix1
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix2
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix3
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix3
argument_list|,
name|value2
argument_list|,
name|this
operator|.
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendWithReadOnlyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"readOnlyTable"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|TABLE
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somefamily"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somerow"
argument_list|)
argument_list|)
decl_stmt|;
name|append
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|append
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somefamily"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somequalifier"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somevalue"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionCaught
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrWithReadOnlyTable
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"readOnlyTable"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|TABLE
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somefamily"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somerow"
argument_list|)
argument_list|)
decl_stmt|;
name|inc
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somefamily"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somequalifier"
argument_list|)
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionCaught
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteColumns
parameter_list|(
name|HRegion
name|r
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
name|buildScanner
argument_list|(
name|keyPrefix
argument_list|,
name|value
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|boolean
name|more
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
do|do
block|{
name|more
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
name|count
operator|++
expr_stmt|;
else|else
break|break;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|more
condition|)
do|;
name|assertEquals
argument_list|(
literal|"Did not perform correct number of deletes"
argument_list|,
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getNumberOfRows
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|value
parameter_list|,
name|HRegion
name|r
parameter_list|)
throws|throws
name|Exception
block|{
name|InternalScanner
name|resultScanner
init|=
name|buildScanner
argument_list|(
name|keyPrefix
argument_list|,
name|value
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|int
name|numberOfResults
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|more
init|=
literal|false
decl_stmt|;
do|do
block|{
name|more
operator|=
name|resultScanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
name|numberOfResults
operator|++
expr_stmt|;
else|else
break|break;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"kv="
operator|+
name|kv
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|more
condition|)
do|;
return|return
name|numberOfResults
return|;
block|}
specifier|private
name|InternalScanner
name|buildScanner
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|value
parameter_list|,
name|HRegion
name|r
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Defaults FilterList.Operator.MUST_PASS_ALL.
name|FilterList
name|allFilters
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
name|allFilters
operator|.
name|addFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keyPrefix
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Only return rows where this column value exists in the row.
name|SingleColumnValueFilter
name|filter
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFilterIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allFilters
operator|.
name|addFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|allFilters
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
specifier|private
name|void
name|putRows
parameter_list|(
name|HRegion
name|r
parameter_list|,
name|int
name|numRows
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|String
name|row
init|=
name|key
operator|+
literal|"_"
operator|+
name|i
comment|/* UUID.randomUUID().toString() */
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Saving row: %s, with value %s"
argument_list|,
name|row
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value for blob"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"statement"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"20090921010101999"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"adhocTransactionGroupId"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFamilyWithAndWithoutColon
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|b
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cf
argument_list|)
expr_stmt|;
try|try
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|b
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cfwithcolon
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_FAMILY
operator|+
literal|":"
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cfwithcolon
argument_list|,
name|cfwithcolon
argument_list|,
name|cfwithcolon
argument_list|)
expr_stmt|;
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
try|try
block|{
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchColumnFamilyException
name|e
parameter_list|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchPut
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|b
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cf
argument_list|)
expr_stmt|;
name|MetricsWALSource
name|source
init|=
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsWALSource
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|syncs
init|=
name|metricsAssertHelper
operator|.
name|getCounter
argument_list|(
literal|"syncTimeNumOps"
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|metricsAssertHelper
operator|.
name|assertCounter
argument_list|(
literal|"syncTimeNumOps"
argument_list|,
name|syncs
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First a batch put with all valid puts"
argument_list|)
expr_stmt|;
specifier|final
name|Put
index|[]
name|puts
init|=
operator|new
name|Put
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|puts
index|[
name|i
index|]
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
name|cf
argument_list|,
name|qual
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|OperationStatus
index|[]
name|codes
init|=
name|this
operator|.
name|region
operator|.
name|batchMutate
argument_list|(
name|puts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|codes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|OperationStatusCode
operator|.
name|SUCCESS
argument_list|,
name|codes
index|[
name|i
index|]
operator|.
name|getOperationStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metricsAssertHelper
operator|.
name|assertCounter
argument_list|(
literal|"syncTimeNumOps"
argument_list|,
name|syncs
operator|+
literal|1
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Next a batch put with one invalid family"
argument_list|)
expr_stmt|;
name|puts
index|[
literal|5
index|]
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BAD_CF"
argument_list|)
argument_list|,
name|qual
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|codes
operator|=
name|this
operator|.
name|region
operator|.
name|batchMutate
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|codes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|i
operator|==
literal|5
operator|)
condition|?
name|OperationStatusCode
operator|.
name|BAD_FAMILY
else|:
name|OperationStatusCode
operator|.
name|SUCCESS
argument_list|,
name|codes
index|[
name|i
index|]
operator|.
name|getOperationStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metricsAssertHelper
operator|.
name|assertCounter
argument_list|(
literal|"syncTimeNumOps"
argument_list|,
name|syncs
operator|+
literal|2
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Next a batch put that has to break into two batches to avoid a lock"
argument_list|)
expr_stmt|;
name|RowLock
name|rowLock
init|=
name|region
operator|.
name|getRowLock
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_2"
argument_list|)
argument_list|)
decl_stmt|;
name|MultithreadedTestUtil
operator|.
name|TestContext
name|ctx
init|=
operator|new
name|MultithreadedTestUtil
operator|.
name|TestContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|OperationStatus
index|[]
argument_list|>
name|retFromThread
init|=
operator|new
name|AtomicReference
argument_list|<
name|OperationStatus
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|TestThread
name|putter
init|=
operator|new
name|TestThread
argument_list|(
name|ctx
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|doWork
parameter_list|()
throws|throws
name|IOException
block|{
name|retFromThread
operator|.
name|set
argument_list|(
name|region
operator|.
name|batchMutate
argument_list|(
name|puts
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...starting put thread while holding lock"
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|addThread
argument_list|(
name|putter
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...waiting for put thread to sync first time"
argument_list|)
expr_stmt|;
name|long
name|startWait
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|metricsAssertHelper
operator|.
name|getCounter
argument_list|(
literal|"syncTimeNumOps"
argument_list|,
name|source
argument_list|)
operator|==
name|syncs
operator|+
literal|2
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startWait
operator|>
literal|10000
condition|)
block|{
name|fail
argument_list|(
literal|"Timed out waiting for thread to sync first minibatch"
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"...releasing row lock, which should let put thread continue"
argument_list|)
expr_stmt|;
name|rowLock
operator|.
name|release
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...joining on thread"
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"...checking that next batch was synced"
argument_list|)
expr_stmt|;
name|metricsAssertHelper
operator|.
name|assertCounter
argument_list|(
literal|"syncTimeNumOps"
argument_list|,
name|syncs
operator|+
literal|4
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|codes
operator|=
name|retFromThread
operator|.
name|get
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
operator|(
name|i
operator|==
literal|5
operator|)
condition|?
name|OperationStatusCode
operator|.
name|BAD_FAMILY
else|:
name|OperationStatusCode
operator|.
name|SUCCESS
argument_list|,
name|codes
index|[
name|i
index|]
operator|.
name|getOperationStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchPutWithTsSlop
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
comment|// add data with a timestamp that is too recent for range. Ensure assert
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.keyvalue.timestamp.slop.millisecs"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|b
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cf
argument_list|)
expr_stmt|;
try|try
block|{
name|MetricsWALSource
name|source
init|=
name|CompatibilitySingletonFactory
operator|.
name|getInstance
argument_list|(
name|MetricsWALSource
operator|.
name|class
argument_list|)
decl_stmt|;
name|long
name|syncs
init|=
name|metricsAssertHelper
operator|.
name|getCounter
argument_list|(
literal|"syncTimeNumOps"
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|metricsAssertHelper
operator|.
name|assertCounter
argument_list|(
literal|"syncTimeNumOps"
argument_list|,
name|syncs
argument_list|,
name|source
argument_list|)
expr_stmt|;
specifier|final
name|Put
index|[]
name|puts
init|=
operator|new
name|Put
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|puts
index|[
name|i
index|]
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_"
operator|+
name|i
argument_list|)
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|100
argument_list|)
expr_stmt|;
name|puts
index|[
name|i
index|]
operator|.
name|add
argument_list|(
name|cf
argument_list|,
name|qual
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
name|OperationStatus
index|[]
name|codes
init|=
name|this
operator|.
name|region
operator|.
name|batchMutate
argument_list|(
name|puts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|codes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|OperationStatusCode
operator|.
name|SANITY_CHECK_FAILURE
argument_list|,
name|codes
index|[
name|i
index|]
operator|.
name|getOperationStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|metricsAssertHelper
operator|.
name|assertCounter
argument_list|(
literal|"syncTimeNumOps"
argument_list|,
name|syncs
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// ////////////////////////////////////////////////////////////////////////////
comment|// checkAndMutate tests
comment|// ////////////////////////////////////////////////////////////////////////////
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndMutate_WithEmptyRowValue
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|emptyVal
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting empty data in key
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|emptyVal
argument_list|)
expr_stmt|;
comment|// checkAndPut with empty value
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// Putting data in key
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
comment|// checkAndPut with correct value
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// not empty anymore
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|delete
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val2
argument_list|)
expr_stmt|;
comment|// checkAndPut with correct value
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// checkAndDelete with correct value
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|delete
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|delete
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
comment|// checkAndPut looking for a null value
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|NullComparator
argument_list|()
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndMutate_WithWrongValue
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in key
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// checkAndPut with wrong value
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// checkAndDelete with wrong value
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|delete
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndMutate_WithCorrectValue
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in key
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// checkAndPut with correct value
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// checkAndDelete with correct value
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndMutate_WithNonEqualCompareOp
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value4"
argument_list|)
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting val3 in key
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Test CompareOp.LESS: original = val3, compare with val3, fail
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val3
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.LESS: original = val3, compare with val4, fail
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val4
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.LESS: original = val3, compare with val2,
comment|// succeed (now value = val2)
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.LESS_OR_EQUAL: original = val2, compare with val3, fail
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val3
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.LESS_OR_EQUAL: original = val2, compare with val2,
comment|// succeed (value still = val2)
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.LESS_OR_EQUAL: original = val2, compare with val1,
comment|// succeed (now value = val3)
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.GREATER: original = val3, compare with val3, fail
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val3
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.GREATER: original = val3, compare with val2, fail
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.GREATER: original = val3, compare with val4,
comment|// succeed (now value = val2)
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val4
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.GREATER_OR_EQUAL: original = val2, compare with val1, fail
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.GREATER_OR_EQUAL: original = val2, compare with val2,
comment|// succeed (value still = val2)
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Test CompareOp.GREATER_OR_EQUAL: original = val2, compare with val3, succeed
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val3
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndPut_ThatPutWasWritten
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|}
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in the key to check
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Creating put to add
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|val2
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
comment|// checkAndPut with wrong value
name|HStore
name|store
init|=
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
decl_stmt|;
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
expr_stmt|;
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|put
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|store
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|size
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|actual
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|Cell
index|[]
name|expected
init|=
block|{
name|kv
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actual
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndPut_wrongRowInPut
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|this
operator|.
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|COLUMNS
argument_list|)
expr_stmt|;
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
try|try
block|{
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|qual1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|value2
argument_list|)
argument_list|,
name|put
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
name|expected
parameter_list|)
block|{
comment|// expected exception.
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndDelete_ThatDeleteWasWritten
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|emptyVal
init|=
operator|new
name|byte
index|[]
block|{}
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|}
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Put content
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
name|qf1
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
name|qf2
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
name|qf3
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf3
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Multi-column delete
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam2
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qf3
argument_list|)
expr_stmt|;
name|boolean
name|res
init|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val2
argument_list|)
argument_list|,
name|delete
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf3
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|qf2
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|val1
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|val2
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|fam2
argument_list|,
name|qf2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Family delete
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|emptyVal
argument_list|)
argument_list|,
name|delete
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|val1
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Row delete
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|checkAndMutate
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|val1
argument_list|)
argument_list|,
name|delete
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// ////////////////////////////////////////////////////////////////////////////
comment|// Delete tests
comment|// ////////////////////////////////////////////////////////////////////////////
annotation|@
name|Test
specifier|public
name|void
name|testDelete_multiDeleteColumn
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual
argument_list|,
literal|2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// We do support deleting more than 1 'latest' version
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qual
argument_list|)
expr_stmt|;
name|delete
operator|.
name|deleteColumn
argument_list|(
name|fam1
argument_list|,
name|qual
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete_CheckFamily
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam4"
argument_list|)
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|,
name|fam2
argument_list|,
name|fam3
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam4
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// testing existing family
name|byte
index|[]
name|family
init|=
name|fam2
decl_stmt|;
try|try
block|{
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|deleteMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|deleteMap
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|deleteMap
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Family "
operator|+
operator|new
name|String
argument_list|(
name|family
argument_list|)
operator|+
literal|" does not exist"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// testing non existing family
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
name|family
operator|=
name|fam4
expr_stmt|;
try|try
block|{
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|deleteMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|deleteMap
operator|.
name|put
argument_list|(
name|family
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|deleteMap
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Family "
operator|+
operator|new
name|String
argument_list|(
name|family
argument_list|)
operator|+
literal|" does exist"
argument_list|,
literal|true
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete_mixed
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam
block|}
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
operator|new
name|IncrementingEnvironmentEdge
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table_name"
argument_list|)
decl_stmt|;
comment|// column names
name|byte
index|[]
name|serverinfo
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"serverinfo"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|splitA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"splitA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|splitB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"splitB"
argument_list|)
decl_stmt|;
comment|// add some data:
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|splitA
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reference_A"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|splitB
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reference_B"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|serverinfo
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ip_address"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// ok now delete a split:
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|fam
argument_list|,
name|splitA
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// assert some things:
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|serverinfo
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|splitA
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|splitB
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that after a delete, I can put.
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|splitA
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reference_A"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now delete all... then test I can add stuff back
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|splitA
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"reference_A"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteRowWithFutureTs
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam
block|}
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table_name"
argument_list|)
decl_stmt|;
comment|// column names
name|byte
index|[]
name|serverinfo
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"serverinfo"
argument_list|)
decl_stmt|;
comment|// add data in the far future
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|serverinfo
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
operator|-
literal|5
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// now delete something in the present
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// make sure we still see our data
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|serverinfo
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete the future row
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
operator|-
literal|3
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// make sure it is gone
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|serverinfo
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Tests that the special LATEST_TIMESTAMP option for puts gets replaced by    * the actual timestamp    */
annotation|@
name|Test
specifier|public
name|void
name|testPutWithLatestTS
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam
block|}
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
comment|// column names
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
comment|// add data with LATEST_TIMESTAMP, put without WAL
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Make sure it shows up with an actual timestamp
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got: "
operator|+
name|kv
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"LATEST_TIMESTAMP was not replaced with real timestamp"
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|!=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
comment|// Check same with WAL enabled (historically these took different
comment|// code paths, so check both)
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Make sure it shows up with an actual timestamp
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|)
expr_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|kv
operator|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Got: "
operator|+
name|kv
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"LATEST_TIMESTAMP was not replaced with real timestamp"
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|!=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Tests that there is server-side filtering for invalid timestamp upper    * bound. Note that the timestamp lower bound is automatically handled for us    * by the TTL field.    */
annotation|@
name|Test
specifier|public
name|void
name|testPutWithTsSlop
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam
block|}
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// add data with a timestamp that is too recent for range. Ensure assert
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.keyvalue.timestamp.slop.millisecs"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|boolean
name|caughtExcep
init|=
literal|false
decl_stmt|;
try|try
block|{
try|try
block|{
comment|// no TS specified == use latest. should not error
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TS out of range. should error
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|2000
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected IOE for TS out of configured timerange"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FailedSanityCheckException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received expected exception"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
name|caughtExcep
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Should catch FailedSanityCheckException"
argument_list|,
name|caughtExcep
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanner_DeleteOneFamilyNotAnother
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"columnA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"columnB"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|,
name|fam2
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|rowA
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// now create data.
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|rowA
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowB
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rowA
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|rowB
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteColumns_PostInsert
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteColumns
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
expr_stmt|;
name|doTestDelete_AndPostInsert
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteFamily_PostInsert
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|doTestDelete_AndPostInsert
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doTestDelete_AndPostInsert
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
operator|new
name|IncrementingEnvironmentEdge
argument_list|()
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// now delete the value:
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// ok put data:
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// ok get:
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
argument_list|)
expr_stmt|;
comment|// next:
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qual1
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|value2
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|fam1
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|qual1
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|row
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDelete_CheckTimestampUpdated
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3"
argument_list|)
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Building checkerList
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|deleteMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|deleteMap
operator|.
name|put
argument_list|(
name|fam1
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|deleteMap
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|)
expr_stmt|;
comment|// extract the key values out the memstore:
comment|// This is kinda hacky, but better than nothing...
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
name|firstKv
init|=
operator|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
operator|)
operator|.
name|memstore
operator|.
name|kvset
operator|.
name|first
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|firstKv
operator|.
name|getTimestamp
argument_list|()
operator|<=
name|now
argument_list|)
expr_stmt|;
name|now
operator|=
name|firstKv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
operator|(
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
operator|)
operator|.
name|memstore
operator|.
name|kvset
control|)
block|{
name|assertTrue
argument_list|(
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|<=
name|now
argument_list|)
expr_stmt|;
name|now
operator|=
name|kv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// ////////////////////////////////////////////////////////////////////////////
comment|// Get tests
comment|// ////////////////////////////////////////////////////////////////////////////
annotation|@
name|Test
specifier|public
name|void
name|testGet_FamilyChecker
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"False"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|col1
argument_list|)
expr_stmt|;
comment|// Test
try|try
block|{
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_Basic
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5"
argument_list|)
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Add to memstore
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col5
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col4
argument_list|)
expr_stmt|;
comment|// Expected result
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col2
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|col4
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|expected
init|=
block|{
name|kv1
block|,
name|kv2
block|}
decl_stmt|;
comment|// Test
name|Result
name|res
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|res
operator|.
name|rawCells
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|res
operator|.
name|rawCells
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|res
operator|.
name|rawCells
argument_list|()
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test using a filter on a Get
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
literal|2
decl_stmt|;
name|g
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnCountGetFilter
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_Empty
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam
argument_list|)
expr_stmt|;
try|try
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// ////////////////////////////////////////////////////////////////////////////
comment|// Merge test
comment|// ////////////////////////////////////////////////////////////////////////////
annotation|@
name|Test
specifier|public
name|void
name|testMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|}
decl_stmt|;
name|Configuration
name|hc
init|=
name|initSplit
argument_list|()
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|hc
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|region
argument_list|,
name|fam3
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|byte
index|[]
name|splitRow
init|=
name|region
operator|.
name|checkSplit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|splitRow
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SplitRow: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|splitRow
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
index|[]
name|subregions
init|=
name|splitRegion
argument_list|(
name|region
argument_list|,
name|splitRow
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Need to open the regions.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subregions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|subregions
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|subregions
index|[
name|i
index|]
operator|.
name|compactStores
argument_list|()
expr_stmt|;
block|}
name|Path
name|oldRegionPath
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|Path
name|oldRegion1
init|=
name|subregions
index|[
literal|0
index|]
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|Path
name|oldRegion2
init|=
name|subregions
index|[
literal|1
index|]
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|mergeAdjacent
argument_list|(
name|subregions
index|[
literal|0
index|]
argument_list|,
name|subregions
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Merge regions elapsed time: "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegion1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegion2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|oldRegionPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"splitAndMerge completed."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subregions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|subregions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
block|}
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * @param parent    *          Region to split.    * @param midkey    *          Key to split around.    * @return The Regions we created.    * @throws IOException    */
name|HRegion
index|[]
name|splitRegion
parameter_list|(
specifier|final
name|HRegion
name|parent
parameter_list|,
specifier|final
name|byte
index|[]
name|midkey
parameter_list|)
throws|throws
name|IOException
block|{
name|PairOfSameType
argument_list|<
name|HRegion
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|SplitTransaction
name|st
init|=
operator|new
name|SplitTransaction
argument_list|(
name|parent
argument_list|,
name|midkey
argument_list|)
decl_stmt|;
comment|// If prepare does not return true, for some reason -- logged inside in
comment|// the prepare call -- we are not ready to split just now. Just return.
if|if
condition|(
operator|!
name|st
operator|.
name|prepare
argument_list|()
condition|)
return|return
literal|null
return|;
try|try
block|{
name|result
operator|=
name|st
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Running rollback of failed split of "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|"; "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|rollback
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successful rollback of failed split of "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|// If failed rollback, kill this server to avoid having a hole in table.
name|LOG
operator|.
name|info
argument_list|(
literal|"Failed rollback of failed split of "
operator|+
name|parent
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" -- aborting server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|HRegion
index|[]
block|{
name|result
operator|.
name|getFirst
argument_list|()
block|,
name|result
operator|.
name|getSecond
argument_list|()
block|}
return|;
block|}
comment|// ////////////////////////////////////////////////////////////////////////////
comment|// Scanner tests
comment|// ////////////////////////////////////////////////////////////////////////////
annotation|@
name|Test
specifier|public
name|void
name|testGetScanner_WithOkFamilies
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|}
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Families could not be found in Region"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetScanner_WithNotOkFamilies
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|}
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Families could not be found in Region"
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetScanner_WithNoFamilies
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam4"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|,
name|fam4
block|}
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in Region
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam3
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam4
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
literal|null
decl_stmt|;
name|HRegion
operator|.
name|RegionScannerImpl
name|is
init|=
literal|null
decl_stmt|;
comment|// Testing to see how many scanners that is produced by getScanner,
comment|// starting
comment|// with known number, 2 - current = 1
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam4
argument_list|)
expr_stmt|;
name|is
operator|=
operator|(
name|RegionScannerImpl
operator|)
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|RegionScannerImpl
operator|)
name|is
operator|)
operator|.
name|storeHeap
operator|.
name|getHeap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|is
operator|=
operator|(
name|RegionScannerImpl
operator|)
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|families
operator|.
name|length
operator|-
literal|1
argument_list|,
operator|(
operator|(
name|RegionScannerImpl
operator|)
name|is
operator|)
operator|.
name|storeHeap
operator|.
name|getHeap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * This method tests https://issues.apache.org/jira/browse/HBASE-2516.    *     * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testGetScanner_WithRegionClosed
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|}
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Got IOException during initHRegion, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|region
operator|.
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|getScanner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to get an exception during getScanner on a region that is closed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotServingRegionException
name|e
parameter_list|)
block|{
comment|// this is the correct exception that is expected
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Got wrong type of exception - should be a NotServingRegionException, but was an IOException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionScanner_Next
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam4"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|,
name|fam4
block|}
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in Region
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam3
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam4
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam3
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam4
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|ts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam4
argument_list|)
expr_stmt|;
name|InternalScanner
name|is
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|res
init|=
literal|null
decl_stmt|;
comment|// Result 1
name|List
argument_list|<
name|Cell
argument_list|>
name|expected1
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|expected1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam2
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expected1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam4
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
expr_stmt|;
name|is
operator|.
name|next
argument_list|(
name|res
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|equalsIgnoreMvccVersion
argument_list|(
name|expected1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Result 2
name|List
argument_list|<
name|Cell
argument_list|>
name|expected2
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|expected2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam2
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|expected2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|fam4
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
expr_stmt|;
name|is
operator|.
name|next
argument_list|(
name|res
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|res
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|equalsIgnoreMvccVersion
argument_list|(
name|expected2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|res
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanner_ExplicitColumns_FromMemStore_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|}
decl_stmt|;
name|long
name|ts1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in Region
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Expected
name|List
argument_list|<
name|Cell
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|MAX_VERSIONS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|// Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanner_ExplicitColumns_FromFilesOnly_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|}
decl_stmt|;
name|long
name|ts1
init|=
literal|1
decl_stmt|;
comment|// System.currentTimeMillis();
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in Region
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Expected
name|List
argument_list|<
name|Cell
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|MAX_VERSIONS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|// Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|equalsIgnoreMvccVersion
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanner_ExplicitColumns_FromMemStoreAndFiles_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|}
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
literal|1
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
name|long
name|ts4
init|=
name|ts1
operator|+
literal|3
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in Region
name|KeyValue
name|kv14
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv24
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv14
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv24
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Expected
name|List
argument_list|<
name|Cell
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv14
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv24
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|qf2
argument_list|)
expr_stmt|;
name|int
name|versions
init|=
literal|3
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|versions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|// Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|equalsIgnoreMvccVersion
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanner_Wildcard_FromMemStore_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|}
decl_stmt|;
name|long
name|ts1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in Region
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Expected
name|List
argument_list|<
name|Cell
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|MAX_VERSIONS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|// Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanner_Wildcard_FromFilesOnly_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
literal|1
decl_stmt|;
comment|// System.currentTimeMillis();
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in Region
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Expected
name|List
argument_list|<
name|Cell
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|MAX_VERSIONS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|// Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|equalsIgnoreMvccVersion
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanner_StopRow1542
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row111"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row222"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row333"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row444"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row555"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Pub111"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Pub222"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|15L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row3
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|20L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row4
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|30L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row5
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|col1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|40L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row3
argument_list|,
name|row4
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|col1
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertICV
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|familiy
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|int
name|amount
parameter_list|)
throws|throws
name|IOException
block|{
comment|// run a get and see?
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|familiy
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|int
name|r
init|=
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|amount
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanner_Wildcard_FromMemStoreAndFiles_EnforceVersions
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"quateslifier2"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
literal|1
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|long
name|ts3
init|=
name|ts1
operator|+
literal|2
decl_stmt|;
name|long
name|ts4
init|=
name|ts1
operator|+
literal|3
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Putting data in Region
name|KeyValue
name|kv14
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv13
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv24
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv23
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|fam1
argument_list|,
name|qf2
argument_list|,
name|ts1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv14
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv24
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv21
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Expected
name|List
argument_list|<
name|KeyValue
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv14
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv13
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv12
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv24
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv23
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|kv22
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|int
name|versions
init|=
literal|3
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|versions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|hasNext
argument_list|)
expr_stmt|;
comment|// Verify result
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|CellComparator
operator|.
name|equalsIgnoreMvccVersion
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Added for HBASE-5416    *     * Here we test scan optimization when only subset of CFs are used in filter    * conditions.    */
annotation|@
name|Test
specifier|public
name|void
name|testScanner_JoinedScanners
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|cf_essential
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"essential"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf_joined
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"joined"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf_alpha
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"alpha"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cf_essential
argument_list|,
name|cf_joined
argument_list|,
name|cf_alpha
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col_normal
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col_alpha
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|filtered_val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf_essential
argument_list|,
name|col_normal
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf_joined
argument_list|,
name|col_alpha
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf_essential
argument_list|,
name|col_alpha
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf_joined
argument_list|,
name|col_normal
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf_alpha
argument_list|,
name|col_alpha
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row3
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf_essential
argument_list|,
name|col_normal
argument_list|,
name|filtered_val
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf_joined
argument_list|,
name|col_normal
argument_list|,
name|filtered_val
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Check two things:
comment|// 1. result list contains expected values
comment|// 2. result list is sorted properly
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|Filter
name|filter
init|=
operator|new
name|SingleColumnValueExcludeFilter
argument_list|(
name|cf_essential
argument_list|,
name|col_normal
argument_list|,
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|filtered_val
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"orderCheck"
argument_list|,
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cf_alpha
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"orderCheck"
argument_list|,
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|cf_essential
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"orderCheck"
argument_list|,
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|cf_joined
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * HBASE-5416    *     * Test case when scan limits amount of KVs returned on each next() call.    */
annotation|@
name|Test
specifier|public
name|void
name|testScanner_JoinedScannersWithLimits
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|cf_first
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"first"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|cf_second
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"second"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cf_first
argument_list|,
name|cf_second
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|col_a
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|col_b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|Put
name|put
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf_first
argument_list|,
name|col_a
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|5
condition|)
block|{
name|put
operator|.
name|add
argument_list|(
name|cf_first
argument_list|,
name|col_b
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf_second
argument_list|,
name|col_a
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf_second
argument_list|,
name|col_b
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setLoadColumnFamiliesOnDemand
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Filter
name|bogusFilter
init|=
operator|new
name|FilterBase
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFamilyEssential
parameter_list|(
name|byte
index|[]
name|name
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|name
argument_list|,
name|cf_first
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|bogusFilter
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
comment|// Our data looks like this:
comment|// r0: first:a, first:b, second:a, second:b
comment|// r1: first:a, first:b, second:a, second:b
comment|// r2: first:a, first:b, second:a, second:b
comment|// r3: first:a, first:b, second:a, second:b
comment|// r4: first:a, first:b, second:a, second:b
comment|// r5: first:a
comment|// r6: first:a
comment|// r7: first:a
comment|// r8: first:a
comment|// r9: first:a
comment|// But due to next's limit set to 3, we should get this:
comment|// r0: first:a, first:b, second:a
comment|// r0: second:b
comment|// r1: first:a, first:b, second:a
comment|// r1: second:b
comment|// r2: first:a, first:b, second:a
comment|// r2: second:b
comment|// r3: first:a, first:b, second:a
comment|// r3: second:b
comment|// r4: first:a, first:b, second:a
comment|// r4: second:b
comment|// r5: first:a
comment|// r6: first:a
comment|// r7: first:a
comment|// r8: first:a
comment|// r9: first:a
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|more
init|=
name|s
operator|.
name|next
argument_list|(
name|results
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|index
operator|>>
literal|1
operator|)
operator|<
literal|5
condition|)
block|{
if|if
condition|(
name|index
operator|%
literal|2
operator|==
literal|0
condition|)
name|assertEquals
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
else|else
name|assertEquals
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
name|assertEquals
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|index
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|more
condition|)
break|break;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// ////////////////////////////////////////////////////////////////////////////
comment|// Split test
comment|// ////////////////////////////////////////////////////////////////////////////
comment|/**    * Splits twice and verifies getting from each of the split regions.    *     * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBasicSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|,
name|fam3
block|}
decl_stmt|;
name|Configuration
name|hc
init|=
name|initSplit
argument_list|()
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|hc
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|""
operator|+
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|region
argument_list|,
name|fam3
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|byte
index|[]
name|splitRow
init|=
name|region
operator|.
name|checkSplit
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|splitRow
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"SplitRow: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|splitRow
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
index|[]
name|regions
init|=
name|splitRegion
argument_list|(
name|region
argument_list|,
name|splitRow
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Need to open the regions.
comment|// TODO: Add an 'open' to HRegion... don't do open by constructing
comment|// instance.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regions
index|[
name|i
index|]
operator|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Assert can get rows out of new regions. Should be able to get first
comment|// row from first region and the midkey from second region.
name|assertGet
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
name|fam3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertGet
argument_list|(
name|regions
index|[
literal|1
index|]
argument_list|,
name|fam3
argument_list|,
name|splitRow
argument_list|)
expr_stmt|;
comment|// Test I can get scanner and that it starts at right place.
name|assertScan
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
name|fam3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertScan
argument_list|(
name|regions
index|[
literal|1
index|]
argument_list|,
name|fam3
argument_list|,
name|splitRow
argument_list|)
expr_stmt|;
comment|// Now prove can't split regions that have references.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Add so much data to this region, we create a store file that is>
comment|// than one of our unsplitable references. it will.
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|fam3
argument_list|)
expr_stmt|;
block|}
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|fam2
argument_list|)
expr_stmt|;
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|fam1
argument_list|)
expr_stmt|;
name|regions
index|[
name|i
index|]
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|midkeys
init|=
operator|new
name|byte
index|[
name|regions
operator|.
name|length
index|]
index|[]
decl_stmt|;
comment|// To make regions splitable force compaction.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regions
index|[
name|i
index|]
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|midkeys
index|[
name|i
index|]
operator|=
name|regions
index|[
name|i
index|]
operator|.
name|checkSplit
argument_list|()
expr_stmt|;
block|}
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
name|sortedMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|HRegion
argument_list|>
argument_list|()
decl_stmt|;
comment|// Split these two daughter regions so then I'll have 4 regions. Will
comment|// split because added data above.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HRegion
index|[]
name|rs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|midkeys
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|rs
operator|=
name|splitRegion
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
name|midkeys
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|sortedMap
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|rs
index|[
name|j
index|]
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|rs
index|[
name|j
index|]
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Made 4 regions"
argument_list|)
expr_stmt|;
comment|// The splits should have been even. Test I can get some arbitrary row
comment|// out of each.
name|int
name|interval
init|=
operator|(
name|LAST_CHAR
operator|-
name|FIRST_CHAR
operator|)
operator|/
literal|3
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|sortedMap
operator|.
name|values
argument_list|()
control|)
block|{
name|assertGet
argument_list|(
name|r
argument_list|,
name|fam3
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|b
index|[
literal|0
index|]
operator|+=
name|interval
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|regions
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Ignore.
block|}
block|}
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|Configuration
name|hc
init|=
name|initSplit
argument_list|()
decl_stmt|;
name|int
name|numRows
init|=
literal|10
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam3
block|}
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|hc
argument_list|,
name|families
argument_list|)
expr_stmt|;
comment|// Put data in region
name|int
name|startRow
init|=
literal|100
decl_stmt|;
name|putData
argument_list|(
name|startRow
argument_list|,
name|numRows
argument_list|,
name|qualifier
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|int
name|splitRow
init|=
name|startRow
operator|+
name|numRows
decl_stmt|;
name|putData
argument_list|(
name|splitRow
argument_list|,
name|numRows
argument_list|,
name|qualifier
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|HRegion
index|[]
name|regions
init|=
literal|null
decl_stmt|;
try|try
block|{
name|regions
operator|=
name|splitRegion
argument_list|(
name|region
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|splitRow
argument_list|)
argument_list|)
expr_stmt|;
comment|// Opening the regions returned.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regions
index|[
name|i
index|]
operator|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Verifying that the region has been split
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|regions
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Verifying that all data is still there and that data is in the right
comment|// place
name|verifyData
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
name|startRow
argument_list|,
name|numRows
argument_list|,
name|qualifier
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|verifyData
argument_list|(
name|regions
index|[
literal|1
index|]
argument_list|,
name|splitRow
argument_list|,
name|numRows
argument_list|,
name|qualifier
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Flushes the cache in a thread while scanning. The tests verify that the    * scan is coherent - e.g. the returned results are always of the same or    * later update as the previous results.    *     * @throws IOException    *           scan / compact    * @throws InterruptedException    *           thread join    */
annotation|@
name|Test
specifier|public
name|void
name|testFlushCacheWhileScanning
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|int
name|numRows
init|=
literal|1000
decl_stmt|;
name|int
name|flushAndScanInterval
init|=
literal|10
decl_stmt|;
name|int
name|compactInterval
init|=
literal|10
operator|*
name|flushAndScanInterval
decl_stmt|;
name|String
name|method
init|=
literal|"testFlushCacheWhileScanning"
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
try|try
block|{
name|FlushThread
name|flushThread
init|=
operator|new
name|FlushThread
argument_list|()
decl_stmt|;
name|flushThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|SingleColumnValueFilter
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|5L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|toggle
init|=
literal|true
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|%
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
name|i
operator|%
name|compactInterval
operator|==
literal|0
condition|)
block|{
comment|// System.out.println("iteration = " + i);
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|5L
condition|)
block|{
name|expectedCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
name|i
operator|%
name|flushAndScanInterval
operator|==
literal|0
condition|)
block|{
name|res
operator|.
name|clear
argument_list|()
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
if|if
condition|(
name|toggle
condition|)
block|{
name|flushThread
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|res
argument_list|)
condition|)
empty_stmt|;
if|if
condition|(
operator|!
name|toggle
condition|)
block|{
name|flushThread
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|expectedCount
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|toggle
operator|=
operator|!
name|toggle
expr_stmt|;
block|}
block|}
name|flushThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|checkNoError
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|FlushThread
extends|extends
name|Thread
block|{
specifier|private
specifier|volatile
name|boolean
name|done
decl_stmt|;
specifier|private
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|done
parameter_list|()
block|{
name|done
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkNoError
parameter_list|()
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|done
operator|=
literal|false
expr_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignored
parameter_list|)
block|{
if|if
condition|(
name|done
condition|)
block|{
break|break;
block|}
block|}
block|}
try|try
block|{
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while flusing cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|error
operator|=
name|e
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Writes very wide records and scans for the latest every time.. Flushes and    * compacts the region every now and then to keep things realistic.    *     * @throws IOException    *           by flush / scan / compaction    * @throws InterruptedException    *           when joining threads    */
annotation|@
name|Test
specifier|public
name|void
name|testWritesWhileScanning
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|testCount
init|=
literal|100
decl_stmt|;
name|int
name|numRows
init|=
literal|1
decl_stmt|;
name|int
name|numFamilies
init|=
literal|10
decl_stmt|;
name|int
name|numQualifiers
init|=
literal|100
decl_stmt|;
name|int
name|flushInterval
init|=
literal|7
decl_stmt|;
name|int
name|compactInterval
init|=
literal|5
operator|*
name|flushInterval
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
operator|new
name|byte
index|[
name|numFamilies
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFamilies
condition|;
name|i
operator|++
control|)
block|{
name|families
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|qualifiers
init|=
operator|new
name|byte
index|[
name|numQualifiers
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQualifiers
condition|;
name|i
operator|++
control|)
block|{
name|qualifiers
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|String
name|method
init|=
literal|"testWritesWhileScanning"
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|PutThread
name|putThread
init|=
operator|new
name|PutThread
argument_list|(
name|numRows
argument_list|,
name|families
argument_list|,
name|qualifiers
argument_list|)
decl_stmt|;
name|putThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|waitForFirstPut
argument_list|()
expr_stmt|;
name|FlushThread
name|flushThread
init|=
operator|new
name|FlushThread
argument_list|()
decl_stmt|;
name|flushThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|expectedCount
init|=
name|numFamilies
operator|*
name|numQualifiers
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|long
name|prevTimestamp
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testCount
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
name|i
operator|%
name|compactInterval
operator|==
literal|0
condition|)
block|{
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
literal|0
operator|&&
name|i
operator|%
name|flushInterval
operator|==
literal|0
condition|)
block|{
name|flushThread
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|boolean
name|previousEmpty
init|=
name|res
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|res
operator|.
name|clear
argument_list|()
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|res
argument_list|)
condition|)
empty_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|previousEmpty
operator|||
name|i
operator|>
name|compactInterval
condition|)
block|{
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|expectedCount
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|timestamp
init|=
name|res
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Timestamps were broke: "
operator|+
name|timestamp
operator|+
literal|" prev: "
operator|+
name|prevTimestamp
argument_list|,
name|timestamp
operator|>=
name|prevTimestamp
argument_list|)
expr_stmt|;
name|prevTimestamp
operator|=
name|timestamp
expr_stmt|;
block|}
block|}
name|putThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|checkNoError
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|flushThread
operator|.
name|checkNoError
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|PutThread
extends|extends
name|Thread
block|{
specifier|private
specifier|volatile
name|boolean
name|done
decl_stmt|;
specifier|private
specifier|volatile
name|int
name|numPutsFinished
init|=
literal|0
decl_stmt|;
specifier|private
name|Throwable
name|error
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|numRows
decl_stmt|;
specifier|private
name|byte
index|[]
index|[]
name|families
decl_stmt|;
specifier|private
name|byte
index|[]
index|[]
name|qualifiers
decl_stmt|;
specifier|private
name|PutThread
parameter_list|(
name|int
name|numRows
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|)
block|{
name|this
operator|.
name|numRows
operator|=
name|numRows
expr_stmt|;
name|this
operator|.
name|families
operator|=
name|families
expr_stmt|;
name|this
operator|.
name|qualifiers
operator|=
name|qualifiers
expr_stmt|;
block|}
comment|/**      * Block until this thread has put at least one row.      */
specifier|public
name|void
name|waitForFirstPut
parameter_list|()
throws|throws
name|InterruptedException
block|{
comment|// wait until put thread actually puts some data
while|while
condition|(
name|numPutsFinished
operator|==
literal|0
condition|)
block|{
name|checkNoError
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|done
parameter_list|()
block|{
name|done
operator|=
literal|true
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkNoError
parameter_list|()
block|{
if|if
condition|(
name|error
operator|!=
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|done
operator|=
literal|false
expr_stmt|;
while|while
condition|(
operator|!
name|done
condition|)
block|{
try|try
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|numRows
condition|;
name|r
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|r
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|numPutsFinished
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
for|for
control|(
name|byte
index|[]
name|qualifier
range|:
name|qualifiers
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
operator|(
name|long
operator|)
name|numPutsFinished
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|numPutsFinished
operator|++
expr_stmt|;
if|if
condition|(
name|numPutsFinished
operator|>
literal|0
operator|&&
name|numPutsFinished
operator|%
literal|47
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"put iteration = "
operator|+
name|numPutsFinished
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|,
operator|(
name|long
operator|)
name|numPutsFinished
operator|-
literal|30
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|numPutsFinished
operator|++
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedIOException
name|e
parameter_list|)
block|{
comment|// This is fine. It means we are done, or didn't get the lock on time
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error while putting records"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|error
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Writes very wide records and gets the latest row every time.. Flushes and    * compacts the region aggressivly to catch issues.    *     * @throws IOException    *           by flush / scan / compaction    * @throws InterruptedException    *           when joining threads    */
annotation|@
name|Test
specifier|public
name|void
name|testWritesWhileGetting
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|testCount
init|=
literal|100
decl_stmt|;
name|int
name|numRows
init|=
literal|1
decl_stmt|;
name|int
name|numFamilies
init|=
literal|10
decl_stmt|;
name|int
name|numQualifiers
init|=
literal|100
decl_stmt|;
name|int
name|compactInterval
init|=
literal|100
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
operator|new
name|byte
index|[
name|numFamilies
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFamilies
condition|;
name|i
operator|++
control|)
block|{
name|families
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|qualifiers
init|=
operator|new
name|byte
index|[
name|numQualifiers
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numQualifiers
condition|;
name|i
operator|++
control|)
block|{
name|qualifiers
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|String
name|method
init|=
literal|"testWritesWhileGetting"
decl_stmt|;
comment|// This test flushes constantly and can cause many files to be created,
comment|// possibly
comment|// extending over the ulimit. Make sure compactions are aggressive in
comment|// reducing
comment|// the number of HFiles created.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.max"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|PutThread
name|putThread
init|=
literal|null
decl_stmt|;
name|MultithreadedTestUtil
operator|.
name|TestContext
name|ctx
init|=
operator|new
name|MultithreadedTestUtil
operator|.
name|TestContext
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|putThread
operator|=
operator|new
name|PutThread
argument_list|(
name|numRows
argument_list|,
name|families
argument_list|,
name|qualifiers
argument_list|)
expr_stmt|;
name|putThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|waitForFirstPut
argument_list|()
expr_stmt|;
comment|// Add a thread that flushes as fast as possible
name|ctx
operator|.
name|addThread
argument_list|(
operator|new
name|RepeatingTestThread
argument_list|(
name|ctx
argument_list|)
block|{
specifier|private
name|int
name|flushesSinceCompact
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFlushesSinceCompact
init|=
literal|20
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|doAnAction
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|region
operator|.
name|flushcache
argument_list|()
condition|)
block|{
operator|++
name|flushesSinceCompact
expr_stmt|;
block|}
comment|// Compact regularly to avoid creating too many files and exceeding
comment|// the ulimit.
if|if
condition|(
name|flushesSinceCompact
operator|==
name|maxFlushesSinceCompact
condition|)
block|{
name|region
operator|.
name|compactStores
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|flushesSinceCompact
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|startThreads
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row0"
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
name|int
name|expectedCount
init|=
name|numFamilies
operator|*
name|numQualifiers
decl_stmt|;
name|long
name|prevTimestamp
init|=
literal|0L
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testCount
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|previousEmpty
init|=
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|result
operator|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|previousEmpty
operator|||
name|i
operator|>
name|compactInterval
condition|)
block|{
name|assertEquals
argument_list|(
literal|"i="
operator|+
name|i
argument_list|,
name|expectedCount
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO this was removed, now what dangit?!
comment|// search looking for the qualifier in question?
name|long
name|timestamp
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
if|if
condition|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|kv
argument_list|,
name|families
index|[
literal|0
index|]
argument_list|)
operator|&&
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|kv
argument_list|,
name|qualifiers
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|timestamp
operator|=
name|kv
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|timestamp
operator|>=
name|prevTimestamp
argument_list|)
expr_stmt|;
name|prevTimestamp
operator|=
name|timestamp
expr_stmt|;
name|Cell
name|previousKV
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|byte
index|[]
name|thisValue
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousKV
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|previousKV
argument_list|)
argument_list|,
name|thisValue
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"These two KV should have the same value."
operator|+
literal|" Previous KV:"
operator|+
name|previousKV
operator|+
literal|"(memStoreTS:"
operator|+
name|previousKV
operator|.
name|getMvccVersion
argument_list|()
operator|+
literal|")"
operator|+
literal|", New KV: "
operator|+
name|kv
operator|+
literal|"(memStoreTS:"
operator|+
name|kv
operator|.
name|getMvccVersion
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|previousKV
argument_list|)
argument_list|,
name|thisValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|previousKV
operator|=
name|kv
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|putThread
operator|!=
literal|null
condition|)
name|putThread
operator|.
name|done
argument_list|()
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
if|if
condition|(
name|putThread
operator|!=
literal|null
condition|)
block|{
name|putThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|putThread
operator|.
name|checkNoError
argument_list|()
expr_stmt|;
block|}
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHolesInMeta
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"x"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|,
name|family
argument_list|)
expr_stmt|;
try|try
block|{
name|byte
index|[]
name|rowNotServed
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|rowNotServed
argument_list|)
decl_stmt|;
try|try
block|{
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WrongRegionException
name|x
parameter_list|)
block|{
comment|// OK
block|}
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIndexesScanWithOneDeletedRow
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
comment|// Setting up region
name|String
name|method
init|=
literal|"testIndexesScanWithOneDeletedRow"
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|,
literal|1L
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|idxScan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|idxScan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|idxScan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|Arrays
operator|.
expr|<
name|Filter
operator|>
name|asList
argument_list|(
operator|new
name|SingleColumnValueFilter
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|SingleColumnValueFilter
argument_list|(
name|family
argument_list|,
name|qual1
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3L
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|idxScan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|res
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|res
argument_list|)
condition|)
empty_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// ////////////////////////////////////////////////////////////////////////////
comment|// Bloom filter test
comment|// ////////////////////////////////////////////////////////////////////////////
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilterSize
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
comment|// Create Table
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fam1
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|ROWCOL
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|TEST_UTIL
operator|.
name|createLocalHRegion
argument_list|(
name|info
argument_list|,
name|htd
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|num_unique_rows
init|=
literal|10
decl_stmt|;
name|int
name|duplicate_multiplier
init|=
literal|2
decl_stmt|;
name|int
name|num_storefiles
init|=
literal|4
decl_stmt|;
name|int
name|version
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|num_storefiles
condition|;
name|f
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|duplicate_multiplier
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|num_unique_rows
condition|;
name|j
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|qf1
argument_list|,
name|version
operator|++
argument_list|,
name|val1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
comment|// before compaction
name|HStore
name|store
init|=
operator|(
name|HStore
operator|)
name|region
operator|.
name|getStore
argument_list|(
name|fam1
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
name|store
operator|.
name|getStorefiles
argument_list|()
decl_stmt|;
for|for
control|(
name|StoreFile
name|storefile
range|:
name|storeFiles
control|)
block|{
name|StoreFile
operator|.
name|Reader
name|reader
init|=
name|storefile
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|num_unique_rows
operator|*
name|duplicate_multiplier
argument_list|,
name|reader
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|num_unique_rows
argument_list|,
name|reader
operator|.
name|getFilterEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// after compaction
name|storeFiles
operator|=
name|store
operator|.
name|getStorefiles
argument_list|()
expr_stmt|;
for|for
control|(
name|StoreFile
name|storefile
range|:
name|storeFiles
control|)
block|{
name|StoreFile
operator|.
name|Reader
name|reader
init|=
name|storefile
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|num_unique_rows
operator|*
name|duplicate_multiplier
operator|*
name|num_storefiles
argument_list|,
name|reader
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|num_unique_rows
argument_list|,
name|reader
operator|.
name|getFilterEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllColumnsWithBloomFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testAllColumnsWithBloomFilter"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
comment|// Create table
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|ROWCOL
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|TEST_UTIL
operator|.
name|createLocalHRegion
argument_list|(
name|info
argument_list|,
name|htd
argument_list|)
expr_stmt|;
try|try
block|{
comment|// For row:0, col:0: insert versions 1 through 5.
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row:"
operator|+
literal|0
argument_list|)
decl_stmt|;
name|byte
name|column
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
literal|0
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|idx
init|=
literal|1
init|;
name|idx
operator|<=
literal|4
condition|;
name|idx
operator|++
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|column
argument_list|,
name|idx
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value-version-"
operator|+
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Flush
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Get rows
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|rawCells
argument_list|()
decl_stmt|;
comment|// Check if rows are correct
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkOneCell
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Testcase to cover bug-fix for HBASE-2823 Ensures correct delete when    * issuing delete row on columns with bloom filter set to row+col    * (BloomType.ROWCOL)    */
annotation|@
name|Test
specifier|public
name|void
name|testDeleteRowWithBloomFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|familyName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"familyName"
argument_list|)
decl_stmt|;
comment|// Create Table
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|familyName
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|ROWCOL
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|TEST_UTIL
operator|.
name|createLocalHRegion
argument_list|(
name|info
argument_list|,
name|htd
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Insert some data
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
name|col
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|familyName
argument_list|,
name|col
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"SomeRandomValue"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Get remaining rows (should have none)
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|familyName
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|keyValues
init|=
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|keyValues
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetHDFSBlocksDistribution
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|htu
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|final
name|int
name|DEFAULT_BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"dfs.block.size"
argument_list|,
name|DEFAULT_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.replication"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// set up a cluster with 3 nodes
name|MiniHBaseCluster
name|cluster
init|=
literal|null
decl_stmt|;
name|String
name|dataNodeHosts
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"host1"
block|,
literal|"host2"
block|,
literal|"host3"
block|}
decl_stmt|;
name|int
name|regionServersCount
init|=
literal|3
decl_stmt|;
try|try
block|{
name|cluster
operator|=
name|htu
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|,
name|regionServersCount
argument_list|,
name|dataNodeHosts
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fam1
block|,
name|fam2
block|}
decl_stmt|;
name|HTable
name|ht
init|=
name|htu
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|families
argument_list|)
decl_stmt|;
comment|// Setting up region
name|byte
name|row
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
name|col
index|[]
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam1
argument_list|,
name|col
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test1"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam2
argument_list|,
name|col
argument_list|,
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test2"
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|HRegion
name|firstRegion
init|=
name|htu
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|firstRegion
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|HDFSBlocksDistribution
name|blocksDistribution1
init|=
name|firstRegion
operator|.
name|getHDFSBlocksDistribution
argument_list|()
decl_stmt|;
comment|// given the default replication factor is 2 and we have 2 HFiles,
comment|// we will have total of 4 replica of blocks on 3 datanodes; thus there
comment|// must be at least one host that have replica for 2 HFiles. That host's
comment|// weight will be equal to the unique block weight.
name|long
name|uniqueBlocksWeight1
init|=
name|blocksDistribution1
operator|.
name|getUniqueBlocksTotalWeight
argument_list|()
decl_stmt|;
name|String
name|topHost
init|=
name|blocksDistribution1
operator|.
name|getTopHosts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|long
name|topHostWeight
init|=
name|blocksDistribution1
operator|.
name|getWeight
argument_list|(
name|topHost
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|uniqueBlocksWeight1
operator|==
name|topHostWeight
argument_list|)
expr_stmt|;
comment|// use the static method to compute the value, it should be the same.
comment|// static method is used by load balancer or other components
name|HDFSBlocksDistribution
name|blocksDistribution2
init|=
name|HRegion
operator|.
name|computeHDFSBlocksDistribution
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|firstRegion
operator|.
name|getTableDesc
argument_list|()
argument_list|,
name|firstRegion
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|uniqueBlocksWeight2
init|=
name|blocksDistribution2
operator|.
name|getUniqueBlocksTotalWeight
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|uniqueBlocksWeight1
operator|==
name|uniqueBlocksWeight2
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
block|{
name|htu
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Testcase to check state of region initialization task set to ABORTED or not    * if any exceptions during initialization    *     * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testStatusSettingToAbortIfAnyExceptionDuringRegionInitilization
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileSystem
name|fs
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|(
name|Path
operator|)
name|Mockito
operator|.
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|()
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
literal|"testStatusSettingToAbortIfAnyExceptionDuringRegionInitilization"
argument_list|)
decl_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|newHRegion
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|info
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// region initialization throws IOException and set task state to ABORTED.
name|region
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Region initialization should fail due to IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|io
parameter_list|)
block|{
name|List
argument_list|<
name|MonitoredTask
argument_list|>
name|tasks
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|getTasks
argument_list|()
decl_stmt|;
for|for
control|(
name|MonitoredTask
name|monitoredTask
range|:
name|tasks
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|monitoredTask
operator|instanceof
name|MonitoredRPCHandler
operator|)
operator|&&
name|monitoredTask
operator|.
name|getDescription
argument_list|()
operator|.
name|contains
argument_list|(
name|region
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Region state should be ABORTED."
argument_list|,
name|monitoredTask
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|MonitoredTask
operator|.
name|State
operator|.
name|ABORTED
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verifies that the .regioninfo file is written on region creation and that    * is recreated if missing during region opening.    */
annotation|@
name|Test
specifier|public
name|void
name|testRegionInfoFileCreation
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
operator|new
name|Path
argument_list|(
name|DIR
operator|+
literal|"testRegionInfoFileCreation"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtb"
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Create a region and skip the initialization (like CreateTableHandler)
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|hri
argument_list|,
name|rootDir
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//    HRegion region = TEST_UTIL.createLocalHRegion(hri, htd);
name|Path
name|regionDir
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Path
name|regionInfoFile
init|=
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|HRegionFileSystem
operator|.
name|REGION_INFO_FILE
argument_list|)
decl_stmt|;
comment|// Verify that the .regioninfo file is present
name|assertTrue
argument_list|(
name|HRegionFileSystem
operator|.
name|REGION_INFO_FILE
operator|+
literal|" should be present in the region dir"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|regionInfoFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to open the region
name|region
operator|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|rootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|regionDir
argument_list|,
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
comment|// Verify that the .regioninfo file is still there
name|assertTrue
argument_list|(
name|HRegionFileSystem
operator|.
name|REGION_INFO_FILE
operator|+
literal|" should be present in the region dir"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|regionInfoFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove the .regioninfo file and verify is recreated on region open
name|fs
operator|.
name|delete
argument_list|(
name|regionInfoFile
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|HRegionFileSystem
operator|.
name|REGION_INFO_FILE
operator|+
literal|" should be removed from the region dir"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|regionInfoFile
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|rootDir
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|//    region = TEST_UTIL.openHRegion(hri, htd);
name|assertEquals
argument_list|(
name|regionDir
argument_list|,
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
comment|// Verify that the .regioninfo file is still there
name|assertTrue
argument_list|(
name|HRegionFileSystem
operator|.
name|REGION_INFO_FILE
operator|+
literal|" should be present in the region dir"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|HRegionFileSystem
operator|.
name|REGION_INFO_FILE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * TestCase for increment    */
specifier|private
specifier|static
class|class
name|Incrementer
implements|implements
name|Runnable
block|{
specifier|private
name|HRegion
name|region
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|incRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"incRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|long
name|ONE
init|=
literal|1l
decl_stmt|;
specifier|private
name|int
name|incCounter
decl_stmt|;
specifier|public
name|Incrementer
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|int
name|incCounter
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|incCounter
operator|=
name|incCounter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|incCounter
condition|)
block|{
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|incRow
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|ONE
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
try|try
block|{
name|region
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Test case to check increment function with memstore flushing    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testParallelIncrementWithMemStoreFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|family
init|=
name|Incrementer
operator|.
name|family
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
specifier|final
name|HRegion
name|region
init|=
name|this
operator|.
name|region
decl_stmt|;
specifier|final
name|AtomicBoolean
name|incrementDone
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Runnable
name|flusher
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|incrementDone
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
comment|// after all increment finished, the row will increment to 20*100 = 2000
name|int
name|threadNum
init|=
literal|20
decl_stmt|;
name|int
name|incCounter
init|=
literal|100
decl_stmt|;
name|long
name|expected
init|=
name|threadNum
operator|*
name|incCounter
decl_stmt|;
name|Thread
index|[]
name|incrementers
init|=
operator|new
name|Thread
index|[
name|threadNum
index|]
decl_stmt|;
name|Thread
name|flushThread
init|=
operator|new
name|Thread
argument_list|(
name|flusher
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadNum
condition|;
name|i
operator|++
control|)
block|{
name|incrementers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Incrementer
argument_list|(
name|this
operator|.
name|region
argument_list|,
name|incCounter
argument_list|)
argument_list|)
expr_stmt|;
name|incrementers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|flushThread
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadNum
condition|;
name|i
operator|++
control|)
block|{
name|incrementers
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|incrementDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|flushThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Incrementer
operator|.
name|incRow
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|Incrementer
operator|.
name|family
argument_list|,
name|Incrementer
operator|.
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
name|this
operator|.
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
name|res
operator|.
name|getColumnCells
argument_list|(
name|Incrementer
operator|.
name|family
argument_list|,
name|Incrementer
operator|.
name|qualifier
argument_list|)
decl_stmt|;
comment|// we just got the latest version
name|assertEquals
argument_list|(
name|kvs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|kvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|kv
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * TestCase for append    */
specifier|private
specifier|static
class|class
name|Appender
implements|implements
name|Runnable
block|{
specifier|private
name|HRegion
name|region
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|appendRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"appendRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|CHAR
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|private
name|int
name|appendCounter
decl_stmt|;
specifier|public
name|Appender
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|int
name|appendCounter
parameter_list|)
block|{
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|appendCounter
operator|=
name|appendCounter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|<
name|appendCounter
condition|)
block|{
name|Append
name|app
init|=
operator|new
name|Append
argument_list|(
name|appendRow
argument_list|)
decl_stmt|;
name|app
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|CHAR
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
try|try
block|{
name|region
operator|.
name|append
argument_list|(
name|app
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Test case to check append function with memstore flushing    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testParallelAppendWithMemStoreFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|family
init|=
name|Appender
operator|.
name|family
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
specifier|final
name|HRegion
name|region
init|=
name|this
operator|.
name|region
decl_stmt|;
specifier|final
name|AtomicBoolean
name|appendDone
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Runnable
name|flusher
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|appendDone
operator|.
name|get
argument_list|()
condition|)
block|{
try|try
block|{
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
decl_stmt|;
comment|// after all append finished, the value will append to threadNum *
comment|// appendCounter Appender.CHAR
name|int
name|threadNum
init|=
literal|20
decl_stmt|;
name|int
name|appendCounter
init|=
literal|100
decl_stmt|;
name|byte
index|[]
name|expected
init|=
operator|new
name|byte
index|[
name|threadNum
operator|*
name|appendCounter
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadNum
operator|*
name|appendCounter
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|Appender
operator|.
name|CHAR
argument_list|,
literal|0
argument_list|,
name|expected
argument_list|,
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|Thread
index|[]
name|appenders
init|=
operator|new
name|Thread
index|[
name|threadNum
index|]
decl_stmt|;
name|Thread
name|flushThread
init|=
operator|new
name|Thread
argument_list|(
name|flusher
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadNum
condition|;
name|i
operator|++
control|)
block|{
name|appenders
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|Appender
argument_list|(
name|this
operator|.
name|region
argument_list|,
name|appendCounter
argument_list|)
argument_list|)
expr_stmt|;
name|appenders
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|flushThread
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadNum
condition|;
name|i
operator|++
control|)
block|{
name|appenders
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|appendDone
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|flushThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Appender
operator|.
name|appendRow
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|Appender
operator|.
name|family
argument_list|,
name|Appender
operator|.
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
name|this
operator|.
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
name|res
operator|.
name|getColumnCells
argument_list|(
name|Appender
operator|.
name|family
argument_list|,
name|Appender
operator|.
name|qualifier
argument_list|)
decl_stmt|;
comment|// we just got the latest version
name|assertEquals
argument_list|(
name|kvs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|kvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|appendResult
init|=
operator|new
name|byte
index|[
name|kv
operator|.
name|getValueLength
argument_list|()
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|kv
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|appendResult
argument_list|,
literal|0
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|appendResult
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Test case to check put function with memstore flushing for same row, same ts    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testPutWithMemStoreFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
empty_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"putRow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
literal|null
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|family
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|Get
name|get
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
literal|null
decl_stmt|;
name|Result
name|res
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value0"
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
literal|1234567l
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|res
operator|=
name|this
operator|.
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|res
operator|.
name|getColumnCells
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value0"
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|res
operator|=
name|this
operator|.
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|res
operator|.
name|getColumnCells
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value0"
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
literal|1234567l
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|res
operator|=
name|this
operator|.
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|res
operator|.
name|getColumnCells
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|res
operator|=
name|this
operator|.
name|region
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|res
operator|.
name|getColumnCells
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDurability
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|method
init|=
literal|"testDurability"
decl_stmt|;
comment|// there are 5 x 5 cases:
comment|// table durability(SYNC,FSYNC,ASYC,SKIP,USE_DEFAULT) x mutation
comment|// durability(SYNC,FSYNC,ASYC,SKIP,USE_DEFAULT)
comment|// expected cases for append and sync wal
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// expected cases for async wal
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
literal|5000
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
literal|5000
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
literal|5000
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
literal|5000
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
literal|5000
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
literal|5000
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// expect skip wal cases
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|FSYNC_WAL
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|ASYNC_WAL
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|durabilityTest
argument_list|(
name|method
argument_list|,
name|Durability
operator|.
name|SKIP_WAL
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|durabilityTest
parameter_list|(
name|String
name|method
parameter_list|,
name|Durability
name|tableDurability
parameter_list|,
name|Durability
name|mutationDurability
parameter_list|,
name|long
name|timeout
parameter_list|,
name|boolean
name|expectAppend
parameter_list|,
specifier|final
name|boolean
name|expectSync
parameter_list|,
specifier|final
name|boolean
name|expectSyncFromLogSyncer
parameter_list|)
throws|throws
name|Exception
block|{
name|method
operator|=
name|method
operator|+
literal|"_"
operator|+
name|tableDurability
operator|.
name|name
argument_list|()
operator|+
literal|"_"
operator|+
name|mutationDurability
operator|.
name|name
argument_list|()
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|method
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|Path
name|logDir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|DIR
operator|+
name|method
argument_list|)
argument_list|,
literal|"log"
argument_list|)
decl_stmt|;
name|HLog
name|hlog
init|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|logDir
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|HLog
name|log
init|=
name|spy
argument_list|(
name|hlog
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|,
name|tableDurability
argument_list|,
name|log
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|mutationDurability
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//verify append called or not
name|verify
argument_list|(
name|log
argument_list|,
name|expectAppend
condition|?
name|times
argument_list|(
literal|1
argument_list|)
else|:
name|never
argument_list|()
argument_list|)
operator|.
name|appendNoSync
argument_list|(
operator|(
name|HRegionInfo
operator|)
name|any
argument_list|()
argument_list|,
name|eq
argument_list|(
name|tableName
argument_list|)
argument_list|,
operator|(
name|WALEdit
operator|)
name|any
argument_list|()
argument_list|,
operator|(
name|List
argument_list|<
name|UUID
argument_list|>
operator|)
name|any
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
operator|(
name|HTableDescriptor
operator|)
name|any
argument_list|()
argument_list|,
operator|(
name|AtomicLong
operator|)
name|any
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify sync called or not
if|if
condition|(
name|expectSync
operator|||
name|expectSyncFromLogSyncer
condition|)
block|{
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|timeout
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|expectSync
condition|)
block|{
name|verify
argument_list|(
name|log
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|sync
argument_list|(
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
comment|// Hregion calls this one
block|}
elseif|else
if|if
condition|(
name|expectSyncFromLogSyncer
condition|)
block|{
name|verify
argument_list|(
name|log
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// log syncer calls this one
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|ignore
parameter_list|)
block|{           }
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|verify
argument_list|(
name|log
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|sync
argument_list|(
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|log
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
name|hlog
operator|.
name|close
argument_list|()
expr_stmt|;
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|putData
parameter_list|(
name|int
name|startRow
parameter_list|,
name|int
name|numRows
parameter_list|,
name|byte
index|[]
name|qf
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
name|startRow
operator|+
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|qf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyData
parameter_list|(
name|HRegion
name|newReg
parameter_list|,
name|int
name|startRow
parameter_list|,
name|int
name|numRows
parameter_list|,
name|byte
index|[]
name|qf
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
name|startRow
operator|+
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qf
argument_list|)
expr_stmt|;
block|}
name|Result
name|result
init|=
name|newReg
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|raw
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|families
operator|.
name|length
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|families
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|raw
index|[
name|j
index|]
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|raw
index|[
name|j
index|]
argument_list|,
name|families
index|[
name|j
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|raw
index|[
name|j
index|]
argument_list|,
name|qf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|assertGet
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|k
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Now I have k, get values out and assert they are as expected.
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|k
argument_list|)
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
operator|.
name|setMaxVersions
argument_list|()
decl_stmt|;
name|Cell
index|[]
name|results
init|=
name|r
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|results
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|tmp
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|results
index|[
name|j
index|]
argument_list|)
decl_stmt|;
comment|// Row should be equal to value every time.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|k
argument_list|,
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Assert first value in the passed region is<code>firstValue</code>.    *     * @param r    *     * @param fs    *     * @param firstValue    *     * @throws IOException    */
specifier|private
name|void
name|assertScan
parameter_list|(
specifier|final
name|HRegion
name|r
parameter_list|,
specifier|final
name|byte
index|[]
name|fs
parameter_list|,
specifier|final
name|byte
index|[]
name|firstValue
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|fs
block|}
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|families
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|scan
operator|.
name|addFamily
argument_list|(
name|families
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|InternalScanner
name|s
init|=
name|r
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|curVals
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|OUTER_LOOP
label|:
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|curVals
argument_list|)
condition|)
block|{
for|for
control|(
name|Cell
name|kv
range|:
name|curVals
control|)
block|{
name|byte
index|[]
name|val
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|byte
index|[]
name|curval
init|=
name|val
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|curval
argument_list|,
name|firstValue
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Not asserting anything. Might as well break.
break|break
name|OUTER_LOOP
break|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Configuration
name|initSplit
parameter_list|()
block|{
comment|// Always compact if there is more than one store file.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Make lease timeout longer, lease checks less frequent
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.lease.thread.wakefrequency"
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Increase the amount of time between client retries
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// This size should make it so we always split using the addContent
comment|// below. After adding all data, the first region is 1.3M
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MAX_FILESIZE
argument_list|,
literal|1024
operator|*
literal|128
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
comment|/**    * @param tableName    * @param callingMethod    * @param conf    * @param families    * @throws IOException    * @return A region on which you must call    *         {@link HRegion#closeHRegion(HRegion)} when done.    */
specifier|public
specifier|static
name|HRegion
name|initHRegion
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|initHRegion
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|callingMethod
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|/**    * @param tableName    * @param callingMethod    * @param conf    * @param families    * @throws IOException    * @return A region on which you must call    *         {@link HRegion#closeHRegion(HRegion)} when done.    */
specifier|public
specifier|static
name|HRegion
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|initHRegion
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|callingMethod
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|/**    * @param tableName    * @param callingMethod    * @param conf    * @param isReadOnly    * @param families    * @throws IOException    * @return A region on which you must call    *         {@link HRegion#closeHRegion(HRegion)} when done.    */
specifier|public
specifier|static
name|HRegion
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isReadOnly
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|initHRegion
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|callingMethod
argument_list|,
name|conf
argument_list|,
name|isReadOnly
argument_list|,
name|families
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HRegion
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|stopKey
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isReadOnly
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|stopKey
argument_list|,
name|callingMethod
argument_list|,
name|conf
argument_list|,
name|isReadOnly
argument_list|,
name|Durability
operator|.
name|SYNC_WAL
argument_list|,
literal|null
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|/**    * @param tableName    * @param startKey    * @param stopKey    * @param callingMethod    * @param conf    * @param isReadOnly    * @param families    * @throws IOException    * @return A region on which you must call    *         {@link HRegion#closeHRegion(HRegion)} when done.    */
specifier|private
specifier|static
name|HRegion
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|stopKey
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|boolean
name|isReadOnly
parameter_list|,
name|Durability
name|durability
parameter_list|,
name|HLog
name|hlog
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|TEST_UTIL
operator|.
name|createLocalHRegion
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|stopKey
argument_list|,
name|callingMethod
argument_list|,
name|conf
argument_list|,
name|isReadOnly
argument_list|,
name|durability
argument_list|,
name|hlog
argument_list|,
name|families
argument_list|)
return|;
block|}
comment|/**    * Assert that the passed in Cell has expected contents for the specified row,    * column& timestamp.    */
specifier|private
name|void
name|checkOneCell
parameter_list|(
name|Cell
name|kv
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|rowIdx
parameter_list|,
name|int
name|colIdx
parameter_list|,
name|long
name|ts
parameter_list|)
block|{
name|String
name|ctx
init|=
literal|"rowIdx="
operator|+
name|rowIdx
operator|+
literal|"; colIdx="
operator|+
name|colIdx
operator|+
literal|"; ts="
operator|+
name|ts
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Row mismatch which checking: "
operator|+
name|ctx
argument_list|,
literal|"row:"
operator|+
name|rowIdx
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ColumnFamily mismatch while checking: "
operator|+
name|ctx
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|cf
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Column qualifier mismatch while checking: "
operator|+
name|ctx
argument_list|,
literal|"column:"
operator|+
name|colIdx
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Timestamp mismatch while checking: "
operator|+
name|ctx
argument_list|,
name|ts
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Value mismatch while checking: "
operator|+
name|ctx
argument_list|,
literal|"value-version-"
operator|+
name|ts
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReverseScanner_FromMemStore_SingleCF_Normal
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rowC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowC"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|cf
block|}
decl_stmt|;
name|byte
index|[]
name|col
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
literal|1
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|rowC
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|rowC
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|rowB
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowC
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowA
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowB
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|rowC
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|currRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowC
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowA
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReverseScanner_FromMemStore_SingleCF_LargerKey
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rowC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowC"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowD
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowD"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|cf
block|}
decl_stmt|;
name|byte
index|[]
name|col
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
literal|1
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|rowC
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|rowC
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|rowB
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowC
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowA
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowB
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|rowD
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|currRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowC
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowA
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReverseScanner_FromMemStore_SingleCF_FullScan
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|rowC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowC"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|cf
block|}
decl_stmt|;
name|byte
index|[]
name|col
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
literal|1
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|rowC
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|rowC
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|rowB
argument_list|,
name|cf
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowC
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv11
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowA
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowB
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|currRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowC
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowB
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowA
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReverseScanner_moreRowsMayExistAfter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// case for "INCLUDE_AND_SEEK_NEXT_ROW& SEEK_NEXT_ROW" endless loop
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowC"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowD
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowD"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowE"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|cf
block|}
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
literal|1
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
name|cf
argument_list|,
name|col1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|rowB
argument_list|,
name|cf
argument_list|,
name|col1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|rowC
argument_list|,
name|cf
argument_list|,
name|col1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4_1
init|=
operator|new
name|KeyValue
argument_list|(
name|rowD
argument_list|,
name|cf
argument_list|,
name|col1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4_2
init|=
operator|new
name|KeyValue
argument_list|(
name|rowD
argument_list|,
name|cf
argument_list|,
name|col2
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv5
init|=
operator|new
name|KeyValue
argument_list|(
name|rowE
argument_list|,
name|cf
argument_list|,
name|col1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowA
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowB
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowC
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowD
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv4_1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowD
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv4_2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowE
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv5
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|rowD
argument_list|,
name|rowA
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|families
index|[
literal|0
index|]
argument_list|,
name|col1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|currRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowD
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowC
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowB
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|rowD
argument_list|,
name|rowA
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|families
index|[
literal|0
index|]
argument_list|,
name|col2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowD
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReverseScanner_smaller_blocksize
parameter_list|()
throws|throws
name|IOException
block|{
comment|// case to ensure no conflict with HFile index optimization
name|byte
index|[]
name|rowA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowB"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowC"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowD
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowD"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowE"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|cf
block|}
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
literal|1
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|HBaseConfiguration
name|config
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|setInt
argument_list|(
literal|"test.block.size"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|config
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|rowA
argument_list|,
name|cf
argument_list|,
name|col1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|rowB
argument_list|,
name|cf
argument_list|,
name|col1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|rowC
argument_list|,
name|cf
argument_list|,
name|col1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4_1
init|=
operator|new
name|KeyValue
argument_list|(
name|rowD
argument_list|,
name|cf
argument_list|,
name|col1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4_2
init|=
operator|new
name|KeyValue
argument_list|(
name|rowD
argument_list|,
name|cf
argument_list|,
name|col2
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv5
init|=
operator|new
name|KeyValue
argument_list|(
name|rowE
argument_list|,
name|cf
argument_list|,
name|col1
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowA
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowB
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowC
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowD
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv4_1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowD
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv4_2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rowE
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv5
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|rowD
argument_list|,
name|rowA
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|families
index|[
literal|0
index|]
argument_list|,
name|col1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|currRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowD
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowC
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowB
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|rowD
argument_list|,
name|rowA
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|families
index|[
literal|0
index|]
argument_list|,
name|col2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|rowD
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReverseScanner_FromMemStoreAndHFiles_MultiCFs1
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row0"
argument_list|)
decl_stmt|;
comment|// 1 kv
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
comment|// 2 kv
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
comment|// 4 kv
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
comment|// 2 kv
name|byte
index|[]
name|row4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row4"
argument_list|)
decl_stmt|;
comment|// 5 kv
name|byte
index|[]
name|row5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row5"
argument_list|)
decl_stmt|;
comment|// 2 kv
name|byte
index|[]
name|cf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF3"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|cf1
block|,
name|cf2
block|,
name|cf3
block|}
decl_stmt|;
name|byte
index|[]
name|col
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
literal|1
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
comment|// disable compactions in this test.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
comment|// kv naming style: kv(row number) totalKvCountInThisRow seq no
name|KeyValue
name|kv0_1_1
init|=
operator|new
name|KeyValue
argument_list|(
name|row0
argument_list|,
name|cf1
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv1_2_1
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|cf2
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv1_2_2
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|cf1
argument_list|,
name|col
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2_4_1
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|cf2
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2_4_2
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|cf1
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2_4_3
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|cf3
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2_4_4
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|cf1
argument_list|,
name|col
argument_list|,
name|ts
operator|+
literal|4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3_2_1
init|=
operator|new
name|KeyValue
argument_list|(
name|row3
argument_list|,
name|cf2
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3_2_2
init|=
operator|new
name|KeyValue
argument_list|(
name|row3
argument_list|,
name|cf1
argument_list|,
name|col
argument_list|,
name|ts
operator|+
literal|4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4_5_1
init|=
operator|new
name|KeyValue
argument_list|(
name|row4
argument_list|,
name|cf1
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4_5_2
init|=
operator|new
name|KeyValue
argument_list|(
name|row4
argument_list|,
name|cf3
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4_5_3
init|=
operator|new
name|KeyValue
argument_list|(
name|row4
argument_list|,
name|cf3
argument_list|,
name|col
argument_list|,
name|ts
operator|+
literal|5
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4_5_4
init|=
operator|new
name|KeyValue
argument_list|(
name|row4
argument_list|,
name|cf2
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4_5_5
init|=
operator|new
name|KeyValue
argument_list|(
name|row4
argument_list|,
name|cf1
argument_list|,
name|col
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv5_2_1
init|=
operator|new
name|KeyValue
argument_list|(
name|row5
argument_list|,
name|cf2
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv5_2_2
init|=
operator|new
name|KeyValue
argument_list|(
name|row5
argument_list|,
name|cf3
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// hfiles(cf1/cf2) :"row1"(1 kv) / "row2"(1 kv) / "row4"(2 kv)
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv1_2_1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv2_4_1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row4
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv4_5_4
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv4_5_5
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// hfiles(cf1/cf3) : "row1" (1 kvs) / "row2" (1 kv) / "row4" (2 kv)
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row4
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv4_5_1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv4_5_3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv1_2_2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv2_4_4
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// hfiles(cf1/cf3) : "row2"(2 kv) / "row3"(1 kvs) / "row4" (1 kv)
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row4
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv4_5_2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv2_4_2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv2_4_3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row3
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv3_2_2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// memstore(cf1/cf2/cf3) : "row0" (1 kvs) / "row3" ( 1 kv) / "row5" (max)
comment|// ( 2 kv)
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row0
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv0_1_1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row3
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv3_2_1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row5
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv5_2_1
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv5_2_2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// scan range = ["row4", min), skip the max "row5"
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row4
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setBatch
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|currRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
literal|false
decl_stmt|;
comment|// 1. scan out "row4" (5 kvs), "row5" can't be scanned out since not
comment|// included in scan range
comment|// "row4" takes 2 next() calls since batch=3
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
comment|// 2. scan out "row3" (2 kv)
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
comment|// 3. scan out "row2" (4 kvs)
comment|// "row2" takes 2 next() calls since batch=3
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
comment|// 4. scan out "row1" (2 kv)
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
comment|// 5. scan out "row0" (1 kv)
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testReverseScanner_FromMemStoreAndHFiles_MultiCFs2
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CF4"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|cf1
block|,
name|cf2
block|,
name|cf3
block|,
name|cf4
block|}
decl_stmt|;
name|byte
index|[]
name|col
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
literal|1
decl_stmt|;
name|String
name|method
init|=
name|this
operator|.
name|getName
argument_list|()
decl_stmt|;
name|HBaseConfiguration
name|conf
init|=
operator|new
name|HBaseConfiguration
argument_list|()
decl_stmt|;
comment|// disable compactions in this test.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|method
argument_list|,
name|conf
argument_list|,
name|families
argument_list|)
expr_stmt|;
try|try
block|{
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|cf1
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|cf2
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
operator|new
name|KeyValue
argument_list|(
name|row3
argument_list|,
name|cf3
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|KeyValue
name|kv4
init|=
operator|new
name|KeyValue
argument_list|(
name|row4
argument_list|,
name|cf4
argument_list|,
name|col
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// storefile1
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// storefile2
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// storefile3
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row3
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// memstore
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row4
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv4
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// scan range = ["row4", min)
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row4
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setBatch
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|currRow
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasNext
init|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row4
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
name|currRow
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasNext
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|currRow
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|currRow
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|currRow
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|row1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hasNext
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|HRegion
name|initHRegion
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|String
name|callingMethod
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|initHRegion
argument_list|(
name|tableName
argument_list|,
name|callingMethod
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|families
argument_list|)
return|;
block|}
block|}
end_class

end_unit

