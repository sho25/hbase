begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StartMiniClusterOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test for Regions Recovery Config Manager  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionsRecoveryConfigManager
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionsRecoveryConfigManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HBASE_TESTING_UTILITY
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|MiniHBaseCluster
name|cluster
decl_stmt|;
specifier|private
name|HMaster
name|hMaster
decl_stmt|;
specifier|private
name|RegionsRecoveryChore
name|regionsRecoveryChore
decl_stmt|;
specifier|private
name|RegionsRecoveryConfigManager
name|regionsRecoveryConfigManager
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|HBASE_TESTING_UTILITY
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
literal|"hbase.regions.recovery.store.file.ref.count"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
literal|"hbase.master.regions.recovery.check.interval"
argument_list|)
expr_stmt|;
name|StartMiniClusterOption
name|option
init|=
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|masterClass
argument_list|(
name|TestHMaster
operator|.
name|class
argument_list|)
operator|.
name|numRegionServers
argument_list|(
literal|1
argument_list|)
operator|.
name|numDataNodes
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HBASE_TESTING_UTILITY
operator|.
name|startMiniCluster
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|HBASE_TESTING_UTILITY
operator|.
name|getMiniHBaseCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|HBASE_TESTING_UTILITY
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChoreSchedule
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|hMaster
operator|=
name|cluster
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|Stoppable
name|stoppable
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|this
operator|.
name|regionsRecoveryChore
operator|=
operator|new
name|RegionsRecoveryChore
argument_list|(
name|stoppable
argument_list|,
name|conf
argument_list|,
name|hMaster
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsRecoveryConfigManager
operator|=
operator|new
name|RegionsRecoveryConfigManager
argument_list|(
name|this
operator|.
name|hMaster
argument_list|)
expr_stmt|;
comment|// not yet scheduled
name|Assert
operator|.
name|assertFalse
argument_list|(
name|hMaster
operator|.
name|getChoreService
argument_list|()
operator|.
name|isChoreScheduled
argument_list|(
name|regionsRecoveryChore
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsRecoveryConfigManager
operator|.
name|onConfigurationChange
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// not yet scheduled
name|Assert
operator|.
name|assertFalse
argument_list|(
name|hMaster
operator|.
name|getChoreService
argument_list|()
operator|.
name|isChoreScheduled
argument_list|(
name|regionsRecoveryChore
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.regions.recovery.check.interval"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsRecoveryConfigManager
operator|.
name|onConfigurationChange
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// not yet scheduled - missing config: hbase.regions.recovery.store.file.ref.count
name|Assert
operator|.
name|assertFalse
argument_list|(
name|hMaster
operator|.
name|getChoreService
argument_list|()
operator|.
name|isChoreScheduled
argument_list|(
name|regionsRecoveryChore
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regions.recovery.store.file.ref.count"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsRecoveryConfigManager
operator|.
name|onConfigurationChange
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// chore scheduled
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hMaster
operator|.
name|getChoreService
argument_list|()
operator|.
name|isChoreScheduled
argument_list|(
name|regionsRecoveryChore
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regions.recovery.store.file.ref.count"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsRecoveryConfigManager
operator|.
name|onConfigurationChange
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// chore re-scheduled
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hMaster
operator|.
name|getChoreService
argument_list|()
operator|.
name|isChoreScheduled
argument_list|(
name|regionsRecoveryChore
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regions.recovery.store.file.ref.count"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsRecoveryConfigManager
operator|.
name|onConfigurationChange
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// chore scheduling untouched
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hMaster
operator|.
name|getChoreService
argument_list|()
operator|.
name|isChoreScheduled
argument_list|(
name|regionsRecoveryChore
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|unset
argument_list|(
literal|"hbase.regions.recovery.store.file.ref.count"
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionsRecoveryConfigManager
operator|.
name|onConfigurationChange
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// chore un-scheduled
name|Assert
operator|.
name|assertFalse
argument_list|(
name|hMaster
operator|.
name|getChoreService
argument_list|()
operator|.
name|isChoreScheduled
argument_list|(
name|regionsRecoveryChore
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Make it public so that JVMClusterUtil can access it.
specifier|public
specifier|static
class|class
name|TestHMaster
extends|extends
name|HMaster
block|{
specifier|public
name|TestHMaster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Simple helper class that just keeps track of whether or not its stopped.    */
specifier|private
specifier|static
class|class
name|StoppableImplementation
implements|implements
name|Stoppable
block|{
specifier|private
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|this
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stop
return|;
block|}
block|}
block|}
end_class

end_unit

