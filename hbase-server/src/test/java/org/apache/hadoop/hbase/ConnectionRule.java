begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExternalResource
import|;
end_import

begin_comment
comment|/**  * A {@link Rule} that manages the lifecycle of an instance of {@link AsyncConnection}. Can be used  * in either the {@link Rule} or {@link ClassRule} positions.  *</p>  * Use in combination with {@link MiniClusterRule}, for example:  *  *<pre>{@code  *   public class TestMyClass {  *     private static final MiniClusterRule miniClusterRule = new MiniClusterRule();  *     private static final ConnectionRule connectionRule =  *       new ConnectionRule(miniClusterRule::createConnection);  *  *     @ClassRule  *     public static final TestRule rule = RuleChain  *       .outerRule(connectionRule)  *       .around(connectionRule);  *   }  * }</pre>  */
end_comment

begin_class
specifier|public
class|class
name|ConnectionRule
extends|extends
name|ExternalResource
block|{
specifier|private
specifier|final
name|Supplier
argument_list|<
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
argument_list|>
name|connectionSupplier
decl_stmt|;
specifier|private
name|AsyncConnection
name|connection
decl_stmt|;
specifier|public
name|ConnectionRule
parameter_list|(
specifier|final
name|Supplier
argument_list|<
name|CompletableFuture
argument_list|<
name|AsyncConnection
argument_list|>
argument_list|>
name|connectionSupplier
parameter_list|)
block|{
name|this
operator|.
name|connectionSupplier
operator|=
name|connectionSupplier
expr_stmt|;
block|}
specifier|public
name|AsyncConnection
name|getConnection
parameter_list|()
block|{
return|return
name|connection
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|before
parameter_list|()
throws|throws
name|Throwable
block|{
name|this
operator|.
name|connection
operator|=
name|connectionSupplier
operator|.
name|get
argument_list|()
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|after
parameter_list|()
block|{
if|if
condition|(
name|this
operator|.
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

