begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
operator|.
name|assertErrors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
operator|.
name|assertNoErrors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
operator|.
name|doFsck
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseMasterObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobFileName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitTransactionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitTransactionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
operator|.
name|ErrorReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
operator|.
name|HbckInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
operator|.
name|TableInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HFileCorruptionChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * This is the base class for  HBaseFsck's ability to detect reasons for inconsistent tables.  *  * Actual tests are in :  * TestHBaseFsckTwoRS  * TestHBaseFsckOneRS  * TestHBaseFsckMOB  * TestHBaseFsckReplicas  */
end_comment

begin_class
specifier|public
class|class
name|BaseTestHBaseFsck
block|{
specifier|static
specifier|final
name|int
name|POOL_SIZE
init|=
literal|7
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BaseTestHBaseFsck
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|FAM_STR
init|=
literal|"fam"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|byte
index|[]
name|FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAM_STR
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|int
name|REGION_ONLINE_TIMEOUT
init|=
literal|800
decl_stmt|;
specifier|protected
specifier|static
name|RegionStates
name|regionStates
decl_stmt|;
specifier|protected
specifier|static
name|ExecutorService
name|tableExecutorService
decl_stmt|;
specifier|protected
specifier|static
name|ScheduledThreadPoolExecutor
name|hbfsckExecutorService
decl_stmt|;
specifier|protected
specifier|static
name|ClusterConnection
name|connection
decl_stmt|;
specifier|protected
specifier|static
name|Admin
name|admin
decl_stmt|;
comment|// for the instance, reset every test run
specifier|protected
name|Table
name|tbl
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|byte
index|[]
index|[]
name|SPLITS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
block|}
decl_stmt|;
comment|// one row per region.
specifier|protected
specifier|final
specifier|static
name|byte
index|[]
index|[]
name|ROWKEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"00"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"50"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A5"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B5"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C5"
argument_list|)
block|}
decl_stmt|;
comment|/**    * Create a new region in META.    */
specifier|protected
name|HRegionInfo
name|createRegion
parameter_list|(
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|meta
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|tableExecutorService
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|hri
return|;
block|}
comment|/**    * Debugging method to dump the contents of meta.    */
specifier|protected
name|void
name|dumpMeta
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|metaRows
init|=
name|TEST_UTIL
operator|.
name|getMetaTableRows
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|row
range|:
name|metaRows
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method is used to undeploy a region -- close it and attempt to    * remove its state from the Master.    */
specifier|protected
name|void
name|undeployRegion
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|ServerName
name|sn
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
try|try
block|{
name|HBaseFsckRepair
operator|.
name|closeRegionSilentlyAndWait
argument_list|(
operator|(
name|HConnection
operator|)
name|conn
argument_list|,
name|sn
argument_list|,
name|hri
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hri
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|admin
operator|.
name|offline
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got exception when attempting to offline region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Delete a region from assignments, meta, or completely from hdfs.    * @param unassign if true unassign region if assigned    * @param metaRow  if true remove region's row from META    * @param hdfs if true remove region's dir in HDFS    */
specifier|protected
name|void
name|deleteRegion
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|boolean
name|unassign
parameter_list|,
name|boolean
name|metaRow
parameter_list|,
name|boolean
name|hdfs
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|htd
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|unassign
argument_list|,
name|metaRow
argument_list|,
name|hdfs
argument_list|,
literal|false
argument_list|,
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete a region from assignments, meta, or completely from hdfs.    * @param unassign if true unassign region if assigned    * @param metaRow  if true remove region's row from META    * @param hdfs if true remove region's dir in HDFS    * @param regionInfoOnly if true remove a region dir's .regioninfo file    * @param replicaId replica id    */
specifier|protected
name|void
name|deleteRegion
parameter_list|(
name|Configuration
name|conf
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|,
name|boolean
name|unassign
parameter_list|,
name|boolean
name|metaRow
parameter_list|,
name|boolean
name|hdfs
parameter_list|,
name|boolean
name|regionInfoOnly
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"** Before delete:"
argument_list|)
expr_stmt|;
name|dumpMeta
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locations
decl_stmt|;
try|try
init|(
name|RegionLocator
name|rl
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tbl
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
name|locations
operator|=
name|rl
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|HRegionLocation
name|location
range|:
name|locations
control|)
block|{
name|HRegionInfo
name|hri
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|ServerName
name|hsa
init|=
name|location
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|startKey
argument_list|)
operator|==
literal|0
operator|&&
name|Bytes
operator|.
name|compareTo
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|endKey
argument_list|)
operator|==
literal|0
operator|&&
name|hri
operator|.
name|getReplicaId
argument_list|()
operator|==
name|replicaId
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"RegionName: "
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|deleteRow
init|=
name|hri
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|unassign
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Undeploying region "
operator|+
name|hri
operator|+
literal|" from server "
operator|+
name|hsa
argument_list|)
expr_stmt|;
name|undeployRegion
argument_list|(
name|connection
argument_list|,
name|hsa
argument_list|,
name|hri
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|regionInfoOnly
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"deleting hdfs .regioninfo data: "
operator|+
name|hri
operator|.
name|toString
argument_list|()
operator|+
name|hsa
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|hriPath
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|HRegionFileSystem
operator|.
name|REGION_INFO_FILE
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|hriPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hdfs
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"deleting hdfs data: "
operator|+
name|hri
operator|.
name|toString
argument_list|()
operator|+
name|hsa
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|HBaseFsck
operator|.
name|debugLsr
argument_list|(
name|conf
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|p
operator|+
literal|" sucessfully? "
operator|+
name|success
argument_list|)
expr_stmt|;
name|HBaseFsck
operator|.
name|debugLsr
argument_list|(
name|conf
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|metaRow
condition|)
block|{
try|try
init|(
name|Table
name|meta
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|tableExecutorService
argument_list|)
init|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|deleteRow
argument_list|)
decl_stmt|;
name|meta
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|hri
operator|.
name|toString
argument_list|()
operator|+
name|hsa
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|getMetaTableRows
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"*** After delete:"
argument_list|)
expr_stmt|;
name|dumpMeta
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup a clean table before we start mucking with it.    *    * It will set tbl which needs to be closed after test    *    * @throws IOException    * @throws InterruptedException    * @throws KeeperException    */
name|void
name|setupTable
parameter_list|(
name|TableName
name|tablename
parameter_list|)
throws|throws
name|Exception
block|{
name|setupTableWithRegionReplica
argument_list|(
name|tablename
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup a clean table with a certain region_replica count    *    * It will set tbl which needs to be closed after test    *    * @param tableName    * @param replicaCount    * @throws Exception    */
name|void
name|setupTableWithRegionReplica
parameter_list|(
name|TableName
name|tablename
parameter_list|,
name|int
name|replicaCount
parameter_list|)
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setRegionReplication
argument_list|(
name|replicaCount
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|FAM
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// If a table has no CF's it doesn't get checked
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|desc
argument_list|,
name|SPLITS
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tablename
argument_list|,
name|tableExecutorService
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|row
range|:
name|ROWKEYS
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAM
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Setup a clean table with a mob-enabled column.    *    * @param tableName The name of a table to be created.    * @throws Exception    */
name|void
name|setupMobTable
parameter_list|(
name|TableName
name|tablename
parameter_list|)
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tablename
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|FAM
argument_list|)
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// If a table has no CF's it doesn't get checked
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|desc
argument_list|,
name|SPLITS
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tablename
argument_list|,
name|tableExecutorService
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|row
range|:
name|ROWKEYS
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|FAM
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
comment|/**    * Counts the number of row to verify data loss or non-dataloss.    */
name|int
name|countRows
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|rs
init|=
name|tbl
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
comment|/**    * delete table in preparation for next test    *    * @param tablename    * @throws IOException    */
name|void
name|cleanupTable
parameter_list|(
name|TableName
name|tablename
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|close
argument_list|()
expr_stmt|;
name|tbl
operator|=
literal|null
expr_stmt|;
block|}
operator|(
operator|(
name|ClusterConnection
operator|)
name|connection
operator|)
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tablename
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get region info from local cluster.    */
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getDeployedHRIs
parameter_list|(
specifier|final
name|HBaseAdmin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterStatus
name|status
init|=
name|admin
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|regionServers
init|=
name|status
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mm
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|hsi
range|:
name|regionServers
control|)
block|{
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
name|server
init|=
operator|(
operator|(
name|HConnection
operator|)
name|connection
operator|)
operator|.
name|getAdmin
argument_list|(
name|hsi
argument_list|)
decl_stmt|;
comment|// list all online regions from this region server
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|regionNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regions
control|)
block|{
name|regionNames
operator|.
name|add
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mm
operator|.
name|put
argument_list|(
name|hsi
argument_list|,
name|regionNames
argument_list|)
expr_stmt|;
block|}
return|return
name|mm
return|;
block|}
comment|/**    * Returns the HSI a region info is on.    */
name|ServerName
name|findDeployedHSI
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|mm
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|mm
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * This creates and fixes a bad table with a missing region -- hole in meta    * and data present but .regioinfino missing (an orphan hdfs region)in the fs.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testHDFSRegioninfoMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableHDFSRegioninfoMissing"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|ORPHAN_HDFS_REGION
block|,
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a region that is missing meta and    * not assigned to a region server.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testNotInMetaOrDeployedHole
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableNotInMetaOrDeployedHole"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// don't rm from fs
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testCleanUpDaughtersNotInMetaAfterFailedSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCleanUpDaughtersNotInMetaAfterFailedSplit"
argument_list|)
decl_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|desc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p1
init|=
operator|new
name|Put
argument_list|(
operator|(
literal|"r"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|p1
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
literal|"q1"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"v"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|put
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|flush
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|serverWith
init|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionServer
name|regionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|serverWith
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getServerWith
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|SplitTransactionImpl
name|st
init|=
operator|(
name|SplitTransactionImpl
operator|)
operator|new
name|SplitTransactionFactory
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|create
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r3"
argument_list|)
argument_list|)
decl_stmt|;
name|st
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|st
operator|.
name|stepsBeforePONR
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|regionsInTransition
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionState
name|state
range|:
name|regionsInTransition
operator|.
name|values
argument_list|()
control|)
block|{
name|am
operator|.
name|regionOffline
argument_list|(
name|state
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionsMap
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|regionsMap
operator|.
name|put
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|regionServer
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|assign
argument_list|(
name|regionsMap
argument_list|)
expr_stmt|;
name|am
operator|.
name|waitForAssignment
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|}
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|close
argument_list|()
expr_stmt|;
name|tbl
operator|=
literal|null
expr_stmt|;
block|}
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates fixes a bad table with a hole in meta.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testNotInMetaHole
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableNotInMetaHole"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// don't rm from fs
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a region that is in meta but has    * no deployment or data hdfs    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testNotInHdfs
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableNotInHdfs"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in wal only there is no data loss
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the hdfs data
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
operator|-
literal|2
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|deleteTableDir
parameter_list|(
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|HBaseFsck
operator|.
name|debugLsr
argument_list|(
name|conf
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|p
operator|+
literal|" sucessfully? "
operator|+
name|success
argument_list|)
expr_stmt|;
block|}
comment|/**    * We don't have an easy way to verify that a flush completed, so we loop until we find a    * legitimate hfile and return it.    * @param fs    * @param table    * @return Path of a flushed hfile.    * @throws IOException    */
name|Path
name|getFlushedHFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
name|FSUtils
operator|.
name|getRegionDirs
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Path
name|famDir
init|=
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|FAM_STR
argument_list|)
decl_stmt|;
comment|// keep doing this until we get a legit hfile
while|while
condition|(
literal|true
condition|)
block|{
name|FileStatus
index|[]
name|hfFss
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|famDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|hfFss
operator|.
name|length
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|FileStatus
name|hfs
range|:
name|hfFss
control|)
block|{
if|if
condition|(
operator|!
name|hfs
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|hfs
operator|.
name|getPath
argument_list|()
return|;
block|}
block|}
block|}
block|}
comment|/**    * Gets flushed mob files.    * @param fs The current file system.    * @param table The current table name.    * @return Path of a flushed hfile.    * @throws IOException    */
name|Path
name|getFlushedMobFile
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|TableName
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|famDir
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|table
argument_list|,
name|FAM_STR
argument_list|)
decl_stmt|;
comment|// keep doing this until we get a legit hfile
while|while
condition|(
literal|true
condition|)
block|{
name|FileStatus
index|[]
name|hfFss
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|famDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|hfFss
operator|.
name|length
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|FileStatus
name|hfs
range|:
name|hfFss
control|)
block|{
if|if
condition|(
operator|!
name|hfs
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|hfs
operator|.
name|getPath
argument_list|()
return|;
block|}
block|}
block|}
block|}
comment|/**    * Creates a new mob file name by the old one.    * @param oldFileName The old mob file name.    * @return The new mob file name.    */
name|String
name|createMobFileName
parameter_list|(
name|String
name|oldFileName
parameter_list|)
block|{
name|MobFileName
name|mobFileName
init|=
name|MobFileName
operator|.
name|create
argument_list|(
name|oldFileName
argument_list|)
decl_stmt|;
name|String
name|startKey
init|=
name|mobFileName
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
name|String
name|date
init|=
name|mobFileName
operator|.
name|getDate
argument_list|()
decl_stmt|;
return|return
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|date
argument_list|,
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
argument_list|)
operator|.
name|getFileName
argument_list|()
return|;
block|}
comment|/**    * Test that use this should have a timeout, because this method could potentially wait forever.   */
specifier|protected
name|void
name|doQuarantineTest
parameter_list|(
name|TableName
name|table
parameter_list|,
name|HBaseFsck
name|hbck
parameter_list|,
name|int
name|check
parameter_list|,
name|int
name|corrupt
parameter_list|,
name|int
name|fail
parameter_list|,
name|int
name|quar
parameter_list|,
name|int
name|missing
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// flush is async.
comment|// Mess it up by leaving a hole in the assignment, meta, and hdfs data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
block|{
literal|"-sidelineCorruptHFiles"
block|,
literal|"-repairHoles"
block|,
literal|"-ignorePreCheckPermission"
block|,
name|table
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|HBaseFsck
name|res
init|=
name|hbck
operator|.
name|exec
argument_list|(
name|hbfsckExecutorService
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|HFileCorruptionChecker
name|hfcc
init|=
name|res
operator|.
name|getHFilecorruptionChecker
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|hfcc
operator|.
name|getHFilesChecked
argument_list|()
argument_list|,
name|check
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hfcc
operator|.
name|getCorrupted
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|corrupt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hfcc
operator|.
name|getFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|fail
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hfcc
operator|.
name|getQuarantined
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|quar
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hfcc
operator|.
name|getMissing
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|missing
argument_list|)
expr_stmt|;
comment|// its been fixed, verify that we can enable
name|admin
operator|.
name|enableTableAsync
argument_list|(
name|table
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|table
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Interrupted when trying to enable table "
operator|+
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates a table and simulates the race situation where a concurrent compaction or split    * has removed an colfam dir before the corruption checker got to it.    */
comment|// Disabled because fails sporadically.  Is this test right?  Timing-wise, there could be no
comment|// files in a column family on initial creation -- as suggested by Matteo.
annotation|@
name|Ignore
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testQuarantineMissingFamdir
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// inject a fault in the hfcc created.
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HBaseFsck
name|hbck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|HFileCorruptionChecker
name|createHFileCorruptionChecker
parameter_list|(
name|boolean
name|sidelineCorruptHFiles
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HFileCorruptionChecker
argument_list|(
name|conf
argument_list|,
name|executor
argument_list|,
name|sidelineCorruptHFiles
argument_list|)
block|{
name|AtomicBoolean
name|attemptedFirstHFile
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|checkColFamDir
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|attemptedFirstHFile
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure delete happened.
block|}
name|super
operator|.
name|checkColFamDir
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|doQuarantineTest
argument_list|(
name|table
argument_list|,
name|hbck
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * This creates a table and simulates the race situation where a concurrent compaction or split    * has removed a region dir before the corruption checker got to it.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testQuarantineMissingRegionDir
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// inject a fault in the hfcc created.
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HBaseFsck
name|hbck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|HFileCorruptionChecker
name|createHFileCorruptionChecker
parameter_list|(
name|boolean
name|sidelineCorruptHFiles
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HFileCorruptionChecker
argument_list|(
name|conf
argument_list|,
name|executor
argument_list|,
name|sidelineCorruptHFiles
argument_list|)
block|{
name|AtomicBoolean
name|attemptedFirstHFile
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|checkRegionDir
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|attemptedFirstHFile
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure delete happened.
block|}
name|super
operator|.
name|checkRegionDir
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|doQuarantineTest
argument_list|(
name|table
argument_list|,
name|hbck
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|static
class|class
name|MockErrorReporter
implements|implements
name|ErrorReporter
block|{
specifier|static
name|int
name|calledCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|report
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reportError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reportError
parameter_list|(
name|ERROR_CODE
name|errorCode
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reportError
parameter_list|(
name|ERROR_CODE
name|errorCode
parameter_list|,
name|String
name|message
parameter_list|,
name|TableInfo
name|table
parameter_list|)
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reportError
parameter_list|(
name|ERROR_CODE
name|errorCode
parameter_list|,
name|String
name|message
parameter_list|,
name|TableInfo
name|table
parameter_list|,
name|HbckInfo
name|info
parameter_list|)
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reportError
parameter_list|(
name|ERROR_CODE
name|errorCode
parameter_list|,
name|String
name|message
parameter_list|,
name|TableInfo
name|table
parameter_list|,
name|HbckInfo
name|info1
parameter_list|,
name|HbckInfo
name|info2
parameter_list|)
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|summarize
parameter_list|()
block|{
return|return
operator|++
name|calledCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|detail
parameter_list|(
name|String
name|details
parameter_list|)
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ArrayList
argument_list|<
name|ERROR_CODE
argument_list|>
name|getErrorList
parameter_list|()
block|{
name|calledCount
operator|++
expr_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|ERROR_CODE
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|progress
parameter_list|()
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|print
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetErrors
parameter_list|()
block|{
name|calledCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|tableHasErrors
parameter_list|(
name|TableInfo
name|table
parameter_list|)
block|{
name|calledCount
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|protected
name|void
name|deleteMetaRegion
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|unassign
parameter_list|,
name|boolean
name|hdfs
parameter_list|,
name|boolean
name|regionInfoOnly
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HRegionLocation
name|metaLocation
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|getRegionLocation
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|ServerName
name|hsa
init|=
name|metaLocation
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|metaLocation
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|unassign
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Undeploying meta region "
operator|+
name|hri
operator|+
literal|" from server "
operator|+
name|hsa
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|unmanagedConnection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|undeployRegion
argument_list|(
name|unmanagedConnection
argument_list|,
name|hsa
argument_list|,
name|hri
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|regionInfoOnly
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"deleting hdfs .regioninfo data: "
operator|+
name|hri
operator|.
name|toString
argument_list|()
operator|+
name|hsa
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|rootDir
operator|+
literal|"/"
operator|+
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|hriPath
init|=
operator|new
name|Path
argument_list|(
name|p
argument_list|,
name|HRegionFileSystem
operator|.
name|REGION_INFO_FILE
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|hriPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hdfs
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"deleting hdfs data: "
operator|+
name|hri
operator|.
name|toString
argument_list|()
operator|+
name|hsa
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|rootDir
operator|+
literal|"/"
operator|+
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|HBaseFsck
operator|.
name|debugLsr
argument_list|(
name|conf
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deleted "
operator|+
name|p
operator|+
literal|" sucessfully? "
operator|+
name|success
argument_list|)
expr_stmt|;
name|HBaseFsck
operator|.
name|debugLsr
argument_list|(
name|conf
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
class|class
name|MasterSyncObserver
extends|extends
name|BaseMasterObserver
block|{
specifier|volatile
name|CountDownLatch
name|tableCreationLatch
init|=
literal|null
decl_stmt|;
specifier|volatile
name|CountDownLatch
name|tableDeletionLatch
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|postCreateTableHandler
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the AccessController test, some times calls only and directly the postCreateTableHandler()
if|if
condition|(
name|tableCreationLatch
operator|!=
literal|null
condition|)
block|{
name|tableCreationLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTableHandler
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the AccessController test, some times calls only and directly the postDeleteTableHandler()
if|if
condition|(
name|tableDeletionLatch
operator|!=
literal|null
condition|)
block|{
name|tableDeletionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|createTable
parameter_list|(
name|HBaseTestingUtility
name|testUtil
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|,
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|)
throws|throws
name|Exception
block|{
comment|// NOTE: We need a latch because admin is not sync,
comment|// so the postOp coprocessor method may be called after the admin operation returned.
name|MasterSyncObserver
name|observer
init|=
operator|(
name|MasterSyncObserver
operator|)
name|testUtil
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|MasterSyncObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|observer
operator|.
name|tableCreationLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|splitKeys
operator|!=
literal|null
condition|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
block|}
name|observer
operator|.
name|tableCreationLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|observer
operator|.
name|tableCreationLatch
operator|=
literal|null
expr_stmt|;
name|testUtil
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteTable
parameter_list|(
name|HBaseTestingUtility
name|testUtil
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// NOTE: We need a latch because admin is not sync,
comment|// so the postOp coprocessor method may be called after the admin operation returned.
name|MasterSyncObserver
name|observer
init|=
operator|(
name|MasterSyncObserver
operator|)
name|testUtil
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|MasterSyncObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|observer
operator|.
name|tableDeletionLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table: "
operator|+
name|tableName
operator|+
literal|" already disabled, so just deleting it."
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|observer
operator|.
name|tableDeletionLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|observer
operator|.
name|tableDeletionLatch
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

