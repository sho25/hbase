begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|LogRoller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Testcase to confirm that serial replication will not be stuck when using along with synchronous  * replication. See HBASE-21486 for more details.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSerialSyncReplication
extends|extends
name|SyncReplicationTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSerialSyncReplication
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
comment|// change to serial
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|PEER_ID
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|(
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|getReplicationPeerConfig
argument_list|(
name|PEER_ID
argument_list|)
argument_list|)
operator|.
name|setSerial
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|PEER_ID
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|(
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|getReplicationPeerConfig
argument_list|(
name|PEER_ID
argument_list|)
argument_list|)
operator|.
name|setSerial
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|writeAndVerifyReplication
argument_list|(
name|UTIL1
argument_list|,
name|UTIL2
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|MasterFileSystem
name|mfs
init|=
name|UTIL2
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
name|Path
name|remoteWALDir
init|=
name|ReplicationUtils
operator|.
name|getPeerRemoteWALDir
argument_list|(
operator|new
name|Path
argument_list|(
name|mfs
operator|.
name|getWALRootDir
argument_list|()
argument_list|,
name|ReplicationUtils
operator|.
name|REMOTE_WAL_DIR_NAME
argument_list|)
argument_list|,
name|PEER_ID
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|remoteWALStatus
init|=
name|mfs
operator|.
name|getWALFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|remoteWALDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remoteWALStatus
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|remoteWAL
init|=
name|remoteWALStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|remoteWAL
operator|.
name|getName
argument_list|()
argument_list|,
name|endsWith
argument_list|(
name|ReplicationUtils
operator|.
name|SYNC_WAL_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
comment|// roll the wal writer, so that we will delete the remore wal. This is used to make sure that we
comment|// will not replay this wal when transiting to DA.
for|for
control|(
name|RegionServerThread
name|t
range|:
name|UTIL1
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|LogRoller
name|roller
init|=
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getWalRoller
argument_list|()
decl_stmt|;
name|roller
operator|.
name|requestRollAll
argument_list|()
expr_stmt|;
name|roller
operator|.
name|waitUntilWalRollFinished
argument_list|()
expr_stmt|;
block|}
name|waitUntilDeleted
argument_list|(
name|UTIL2
argument_list|,
name|remoteWAL
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
comment|// let's reopen the region
name|RegionInfo
name|region
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|getRegions
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionServer
name|target
init|=
name|UTIL2
operator|.
name|getOtherRegionServer
argument_list|(
name|UTIL2
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|target
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// here we will remove all the pending wals. This is not a normal operation sequence but anyway,
comment|// user could do this.
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
comment|// transit back to DA
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|enableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
comment|// make sure that the async replication still works
name|writeAndVerifyReplication
argument_list|(
name|UTIL2
argument_list|,
name|UTIL1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

