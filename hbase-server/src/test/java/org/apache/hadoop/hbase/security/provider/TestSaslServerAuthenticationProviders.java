begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|provider
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
operator|.
name|AuthenticationMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|,
name|SecurityTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSaslServerAuthenticationProviders
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSaslServerAuthenticationProviders
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|// Clear out any potentially bogus state from the providers class
name|SaslServerAuthenticationProviders
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCannotAddTheSameProviderTwice
parameter_list|()
block|{
name|HashMap
argument_list|<
name|Byte
argument_list|,
name|SaslServerAuthenticationProvider
argument_list|>
name|registeredProviders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|SimpleSaslServerAuthenticationProvider
name|p1
init|=
operator|new
name|SimpleSaslServerAuthenticationProvider
argument_list|()
decl_stmt|;
name|SimpleSaslServerAuthenticationProvider
name|p2
init|=
operator|new
name|SimpleSaslServerAuthenticationProvider
argument_list|()
decl_stmt|;
name|SaslServerAuthenticationProviders
operator|.
name|addProviderIfNotExists
argument_list|(
name|p1
argument_list|,
name|registeredProviders
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|registeredProviders
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|SaslServerAuthenticationProviders
operator|.
name|addProviderIfNotExists
argument_list|(
name|p2
argument_list|,
name|registeredProviders
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{}
name|assertSame
argument_list|(
literal|"Expected the original provider to be present"
argument_list|,
name|p1
argument_list|,
name|registeredProviders
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInstanceIsCached
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|SaslServerAuthenticationProviders
name|providers1
init|=
name|SaslServerAuthenticationProviders
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SaslServerAuthenticationProviders
name|providers2
init|=
name|SaslServerAuthenticationProviders
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|providers1
argument_list|,
name|providers2
argument_list|)
expr_stmt|;
name|SaslServerAuthenticationProviders
operator|.
name|reset
argument_list|()
expr_stmt|;
name|SaslServerAuthenticationProviders
name|providers3
init|=
name|SaslServerAuthenticationProviders
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|providers1
argument_list|,
name|providers3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|providers1
operator|.
name|getNumRegisteredProviders
argument_list|()
argument_list|,
name|providers3
operator|.
name|getNumRegisteredProviders
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|instancesAreInitialized
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SaslServerAuthenticationProviders
operator|.
name|EXTRA_PROVIDERS_KEY
argument_list|,
name|InitCheckingSaslServerAuthenticationProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|SaslServerAuthenticationProviders
name|providers
init|=
name|SaslServerAuthenticationProviders
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|SaslServerAuthenticationProvider
name|provider
init|=
name|providers
operator|.
name|selectProvider
argument_list|(
name|InitCheckingSaslServerAuthenticationProvider
operator|.
name|ID
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|InitCheckingSaslServerAuthenticationProvider
operator|.
name|class
argument_list|,
name|provider
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Provider was not inititalized"
argument_list|,
operator|(
operator|(
name|InitCheckingSaslServerAuthenticationProvider
operator|)
name|provider
operator|)
operator|.
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|InitCheckingSaslServerAuthenticationProvider
implements|implements
name|SaslServerAuthenticationProvider
block|{
specifier|public
specifier|static
specifier|final
name|byte
name|ID
init|=
operator|(
name|byte
operator|)
literal|88
decl_stmt|;
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isInitialized
parameter_list|()
block|{
return|return
name|initialized
return|;
block|}
annotation|@
name|Override
specifier|public
name|SaslAuthMethod
name|getSaslAuthMethod
parameter_list|()
block|{
return|return
operator|new
name|SaslAuthMethod
argument_list|(
literal|"INIT_CHECKING"
argument_list|,
name|ID
argument_list|,
literal|"DIGEST-MD5"
argument_list|,
name|AuthenticationMethod
operator|.
name|TOKEN
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTokenKind
parameter_list|()
block|{
return|return
literal|"INIT_CHECKING_TOKEN"
return|;
block|}
annotation|@
name|Override
specifier|public
name|AttemptingUserProvidingSaslServer
name|createServer
parameter_list|(
name|SecretManager
argument_list|<
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|saslProps
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|supportsProtocolAuthentication
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|UserGroupInformation
name|getAuthorizedUgi
parameter_list|(
name|String
name|authzId
parameter_list|,
name|SecretManager
argument_list|<
name|TokenIdentifier
argument_list|>
name|secretManager
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

