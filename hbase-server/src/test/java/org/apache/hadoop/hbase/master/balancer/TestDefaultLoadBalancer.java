begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test the load balancer that is created by default.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestDefaultLoadBalancer
extends|extends
name|BalancerTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestDefaultLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDefaultLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|LoadBalancer
name|loadBalancer
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.util.ip.to.rack.determiner"
argument_list|,
name|MockMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.regions.slop"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|loadBalancer
operator|=
operator|new
name|SimpleLoadBalancer
argument_list|()
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// int[testnum][servernumber] -> numregions
name|int
index|[]
index|[]
name|clusterStateMocks
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|// 1 node
operator|new
name|int
index|[]
block|{
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|}
block|,
comment|// 2 node
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|4
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|14
block|,
literal|1432
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|47
block|,
literal|53
block|}
block|,
comment|// 3 node
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|20
block|,
literal|20
block|,
literal|0
block|}
block|,
comment|// 4 node
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|7
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|7
block|}
block|,
comment|// 5 node
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|4
block|}
block|,
comment|// more nodes
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|54
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|55
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|56
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|16
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|8
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|9
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|123
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|155
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|144
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1123
block|,
literal|133
block|,
literal|138
block|,
literal|12
block|,
literal|1444
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|144
block|,
literal|1
block|,
literal|0
block|,
literal|4
block|,
literal|1
block|,
literal|1123
block|,
literal|133
block|,
literal|138
block|,
literal|12
block|,
literal|1444
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1538
block|,
literal|1392
block|,
literal|1561
block|,
literal|1557
block|,
literal|1535
block|,
literal|1553
block|,
literal|1385
block|,
literal|1542
block|,
literal|1619
block|}
block|}
decl_stmt|;
name|int
index|[]
name|mockUniformCluster
init|=
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|0
block|}
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|/**    * Test the load balancing algorithm.    *    * Invariant is that all servers should be hosting either floor(average) or    * ceiling(average) at both table level and cluster level    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testBalanceClusterOverall
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|clusterLoad
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
index|[]
name|mockCluster
range|:
name|clusterStateMocks
control|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterServers
init|=
name|mockClusterServers
argument_list|(
name|mockCluster
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|clusterList
init|=
name|convertToList
argument_list|(
name|clusterServers
argument_list|)
decl_stmt|;
name|clusterLoad
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|clusterServers
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
name|mockClusterServersWithTables
argument_list|(
name|clusterServers
argument_list|)
decl_stmt|;
name|loadBalancer
operator|.
name|setClusterLoad
argument_list|(
name|clusterLoad
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|clusterplans
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|regionAmountList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|servers
range|:
name|result
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|list
init|=
name|convertToList
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Cluster : "
operator|+
name|printMock
argument_list|(
name|list
argument_list|)
operator|+
literal|" "
operator|+
name|printStats
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|partialplans
init|=
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|servers
argument_list|)
decl_stmt|;
if|if
condition|(
name|partialplans
operator|!=
literal|null
condition|)
name|clusterplans
operator|.
name|addAll
argument_list|(
name|partialplans
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|balancedClusterPerTable
init|=
name|reconcile
argument_list|(
name|list
argument_list|,
name|partialplans
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Balance : "
operator|+
name|printMock
argument_list|(
name|balancedClusterPerTable
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterAsBalanced
argument_list|(
name|balancedClusterPerTable
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|servers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|returnRegions
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|returnServer
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|balancedCluster
init|=
name|reconcile
argument_list|(
name|clusterList
argument_list|,
name|clusterplans
argument_list|,
name|clusterServers
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertClusterOverallAsBalanced
argument_list|(
name|balancedCluster
argument_list|,
name|result
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the load balancing algorithm.    *    * Invariant is that all servers should be hosting either floor(average) or    * ceiling(average) at both table level and cluster level    * Deliberately generate a special case to show the overall strategy can achieve cluster    * level balance while the bytable strategy cannot    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testImpactOfBalanceClusterOverall
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|clusterLoad
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterServers
init|=
name|mockUniformClusterServers
argument_list|(
name|mockUniformCluster
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|clusterList
init|=
name|convertToList
argument_list|(
name|clusterServers
argument_list|)
decl_stmt|;
name|clusterLoad
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|clusterServers
argument_list|)
expr_stmt|;
comment|// use overall can achieve both table and cluster level balance
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|>
name|result1
init|=
name|mockClusterServersWithTables
argument_list|(
name|clusterServers
argument_list|)
decl_stmt|;
name|loadBalancer
operator|.
name|setClusterLoad
argument_list|(
name|clusterLoad
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|clusterplans1
init|=
operator|new
name|ArrayList
argument_list|<
name|RegionPlan
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|regionAmountList
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|TableName
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|servers
range|:
name|result1
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|list
init|=
name|convertToList
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Cluster : "
operator|+
name|printMock
argument_list|(
name|list
argument_list|)
operator|+
literal|" "
operator|+
name|printStats
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|partialplans
init|=
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|servers
argument_list|)
decl_stmt|;
if|if
condition|(
name|partialplans
operator|!=
literal|null
condition|)
name|clusterplans1
operator|.
name|addAll
argument_list|(
name|partialplans
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|balancedClusterPerTable
init|=
name|reconcile
argument_list|(
name|list
argument_list|,
name|partialplans
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Balance : "
operator|+
name|printMock
argument_list|(
name|balancedClusterPerTable
argument_list|)
argument_list|)
expr_stmt|;
name|assertClusterAsBalanced
argument_list|(
name|balancedClusterPerTable
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|servers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|returnRegions
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|returnServer
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|balancedCluster1
init|=
name|reconcile
argument_list|(
name|clusterList
argument_list|,
name|clusterplans1
argument_list|,
name|clusterServers
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|assertClusterOverallAsBalanced
argument_list|(
name|balancedCluster1
argument_list|,
name|result1
operator|.
name|keySet
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

