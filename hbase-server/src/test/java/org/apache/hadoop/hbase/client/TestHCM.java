begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * This class is for testing HCM features  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHCM
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHCM
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_NAME1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAM_NAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws InterruptedException     * @throws IllegalAccessException     * @throws NoSuchFieldException     * @throws ZooKeeperConnectionException     * @throws IllegalArgumentException     * @throws SecurityException     * @see https://issues.apache.org/jira/browse/HBASE-2925    */
comment|// Disabling.  Of course this test will OOME using new Configuration each time
comment|// St.Ack 20110428
comment|// @Test
specifier|public
name|void
name|testManyNewConnectionsDoesnotOOME
parameter_list|()
throws|throws
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|ZooKeeperConnectionException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|InterruptedException
block|{
name|createNewConfigurations
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|Random
name|_randy
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|createNewConfigurations
parameter_list|()
throws|throws
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
throws|,
name|InterruptedException
throws|,
name|ZooKeeperConnectionException
block|{
name|HConnection
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
operator|(
name|HConnectionManager
operator|.
name|MAX_CACHED_HBASE_INSTANCES
operator|*
literal|2
operator|)
condition|;
name|i
operator|++
control|)
block|{
comment|// set random key to differentiate the connection from previous ones
name|Configuration
name|configuration
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"somekey"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|_randy
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Hash Code: "
operator|+
name|configuration
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|HConnection
name|connection
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|last
operator|==
name|connection
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"!! Got same connection for once !!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// change the configuration once, and the cached connection is lost forever:
comment|//      the hashtable holding the cache won't be able to find its own keys
comment|//      to remove them, so the LRU strategy does not work.
name|configuration
operator|.
name|set
argument_list|(
literal|"someotherkey"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|_randy
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|last
operator|=
name|connection
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cache Size: "
operator|+
name|getHConnectionManagerCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getHConnectionManagerCacheSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|getHConnectionManagerCacheSize
parameter_list|()
block|{
return|return
name|HConnectionTestingUtility
operator|.
name|getConnectionCount
argument_list|()
return|;
block|}
comment|/**    * Test that when we delete a location using the first row of a region    * that we really delete it.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRegionCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAM_NAM
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegions
argument_list|(
name|table
argument_list|,
name|FAM_NAM
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|HConnectionManager
operator|.
name|HConnectionImplementation
name|conn
init|=
operator|(
name|HConnectionManager
operator|.
name|HConnectionImplementation
operator|)
name|table
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
operator|.
name|clone
argument_list|()
argument_list|,
name|ROW
operator|.
name|clone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|ROW
argument_list|)
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|nextPort
init|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getPort
argument_list|()
operator|+
literal|1
decl_stmt|;
name|conn
operator|.
name|updateCachedLocation
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
argument_list|,
literal|"127.0.0.1"
argument_list|,
name|nextPort
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|,
name|nextPort
argument_list|)
expr_stmt|;
name|conn
operator|.
name|deleteCachedLocation
argument_list|(
name|TABLE_NAME
operator|.
name|clone
argument_list|()
argument_list|,
name|ROW
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionLocation
name|rl
init|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"What is this location?? "
operator|+
name|rl
argument_list|,
name|rl
argument_list|)
expr_stmt|;
comment|// We're now going to move the region and check that it works for the client
comment|// First a new put to add the location in the cache
name|conn
operator|.
name|clearRegionCache
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|conn
operator|.
name|getNumberOfCachedRegionLocations
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put2
operator|.
name|add
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
comment|// We can wait for all regions to be online, that makes log reading easier when debugging
while|while
condition|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
condition|)
block|{     }
comment|// Now moving the region to the second server
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HRegionLocation
name|toMove
init|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
comment|// Choose the other server.
name|int
name|curServerId
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getServerWith
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|int
name|destServerId
init|=
operator|(
name|curServerId
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|HRegionServer
name|curServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|curServerId
argument_list|)
decl_stmt|;
name|HRegionServer
name|destServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|destServerId
argument_list|)
decl_stmt|;
name|ServerName
name|destServerName
init|=
name|destServer
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// Check that we are in the expected state
name|Assert
operator|.
name|assertTrue
argument_list|(
name|curServer
operator|!=
name|destServer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|curServer
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|destServer
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|toMove
operator|.
name|getPort
argument_list|()
operator|==
name|destServerName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|curServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Moving. It's possible that we don't have all the regions online at this point, so
comment|//  the test must depends only on the region we're looking at.
name|LOG
operator|.
name|info
argument_list|(
literal|"Move starting region="
operator|+
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|destServerName
operator|.
name|getServerName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// wait for the move to be finished
block|}
comment|// Check our new state.
name|Assert
operator|.
name|assertNull
argument_list|(
name|curServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Move finished for region="
operator|+
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cache was NOT updated and points to the wrong server
name|Assert
operator|.
name|assertFalse
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getPort
argument_list|()
operator|==
name|destServerName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Hijack the number of retry to fail immediately instead of retrying: there will be no new
comment|//  connection to the master
name|Field
name|numRetries
init|=
name|conn
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"numRetries"
argument_list|)
decl_stmt|;
name|numRetries
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|modifiersField
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiersField
operator|.
name|setInt
argument_list|(
name|numRetries
argument_list|,
name|numRetries
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
specifier|final
name|int
name|prevNumRetriesVal
init|=
operator|(
name|Integer
operator|)
name|numRetries
operator|.
name|get
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|numRetries
operator|.
name|set
argument_list|(
name|conn
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// We do a put and expect the cache to be updated, even if we don't retry
name|LOG
operator|.
name|info
argument_list|(
literal|"Put starting"
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put3
operator|.
name|add
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|put
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Unreachable point"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Put done, exception caught: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now check that we have the exception we wanted
name|Assert
operator|.
name|assertTrue
argument_list|(
name|e
operator|instanceof
name|RetriesExhaustedWithDetailsException
argument_list|)
expr_stmt|;
name|RetriesExhaustedWithDetailsException
name|re
init|=
operator|(
name|RetriesExhaustedWithDetailsException
operator|)
name|e
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|re
operator|.
name|getNumExceptions
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|re
operator|.
name|getRow
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Previous server was "
operator|+
name|curServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
argument_list|,
name|destServerName
operator|.
name|getPort
argument_list|()
argument_list|,
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// We move it back to do another test with a scan
name|LOG
operator|.
name|info
argument_list|(
literal|"Move starting region="
operator|+
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|curServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|curServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// wait for the move to be finished
block|}
comment|// Check our new state.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|curServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Move finished for region="
operator|+
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cache was NOT updated and points to the wrong server
name|Assert
operator|.
name|assertFalse
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getPort
argument_list|()
operator|==
name|curServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|sc
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|sc
operator|.
name|setStopRow
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setStopRow
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
try|try
block|{
name|ResultScanner
name|rs
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|sc
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{}
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Unreachable point"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Put done, expected exception caught: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Cache is updated with the right value.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Previous server was "
operator|+
name|destServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
argument_list|,
name|curServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|numRetries
operator|.
name|set
argument_list|(
name|conn
argument_list|,
name|prevNumRetriesVal
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that Connection or Pool are not closed when managed externally    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testConnectionManagement
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME1
argument_list|,
name|FAM_NAM
argument_list|)
expr_stmt|;
name|HConnection
name|conn
init|=
name|HConnectionManager
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|ThreadPoolExecutor
name|pool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
operator|new
name|DaemonThreadFactory
argument_list|(
literal|"test-hcm-pool"
argument_list|)
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TABLE_NAME1
argument_list|,
name|conn
argument_list|,
name|pool
argument_list|)
decl_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|conn
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|pool
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE_NAME1
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|pool
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|pool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
comment|/**    * Make sure that {@link HConfiguration} instances that are essentially the    * same map to the same {@link HConnection} instance.    */
annotation|@
name|Test
specifier|public
name|void
name|testConnectionSameness
parameter_list|()
throws|throws
name|Exception
block|{
name|HConnection
name|previousConnection
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
comment|// set random key to differentiate the connection from previous ones
name|Configuration
name|configuration
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"some_key"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|_randy
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The hash code of the current configuration is: "
operator|+
name|configuration
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|HConnection
name|currentConnection
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousConnection
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Did not get the same connection even though its key didn't change"
argument_list|,
name|previousConnection
operator|==
name|currentConnection
argument_list|)
expr_stmt|;
block|}
name|previousConnection
operator|=
name|currentConnection
expr_stmt|;
comment|// change the configuration, so that it is no longer reachable from the
comment|// client's perspective. However, since its part of the LRU doubly linked
comment|// list, it will eventually get thrown out, at which time it should also
comment|// close the corresponding {@link HConnection}.
name|configuration
operator|.
name|set
argument_list|(
literal|"other_key"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|_randy
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Makes sure that there is no leaking of    * {@link HConnectionManager.TableServers} in the {@link HConnectionManager}    * class.    */
annotation|@
name|Test
specifier|public
name|void
name|testConnectionUniqueness
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|zkmaxconnections
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_MAX_CLIENT_CNXNS
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEPER_MAX_CLIENT_CNXNS
argument_list|)
decl_stmt|;
comment|// Test up to a max that is< the maximum number of zk connections.  If we
comment|// go above zk connections, we just fall into cycle where we are failing
comment|// to set up a session and test runs for a long time.
name|int
name|maxConnections
init|=
name|Math
operator|.
name|min
argument_list|(
name|zkmaxconnections
operator|-
literal|1
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HConnection
argument_list|>
name|connections
init|=
operator|new
name|ArrayList
argument_list|<
name|HConnection
argument_list|>
argument_list|(
name|maxConnections
argument_list|)
decl_stmt|;
name|HConnection
name|previousConnection
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxConnections
condition|;
name|i
operator|++
control|)
block|{
comment|// set random key to differentiate the connection from previous ones
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
literal|"some_key"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|_randy
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_INSTANCE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|_randy
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The hash code of the current configuration is: "
operator|+
name|configuration
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|HConnection
name|currentConnection
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousConnection
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Got the same connection even though its key changed!"
argument_list|,
name|previousConnection
operator|!=
name|currentConnection
argument_list|)
expr_stmt|;
block|}
comment|// change the configuration, so that it is no longer reachable from the
comment|// client's perspective. However, since its part of the LRU doubly linked
comment|// list, it will eventually get thrown out, at which time it should also
comment|// close the corresponding {@link HConnection}.
name|configuration
operator|.
name|set
argument_list|(
literal|"other_key"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|_randy
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|previousConnection
operator|=
name|currentConnection
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The current HConnectionManager#HBASE_INSTANCES cache size is: "
operator|+
name|getHConnectionManagerCacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|connections
operator|.
name|add
argument_list|(
name|currentConnection
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|HConnection
name|c
range|:
name|connections
control|)
block|{
comment|// Clean up connections made so we don't interfere w/ subsequent tests.
name|HConnectionManager
operator|.
name|deleteConnection
argument_list|(
name|c
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClosing
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_INSTANCE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|_randy
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HConnection
name|c1
init|=
name|HConnectionManager
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
comment|// We create two connections with the same key.
name|HConnection
name|c2
init|=
name|HConnectionManager
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|HConnection
name|c3
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|HConnection
name|c4
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c3
operator|==
name|c4
argument_list|)
expr_stmt|;
name|c1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c3
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|c3
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// still a reference left
name|assertFalse
argument_list|(
name|c3
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|c3
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c3
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
comment|// c3 was removed from the cache
name|HConnection
name|c5
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c5
operator|!=
name|c3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|c2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|c5
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c5
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Trivial test to verify that nobody messes with    * {@link HConnectionManager#createConnection(Configuration)}    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HConnection
name|c1
init|=
name|HConnectionManager
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|HConnection
name|c2
init|=
name|HConnectionManager
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
comment|// created from the same configuration, yet they are different
name|assertTrue
argument_list|(
name|c1
operator|!=
name|c2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|.
name|getConfiguration
argument_list|()
operator|==
name|c2
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure these were not cached
name|HConnection
name|c3
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|!=
name|c3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|!=
name|c3
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test checks that one can connect to the cluster with only the    *  ZooKeeper quorum set. Other stuff like master address will be read    *  from ZK by the client.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|10000
argument_list|)
specifier|public
name|void
name|testConnection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We create an empty config and add the ZK address.
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should be enough to connect
name|HConnection
name|conn
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|conn
operator|.
name|isMasterRunning
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

