begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CategoryBasedTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ClientExceptionsUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|RegionMovedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|HBaseRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerTooBusyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerStoppedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ManualEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * This class is for testing HBaseConnectionManager features  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHCM
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestRule
name|timeout
init|=
name|CategoryBasedTimeout
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withLookingForStuckThread
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHCM
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAM_NAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_X
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xxx"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Random
name|_randy
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|RPC_RETRY
init|=
literal|5
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|/** * This copro sleeps 20 second. The first call it fails. The second time, it works. */
specifier|public
specifier|static
class|class
name|SleepAndFailFirstTime
implements|implements
name|RegionObserver
block|{
specifier|static
specifier|final
name|AtomicLong
name|ct
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|SLEEP_TIME_CONF_KEY
init|=
literal|"hbase.coprocessor.SleepAndFailFirstTime.sleepTime"
decl_stmt|;
specifier|static
specifier|final
name|long
name|DEFAULT_SLEEP_TIME
init|=
literal|20000
decl_stmt|;
specifier|static
specifier|final
name|AtomicLong
name|sleepTime
init|=
operator|new
name|AtomicLong
argument_list|(
name|DEFAULT_SLEEP_TIME
argument_list|)
decl_stmt|;
specifier|public
name|SleepAndFailFirstTime
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
block|{
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|env
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|sleepTime
operator|.
name|set
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|SLEEP_TIME_CONF_KEY
argument_list|,
name|DEFAULT_SLEEP_TIME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ct
operator|.
name|incrementAndGet
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"first call I fail"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ct
operator|.
name|incrementAndGet
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"first call I fail"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDelete
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ct
operator|.
name|incrementAndGet
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"first call I fail"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preIncrement
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ct
operator|.
name|incrementAndGet
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"first call I fail"
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SleepCoprocessor
implements|implements
name|RegionObserver
block|{
specifier|public
specifier|static
specifier|final
name|int
name|SLEEP_TIME
init|=
literal|5000
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|preIncrement
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Increment
name|increment
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDelete
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SleepLongerAtFirstCoprocessor
implements|implements
name|RegionObserver
block|{
specifier|public
specifier|static
specifier|final
name|int
name|SLEEP_TIME
init|=
literal|2000
decl_stmt|;
specifier|static
specifier|final
name|AtomicLong
name|ct
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
comment|// After first sleep, all requests are timeout except the last retry. If we handle
comment|// all the following requests, finally the last request is also timeout. If we drop all
comment|// timeout requests, we can handle the last request immediately and it will not timeout.
if|if
condition|(
name|ct
operator|.
name|incrementAndGet
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
operator|*
name|RPC_RETRY
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|STATUS_PUBLISHED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Up the handlers; this test needs more than usual.
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|RPC_RETRY
argument_list|)
expr_stmt|;
comment|// simulate queue blocking in testDropTimeoutRequest
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HANDLER_COUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Used in testServerBusyException
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PERSERVER_REQUESTS_THRESHOLD
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClusterConnection
parameter_list|()
throws|throws
name|IOException
block|{
name|ThreadPoolExecutor
name|otherPool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<>
argument_list|()
argument_list|,
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
literal|"test-hcm"
argument_list|)
argument_list|)
decl_stmt|;
name|Connection
name|con1
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Connection
name|con2
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|otherPool
argument_list|)
decl_stmt|;
comment|// make sure the internally created ExecutorService is the one passed
name|assertTrue
argument_list|(
name|otherPool
operator|==
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|con2
operator|)
operator|.
name|getCurrentBatchPool
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAM_NAM
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Table
name|table
init|=
name|con1
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
name|otherPool
argument_list|)
decl_stmt|;
name|ExecutorService
name|pool
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|table
operator|instanceof
name|HTable
condition|)
block|{
name|HTable
name|t
init|=
operator|(
name|HTable
operator|)
name|table
decl_stmt|;
comment|// make sure passing a pool to the getTable does not trigger creation of an internal pool
name|assertNull
argument_list|(
literal|"Internal Thread pool should be null"
argument_list|,
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|con1
operator|)
operator|.
name|getCurrentBatchPool
argument_list|()
argument_list|)
expr_stmt|;
comment|// table should use the pool passed
name|assertTrue
argument_list|(
name|otherPool
operator|==
name|t
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|=
operator|(
name|HTable
operator|)
name|con2
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// table should use the connectin's internal pool
name|assertTrue
argument_list|(
name|otherPool
operator|==
name|t
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|=
operator|(
name|HTable
operator|)
name|con2
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// try other API too
name|assertTrue
argument_list|(
name|otherPool
operator|==
name|t
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|=
operator|(
name|HTable
operator|)
name|con2
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// try other API too
name|assertTrue
argument_list|(
name|otherPool
operator|==
name|t
operator|.
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|=
operator|(
name|HTable
operator|)
name|con1
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|pool
operator|=
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|con1
operator|)
operator|.
name|getCurrentBatchPool
argument_list|()
expr_stmt|;
comment|// make sure an internal pool was created
name|assertNotNull
argument_list|(
literal|"An internal Thread pool should have been created"
argument_list|,
name|pool
argument_list|)
expr_stmt|;
comment|// and that the table is using it
name|assertTrue
argument_list|(
name|t
operator|.
name|getPool
argument_list|()
operator|==
name|pool
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|=
operator|(
name|HTable
operator|)
name|con1
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// still using the *same* internal pool
name|assertTrue
argument_list|(
name|t
operator|.
name|getPool
argument_list|()
operator|==
name|pool
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|con1
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// if the pool was created on demand it should be closed upon connection close
if|if
condition|(
name|pool
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|pool
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|con2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// if the pool is passed, it is not closed
name|assertFalse
argument_list|(
name|otherPool
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
name|otherPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
comment|/**    * Naive test to check that Connection#getAdmin returns a properly constructed HBaseAdmin object    * @throws IOException Unable to construct admin    */
annotation|@
name|Test
specifier|public
name|void
name|testAdminFactory
parameter_list|()
throws|throws
name|IOException
block|{
name|Connection
name|con1
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|con1
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|getConnection
argument_list|()
operator|==
name|con1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|getConfiguration
argument_list|()
operator|==
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|con1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Fails too often!  Needs work.  HBASE-12558
annotation|@
name|Ignore
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RegionServerStoppedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testClusterStatus
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
literal|"cf"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|rk
init|=
literal|"rk1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rs
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|startRegionServer
argument_list|()
decl_stmt|;
name|rs
operator|.
name|waitForServerOnline
argument_list|()
expr_stmt|;
specifier|final
name|ServerName
name|sn
init|=
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|cf
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|()
expr_stmt|;
specifier|final
name|ConnectionImplementation
name|hci
init|=
operator|(
name|ConnectionImplementation
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
while|while
condition|(
name|l
operator|.
name|getRegionLocation
argument_list|(
name|rk
argument_list|)
operator|.
name|getPort
argument_list|()
operator|!=
name|sn
operator|.
name|getPort
argument_list|()
condition|)
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|l
operator|.
name|getRegionLocation
argument_list|(
name|rk
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|sn
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|()
expr_stmt|;
name|hci
operator|.
name|clearRegionCache
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|hci
operator|.
name|clusterStatusListener
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|l
operator|.
name|getRegionLocation
argument_list|(
name|rk
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|sn
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
block|}
name|Put
name|p1
init|=
operator|new
name|Put
argument_list|(
name|rk
argument_list|)
decl_stmt|;
name|p1
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
literal|"qual"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"val"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"I'm dead"
argument_list|)
expr_stmt|;
comment|// We want the status to be updated. That's a least 10 second
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|40000
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDeadServers
argument_list|()
operator|.
name|isDeadServer
argument_list|(
name|sn
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|40000
argument_list|,
literal|1000
argument_list|,
literal|true
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|hci
operator|.
name|clusterStatusListener
operator|.
name|isDeadServer
argument_list|(
name|sn
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|hci
operator|.
name|getClient
argument_list|(
name|sn
argument_list|)
expr_stmt|;
comment|// will throw an exception: RegionServerStoppedException
block|}
comment|/**    * Test that we can handle connection close: it will trigger a retry, but the calls will    *  finish.    */
annotation|@
name|Test
specifier|public
name|void
name|testConnectionCloseAllowsInterrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|testConnectionClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionNotAllowsInterrupt
parameter_list|()
throws|throws
name|Exception
block|{
name|testConnectionClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that an operation can fail if we read the global operation timeout, even if the    * individual timeout is fine. We do that with:    * - client side: an operation timeout of 30 seconds    * - server side: we sleep 20 second at each attempt. The first work fails, the second one    * succeeds. But the client won't wait that much, because 20 + 20> 30, so the client    * timeouted when the server answers.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetOperationTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepAndFailFirstTime
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRpcTimeout
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|SleepAndFailFirstTime
operator|.
name|ct
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Check that it works if the timeout is big enough
name|table
operator|.
name|setOperationTimeout
argument_list|(
literal|120
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
comment|// Resetting and retrying. Will fail this time, not enough time for the second try
name|SleepAndFailFirstTime
operator|.
name|ct
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|setOperationTimeout
argument_list|(
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"We expect an exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
comment|// The client has a CallTimeout class, but it's not shared.We're not very clean today,
comment|//  in the general case you can expect the call to stop, but the exception may vary.
comment|// In this test however, we're sure that it will be a socket timeout.
name|LOG
operator|.
name|info
argument_list|(
literal|"We received an exception, as expected "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Wrong exception:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutOperationTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepAndFailFirstTime
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRpcTimeout
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|SleepAndFailFirstTime
operator|.
name|ct
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Check that it works if the timeout is big enough
name|table
operator|.
name|setOperationTimeout
argument_list|(
literal|120
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|FAM_NAM
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
comment|// Resetting and retrying. Will fail this time, not enough time for the second try
name|SleepAndFailFirstTime
operator|.
name|ct
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|setOperationTimeout
argument_list|(
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|FAM_NAM
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"We expect an exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|e
parameter_list|)
block|{
comment|// The client has a CallTimeout class, but it's not shared.We're not very clean today,
comment|//  in the general case you can expect the call to stop, but the exception may vary.
comment|// In this test however, we're sure that it will be a socket timeout.
name|LOG
operator|.
name|info
argument_list|(
literal|"We received an exception, as expected "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Wrong exception:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteOperationTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepAndFailFirstTime
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|setRpcTimeout
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|SleepAndFailFirstTime
operator|.
name|ct
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Check that it works if the timeout is big enough
name|table
operator|.
name|setOperationTimeout
argument_list|(
literal|120
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
comment|// Resetting and retrying. Will fail this time, not enough time for the second try
name|SleepAndFailFirstTime
operator|.
name|ct
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|setOperationTimeout
argument_list|(
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"We expect an exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|e
parameter_list|)
block|{
comment|// The client has a CallTimeout class, but it's not shared.We're not very clean today,
comment|//  in the general case you can expect the call to stop, but the exception may vary.
comment|// In this test however, we're sure that it will be a socket timeout.
name|LOG
operator|.
name|info
argument_list|(
literal|"We received an exception, as expected "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Wrong exception:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRpcTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|,
name|c
argument_list|)
init|)
block|{
name|t
operator|.
name|setRpcTimeout
argument_list|(
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|/
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOperationTimeout
argument_list|(
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|*
literal|100
argument_list|)
expr_stmt|;
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get should not have succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// Again, with configuration based override
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|/
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get should not have succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementRpcTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|,
name|c
argument_list|)
init|)
block|{
name|t
operator|.
name|setWriteRpcTimeout
argument_list|(
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|/
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOperationTimeout
argument_list|(
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|*
literal|100
argument_list|)
expr_stmt|;
name|Increment
name|i
init|=
operator|new
name|Increment
argument_list|(
name|FAM_NAM
argument_list|)
decl_stmt|;
name|i
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|t
operator|.
name|increment
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Write should not have succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// Again, with configuration based override
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_WRITE_TIMEOUT_KEY
argument_list|,
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|/
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Increment
name|i
init|=
operator|new
name|Increment
argument_list|(
name|FAM_NAM
argument_list|)
decl_stmt|;
name|i
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|t
operator|.
name|increment
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Write should not have succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteRpcTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|,
name|c
argument_list|)
init|)
block|{
name|t
operator|.
name|setWriteRpcTimeout
argument_list|(
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|/
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOperationTimeout
argument_list|(
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|*
literal|100
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|FAM_NAM
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Write should not have succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutRpcTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|,
name|c
argument_list|)
init|)
block|{
name|t
operator|.
name|setWriteRpcTimeout
argument_list|(
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|/
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOperationTimeout
argument_list|(
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|*
literal|100
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|FAM_NAM
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Write should not have succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRpcTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|,
name|c
argument_list|)
init|)
block|{
name|t
operator|.
name|setReadRpcTimeout
argument_list|(
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|/
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|setOperationTimeout
argument_list|(
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|*
literal|100
argument_list|)
expr_stmt|;
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get should not have succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
comment|// Again, with configuration based override
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_READ_TIMEOUT_KEY
argument_list|,
name|SleepCoprocessor
operator|.
name|SLEEP_TIME
operator|/
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Get should not have succeeded"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDropTimeoutRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Simulate the situation that the server is slow and client retries for several times because
comment|// of timeout. When a request can be handled after waiting in the queue, we will drop it if
comment|// it has been considered as timeout at client. If we don't drop it, the server will waste time
comment|// on handling timeout requests and finally all requests timeout and client throws exception.
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepLongerAtFirstCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|,
name|c
argument_list|)
init|)
block|{
name|t
operator|.
name|setRpcTimeout
argument_list|(
name|SleepLongerAtFirstCoprocessor
operator|.
name|SLEEP_TIME
operator|*
literal|2
argument_list|)
expr_stmt|;
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test starting from 0 index when RpcRetryingCaller calculate the backoff time.    */
annotation|@
name|Test
specifier|public
name|void
name|testRpcRetryingCallerSleep
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessorWithSpec
argument_list|(
literal|"|"
operator|+
name|SleepAndFailFirstTime
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"||"
operator|+
name|SleepAndFailFirstTime
operator|.
name|SLEEP_TIME_CONF_KEY
operator|+
literal|"=2000"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|SleepAndFailFirstTime
operator|.
name|ct
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
literal|3000
argument_list|)
expr_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|4000
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|setOperationTimeout
argument_list|(
literal|8000
argument_list|)
expr_stmt|;
comment|// Check that it works. Because 2s + 3s * RETRY_BACKOFF[0] + 2s< 8s
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
comment|// Resetting and retrying.
name|SleepAndFailFirstTime
operator|.
name|ct
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|setOperationTimeout
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Will fail this time. After sleep, there are not enough time for second retry
comment|// Beacuse 2s + 3s + 2s> 6s
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"We expect an exception here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SocketTimeoutException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"We received an exception, as expected "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Wrong exception:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCallableSleep
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|pauseTime
decl_stmt|;
name|long
name|baseTime
init|=
literal|100
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAM_NAM
argument_list|)
expr_stmt|;
name|ClientServiceCallable
argument_list|<
name|Object
argument_list|>
name|regionServerCallable
init|=
operator|new
name|ClientServiceCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|ROW
argument_list|,
operator|new
name|RpcControllerFactory
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|newController
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|regionServerCallable
operator|.
name|prepare
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pauseTime
operator|=
name|regionServerCallable
operator|.
name|sleep
argument_list|(
name|baseTime
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pauseTime
operator|>=
operator|(
name|baseTime
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pauseTime
operator|<=
operator|(
name|baseTime
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
name|i
index|]
operator|*
literal|1.01f
operator|)
argument_list|)
expr_stmt|;
block|}
name|RegionAdminServiceCallable
argument_list|<
name|Object
argument_list|>
name|regionAdminServiceCallable
init|=
operator|new
name|RegionAdminServiceCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
operator|(
name|ClusterConnection
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
operator|new
name|RpcControllerFactory
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|tableName
argument_list|,
name|ROW
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Object
name|call
parameter_list|(
name|HBaseRpcController
name|controller
parameter_list|)
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|regionAdminServiceCallable
operator|.
name|prepare
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pauseTime
operator|=
name|regionAdminServiceCallable
operator|.
name|sleep
argument_list|(
name|baseTime
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pauseTime
operator|>=
operator|(
name|baseTime
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pauseTime
operator|<=
operator|(
name|baseTime
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
name|i
index|]
operator|*
literal|1.01f
operator|)
argument_list|)
expr_stmt|;
block|}
name|MasterCallable
argument_list|<
name|Object
argument_list|>
name|masterCallable
init|=
operator|new
name|MasterCallable
argument_list|<
name|Object
argument_list|>
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
operator|new
name|RpcControllerFactory
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Object
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HConstants
operator|.
name|RETRY_BACKOFF
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|pauseTime
operator|=
name|masterCallable
operator|.
name|sleep
argument_list|(
name|baseTime
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pauseTime
operator|>=
operator|(
name|baseTime
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
name|i
index|]
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|pauseTime
operator|<=
operator|(
name|baseTime
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
name|i
index|]
operator|*
literal|1.01f
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|masterCallable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testConnectionClose
parameter_list|(
name|boolean
name|allowsInterrupt
parameter_list|)
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"HCM-testConnectionClose"
operator|+
name|allowsInterrupt
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAM_NAM
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|boolean
name|previousBalance
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Configuration
name|c2
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// We want to work on a separate connection.
name|c2
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_INSTANCE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// retry a lot
name|c2
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// don't wait between retries.
name|c2
operator|.
name|setInt
argument_list|(
name|RpcClient
operator|.
name|FAILED_SERVER_EXPIRY_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Server do not really expire
name|c2
operator|.
name|setBoolean
argument_list|(
name|RpcClient
operator|.
name|SPECIFIC_WRITE_THREAD
argument_list|,
name|allowsInterrupt
argument_list|)
expr_stmt|;
comment|// to avoid the client to be stuck when do the Get
name|c2
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_META_OPERATION_TIMEOUT
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c2
argument_list|)
decl_stmt|;
specifier|final
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// 4 steps: ready=0; doGets=1; mustStop=2; stopped=3
specifier|final
name|AtomicInteger
name|step
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|failed
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"testConnectionCloseThread"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|done
init|=
literal|0
decl_stmt|;
try|try
block|{
name|step
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|step
operator|.
name|get
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|done
operator|++
expr_stmt|;
if|if
condition|(
name|done
operator|%
literal|100
operator|==
literal|0
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"done="
operator|+
name|done
argument_list|)
expr_stmt|;
comment|// without the sleep, will cause the exception for too many files in
comment|// org.apache.hadoop.hdfs.server.datanode.DataXceiver
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|failed
operator|.
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|step
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|20000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|step
operator|.
name|get
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ServerName
name|sn
decl_stmt|;
try|try
init|(
name|RegionLocator
name|rl
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|sn
operator|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
name|ROW
argument_list|)
operator|.
name|getServerName
argument_list|()
expr_stmt|;
block|}
name|ConnectionImplementation
name|conn
init|=
operator|(
name|ConnectionImplementation
operator|)
name|connection
decl_stmt|;
name|RpcClient
name|rpcClient
init|=
name|conn
operator|.
name|getRpcClient
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Going to cancel connections. connection="
operator|+
name|conn
operator|.
name|toString
argument_list|()
operator|+
literal|", sn="
operator|+
name|sn
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
name|rpcClient
operator|.
name|cancelConnections
argument_list|(
name|sn
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
name|step
operator|.
name|compareAndSet
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// The test may fail here if the thread doing the gets is stuck. The way to find
comment|//  out what's happening is to look for the thread named 'testConnectionCloseThread'
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|40000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|step
operator|.
name|get
argument_list|()
operator|==
literal|3
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected exception is "
operator|+
name|failed
operator|.
name|get
argument_list|()
argument_list|,
name|failed
operator|.
name|get
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
name|previousBalance
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that connection can become idle without breaking everything.    */
annotation|@
name|Test
specifier|public
name|void
name|testConnectionIdle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAM_NAM
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|int
name|idleTime
init|=
literal|20000
decl_stmt|;
name|boolean
name|previousBalance
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Configuration
name|c2
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// We want to work on a separate connection.
name|c2
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_INSTANCE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Don't retry: retry = test failed
name|c2
operator|.
name|setInt
argument_list|(
name|RpcClient
operator|.
name|IDLE_TIME
argument_list|,
name|idleTime
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c2
argument_list|)
decl_stmt|;
specifier|final
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|ManualEnvironmentEdge
name|mee
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|mee
operator|.
name|setValue
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|mee
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"first get"
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"first get - changing the time& sleeping"
argument_list|)
expr_stmt|;
name|mee
operator|.
name|incValue
argument_list|(
name|idleTime
operator|+
literal|1000
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
comment|// we need to wait a little for the connection to be seen as idle.
comment|// 1500 = sleep time in RpcClient#waitForWork + a margin
name|LOG
operator|.
name|info
argument_list|(
literal|"second get - connection has been marked idle in the middle"
argument_list|)
expr_stmt|;
comment|// To check that the connection actually became idle would need to read some private
comment|//  fields of RpcClient.
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|mee
operator|.
name|incValue
argument_list|(
name|idleTime
operator|+
literal|1000
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"third get - connection is idle, but the reader doesn't know yet"
argument_list|)
expr_stmt|;
comment|// We're testing here a special case:
comment|//  time limit reached BUT connection not yet reclaimed AND a new call.
comment|//  in this situation, we don't close the connection, instead we use it immediately.
comment|// If we're very unlucky we can have a race condition in the test: the connection is already
comment|//  under closing when we do the get, so we have an exception, and we don't retry as the
comment|//  retry number is 1. The probability is very very low, and seems acceptable for now. It's
comment|//  a test issue only.
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"we're done - time will change back"
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
name|previousBalance
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that the connection to the dead server is cut immediately when we receive the      *  notification.      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testConnectionCut
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAM_NAM
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|boolean
name|previousBalance
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Configuration
name|c2
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// We want to work on a separate connection.
name|c2
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_INSTANCE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// try only once w/o any retry
name|c2
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c2
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c2
argument_list|)
decl_stmt|;
specifier|final
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|FAM_NAM
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|,
name|FAM_NAM
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
specifier|final
name|ConnectionImplementation
name|hci
init|=
operator|(
name|ConnectionImplementation
operator|)
name|connection
decl_stmt|;
specifier|final
name|HRegionLocation
name|loc
decl_stmt|;
try|try
init|(
name|RegionLocator
name|rl
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|loc
operator|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
name|FAM_NAM
argument_list|)
expr_stmt|;
block|}
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|FAM_NAM
argument_list|)
expr_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|BlockingFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// This thread will mark the server as dead while we're waiting during a get.
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|syncBlockingFilter
init|)
block|{
try|try
block|{
name|syncBlockingFilter
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|hci
operator|.
name|clusterStatusListener
operator|.
name|deadServerHandler
operator|.
name|newDead
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|expected
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Received: "
operator|+
name|expected
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|expected
operator|instanceof
name|SocketTimeoutException
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|syncBlockingFilter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|syncBlockingFilter
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
name|previousBalance
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
specifier|final
name|AtomicBoolean
name|syncBlockingFilter
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|BlockingFilter
extends|extends
name|FilterBase
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|filterRowKey
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|++
operator|<
literal|1000
operator|&&
operator|!
name|syncBlockingFilter
operator|.
name|get
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|syncBlockingFilter
init|)
block|{
name|syncBlockingFilter
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|syncBlockingFilter
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|Cell
name|ignored
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
specifier|public
specifier|static
name|Filter
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|pbBytes
parameter_list|)
throws|throws
name|DeserializationException
block|{
return|return
operator|new
name|BlockingFilter
argument_list|()
return|;
block|}
block|}
comment|/**    * Test that when we delete a location using the first row of a region    * that we really delete it.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRegionCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAM_NAM
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// test with no retry, or client cache will get updated after the first failure
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|ConnectionImplementation
name|conn
init|=
operator|(
name|ConnectionImplementation
operator|)
name|connection
decl_stmt|;
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|int
name|nextPort
init|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getPort
argument_list|()
operator|+
literal|1
decl_stmt|;
name|HRegionLocation
name|loc
init|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
name|conn
operator|.
name|updateCachedLocation
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|nextPort
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|nextPort
argument_list|)
expr_stmt|;
name|conn
operator|.
name|clearRegionCache
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|RegionLocations
name|rl
init|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"What is this location?? "
operator|+
name|rl
argument_list|,
name|rl
argument_list|)
expr_stmt|;
comment|// We're now going to move the region and check that it works for the client
comment|// First a new put to add the location in the cache
name|conn
operator|.
name|clearRegionCache
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|conn
operator|.
name|getNumberOfCachedRegionLocations
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|ROW
operator|.
name|clone
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
comment|// We can wait for all regions to be online, that makes log reading easier when debugging
name|TEST_UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|()
expr_stmt|;
comment|// Now moving the region to the second server
name|HRegionLocation
name|toMove
init|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|encodedRegionNameBytes
init|=
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
comment|// Choose the other server.
name|int
name|curServerId
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getServerWith
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|int
name|destServerId
init|=
operator|(
name|curServerId
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|HRegionServer
name|curServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|curServerId
argument_list|)
decl_stmt|;
name|HRegionServer
name|destServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|destServerId
argument_list|)
decl_stmt|;
name|ServerName
name|destServerName
init|=
name|destServer
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// Check that we are in the expected state
name|Assert
operator|.
name|assertTrue
argument_list|(
name|curServer
operator|!=
name|destServer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|curServer
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|destServer
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|toMove
operator|.
name|getPort
argument_list|()
operator|==
name|destServerName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|curServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Moving. It's possible that we don't have all the regions online at this point, so
comment|//  the test must depends only on the region we're looking at.
name|LOG
operator|.
name|info
argument_list|(
literal|"Move starting region="
operator|+
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|destServerName
operator|.
name|getServerName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
operator|==
literal|null
operator|||
name|destServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
operator|||
name|curServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
operator|||
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
condition|)
block|{
comment|// wait for the move to be finished
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Move finished for region="
operator|+
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check our new state.
name|Assert
operator|.
name|assertNull
argument_list|(
name|curServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|destServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|curServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cache was NOT updated and points to the wrong server
name|Assert
operator|.
name|assertFalse
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getPort
argument_list|()
operator|==
name|destServerName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// This part relies on a number of tries equals to 1.
comment|// We do a put and expect the cache to be updated, even if we don't retry
name|LOG
operator|.
name|info
argument_list|(
literal|"Put starting"
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
try|try
block|{
name|table
operator|.
name|put
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unreachable point"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Put done, exception caught: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|getNumExceptions
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|getCauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|e
operator|.
name|getRow
argument_list|(
literal|0
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
comment|// Check that we unserialized the exception as expected
name|Throwable
name|cause
init|=
name|ClientExceptionsUtil
operator|.
name|findException
argument_list|(
name|e
operator|.
name|getCause
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|cause
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cause
operator|instanceof
name|RegionMovedException
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNotNull
argument_list|(
literal|"Cached connection is null"
argument_list|,
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Previous server was "
operator|+
name|curServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
argument_list|,
name|destServerName
operator|.
name|getPort
argument_list|()
argument_list|,
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|destServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|curServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
argument_list|)
expr_stmt|;
comment|// We move it back to do another test with a scan
name|LOG
operator|.
name|info
argument_list|(
literal|"Move starting region="
operator|+
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|curServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|curServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
operator|==
literal|null
operator|||
name|destServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
operator|||
name|curServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
operator|||
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
condition|)
block|{
comment|// wait for the move to be finished
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Check our new state.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|curServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Move finished for region="
operator|+
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cache was NOT updated and points to the wrong server
name|Assert
operator|.
name|assertFalse
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getPort
argument_list|()
operator|==
name|curServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|sc
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|sc
operator|.
name|setStopRow
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|sc
operator|.
name|setStartRow
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
comment|// The scanner takes the max retries from the connection configuration, not the table as
comment|// the put.
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|ResultScanner
name|rs
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|sc
argument_list|)
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{       }
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unreachable point"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Scan done, expected exception caught: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Cache is updated with the right value.
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Previous server was "
operator|+
name|destServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
argument_list|,
name|curServer
operator|.
name|getServerName
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|RPC_RETRY
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that Connection or Pool are not closed when managed externally    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testConnectionManagement
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table0
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME1
argument_list|,
name|FAM_NAM
argument_list|)
decl_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|TABLE_NAME1
argument_list|)
decl_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|conn
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|instanceof
name|HTable
condition|)
block|{
name|assertFalse
argument_list|(
operator|(
operator|(
name|HTable
operator|)
name|table
operator|)
operator|.
name|getPool
argument_list|()
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|TABLE_NAME1
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|table
operator|instanceof
name|HTable
condition|)
block|{
name|assertFalse
argument_list|(
operator|(
operator|(
name|HTable
operator|)
name|table
operator|)
operator|.
name|getPool
argument_list|()
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|table
operator|instanceof
name|HTable
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
operator|(
name|HTable
operator|)
name|table
operator|)
operator|.
name|getPool
argument_list|()
operator|.
name|isShutdown
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table0
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that stale cache updates don't override newer cached values.    */
annotation|@
name|Test
specifier|public
name|void
name|testCacheSeqNums
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|TABLE_NAME2
argument_list|,
name|FAM_NAM
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|ConnectionImplementation
name|conn
init|=
operator|(
name|ConnectionImplementation
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|HRegionLocation
name|location
init|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME2
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|ServerName
name|anySource
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|location
operator|.
name|getHostname
argument_list|()
argument_list|,
name|location
operator|.
name|getPort
argument_list|()
operator|-
literal|1
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
comment|// Same server as already in cache reporting - overwrites any value despite seqNum.
name|int
name|nextPort
init|=
name|location
operator|.
name|getPort
argument_list|()
operator|+
literal|1
decl_stmt|;
name|conn
operator|.
name|updateCachedLocation
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|location
operator|.
name|getServerName
argument_list|()
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|nextPort
argument_list|,
literal|0
argument_list|)
argument_list|,
name|location
operator|.
name|getSeqNum
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|location
operator|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME2
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nextPort
argument_list|,
name|location
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// No source specified - same.
name|nextPort
operator|=
name|location
operator|.
name|getPort
argument_list|()
operator|+
literal|1
expr_stmt|;
name|conn
operator|.
name|updateCachedLocation
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|location
operator|.
name|getServerName
argument_list|()
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|nextPort
argument_list|,
literal|0
argument_list|)
argument_list|,
name|location
operator|.
name|getSeqNum
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|location
operator|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME2
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nextPort
argument_list|,
name|location
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Higher seqNum - overwrites lower seqNum.
name|nextPort
operator|=
name|location
operator|.
name|getPort
argument_list|()
operator|+
literal|1
expr_stmt|;
name|conn
operator|.
name|updateCachedLocation
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|anySource
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|nextPort
argument_list|,
literal|0
argument_list|)
argument_list|,
name|location
operator|.
name|getSeqNum
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|location
operator|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME2
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nextPort
argument_list|,
name|location
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Lower seqNum - does not overwrite higher seqNum.
name|nextPort
operator|=
name|location
operator|.
name|getPort
argument_list|()
operator|+
literal|1
expr_stmt|;
name|conn
operator|.
name|updateCachedLocation
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|anySource
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|nextPort
argument_list|,
literal|0
argument_list|)
argument_list|,
name|location
operator|.
name|getSeqNum
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|location
operator|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME2
argument_list|,
name|ROW
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|nextPort
operator|-
literal|1
argument_list|,
name|location
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClosing
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_INSTANCE_ID
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|_randy
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// as connection caching is going away, now we're just testing
comment|// that closed connection does actually get closed.
name|Connection
name|c1
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Connection
name|c2
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
comment|// no caching, different connections
name|assertTrue
argument_list|(
name|c1
operator|!=
name|c2
argument_list|)
expr_stmt|;
comment|// closing independently
name|c1
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
name|c2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|c2
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Trivial test to verify that nobody messes with    * {@link ConnectionFactory#createConnection(Configuration)}    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateConnection
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|configuration
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Connection
name|c1
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|Connection
name|c2
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
comment|// created from the same configuration, yet they are different
name|assertTrue
argument_list|(
name|c1
operator|!=
name|c2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c1
operator|.
name|getConfiguration
argument_list|()
operator|==
name|c2
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test checks that one can connect to the cluster with only the    *  ZooKeeper quorum set. Other stuff like master address will be read    *  from ZK by the client.    */
annotation|@
name|Test
specifier|public
name|void
name|testConnection
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We create an empty config and add the ZK address.
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should be enough to connect
name|ClusterConnection
name|conn
init|=
operator|(
name|ClusterConnection
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|conn
operator|.
name|isMasterRunning
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|setNumTries
parameter_list|(
name|ConnectionImplementation
name|hci
parameter_list|,
name|int
name|newVal
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|numTries
init|=
name|hci
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"numTries"
argument_list|)
decl_stmt|;
name|numTries
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|modifiersField
init|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
decl_stmt|;
name|modifiersField
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|modifiersField
operator|.
name|setInt
argument_list|(
name|numTries
argument_list|,
name|numTries
operator|.
name|getModifiers
argument_list|()
operator|&
operator|~
name|Modifier
operator|.
name|FINAL
argument_list|)
expr_stmt|;
specifier|final
name|int
name|prevNumRetriesVal
init|=
operator|(
name|Integer
operator|)
name|numTries
operator|.
name|get
argument_list|(
name|hci
argument_list|)
decl_stmt|;
name|numTries
operator|.
name|set
argument_list|(
name|hci
argument_list|,
name|newVal
argument_list|)
expr_stmt|;
return|return
name|prevNumRetriesVal
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMulti
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|TABLE_NAME3
argument_list|,
name|FAM_NAM
argument_list|)
decl_stmt|;
try|try
block|{
name|ConnectionImplementation
name|conn
init|=
operator|(
name|ConnectionImplementation
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
comment|// We're now going to move the region and check that it works for the client
comment|// First a new put to add the location in the cache
name|conn
operator|.
name|clearRegionCache
argument_list|(
name|TABLE_NAME3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|conn
operator|.
name|getNumberOfCachedRegionLocations
argument_list|(
name|TABLE_NAME3
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
comment|// We can wait for all regions to be online, that makes log reading easier when debugging
name|TEST_UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|()
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_X
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW_X
argument_list|,
name|ROW_X
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Now moving the region to the second server
name|HRegionLocation
name|toMove
init|=
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME3
argument_list|,
name|ROW_X
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|encodedRegionNameBytes
init|=
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
comment|// Choose the other server.
name|int
name|curServerId
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getServerWith
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|int
name|destServerId
init|=
operator|(
name|curServerId
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|HRegionServer
name|curServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|curServerId
argument_list|)
decl_stmt|;
name|HRegionServer
name|destServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|destServerId
argument_list|)
decl_stmt|;
name|ServerName
name|destServerName
init|=
name|destServer
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|//find another row in the cur server that is less than ROW_X
name|List
argument_list|<
name|Region
argument_list|>
name|regions
init|=
name|curServer
operator|.
name|getOnlineRegions
argument_list|(
name|TABLE_NAME3
argument_list|)
decl_stmt|;
name|byte
index|[]
name|otherRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|regions
control|)
block|{
if|if
condition|(
operator|!
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
operator|&&
name|Bytes
operator|.
name|BYTES_COMPARATOR
operator|.
name|compare
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|ROW_X
argument_list|)
operator|<
literal|0
condition|)
block|{
name|otherRow
operator|=
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|otherRow
argument_list|)
expr_stmt|;
comment|// If empty row, set it to first row.-f
if|if
condition|(
name|otherRow
operator|.
name|length
operator|<=
literal|0
condition|)
name|otherRow
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|otherRow
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|otherRow
argument_list|,
name|otherRow
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
comment|//cache put2's location
comment|// Check that we are in the expected state
name|Assert
operator|.
name|assertTrue
argument_list|(
name|curServer
operator|!=
name|destServer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|curServer
operator|.
name|getServerName
argument_list|()
argument_list|,
name|destServer
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotEquals
argument_list|(
name|toMove
operator|.
name|getPort
argument_list|()
argument_list|,
name|destServerName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|curServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
argument_list|)
expr_stmt|;
comment|// Moving. It's possible that we don't have all the regions online at this point, so
comment|//  the test must depends only on the region we're looking at.
name|LOG
operator|.
name|info
argument_list|(
literal|"Move starting region="
operator|+
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|destServerName
operator|.
name|getServerName
argument_list|()
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
operator|==
literal|null
operator|||
name|destServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
operator|||
name|curServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
operator|||
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionsInTransition
argument_list|()
condition|)
block|{
comment|// wait for the move to be finished
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Move finished for region="
operator|+
name|toMove
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check our new state.
name|Assert
operator|.
name|assertNull
argument_list|(
name|curServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|destServer
operator|.
name|getOnlineRegion
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|destServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|curServer
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|containsKey
argument_list|(
name|encodedRegionNameBytes
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cache was NOT updated and points to the wrong server
name|Assert
operator|.
name|assertFalse
argument_list|(
name|conn
operator|.
name|getCachedLocation
argument_list|(
name|TABLE_NAME3
argument_list|,
name|ROW_X
argument_list|)
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|getPort
argument_list|()
operator|==
name|destServerName
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Hijack the number of retry to fail after 2 tries
specifier|final
name|int
name|prevNumRetriesVal
init|=
name|setNumTries
argument_list|(
name|conn
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|ROW_X
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|ROW_X
argument_list|,
name|ROW_X
argument_list|)
expr_stmt|;
name|Put
name|put4
init|=
operator|new
name|Put
argument_list|(
name|otherRow
argument_list|)
decl_stmt|;
name|put4
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
name|otherRow
argument_list|,
name|otherRow
argument_list|)
expr_stmt|;
comment|// do multi
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|actions
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|put4
argument_list|,
name|put3
argument_list|)
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// first should be a valid row,
comment|// second we get RegionMovedException.
name|setNumTries
argument_list|(
name|conn
argument_list|,
name|prevNumRetriesVal
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testErrorBackoffTimeCalculation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: This test would seem to presume hardcoded RETRY_BACKOFF which it should not.
specifier|final
name|long
name|ANY_PAUSE
init|=
literal|100
decl_stmt|;
name|ServerName
name|location
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ServerName
name|diffLocation
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ManualEnvironmentEdge
name|timeMachine
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|timeMachine
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|largeAmountOfTime
init|=
name|ANY_PAUSE
operator|*
literal|1000
decl_stmt|;
name|ConnectionImplementation
operator|.
name|ServerErrorTracker
name|tracker
init|=
operator|new
name|ConnectionImplementation
operator|.
name|ServerErrorTracker
argument_list|(
name|largeAmountOfTime
argument_list|,
literal|100
argument_list|)
decl_stmt|;
comment|// The default backoff is 0.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tracker
operator|.
name|calculateBackoffTime
argument_list|(
name|location
argument_list|,
name|ANY_PAUSE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check some backoff values from HConstants sequence.
name|tracker
operator|.
name|reportServerError
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|assertEqualsWithJitter
argument_list|(
name|ANY_PAUSE
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
literal|0
index|]
argument_list|,
name|tracker
operator|.
name|calculateBackoffTime
argument_list|(
name|location
argument_list|,
name|ANY_PAUSE
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|reportServerError
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|reportServerError
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|reportServerError
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|assertEqualsWithJitter
argument_list|(
name|ANY_PAUSE
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
literal|3
index|]
argument_list|,
name|tracker
operator|.
name|calculateBackoffTime
argument_list|(
name|location
argument_list|,
name|ANY_PAUSE
argument_list|)
argument_list|)
expr_stmt|;
comment|// All of this shouldn't affect backoff for different location.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tracker
operator|.
name|calculateBackoffTime
argument_list|(
name|diffLocation
argument_list|,
name|ANY_PAUSE
argument_list|)
argument_list|)
expr_stmt|;
name|tracker
operator|.
name|reportServerError
argument_list|(
name|diffLocation
argument_list|)
expr_stmt|;
name|assertEqualsWithJitter
argument_list|(
name|ANY_PAUSE
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
literal|0
index|]
argument_list|,
name|tracker
operator|.
name|calculateBackoffTime
argument_list|(
name|diffLocation
argument_list|,
name|ANY_PAUSE
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check with different base.
name|assertEqualsWithJitter
argument_list|(
name|ANY_PAUSE
operator|*
literal|2
operator|*
name|HConstants
operator|.
name|RETRY_BACKOFF
index|[
literal|3
index|]
argument_list|,
name|tracker
operator|.
name|calculateBackoffTime
argument_list|(
name|location
argument_list|,
name|ANY_PAUSE
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertEqualsWithJitter
parameter_list|(
name|long
name|expected
parameter_list|,
name|long
name|actual
parameter_list|)
block|{
name|assertEqualsWithJitter
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertEqualsWithJitter
parameter_list|(
name|long
name|expected
parameter_list|,
name|long
name|actual
parameter_list|,
name|long
name|jitterBase
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Value not within jitter: "
operator|+
name|expected
operator|+
literal|" vs "
operator|+
name|actual
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|actual
operator|-
name|expected
argument_list|)
operator|<=
operator|(
literal|0.01f
operator|*
name|jitterBase
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionRideOverClusterRestart
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// this will cache the meta location and table's region location
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// restart HBase
name|TEST_UTIL
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|restartHBaseCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// this should be able to discover new locations for meta and table's region
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|TestPutThread
extends|extends
name|Thread
block|{
name|Table
name|table
decl_stmt|;
name|int
name|getServerBusyException
init|=
literal|0
decl_stmt|;
name|TestPutThread
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|exceptions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ServerTooBusyException
condition|)
block|{
name|getServerBusyException
operator|=
literal|1
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{       }
block|}
block|}
specifier|private
class|class
name|TestGetThread
extends|extends
name|Thread
block|{
name|Table
name|table
decl_stmt|;
name|int
name|getServerBusyException
init|=
literal|0
decl_stmt|;
name|TestGetThread
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|FAM_NAM
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ServerTooBusyException
condition|)
block|{
name|getServerBusyException
operator|=
literal|1
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ignore
parameter_list|)
block|{       }
block|}
block|}
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|testServerBusyException
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM_NAM
block|}
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|TestGetThread
name|tg1
init|=
operator|new
name|TestGetThread
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestGetThread
name|tg2
init|=
operator|new
name|TestGetThread
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestGetThread
name|tg3
init|=
operator|new
name|TestGetThread
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestGetThread
name|tg4
init|=
operator|new
name|TestGetThread
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestGetThread
name|tg5
init|=
operator|new
name|TestGetThread
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|tg1
operator|.
name|start
argument_list|()
expr_stmt|;
name|tg2
operator|.
name|start
argument_list|()
expr_stmt|;
name|tg3
operator|.
name|start
argument_list|()
expr_stmt|;
name|tg4
operator|.
name|start
argument_list|()
expr_stmt|;
name|tg5
operator|.
name|start
argument_list|()
expr_stmt|;
name|tg1
operator|.
name|join
argument_list|()
expr_stmt|;
name|tg2
operator|.
name|join
argument_list|()
expr_stmt|;
name|tg3
operator|.
name|join
argument_list|()
expr_stmt|;
name|tg4
operator|.
name|join
argument_list|()
expr_stmt|;
name|tg5
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tg1
operator|.
name|getServerBusyException
operator|+
name|tg2
operator|.
name|getServerBusyException
operator|+
name|tg3
operator|.
name|getServerBusyException
operator|+
name|tg4
operator|.
name|getServerBusyException
operator|+
name|tg5
operator|.
name|getServerBusyException
argument_list|)
expr_stmt|;
comment|// Put has its own logic in HTable, test Put alone. We use AsyncProcess for Put (use multi at
comment|// RPC level) and it wrap exceptions to RetriesExhaustedWithDetailsException.
name|TestPutThread
name|tp1
init|=
operator|new
name|TestPutThread
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestPutThread
name|tp2
init|=
operator|new
name|TestPutThread
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestPutThread
name|tp3
init|=
operator|new
name|TestPutThread
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestPutThread
name|tp4
init|=
operator|new
name|TestPutThread
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|TestPutThread
name|tp5
init|=
operator|new
name|TestPutThread
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|tp1
operator|.
name|start
argument_list|()
expr_stmt|;
name|tp2
operator|.
name|start
argument_list|()
expr_stmt|;
name|tp3
operator|.
name|start
argument_list|()
expr_stmt|;
name|tp4
operator|.
name|start
argument_list|()
expr_stmt|;
name|tp5
operator|.
name|start
argument_list|()
expr_stmt|;
name|tp1
operator|.
name|join
argument_list|()
expr_stmt|;
name|tp2
operator|.
name|join
argument_list|()
expr_stmt|;
name|tp3
operator|.
name|join
argument_list|()
expr_stmt|;
name|tp4
operator|.
name|join
argument_list|()
expr_stmt|;
name|tp5
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tp1
operator|.
name|getServerBusyException
operator|+
name|tp2
operator|.
name|getServerBusyException
operator|+
name|tp3
operator|.
name|getServerBusyException
operator|+
name|tp4
operator|.
name|getServerBusyException
operator|+
name|tp5
operator|.
name|getServerBusyException
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

