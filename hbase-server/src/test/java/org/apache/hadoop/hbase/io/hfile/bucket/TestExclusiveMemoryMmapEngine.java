begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|TestByteBufferIOEngine
operator|.
name|createBucketEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|TestByteBufferIOEngine
operator|.
name|getByteBuff
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Basic test for {@link ExclusiveMemoryMmapIOEngine}  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestExclusiveMemoryMmapEngine
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestExclusiveMemoryMmapEngine
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testFileMmapEngine
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|size
init|=
literal|2
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|// 2 MB
name|String
name|filePath
init|=
literal|"testFileMmapEngine"
decl_stmt|;
try|try
block|{
name|ExclusiveMemoryMmapIOEngine
name|fileMmapEngine
init|=
operator|new
name|ExclusiveMemoryMmapIOEngine
argument_list|(
name|filePath
argument_list|,
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|100
argument_list|)
decl_stmt|;
name|long
name|offset
init|=
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|size
operator|%
operator|(
name|size
operator|-
name|len
operator|)
argument_list|)
decl_stmt|;
name|int
name|val
init|=
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|255
argument_list|)
decl_stmt|;
comment|// write
name|ByteBuff
name|src
init|=
name|TestByteBufferIOEngine
operator|.
name|createByteBuffer
argument_list|(
name|len
argument_list|,
name|val
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|src
operator|.
name|position
argument_list|()
decl_stmt|,
name|lim
init|=
name|src
operator|.
name|limit
argument_list|()
decl_stmt|;
name|fileMmapEngine
operator|.
name|write
argument_list|(
name|src
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|src
operator|.
name|position
argument_list|(
name|pos
argument_list|)
operator|.
name|limit
argument_list|(
name|lim
argument_list|)
expr_stmt|;
comment|// read
name|BucketEntry
name|be
init|=
name|createBucketEntry
argument_list|(
name|offset
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|fileMmapEngine
operator|.
name|read
argument_list|(
name|be
argument_list|)
expr_stmt|;
name|ByteBuff
name|dst
init|=
name|getByteBuff
argument_list|(
name|be
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|src
operator|.
name|remaining
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dst
operator|.
name|remaining
argument_list|()
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ByteBuff
operator|.
name|compareTo
argument_list|(
name|src
argument_list|,
name|pos
argument_list|,
name|len
argument_list|,
name|dst
argument_list|,
name|dst
operator|.
name|position
argument_list|()
argument_list|,
name|dst
operator|.
name|remaining
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

