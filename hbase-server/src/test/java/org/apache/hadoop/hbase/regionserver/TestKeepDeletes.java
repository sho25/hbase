begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestKeepDeletes
extends|extends
name|HBaseTestCase
block|{
specifier|private
specifier|final
name|byte
index|[]
name|T0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|T1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|T2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|T3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|T4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"4"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|T5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|T6
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"6"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|c0
init|=
name|COLUMNS
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|c1
init|=
name|COLUMNS
index|[
literal|1
index|]
decl_stmt|;
comment|/**    * Make sure that deleted rows are retained.    * Family delete markers are deleted.    * Column Delete markers are versioned    * Time range scan of deleted rows are possible    */
specifier|public
name|void
name|testBasicScenario
parameter_list|()
throws|throws
name|Exception
block|{
comment|// keep 3 versions, rows do not expire
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|4
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T4
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// now place a delete marker at ts+2
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// a raw scan can see the delete markers
comment|// (one for each column family)
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
comment|// get something *before* the delete marker
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|T1
argument_list|)
decl_stmt|;
name|g
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|g
operator|.
name|setTimeRange
argument_list|(
literal|0L
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|checkResult
argument_list|(
name|r
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
comment|// flush
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// yep, T2 still there, T1 gone
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|r
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
comment|// major compact
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// one delete marker left (the others did not
comment|// have older puts)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
comment|// still there (even after multiple compactions)
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|r
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
comment|// a timerange that includes the delete marker won't see past rows
name|g
operator|.
name|setTimeRange
argument_list|(
literal|0L
argument_list|,
name|ts
operator|+
literal|4
argument_list|)
expr_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// two more puts, this will expire the older puts.
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|5
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T5
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|6
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T6
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// also add an old put again
comment|// (which is past the max versions)
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// verify that the delete marker itself was collected
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|r
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/**    * Even when the store does not keep deletes a "raw" scan will     * return everything it can find (unless discarding cells is guaranteed    * to have no effect).    * Assuming this the desired behavior. Could also disallow "raw" scanning    * if the store does not have KEEP_DELETED_CELLS enabled.    * (can be changed easily)    */
specifier|public
name|void
name|testRawScanWithoutKeepingDeletes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// KEEP_DELETED_CELLS is NOT enabled
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// scan still returns delete markers and deletes rows
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|InternalScanner
name|scan
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|scan
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// after compaction they are gone
comment|// (note that this a test with a Store without
comment|//  KEEP_DELETED_CELLS)
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|scan
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|scan
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/**    * basic verification of existing behavior    */
specifier|public
name|void
name|testWithoutKeepingDeletes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// KEEP_DELETED_CELLS is NOT enabled
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// "past" get does not see rows behind delete marker
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|T1
argument_list|)
decl_stmt|;
name|g
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|g
operator|.
name|setTimeRange
argument_list|(
literal|0L
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// "past" scan does not see rows behind delete marker
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|s
operator|.
name|setTimeRange
argument_list|(
literal|0L
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
condition|)
empty_stmt|;
name|assertTrue
argument_list|(
name|kvs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// flushing and minor compaction keep delete markers
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// major compaction deleted it
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/**    * The ExplicitColumnTracker does not support "raw" scanning.    */
specifier|public
name|void
name|testRawScanWithColumns
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|s
operator|.
name|addColumn
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|)
expr_stmt|;
try|try
block|{
name|InternalScanner
name|scan
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"raw scanner with columns should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|dnre
parameter_list|)
block|{
comment|// ok!
block|}
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that "raw" scanning mode return delete markers and deletes rows.    */
specifier|public
name|void
name|testRawScan
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|4
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|InternalScanner
name|scan
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|scan
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isDeleteFamily
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|T3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isDelete
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|isDeleteType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that delete markers are removed from an otherwise empty store.    */
specifier|public
name|void
name|testDeleteMarkerExpirationEmptyStore
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|c0
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// 1 family marker, 1 column marker, 2 version markers
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
comment|// neither flush nor minor compaction removes any marker
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
comment|// major compaction removes all, since there are no puts they affect
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test delete marker removal from store files.    */
specifier|public
name|void
name|testDeleteMarkerExpiration
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// a put into another store (CF) should have no effect
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|-
literal|10
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// all the following deletes affect the put
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|c0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// 1 family marker, 1 column marker, 2 version markers
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
comment|// another put will push out the earlier put...
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// no markers are collected, since there is an affected put
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
comment|// the last collections collected the earlier put
comment|// so after this collection all markers
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify correct range demarcation    */
specifier|public
name|void
name|testRanges
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c1
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c1
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T2
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c1
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c1
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c1
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c1
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T2
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c1
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c1
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|c1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T2
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|c0
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// add an older delete, to make sure it is filtered
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|-
literal|10
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|c1
argument_list|,
name|ts
operator|-
literal|10
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// ts + 2 does NOT include the delete at ts+2
name|checkGet
argument_list|(
name|region
argument_list|,
name|T1
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T1
argument_list|,
name|c0
argument_list|,
name|c1
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T1
argument_list|,
name|c1
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T1
argument_list|,
name|c1
argument_list|,
name|c1
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T2
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T2
argument_list|,
name|c0
argument_list|,
name|c1
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T2
argument_list|,
name|c1
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T2
argument_list|,
name|c1
argument_list|,
name|c1
argument_list|,
name|ts
operator|+
literal|2
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
comment|// ts + 3 does
name|checkGet
argument_list|(
name|region
argument_list|,
name|T1
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T1
argument_list|,
name|c0
argument_list|,
name|c1
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T1
argument_list|,
name|c1
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T1
argument_list|,
name|c1
argument_list|,
name|c1
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T2
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T2
argument_list|,
name|c0
argument_list|,
name|c1
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T2
argument_list|,
name|c1
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|checkGet
argument_list|(
name|region
argument_list|,
name|T2
argument_list|,
name|c1
argument_list|,
name|c1
argument_list|,
name|ts
operator|+
literal|3
argument_list|,
name|T2
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that column/version delete makers are sorted    * with their respective puts and removed correctly by    * versioning (i.e. not relying on the store earliestPutTS).    */
specifier|public
name|void
name|testDeleteMarkerVersioning
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// this prevents marker collection based on earliestPut
comment|// (cannot keep earliest put per column in the store file)
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|-
literal|10
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c1
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
comment|// test corner case (Put and Delete have same TS)
name|d
operator|.
name|deleteColumns
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
comment|// add two more puts, since max version is 1
comment|// the 2nd put (and all delete markers following)
comment|// will be removed.
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// delete, put, delete, delete, put
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// This is potentially questionable behavior.
comment|// This could be changed by not letting the ScanQueryMatcher
comment|// return SEEK_NEXT_COL if a put is past VERSIONS, but instead
comment|// return SKIP if the store has KEEP_DELETED_CELLS set.
comment|//
comment|// As it stands, the 1 here is correct here.
comment|// There are two puts, VERSIONS is one, so after the 1st put the scanner
comment|// knows that there can be no more KVs (put or delete) that have any effect.
comment|//
comment|// delete, put, put | delete, delete
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
comment|// flush cache only sees what is in the memstore
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// Here we have the three markers again, because the flush above
comment|// removed the 2nd put before the file is written.
comment|// So there's only one put, and hence the deletes already in the store
comment|// files cannot be removed safely.
comment|// delete, put, delete, delete
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
comment|// add one more put
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|4
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T4
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// one trailing delete marker remains (but only one)
comment|// because delete markers do not increase the version count
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify scenarios with multiple CFs and columns    */
specifier|public
name|void
name|testWithMixedCFs
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c1
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c1
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T2
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c1
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c1
argument_list|,
name|c1
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// family markers are each family
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T2
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|T1
argument_list|)
decl_stmt|;
name|s
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|T2
argument_list|)
expr_stmt|;
name|s
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test keeping deleted rows together with min versions set    * @throws Exception    */
specifier|public
name|void
name|testWithMinVersions
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
name|createTableDescriptor
argument_list|(
name|getName
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|createNewHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|2000
decl_stmt|;
comment|// 2s in the past
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T3
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|-
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|-
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|-
literal|4
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T0
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// all puts now are just retained because of min versions = 3
comment|// place a family delete marker
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|-
literal|1
argument_list|)
decl_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// and a column delete marker
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|-
literal|2
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|ts
operator|-
literal|1
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|T1
argument_list|)
decl_stmt|;
name|g
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|g
operator|.
name|setTimeRange
argument_list|(
literal|0L
argument_list|,
name|ts
operator|-
literal|2
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|checkResult
argument_list|(
name|r
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|,
name|T0
argument_list|)
expr_stmt|;
comment|// 3 families, one column delete marker
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// no delete marker removes by the flush
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|r
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T4
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|checkResult
argument_list|(
name|r
argument_list|,
name|c0
argument_list|,
name|c0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
comment|// this will push out the last put before
comment|// family delete marker
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|c0
argument_list|,
name|c0
argument_list|,
name|T5
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// the two family markers without puts are gone
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
comment|// the last compactStores updated the earliestPutTs,
comment|// so after the next compaction the last family delete marker is also gone
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countDeleteMarkers
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkGet
parameter_list|(
name|HRegion
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|,
name|byte
index|[]
name|col
parameter_list|,
name|long
name|time
parameter_list|,
name|byte
index|[]
modifier|...
name|vals
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|g
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|g
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|g
operator|.
name|setTimeRange
argument_list|(
literal|0L
argument_list|,
name|time
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|checkResult
argument_list|(
name|r
argument_list|,
name|fam
argument_list|,
name|col
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|countDeleteMarkers
parameter_list|(
name|HRegion
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|InternalScanner
name|scan
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|res
init|=
literal|0
decl_stmt|;
name|boolean
name|hasMore
decl_stmt|;
do|do
block|{
name|hasMore
operator|=
name|scan
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
if|if
condition|(
name|kv
operator|.
name|isDelete
argument_list|()
condition|)
name|res
operator|++
expr_stmt|;
block|}
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
name|scan
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
name|void
name|checkResult
parameter_list|(
name|Result
name|r
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|,
name|byte
index|[]
name|col
parameter_list|,
name|byte
index|[]
modifier|...
name|vals
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|r
operator|.
name|size
argument_list|()
argument_list|,
name|vals
operator|.
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
name|r
operator|.
name|getColumn
argument_list|(
name|fam
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|kvs
operator|.
name|size
argument_list|()
argument_list|,
name|vals
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|kvs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|,
name|vals
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

