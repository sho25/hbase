begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|compactions
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|crypto
operator|.
name|spec
operator|.
name|SecretKeySpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|CompactType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|CompactionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MobCompactPartitionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|KeyProviderForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|aes
operator|.
name|AES
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|TimeToLiveHFileCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobFileName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionLifeCycleTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|EncryptionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMobCompactor
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMobCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMobCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|TableName
name|tableName
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|conn
decl_stmt|;
specifier|private
name|BufferedMutator
name|bufMut
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
specifier|private
specifier|static
name|Admin
name|admin
decl_stmt|;
specifier|private
name|HTableDescriptor
name|desc
decl_stmt|;
specifier|private
name|HColumnDescriptor
name|hcd1
decl_stmt|;
specifier|private
name|HColumnDescriptor
name|hcd2
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|family1
init|=
literal|"family1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|family2
init|=
literal|"family2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|qf1
init|=
literal|"qualifier1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|qf2
init|=
literal|"qualifier2"
decl_stmt|;
specifier|private
specifier|static
name|long
name|tsFor20150907Monday
decl_stmt|;
specifier|private
specifier|static
name|long
name|tsFor20151120Sunday
decl_stmt|;
specifier|private
specifier|static
name|long
name|tsFor20151128Saturday
decl_stmt|;
specifier|private
specifier|static
name|long
name|tsFor20151130Monday
decl_stmt|;
specifier|private
specifier|static
name|long
name|tsFor20151201Tuesday
decl_stmt|;
specifier|private
specifier|static
name|long
name|tsFor20151205Saturday
decl_stmt|;
specifier|private
specifier|static
name|long
name|tsFor20151228Monday
decl_stmt|;
specifier|private
specifier|static
name|long
name|tsFor20151231Thursday
decl_stmt|;
specifier|private
specifier|static
name|long
name|tsFor20160101Friday
decl_stmt|;
specifier|private
specifier|static
name|long
name|tsFor20160103Sunday
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey01
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r01"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey02
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r02"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey03
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r03"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey04
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r04"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey05
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r05"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey06
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r05"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r4"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r5"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey6
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r6"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey7
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r7"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|mobKey8
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r8"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|mobValue0
init|=
literal|"mobValue00000000000000000000000000"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|mobValue1
init|=
literal|"mobValue00000111111111111111111111"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|mobValue2
init|=
literal|"mobValue00000222222222222222222222"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|mobValue3
init|=
literal|"mobValue00000333333333333333333333"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|mobValue4
init|=
literal|"mobValue00000444444444444444444444"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|mobValue5
init|=
literal|"mobValue00000666666666666666666666"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|mobValue6
init|=
literal|"mobValue00000777777777777777777777"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|mobValue7
init|=
literal|"mobValue00000888888888888888888888"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|mobValue8
init|=
literal|"mobValue00000888888888888888888899"
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|KEYS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"012"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|regionNum
init|=
name|KEYS
operator|.
name|length
decl_stmt|;
specifier|private
specifier|static
name|int
name|delRowNum
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|int
name|delCellNum
init|=
literal|6
decl_stmt|;
specifier|private
specifier|static
name|int
name|cellNumPerRow
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
name|int
name|rowNumPerFile
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
name|ExecutorService
name|pool
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_MERGEABLE_THRESHOLD
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CRYPTO_KEYPROVIDER_CONF_KEY
argument_list|,
name|KeyProviderForTesting
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CRYPTO_MASTERKEY_NAME_CONF_KEY
argument_list|,
literal|"hbase"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|TimeToLiveHFileCleaner
operator|.
name|TTL_CONF_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.hfile.compaction.discharger.interval"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pool
operator|=
name|createThreadPool
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|conn
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
comment|// Initialize timestamps for these days
name|Calendar
name|calendar
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|2015
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|tsFor20150907Monday
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|2015
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|tsFor20151120Sunday
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|2015
argument_list|,
literal|10
argument_list|,
literal|28
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|tsFor20151128Saturday
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|2015
argument_list|,
literal|10
argument_list|,
literal|30
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|tsFor20151130Monday
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|2015
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|tsFor20151201Tuesday
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|2015
argument_list|,
literal|11
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|tsFor20151205Saturday
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|2015
argument_list|,
literal|11
argument_list|,
literal|28
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|tsFor20151228Monday
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|2015
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|tsFor20151231Thursday
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|2016
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|tsFor20160101Friday
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
name|calendar
operator|.
name|set
argument_list|(
literal|2016
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|tsFor20160103Sunday
operator|=
name|calendar
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setUp
parameter_list|(
name|String
name|tableNameAsString
parameter_list|)
throws|throws
name|IOException
block|{
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNameAsString
argument_list|)
expr_stmt|;
name|hcd1
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family1
argument_list|)
expr_stmt|;
name|hcd1
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd1
operator|.
name|setMobThreshold
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|hcd2
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family2
argument_list|)
expr_stmt|;
name|hcd2
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd2
operator|.
name|setMobThreshold
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd1
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd2
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|getSplitKeys
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|bufMut
operator|=
name|conn
operator|.
name|getBufferedMutator
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// Set up for mob compaction policy testing
specifier|private
name|void
name|setUpForPolicyTest
parameter_list|(
name|String
name|tableNameAsString
parameter_list|,
name|MobCompactPartitionPolicy
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableNameAsString
argument_list|)
expr_stmt|;
name|hcd1
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family1
argument_list|)
expr_stmt|;
name|hcd1
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd1
operator|.
name|setMobThreshold
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|hcd1
operator|.
name|setMobCompactPartitionPolicy
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|table
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|bufMut
operator|=
name|conn
operator|.
name|getBufferedMutator
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// alter mob compaction policy
specifier|private
name|void
name|alterForPolicyTest
parameter_list|(
specifier|final
name|MobCompactPartitionPolicy
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|hcd1
operator|.
name|setMobCompactPartitionPolicy
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|desc
operator|.
name|modifyFamily
argument_list|(
name|hcd1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"alter status finished"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|int
name|mergeSize
init|=
literal|5000
decl_stmt|;
comment|// change the mob compaction merge size
name|conf
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_MERGEABLE_THRESHOLD
argument_list|,
name|mergeSize
argument_list|)
expr_stmt|;
comment|// create a table with namespace
name|NamespaceDescriptor
name|namespaceDescriptor
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
literal|"ns"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|String
name|tableNameAsString
init|=
literal|"ns:testMinorCompaction"
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|namespaceDescriptor
argument_list|)
expr_stmt|;
name|setUp
argument_list|(
name|tableNameAsString
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|4
decl_stmt|;
comment|// generate mob files
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
name|count
argument_list|,
name|rowNumPerFile
argument_list|)
expr_stmt|;
name|int
name|rowNumPerRegion
init|=
name|count
operator|*
name|rowNumPerFile
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Before deleting: mob rows count"
argument_list|,
name|regionNum
operator|*
name|rowNumPerRegion
argument_list|,
name|MobTestUtil
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before deleting: mob cells count"
argument_list|,
name|regionNum
operator|*
name|cellNumPerRow
operator|*
name|rowNumPerRegion
argument_list|,
name|countMobCells
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before deleting: mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|largeFilesCount
init|=
name|countLargeFiles
argument_list|(
name|mergeSize
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|)
decl_stmt|;
name|createDelFile
argument_list|(
name|table
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob rows count"
argument_list|,
name|regionNum
operator|*
operator|(
name|rowNumPerRegion
operator|-
name|delRowNum
operator|)
argument_list|,
name|MobTestUtil
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob cells count"
argument_list|,
name|regionNum
operator|*
operator|(
name|cellNumPerRow
operator|*
name|rowNumPerRegion
operator|-
name|delCellNum
operator|)
argument_list|,
name|countMobCells
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family1 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family2 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family1 del file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family2 del file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
comment|// do the mob file compaction
name|MobCompactor
name|compactor
init|=
operator|new
name|PartitionedMobCompactor
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableName
argument_list|,
name|hcd1
argument_list|,
name|pool
argument_list|)
decl_stmt|;
name|compactor
operator|.
name|compact
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob rows count"
argument_list|,
name|regionNum
operator|*
operator|(
name|rowNumPerRegion
operator|-
name|delRowNum
operator|)
argument_list|,
name|MobTestUtil
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob cells count"
argument_list|,
name|regionNum
operator|*
operator|(
name|cellNumPerRow
operator|*
name|rowNumPerRegion
operator|-
name|delCellNum
operator|)
argument_list|,
name|countMobCells
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
comment|// After the compaction, the files smaller than the mob compaction merge size
comment|// is merge to one file
name|assertEquals
argument_list|(
literal|"After compaction: family1 mob file count"
argument_list|,
name|largeFilesCount
operator|+
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: family2 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: family1 del file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: family2 del file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionWithWeeklyPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|int
name|mergeSize
init|=
literal|5000
decl_stmt|;
comment|// change the mob compaction merge size
name|conf
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_MERGEABLE_THRESHOLD
argument_list|,
name|mergeSize
argument_list|)
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMinorCompactionWithWeeklyPolicy"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|WEEKLY
argument_list|,
literal|false
argument_list|,
literal|6
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151120"
block|,
literal|"20151128"
block|,
literal|"20151130"
block|,
literal|"20151205"
block|,
literal|"20160103"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompactionWithWeeklyPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMajorCompactionWithWeeklyPolicy"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|WEEKLY
argument_list|,
literal|true
argument_list|,
literal|5
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151120"
block|,
literal|"20151128"
block|,
literal|"20151205"
block|,
literal|"20160103"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionWithMonthlyPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|int
name|mergeSize
init|=
literal|5000
decl_stmt|;
comment|// change the mob compaction merge size
name|conf
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_MERGEABLE_THRESHOLD
argument_list|,
name|mergeSize
argument_list|)
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMinorCompactionWithMonthlyPolicy"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|MONTHLY
argument_list|,
literal|false
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151130"
block|,
literal|"20151231"
block|,
literal|"20160103"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompactionWithMonthlyPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMajorCompactionWithMonthlyPolicy"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|MONTHLY
argument_list|,
literal|true
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151130"
block|,
literal|"20151231"
block|,
literal|"20160103"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompactionWithWeeklyFollowedByMonthly
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMajorCompactionWithWeeklyFollowedByMonthly"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|WEEKLY
argument_list|,
literal|true
argument_list|,
literal|5
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151120"
block|,
literal|"20151128"
block|,
literal|"20151205"
block|,
literal|"20160103"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMajorCompactionWithWeeklyFollowedByMonthly"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|MONTHLY
argument_list|,
literal|true
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151128"
block|,
literal|"20151205"
block|,
literal|"20160103"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompactionWithWeeklyFollowedByMonthlyFollowedByWeekly
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMajorCompactionWithWeeklyFollowedByMonthlyFollowedByWeekly"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|WEEKLY
argument_list|,
literal|true
argument_list|,
literal|5
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151120"
block|,
literal|"20151128"
block|,
literal|"20151205"
block|,
literal|"20160103"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMajorCompactionWithWeeklyFollowedByMonthlyFollowedByWeekly"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|MONTHLY
argument_list|,
literal|true
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151128"
block|,
literal|"20151205"
block|,
literal|"20160103"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMajorCompactionWithWeeklyFollowedByMonthlyFollowedByWeekly"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|WEEKLY
argument_list|,
literal|true
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151128"
block|,
literal|"20151205"
block|,
literal|"20160103"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompactionWithWeeklyFollowedByMonthlyFollowedByDaily
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMajorCompactionWithWeeklyFollowedByMonthlyFollowedByDaily"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|WEEKLY
argument_list|,
literal|true
argument_list|,
literal|5
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151120"
block|,
literal|"20151128"
block|,
literal|"20151205"
block|,
literal|"20160103"
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMajorCompactionWithWeeklyFollowedByMonthlyFollowedByDaily"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|MONTHLY
argument_list|,
literal|true
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151128"
block|,
literal|"20151205"
block|,
literal|"20160103"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|commonPolicyTestLogic
argument_list|(
literal|"testMajorCompactionWithWeeklyFollowedByMonthlyFollowedByDaily"
argument_list|,
name|MobCompactPartitionPolicy
operator|.
name|DAILY
argument_list|,
literal|true
argument_list|,
literal|4
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"20150907"
block|,
literal|"20151128"
block|,
literal|"20151205"
block|,
literal|"20160103"
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactionWithHFileLink
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|String
name|tableNameAsString
init|=
literal|"testCompactionWithHFileLink"
decl_stmt|;
name|setUp
argument_list|(
name|tableNameAsString
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|4
decl_stmt|;
comment|// generate mob files
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
name|count
argument_list|,
name|rowNumPerFile
argument_list|)
expr_stmt|;
name|int
name|rowNumPerRegion
init|=
name|count
operator|*
name|rowNumPerFile
decl_stmt|;
name|long
name|tid
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|snapshotName1
init|=
literal|"snaptb-"
operator|+
name|tid
decl_stmt|;
comment|// take a snapshot
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotName1
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|createDelFile
argument_list|(
name|table
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob rows count"
argument_list|,
name|regionNum
operator|*
operator|(
name|rowNumPerRegion
operator|-
name|delRowNum
operator|)
argument_list|,
name|MobTestUtil
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob cells count"
argument_list|,
name|regionNum
operator|*
operator|(
name|cellNumPerRow
operator|*
name|rowNumPerRegion
operator|-
name|delCellNum
operator|)
argument_list|,
name|countMobCells
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family1 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family2 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family1 del file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family2 del file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
comment|// do the mob compaction
name|MobCompactor
name|compactor
init|=
operator|new
name|PartitionedMobCompactor
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableName
argument_list|,
name|hcd1
argument_list|,
name|pool
argument_list|)
decl_stmt|;
name|compactor
operator|.
name|compact
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After first compaction: mob rows count"
argument_list|,
name|regionNum
operator|*
operator|(
name|rowNumPerRegion
operator|-
name|delRowNum
operator|)
argument_list|,
name|MobTestUtil
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After first compaction: mob cells count"
argument_list|,
name|regionNum
operator|*
operator|(
name|cellNumPerRow
operator|*
name|rowNumPerRegion
operator|-
name|delCellNum
operator|)
argument_list|,
name|countMobCells
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After first compaction: family1 mob file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After first compaction: family2 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After first compaction: family1 del file count"
argument_list|,
literal|0
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After first compaction: family2 del file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After first compaction: family1 hfilelink count"
argument_list|,
literal|0
argument_list|,
name|countHFileLinks
argument_list|(
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After first compaction: family2 hfilelink count"
argument_list|,
literal|0
argument_list|,
name|countHFileLinks
argument_list|(
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Restore from snapshot, the hfilelink will exist in mob dir
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|snapshotName1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After restoring snapshot: mob rows count"
argument_list|,
name|regionNum
operator|*
name|rowNumPerRegion
argument_list|,
name|MobTestUtil
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After restoring snapshot: mob cells count"
argument_list|,
name|regionNum
operator|*
name|cellNumPerRow
operator|*
name|rowNumPerRegion
argument_list|,
name|countMobCells
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After restoring snapshot: family1 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After restoring snapshot: family2 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After restoring snapshot: family1 del file count"
argument_list|,
literal|0
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After restoring snapshot: family2 del file count"
argument_list|,
literal|0
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After restoring snapshot: family1 hfilelink count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countHFileLinks
argument_list|(
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After restoring snapshot: family2 hfilelink count"
argument_list|,
literal|0
argument_list|,
name|countHFileLinks
argument_list|(
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|compactor
operator|.
name|compact
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After second compaction: mob rows count"
argument_list|,
name|regionNum
operator|*
name|rowNumPerRegion
argument_list|,
name|MobTestUtil
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After second compaction: mob cells count"
argument_list|,
name|regionNum
operator|*
name|cellNumPerRow
operator|*
name|rowNumPerRegion
argument_list|,
name|countMobCells
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After second compaction: family1 mob file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After second compaction: family2 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After second compaction: family1 del file count"
argument_list|,
literal|0
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After second compaction: family2 del file count"
argument_list|,
literal|0
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After second compaction: family1 hfilelink count"
argument_list|,
literal|0
argument_list|,
name|countHFileLinks
argument_list|(
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After second compaction: family2 hfilelink count"
argument_list|,
literal|0
argument_list|,
name|countHFileLinks
argument_list|(
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertRefFileNameEqual
argument_list|(
name|family1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompactionFromAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|int
name|mergeSize
init|=
literal|5000
decl_stmt|;
comment|// change the mob compaction merge size
name|conf
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_MERGEABLE_THRESHOLD
argument_list|,
name|mergeSize
argument_list|)
expr_stmt|;
name|SecureRandom
name|rng
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
name|byte
index|[]
name|keyBytes
init|=
operator|new
name|byte
index|[
name|AES
operator|.
name|KEY_LENGTH
index|]
decl_stmt|;
name|rng
operator|.
name|nextBytes
argument_list|(
name|keyBytes
argument_list|)
expr_stmt|;
name|String
name|algorithm
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_KEY_ALGORITHM_CONF_KEY
argument_list|,
name|HConstants
operator|.
name|CIPHER_AES
argument_list|)
decl_stmt|;
name|Key
name|cfKey
init|=
operator|new
name|SecretKeySpec
argument_list|(
name|keyBytes
argument_list|,
name|algorithm
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encryptionKey
init|=
name|EncryptionUtil
operator|.
name|wrapKey
argument_list|(
name|conf
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|CRYPTO_MASTERKEY_NAME_CONF_KEY
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
argument_list|,
name|cfKey
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd1
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family1
argument_list|)
decl_stmt|;
name|hcd1
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd1
operator|.
name|setMobThreshold
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|hcd1
operator|.
name|setEncryptionType
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
name|hcd1
operator|.
name|setEncryptionKey
argument_list|(
name|encryptionKey
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|hcd2
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family2
argument_list|)
decl_stmt|;
name|hcd2
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd2
operator|.
name|setMobThreshold
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd1
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd2
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|getSplitKeys
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|BufferedMutator
name|bufMut
init|=
name|conn
operator|.
name|getBufferedMutator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|4
decl_stmt|;
comment|// generate mob files
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
name|count
argument_list|,
name|rowNumPerFile
argument_list|)
expr_stmt|;
name|int
name|rowNumPerRegion
init|=
name|count
operator|*
name|rowNumPerFile
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Before deleting: mob rows count"
argument_list|,
name|regionNum
operator|*
name|rowNumPerRegion
argument_list|,
name|MobTestUtil
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before deleting: mob cells count"
argument_list|,
name|regionNum
operator|*
name|cellNumPerRow
operator|*
name|rowNumPerRegion
argument_list|,
name|countMobCells
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before deleting: mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|createDelFile
argument_list|(
name|table
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob rows count"
argument_list|,
name|regionNum
operator|*
operator|(
name|rowNumPerRegion
operator|-
name|delRowNum
operator|)
argument_list|,
name|MobTestUtil
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob cells count"
argument_list|,
name|regionNum
operator|*
operator|(
name|cellNumPerRow
operator|*
name|rowNumPerRegion
operator|-
name|delCellNum
operator|)
argument_list|,
name|countMobCells
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family1 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family2 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family1 del file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: family2 del file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
comment|// do the major mob compaction, it will force all files to compaction
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|,
name|hcd1
operator|.
name|getName
argument_list|()
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
expr_stmt|;
name|waitUntilMobCompactionFinished
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob rows count"
argument_list|,
name|regionNum
operator|*
operator|(
name|rowNumPerRegion
operator|-
name|delRowNum
operator|)
argument_list|,
name|MobTestUtil
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob cells count"
argument_list|,
name|regionNum
operator|*
operator|(
name|cellNumPerRow
operator|*
name|rowNumPerRegion
operator|-
name|delCellNum
operator|)
argument_list|,
name|countMobCells
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: family1 mob file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: family2 mob file count"
argument_list|,
name|regionNum
operator|*
name|count
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: family1 del file count"
argument_list|,
literal|0
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: family2 del file count"
argument_list|,
name|regionNum
argument_list|,
name|countFiles
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
name|family2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|verifyEncryption
argument_list|(
name|tableName
argument_list|,
name|family1
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScannerOnBulkLoadRefHFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|setUp
argument_list|(
literal|"testScannerOnBulkLoadRefHFiles"
argument_list|)
expr_stmt|;
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"k0"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"k1"
argument_list|)
decl_stmt|;
name|String
name|value0
init|=
literal|"mobValue0"
decl_stmt|;
name|String
name|value1
init|=
literal|"mobValue1"
decl_stmt|;
name|String
name|newValue0
init|=
literal|"new"
decl_stmt|;
name|Put
name|put0
init|=
operator|new
name|Put
argument_list|(
name|key0
argument_list|)
decl_stmt|;
name|put0
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|ts
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value0
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put0
block|}
argument_list|)
expr_stmt|;
name|put0
operator|=
operator|new
name|Put
argument_list|(
name|key0
argument_list|)
expr_stmt|;
name|put0
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|ts
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|newValue0
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|key1
argument_list|)
decl_stmt|;
name|put1
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|ts
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put0
block|,
name|put1
block|}
argument_list|)
expr_stmt|;
comment|// read the latest cell of key0.
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|key0
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
name|cell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|hcd1
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob value of k0"
argument_list|,
name|newValue0
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|,
name|hcd1
operator|.
name|getName
argument_list|()
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
expr_stmt|;
name|waitUntilMobCompactionFinished
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// read the latest cell of key0, the cell seqId in bulk loaded file is not reset in the
comment|// scanner. The cell that has "new" value is still visible.
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|cell
operator|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|hcd1
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob value of k0"
argument_list|,
name|newValue0
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// read the ref cell, not read further to the mob cell.
name|get
operator|=
operator|new
name|Get
argument_list|(
name|key1
argument_list|)
expr_stmt|;
name|get
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_RAW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|cell
operator|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|hcd1
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
expr_stmt|;
comment|// the ref name is the new file
name|Path
name|mobFamilyPath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|hcd1
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|mobFamilyPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|mobFamilyPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|StoreFileInfo
operator|.
name|isDelFile
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|"After compaction: number of mob files:"
argument_list|,
literal|1
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob file name:"
argument_list|,
name|MobUtils
operator|.
name|getMobFileName
argument_list|(
name|cell
argument_list|)
argument_list|,
name|paths
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This case tests the following mob compaction and normal compaction scenario,    * after mob compaction, the mob reference in new bulkloaded hfile will win even after it    * is compacted with some other normal hfiles. This is to make sure the mvcc is included    * after compaction for mob enabled store files.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetAfterCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|resetConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|TimeToLiveHFileCleaner
operator|.
name|TTL_CONF_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|String
name|famStr
init|=
literal|"f1"
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|famStr
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|mobVal
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"01234567890"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|hdt
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|CompactTwoLatestHfilesCopro
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fam
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HRegion
name|r
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qualifier
argument_list|,
name|mobVal
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// Create mob file mob1 and reference file ref1
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that it is flushed.
name|FileSystem
name|fs
init|=
name|r
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|r
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getStoreDir
argument_list|(
name|famStr
argument_list|)
decl_stmt|;
name|waitUntilFilesShowup
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r2"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qualifier
argument_list|,
name|mobVal
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// Create mob file mob2 and reference file ref2
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|waitUntilFilesShowup
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Do mob compaction to create mob3 and ref3
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|compact
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fam
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
expr_stmt|;
name|waitUntilFilesShowup
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Compact ref3 and ref2 into ref4
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|compact
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|,
name|fam
argument_list|)
expr_stmt|;
name|waitUntilFilesShowup
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Sleep for some time, since TimeToLiveHFileCleaner is 0, the next run of
comment|// clean chore is guaranteed to clean up files in archive
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Run cleaner to make sure that files in archive directory are cleaned up
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getHFileCleaner
argument_list|()
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
comment|// Get "r2"
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r2"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|fam
argument_list|,
name|qualifier
argument_list|)
argument_list|,
name|mobVal
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"The MOB file doesn't exist"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|hdt
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitUntilFilesShowup
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|int
name|num
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|FileStatus
index|[]
name|fileList
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
decl_stmt|;
while|while
condition|(
name|fileList
operator|.
name|length
operator|!=
name|num
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|fileList
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|fileList
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|fileStatus
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This copro overwrites the default compaction policy. It always chooses two latest hfiles and    * compacts them into a new one.    */
specifier|public
specifier|static
class|class
name|CompactTwoLatestHfilesCopro
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCompactSelection
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|StoreFile
argument_list|>
name|candidates
parameter_list|,
name|CompactionLifeCycleTracker
name|tracker
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
name|candidates
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|>=
literal|2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|candidates
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|waitUntilMobCompactionFinished
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|finished
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
literal|60000
decl_stmt|;
name|CompactionState
name|state
init|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
decl_stmt|;
while|while
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|finished
condition|)
block|{
if|if
condition|(
name|state
operator|==
name|CompactionState
operator|.
name|NONE
condition|)
block|{
break|break;
block|}
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|CompactionState
operator|.
name|NONE
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets the number of cells in the given table.    * @param table to get the  scanner    * @return the number of cells    */
specifier|private
name|int
name|countMobCells
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// Do not retrieve the mob data when scanning
name|scan
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_RAW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|results
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|results
control|)
block|{
name|count
operator|+=
name|res
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
comment|/**    * Gets the number of files in the mob path.    * @param isMobFile gets number of the mob files or del files    * @param familyName the family name    * @return the number of the files    */
specifier|private
name|int
name|countFiles
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|isMobFile
parameter_list|,
name|String
name|familyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|mobDirPath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|mobDirPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|mobDirPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|isMobFile
operator|==
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|StoreFileInfo
operator|.
name|isDelFile
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|StoreFileInfo
operator|.
name|isDelFile
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|boolean
name|verifyEncryption
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|mobDirPath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|boolean
name|hasFiles
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|mobDirPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|mobDirPath
argument_list|)
decl_stmt|;
name|hasFiles
operator|=
name|files
operator|!=
literal|null
operator|&&
name|files
operator|.
name|length
operator|>
literal|0
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|hasFiles
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|files
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HStoreFile
name|sf
init|=
operator|new
name|HStoreFile
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|sf
operator|.
name|initReader
argument_list|()
expr_stmt|;
name|HFile
operator|.
name|Reader
name|reader
init|=
name|sf
operator|.
name|getReader
argument_list|()
operator|.
name|getHFileReader
argument_list|()
decl_stmt|;
name|byte
index|[]
name|encryptionKey
init|=
name|reader
operator|.
name|getTrailer
argument_list|()
operator|.
name|getEncryptionKey
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|null
operator|!=
name|encryptionKey
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|reader
operator|.
name|getFileContext
argument_list|()
operator|.
name|getEncryptionContext
argument_list|()
operator|.
name|getCipher
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|CIPHER_AES
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|hasFiles
return|;
block|}
comment|/**    * Gets the number of HFileLink in the mob path.    * @param familyName the family name    * @return the number of the HFileLink    */
specifier|private
name|int
name|countHFileLinks
parameter_list|(
name|String
name|familyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|mobDirPath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|mobDirPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|mobDirPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|count
return|;
block|}
comment|/**    * Gets the number of files.    * @param size the size of the file    * @param tableName the current table name    * @param familyName the family name    * @return the number of files large than the size    */
specifier|private
name|int
name|countLargeFiles
parameter_list|(
name|int
name|size
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|mobDirPath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|mobDirPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|mobDirPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
comment|// ignore the del files in the mob path
if|if
condition|(
operator|(
operator|!
name|StoreFileInfo
operator|.
name|isDelFile
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|file
operator|.
name|getLen
argument_list|()
operator|>
name|size
operator|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
return|return
name|count
return|;
block|}
comment|/**    * loads some data to the table.    */
specifier|private
name|void
name|loadData
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|BufferedMutator
name|table
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|int
name|fileNum
parameter_list|,
name|int
name|rowNumPerFile
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|fileNum
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileNum
operator|*
name|rowNumPerFile
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|byte
name|k0
range|:
name|KEYS
control|)
block|{
name|byte
index|[]
name|k
init|=
operator|new
name|byte
index|[]
block|{
name|k0
block|}
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|k
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|mobVal
init|=
name|makeDummyData
argument_list|(
literal|10
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|mobVal
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf2
argument_list|)
argument_list|,
name|mobVal
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|mobVal
argument_list|)
expr_stmt|;
name|table
operator|.
name|mutate
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|rowNumPerFile
operator|==
literal|0
condition|)
block|{
name|table
operator|.
name|flush
argument_list|()
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|loadData
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|BufferedMutator
name|table
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|Put
index|[]
name|puts
parameter_list|)
throws|throws
name|IOException
block|{
name|table
operator|.
name|mutate
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|puts
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|flush
argument_list|()
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadDataForPartitionPolicy
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|BufferedMutator
name|table
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
index|[]
name|pArray
init|=
operator|new
name|Put
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put0
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r0"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put0
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|tsFor20151130Monday
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue0
argument_list|)
argument_list|)
expr_stmt|;
name|pArray
index|[
name|i
index|]
operator|=
name|put0
expr_stmt|;
block|}
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
name|pArray
argument_list|)
expr_stmt|;
name|Put
name|put06
init|=
operator|new
name|Put
argument_list|(
name|mobKey06
argument_list|)
decl_stmt|;
name|put06
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|tsFor20151128Saturday
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue0
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put06
block|}
argument_list|)
expr_stmt|;
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|mobKey1
argument_list|)
decl_stmt|;
name|put1
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|tsFor20151201Tuesday
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue1
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put1
block|}
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|mobKey2
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|tsFor20151205Saturday
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue2
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put2
block|}
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|mobKey3
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|tsFor20151228Monday
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue3
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put3
block|}
argument_list|)
expr_stmt|;
name|Put
name|put4
init|=
operator|new
name|Put
argument_list|(
name|mobKey4
argument_list|)
decl_stmt|;
name|put4
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|tsFor20151231Thursday
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue4
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put4
block|}
argument_list|)
expr_stmt|;
name|Put
name|put5
init|=
operator|new
name|Put
argument_list|(
name|mobKey5
argument_list|)
decl_stmt|;
name|put5
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|tsFor20160101Friday
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue5
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put5
block|}
argument_list|)
expr_stmt|;
name|Put
name|put6
init|=
operator|new
name|Put
argument_list|(
name|mobKey6
argument_list|)
decl_stmt|;
name|put6
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|tsFor20160103Sunday
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue6
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put6
block|}
argument_list|)
expr_stmt|;
name|Put
name|put7
init|=
operator|new
name|Put
argument_list|(
name|mobKey7
argument_list|)
decl_stmt|;
name|put7
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|tsFor20150907Monday
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue7
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put7
block|}
argument_list|)
expr_stmt|;
name|Put
name|put8
init|=
operator|new
name|Put
argument_list|(
name|mobKey8
argument_list|)
decl_stmt|;
name|put8
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|,
name|tsFor20151120Sunday
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue8
argument_list|)
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|,
operator|new
name|Put
index|[]
block|{
name|put8
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * delete the row, family and cell to create the del file    */
specifier|private
name|void
name|createDelFile
parameter_list|(
name|Table
name|table
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|byte
name|k0
range|:
name|KEYS
control|)
block|{
name|byte
index|[]
name|k
init|=
operator|new
name|byte
index|[]
block|{
name|k0
block|}
decl_stmt|;
comment|// delete a family
name|byte
index|[]
name|key1
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|k
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Delete
name|delete1
init|=
operator|new
name|Delete
argument_list|(
name|key1
argument_list|)
decl_stmt|;
name|delete1
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete1
argument_list|)
expr_stmt|;
comment|// delete one row
name|byte
index|[]
name|key2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|k
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|Delete
name|delete2
init|=
operator|new
name|Delete
argument_list|(
name|key2
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete2
argument_list|)
expr_stmt|;
comment|// delete one cell
name|byte
index|[]
name|key3
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|k
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|Delete
name|delete3
init|=
operator|new
name|Delete
argument_list|(
name|key3
argument_list|)
decl_stmt|;
name|delete3
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qf
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete3
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|region
operator|.
name|waitForFlushesAndCompactions
argument_list|()
expr_stmt|;
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates the dummy data with a specific size.    * @param size the size of value    * @return the dummy data    */
specifier|private
name|byte
index|[]
name|makeDummyData
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|dummyData
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|dummyData
argument_list|)
expr_stmt|;
return|return
name|dummyData
return|;
block|}
comment|/**    * Gets the split keys    */
specifier|private
name|byte
index|[]
index|[]
name|getSplitKeys
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
name|KEYS
operator|.
name|length
operator|-
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitKeys
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|splitKeys
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[]
block|{
name|KEYS
index|[
name|i
operator|+
literal|1
index|]
block|}
expr_stmt|;
block|}
return|return
name|splitKeys
return|;
block|}
specifier|private
specifier|static
name|ExecutorService
name|createThreadPool
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|int
name|maxThreads
init|=
literal|10
decl_stmt|;
name|long
name|keepAliveTime
init|=
literal|60
decl_stmt|;
specifier|final
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
name|queue
init|=
operator|new
name|SynchronousQueue
argument_list|<>
argument_list|()
decl_stmt|;
name|ThreadPoolExecutor
name|pool
init|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|maxThreads
argument_list|,
name|keepAliveTime
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|queue
argument_list|,
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
literal|"MobFileCompactionChore"
argument_list|)
argument_list|,
operator|new
name|RejectedExecutionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|rejectedExecution
parameter_list|(
name|Runnable
name|r
parameter_list|,
name|ThreadPoolExecutor
name|executor
parameter_list|)
block|{
try|try
block|{
comment|// waiting for a thread to pick up instead of throwing exceptions.
name|queue
operator|.
name|put
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|pool
operator|.
name|allowCoreThreadTimeOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|pool
return|;
block|}
specifier|private
name|void
name|assertRefFileNameEqual
parameter_list|(
name|String
name|familyName
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do not retrieve the mob data when scanning
name|scan
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_RAW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|results
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Path
name|mobFamilyPath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|familyName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|actualFilePaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|expectFilePaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|results
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|res
operator|.
name|listCells
argument_list|()
control|)
block|{
name|byte
index|[]
name|referenceValue
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|referenceValue
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|,
name|referenceValue
operator|.
name|length
operator|-
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
decl_stmt|;
name|Path
name|targetPath
init|=
operator|new
name|Path
argument_list|(
name|mobFamilyPath
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|actualFilePaths
operator|.
name|contains
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|actualFilePaths
operator|.
name|add
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|mobFamilyPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|mobFamilyPath
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|StoreFileInfo
operator|.
name|isDelFile
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|expectFilePaths
operator|.
name|add
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|actualFilePaths
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|expectFilePaths
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectFilePaths
argument_list|,
name|actualFilePaths
argument_list|)
expr_stmt|;
block|}
comment|/**    * Resets the configuration.    */
specifier|private
name|void
name|resetConf
parameter_list|()
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_MERGEABLE_THRESHOLD
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_COMPACTION_MERGEABLE_THRESHOLD
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_BATCH_SIZE
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_COMPACTION_BATCH_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify mob partition policy compaction values.    */
specifier|private
name|void
name|verifyPolicyValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|mobKey01
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey02
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey03
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey04
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey05
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey06
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey1
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey2
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey3
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey4
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey5
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey6
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey7
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|mobKey8
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qf1
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobValue8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|commonPolicyTestLogic
parameter_list|(
specifier|final
name|String
name|tableNameAsString
parameter_list|,
specifier|final
name|MobCompactPartitionPolicy
name|pType
parameter_list|,
specifier|final
name|boolean
name|majorCompact
parameter_list|,
specifier|final
name|int
name|expectedFileNumbers
parameter_list|,
specifier|final
name|String
index|[]
name|expectedFileNames
parameter_list|,
specifier|final
name|boolean
name|setupAndLoadData
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|setupAndLoadData
condition|)
block|{
name|setUpForPolicyTest
argument_list|(
name|tableNameAsString
argument_list|,
name|pType
argument_list|)
expr_stmt|;
name|loadDataForPartitionPolicy
argument_list|(
name|admin
argument_list|,
name|bufMut
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|alterForPolicyTest
argument_list|(
name|pType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|majorCompact
condition|)
block|{
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|,
name|hcd1
operator|.
name|getName
argument_list|()
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|compact
argument_list|(
name|tableName
argument_list|,
name|hcd1
operator|.
name|getName
argument_list|()
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
expr_stmt|;
block|}
name|waitUntilMobCompactionFinished
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Run cleaner to make sure that files in archive directory are cleaned up
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getHFileCleaner
argument_list|()
operator|.
name|choreForTesting
argument_list|()
expr_stmt|;
comment|//check the number of files
name|Path
name|mobDirPath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|,
name|family1
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|fileList
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|mobDirPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fileList
operator|.
name|length
operator|==
name|expectedFileNumbers
argument_list|)
expr_stmt|;
comment|// the file names are expected
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|expectedFileNumbers
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|fileList
control|)
block|{
name|fileNames
operator|.
name|add
argument_list|(
name|MobFileName
operator|.
name|getDateFromName
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|expectedFileNames
control|)
block|{
name|index
operator|=
name|fileNames
operator|.
name|indexOf
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|index
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|fileNames
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
comment|// Check daily mob files are removed from the mobdir, and only weekly mob files are there.
comment|// Also check that there is no data loss.
name|verifyPolicyValues
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

