begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ChoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotDisabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RackManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|MasterQuotaManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * Class used to be the base of unit tests on load balancers. It gives helper  * methods to create maps of {@link ServerName} to lists of {@link HRegionInfo}  * and to check list of region plans.  *  */
end_comment

begin_class
specifier|public
class|class
name|BalancerTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BalancerTestBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|static
name|int
name|regionId
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|static
name|StochasticLoadBalancer
name|loadBalancer
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.util.ip.to.rack.determiner"
argument_list|,
name|MockMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.maxMovePercent"
argument_list|,
literal|0.75f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.regions.slop"
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.localityCost"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.minCostNeedBalance"
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|loadBalancer
operator|=
operator|new
name|StochasticLoadBalancer
argument_list|()
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
index|[]
name|largeCluster
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|56
block|}
decl_stmt|;
comment|// int[testnum][servernumber] -> numregions
specifier|protected
name|int
index|[]
index|[]
name|clusterStateMocks
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|// 1 node
operator|new
name|int
index|[]
block|{
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|}
block|,
comment|// 2 node
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|4
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|514
block|,
literal|1432
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|48
block|,
literal|53
block|}
block|,
comment|// 3 node
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|3
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|4
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|20
block|,
literal|20
block|,
literal|0
block|}
block|,
comment|// 4 node
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|2
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|7
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|8
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|7
block|}
block|,
comment|// 5 node
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|4
block|}
block|,
comment|// more nodes
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|14
block|,
literal|15
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|54
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|55
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|56
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|16
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|8
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|9
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|123
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|155
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|7
block|,
literal|12
block|,
literal|8
block|,
literal|11
block|,
literal|10
block|,
literal|9
block|,
literal|14
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|13
block|,
literal|14
block|,
literal|6
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|8
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|130
block|,
literal|14
block|,
literal|60
block|,
literal|10
block|,
literal|100
block|,
literal|10
block|,
literal|80
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|130
block|,
literal|140
block|,
literal|60
block|,
literal|100
block|,
literal|100
block|,
literal|100
block|,
literal|80
block|,
literal|100
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|}
block|,
name|largeCluster
block|,    }
decl_stmt|;
comment|/**    * Data set for testLocalityCost:    *    * [test][regions][0] = [serverIndex] -> number of regions    * [test][regions][regionIndex+1] = {server hosting region, locality percentage, datanodes}    *    * For each [test], there is a list of cluster config information grouped by [regions].    * - [0] - the first element of the [regions] list is a list of servers with the value    *         indicating the number of regions it hosts.    * - [regionIndex+1] - the remaining elements of the array are regions, where the index value    *         is 1 greater than the regionIndex.  This element holds an array that identifies:    *     [0] - the serverIndex of the server hosting this region    *     [1] - the locality percentage returned by getLocalityOfRegion(region, server) when the    *           server is hosting both region and the hdfs blocks.    *     [.] - the serverIndex of servers hosting the hdfs blocks, where a value of -1 indicates    *         a dfs server not in the list of region servers.    */
specifier|protected
name|int
index|[]
index|[]
index|[]
name|clusterRegionLocationMocks
init|=
operator|new
name|int
index|[]
index|[]
index|[]
block|{
comment|// Test 1: Basic region placement with 1 region server not hosting dfs block
comment|//     Locality Calculation:
comment|//        region[0] = 1 - 80/100 = (.2)  - server[2] hosts both the region and dfs blocks
comment|//        region[1] = 1.0                - server[0] only hosts the region, not dfs blocks
comment|//        region[2] = 1 - 70/100 = (.3)  - server[1] hosts both the region and dfs blocks
comment|//
comment|//      RESULT = 0.2 + 1.0 + 0.3 / 3.0 (3.0 is max value)
comment|//             = 1.5 / 3.0
comment|//             = 0.5
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
comment|// 3 region servers with 1 region each
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|80
block|,
literal|1
block|,
literal|2
block|,
literal|0
block|}
block|,
comment|// region[0] on server[2] w/ 80% locality
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|50
block|,
literal|1
block|,
literal|2
block|}
block|,
comment|// region[1] on server[0] w/ 50% , but no local dfs blocks
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|70
block|,
literal|2
block|,
literal|0
block|,
literal|1
block|}
block|,
comment|// region[2] on server[1] w/ 70% locality
block|}
block|,
comment|// Test 2: Sames as Test 1, but the last region has a datanode that isn't a region server
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|80
block|,
literal|1
block|,
literal|2
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|50
block|,
literal|1
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|70
block|,
operator|-
literal|1
block|,
literal|2
block|,
literal|0
block|,
literal|1
block|}
block|,
comment|// the first region location is not on a region server
block|}
block|,   }
decl_stmt|;
comment|// This mock allows us to test the LocalityCostFunction
specifier|protected
class|class
name|MockCluster
extends|extends
name|BaseLoadBalancer
operator|.
name|Cluster
block|{
specifier|protected
name|int
index|[]
index|[]
name|localityValue
init|=
literal|null
decl_stmt|;
comment|// [region][server] = percent of blocks
specifier|protected
name|MockCluster
parameter_list|(
name|int
index|[]
index|[]
name|regions
parameter_list|)
block|{
comment|// regions[0] is an array where index = serverIndex an value = number of regions
name|super
argument_list|(
name|mockClusterServers
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|localityValue
operator|=
operator|new
name|int
index|[
name|regions
operator|.
name|length
operator|-
literal|1
index|]
index|[]
expr_stmt|;
comment|// the remaining elements in the regions array contain values for:
comment|//   [0] - the serverIndex of the server hosting this region
comment|//   [1] - the locality percentage (in whole numbers) for the hosting region server
comment|//   [.] - a list of servers hosting dfs blocks for the region (-1 means its not one
comment|//         of our region servers.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|regionIndex
init|=
name|i
operator|-
literal|1
decl_stmt|;
name|int
name|serverIndex
init|=
name|regions
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|locality
init|=
name|regions
index|[
name|i
index|]
index|[
literal|1
index|]
decl_stmt|;
name|int
index|[]
name|locations
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|regions
index|[
name|i
index|]
argument_list|,
literal|2
argument_list|,
name|regions
index|[
name|i
index|]
operator|.
name|length
argument_list|)
decl_stmt|;
name|regionIndexToServerIndex
index|[
name|regionIndex
index|]
operator|=
name|serverIndex
expr_stmt|;
name|localityValue
index|[
name|regionIndex
index|]
operator|=
operator|new
name|int
index|[
name|servers
operator|.
name|length
index|]
expr_stmt|;
name|localityValue
index|[
name|regionIndex
index|]
index|[
name|serverIndex
index|]
operator|=
operator|(
name|locality
operator|>
literal|100
operator|)
condition|?
name|locality
operator|%
literal|100
else|:
name|locality
expr_stmt|;
name|regionLocations
index|[
name|regionIndex
index|]
operator|=
name|locations
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|float
name|getLocalityOfRegion
parameter_list|(
name|int
name|region
parameter_list|,
name|int
name|server
parameter_list|)
block|{
comment|// convert the locality percentage to a fraction
return|return
name|localityValue
index|[
name|region
index|]
index|[
name|server
index|]
operator|/
literal|100.0f
return|;
block|}
block|}
comment|// This class is introduced because IP to rack resolution can be lengthy.
specifier|public
specifier|static
class|class
name|MockMapping
implements|implements
name|DNSToSwitchMapping
block|{
specifier|public
name|MockMapping
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{     }
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|resolve
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|names
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
literal|"rack"
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|// do not add @Override annotations here. It mighty break compilation with earlier Hadoops
specifier|public
name|void
name|reloadCachedMappings
parameter_list|()
block|{     }
comment|// do not add @Override annotations here. It mighty break compilation with earlier Hadoops
specifier|public
name|void
name|reloadCachedMappings
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|arg0
parameter_list|)
block|{     }
block|}
comment|/**    * Invariant is that all servers have between floor(avg) and ceiling(avg)    * number of regions.    */
specifier|public
name|void
name|assertClusterAsBalanced
parameter_list|(
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers
parameter_list|)
block|{
name|int
name|numServers
init|=
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numRegions
init|=
literal|0
decl_stmt|;
name|int
name|maxRegions
init|=
literal|0
decl_stmt|;
name|int
name|minRegions
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|ServerAndLoad
name|server
range|:
name|servers
control|)
block|{
name|int
name|nr
init|=
name|server
operator|.
name|getLoad
argument_list|()
decl_stmt|;
if|if
condition|(
name|nr
operator|>
name|maxRegions
condition|)
block|{
name|maxRegions
operator|=
name|nr
expr_stmt|;
block|}
if|if
condition|(
name|nr
operator|<
name|minRegions
condition|)
block|{
name|minRegions
operator|=
name|nr
expr_stmt|;
block|}
name|numRegions
operator|+=
name|nr
expr_stmt|;
block|}
if|if
condition|(
name|maxRegions
operator|-
name|minRegions
operator|<
literal|2
condition|)
block|{
comment|// less than 2 between max and min, can't balance
return|return;
block|}
name|int
name|min
init|=
name|numRegions
operator|/
name|numServers
decl_stmt|;
name|int
name|max
init|=
name|numRegions
operator|%
name|numServers
operator|==
literal|0
condition|?
name|min
else|:
name|min
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|ServerAndLoad
name|server
range|:
name|servers
control|)
block|{
name|assertTrue
argument_list|(
name|server
operator|.
name|getLoad
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|server
operator|.
name|getLoad
argument_list|()
operator|<=
name|max
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|server
operator|.
name|getLoad
argument_list|()
operator|>=
name|min
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Checks whether region replicas are not hosted on the same host.    */
specifier|public
name|void
name|assertRegionReplicaPlacement
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|serverMap
parameter_list|,
name|RackManager
name|rackManager
parameter_list|)
block|{
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|regionsPerHost
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|regionsPerRack
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|serverMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|hostname
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getHostname
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|infos
init|=
name|regionsPerHost
operator|.
name|get
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|==
literal|null
condition|)
block|{
name|infos
operator|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|regionsPerHost
operator|.
name|put
argument_list|(
name|hostname
argument_list|,
name|infos
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HRegionInfo
name|info
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|HRegionInfo
name|primaryInfo
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|infos
operator|.
name|add
argument_list|(
name|primaryInfo
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Two or more region replicas are hosted on the same host after balance"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|rackManager
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|entry
range|:
name|serverMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|rack
init|=
name|rackManager
operator|.
name|getRack
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|infos
init|=
name|regionsPerRack
operator|.
name|get
argument_list|(
name|rack
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|==
literal|null
condition|)
block|{
name|infos
operator|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|regionsPerRack
operator|.
name|put
argument_list|(
name|rack
argument_list|,
name|infos
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HRegionInfo
name|info
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|HRegionInfo
name|primaryInfo
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|infos
operator|.
name|add
argument_list|(
name|primaryInfo
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Two or more region replicas are hosted on the same rack after balance"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|String
name|printStats
parameter_list|(
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers
parameter_list|)
block|{
name|int
name|numServers
init|=
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|totalRegions
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ServerAndLoad
name|server
range|:
name|servers
control|)
block|{
name|totalRegions
operator|+=
name|server
operator|.
name|getLoad
argument_list|()
expr_stmt|;
block|}
name|float
name|average
init|=
operator|(
name|float
operator|)
name|totalRegions
operator|/
name|numServers
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
argument_list|)
decl_stmt|;
return|return
literal|"[srvr="
operator|+
name|numServers
operator|+
literal|" rgns="
operator|+
name|totalRegions
operator|+
literal|" avg="
operator|+
name|average
operator|+
literal|" max="
operator|+
name|max
operator|+
literal|" min="
operator|+
name|min
operator|+
literal|"]"
return|;
block|}
specifier|protected
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|convertToList
parameter_list|(
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|servers
parameter_list|)
block|{
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerAndLoad
argument_list|>
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|e
range|:
name|servers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|ServerAndLoad
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|protected
name|String
name|printMock
parameter_list|(
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|balancedCluster
parameter_list|)
block|{
name|SortedSet
argument_list|<
name|ServerAndLoad
argument_list|>
name|sorted
init|=
operator|new
name|TreeSet
argument_list|<
name|ServerAndLoad
argument_list|>
argument_list|(
name|balancedCluster
argument_list|)
decl_stmt|;
name|ServerAndLoad
index|[]
name|arr
init|=
name|sorted
operator|.
name|toArray
argument_list|(
operator|new
name|ServerAndLoad
index|[
name|sorted
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|sorted
operator|.
name|size
argument_list|()
operator|*
literal|4
operator|+
literal|4
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{ "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" , "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|arr
index|[
name|i
index|]
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|arr
index|[
name|i
index|]
operator|.
name|getLoad
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|" }"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * This assumes the RegionPlan HSI instances are the same ones in the map, so    * actually no need to even pass in the map, but I think it's clearer.    *    * @param list    * @param plans    * @return    */
specifier|protected
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|reconcile
parameter_list|(
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|list
parameter_list|,
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|servers
parameter_list|)
block|{
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerAndLoad
argument_list|>
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerAndLoad
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|ServerAndLoad
argument_list|>
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerAndLoad
name|sl
range|:
name|list
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|sl
operator|.
name|getServerName
argument_list|()
argument_list|,
name|sl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|plans
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RegionPlan
name|plan
range|:
name|plans
control|)
block|{
name|ServerName
name|source
init|=
name|plan
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|updateLoad
argument_list|(
name|map
argument_list|,
name|source
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ServerName
name|destination
init|=
name|plan
operator|.
name|getDestination
argument_list|()
decl_stmt|;
name|updateLoad
argument_list|(
name|map
argument_list|,
name|destination
argument_list|,
operator|+
literal|1
argument_list|)
expr_stmt|;
name|servers
operator|.
name|get
argument_list|(
name|source
argument_list|)
operator|.
name|remove
argument_list|(
name|plan
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|servers
operator|.
name|get
argument_list|(
name|destination
argument_list|)
operator|.
name|add
argument_list|(
name|plan
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|updateLoad
parameter_list|(
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerAndLoad
argument_list|>
name|map
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|int
name|diff
parameter_list|)
block|{
name|ServerAndLoad
name|sal
init|=
name|map
operator|.
name|get
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|sal
operator|==
literal|null
condition|)
name|sal
operator|=
operator|new
name|ServerAndLoad
argument_list|(
name|sn
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sal
operator|=
operator|new
name|ServerAndLoad
argument_list|(
name|sn
argument_list|,
name|sal
operator|.
name|getLoad
argument_list|()
operator|+
name|diff
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|sn
argument_list|,
name|sal
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|mockClusterServers
parameter_list|(
name|int
index|[]
name|mockCluster
parameter_list|)
block|{
return|return
name|mockClusterServers
argument_list|(
name|mockCluster
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|protected
name|BaseLoadBalancer
operator|.
name|Cluster
name|mockCluster
parameter_list|(
name|int
index|[]
name|mockCluster
parameter_list|)
block|{
return|return
operator|new
name|BaseLoadBalancer
operator|.
name|Cluster
argument_list|(
name|mockClusterServers
argument_list|(
name|mockCluster
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|mockClusterServers
parameter_list|(
name|int
index|[]
name|mockCluster
parameter_list|,
name|int
name|numTables
parameter_list|)
block|{
name|int
name|numServers
init|=
name|mockCluster
operator|.
name|length
decl_stmt|;
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|servers
init|=
operator|new
name|TreeMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numServers
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numRegions
init|=
name|mockCluster
index|[
name|i
index|]
decl_stmt|;
name|ServerAndLoad
name|sal
init|=
name|randomServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
name|numRegions
argument_list|,
name|numTables
argument_list|)
decl_stmt|;
name|servers
operator|.
name|put
argument_list|(
name|sal
operator|.
name|getServerName
argument_list|()
argument_list|,
name|regions
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
specifier|private
name|Queue
argument_list|<
name|HRegionInfo
argument_list|>
name|regionQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|randomRegions
parameter_list|(
name|int
name|numRegions
parameter_list|)
block|{
return|return
name|randomRegions
argument_list|(
name|numRegions
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|randomRegions
parameter_list|(
name|int
name|numRegions
parameter_list|,
name|int
name|numTables
parameter_list|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|numRegions
argument_list|)
decl_stmt|;
name|byte
index|[]
name|start
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|byte
index|[]
name|end
init|=
operator|new
name|byte
index|[
literal|16
index|]
decl_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|rand
operator|.
name|nextBytes
argument_list|(
name|end
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRegions
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|regionQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|regionQueue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Bytes
operator|.
name|putInt
argument_list|(
name|start
argument_list|,
literal|0
argument_list|,
name|numRegions
operator|<<
literal|1
argument_list|)
expr_stmt|;
name|Bytes
operator|.
name|putInt
argument_list|(
name|end
argument_list|,
literal|0
argument_list|,
operator|(
name|numRegions
operator|<<
literal|1
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
operator|+
operator|(
name|numTables
operator|>
literal|0
condition|?
name|rand
operator|.
name|nextInt
argument_list|(
name|numTables
argument_list|)
else|:
name|i
operator|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
literal|false
argument_list|,
name|regionId
operator|++
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
return|return
name|regions
return|;
block|}
specifier|protected
name|void
name|returnRegions
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
block|{
name|regionQueue
operator|.
name|addAll
argument_list|(
name|regions
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Queue
argument_list|<
name|ServerName
argument_list|>
name|serverQueue
init|=
operator|new
name|LinkedList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|ServerAndLoad
name|randomServer
parameter_list|(
specifier|final
name|int
name|numRegionsPerServer
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|serverQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ServerName
name|sn
init|=
name|this
operator|.
name|serverQueue
operator|.
name|poll
argument_list|()
decl_stmt|;
return|return
operator|new
name|ServerAndLoad
argument_list|(
name|sn
argument_list|,
name|numRegionsPerServer
argument_list|)
return|;
block|}
name|String
name|host
init|=
literal|"srv"
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|60000
argument_list|)
decl_stmt|;
name|long
name|startCode
init|=
name|rand
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|startCode
argument_list|)
decl_stmt|;
return|return
operator|new
name|ServerAndLoad
argument_list|(
name|sn
argument_list|,
name|numRegionsPerServer
argument_list|)
return|;
block|}
specifier|protected
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|randomServers
parameter_list|(
name|int
name|numServers
parameter_list|,
name|int
name|numRegionsPerServer
parameter_list|)
block|{
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerAndLoad
argument_list|>
argument_list|(
name|numServers
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numServers
condition|;
name|i
operator|++
control|)
block|{
name|servers
operator|.
name|add
argument_list|(
name|randomServer
argument_list|(
name|numRegionsPerServer
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|servers
return|;
block|}
specifier|protected
name|void
name|returnServer
parameter_list|(
name|ServerName
name|server
parameter_list|)
block|{
name|serverQueue
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|returnServers
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|this
operator|.
name|serverQueue
operator|.
name|addAll
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testWithCluster
parameter_list|(
name|int
name|numNodes
parameter_list|,
name|int
name|numRegions
parameter_list|,
name|int
name|numRegionsPerServer
parameter_list|,
name|int
name|replication
parameter_list|,
name|int
name|numTables
parameter_list|,
name|boolean
name|assertFullyBalanced
parameter_list|,
name|boolean
name|assertFullyBalancedForReplicas
parameter_list|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|serverMap
init|=
name|createServerMap
argument_list|(
name|numNodes
argument_list|,
name|numRegions
argument_list|,
name|numRegionsPerServer
argument_list|,
name|replication
argument_list|,
name|numTables
argument_list|)
decl_stmt|;
name|testWithCluster
argument_list|(
name|serverMap
argument_list|,
literal|null
argument_list|,
name|assertFullyBalanced
argument_list|,
name|assertFullyBalancedForReplicas
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|testWithCluster
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|serverMap
parameter_list|,
name|RackManager
name|rackManager
parameter_list|,
name|boolean
name|assertFullyBalanced
parameter_list|,
name|boolean
name|assertFullyBalancedForReplicas
parameter_list|)
block|{
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|list
init|=
name|convertToList
argument_list|(
name|serverMap
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Cluster : "
operator|+
name|printMock
argument_list|(
name|list
argument_list|)
operator|+
literal|" "
operator|+
name|printStats
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setRackManager
argument_list|(
name|rackManager
argument_list|)
expr_stmt|;
comment|// Run the balancer.
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|serverMap
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|plans
argument_list|)
expr_stmt|;
comment|// Check to see that this actually got to a stable place.
if|if
condition|(
name|assertFullyBalanced
operator|||
name|assertFullyBalancedForReplicas
condition|)
block|{
comment|// Apply the plan to the mock cluster.
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|balancedCluster
init|=
name|reconcile
argument_list|(
name|list
argument_list|,
name|plans
argument_list|,
name|serverMap
argument_list|)
decl_stmt|;
comment|// Print out the cluster loads to make debugging easier.
name|LOG
operator|.
name|info
argument_list|(
literal|"Mock Balance : "
operator|+
name|printMock
argument_list|(
name|balancedCluster
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|assertFullyBalanced
condition|)
block|{
name|assertClusterAsBalanced
argument_list|(
name|balancedCluster
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|secondPlans
init|=
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|serverMap
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|secondPlans
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assertFullyBalancedForReplicas
condition|)
block|{
name|assertRegionReplicaPlacement
argument_list|(
name|serverMap
argument_list|,
name|rackManager
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|createServerMap
parameter_list|(
name|int
name|numNodes
parameter_list|,
name|int
name|numRegions
parameter_list|,
name|int
name|numRegionsPerServer
parameter_list|,
name|int
name|replication
parameter_list|,
name|int
name|numTables
parameter_list|)
block|{
comment|//construct a cluster of numNodes, having  a total of numRegions. Each RS will hold
comment|//numRegionsPerServer many regions except for the last one, which will host all the
comment|//remaining regions
name|int
index|[]
name|cluster
init|=
operator|new
name|int
index|[
name|numNodes
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numNodes
condition|;
name|i
operator|++
control|)
block|{
name|cluster
index|[
name|i
index|]
operator|=
name|numRegionsPerServer
expr_stmt|;
block|}
name|cluster
index|[
name|cluster
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|numRegions
operator|-
operator|(
operator|(
name|cluster
operator|.
name|length
operator|-
literal|1
operator|)
operator|*
name|numRegionsPerServer
operator|)
expr_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
name|mockClusterServers
argument_list|(
name|cluster
argument_list|,
name|numTables
argument_list|)
decl_stmt|;
if|if
condition|(
name|replication
operator|>
literal|0
condition|)
block|{
comment|// replicate the regions to the same servers
for|for
control|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
range|:
name|clusterState
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|length
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|replication
condition|;
name|r
operator|++
control|)
block|{
name|regions
operator|.
name|add
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|clusterState
return|;
block|}
block|}
end_class

end_unit

