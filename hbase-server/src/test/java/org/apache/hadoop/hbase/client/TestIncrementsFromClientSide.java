begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MultiRowMutationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Run Increment tests that use the HBase clients; {@link HTable}.  *  * Test is parameterized to run the slow and fast increment code paths. If fast, in the @before, we  * do a rolling restart of the single regionserver so that it can pick up the go fast configuration.  * Doing it this way should be faster than starting/stopping a cluster per test.  *  * Test takes a long time because spin up a cluster between each run -- ugh.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestIncrementsFromClientSide
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestIncrementsFromClientSide
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
comment|// This test depends on there being only one slave running at at a time. See the @Before
comment|// method where we do rolling restart.
specifier|protected
specifier|static
name|int
name|SLAVES
init|=
literal|1
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|MultiRowMutationEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.table.sanity.checks"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// enable for below tests
comment|// We need more than one region server in this test
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test increment result when there are duplicate rpc request.    */
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateIncrement
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kvs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|put
argument_list|(
name|HConnectionTestingUtility
operator|.
name|SleepAtFirstRpcCall
operator|.
name|SLEEP_TIME_CONF_KEY
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|HConnectionTestingUtility
operator|.
name|SleepAtFirstRpcCall
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|ROW
block|}
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
literal|50
argument_list|)
expr_stmt|;
comment|// Client will retry beacuse rpc timeout is small than the sleep time of first rpc call
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTableBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|HBaseTestingUtility
operator|.
name|fam1
argument_list|,
name|QUALIFIER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|cells
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cells
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|cells
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|HBaseTestingUtility
operator|.
name|fam1
argument_list|,
name|QUALIFIER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Verify expected result
name|Result
name|readResult
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|cells
operator|=
name|readResult
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cells
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|cells
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|HBaseTestingUtility
operator|.
name|fam1
argument_list|,
name|QUALIFIER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementWithDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|filterStringSoTableNameSafe
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|COLUMN
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementingInvalidValue
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|filterStringSoTableNameSafe
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|COLUMN
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// write an integer here (not a Long)
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
try|try
block|{
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown DoNotRetryIOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|iox
parameter_list|)
block|{
comment|// success
block|}
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
literal|5
argument_list|)
expr_stmt|;
try|try
block|{
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown DoNotRetryIOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|iox
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchIncrementsWithReturnResultFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testBatchIncrementsWithReturnResultFalse"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Increment
name|inc1
init|=
operator|new
name|Increment
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
decl_stmt|;
name|inc1
operator|.
name|setReturnResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|inc1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Increment
name|inc2
init|=
operator|new
name|Increment
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
decl_stmt|;
name|inc2
operator|.
name|setReturnResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|inc2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Increment
argument_list|>
name|incs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|incs
operator|.
name|add
argument_list|(
name|inc1
argument_list|)
expr_stmt|;
name|incs
operator|.
name|add
argument_list|(
name|inc2
argument_list|)
expr_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
literal|2
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|incs
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|r
range|:
name|results
control|)
block|{
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|r
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementInvalidArguments
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|filterStringSoTableNameSafe
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|COLUMN
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// try null row
name|ht
operator|.
name|incrementColumnValue
argument_list|(
literal|null
argument_list|,
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iox
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
comment|// try null family
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
literal|null
argument_list|,
name|COLUMN
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown IOException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|iox
parameter_list|)
block|{
comment|// success
block|}
comment|// try null row
try|try
block|{
name|Increment
name|incNoRow
init|=
operator|new
name|Increment
argument_list|(
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|incNoRow
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iax
parameter_list|)
block|{
comment|// success
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// success
block|}
comment|// try null family
try|try
block|{
name|Increment
name|incNoFamily
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|incNoFamily
operator|.
name|addColumn
argument_list|(
literal|null
argument_list|,
name|COLUMN
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown IllegalArgumentException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iax
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementOutOfOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|filterStringSoTableNameSafe
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
block|}
decl_stmt|;
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify expected results
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|r
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Now try multiple columns again
name|inc
operator|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify
name|r
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|r
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementOnSameColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|filterStringSoTableNameSafe
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLENAME
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
block|}
decl_stmt|;
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify expected results
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|r
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Now try multiple columns again
name|inc
operator|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify
name|r
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|r
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementIncrZeroAtFirst
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|filterStringSoTableNameSafe
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|col3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3"
argument_list|)
decl_stmt|;
comment|// Now increment zero at first time incr
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify expected results
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|r
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Now try multiple columns by different amounts
name|inc
operator|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|r
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|r
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|col2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|col3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrement
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|filterStringSoTableNameSafe
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
block|}
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
block|}
decl_stmt|;
comment|// Do some simple single-column increments
comment|// First with old API
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ht
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Now increment things incremented with old and do some new
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify expected results
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|r
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertIncrementKey
argument_list|(
name|kvs
index|[
literal|4
index|]
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Now try multiple columns by different amounts
name|inc
operator|=
operator|new
name|Increment
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|r
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|r
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|QUALIFIERS
operator|.
name|length
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertIncrementKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Re-increment them
name|inc
operator|=
operator|new
name|Increment
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// Verify
name|r
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|r
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|QUALIFIERS
operator|.
name|length
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertIncrementKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that an Increment of an amount of zero, returns current count; i.e. same as for above
comment|// test, that is: 2 * (i + 1).
name|inc
operator|=
operator|new
name|Increment
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|inc
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|r
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|r
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|QUALIFIERS
operator|.
name|length
argument_list|,
name|kvs
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|QUALIFIERS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertIncrementKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
literal|2
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementWithCustomTimestamp
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|long
name|timestamp
init|=
literal|999
decl_stmt|;
name|Increment
name|increment
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|increment
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|createCell
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|timestamp
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|100L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|increment
argument_list|(
name|increment
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|timestamp
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|timestamp
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|increment
argument_list|(
name|increment
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|timestamp
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|timestamp
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Call over to the adjacent class's method of same name.    */
specifier|static
name|void
name|assertIncrementKey
parameter_list|(
name|Cell
name|key
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|TestFromClientSide
operator|.
name|assertIncrementKey
argument_list|(
name|key
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|filterStringSoTableNameSafe
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|.
name|replaceAll
argument_list|(
literal|"\\[fast\\=(.*)\\]"
argument_list|,
literal|".FAST.is.$1"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

