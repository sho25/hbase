begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClientScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnPrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnRangeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyValueMatchingQualifiersFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RandomRowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * These tests are focused on testing how partial results appear to a client. Partial results are  * {@link Result}s that contain only a portion of a row's complete list of cells. Partial results  * are formed when the server breaches its maximum result size when trying to service a client's RPC  * request. It is the responsibility of the scanner on the client side to recognize when partial  * results have been returned and to take action to form the complete results.  *<p>  * Unless the flag {@link Scan#setAllowPartialResults(boolean)} has been set to true, the caller of  * {@link ResultScanner#next()} should never see partial results.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestPartialResultsFromClientSide
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestPartialResultsFromClientSide
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestPartialResultsFromClientSide
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|MINICLUSTER_SIZE
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
name|Table
name|TABLE
init|=
literal|null
decl_stmt|;
comment|/**    * Table configuration    */
specifier|private
specifier|static
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testTable"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_ROWS
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|ROWS
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|ROW
argument_list|,
name|NUM_ROWS
argument_list|)
decl_stmt|;
comment|// Should keep this value below 10 to keep generation of expected kv's simple. If above 10 then
comment|// table/row/cf1/... will be followed by table/row/cf10/... instead of table/row/cf2/... which
comment|// breaks the simple generation of expected kv's
specifier|private
specifier|static
name|int
name|NUM_FAMILIES
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
name|NUM_FAMILIES
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_QUALIFIERS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|QUALIFIER
argument_list|,
name|NUM_QUALIFIERS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|VALUE_SIZE
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|createMaxByteArray
argument_list|(
name|VALUE_SIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_COLS
init|=
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
decl_stmt|;
comment|// Approximation of how large the heap size of cells in our table. Should be accessed through
comment|// getCellHeapSize().
specifier|private
specifier|static
name|long
name|CELL_HEAP_SIZE
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|static
name|long
name|timeout
init|=
literal|10000
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|MINICLUSTER_SIZE
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TABLE
operator|=
name|createTestTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Table
name|createTestTable
parameter_list|(
name|TableName
name|name
parameter_list|,
name|byte
index|[]
index|[]
name|rows
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|,
name|byte
index|[]
name|cellValue
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|families
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|createPuts
argument_list|(
name|rows
argument_list|,
name|families
argument_list|,
name|qualifiers
argument_list|,
name|cellValue
argument_list|)
decl_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
return|return
name|ht
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Ensure that the expected key values appear in a result returned from a scanner that is    * combining partial results into complete results    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testExpectedValuesOfPartialResults
parameter_list|()
throws|throws
name|Exception
block|{
name|testExpectedValuesOfPartialResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testExpectedValuesOfPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExpectedValuesOfPartialResults
parameter_list|(
name|boolean
name|reversed
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|partialScan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|partialScan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|// Max result size of 1 ensures that each RPC request will return a single cell. The scanner
comment|// will need to reconstruct the results into a complete result before returning to the caller
name|partialScan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|partialScan
operator|.
name|setReversed
argument_list|(
name|reversed
argument_list|)
expr_stmt|;
name|ResultScanner
name|partialScanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|partialScan
argument_list|)
decl_stmt|;
specifier|final
name|int
name|startRow
init|=
name|reversed
condition|?
name|ROWS
operator|.
name|length
operator|-
literal|1
else|:
literal|0
decl_stmt|;
specifier|final
name|int
name|endRow
init|=
name|reversed
condition|?
operator|-
literal|1
else|:
name|ROWS
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|loopDelta
init|=
name|reversed
condition|?
operator|-
literal|1
else|:
literal|1
decl_stmt|;
name|String
name|message
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|startRow
init|;
name|row
operator|!=
name|endRow
condition|;
name|row
operator|=
name|row
operator|+
name|loopDelta
control|)
block|{
name|message
operator|=
literal|"Ensuring the expected keyValues are present for row "
operator|+
name|row
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|expectedKeyValues
init|=
name|createKeyValuesForRow
argument_list|(
name|ROWS
index|[
name|row
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|partialScanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|verifyResult
argument_list|(
name|result
argument_list|,
name|expectedKeyValues
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
name|partialScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Ensure that we only see Results marked as partial when the allowPartial flag is set    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testAllowPartialResults
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|==
name|NUM_COLS
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Ensure that the results returned from a scanner that retrieves all results in a single RPC call    * matches the results that are returned from a scanner that must incrementally combine partial    * results into complete results. A variety of scan configurations can be tested    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testEquivalenceOfScanResults
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|oneShotScan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|oneShotScan
operator|.
name|setMaxResultSize
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Scan
name|partialScan
init|=
operator|new
name|Scan
argument_list|(
name|oneShotScan
argument_list|)
decl_stmt|;
name|partialScan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|testEquivalenceOfScanResults
argument_list|(
name|TABLE
argument_list|,
name|oneShotScan
argument_list|,
name|partialScan
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEquivalenceOfScanResults
parameter_list|(
name|Table
name|table
parameter_list|,
name|Scan
name|scan1
parameter_list|,
name|Scan
name|scan2
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultScanner
name|scanner1
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan1
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner2
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
decl_stmt|;
name|Result
name|r1
init|=
literal|null
decl_stmt|;
name|Result
name|r2
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|r1
operator|=
name|scanner1
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|r2
operator|=
name|scanner2
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|compareResults
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
literal|"Comparing result #"
operator|+
name|count
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|r2
operator|=
name|scanner2
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"r2: "
operator|+
name|r2
operator|+
literal|" Should be null"
argument_list|,
name|r2
operator|==
literal|null
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanner2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Order of cells in partial results matches the ordering of cells from complete results    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testOrderingOfCellsInPartialResults
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|1
init|;
name|col
operator|<=
name|NUM_COLS
condition|;
name|col
operator|++
control|)
block|{
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|getResultSizeForNumberOfCells
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
name|testOrderingOfCellsInPartialResults
argument_list|(
name|scan
argument_list|)
expr_stmt|;
comment|// Test again with a reversed scanner
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testOrderingOfCellsInPartialResults
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testOrderingOfCellsInPartialResults
parameter_list|(
specifier|final
name|Scan
name|basePartialScan
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Scan that retrieves results in pieces (partials). By setting allowPartialResults to be true
comment|// the results will NOT be reconstructed and instead the caller will see the partial results
comment|// returned by the server
name|Scan
name|partialScan
init|=
operator|new
name|Scan
argument_list|(
name|basePartialScan
argument_list|)
decl_stmt|;
name|partialScan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|partialScanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|partialScan
argument_list|)
decl_stmt|;
comment|// Scan that retrieves all table results in single RPC request
name|Scan
name|oneShotScan
init|=
operator|new
name|Scan
argument_list|(
name|basePartialScan
argument_list|)
decl_stmt|;
name|oneShotScan
operator|.
name|setMaxResultSize
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|oneShotScan
operator|.
name|setCaching
argument_list|(
name|ROWS
operator|.
name|length
argument_list|)
expr_stmt|;
name|ResultScanner
name|oneShotScanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|oneShotScan
argument_list|)
decl_stmt|;
name|Result
name|oneShotResult
init|=
name|oneShotScanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|Result
name|partialResult
init|=
literal|null
decl_stmt|;
name|int
name|iterationCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|oneShotResult
operator|!=
literal|null
operator|&&
name|oneShotResult
operator|.
name|rawCells
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|aggregatePartialCells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
do|do
block|{
name|partialResult
operator|=
name|partialScanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Partial Result is null. iteration: "
operator|+
name|iterationCount
argument_list|,
name|partialResult
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Partial cells are null. iteration: "
operator|+
name|iterationCount
argument_list|,
name|partialResult
operator|.
name|rawCells
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|partialResult
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|aggregatePartialCells
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|partialResult
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
condition|)
do|;
name|assertTrue
argument_list|(
literal|"Number of cells differs. iteration: "
operator|+
name|iterationCount
argument_list|,
name|oneShotResult
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|==
name|aggregatePartialCells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Cell
index|[]
name|oneShotCells
init|=
name|oneShotResult
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|cell
init|=
literal|0
init|;
name|cell
operator|<
name|oneShotCells
operator|.
name|length
condition|;
name|cell
operator|++
control|)
block|{
name|Cell
name|oneShotCell
init|=
name|oneShotCells
index|[
name|cell
index|]
decl_stmt|;
name|Cell
name|partialCell
init|=
name|aggregatePartialCells
operator|.
name|get
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"One shot cell was null"
argument_list|,
name|oneShotCell
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Partial cell was null"
argument_list|,
name|partialCell
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cell differs. oneShotCell:"
operator|+
name|oneShotCell
operator|+
literal|" partialCell:"
operator|+
name|partialCell
argument_list|,
name|oneShotCell
operator|.
name|equals
argument_list|(
name|partialCell
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|oneShotResult
operator|=
name|oneShotScanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|iterationCount
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|partialScanner
operator|.
name|next
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|partialScanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|oneShotScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Setting the max result size allows us to control how many cells we expect to see on each call    * to next on the scanner. Test a variety of different sizes for correctness    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testExpectedNumberOfCellsPerPartialResult
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|testExpectedNumberOfCellsPerPartialResult
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testExpectedNumberOfCellsPerPartialResult
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testExpectedNumberOfCellsPerPartialResult
parameter_list|(
name|Scan
name|baseScan
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|expectedCells
init|=
literal|1
init|;
name|expectedCells
operator|<=
name|NUM_COLS
condition|;
name|expectedCells
operator|++
control|)
block|{
name|testExpectedNumberOfCellsPerPartialResult
argument_list|(
name|baseScan
argument_list|,
name|expectedCells
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testExpectedNumberOfCellsPerPartialResult
parameter_list|(
name|Scan
name|baseScan
parameter_list|,
name|int
name|expectedNumberOfCells
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"groupSize:"
operator|+
name|expectedNumberOfCells
argument_list|)
expr_stmt|;
comment|// Use the cellHeapSize to set maxResultSize such that we know how many cells to expect back
comment|// from the call. The returned results should NOT exceed expectedNumberOfCells but may be less
comment|// than it in cases where expectedNumberOfCells is not an exact multiple of the number of
comment|// columns in the table.
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|baseScan
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|getResultSizeForNumberOfCells
argument_list|(
name|expectedNumberOfCells
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|prevRow
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Cases when cell count won't equal expectedNumberOfCells:
comment|// 1. Returned result is the final result needed to form the complete result for that row
comment|// 2. It is the first result we have seen for that row and thus may have been fetched as
comment|// the last group of cells that fit inside the maxResultSize
name|assertTrue
argument_list|(
literal|"Result's cell count differed from expected number. result: "
operator|+
name|result
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|==
name|expectedNumberOfCells
operator|||
operator|!
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
operator|||
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|prevRow
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|prevRow
operator|=
name|result
operator|.
name|getRow
argument_list|()
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return The approximate heap size of a cell in the test table. All cells should have    *         approximately the same heap size, so the value is cached to avoid repeating the    *         calculation    * @throws Exception    */
specifier|private
name|long
name|getCellHeapSize
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|CELL_HEAP_SIZE
operator|==
operator|-
literal|1
condition|)
block|{
comment|// Do a partial scan that will return a single result with a single cell
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// Estimate the cell heap size. One difference is that on server side, the KV Heap size is
comment|// estimated differently in case the cell is backed up by MSLAB byte[] (no overhead for
comment|// backing array). Thus below calculation is a bit brittle.
name|CELL_HEAP_SIZE
operator|=
name|PrivateCellUtil
operator|.
name|estimatedHeapSizeOf
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
operator|-
operator|(
name|ClassSize
operator|.
name|ARRAY
operator|+
literal|3
operator|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Cell heap size: "
operator|+
name|CELL_HEAP_SIZE
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|CELL_HEAP_SIZE
return|;
block|}
comment|/**    * @param numberOfCells    * @return the result size that should be used in {@link Scan#setMaxResultSize(long)} if you want    *         the server to return exactly numberOfCells cells    * @throws Exception    */
specifier|private
name|long
name|getResultSizeForNumberOfCells
parameter_list|(
name|int
name|numberOfCells
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getCellHeapSize
argument_list|()
operator|*
name|numberOfCells
return|;
block|}
comment|/**    * Test various combinations of batching and partial results for correctness    */
annotation|@
name|Test
specifier|public
name|void
name|testPartialResultsAndBatch
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|batch
init|=
literal|1
init|;
name|batch
operator|<=
name|NUM_COLS
operator|/
literal|4
condition|;
name|batch
operator|++
control|)
block|{
for|for
control|(
name|int
name|cellsPerPartial
init|=
literal|1
init|;
name|cellsPerPartial
operator|<=
name|NUM_COLS
operator|/
literal|4
condition|;
name|cellsPerPartial
operator|++
control|)
block|{
name|testPartialResultsAndBatch
argument_list|(
name|batch
argument_list|,
name|cellsPerPartial
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testPartialResultsAndBatch
parameter_list|(
specifier|final
name|int
name|batch
parameter_list|,
specifier|final
name|int
name|cellsPerPartialResult
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"batch: "
operator|+
name|batch
operator|+
literal|" cellsPerPartialResult: "
operator|+
name|cellsPerPartialResult
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|getResultSizeForNumberOfCells
argument_list|(
name|cellsPerPartialResult
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setBatch
argument_list|(
name|batch
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|repCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
condition|)
block|{
specifier|final
name|String
name|error
init|=
literal|"Cells:"
operator|+
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|+
literal|" Batch size:"
operator|+
name|batch
operator|+
literal|" cellsPerPartialResult:"
operator|+
name|cellsPerPartialResult
operator|+
literal|" rep:"
operator|+
name|repCount
decl_stmt|;
name|assertTrue
argument_list|(
name|error
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|==
name|batch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
operator|<=
name|batch
argument_list|)
expr_stmt|;
block|}
name|repCount
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test the method {@link Result#createCompleteResult(Iterable)}    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testPartialResultsReassembly
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|testPartialResultsReassembly
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testPartialResultsReassembly
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPartialResultsReassembly
parameter_list|(
name|Scan
name|scanBase
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|partialScan
init|=
operator|new
name|Scan
argument_list|(
name|scanBase
argument_list|)
decl_stmt|;
name|partialScan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|partialScan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|partialScanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|partialScan
argument_list|)
decl_stmt|;
name|Scan
name|oneShotScan
init|=
operator|new
name|Scan
argument_list|(
name|scanBase
argument_list|)
decl_stmt|;
name|oneShotScan
operator|.
name|setMaxResultSize
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ResultScanner
name|oneShotScanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|oneShotScan
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Result
argument_list|>
name|partials
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|partialResult
init|=
literal|null
decl_stmt|;
name|Result
name|completeResult
init|=
literal|null
decl_stmt|;
name|Result
name|oneShotResult
init|=
literal|null
decl_stmt|;
name|partials
operator|.
name|clear
argument_list|()
expr_stmt|;
do|do
block|{
name|partialResult
operator|=
name|partialScanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|partials
operator|.
name|add
argument_list|(
name|partialResult
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|partialResult
operator|!=
literal|null
operator|&&
name|partialResult
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
condition|)
do|;
name|completeResult
operator|=
name|Result
operator|.
name|createCompleteResult
argument_list|(
name|partials
argument_list|)
expr_stmt|;
name|oneShotResult
operator|=
name|oneShotScanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|compareResults
argument_list|(
name|completeResult
argument_list|,
name|oneShotResult
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|oneShotScanner
operator|.
name|next
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|partialScanner
operator|.
name|next
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|oneShotScanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|partialScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * When reconstructing the complete result from its partials we ensure that the row of each    * partial result is the same. If one of the rows differs, an exception is thrown.    */
annotation|@
name|Test
specifier|public
name|void
name|testExceptionThrownOnMismatchedPartialResults
parameter_list|()
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|NUM_ROWS
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Result
argument_list|>
name|partials
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|r1
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|partials
operator|.
name|add
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|Result
name|r2
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|partials
operator|.
name|add
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r1
operator|.
name|getRow
argument_list|()
argument_list|,
name|r2
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Result
operator|.
name|createCompleteResult
argument_list|(
name|partials
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"r1 and r2 are from different rows. It should not be possible to combine them into"
operator|+
literal|" a single result"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * When a scan has a filter where {@link org.apache.hadoop.hbase.filter.Filter#hasFilterRow()} is    * true, the scanner should not return partial results. The scanner cannot return partial results    * because the entire row needs to be read for the include/exclude decision to be made    */
annotation|@
name|Test
specifier|public
name|void
name|testNoPartialResultsWhenRowFilterPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// If a filter hasFilter() is true then partial results should not be returned else filter
comment|// application server side would break.
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|RandomRowFilter
argument_list|(
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Examine the interaction between the maxResultSize and caching. If the caching limit is reached    * before the maxResultSize limit, we should not see partial results. On the other hand, if the    * maxResultSize limit is reached before the caching limit, it is likely that partial results will    * be seen.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testPartialResultsAndCaching
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|caching
init|=
literal|1
init|;
name|caching
operator|<=
name|NUM_ROWS
condition|;
name|caching
operator|++
control|)
block|{
for|for
control|(
name|int
name|maxResultRows
init|=
literal|0
init|;
name|maxResultRows
operator|<=
name|NUM_ROWS
condition|;
name|maxResultRows
operator|++
control|)
block|{
name|testPartialResultsAndCaching
argument_list|(
name|maxResultRows
argument_list|,
name|caching
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param resultSizeRowLimit The row limit that will be enforced through maxResultSize    * @param cachingRowLimit The row limit that will be enforced through caching    * @throws Exception    */
specifier|public
name|void
name|testPartialResultsAndCaching
parameter_list|(
name|int
name|resultSizeRowLimit
parameter_list|,
name|int
name|cachingRowLimit
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// The number of cells specified in the call to getResultSizeForNumberOfCells is offset to
comment|// ensure that the result size we specify is not an exact multiple of the number of cells
comment|// in a row. This ensures that partial results will be returned when the result size limit
comment|// is reached before the caching limit.
name|int
name|cellOffset
init|=
name|NUM_COLS
operator|/
literal|3
decl_stmt|;
name|long
name|maxResultSize
init|=
name|getResultSizeForNumberOfCells
argument_list|(
name|resultSizeRowLimit
operator|*
name|NUM_COLS
operator|+
name|cellOffset
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|maxResultSize
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
name|cachingRowLimit
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|TABLE
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|ClientScanner
name|clientScanner
init|=
operator|(
name|ClientScanner
operator|)
name|scanner
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
comment|// Approximate the number of rows we expect will fit into the specified max rsult size. If this
comment|// approximation is less than caching, then we expect that the max result size limit will be
comment|// hit before the caching limit and thus partial results may be seen
name|boolean
name|expectToSeePartialResults
init|=
name|resultSizeRowLimit
operator|<
name|cachingRowLimit
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|clientScanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
operator|||
name|expectToSeePartialResults
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Make puts to put the input value into each combination of row, family, and qualifier    * @param rows    * @param families    * @param qualifiers    * @param value    * @return    * @throws IOException    */
specifier|static
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|createPuts
parameter_list|(
name|byte
index|[]
index|[]
name|rows
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
decl_stmt|;
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rows
operator|.
name|length
condition|;
name|row
operator|++
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|rows
index|[
name|row
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|fam
init|=
literal|0
init|;
name|fam
operator|<
name|families
operator|.
name|length
condition|;
name|fam
operator|++
control|)
block|{
for|for
control|(
name|int
name|qual
init|=
literal|0
init|;
name|qual
operator|<
name|qualifiers
operator|.
name|length
condition|;
name|qual
operator|++
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|rows
index|[
name|row
index|]
argument_list|,
name|families
index|[
name|fam
index|]
argument_list|,
name|qualifiers
index|[
name|qual
index|]
argument_list|,
name|qual
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
return|return
name|puts
return|;
block|}
comment|/**    * Make key values to represent each possible combination of family and qualifier in the specified    * row.    * @param row    * @param families    * @param qualifiers    * @param value    * @return    */
specifier|static
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|createKeyValuesForRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|outList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|fam
init|=
literal|0
init|;
name|fam
operator|<
name|families
operator|.
name|length
condition|;
name|fam
operator|++
control|)
block|{
for|for
control|(
name|int
name|qual
init|=
literal|0
init|;
name|qual
operator|<
name|qualifiers
operator|.
name|length
condition|;
name|qual
operator|++
control|)
block|{
name|outList
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|families
index|[
name|fam
index|]
argument_list|,
name|qualifiers
index|[
name|qual
index|]
argument_list|,
name|qual
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|outList
return|;
block|}
comment|/**    * Verifies that result contains all the key values within expKvList. Fails the test otherwise    * @param result    * @param expKvList    * @param msg    */
specifier|static
name|void
name|verifyResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|expKvList
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected count: "
operator|+
name|expKvList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Actual count: "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expKvList
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
if|if
condition|(
name|i
operator|>=
name|expKvList
operator|.
name|size
argument_list|()
condition|)
block|{
break|break;
comment|// we will check the size later
block|}
name|Cell
name|kvExp
init|=
name|expKvList
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Not equal. get kv: "
operator|+
name|kv
operator|.
name|toString
argument_list|()
operator|+
literal|" exp kv: "
operator|+
name|kvExp
operator|.
name|toString
argument_list|()
argument_list|,
name|kvExp
operator|.
name|equals
argument_list|(
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expKvList
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compares two results and fails the test if the results are different    * @param r1    * @param r2    * @param message    */
specifier|static
name|void
name|compareResults
parameter_list|(
name|Result
name|r1
parameter_list|,
name|Result
name|r2
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
name|LOG
operator|.
name|info
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"r1: "
operator|+
name|r1
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"r2: "
operator|+
name|r2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|failureMessage
init|=
literal|"Results r1:"
operator|+
name|r1
operator|+
literal|" \nr2:"
operator|+
name|r2
operator|+
literal|" are not equivalent"
decl_stmt|;
if|if
condition|(
name|r1
operator|==
literal|null
operator|&&
name|r2
operator|==
literal|null
condition|)
name|fail
argument_list|(
name|failureMessage
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|r1
operator|==
literal|null
operator|||
name|r2
operator|==
literal|null
condition|)
name|fail
argument_list|(
name|failureMessage
argument_list|)
expr_stmt|;
try|try
block|{
name|Result
operator|.
name|compareResults
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|failureMessage
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadPointAndPartialResults
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numRows
init|=
literal|5
decl_stmt|;
name|int
name|numFamilies
init|=
literal|5
decl_stmt|;
name|int
name|numQualifiers
init|=
literal|5
decl_stmt|;
name|byte
index|[]
index|[]
name|rows
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
argument_list|,
name|numRows
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
argument_list|,
name|numFamilies
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|qualifiers
init|=
name|HTestConst
operator|.
name|makeNAscii
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
argument_list|,
name|numQualifiers
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|createMaxByteArray
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Table
name|tmpTable
init|=
name|createTestTable
argument_list|(
name|tableName
argument_list|,
name|rows
argument_list|,
name|families
argument_list|,
name|qualifiers
argument_list|,
name|value
argument_list|)
decl_stmt|;
comment|// Open scanner before deletes
name|ResultScanner
name|scanner
init|=
name|tmpTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
comment|// now the openScanner will also fetch data and will be executed lazily, i.e, only openScanner
comment|// when you call next, so here we need to make a next call to open scanner. The maxResultSize
comment|// limit can make sure that we will not fetch all the data at once, so the test sill works.
name|int
name|scannerCount
init|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|rawCells
argument_list|()
operator|.
name|length
decl_stmt|;
name|Delete
name|delete1
init|=
operator|new
name|Delete
argument_list|(
name|rows
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|delete1
operator|.
name|addColumn
argument_list|(
name|families
index|[
literal|0
index|]
argument_list|,
name|qualifiers
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tmpTable
operator|.
name|delete
argument_list|(
name|delete1
argument_list|)
expr_stmt|;
name|Delete
name|delete2
init|=
operator|new
name|Delete
argument_list|(
name|rows
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|delete2
operator|.
name|addColumn
argument_list|(
name|families
index|[
literal|1
index|]
argument_list|,
name|qualifiers
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tmpTable
operator|.
name|delete
argument_list|(
name|delete2
argument_list|)
expr_stmt|;
comment|// Should see all cells because scanner was opened prior to deletes
name|scannerCount
operator|+=
name|countCellsFromScanner
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|int
name|expectedCount
init|=
name|numRows
operator|*
name|numFamilies
operator|*
name|numQualifiers
decl_stmt|;
name|assertTrue
argument_list|(
literal|"scannerCount: "
operator|+
name|scannerCount
operator|+
literal|" expectedCount: "
operator|+
name|expectedCount
argument_list|,
name|scannerCount
operator|==
name|expectedCount
argument_list|)
expr_stmt|;
comment|// Minus 2 for the two cells that were deleted
name|scanner
operator|=
name|tmpTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scannerCount
operator|=
name|countCellsFromScanner
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|expectedCount
operator|=
name|numRows
operator|*
name|numFamilies
operator|*
name|numQualifiers
operator|-
literal|2
expr_stmt|;
name|assertTrue
argument_list|(
literal|"scannerCount: "
operator|+
name|scannerCount
operator|+
literal|" expectedCount: "
operator|+
name|expectedCount
argument_list|,
name|scannerCount
operator|==
name|expectedCount
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|tmpTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scannerCount
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|rawCells
argument_list|()
operator|.
name|length
expr_stmt|;
comment|// Put in 2 new rows. The timestamps differ from the deleted rows
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|rows
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|put1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rows
index|[
literal|0
index|]
argument_list|,
name|families
index|[
literal|0
index|]
argument_list|,
name|qualifiers
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|tmpTable
operator|.
name|put
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|rows
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|put2
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rows
index|[
literal|1
index|]
argument_list|,
name|families
index|[
literal|1
index|]
argument_list|,
name|qualifiers
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|tmpTable
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
comment|// Scanner opened prior to puts. Cell count shouldn't have changed
name|scannerCount
operator|+=
name|countCellsFromScanner
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|expectedCount
operator|=
name|numRows
operator|*
name|numFamilies
operator|*
name|numQualifiers
operator|-
literal|2
expr_stmt|;
name|assertTrue
argument_list|(
literal|"scannerCount: "
operator|+
name|scannerCount
operator|+
literal|" expectedCount: "
operator|+
name|expectedCount
argument_list|,
name|scannerCount
operator|==
name|expectedCount
argument_list|)
expr_stmt|;
comment|// Now the scanner should see the cells that were added by puts
name|scanner
operator|=
name|tmpTable
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|scannerCount
operator|=
name|countCellsFromScanner
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|expectedCount
operator|=
name|numRows
operator|*
name|numFamilies
operator|*
name|numQualifiers
expr_stmt|;
name|assertTrue
argument_list|(
literal|"scannerCount: "
operator|+
name|scannerCount
operator|+
literal|" expectedCount: "
operator|+
name|expectedCount
argument_list|,
name|scannerCount
operator|==
name|expectedCount
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Exhausts the scanner by calling next repetitively. Once completely exhausted, close scanner and    * return total cell count    * @param scanner    * @return    * @throws Exception    */
specifier|private
name|int
name|countCellsFromScanner
parameter_list|(
name|ResultScanner
name|scanner
parameter_list|)
throws|throws
name|Exception
block|{
name|Result
name|result
init|=
literal|null
decl_stmt|;
name|int
name|numCells
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|numCells
operator|+=
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|numCells
return|;
block|}
comment|/**    * Test partial Result re-assembly in the presence of different filters. The Results from the    * partial scanner should match the Results returned from a scanner that receives all of the    * results in one RPC to the server. The partial scanner is tested with a variety of different    * result sizes (all of which are less than the size necessary to fetch an entire row)    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testPartialResultsWithColumnFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|testPartialResultsWithColumnFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|testPartialResultsWithColumnFilter
argument_list|(
operator|new
name|ColumnPrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier5"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|testPartialResultsWithColumnFilter
argument_list|(
operator|new
name|ColumnRangeFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifer1"
argument_list|)
argument_list|,
literal|true
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier7"
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|qualifiers
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|qualifiers
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier5"
argument_list|)
argument_list|)
expr_stmt|;
name|testPartialResultsWithColumnFilter
argument_list|(
operator|new
name|FirstKeyValueMatchingQualifiersFilter
argument_list|(
name|qualifiers
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPartialResultsWithColumnFilter
parameter_list|(
name|Filter
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
operator|!
name|filter
operator|.
name|hasFilterRow
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|partialScan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|partialScan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|Scan
name|oneshotScan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|oneshotScan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|oneshotScan
operator|.
name|setMaxResultSize
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_COLS
condition|;
name|i
operator|++
control|)
block|{
name|partialScan
operator|.
name|setMaxResultSize
argument_list|(
name|getResultSizeForNumberOfCells
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|testEquivalenceOfScanResults
argument_list|(
name|TABLE
argument_list|,
name|partialScan
argument_list|,
name|oneshotScan
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|moveRegion
parameter_list|(
name|Table
name|table
parameter_list|,
name|int
name|index
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|regions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RegionInfo
name|regionInfo
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|ServerName
name|name
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|index
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertCell
parameter_list|(
name|Cell
name|cell
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|byte
index|[]
name|cq
parameter_list|)
block|{
name|assertArrayEquals
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|copy
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|cf
argument_list|,
name|Bytes
operator|.
name|copy
argument_list|(
name|cell
operator|.
name|getFamilyArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getFamilyLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|cq
argument_list|,
name|Bytes
operator|.
name|copy
argument_list|(
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartialResultWhenRegionMove
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|createTestTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Result
name|result1
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result1
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c1
init|=
name|result1
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c1
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
name|NUM_FAMILIES
operator|-
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|NUM_QUALIFIERS
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result1
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result2
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result2
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c2
init|=
name|result2
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c2
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result2
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Result
name|result3
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result3
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c3
init|=
name|result3
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c3
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result3
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversedPartialResultWhenRegionMove
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|createTestTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setAllowPartialResults
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|Result
name|result1
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result1
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c1
init|=
name|result1
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c1
argument_list|,
name|ROWS
index|[
name|NUM_ROWS
operator|-
literal|1
index|]
argument_list|,
name|FAMILIES
index|[
name|NUM_FAMILIES
operator|-
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|NUM_QUALIFIERS
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result1
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result2
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result2
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c2
init|=
name|result2
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c2
argument_list|,
name|ROWS
index|[
name|NUM_ROWS
operator|-
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result2
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Result
name|result3
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result3
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c3
init|=
name|result3
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c3
argument_list|,
name|ROWS
index|[
name|NUM_ROWS
operator|-
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result3
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompleteResultWhenRegionMove
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|createTestTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result1
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
argument_list|,
name|result1
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c1
init|=
name|result1
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c1
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result1
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result2
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
argument_list|,
name|result2
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c2
init|=
name|result2
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c2
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result2
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Result
name|result3
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
argument_list|,
name|result3
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c3
init|=
name|result3
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c3
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result3
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReversedCompleteResultWhenRegionMove
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|createTestTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result1
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
argument_list|,
name|result1
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c1
init|=
name|result1
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c1
argument_list|,
name|ROWS
index|[
name|NUM_ROWS
operator|-
literal|1
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result1
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result2
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
argument_list|,
name|result2
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c2
init|=
name|result2
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c2
argument_list|,
name|ROWS
index|[
name|NUM_ROWS
operator|-
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result2
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Result
name|result3
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
argument_list|,
name|result3
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
name|c3
init|=
name|result3
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertCell
argument_list|(
name|c3
argument_list|,
name|ROWS
index|[
name|NUM_ROWS
operator|-
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result3
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchingResultWhenRegionMove
parameter_list|()
throws|throws
name|IOException
block|{
comment|// If user setBatch(5) and rpc returns 3+5+5+5+3 cells,
comment|// we should return 5+5+5+5+1 to user.
comment|// setBatch doesn't mean setAllowPartialResult(true)
name|Table
name|table
init|=
name|createTestTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
operator|new
name|byte
index|[
name|VALUE_SIZE
operator|*
literal|10
index|]
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|NUM_FAMILIES
operator|-
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|NUM_QUALIFIERS
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setBatch
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxResultSize
argument_list|(
name|VALUE_SIZE
operator|*
literal|6
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
operator|/
literal|5
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Result
name|result1
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result1
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertCell
argument_list|(
name|result1
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
name|NUM_FAMILIES
operator|-
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|NUM_QUALIFIERS
operator|-
literal|5
index|]
argument_list|)
expr_stmt|;
name|assertCell
argument_list|(
name|result1
operator|.
name|rawCells
argument_list|()
index|[
literal|4
index|]
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
name|NUM_FAMILIES
operator|-
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|NUM_QUALIFIERS
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result1
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result2
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result2
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertCell
argument_list|(
name|result2
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertCell
argument_list|(
name|result2
operator|.
name|rawCells
argument_list|()
index|[
literal|4
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result2
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
name|moveRegion
argument_list|(
name|table
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Result
name|result3
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result3
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertCell
argument_list|(
name|result3
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|assertCell
argument_list|(
name|result3
operator|.
name|rawCells
argument_list|()
index|[
literal|4
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result3
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_FAMILIES
operator|*
name|NUM_QUALIFIERS
operator|/
literal|5
operator|-
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|NUM_ROWS
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|NUM_FAMILIES
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|NUM_QUALIFIERS
condition|;
name|k
operator|+=
literal|5
control|)
block|{
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertCell
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
name|i
index|]
argument_list|,
name|FAMILIES
index|[
name|j
index|]
argument_list|,
name|QUALIFIERS
index|[
name|k
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|==
name|NUM_FAMILIES
operator|-
literal|1
operator|&&
name|k
operator|==
name|NUM_QUALIFIERS
operator|-
literal|5
condition|)
block|{
name|assertFalse
argument_list|(
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertNull
argument_list|(
name|scanner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDontThrowUnknowScannerExceptionToClient
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|createTestTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeout
operator|*
literal|2
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_ROWS
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMayHaveMoreCellsInRowReturnsTrueAndSetBatch
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|createTestTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUE
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setBatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

