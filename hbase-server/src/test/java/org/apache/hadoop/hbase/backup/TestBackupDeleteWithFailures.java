begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|impl
operator|.
name|BackupSystemTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * This class is only a base for other integration-level backup tests. Do not add tests here.  * TestBackupSmallTests is where tests that don't require bring machines up/down should go All other  * tests should have their own classes and extend this one  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestBackupDeleteWithFailures
extends|extends
name|TestBackupBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestBackupDeleteWithFailures
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Failure
block|{
name|NO_FAILURES
block|,
name|PRE_SNAPSHOT_FAILURE
block|,
name|PRE_DELETE_SNAPSHOT_FAILURE
block|,
name|POST_DELETE_SNAPSHOT_FAILURE
block|}
specifier|public
specifier|static
class|class
name|MasterSnapshotObserver
implements|implements
name|MasterObserver
block|{
name|List
argument_list|<
name|Failure
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<
name|Failure
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setFailures
parameter_list|(
name|Failure
modifier|...
name|f
parameter_list|)
block|{
name|failures
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|f
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|f
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|failures
operator|.
name|contains
argument_list|(
name|Failure
operator|.
name|PRE_SNAPSHOT_FAILURE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"preSnapshot"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|failures
operator|.
name|contains
argument_list|(
name|Failure
operator|.
name|PRE_DELETE_SNAPSHOT_FAILURE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"preDeleteSnapshot"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteSnapshot
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|failures
operator|.
name|contains
argument_list|(
name|Failure
operator|.
name|POST_DELETE_SNAPSHOT_FAILURE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"postDeleteSnapshot"
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf1
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|MasterSnapshotObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
specifier|private
name|MasterSnapshotObserver
name|getMasterSnapshotObserver
parameter_list|()
block|{
return|return
operator|(
name|MasterSnapshotObserver
operator|)
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|MasterSnapshotObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackupDeleteWithFailures
parameter_list|()
throws|throws
name|Exception
block|{
name|testBackupDeleteWithFailuresAfter
argument_list|(
literal|1
argument_list|,
name|Failure
operator|.
name|PRE_DELETE_SNAPSHOT_FAILURE
argument_list|)
expr_stmt|;
name|testBackupDeleteWithFailuresAfter
argument_list|(
literal|0
argument_list|,
name|Failure
operator|.
name|POST_DELETE_SNAPSHOT_FAILURE
argument_list|)
expr_stmt|;
name|testBackupDeleteWithFailuresAfter
argument_list|(
literal|1
argument_list|,
name|Failure
operator|.
name|PRE_SNAPSHOT_FAILURE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testBackupDeleteWithFailuresAfter
parameter_list|(
name|int
name|expected
parameter_list|,
name|Failure
modifier|...
name|failures
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test repair backup delete on a single table with data and failures "
operator|+
name|failures
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TableName
argument_list|>
name|tableList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|table1
argument_list|)
decl_stmt|;
name|String
name|backupId
init|=
name|fullTableBackup
argument_list|(
name|tableList
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|checkSucceeded
argument_list|(
name|backupId
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"backup complete"
argument_list|)
expr_stmt|;
name|String
index|[]
name|backupIds
init|=
operator|new
name|String
index|[]
block|{
name|backupId
block|}
decl_stmt|;
name|BackupSystemTable
name|table
init|=
operator|new
name|BackupSystemTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
name|BackupInfo
name|info
init|=
name|table
operator|.
name|readBackupInfo
argument_list|(
name|backupId
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|info
operator|.
name|getBackupRootDir
argument_list|()
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|path
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|MasterSnapshotObserver
name|observer
init|=
name|getMasterSnapshotObserver
argument_list|()
decl_stmt|;
name|observer
operator|.
name|setFailures
argument_list|(
name|failures
argument_list|)
expr_stmt|;
try|try
block|{
name|getBackupAdmin
argument_list|()
operator|.
name|deleteBackups
argument_list|(
name|backupIds
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|!=
literal|1
condition|)
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Verify that history length == expected after delete failure
name|assertTrue
argument_list|(
name|table
operator|.
name|getBackupHistory
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|expected
argument_list|)
expr_stmt|;
name|String
index|[]
name|ids
init|=
name|table
operator|.
name|getListOfBackupIdsFromDeleteOperation
argument_list|()
decl_stmt|;
comment|// Verify that we still have delete record in backup system table
if|if
condition|(
name|expected
operator|==
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
name|ids
operator|.
name|length
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ids
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|backupId
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|ids
argument_list|)
expr_stmt|;
block|}
comment|// Now run repair command to repair "failed" delete operation
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"repair"
block|}
decl_stmt|;
name|observer
operator|.
name|setFailures
argument_list|(
name|Failure
operator|.
name|NO_FAILURES
argument_list|)
expr_stmt|;
comment|// Run repair
name|int
name|ret
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
name|conf1
argument_list|,
operator|new
name|BackupDriver
argument_list|()
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ret
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Verify that history length == 0
name|assertTrue
argument_list|(
name|table
operator|.
name|getBackupHistory
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|ids
operator|=
name|table
operator|.
name|getListOfBackupIdsFromDeleteOperation
argument_list|()
expr_stmt|;
comment|// Verify that we do not have delete record in backup system table
name|assertNull
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

