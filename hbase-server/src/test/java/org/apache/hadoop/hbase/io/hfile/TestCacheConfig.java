begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Tests that {@link CacheConfig} does as expected.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCacheConfig
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCacheConfig
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|static
class|class
name|Deserializer
implements|implements
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
block|{
specifier|private
specifier|final
name|Cacheable
name|cacheable
decl_stmt|;
name|Deserializer
parameter_list|(
specifier|final
name|Cacheable
name|c
parameter_list|)
block|{
name|this
operator|.
name|cacheable
operator|=
name|c
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDeserialiserIdentifier
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cacheable
name|deserialize
parameter_list|(
name|ByteBuffer
name|b
parameter_list|,
name|boolean
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deserialized "
operator|+
name|b
operator|+
literal|", reuse="
operator|+
name|reuse
argument_list|)
expr_stmt|;
return|return
name|cacheable
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cacheable
name|deserialize
parameter_list|(
name|ByteBuffer
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Deserialized "
operator|+
name|b
argument_list|)
expr_stmt|;
return|return
name|cacheable
return|;
block|}
block|}
empty_stmt|;
specifier|static
class|class
name|IndexCacheEntry
extends|extends
name|DataCacheEntry
block|{
specifier|private
specifier|static
name|IndexCacheEntry
name|SINGLETON
init|=
operator|new
name|IndexCacheEntry
argument_list|()
decl_stmt|;
specifier|public
name|IndexCacheEntry
parameter_list|()
block|{
name|super
argument_list|(
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BlockType
name|getBlockType
parameter_list|()
block|{
return|return
name|BlockType
operator|.
name|ROOT_INDEX
return|;
block|}
block|}
specifier|static
class|class
name|DataCacheEntry
implements|implements
name|Cacheable
block|{
specifier|private
specifier|static
specifier|final
name|int
name|SIZE
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|DataCacheEntry
name|SINGLETON
init|=
operator|new
name|DataCacheEntry
argument_list|()
decl_stmt|;
specifier|final
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
name|deserializer
decl_stmt|;
name|DataCacheEntry
parameter_list|()
block|{
name|this
argument_list|(
name|SINGLETON
argument_list|)
expr_stmt|;
block|}
name|DataCacheEntry
parameter_list|(
specifier|final
name|Cacheable
name|c
parameter_list|)
block|{
name|this
operator|.
name|deserializer
operator|=
operator|new
name|Deserializer
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"size="
operator|+
name|SIZE
operator|+
literal|", type="
operator|+
name|getBlockType
argument_list|()
return|;
block|}
empty_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|SIZE
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedLength
parameter_list|()
block|{
return|return
name|SIZE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|ByteBuffer
name|destination
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Serialized "
operator|+
name|this
operator|+
literal|" to "
operator|+
name|destination
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
name|getDeserializer
parameter_list|()
block|{
return|return
name|this
operator|.
name|deserializer
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlockType
name|getBlockType
parameter_list|()
block|{
return|return
name|BlockType
operator|.
name|DATA
return|;
block|}
block|}
empty_stmt|;
specifier|static
class|class
name|MetaCacheEntry
extends|extends
name|DataCacheEntry
block|{
annotation|@
name|Override
specifier|public
name|BlockType
name|getBlockType
parameter_list|()
block|{
return|return
name|BlockType
operator|.
name|INTERMEDIATE_INDEX
return|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|CacheConfig
operator|.
name|GLOBAL_BLOCK_CACHE_INSTANCE
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Let go of current block cache.
name|CacheConfig
operator|.
name|GLOBAL_BLOCK_CACHE_INSTANCE
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * @param cc    * @param doubling If true, addition of element ups counter by 2, not 1, because element added    * to onheap and offheap caches.    * @param sizing True if we should run sizing test (doesn't always apply).    */
name|void
name|basicBlockCacheOps
parameter_list|(
specifier|final
name|CacheConfig
name|cc
parameter_list|,
specifier|final
name|boolean
name|doubling
parameter_list|,
specifier|final
name|boolean
name|sizing
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|cc
operator|.
name|isBlockCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CacheConfig
operator|.
name|DEFAULT_IN_MEMORY
operator|==
name|cc
operator|.
name|isInMemory
argument_list|()
argument_list|)
expr_stmt|;
name|BlockCache
name|bc
init|=
name|cc
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|bck
init|=
operator|new
name|BlockCacheKey
argument_list|(
literal|"f"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Cacheable
name|c
init|=
operator|new
name|DataCacheEntry
argument_list|()
decl_stmt|;
comment|// Do asserts on block counting.
name|long
name|initialBlockCount
init|=
name|bc
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
name|bc
operator|.
name|cacheBlock
argument_list|(
name|bck
argument_list|,
name|c
argument_list|,
name|cc
operator|.
name|isInMemory
argument_list|()
argument_list|,
name|cc
operator|.
name|isCacheDataInL1
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|doubling
condition|?
literal|2
else|:
literal|1
argument_list|,
name|bc
operator|.
name|getBlockCount
argument_list|()
operator|-
name|initialBlockCount
argument_list|)
expr_stmt|;
name|bc
operator|.
name|evictBlock
argument_list|(
name|bck
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialBlockCount
argument_list|,
name|bc
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Do size accounting.  Do it after the above 'warm-up' because it looks like some
comment|// buffers do lazy allocation so sizes are off on first go around.
if|if
condition|(
name|sizing
condition|)
block|{
name|long
name|originalSize
init|=
name|bc
operator|.
name|getCurrentSize
argument_list|()
decl_stmt|;
name|bc
operator|.
name|cacheBlock
argument_list|(
name|bck
argument_list|,
name|c
argument_list|,
name|cc
operator|.
name|isInMemory
argument_list|()
argument_list|,
name|cc
operator|.
name|isCacheDataInL1
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|size
init|=
name|bc
operator|.
name|getCurrentSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|bc
operator|.
name|getCurrentSize
argument_list|()
operator|>
name|originalSize
argument_list|)
expr_stmt|;
name|bc
operator|.
name|evictBlock
argument_list|(
name|bck
argument_list|)
expr_stmt|;
name|size
operator|=
name|bc
operator|.
name|getCurrentSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|originalSize
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param cc    * @param filename    * @return    */
specifier|private
name|long
name|cacheDataBlock
parameter_list|(
specifier|final
name|CacheConfig
name|cc
parameter_list|,
specifier|final
name|String
name|filename
parameter_list|)
block|{
name|BlockCacheKey
name|bck
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|filename
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Cacheable
name|c
init|=
operator|new
name|DataCacheEntry
argument_list|()
decl_stmt|;
comment|// Do asserts on block counting.
name|cc
operator|.
name|getBlockCache
argument_list|()
operator|.
name|cacheBlock
argument_list|(
name|bck
argument_list|,
name|c
argument_list|,
name|cc
operator|.
name|isInMemory
argument_list|()
argument_list|,
name|cc
operator|.
name|isCacheDataInL1
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cc
operator|.
name|getBlockCache
argument_list|()
operator|.
name|getBlockCount
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheConfigDefaultLRUBlockCache
parameter_list|()
block|{
name|CacheConfig
name|cc
init|=
operator|new
name|CacheConfig
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cc
operator|.
name|isBlockCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CacheConfig
operator|.
name|DEFAULT_IN_MEMORY
operator|==
name|cc
operator|.
name|isInMemory
argument_list|()
argument_list|)
expr_stmt|;
name|basicBlockCacheOps
argument_list|(
name|cc
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cc
operator|.
name|getBlockCache
argument_list|()
operator|instanceof
name|LruBlockCache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSlabCacheConfig
parameter_list|()
block|{
name|this
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
name|CacheConfig
operator|.
name|SLAB_CACHE_OFFHEAP_PERCENTAGE_KEY
argument_list|,
literal|0.1f
argument_list|)
expr_stmt|;
name|CacheConfig
name|cc
init|=
operator|new
name|CacheConfig
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|basicBlockCacheOps
argument_list|(
name|cc
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cc
operator|.
name|getBlockCache
argument_list|()
operator|instanceof
name|DoubleBlockCache
argument_list|)
expr_stmt|;
comment|// TODO Assert sizes allocated are right.
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBucketCacheConfig
parameter_list|()
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|CacheConfig
operator|.
name|BUCKET_CACHE_IOENGINE_KEY
argument_list|,
literal|"offheap"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|CacheConfig
operator|.
name|BUCKET_CACHE_SIZE_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
name|CacheConfig
operator|.
name|BUCKET_CACHE_COMBINED_PERCENTAGE_KEY
argument_list|,
literal|0.8f
argument_list|)
expr_stmt|;
name|CacheConfig
name|cc
init|=
operator|new
name|CacheConfig
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|basicBlockCacheOps
argument_list|(
name|cc
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cc
operator|.
name|getBlockCache
argument_list|()
operator|instanceof
name|CombinedBlockCache
argument_list|)
expr_stmt|;
comment|// TODO: Assert sizes allocated are right and proportions.
block|}
comment|/**    * Test the cacheDataInL1 flag.  When set, data blocks should be cached in the l1 tier, up in    * LruBlockCache when using CombinedBlockCcahe.    */
annotation|@
name|Test
specifier|public
name|void
name|testCacheDataInL1
parameter_list|()
block|{
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
name|CacheConfig
operator|.
name|BUCKET_CACHE_IOENGINE_KEY
argument_list|,
literal|"offheap"
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|CacheConfig
operator|.
name|BUCKET_CACHE_SIZE_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
name|CacheConfig
operator|.
name|BUCKET_CACHE_COMBINED_PERCENTAGE_KEY
argument_list|,
literal|0.8f
argument_list|)
expr_stmt|;
name|CacheConfig
name|cc
init|=
operator|new
name|CacheConfig
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cc
operator|.
name|getBlockCache
argument_list|()
operator|instanceof
name|CombinedBlockCache
argument_list|)
expr_stmt|;
name|CombinedBlockCache
name|cbc
init|=
operator|(
name|CombinedBlockCache
operator|)
name|cc
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
comment|// Add a data block.  Should go into L2, into the Bucket Cache, not the LruBlockCache.
name|cacheDataBlock
argument_list|(
name|cc
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|LruBlockCache
name|lrubc
init|=
operator|(
name|LruBlockCache
operator|)
name|cbc
operator|.
name|getBlockCaches
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertDataBlockCount
argument_list|(
name|lrubc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Enable our test flag.
name|cc
operator|.
name|setCacheDataInL1
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheDataBlock
argument_list|(
name|cc
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|assertDataBlockCount
argument_list|(
name|lrubc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setCacheDataInL1
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cacheDataBlock
argument_list|(
name|cc
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|assertDataBlockCount
argument_list|(
name|lrubc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDataBlockCount
parameter_list|(
specifier|final
name|LruBlockCache
name|bc
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
block|{
name|Map
argument_list|<
name|BlockType
argument_list|,
name|Integer
argument_list|>
name|blocks
init|=
name|bc
operator|.
name|getBlockTypeCountsForTest
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|blocks
operator|==
literal|null
condition|?
literal|0
else|:
name|blocks
operator|.
name|get
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|)
operator|==
literal|null
condition|?
literal|0
else|:
name|blocks
operator|.
name|get
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

