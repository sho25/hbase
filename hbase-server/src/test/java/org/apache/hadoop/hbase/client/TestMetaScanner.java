begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|StoppableImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetaScanner
block|{
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaScanner
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMetaScanner"
argument_list|)
expr_stmt|;
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMetaScanner"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegions
argument_list|(
name|conf
argument_list|,
name|table
argument_list|,
name|FAMILY
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|EMPTY_START_ROW
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_b"
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// Make sure all the regions are deployed
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|MetaScanner
operator|.
name|MetaScannerVisitor
name|visitor
init|=
name|mock
argument_list|(
name|MetaScanner
operator|.
name|MetaScannerVisitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|visitor
argument_list|)
operator|.
name|processRow
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Scanning the entire table should give us three rows
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
name|visitor
argument_list|,
name|TABLENAME
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|processRow
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Scanning the table with a specified empty start row should also
comment|// give us three hbase:meta rows
name|reset
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|visitor
argument_list|)
operator|.
name|processRow
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|conf
argument_list|,
name|visitor
argument_list|,
name|TABLENAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|processRow
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Scanning the table starting in the middle should give us two rows:
comment|// region_a and region_b
name|reset
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|visitor
argument_list|)
operator|.
name|processRow
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|conf
argument_list|,
name|visitor
argument_list|,
name|TABLENAME
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_ac"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|processRow
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Scanning with a limit of 1 should only give us one row
name|reset
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|visitor
argument_list|)
operator|.
name|processRow
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|conf
argument_list|,
name|visitor
argument_list|,
name|TABLENAME
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_ac"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|processRow
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentMetaScannerAndCatalogJanitor
parameter_list|()
throws|throws
name|Throwable
block|{
comment|/* TEST PLAN: start with only one region in a table. Have a splitter      * thread  and metascanner threads that continously scan the meta table for regions.      * CatalogJanitor from master will run frequently to clean things up      */
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"hbase.catalogjanitor.interval"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|setUp
argument_list|()
expr_stmt|;
specifier|final
name|long
name|runtime
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
comment|//30 sec
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testConcurrentMetaScannerAndCatalogJanitor"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testConcurrentMetaScannerAndCatalogJanitor"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
class|class
name|RegionMetaSplitter
extends|extends
name|StoppableImplementation
implements|implements
name|Runnable
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Throwable
name|ex
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|MetaScanner
operator|.
name|listAllRegions
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//select a random region
name|HRegionInfo
name|parent
init|=
name|regions
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
operator|||
operator|!
name|TABLENAME
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|long
name|startKey
init|=
literal|0
decl_stmt|,
name|endKey
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|byte
index|[]
name|start
init|=
name|parent
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|end
init|=
name|parent
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|parent
operator|.
name|getStartKey
argument_list|()
argument_list|)
condition|)
block|{
name|startKey
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|parent
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
name|parent
operator|.
name|getEndKey
argument_list|()
argument_list|)
condition|)
block|{
name|endKey
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|parent
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startKey
operator|==
name|endKey
condition|)
block|{
continue|continue;
block|}
name|long
name|midKey
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|startKey
argument_list|)
operator|.
name|add
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|endKey
argument_list|)
argument_list|)
operator|.
name|divideToIntegralValue
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|HRegionInfo
name|splita
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TABLENAME
argument_list|,
name|start
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|midKey
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TABLENAME
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|midKey
argument_list|)
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|splitRegion
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getConnection
argument_list|()
argument_list|,
name|parent
argument_list|,
name|splita
argument_list|,
name|splitb
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"fooserver"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|rethrowExceptionIfAny
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
class|class
name|MetaScannerVerifier
extends|extends
name|StoppableImplementation
implements|implements
name|Runnable
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|Throwable
name|ex
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|isStopped
argument_list|()
condition|)
block|{
try|try
block|{
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
init|=
name|MetaScanner
operator|.
name|allTableRegions
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|null
argument_list|,
name|TABLENAME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-------"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|lastEndKey
init|=
name|HConstants
operator|.
name|EMPTY_START_ROW
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regions
operator|.
name|navigableKeySet
argument_list|()
control|)
block|{
name|long
name|startKey
init|=
literal|0
decl_stmt|,
name|endKey
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|)
condition|)
block|{
name|startKey
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|)
condition|)
block|{
name|endKey
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"start:"
operator|+
name|startKey
operator|+
literal|" end:"
operator|+
name|endKey
operator|+
literal|" hri:"
operator|+
name|hri
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"lastEndKey="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastEndKey
argument_list|)
operator|+
literal|", startKey="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|lastEndKey
argument_list|,
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lastEndKey
operator|=
name|hri
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|lastEndKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"-------"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
operator|+
name|random
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|rethrowExceptionIfAny
parameter_list|()
throws|throws
name|Throwable
block|{
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
name|RegionMetaSplitter
name|regionMetaSplitter
init|=
operator|new
name|RegionMetaSplitter
argument_list|()
decl_stmt|;
name|MetaScannerVerifier
name|metaScannerVerifier
init|=
operator|new
name|MetaScannerVerifier
argument_list|()
decl_stmt|;
name|Thread
name|regionMetaSplitterThread
init|=
operator|new
name|Thread
argument_list|(
name|regionMetaSplitter
argument_list|)
decl_stmt|;
name|Thread
name|metaScannerVerifierThread
init|=
operator|new
name|Thread
argument_list|(
name|metaScannerVerifier
argument_list|)
decl_stmt|;
name|regionMetaSplitterThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|metaScannerVerifierThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
name|runtime
argument_list|)
expr_stmt|;
name|regionMetaSplitter
operator|.
name|stop
argument_list|(
literal|"test finished"
argument_list|)
expr_stmt|;
name|metaScannerVerifier
operator|.
name|stop
argument_list|(
literal|"test finished"
argument_list|)
expr_stmt|;
name|regionMetaSplitterThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|metaScannerVerifierThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|regionMetaSplitter
operator|.
name|rethrowExceptionIfAny
argument_list|()
expr_stmt|;
name|metaScannerVerifier
operator|.
name|rethrowExceptionIfAny
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

