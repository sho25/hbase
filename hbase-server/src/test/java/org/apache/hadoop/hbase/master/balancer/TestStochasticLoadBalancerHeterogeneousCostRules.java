begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software distributed under the License  * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express  * or implied. See the License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileSystems
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|NoSuchFileException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStochasticLoadBalancerHeterogeneousCostRules
extends|extends
name|BalancerTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestStochasticLoadBalancerHeterogeneousCostRules
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|String
name|DEFAULT_RULES_FILE_NAME
init|=
literal|"hbase-balancer.rules"
decl_stmt|;
specifier|private
name|HeterogeneousRegionCountCostFunction
name|costFunction
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|/**    * Make a file for rules that is inside a temporary test dir named for the method so it doesn't    * clash w/ other rule files.    */
specifier|private
name|String
name|rulesFilename
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Ensure test dir is created
name|HTU
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|HTU
operator|.
name|getDataTestDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
comment|// New rules file name per test.
name|this
operator|.
name|rulesFilename
operator|=
name|HTU
operator|.
name|getDataTestDir
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"."
operator|+
name|DEFAULT_RULES_FILE_NAME
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// Set the created rules filename into the configuration.
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HeterogeneousRegionCountCostFunction
operator|.
name|HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE
argument_list|,
name|this
operator|.
name|rulesFilename
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param file Name of file to write rules into.    * @return Full file name of the rules file which is<code>dir</code> + DEFAULT_RULES_FILE_NAME.    */
specifier|static
name|String
name|createRulesFile
parameter_list|(
name|String
name|file
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|lines
parameter_list|)
throws|throws
name|IOException
block|{
name|cleanup
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
name|path
init|=
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|createFile
argument_list|(
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|write
argument_list|(
name|path
argument_list|,
name|lines
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * @param file Name of file to write rules into.    * @return Full file name of the rules file which is<code>dir</code> + DEFAULT_RULES_FILE_NAME.    */
specifier|static
name|String
name|createRulesFile
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createRulesFile
argument_list|(
name|file
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|cleanup
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|delete
argument_list|(
name|FileSystems
operator|.
name|getDefault
argument_list|()
operator|.
name|getPath
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFileException
name|nsfe
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FileNotFoundException for "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoRules
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Override what is in the configuration with the name of a non-existent file!
name|HTU
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HeterogeneousRegionCountCostFunction
operator|.
name|HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE
argument_list|,
literal|"non-existent-file!"
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|=
operator|new
name|HeterogeneousRegionCountCostFunction
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|.
name|loadRules
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|costFunction
operator|.
name|getNumberOfRulesLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadFormatInRules
parameter_list|()
throws|throws
name|IOException
block|{
comment|// See {@link #before} above. It sets this.rulesFilename, and
comment|// HeterogeneousRegionCountCostFunction.HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE,
comment|// in the configuration.
name|this
operator|.
name|costFunction
operator|=
operator|new
name|HeterogeneousRegionCountCostFunction
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|.
name|loadRules
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|costFunction
operator|.
name|getNumberOfRulesLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|createRulesFile
argument_list|(
name|this
operator|.
name|rulesFilename
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"bad rules format"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|=
operator|new
name|HeterogeneousRegionCountCostFunction
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|.
name|loadRules
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|costFunction
operator|.
name|getNumberOfRulesLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|createRulesFile
argument_list|(
name|this
operator|.
name|rulesFilename
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"srv[1-2] 10"
argument_list|,
literal|"bad_rules format"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|=
operator|new
name|HeterogeneousRegionCountCostFunction
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|.
name|loadRules
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|costFunction
operator|.
name|getNumberOfRulesLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoRules
parameter_list|()
throws|throws
name|IOException
block|{
comment|// See {@link #before} above. It sets this.rulesFilename, and
comment|// HeterogeneousRegionCountCostFunction.HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE,
comment|// in the configuration.
comment|// See {@link #before} above. It sets
comment|// HeterogeneousRegionCountCostFunction.HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE,
comment|// in the configuration.
name|createRulesFile
argument_list|(
name|this
operator|.
name|rulesFilename
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"^server1$ 10"
argument_list|,
literal|"^server2 21"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|=
operator|new
name|HeterogeneousRegionCountCostFunction
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|.
name|loadRules
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|costFunction
operator|.
name|getNumberOfRulesLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadRegexp
parameter_list|()
throws|throws
name|IOException
block|{
comment|// See {@link #before} above. It sets this.rulesFilename, and
comment|// HeterogeneousRegionCountCostFunction.HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE,
comment|// in the configuration.
comment|// See {@link #before} above. It sets
comment|// HeterogeneousRegionCountCostFunction.HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE,
comment|// in the configuration.
name|createRulesFile
argument_list|(
name|this
operator|.
name|rulesFilename
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|"server[ 1"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|=
operator|new
name|HeterogeneousRegionCountCostFunction
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|.
name|loadRules
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|costFunction
operator|.
name|getNumberOfRulesLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoOverride
parameter_list|()
throws|throws
name|IOException
block|{
comment|// See {@link #before} above. It sets this.rulesFilename, and
comment|// HeterogeneousRegionCountCostFunction.HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE,
comment|// in the configuration.
name|createRulesFile
argument_list|(
name|this
operator|.
name|rulesFilename
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"^server1$ 10"
argument_list|,
literal|"^server2 21"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|=
operator|new
name|HeterogeneousRegionCountCostFunction
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|.
name|loadRules
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|costFunction
operator|.
name|getNumberOfRulesLoaded
argument_list|()
argument_list|)
expr_stmt|;
comment|// loading malformed configuration does not overload current
name|cleanup
argument_list|(
name|this
operator|.
name|rulesFilename
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|.
name|loadRules
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|costFunction
operator|.
name|getNumberOfRulesLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadingFomHDFS
parameter_list|()
throws|throws
name|Exception
block|{
name|HTU
operator|.
name|startMiniDFSCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|MiniDFSCluster
name|cluster
init|=
name|HTU
operator|.
name|getDFSCluster
argument_list|()
decl_stmt|;
name|DistributedFileSystem
name|fs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Writing file
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
name|DEFAULT_RULES_FILE_NAME
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|stream
operator|.
name|write
argument_list|(
literal|"server1 10"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|configuration
init|=
name|HTU
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// start costFunction
name|configuration
operator|.
name|set
argument_list|(
name|HeterogeneousRegionCountCostFunction
operator|.
name|HBASE_MASTER_BALANCER_HETEROGENEOUS_RULES_FILE
argument_list|,
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|=
operator|new
name|HeterogeneousRegionCountCostFunction
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|.
name|costFunction
operator|.
name|loadRules
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|costFunction
operator|.
name|getNumberOfRulesLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HTU
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

