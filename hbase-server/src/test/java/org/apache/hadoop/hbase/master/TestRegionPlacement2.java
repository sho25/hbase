begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|favored
operator|.
name|FavoredNodeAssignmentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|favored
operator|.
name|FavoredNodeLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|favored
operator|.
name|FavoredNodesPlan
operator|.
name|Position
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|LoadBalancerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionPlacement2
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRegionPlacement2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|SLAVES
init|=
literal|7
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|PRIMARY
init|=
name|Position
operator|.
name|PRIMARY
operator|.
name|ordinal
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|SECONDARY
init|=
name|Position
operator|.
name|SECONDARY
operator|.
name|ordinal
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|TERTIARY
init|=
name|Position
operator|.
name|TERTIARY
operator|.
name|ordinal
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Enable the favored nodes based load balancer
name|conf
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|FavoredNodeLoadBalancer
operator|.
name|class
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.tests.use.shortcircuit.reads"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFavoredNodesPresentForRoundRobinAssignment
parameter_list|()
throws|throws
name|HBaseIOException
block|{
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|balancer
operator|.
name|setMasterServices
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
name|balancer
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SLAVES
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|server
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignmentMap
init|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverBefore
init|=
name|assignmentMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesBefore
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesBefore
operator|.
name|size
argument_list|()
operator|==
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
argument_list|)
expr_stmt|;
comment|// the primary RS should be the one that the balancer's assignment returns
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverBefore
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// now remove the primary from the list of available servers
name|List
argument_list|<
name|ServerName
argument_list|>
name|removedServers
init|=
name|removeMatchingServers
argument_list|(
name|serverBefore
argument_list|,
name|servers
argument_list|)
decl_stmt|;
comment|// call roundRobinAssignment with the modified servers list
name|assignmentMap
operator|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesAfter
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|size
argument_list|()
operator|==
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
argument_list|)
expr_stmt|;
comment|// We don't expect the favored nodes assignments to change in multiple calls
comment|// to the roundRobinAssignment method in the balancer (relevant for AssignmentManager.assign
comment|// failures)
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|containsAll
argument_list|(
name|favoredNodesBefore
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverAfter
init|=
name|assignmentMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
comment|// We expect the new RegionServer assignee to be one of the favored nodes
comment|// chosen earlier.
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|||
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// put back the primary in the list of available servers
name|servers
operator|.
name|addAll
argument_list|(
name|removedServers
argument_list|)
expr_stmt|;
comment|// now roundRobinAssignment with the modified servers list should return the primary
comment|// as the regionserver assignee
name|assignmentMap
operator|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverWithPrimary
init|=
name|assignmentMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|serverBefore
operator|.
name|containsAll
argument_list|(
name|serverWithPrimary
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make all the favored nodes unavailable for assignment
name|removeMatchingServers
argument_list|(
name|favoredNodesAfter
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// call roundRobinAssignment with the modified servers list
name|assignmentMap
operator|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesNow
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesNow
operator|.
name|size
argument_list|()
operator|==
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFavoredNodesPresentForRandomAssignment
parameter_list|()
throws|throws
name|HBaseIOException
block|{
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|balancer
operator|.
name|setMasterServices
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
name|balancer
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SLAVES
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|server
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ServerName
name|serverBefore
init|=
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesBefore
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesBefore
operator|.
name|size
argument_list|()
operator|==
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
argument_list|)
expr_stmt|;
comment|// the primary RS should be the one that the balancer's assignment returns
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverBefore
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// now remove the primary from the list of servers
name|removeMatchingServers
argument_list|(
name|serverBefore
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// call randomAssignment with the modified servers list
name|ServerName
name|serverAfter
init|=
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesAfter
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|size
argument_list|()
operator|==
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
argument_list|)
expr_stmt|;
comment|// We don't expect the favored nodes assignments to change in multiple calls
comment|// to the randomAssignment method in the balancer (relevant for AssignmentManager.assign
comment|// failures)
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|containsAll
argument_list|(
name|favoredNodesBefore
argument_list|)
argument_list|)
expr_stmt|;
comment|// We expect the new RegionServer assignee to be one of the favored nodes
comment|// chosen earlier.
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|||
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make all the favored nodes unavailable for assignment
name|removeMatchingServers
argument_list|(
name|favoredNodesAfter
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// call randomAssignment with the modified servers list
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesNow
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesNow
operator|.
name|size
argument_list|()
operator|==
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|removeMatchingServers
parameter_list|(
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|serversWithoutStartCode
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|serversToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|serversWithoutStartCode
control|)
block|{
name|serversToRemove
operator|.
name|addAll
argument_list|(
name|removeMatchingServers
argument_list|(
name|s
argument_list|,
name|servers
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|serversToRemove
return|;
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|removeMatchingServers
parameter_list|(
name|ServerName
name|serverWithoutStartCode
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|serversToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|servers
control|)
block|{
if|if
condition|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|s
argument_list|,
name|serverWithoutStartCode
argument_list|)
condition|)
block|{
name|serversToRemove
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|servers
operator|.
name|removeAll
argument_list|(
name|serversToRemove
argument_list|)
expr_stmt|;
return|return
name|serversToRemove
return|;
block|}
block|}
end_class

end_unit

