begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|mapreduce
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|SequenceFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|JavaSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|serializer
operator|.
name|WritableSerialization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMobSweepJob
block|{
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.master.info.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.regionserver.info.port.auto"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CommonConfigurationKeys
operator|.
name|IO_SERIALIZATIONS_KEY
argument_list|,
name|JavaSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|WritableSerialization
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|writeFileNames
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Path
name|path
parameter_list|,
name|String
index|[]
name|filesNames
parameter_list|)
throws|throws
name|IOException
block|{
comment|// write the names to a sequence file
name|SequenceFile
operator|.
name|Writer
name|writer
init|=
name|SequenceFile
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|conf
argument_list|,
name|path
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|fileName
range|:
name|filesNames
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|fileName
argument_list|,
name|MobConstants
operator|.
name|EMPTY_STRING
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeStream
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSweeperJobWithOutUnusedFile
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|vistiedFileNamesPath
init|=
operator|new
name|Path
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|configuration
argument_list|)
argument_list|,
literal|"/hbase/mobcompaction/SweepJob/working/names/0/visited"
argument_list|)
decl_stmt|;
name|Path
name|allFileNamesPath
init|=
operator|new
name|Path
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|configuration
argument_list|)
argument_list|,
literal|"/hbase/mobcompaction/SweepJob/working/names/0/all"
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SweepJob
operator|.
name|WORKING_VISITED_DIR_KEY
argument_list|,
name|vistiedFileNamesPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SweepJob
operator|.
name|WORKING_ALLNAMES_FILE_KEY
argument_list|,
name|allFileNamesPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|allFileNamesPath
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|}
argument_list|)
expr_stmt|;
name|Path
name|r0
init|=
operator|new
name|Path
argument_list|(
name|vistiedFileNamesPath
argument_list|,
literal|"r0"
argument_list|)
decl_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|r0
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|)
expr_stmt|;
name|Path
name|r1
init|=
operator|new
name|Path
argument_list|(
name|vistiedFileNamesPath
argument_list|,
literal|"r1"
argument_list|)
decl_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|r1
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"4"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|Path
name|r2
init|=
operator|new
name|Path
argument_list|(
name|vistiedFileNamesPath
argument_list|,
literal|"r2"
argument_list|)
decl_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|r2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"2"
block|,
literal|"3"
block|,
literal|"6"
block|}
argument_list|)
expr_stmt|;
name|SweepJob
name|sweepJob
init|=
operator|new
name|SweepJob
argument_list|(
name|configuration
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toBeArchived
init|=
name|sweepJob
operator|.
name|getUnusedFiles
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|toBeArchived
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSweeperJobWithUnusedFile
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|vistiedFileNamesPath
init|=
operator|new
name|Path
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|configuration
argument_list|)
argument_list|,
literal|"/hbase/mobcompaction/SweepJob/working/names/1/visited"
argument_list|)
decl_stmt|;
name|Path
name|allFileNamesPath
init|=
operator|new
name|Path
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|configuration
argument_list|)
argument_list|,
literal|"/hbase/mobcompaction/SweepJob/working/names/1/all"
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SweepJob
operator|.
name|WORKING_VISITED_DIR_KEY
argument_list|,
name|vistiedFileNamesPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SweepJob
operator|.
name|WORKING_ALLNAMES_FILE_KEY
argument_list|,
name|allFileNamesPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|allFileNamesPath
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|}
argument_list|)
expr_stmt|;
name|Path
name|r0
init|=
operator|new
name|Path
argument_list|(
name|vistiedFileNamesPath
argument_list|,
literal|"r0"
argument_list|)
decl_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|r0
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|)
expr_stmt|;
name|Path
name|r1
init|=
operator|new
name|Path
argument_list|(
name|vistiedFileNamesPath
argument_list|,
literal|"r1"
argument_list|)
decl_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|r1
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"5"
block|}
argument_list|)
expr_stmt|;
name|Path
name|r2
init|=
operator|new
name|Path
argument_list|(
name|vistiedFileNamesPath
argument_list|,
literal|"r2"
argument_list|)
decl_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|r2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"2"
block|,
literal|"3"
block|}
argument_list|)
expr_stmt|;
name|SweepJob
name|sweepJob
init|=
operator|new
name|SweepJob
argument_list|(
name|configuration
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toBeArchived
init|=
name|sweepJob
operator|.
name|getUnusedFiles
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|toBeArchived
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"4"
block|,
literal|"6"
block|}
argument_list|,
name|toBeArchived
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSweeperJobWithRedundantFile
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|vistiedFileNamesPath
init|=
operator|new
name|Path
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|configuration
argument_list|)
argument_list|,
literal|"/hbase/mobcompaction/SweepJob/working/names/2/visited"
argument_list|)
decl_stmt|;
name|Path
name|allFileNamesPath
init|=
operator|new
name|Path
argument_list|(
name|MobUtils
operator|.
name|getMobHome
argument_list|(
name|configuration
argument_list|)
argument_list|,
literal|"/hbase/mobcompaction/SweepJob/working/names/2/all"
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SweepJob
operator|.
name|WORKING_VISITED_DIR_KEY
argument_list|,
name|vistiedFileNamesPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|SweepJob
operator|.
name|WORKING_ALLNAMES_FILE_KEY
argument_list|,
name|allFileNamesPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|allFileNamesPath
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|}
argument_list|)
expr_stmt|;
name|Path
name|r0
init|=
operator|new
name|Path
argument_list|(
name|vistiedFileNamesPath
argument_list|,
literal|"r0"
argument_list|)
decl_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|r0
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|}
argument_list|)
expr_stmt|;
name|Path
name|r1
init|=
operator|new
name|Path
argument_list|(
name|vistiedFileNamesPath
argument_list|,
literal|"r1"
argument_list|)
decl_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|r1
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|}
argument_list|)
expr_stmt|;
name|Path
name|r2
init|=
operator|new
name|Path
argument_list|(
name|vistiedFileNamesPath
argument_list|,
literal|"r2"
argument_list|)
decl_stmt|;
name|writeFileNames
argument_list|(
name|fs
argument_list|,
name|configuration
argument_list|,
name|r2
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|}
argument_list|)
expr_stmt|;
name|SweepJob
name|sweepJob
init|=
operator|new
name|SweepJob
argument_list|(
name|configuration
argument_list|,
name|fs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toBeArchived
init|=
name|sweepJob
operator|.
name|getUnusedFiles
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|toBeArchived
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

