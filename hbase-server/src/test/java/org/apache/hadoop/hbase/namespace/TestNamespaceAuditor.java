begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|namespace
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionServerObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionServerCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionServerObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|TestRegionServerObserver
operator|.
name|CPRegionServerObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableInputFormatBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableNamespaceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestNamespaceAuditor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestNamespaceAuditor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|HBaseAdmin
name|admin
decl_stmt|;
specifier|private
name|String
name|prefix
init|=
literal|"TestNamespaceAuditor"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|CustomObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.coprocessor.regionserver.classes"
argument_list|,
name|CPRegionServerObserver
operator|.
name|class
argument_list|,
name|RegionServerObserver
operator|.
name|class
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|isQuotaEnabled
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|admin
operator|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
for|for
control|(
name|HTableDescriptor
name|table
range|:
name|admin
operator|.
name|listTables
argument_list|()
control|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|NamespaceDescriptor
name|ns
range|:
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
control|)
block|{
if|if
condition|(
name|ns
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Quota manager not enabled"
argument_list|,
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|isQuotaEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTableOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nsp
init|=
name|prefix
operator|+
literal|"_np2"
decl_stmt|;
name|NamespaceDescriptor
name|nspDesc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|nsp
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_REGIONS
argument_list|,
literal|"5"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_TABLES
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|nspDesc
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Namespace descriptor found null."
argument_list|,
name|admin
operator|.
name|getNamespaceDescriptor
argument_list|(
name|nsp
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
operator|.
name|length
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|tableDescOne
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsp
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table1"
argument_list|)
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDescTwo
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsp
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table2"
argument_list|)
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDescThree
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsp
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table3"
argument_list|)
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescOne
argument_list|)
expr_stmt|;
name|boolean
name|constraintViolated
init|=
literal|false
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescTwo
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ZZZ"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|constraintViolated
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
literal|"Constraint not violated for table "
operator|+
name|tableDescTwo
operator|.
name|getTableName
argument_list|()
argument_list|,
name|constraintViolated
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescTwo
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ZZZ"
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|NamespaceTableAndRegionInfo
name|nspState
init|=
name|getQuotaManager
argument_list|()
operator|.
name|getState
argument_list|(
name|nsp
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nspState
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nspState
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nspState
operator|.
name|getRegionCount
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|constraintViolated
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescThree
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
name|constraintViolated
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
literal|"Constraint not violated for table "
operator|+
name|tableDescThree
operator|.
name|getTableName
argument_list|()
argument_list|,
name|constraintViolated
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidQuotas
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|rootDir
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|NamespaceDescriptor
name|nspDesc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|prefix
operator|+
literal|"vq1"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_REGIONS
argument_list|,
literal|"hihdufh"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_TABLES
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|createNamespace
argument_list|(
name|nspDesc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|FSUtils
operator|.
name|getNamespaceDir
argument_list|(
name|rootDir
argument_list|,
name|nspDesc
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nspDesc
operator|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|prefix
operator|+
literal|"vq2"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_REGIONS
argument_list|,
literal|"-456"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_TABLES
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createNamespace
argument_list|(
name|nspDesc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|FSUtils
operator|.
name|getNamespaceDir
argument_list|(
name|rootDir
argument_list|,
name|nspDesc
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nspDesc
operator|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|prefix
operator|+
literal|"vq3"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_REGIONS
argument_list|,
literal|"10"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_TABLES
argument_list|,
literal|"sciigd"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createNamespace
argument_list|(
name|nspDesc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|FSUtils
operator|.
name|getNamespaceDir
argument_list|(
name|rootDir
argument_list|,
name|nspDesc
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nspDesc
operator|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|prefix
operator|+
literal|"vq4"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_REGIONS
argument_list|,
literal|"10"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_TABLES
argument_list|,
literal|"-1500"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createNamespace
argument_list|(
name|nspDesc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|FSUtils
operator|.
name|getNamespaceDir
argument_list|(
name|rootDir
argument_list|,
name|nspDesc
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|namespace
init|=
name|prefix
operator|+
literal|"_dummy"
decl_stmt|;
name|NamespaceDescriptor
name|nspDesc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|namespace
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_REGIONS
argument_list|,
literal|"100"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_TABLES
argument_list|,
literal|"3"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|nspDesc
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Namespace descriptor found null."
argument_list|,
name|admin
operator|.
name|getNamespaceDescriptor
argument_list|(
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
name|NamespaceTableAndRegionInfo
name|stateInfo
init|=
name|getNamespaceState
argument_list|(
name|nspDesc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Namespace state found null for "
operator|+
name|namespace
argument_list|,
name|stateInfo
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|tableDescOne
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespace
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table1"
argument_list|)
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDescTwo
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespace
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table2"
argument_list|)
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescOne
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescTwo
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ZZZ"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|stateInfo
operator|=
name|getNamespaceState
argument_list|(
name|nspDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Namespace state found to be null."
argument_list|,
name|stateInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|stateInfo
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stateInfo
operator|.
name|getRegionCountOfTable
argument_list|(
name|tableDescTwo
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|stateInfo
operator|.
name|getRegionCount
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableDescOne
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableDescOne
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|stateInfo
operator|=
name|getNamespaceState
argument_list|(
name|nspDesc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Namespace state found to be null."
argument_list|,
name|stateInfo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|stateInfo
operator|.
name|getRegionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stateInfo
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableDescTwo
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableDescTwo
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|stateInfo
operator|=
name|getNamespaceState
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Namespace state not found to be null."
argument_list|,
name|stateInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|CPRegionServerObserver
extends|extends
name|BaseRegionServerObserver
block|{
specifier|private
name|boolean
name|shouldFailMerge
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|failMerge
parameter_list|(
name|boolean
name|fail
parameter_list|)
block|{
name|shouldFailMerge
operator|=
name|fail
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preMerge
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegion
name|regionA
parameter_list|,
name|HRegion
name|regionB
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shouldFailMerge
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"fail merge"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nsp1
init|=
name|prefix
operator|+
literal|"_regiontest"
decl_stmt|;
name|NamespaceDescriptor
name|nspDesc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|nsp1
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_REGIONS
argument_list|,
literal|"3"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_TABLES
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|nspDesc
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableTwo
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsp1
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnFamily
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDescOne
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableTwo
argument_list|)
decl_stmt|;
name|tableDescOne
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|columnFamily
argument_list|)
argument_list|)
expr_stmt|;
name|NamespaceTableAndRegionInfo
name|stateInfo
decl_stmt|;
specifier|final
name|int
name|initialRegions
init|=
literal|3
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescOne
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2000"
argument_list|)
argument_list|,
name|initialRegions
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|HTable
name|htable
init|=
operator|(
name|HTable
operator|)
name|connection
operator|.
name|getTable
argument_list|(
name|tableTwo
argument_list|)
decl_stmt|;
name|UTIL
operator|.
name|loadNumericRows
argument_list|(
name|htable
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableTwo
argument_list|)
expr_stmt|;
name|stateInfo
operator|=
name|getNamespaceState
argument_list|(
name|nsp1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableTwo
argument_list|)
decl_stmt|;
comment|// merge the two regions
name|admin
operator|.
name|mergeRegions
argument_list|(
name|hris
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|hris
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableTwo
argument_list|)
operator|.
name|size
argument_list|()
operator|==
name|initialRegions
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|hris
operator|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableTwo
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialRegions
operator|-
literal|1
argument_list|,
name|hris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HRegion
name|actualRegion
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableTwo
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|getSplitKey
argument_list|(
name|actualRegion
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|actualRegion
operator|.
name|getEndKey
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|tableTwo
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"500"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableTwo
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
name|initialRegions
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|initialRegions
argument_list|,
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableTwo
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fail region merge through Coprocessor hook
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|hris
operator|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableTwo
argument_list|)
expr_stmt|;
name|HRegionServer
name|regionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|cluster
operator|.
name|getServerWith
argument_list|(
name|hris
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|RegionServerCoprocessorHost
name|cpHost
init|=
name|regionServer
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
decl_stmt|;
name|Coprocessor
name|coprocessor
init|=
name|cpHost
operator|.
name|findCoprocessor
argument_list|(
name|CPRegionServerObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|CPRegionServerObserver
name|regionServerObserver
init|=
operator|(
name|CPRegionServerObserver
operator|)
name|coprocessor
decl_stmt|;
name|regionServerObserver
operator|.
name|failMerge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|mergeRegions
argument_list|(
name|hris
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|hris
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialRegions
argument_list|,
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableTwo
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that we cannot split
name|actualRegion
operator|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableTwo
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|tableTwo
argument_list|,
name|TableInputFormatBase
operator|.
name|getSplitKey
argument_list|(
name|actualRegion
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|actualRegion
operator|.
name|getEndKey
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableTwo
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
name|initialRegions
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|initialRegions
argument_list|,
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableTwo
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|regionServerObserver
operator|.
name|failMerge
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|htable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nsp1
init|=
name|prefix
operator|+
literal|"_regiontest"
decl_stmt|;
name|NamespaceDescriptor
name|nspDesc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|nsp1
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_REGIONS
argument_list|,
literal|"2"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_TABLES
argument_list|,
literal|"2"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|nspDesc
argument_list|)
expr_stmt|;
name|boolean
name|constraintViolated
init|=
literal|false
decl_stmt|;
specifier|final
name|TableName
name|tableOne
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsp1
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|columnFamily
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDescOne
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableOne
argument_list|)
decl_stmt|;
name|tableDescOne
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|columnFamily
argument_list|)
argument_list|)
expr_stmt|;
name|NamespaceTableAndRegionInfo
name|stateInfo
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescOne
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exp
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|exp
operator|instanceof
name|DoNotRetryIOException
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|constraintViolated
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
name|assertTrue
argument_list|(
name|constraintViolated
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableOne
argument_list|)
argument_list|)
expr_stmt|;
comment|// This call will pass.
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescOne
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|HTable
name|htable
init|=
operator|(
name|HTable
operator|)
name|connection
operator|.
name|getTable
argument_list|(
name|tableOne
argument_list|)
decl_stmt|;
name|UTIL
operator|.
name|loadNumericRows
argument_list|(
name|htable
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableOne
argument_list|)
expr_stmt|;
name|stateInfo
operator|=
name|getNamespaceState
argument_list|(
name|nsp1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stateInfo
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stateInfo
operator|.
name|getRegionCount
argument_list|()
argument_list|)
expr_stmt|;
name|restartMaster
argument_list|()
expr_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|tableOne
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"500"
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
name|actualRegion
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableOne
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CustomObserver
name|observer
init|=
operator|(
name|CustomObserver
operator|)
name|actualRegion
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|CustomObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|observer
operator|.
name|postSplit
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableOne
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|actualRegion
operator|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableOne
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|observer
operator|=
operator|(
name|CustomObserver
operator|)
name|actualRegion
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|CustomObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|observer
argument_list|)
expr_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|tableOne
argument_list|,
name|getSplitKey
argument_list|(
name|actualRegion
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|actualRegion
operator|.
name|getEndKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|observer
operator|.
name|postSplit
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Make sure no regions have been added.
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|hris
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableOne
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hris
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"split completed"
argument_list|,
name|observer
operator|.
name|preSplitBeforePONR
operator|.
name|getCount
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|htable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|NamespaceTableAndRegionInfo
name|getNamespaceState
parameter_list|(
name|String
name|namespace
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
return|return
name|getQuotaManager
argument_list|()
operator|.
name|getState
argument_list|(
name|namespace
argument_list|)
return|;
block|}
name|byte
index|[]
name|getSplitKey
parameter_list|(
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|)
block|{
name|String
name|skey
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|startKey
argument_list|)
decl_stmt|;
name|int
name|key
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|skey
argument_list|)
condition|)
block|{
name|key
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|endKey
argument_list|)
argument_list|)
operator|/
literal|2
expr_stmt|;
block|}
else|else
block|{
name|key
operator|=
call|(
name|int
call|)
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|skey
argument_list|)
operator|*
literal|1.5
argument_list|)
expr_stmt|;
block|}
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|key
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|CustomObserver
extends|extends
name|BaseRegionObserver
block|{
specifier|volatile
name|CountDownLatch
name|postSplit
decl_stmt|;
specifier|volatile
name|CountDownLatch
name|preSplitBeforePONR
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|postCompleteSplit
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|postSplit
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSplitBeforePONR
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|byte
index|[]
name|splitKey
parameter_list|,
name|List
argument_list|<
name|Mutation
argument_list|>
name|metaEntries
parameter_list|)
throws|throws
name|IOException
block|{
name|preSplitBeforePONR
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|e
parameter_list|)
throws|throws
name|IOException
block|{
name|postSplit
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|preSplitBeforePONR
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStatePreserve
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nsp1
init|=
name|prefix
operator|+
literal|"_testStatePreserve"
decl_stmt|;
name|NamespaceDescriptor
name|nspDesc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|nsp1
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_REGIONS
argument_list|,
literal|"20"
argument_list|)
operator|.
name|addConfiguration
argument_list|(
name|TableNamespaceManager
operator|.
name|KEY_MAX_TABLES
argument_list|,
literal|"10"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|nspDesc
argument_list|)
expr_stmt|;
name|TableName
name|tableOne
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsp1
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table1"
argument_list|)
decl_stmt|;
name|TableName
name|tableTwo
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsp1
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table2"
argument_list|)
decl_stmt|;
name|TableName
name|tableThree
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|nsp1
operator|+
name|TableName
operator|.
name|NAMESPACE_DELIM
operator|+
literal|"table3"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDescOne
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableOne
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDescTwo
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableTwo
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|tableDescThree
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableThree
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescOne
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescTwo
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescThree
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1000"
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableThree
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableThree
argument_list|)
expr_stmt|;
comment|// wait for chore to complete
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|1000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|getNamespaceState
argument_list|(
name|nsp1
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|NamespaceTableAndRegionInfo
name|before
init|=
name|getNamespaceState
argument_list|(
name|nsp1
argument_list|)
decl_stmt|;
name|restartMaster
argument_list|()
expr_stmt|;
name|NamespaceTableAndRegionInfo
name|after
init|=
name|getNamespaceState
argument_list|(
name|nsp1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected: "
operator|+
name|before
operator|.
name|getTables
argument_list|()
operator|+
literal|" Found: "
operator|+
name|after
operator|.
name|getTables
argument_list|()
argument_list|,
name|before
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|after
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|restartMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|stop
argument_list|(
literal|"Stopping to start again"
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|startMaster
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|isQuotaEnabled
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NamespaceAuditor
name|getQuotaManager
parameter_list|()
block|{
return|return
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|getNamespaceQuotaManager
argument_list|()
return|;
block|}
block|}
end_class

end_unit

