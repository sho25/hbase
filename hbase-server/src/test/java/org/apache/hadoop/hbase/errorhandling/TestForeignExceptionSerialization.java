begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test that we correctly serialize exceptions from a remote source  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestForeignExceptionSerialization
block|{
specifier|private
specifier|static
specifier|final
name|String
name|srcName
init|=
literal|"someNode"
decl_stmt|;
comment|/**    * Verify that we get back similar stack trace information before an after serialization.    * @throws IOException     */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleException
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|data
init|=
literal|"some bytes"
decl_stmt|;
name|ForeignException
name|in
init|=
operator|new
name|ForeignException
argument_list|(
literal|"SRC"
argument_list|,
operator|new
name|IllegalArgumentException
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
comment|// check that we get the data back out
name|ForeignException
name|e
init|=
name|ForeignException
operator|.
name|deserialize
argument_list|(
name|ForeignException
operator|.
name|serialize
argument_list|(
name|srcName
argument_list|,
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// now check that we get the right stack trace
name|StackTraceElement
name|elem
init|=
operator|new
name|StackTraceElement
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"method"
argument_list|,
literal|"file"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|in
operator|.
name|setStackTrace
argument_list|(
operator|new
name|StackTraceElement
index|[]
block|{
name|elem
block|}
argument_list|)
expr_stmt|;
name|e
operator|=
name|ForeignException
operator|.
name|deserialize
argument_list|(
name|ForeignException
operator|.
name|serialize
argument_list|(
name|srcName
argument_list|,
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Stack trace got corrupted"
argument_list|,
name|elem
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getStackTrace
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got an unexpectedly long stack trace"
argument_list|,
literal|1
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getStackTrace
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Compare that a generic exception's stack trace has the same stack trace elements after    * serialization and deserialization    * @throws IOException     */
annotation|@
name|Test
specifier|public
name|void
name|testRemoteFromLocal
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|errorMsg
init|=
literal|"some message"
decl_stmt|;
name|Exception
name|generic
init|=
operator|new
name|Exception
argument_list|(
name|errorMsg
argument_list|)
decl_stmt|;
name|generic
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|generic
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
name|ForeignException
name|e
init|=
name|ForeignException
operator|.
name|deserialize
argument_list|(
name|ForeignException
operator|.
name|serialize
argument_list|(
name|srcName
argument_list|,
name|generic
argument_list|)
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
literal|"Local stack trace got corrupted"
argument_list|,
name|generic
operator|.
name|getStackTrace
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// should have ForeignException and source node in it.
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// verify that original error message is present in Foreign exception message
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|errorMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

