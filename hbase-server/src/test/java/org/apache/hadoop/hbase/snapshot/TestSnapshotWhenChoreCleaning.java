begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNameTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|SnapshotHFileCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Test Case for HBASE-21387  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSnapshotWhenChoreCleaning
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSnapshotWhenChoreCleaning
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSnapshotClientRetries
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testTable"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SPLIT_KEYS_NUM
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Table
name|TABLE
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TableNameTestRule
name|testTable
init|=
operator|new
name|TableNameTestRule
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set the hbase.snapshot.thread.pool.max to 1;
name|CONF
operator|.
name|setInt
argument_list|(
literal|"hbase.snapshot.thread.pool.max"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Enable snapshot
name|CONF
operator|.
name|setBoolean
argument_list|(
name|SnapshotManager
operator|.
name|HBASE_SNAPSHOT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Start MiniCluster.
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Create talbe
name|createTable
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|integerToBytes
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%06d"
argument_list|,
name|i
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|createTable
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
name|MAX_SPLIT_KEYS_NUM
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|splitKeys
index|[
name|i
index|]
operator|=
name|integerToBytes
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|TABLE
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|loadDataAndFlush
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_SPLIT_KEYS_NUM
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|integerToBytes
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|VALUE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TABLE
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|flush
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|listHFileNames
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|tableDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|hfiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|FSVisitor
operator|.
name|visitTableStoreFiles
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|,
parameter_list|(
name|region
parameter_list|,
name|family
parameter_list|,
name|hfileName
parameter_list|)
lambda|->
block|{
name|hfiles
operator|.
name|add
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|region
argument_list|)
argument_list|,
name|family
argument_list|)
argument_list|,
name|hfileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|hfiles
argument_list|)
expr_stmt|;
return|return
name|hfiles
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isAnySnapshots
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getSnapshotsDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|CONF
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|snapFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|snapshotDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapFiles
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Path
name|firstPath
init|=
name|snapFiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"firstPath in isAnySnapshots: "
operator|+
name|firstPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|snapFiles
operator|.
name|length
operator|==
literal|1
operator|&&
name|firstPath
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|".tmp"
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|tmpSnapFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|firstPath
argument_list|)
decl_stmt|;
return|return
name|tmpSnapFiles
operator|!=
literal|null
operator|&&
name|tmpSnapFiles
operator|.
name|length
operator|>
literal|0
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotWhenSnapshotHFileCleanerRunning
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Load data and flush to generate huge number of HFiles.
name|loadDataAndFlush
argument_list|()
expr_stmt|;
name|SnapshotHFileCleaner
name|cleaner
init|=
operator|new
name|SnapshotHFileCleaner
argument_list|()
decl_stmt|;
name|cleaner
operator|.
name|init
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|HMaster
operator|.
name|MASTER
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|setConf
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FSUtils
operator|.
name|getCurrentFileSystem
argument_list|(
name|CONF
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|fileNames
init|=
name|listHFileNames
argument_list|(
name|fs
argument_list|,
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|CONF
argument_list|)
argument_list|,
name|TABLE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|fileName
range|:
name|fileNames
control|)
block|{
name|files
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|snapshot
argument_list|(
literal|"snapshotName_prev"
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|cleaner
operator|.
name|getDeletableFiles
argument_list|(
name|files
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|deleteSnapshot
argument_list|(
literal|"snapshotName_prev"
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|getFileCacheForTesting
argument_list|()
operator|.
name|triggerCacheRefreshForTesting
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|cleaner
operator|.
name|getDeletableFiles
argument_list|(
name|files
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Runnable
name|snapshotRunnable
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
comment|// The thread will be busy on taking snapshot;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|5
condition|;
name|k
operator|++
control|)
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|snapshot
argument_list|(
literal|"snapshotName_"
operator|+
name|k
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Snapshot failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicBoolean
name|success
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Runnable
name|cleanerRunnable
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
while|while
condition|(
operator|!
name|isAnySnapshots
argument_list|(
name|fs
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not found any snapshot, sleep 100ms"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|5
condition|;
name|k
operator|++
control|)
block|{
name|cleaner
operator|.
name|getFileCacheForTesting
argument_list|()
operator|.
name|triggerCacheRefreshForTesting
argument_list|()
expr_stmt|;
name|Iterable
argument_list|<
name|FileStatus
argument_list|>
name|toDeleteFiles
init|=
name|cleaner
operator|.
name|getDeletableFiles
argument_list|(
name|files
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FileStatus
argument_list|>
name|deletableFiles
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|toDeleteFiles
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Size of deletableFiles is: "
operator|+
name|deletableFiles
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deletableFiles
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"toDeleteFiles[{}] is: {}"
argument_list|,
name|i
argument_list|,
name|deletableFiles
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deletableFiles
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|success
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Chore cleaning failed: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|(
name|snapshotRunnable
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|t2
init|=
operator|new
name|Thread
argument_list|(
name|cleanerRunnable
argument_list|)
decl_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|success
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

