begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Basic test for check file's integrity before start BucketCache in fileIOEngine  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestVerifyBucketCacheFile
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestVerifyBucketCacheFile
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: blockSize={0}, bucketSizes={1}"
argument_list|)
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|8192
block|,
literal|null
block|}
block|,
block|{
literal|16
operator|*
literal|1024
block|,
operator|new
name|int
index|[]
block|{
literal|2
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|4
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|8
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|16
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|28
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|32
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|64
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|96
operator|*
literal|1024
operator|+
literal|1024
block|,
literal|128
operator|*
literal|1024
operator|+
literal|1024
block|}
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|0
argument_list|)
specifier|public
name|int
name|constructedBlockSize
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
literal|1
argument_list|)
specifier|public
name|int
index|[]
name|constructedBlockSizes
decl_stmt|;
specifier|final
name|long
name|capacitySize
init|=
literal|32
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|final
name|int
name|writeThreads
init|=
name|BucketCache
operator|.
name|DEFAULT_WRITER_THREADS
decl_stmt|;
specifier|final
name|int
name|writerQLen
init|=
name|BucketCache
operator|.
name|DEFAULT_WRITER_QUEUE_ITEMS
decl_stmt|;
comment|/**    * Test cache file or persistence file does not exist whether BucketCache starts normally    * (1) Start BucketCache and add some blocks, then shutdown BucketCache and persist cache    * to file. Restart BucketCache and it can restore cache from file.    * (2) Delete bucket cache file after shutdown BucketCache. Restart BucketCache and it can't    * restore cache from file, the cache file and persistence file would be deleted before    * BucketCache start normally.    * (3) Delete persistence file after shutdown BucketCache. Restart BucketCache and it can't    * restore cache from file, the cache file and persistence file would be deleted before    * BucketCache start normally.    * @throws Exception the exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRetrieveFromFile
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|Path
name|testDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|BucketCache
name|bucketCache
init|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
decl_stmt|;
name|long
name|usedSize
init|=
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|usedSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|CacheTestUtils
operator|.
name|HFileBlockPair
index|[]
name|blocks
init|=
name|CacheTestUtils
operator|.
name|generateHFileBlocks
argument_list|(
name|constructedBlockSize
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Add blocks
for|for
control|(
name|CacheTestUtils
operator|.
name|HFileBlockPair
name|block
range|:
name|blocks
control|)
block|{
name|cacheAndWaitUntilFlushedToBucket
argument_list|(
name|bucketCache
argument_list|,
name|block
operator|.
name|getBlockName
argument_list|()
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|usedSize
operator|=
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|usedSize
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// 1.persist cache to file
name|bucketCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// restore cache from file
name|bucketCache
operator|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|usedSize
argument_list|,
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// persist cache to file
name|bucketCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// 2.delete bucket cache file
name|File
name|cacheFile
init|=
operator|new
name|File
argument_list|(
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cacheFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
comment|// can't restore cache from file
name|bucketCache
operator|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucketCache
operator|.
name|backingMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add blocks
for|for
control|(
name|CacheTestUtils
operator|.
name|HFileBlockPair
name|block
range|:
name|blocks
control|)
block|{
name|cacheAndWaitUntilFlushedToBucket
argument_list|(
name|bucketCache
argument_list|,
name|block
operator|.
name|getBlockName
argument_list|()
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|usedSize
operator|=
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|usedSize
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// persist cache to file
name|bucketCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// 3.delete backingMap persistence file
name|File
name|mapFile
init|=
operator|new
name|File
argument_list|(
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mapFile
operator|.
name|delete
argument_list|()
argument_list|)
expr_stmt|;
comment|// can't restore cache from file
name|bucketCache
operator|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucketCache
operator|.
name|backingMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test whether BucketCache is started normally after modifying the cache file.    * Start BucketCache and add some blocks, then shutdown BucketCache and persist cache to file.    * Restart BucketCache after modify cache file's data, and it can't restore cache from file,    * the cache file and persistence file would be deleted before BucketCache start normally.    * @throws Exception the exception    */
annotation|@
name|Test
specifier|public
name|void
name|testModifiedBucketCacheFileData
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|Path
name|testDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|BucketCache
name|bucketCache
init|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
decl_stmt|;
name|long
name|usedSize
init|=
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|usedSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|CacheTestUtils
operator|.
name|HFileBlockPair
index|[]
name|blocks
init|=
name|CacheTestUtils
operator|.
name|generateHFileBlocks
argument_list|(
name|constructedBlockSize
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Add blocks
for|for
control|(
name|CacheTestUtils
operator|.
name|HFileBlockPair
name|block
range|:
name|blocks
control|)
block|{
name|cacheAndWaitUntilFlushedToBucket
argument_list|(
name|bucketCache
argument_list|,
name|block
operator|.
name|getBlockName
argument_list|()
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|usedSize
operator|=
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|usedSize
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// persist cache to file
name|bucketCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// modified bucket cache file
name|String
name|file
init|=
name|testDir
operator|+
literal|"/bucket.cache"
decl_stmt|;
try|try
init|(
name|BufferedWriter
name|out
init|=
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|"test bucket cache"
argument_list|)
expr_stmt|;
block|}
comment|// can't restore cache from file
name|bucketCache
operator|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucketCache
operator|.
name|backingMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test whether BucketCache is started normally after modifying the cache file's last modified    * time. First Start BucketCache and add some blocks, then shutdown BucketCache and persist    * cache to file. Then Restart BucketCache after modify cache file's last modified time, and    * it can't restore cache from file, the cache file and persistence file would be deleted    * before BucketCache start normally.    * @throws Exception the exception    */
annotation|@
name|Test
specifier|public
name|void
name|testModifiedBucketCacheFileTime
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|Path
name|testDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
name|BucketCache
name|bucketCache
init|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
decl_stmt|;
name|long
name|usedSize
init|=
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|usedSize
operator|==
literal|0
argument_list|)
expr_stmt|;
name|CacheTestUtils
operator|.
name|HFileBlockPair
index|[]
name|blocks
init|=
name|CacheTestUtils
operator|.
name|generateHFileBlocks
argument_list|(
name|constructedBlockSize
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// Add blocks
for|for
control|(
name|CacheTestUtils
operator|.
name|HFileBlockPair
name|block
range|:
name|blocks
control|)
block|{
name|cacheAndWaitUntilFlushedToBucket
argument_list|(
name|bucketCache
argument_list|,
name|block
operator|.
name|getBlockName
argument_list|()
argument_list|,
name|block
operator|.
name|getBlock
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|usedSize
operator|=
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|usedSize
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// persist cache to file
name|bucketCache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// modified bucket cache file LastModifiedTime
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|file
operator|.
name|setLastModified
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// can't restore cache from file
name|bucketCache
operator|=
operator|new
name|BucketCache
argument_list|(
literal|"file:"
operator|+
name|testDir
operator|+
literal|"/bucket.cache"
argument_list|,
name|capacitySize
argument_list|,
name|constructedBlockSize
argument_list|,
name|constructedBlockSizes
argument_list|,
name|writeThreads
argument_list|,
name|writerQLen
argument_list|,
name|testDir
operator|+
literal|"/bucket.persistence"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucketCache
operator|.
name|getAllocator
argument_list|()
operator|.
name|getUsedSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bucketCache
operator|.
name|backingMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|waitUntilFlushedToBucket
parameter_list|(
name|BucketCache
name|cache
parameter_list|,
name|BlockCacheKey
name|cacheKey
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
operator|!
name|cache
operator|.
name|backingMap
operator|.
name|containsKey
argument_list|(
name|cacheKey
argument_list|)
operator|||
name|cache
operator|.
name|ramCache
operator|.
name|containsKey
argument_list|(
name|cacheKey
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
comment|// BucketCache.cacheBlock is async, it first adds block to ramCache and writeQueue, then writer
comment|// threads will flush it to the bucket and put reference entry in backingMap.
specifier|private
name|void
name|cacheAndWaitUntilFlushedToBucket
parameter_list|(
name|BucketCache
name|cache
parameter_list|,
name|BlockCacheKey
name|cacheKey
parameter_list|,
name|Cacheable
name|block
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|waitUntilFlushedToBucket
argument_list|(
name|cache
argument_list|,
name|cacheKey
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

