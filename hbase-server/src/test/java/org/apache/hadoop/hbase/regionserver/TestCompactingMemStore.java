begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|MemoryMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * compacted memstore test case  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCompactingMemStore
extends|extends
name|TestDefaultMemStore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCompactingMemStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|MemStoreChunkPool
name|chunkPool
decl_stmt|;
specifier|private
name|HRegion
name|region
decl_stmt|;
specifier|private
name|RegionServicesForStores
name|regionServicesForStores
decl_stmt|;
specifier|private
name|HStore
name|store
decl_stmt|;
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Helpers
comment|//////////////////////////////////////////////////////////////////////////////
specifier|private
specifier|static
name|byte
index|[]
name|makeQualifier
parameter_list|(
specifier|final
name|int
name|i1
parameter_list|,
specifier|final
name|int
name|i2
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i1
argument_list|)
operator|+
literal|";"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i2
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|chunkPool
operator|.
name|clearChunks
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|internalSetUp
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|SegmentFactory
operator|.
name|USEMSLAB_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|MemStoreChunkPool
operator|.
name|CHUNK_POOL_MAXSIZE_KEY
argument_list|,
literal|0.2f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HRegion
operator|.
name|MEMSTORE_PERIODIC_FLUSH_INTERVAL
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
name|hbaseUtility
init|=
name|HBaseTestingUtility
operator|.
name|createLocalHTU
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|hbaseUtility
operator|.
name|createTestRegion
argument_list|(
literal|"foobar"
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
name|this
operator|.
name|regionServicesForStores
operator|=
name|region
operator|.
name|getRegionServicesForStores
argument_list|()
expr_stmt|;
name|this
operator|.
name|store
operator|=
operator|new
name|HStore
argument_list|(
name|region
argument_list|,
name|hcd
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|=
operator|new
name|CompactingMemStore
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|,
name|store
argument_list|,
name|regionServicesForStores
argument_list|)
expr_stmt|;
name|chunkPool
operator|=
name|MemStoreChunkPool
operator|.
name|getPool
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chunkPool
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * A simple test which verifies the 3 possible states when scanning across snapshot.    *    * @throws IOException    * @throws CloneNotSupportedException    */
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testScanAcrossSnapshot2
parameter_list|()
throws|throws
name|IOException
throws|,
name|CloneNotSupportedException
block|{
comment|// we are going to the scanning across snapshot with two kvs
comment|// kv1 should always be returned before kv2
specifier|final
name|byte
index|[]
name|one
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|two
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|q
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|v
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|one
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
literal|10
argument_list|,
name|v
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|two
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
literal|10
argument_list|,
name|v
argument_list|)
decl_stmt|;
comment|// use case 1: both kvs in kvset
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv1
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv2
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|verifyScanAcrossSnapshot2
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
comment|// use case 2: both kvs in snapshot
name|this
operator|.
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|verifyScanAcrossSnapshot2
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
comment|// use case 3: first in snapshot second in kvset
name|this
operator|.
name|memstore
operator|=
operator|new
name|CompactingMemStore
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|,
name|store
argument_list|,
name|regionServicesForStores
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv1
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
comment|// As compaction is starting in the background the repetition
comment|// of the k1 might be removed BUT the scanners created earlier
comment|// should look on the OLD MutableCellSetSegment, so this should be OK...
name|this
operator|.
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv2
operator|.
name|clone
argument_list|()
argument_list|)
expr_stmt|;
name|verifyScanAcrossSnapshot2
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test memstore snapshots    * @throws IOException    */
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotting
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|snapshotCount
init|=
literal|5
decl_stmt|;
comment|// Add some rows, run a snapshot. Do it a few times.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|snapshotCount
condition|;
name|i
operator|++
control|)
block|{
name|addRows
argument_list|(
name|this
operator|.
name|memstore
argument_list|)
expr_stmt|;
name|runSnapshot
argument_list|(
name|this
operator|.
name|memstore
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"History not being cleared"
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Get tests
comment|//////////////////////////////////////////////////////////////////////////////
comment|/** Test getNextRow from memstore    * @throws InterruptedException    */
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testGetNextRow
parameter_list|()
throws|throws
name|Exception
block|{
name|addRows
argument_list|(
name|this
operator|.
name|memstore
argument_list|)
expr_stmt|;
comment|// Add more versions to make it a little more interesting.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addRows
argument_list|(
name|this
operator|.
name|memstore
argument_list|)
expr_stmt|;
name|Cell
name|closestToEmpty
init|=
operator|(
operator|(
name|CompactingMemStore
operator|)
name|this
operator|.
name|memstore
operator|)
operator|.
name|getNextRow
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|closestToEmpty
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|nr
init|=
operator|(
operator|(
name|CompactingMemStore
operator|)
name|this
operator|.
name|memstore
operator|)
operator|.
name|getNextRow
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|ROW_COUNT
condition|)
block|{
name|assertEquals
argument_list|(
name|nr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|KeyValue
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|nr
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|//starting from each row, validate results should contain the starting row
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|startRowId
init|=
literal|0
init|;
name|startRowId
operator|<
name|ROW_COUNT
condition|;
name|startRowId
operator|++
control|)
block|{
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|conf
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|memstore
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
name|ScanType
name|scanType
init|=
name|ScanType
operator|.
name|USER_SCAN
decl_stmt|;
name|InternalScanner
name|scanner
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRowId
argument_list|)
argument_list|)
argument_list|,
name|scanInfo
argument_list|,
name|scanType
argument_list|,
literal|null
argument_list|,
name|memstore
operator|.
name|getScanners
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|rowId
init|=
name|startRowId
operator|+
name|i
decl_stmt|;
name|Cell
name|left
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Row name"
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|left
argument_list|,
name|row1
argument_list|,
literal|0
argument_list|,
name|row1
operator|.
name|length
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Count of columns"
argument_list|,
name|QUALIFIER_COUNT
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|row
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|isExpectedRowWithoutTimestamps
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|// Clear out set.  Otherwise row results accumulate.
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testGet_memstoreAndSnapShot
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
comment|//Setting up memstore
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
comment|//Pushing to pipeline
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Creating a snapshot
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Adding value to "new" memstore
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf4
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf5
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|////////////////////////////////////
comment|//Test for upsert with MSLAB
comment|////////////////////////////////////
comment|/**    * Test a pathological pattern that shows why we can't currently    * use the MSLAB for upsert workloads. This test inserts data    * in the following pattern:    *    * - row0001 through row1000 (fills up one 2M Chunk)    * - row0002 through row1001 (fills up another 2M chunk, leaves one reference    *   to the first chunk    * - row0003 through row1002 (another chunk, another dangling reference)    *    * This causes OOME pretty quickly if we use MSLAB for upsert    * since each 2M chunk is held onto by a single reference.    */
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testUpsertMSLAB
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|ROW_SIZE
init|=
literal|2048
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
operator|new
name|byte
index|[
name|ROW_SIZE
operator|-
literal|4
index|]
decl_stmt|;
name|MemoryMXBean
name|bean
init|=
name|ManagementFactory
operator|.
name|getMemoryMXBean
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|long
name|usageBefore
init|=
name|bean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
name|long
name|ts
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|newValue
init|=
literal|0
init|;
name|newValue
operator|<
literal|1000
condition|;
name|newValue
operator|++
control|)
block|{
for|for
control|(
name|int
name|row
init|=
name|newValue
init|;
name|row
operator|<
name|newValue
operator|+
literal|1000
condition|;
name|row
operator|++
control|)
block|{
name|byte
index|[]
name|rowBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|size
operator|+=
name|memstore
operator|.
name|updateColumnValue
argument_list|(
name|rowBytes
argument_list|,
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
name|newValue
argument_list|,
operator|++
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Wrote "
operator|+
name|ts
operator|+
literal|" vals"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|long
name|usageAfter
init|=
name|bean
operator|.
name|getHeapMemoryUsage
argument_list|()
operator|.
name|getUsed
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Memory used: "
operator|+
operator|(
name|usageAfter
operator|-
name|usageBefore
operator|)
operator|+
literal|" (heapsize: "
operator|+
name|memstore
operator|.
name|heapSize
argument_list|()
operator|+
literal|" size: "
operator|+
name|size
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
comment|////////////////////////////////////
comment|// Test for periodic memstore flushes
comment|// based on time of oldest edit
comment|////////////////////////////////////
comment|/**    * Add keyvalues with a fixed memstoreTs, and checks that memstore size is decreased    * as older keyvalues are deleted from the memstore.    *    * @throws Exception    */
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testUpsertMemstoreSize
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|oldSize
init|=
name|memstore
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|KeyValue
name|kv1
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|100
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|101
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|102
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|kv1
operator|.
name|setSequenceId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|kv2
operator|.
name|setSequenceId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|kv3
operator|.
name|setSequenceId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|upsert
argument_list|(
name|l
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// readpoint is 2
name|long
name|newSize
init|=
name|this
operator|.
name|memstore
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|newSize
operator|>
name|oldSize
operator|)
assert|;
comment|//The kv1 should be removed.
assert|assert
operator|(
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|KeyValue
name|kv4
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|104
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|kv4
operator|.
name|setSequenceId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|l
operator|.
name|clear
argument_list|()
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|kv4
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|upsert
argument_list|(
name|l
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newSize
argument_list|,
name|this
operator|.
name|memstore
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//The kv2 should be removed.
assert|assert
operator|(
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|//this.memstore = null;
block|}
comment|/**    * Tests that the timeOfOldestEdit is updated correctly for the    * various edit operations in memstore.    * @throws Exception    */
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testUpdateToTimeOfOldestEdit
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|EnvironmentEdgeForMemstoreTest
name|edge
init|=
operator|new
name|EnvironmentEdgeForMemstoreTest
argument_list|()
decl_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|long
name|t
init|=
name|memstore
operator|.
name|timeOfOldestEdit
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// test the case that the timeOfOldestEdit is updated after a KV add
name|memstore
operator|.
name|add
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|100
argument_list|,
literal|"v"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|memstore
operator|.
name|timeOfOldestEdit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|==
literal|1234
argument_list|)
expr_stmt|;
comment|// The method will also assert
comment|// the value is reset to Long.MAX_VALUE
name|t
operator|=
name|runSnapshot
argument_list|(
name|memstore
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test the case that the timeOfOldestEdit is updated after a KV delete
name|memstore
operator|.
name|delete
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|100
argument_list|,
literal|"v"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|memstore
operator|.
name|timeOfOldestEdit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|==
literal|1234
argument_list|)
expr_stmt|;
name|t
operator|=
name|runSnapshot
argument_list|(
name|memstore
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test the case that the timeOfOldestEdit is updated after a KV upsert
name|List
argument_list|<
name|Cell
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|KeyValue
name|kv1
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|100
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|kv1
operator|.
name|setSequenceId
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|upsert
argument_list|(
name|l
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|t
operator|=
name|memstore
operator|.
name|timeOfOldestEdit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|==
literal|1234
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|runSnapshot
parameter_list|(
specifier|final
name|AbstractMemStore
name|hmc
parameter_list|,
name|boolean
name|useForce
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Save off old state.
name|long
name|oldHistorySize
init|=
name|hmc
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|long
name|prevTimeStamp
init|=
name|hmc
operator|.
name|timeOfOldestEdit
argument_list|()
decl_stmt|;
name|hmc
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|hmc
operator|.
name|snapshot
argument_list|()
decl_stmt|;
if|if
condition|(
name|useForce
condition|)
block|{
comment|// Make some assertions about what just happened.
name|assertTrue
argument_list|(
literal|"History size has not increased"
argument_list|,
name|oldHistorySize
operator|<
name|snapshot
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t
init|=
name|hmc
operator|.
name|timeOfOldestEdit
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Time of oldest edit is not Long.MAX_VALUE"
argument_list|,
name|t
operator|==
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|hmc
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|t
init|=
name|hmc
operator|.
name|timeOfOldestEdit
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Time of oldest edit didn't remain the same"
argument_list|,
name|t
operator|==
name|prevTimeStamp
argument_list|)
expr_stmt|;
block|}
return|return
name|prevTimeStamp
return|;
block|}
specifier|private
name|void
name|isExpectedRowWithoutTimestamps
parameter_list|(
specifier|final
name|int
name|rowIndex
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|kvs
control|)
block|{
name|byte
index|[]
name|expectedColname
init|=
name|makeQualifier
argument_list|(
name|rowIndex
argument_list|,
name|i
operator|++
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Column name"
argument_list|,
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|kv
argument_list|,
name|expectedColname
argument_list|)
argument_list|)
expr_stmt|;
comment|// Value is column name as bytes.  Usually result is
comment|// 100 bytes in size at least. This is the default size
comment|// for BytesWriteable.  For comparison, convert bytes to
comment|// String and trim to remove trailing null bytes.
name|assertTrue
argument_list|(
literal|"Content"
argument_list|,
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|kv
argument_list|,
name|expectedColname
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPuttingBackChunksAfterFlushing
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
comment|// Setting up memstore
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
comment|// Creating a snapshot
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Adding value to "new" memstore
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf4
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf5
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|chunkCount
init|=
name|chunkPool
operator|.
name|getPoolSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|chunkCount
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPuttingBackChunksWithOpeningScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf6
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier6"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf7
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier7"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
comment|// Setting up memstore
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
comment|// Creating a snapshot
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Adding value to "new" memstore
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf4
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf5
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// opening scanner before clear the snapshot
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|memstore
operator|.
name|getScanners
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Shouldn't putting back the chunks to pool,since some scanners are opening
comment|// based on their data
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chunkPool
operator|.
name|getPoolSize
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Chunks will be put back to pool after close scanners;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|chunkPool
operator|.
name|getPoolSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// clear chunks
name|chunkPool
operator|.
name|clearChunks
argument_list|()
expr_stmt|;
comment|// Creating another snapshot
name|snapshot
operator|=
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
comment|// Adding more value
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf6
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf7
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
comment|// opening scanners
name|scanners
operator|=
name|memstore
operator|.
name|getScanners
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// close scanners before clear the snapshot
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Since no opening scanner, the chunks of snapshot should be put back to
comment|// pool
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chunkPool
operator|.
name|getPoolSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPuttingBackChunksWithOpeningPipelineScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
comment|// Setting up memstore
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
literal|1
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
literal|1
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
literal|1
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
comment|// Creating a pipeline
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|disableCompaction
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// Adding value to "new" memstore
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
literal|2
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
literal|2
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// pipeline bucket 2
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// opening scanner before force flushing
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|memstore
operator|.
name|getScanners
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Shouldn't putting back the chunks to pool,since some scanners are opening
comment|// based on their data
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|enableCompaction
argument_list|()
expr_stmt|;
comment|// trigger compaction
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// Adding value to "new" memstore
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
literal|3
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
literal|3
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
literal|3
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|chunkPool
operator|.
name|getPoolSize
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Chunks will be put back to pool after close scanners;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|chunkPool
operator|.
name|getPoolSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// clear chunks
name|chunkPool
operator|.
name|clearChunks
argument_list|()
expr_stmt|;
comment|// Creating another snapshot
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|snapshot
operator|=
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
comment|// Adding more value
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
literal|4
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
literal|4
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
comment|// opening scanners
name|scanners
operator|=
name|memstore
operator|.
name|getScanners
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// close scanners before clear the snapshot
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Since no opening scanner, the chunks of snapshot should be put back to
comment|// pool
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chunkPool
operator|.
name|getPoolSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Compaction tests
comment|//////////////////////////////////////////////////////////////////////////////
annotation|@
name|Test
specifier|public
name|void
name|testCompaction1Bucket
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
decl_stmt|;
comment|//A1, A2, B3, C4
comment|// test 1 bucket
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|496
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|size
init|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
decl_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|376
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// push keys to snapshot
name|region
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
operator|-
name|size
argument_list|)
expr_stmt|;
comment|// simulate flusher
name|ImmutableSegment
name|s
init|=
name|memstore
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompaction2Buckets
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
decl_stmt|;
name|String
index|[]
name|keys2
init|=
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"D"
block|}
decl_stmt|;
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|496
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|size
init|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
decl_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|376
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keys2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|752
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|496
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// push keys to snapshot
name|region
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
operator|-
name|size
argument_list|)
expr_stmt|;
comment|// simulate flusher
name|ImmutableSegment
name|s
init|=
name|memstore
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|s
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompaction3Buckets
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
decl_stmt|;
name|String
index|[]
name|keys2
init|=
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"D"
block|}
decl_stmt|;
name|String
index|[]
name|keys3
init|=
block|{
literal|"D"
block|,
literal|"B"
block|,
literal|"B"
block|}
decl_stmt|;
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|496
argument_list|,
name|region
operator|.
name|getMemstoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|size
init|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
decl_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
name|String
name|tstStr
init|=
literal|"\n\nFlushable size after first flush in memory:"
operator|+
name|size
operator|+
literal|". Is MemmStore in compaction?:"
operator|+
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|376
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keys2
argument_list|)
expr_stmt|;
name|tstStr
operator|+=
literal|" After adding second part of the keys. Memstore size: "
operator|+
name|region
operator|.
name|getMemstoreSize
argument_list|()
operator|+
literal|", Memstore Total Size: "
operator|+
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
operator|+
literal|"\n\n"
expr_stmt|;
name|assertEquals
argument_list|(
literal|752
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|disableCompaction
argument_list|()
expr_stmt|;
name|size
operator|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline without compaction
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|752
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keys3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1128
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|enableCompaction
argument_list|()
expr_stmt|;
name|size
operator|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|496
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// push keys to snapshot
name|region
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
operator|-
name|size
argument_list|)
expr_stmt|;
comment|// simulate flusher
name|ImmutableSegment
name|s
init|=
name|memstore
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|s
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|regionServicesForStores
operator|.
name|getGlobalMemstoreTotalSize
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|//assertTrue(tstStr, false);
block|}
specifier|private
name|void
name|addRowsByKeys
parameter_list|(
specifier|final
name|AbstractMemStore
name|hmc
parameter_list|,
name|String
index|[]
name|keys
parameter_list|)
block|{
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|hmc
operator|.
name|getActive
argument_list|()
operator|.
name|getSize
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// to make sure each kv gets a different ts
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keys
index|[
name|i
index|]
operator|+
name|i
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|timestamp
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|hmc
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"added kv: "
operator|+
name|kv
operator|.
name|getKeyString
argument_list|()
operator|+
literal|", timestamp:"
operator|+
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|regionServicesForStores
operator|.
name|addAndGetGlobalMemstoreSize
argument_list|(
name|hmc
operator|.
name|getActive
argument_list|()
operator|.
name|getSize
argument_list|()
operator|-
name|size
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|EnvironmentEdgeForMemstoreTest
implements|implements
name|EnvironmentEdge
block|{
name|long
name|t
init|=
literal|1234
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|currentTime
parameter_list|()
block|{
return|return
name|t
return|;
block|}
specifier|public
name|void
name|setCurrentTimeMillis
parameter_list|(
name|long
name|t
parameter_list|)
block|{
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

