begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSyncReplicationActive
extends|extends
name|SyncReplicationTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSyncReplicationActive
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testActive
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
comment|// confirm that peer with state A will reject replication request.
name|verifyReplicationRequestRejection
argument_list|(
name|UTIL1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|verifyReplicationRequestRejection
argument_list|(
name|UTIL2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|UTIL1
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// peer is disabled so no data have been replicated
name|verifyNotReplicatedThroughRegion
argument_list|(
name|UTIL2
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Ensure that there's no cluster id in remote log entries.
name|verifyNoClusterIdInRemoteLog
argument_list|(
name|UTIL2
argument_list|,
name|remoteWALDir2
argument_list|,
name|PEER_ID
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
expr_stmt|;
comment|// confirm that peer with state DA will reject replication request.
name|verifyReplicationRequestRejection
argument_list|(
name|UTIL2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// confirm that the data is there after we convert the peer to DA
name|verify
argument_list|(
name|UTIL2
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|writeAndVerifyReplication
argument_list|(
name|UTIL2
argument_list|,
name|UTIL1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// shutdown the cluster completely
name|UTIL1
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
comment|// confirm that we can convert to DA even if the remote slave cluster is down
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
expr_stmt|;
comment|// confirm that peer with state DA will reject replication request.
name|verifyReplicationRequestRejection
argument_list|(
name|UTIL2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|UTIL2
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyNoClusterIdInRemoteLog
parameter_list|(
name|HBaseTestingUtility
name|utility
parameter_list|,
name|Path
name|remoteDir
parameter_list|,
name|String
name|peerId
parameter_list|)
throws|throws
name|Exception
block|{
name|FileSystem
name|fs2
init|=
name|utility
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs2
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|remoteDir
argument_list|,
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|files
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
try|try
init|(
name|Reader
name|reader
init|=
name|WALFactory
operator|.
name|createReader
argument_list|(
name|fs2
argument_list|,
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|utility
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|entry
operator|!=
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClusterIds
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

