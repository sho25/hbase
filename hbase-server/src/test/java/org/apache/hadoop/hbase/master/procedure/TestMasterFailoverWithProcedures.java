begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
operator|.
name|WALProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|CreateTableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProcedureProtos
operator|.
name|DeleteTableState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ModifyRegionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMasterFailoverWithProcedures
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMasterFailoverWithProcedures
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|void
name|setupConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{   }
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConf
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|setToggleKillBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|setKillBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failure shutting down cluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testWalRecoverLease
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ProcedureStore
name|masterStore
init|=
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"expected WALStore for this test"
argument_list|,
name|masterStore
operator|instanceof
name|WALProcedureStore
argument_list|)
expr_stmt|;
name|HMaster
name|firstMaster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
comment|// Abort Latch for the master store
specifier|final
name|CountDownLatch
name|masterStoreAbort
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|masterStore
operator|.
name|registerListener
argument_list|(
operator|new
name|ProcedureStore
operator|.
name|ProcedureStoreListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|abortProcess
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Abort store of Master"
argument_list|)
expr_stmt|;
name|masterStoreAbort
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// startup a fake master the new WAL store will take the lease
comment|// and the active master should abort.
name|HMaster
name|backupMaster3
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HMaster
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|firstMaster
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|when
argument_list|(
name|backupMaster3
argument_list|)
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|backupMaster3
argument_list|)
operator|.
name|isActiveMaster
argument_list|()
expr_stmt|;
specifier|final
name|WALProcedureStore
name|backupStore3
init|=
operator|new
name|WALProcedureStore
argument_list|(
name|firstMaster
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|firstMaster
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
argument_list|,
operator|(
operator|(
name|WALProcedureStore
operator|)
name|masterStore
operator|)
operator|.
name|getLogDir
argument_list|()
argument_list|,
operator|new
name|MasterProcedureEnv
operator|.
name|WALStoreLeaseRecovery
argument_list|(
name|backupMaster3
argument_list|)
argument_list|)
decl_stmt|;
comment|// Abort Latch for the test store
specifier|final
name|CountDownLatch
name|backupStore3Abort
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|backupStore3
operator|.
name|registerListener
argument_list|(
operator|new
name|ProcedureStore
operator|.
name|ProcedureStoreListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|abortProcess
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Abort store of backupMaster3"
argument_list|)
expr_stmt|;
name|backupStore3Abort
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|backupStore3
operator|.
name|stop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|backupStore3
operator|.
name|start
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|backupStore3
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
comment|// Try to trigger a command on the master (WAL lease expired on the active one)
name|HTableDescriptor
name|htd
init|=
name|MasterProcedureTestingUtility
operator|.
name|createHTD
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"mtb"
argument_list|)
argument_list|,
literal|"f"
argument_list|)
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|ModifyRegionUtils
operator|.
name|createHRegionInfos
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"submit proc"
argument_list|)
expr_stmt|;
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|submitProcedure
argument_list|(
operator|new
name|CreateTableProcedure
argument_list|(
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|htd
argument_list|,
name|regions
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"wait master store abort"
argument_list|)
expr_stmt|;
name|masterStoreAbort
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Now the real backup master should start up
name|LOG
operator|.
name|debug
argument_list|(
literal|"wait backup master to startup"
argument_list|)
expr_stmt|;
name|waitBackupMaster
argument_list|(
name|UTIL
argument_list|,
name|firstMaster
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|firstMaster
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait the store in here to abort (the test will fail due to timeout if it doesn't)
name|LOG
operator|.
name|debug
argument_list|(
literal|"wait the store to abort"
argument_list|)
expr_stmt|;
name|backupStore3
operator|.
name|getStoreTracker
argument_list|()
operator|.
name|setDeleted
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|backupStore3
operator|.
name|delete
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|backupStore3Abort
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
comment|// ==========================================================================
comment|//  Test Create Table
comment|// ==========================================================================
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testCreateWithFailover
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: Should we try every step? (master failover takes long time)
comment|// It is already covered by TestCreateTableProcedure
comment|// but without the master restart, only the executor/store is restarted.
comment|// Without Master restart we may not find bug in the procedure code
comment|// like missing "wait" for resources to be available (e.g. RS)
name|testCreateWithFailoverAtStep
argument_list|(
name|CreateTableState
operator|.
name|CREATE_TABLE_ASSIGN_REGIONS
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testCreateWithFailoverAtStep
parameter_list|(
specifier|final
name|int
name|step
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCreateWithFailoverAtStep"
operator|+
name|step
argument_list|)
decl_stmt|;
comment|// create the table
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|setKillBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|setToggleKillBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Start the Create procedure&& kill the executor
name|byte
index|[]
index|[]
name|splitKeys
init|=
literal|null
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
name|MasterProcedureTestingUtility
operator|.
name|createHTD
argument_list|(
name|tableName
argument_list|,
literal|"f1"
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|ModifyRegionUtils
operator|.
name|createHRegionInfos
argument_list|(
name|htd
argument_list|,
name|splitKeys
argument_list|)
decl_stmt|;
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|CreateTableProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|htd
argument_list|,
name|regions
argument_list|)
argument_list|)
decl_stmt|;
name|testRecoveryAndDoubleExecution
argument_list|(
name|UTIL
argument_list|,
name|procId
argument_list|,
name|step
argument_list|,
name|CreateTableState
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|MasterProcedureTestingUtility
operator|.
name|validateTableCreation
argument_list|(
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|regions
argument_list|,
literal|"f1"
argument_list|,
literal|"f2"
argument_list|)
expr_stmt|;
block|}
comment|// ==========================================================================
comment|//  Test Delete Table
comment|// ==========================================================================
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDeleteWithFailover
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: Should we try every step? (master failover takes long time)
comment|// It is already covered by TestDeleteTableProcedure
comment|// but without the master restart, only the executor/store is restarted.
comment|// Without Master restart we may not find bug in the procedure code
comment|// like missing "wait" for resources to be available (e.g. RS)
name|testDeleteWithFailoverAtStep
argument_list|(
name|DeleteTableState
operator|.
name|DELETE_TABLE_UNASSIGN_REGIONS
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testDeleteWithFailoverAtStep
parameter_list|(
specifier|final
name|int
name|step
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testDeleteWithFailoverAtStep"
operator|+
name|step
argument_list|)
decl_stmt|;
comment|// create the table
name|byte
index|[]
index|[]
name|splitKeys
init|=
literal|null
decl_stmt|;
name|HRegionInfo
index|[]
name|regions
init|=
name|MasterProcedureTestingUtility
operator|.
name|createTable
argument_list|(
name|getMasterProcedureExecutor
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|splitKeys
argument_list|,
literal|"f1"
argument_list|,
literal|"f2"
argument_list|)
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|getRootDir
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|MasterProcedureTestingUtility
operator|.
name|validateTableCreation
argument_list|(
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|regions
argument_list|,
literal|"f1"
argument_list|,
literal|"f2"
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|setKillBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|setToggleKillBeforeStoreUpdate
argument_list|(
name|procExec
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Start the Delete procedure&& kill the executor
name|long
name|procId
init|=
name|procExec
operator|.
name|submitProcedure
argument_list|(
operator|new
name|DeleteTableProcedure
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|testRecoveryAndDoubleExecution
argument_list|(
name|UTIL
argument_list|,
name|procId
argument_list|,
name|step
argument_list|,
name|DeleteTableState
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|MasterProcedureTestingUtility
operator|.
name|validateTableDeletion
argument_list|(
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|regions
argument_list|,
literal|"f1"
argument_list|,
literal|"f2"
argument_list|)
expr_stmt|;
block|}
comment|// ==========================================================================
comment|//  Test Helpers
comment|// ==========================================================================
specifier|public
specifier|static
parameter_list|<
name|TState
parameter_list|>
name|void
name|testRecoveryAndDoubleExecution
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|testUtil
parameter_list|,
specifier|final
name|long
name|procId
parameter_list|,
specifier|final
name|int
name|lastStepBeforeFailover
parameter_list|,
name|TState
index|[]
name|states
parameter_list|)
throws|throws
name|Exception
block|{
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|testUtil
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lastStepBeforeFailover
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Restart "
operator|+
name|i
operator|+
literal|" exec state: "
operator|+
name|states
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|restart
argument_list|(
name|procExec
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
name|ProcedureTestingUtility
operator|.
name|assertProcNotYetCompleted
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Trigger master failover"
argument_list|)
expr_stmt|;
name|masterFailover
argument_list|(
name|testUtil
argument_list|)
expr_stmt|;
name|procExec
operator|=
name|testUtil
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|assertProcNotFailed
argument_list|(
name|procExec
argument_list|,
name|procId
argument_list|)
expr_stmt|;
block|}
comment|// ==========================================================================
comment|//  Master failover utils
comment|// ==========================================================================
specifier|public
specifier|static
name|void
name|masterFailover
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|testUtil
parameter_list|)
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|testUtil
operator|.
name|getMiniHBaseCluster
argument_list|()
decl_stmt|;
comment|// Kill the master
name|HMaster
name|oldMaster
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|killMaster
argument_list|(
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait the secondary
name|waitBackupMaster
argument_list|(
name|testUtil
argument_list|,
name|oldMaster
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|waitBackupMaster
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|testUtil
parameter_list|,
specifier|final
name|HMaster
name|oldMaster
parameter_list|)
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|testUtil
operator|.
name|getMiniHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|newMaster
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
while|while
condition|(
name|newMaster
operator|==
literal|null
operator|||
name|newMaster
operator|==
name|oldMaster
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|newMaster
operator|=
name|cluster
operator|.
name|getMaster
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
operator|!
operator|(
name|newMaster
operator|.
name|isActiveMaster
argument_list|()
operator|&&
name|newMaster
operator|.
name|isInitialized
argument_list|()
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
block|}
comment|// ==========================================================================
comment|//  Helpers
comment|// ==========================================================================
specifier|private
name|MasterProcedureEnv
name|getMasterProcedureEnv
parameter_list|()
block|{
return|return
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getEnvironment
argument_list|()
return|;
block|}
specifier|private
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|getMasterProcedureExecutor
parameter_list|()
block|{
return|return
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterProcedureExecutor
argument_list|()
return|;
block|}
specifier|private
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
return|;
block|}
specifier|private
name|Path
name|getRootDir
parameter_list|()
block|{
return|return
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
return|;
block|}
specifier|private
name|Path
name|getTempDir
parameter_list|()
block|{
return|return
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getTempDir
argument_list|()
return|;
block|}
block|}
end_class

end_unit

