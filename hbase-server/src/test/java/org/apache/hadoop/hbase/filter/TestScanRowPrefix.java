begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|FilterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test if Scan.setRowPrefixFilter works as intended.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|FilterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestScanRowPrefix
extends|extends
name|FilterTestingCluster
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestScanRowPrefix
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPrefixScanning
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"prefixScanning"
argument_list|)
decl_stmt|;
name|createTable
argument_list|(
name|tableName
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|openTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|/**      * Note that about half of these tests were relevant for an different implementation approach      * of setRowPrefixFilter. These test cases have been retained to ensure that also the      * edge cases found there are still covered.      */
specifier|final
name|byte
index|[]
index|[]
name|rowIds
init|=
block|{
block|{
operator|(
name|byte
operator|)
literal|0x11
block|}
block|,
comment|//  0
block|{
operator|(
name|byte
operator|)
literal|0x12
block|}
block|,
comment|//  1
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x23
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFE
block|}
block|,
comment|//  2
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x23
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
block|,
comment|//  3
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x23
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0x00
block|}
block|,
comment|//  4
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x23
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0x01
block|}
block|,
comment|//  5
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x24
block|}
block|,
comment|//  6
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x24
block|,
operator|(
name|byte
operator|)
literal|0x00
block|}
block|,
comment|//  7
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x24
block|,
operator|(
name|byte
operator|)
literal|0x00
block|,
operator|(
name|byte
operator|)
literal|0x00
block|}
block|,
comment|//  8
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x25
block|}
block|,
comment|//  9
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
block|,
comment|// 10
block|}
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|rowId
range|:
name|rowIds
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|rowId
argument_list|)
decl_stmt|;
comment|// Use the rowId as the column qualifier
name|p
operator|.
name|add
argument_list|(
literal|"F"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|rowId
argument_list|,
literal|"Dummy value"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|prefix0
init|=
block|{}
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|expected0
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|expected0
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|rowIds
argument_list|)
argument_list|)
expr_stmt|;
comment|// Expect all rows
name|byte
index|[]
name|prefix1
init|=
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x23
block|}
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|expected1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|expected1
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|expected1
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|expected1
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|expected1
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|prefix2
init|=
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x23
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|expected2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expected2
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|expected2
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|expected2
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|prefix3
init|=
block|{
operator|(
name|byte
operator|)
literal|0x12
block|,
operator|(
name|byte
operator|)
literal|0x24
block|}
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|expected3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expected3
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|expected3
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|expected3
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|prefix4
init|=
block|{
operator|(
name|byte
operator|)
literal|0xFF
block|,
operator|(
name|byte
operator|)
literal|0xFF
block|}
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|expected4
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expected4
operator|.
name|add
argument_list|(
name|rowIds
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
comment|// ========
comment|// PREFIX 0
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|prefix0
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected0
argument_list|,
literal|"Scan empty prefix failed"
argument_list|)
expr_stmt|;
comment|// ========
comment|// PREFIX 1
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|prefix1
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected1
argument_list|,
literal|"Scan normal prefix failed"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected0
argument_list|,
literal|"Scan after prefix reset failed"
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPrefixFilter
argument_list|(
name|prefix1
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected1
argument_list|,
literal|"Double check on column prefix failed"
argument_list|)
expr_stmt|;
comment|// ========
comment|// PREFIX 2
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|prefix2
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected2
argument_list|,
literal|"Scan edge 0xFF prefix failed"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected0
argument_list|,
literal|"Scan after prefix reset failed"
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPrefixFilter
argument_list|(
name|prefix2
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected2
argument_list|,
literal|"Double check on column prefix failed"
argument_list|)
expr_stmt|;
comment|// ========
comment|// PREFIX 3
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|prefix3
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected3
argument_list|,
literal|"Scan normal with 0x00 ends failed"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected0
argument_list|,
literal|"Scan after prefix reset failed"
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPrefixFilter
argument_list|(
name|prefix3
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected3
argument_list|,
literal|"Double check on column prefix failed"
argument_list|)
expr_stmt|;
comment|// ========
comment|// PREFIX 4
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|prefix4
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected4
argument_list|,
literal|"Scan end prefix failed"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected0
argument_list|,
literal|"Scan after prefix reset failed"
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPrefixFilter
argument_list|(
name|prefix4
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected4
argument_list|,
literal|"Double check on column prefix failed"
argument_list|)
expr_stmt|;
comment|// ========
comment|// COMBINED
comment|// Prefix + Filter
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|prefix1
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected1
argument_list|,
literal|"Prefix filter failed"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPrefixFilter
argument_list|(
name|prefix2
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected2
argument_list|,
literal|"Combined Prefix + Filter failed"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected2
argument_list|,
literal|"Combined Prefix + Filter; removing Prefix failed"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected0
argument_list|,
literal|"Scan after Filter reset failed"
argument_list|)
expr_stmt|;
comment|// ========
comment|// Reversed: Filter + Prefix
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPrefixFilter
argument_list|(
name|prefix2
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected2
argument_list|,
literal|"Test filter failed"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
name|prefix1
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected2
argument_list|,
literal|"Combined Filter + Prefix failed"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected1
argument_list|,
literal|"Combined Filter + Prefix ; removing Filter failed"
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setRowPrefixFilter
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verifyScanResult
argument_list|(
name|table
argument_list|,
name|scan
argument_list|,
name|expected0
argument_list|,
literal|"Scan after prefix reset failed"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyScanResult
parameter_list|(
name|Table
name|table
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|expectedKeys
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|actualKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|actualKeys
operator|.
name|add
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|fullMessage
init|=
name|message
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|fullMessage
operator|=
name|message
operator|+
literal|"\n"
operator|+
name|tableOfTwoListsOfByteArrays
argument_list|(
literal|"Expected"
argument_list|,
name|expectedKeys
argument_list|,
literal|"Actual  "
argument_list|,
name|actualKeys
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|fullMessage
argument_list|,
name|expectedKeys
operator|.
name|toArray
argument_list|()
argument_list|,
name|actualKeys
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|printMultiple
parameter_list|(
name|char
name|letter
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|count
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|letter
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|tableOfTwoListsOfByteArrays
parameter_list|(
name|String
name|label1
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|listOfBytes1
parameter_list|,
name|String
name|label2
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|listOfBytes2
parameter_list|)
block|{
name|int
name|margin1
init|=
name|calculateWidth
argument_list|(
name|label1
argument_list|,
name|listOfBytes1
argument_list|)
decl_stmt|;
name|int
name|margin2
init|=
name|calculateWidth
argument_list|(
name|label2
argument_list|,
name|listOfBytes2
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|512
argument_list|)
decl_stmt|;
name|String
name|separator
init|=
literal|'+'
operator|+
name|printMultiple
argument_list|(
literal|'-'
argument_list|,
name|margin1
operator|+
name|margin2
operator|+
literal|5
argument_list|)
operator|+
literal|'+'
operator|+
literal|'\n'
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|printLine
argument_list|(
name|label1
argument_list|,
name|margin1
argument_list|,
name|label2
argument_list|,
name|margin2
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|int
name|maxLength
init|=
name|Math
operator|.
name|max
argument_list|(
name|listOfBytes1
operator|.
name|size
argument_list|()
argument_list|,
name|listOfBytes2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|offset
init|=
literal|0
init|;
name|offset
operator|<
name|maxLength
condition|;
name|offset
operator|++
control|)
block|{
name|String
name|value1
init|=
name|getStringFromList
argument_list|(
name|listOfBytes1
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|String
name|value2
init|=
name|getStringFromList
argument_list|(
name|listOfBytes2
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|printLine
argument_list|(
name|value1
argument_list|,
name|margin1
argument_list|,
name|value2
argument_list|,
name|margin2
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|separator
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|printLine
parameter_list|(
name|String
name|leftValue
parameter_list|,
name|int
name|leftWidth1
parameter_list|,
name|String
name|rightValue
parameter_list|,
name|int
name|rightWidth
parameter_list|)
block|{
return|return
literal|"| "
operator|+
name|leftValue
operator|+
name|printMultiple
argument_list|(
literal|' '
argument_list|,
name|leftWidth1
operator|-
name|leftValue
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|" | "
operator|+
name|rightValue
operator|+
name|printMultiple
argument_list|(
literal|' '
argument_list|,
name|rightWidth
operator|-
name|rightValue
operator|.
name|length
argument_list|()
argument_list|)
operator|+
literal|" |"
return|;
block|}
specifier|private
name|int
name|calculateWidth
parameter_list|(
name|String
name|label1
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|listOfBytes1
parameter_list|)
block|{
name|int
name|longestList1
init|=
name|label1
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|value
range|:
name|listOfBytes1
control|)
block|{
name|longestList1
operator|=
name|Math
operator|.
name|max
argument_list|(
name|value
operator|.
name|length
operator|*
literal|2
argument_list|,
name|longestList1
argument_list|)
expr_stmt|;
block|}
return|return
name|longestList1
operator|+
literal|5
return|;
block|}
specifier|private
name|String
name|getStringFromList
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|listOfBytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|String
name|value1
decl_stmt|;
if|if
condition|(
name|listOfBytes
operator|.
name|size
argument_list|()
operator|>
name|offset
condition|)
block|{
name|value1
operator|=
name|Hex
operator|.
name|encodeHexString
argument_list|(
name|listOfBytes
operator|.
name|get
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value1
operator|=
literal|"<missing>"
expr_stmt|;
block|}
return|return
name|value1
return|;
block|}
block|}
end_class

end_unit

