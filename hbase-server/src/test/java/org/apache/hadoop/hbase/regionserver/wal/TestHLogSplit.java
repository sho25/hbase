begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|FSNamesystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLogSplitter
operator|.
name|CorruptedLogFileException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CancelableProgressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseExpiredException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|ipc
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_comment
comment|/**  * Testing {@link HLog} splitting code.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHLogSplit
block|{
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LeaseManager
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|FSNamesystem
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHLogSplit
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|HBASEDIR
init|=
operator|new
name|Path
argument_list|(
literal|"/hbase"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|HLOGDIR
init|=
operator|new
name|Path
argument_list|(
name|HBASEDIR
argument_list|,
literal|"hlog"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|OLDLOGDIR
init|=
operator|new
name|Path
argument_list|(
name|HBASEDIR
argument_list|,
literal|"hlog.old"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|CORRUPTDIR
init|=
operator|new
name|Path
argument_list|(
name|HBASEDIR
argument_list|,
name|HConstants
operator|.
name|CORRUPT_DIR_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_WRITERS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ENTRIES
init|=
literal|10
decl_stmt|;
comment|// entries per writer per region
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
literal|"f1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER
init|=
literal|"q1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE
init|=
literal|"v1"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HLOG_FILE_PREFIX
init|=
literal|"hlog.dat."
decl_stmt|;
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|REGIONS
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HBASE_SKIP_ERRORS
init|=
literal|"hbase.hlog.split.skip.errors"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|TABLEDIR
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|ROBBER
decl_stmt|;
specifier|private
specifier|static
name|String
name|ZOMBIE
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|GROUP
init|=
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
decl_stmt|;
specifier|static
enum|enum
name|Corruptions
block|{
name|INSERT_GARBAGE_ON_FIRST_LINE
block|,
name|INSERT_GARBAGE_IN_THE_MIDDLE
block|,
name|APPEND_GARBAGE
block|,
name|TRUNCATE
block|,
name|TRUNCATE_TRAILER
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|HBASEDIR
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.writer.impl"
argument_list|,
name|InstrumentedSequenceFileLogWriter
operator|.
name|class
argument_list|,
name|HLog
operator|.
name|Writer
operator|.
name|class
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.broken.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// This is how you turn off shortcircuit read currently.  TODO: Fix.  Should read config.
name|System
operator|.
name|setProperty
argument_list|(
literal|"hbase.tests.use.shortcircuit.reads"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// Create fake maping user to group and set it to the conf.
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|u2g_map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ROBBER
operator|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-robber"
expr_stmt|;
name|ZOMBIE
operator|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"-zombie"
expr_stmt|;
name|u2g_map
operator|.
name|put
argument_list|(
name|ROBBER
argument_list|,
name|GROUP
argument_list|)
expr_stmt|;
name|u2g_map
operator|.
name|put
argument_list|(
name|ZOMBIE
argument_list|,
name|GROUP
argument_list|)
expr_stmt|;
name|DFSTestUtil
operator|.
name|updateConfWithFakeGroupMapping
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|u2g_map
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.heartbeat.interval"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|flushToConsole
argument_list|(
literal|"Cleaning up cluster for new test\n"
operator|+
literal|"--------------------------"
argument_list|)
expr_stmt|;
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|FileStatus
index|[]
name|entries
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|flushToConsole
argument_list|(
literal|"Num entries in /:"
operator|+
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|dir
range|:
name|entries
control|)
block|{
name|assertTrue
argument_list|(
literal|"Deleting "
operator|+
name|dir
operator|.
name|getPath
argument_list|()
argument_list|,
name|fs
operator|.
name|delete
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// create the HLog directory because recursive log creates are not allowed
name|fs
operator|.
name|mkdirs
argument_list|(
name|HLOGDIR
argument_list|)
expr_stmt|;
name|REGIONS
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|REGIONS
argument_list|,
literal|"bbb"
argument_list|,
literal|"ccc"
argument_list|)
expr_stmt|;
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
comment|/**    * Simulates splitting a WAL out from under a regionserver that is still trying to write it.  Ensures we do not    * lose edits.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testLogCannotBeWrittenOnceParsed
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|AtomicLong
name|counter
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Region we'll write edits too and then later examine to make sure they all made it in.
specifier|final
name|String
name|region
init|=
name|REGIONS
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Thread
name|zombie
init|=
operator|new
name|ZombieLastLogWriterRegionServer
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|counter
argument_list|,
name|stop
argument_list|,
name|region
argument_list|)
decl_stmt|;
try|try
block|{
name|long
name|startCount
init|=
name|counter
operator|.
name|get
argument_list|()
decl_stmt|;
name|zombie
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Wait till writer starts going.
while|while
condition|(
name|startCount
operator|==
name|counter
operator|.
name|get
argument_list|()
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Give it a second to write a few appends.
name|Threads
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
specifier|final
name|Configuration
name|conf2
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|User
name|robber
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf2
argument_list|,
name|ROBBER
argument_list|,
name|GROUP
argument_list|)
decl_stmt|;
name|int
name|count
init|=
name|robber
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf2
argument_list|)
decl_stmt|;
name|int
name|expectedFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
operator|.
name|length
decl_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf2
argument_list|)
expr_stmt|;
name|Path
index|[]
name|logfiles
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFiles
argument_list|,
name|logfiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|logfile
range|:
name|logfiles
control|)
block|{
name|count
operator|+=
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf2
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"zombie="
operator|+
name|counter
operator|.
name|get
argument_list|()
operator|+
literal|", robber="
operator|+
name|count
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The log file could have at most 1 extra log entry, but can't have less. Zombie could write "
operator|+
name|counter
operator|.
name|get
argument_list|()
operator|+
literal|" and logfile had only "
operator|+
name|count
argument_list|,
name|counter
operator|.
name|get
argument_list|()
operator|==
name|count
operator|||
name|counter
operator|.
name|get
argument_list|()
operator|+
literal|1
operator|==
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|zombie
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|Threads
operator|.
name|threadDumpingIsAlive
argument_list|(
name|zombie
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This thread will keep writing to a 'wal' file even after the split process has started.    * It simulates a region server that was considered dead but woke up and wrote some more to he last log entry.    * Does its writing as an alternate user in another filesystem instance to simulate better it being a regionserver.    */
specifier|static
class|class
name|ZombieLastLogWriterRegionServer
extends|extends
name|Thread
block|{
specifier|final
name|AtomicLong
name|editsCount
decl_stmt|;
specifier|final
name|AtomicBoolean
name|stop
decl_stmt|;
comment|// final User user;
comment|/**      * Region to write edits for.      */
specifier|final
name|String
name|region
decl_stmt|;
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|final
name|User
name|user
decl_stmt|;
specifier|public
name|ZombieLastLogWriterRegionServer
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
name|AtomicLong
name|counter
parameter_list|,
name|AtomicBoolean
name|stop
parameter_list|,
specifier|final
name|String
name|region
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
literal|"ZombieLastLogWriterRegionServer"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|stop
operator|=
name|stop
expr_stmt|;
name|this
operator|.
name|editsCount
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|region
operator|=
name|region
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|ZOMBIE
argument_list|,
name|GROUP
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|doWriting
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getName
argument_list|()
operator|+
literal|" Writer exiting "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|getName
argument_list|()
operator|+
literal|" Writer exiting "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doWriting
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Index of the WAL we want to keep open.  generateHLogs will leave open the WAL whose index we supply here.
name|int
name|walToKeepOpen
init|=
literal|2
decl_stmt|;
comment|// How many files to write.
specifier|final
name|int
name|numOfWriters
init|=
name|walToKeepOpen
operator|+
literal|1
decl_stmt|;
comment|// The below method writes numOfWriters files each with ENTRIES entries for a total of numOfWriters * ENTRIES
comment|// added per column family in the region.
name|HLog
operator|.
name|Writer
index|[]
name|writers
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|writers
operator|=
name|generateHLogs
argument_list|(
name|dfs
argument_list|,
name|numOfWriters
argument_list|,
name|ENTRIES
argument_list|,
name|walToKeepOpen
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
comment|// Update counter so has all edits written so far.
name|editsCount
operator|.
name|addAndGet
argument_list|(
name|numOfWriters
operator|*
name|NUM_WRITERS
argument_list|)
expr_stmt|;
comment|// This WAL should be open still after our call to generateHLogs -- we asked it leave it open.
name|HLog
operator|.
name|Writer
name|writer
init|=
name|writers
index|[
name|walToKeepOpen
index|]
decl_stmt|;
name|loop
argument_list|(
name|writer
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loop
parameter_list|(
specifier|final
name|HLog
operator|.
name|Writer
name|writer
parameter_list|)
block|{
name|byte
index|[]
name|regionBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|this
operator|.
name|region
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|long
name|seq
init|=
name|appendEntry
argument_list|(
name|writer
argument_list|,
name|TABLE_NAME
argument_list|,
name|regionBytes
argument_list|,
operator|(
literal|"r"
operator|+
name|editsCount
operator|.
name|get
argument_list|()
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|regionBytes
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|editsCount
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|flushToConsole
argument_list|(
name|getName
argument_list|()
operator|+
literal|" sync count="
operator|+
name|count
operator|+
literal|", seq="
operator|+
name|seq
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|flushToConsole
argument_list|(
name|getName
argument_list|()
operator|+
literal|" ex "
operator|+
name|ex
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|RemoteException
condition|)
block|{
name|flushToConsole
argument_list|(
literal|"Juliet: got RemoteException "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
operator|+
literal|" while writing "
operator|+
operator|(
name|editsCount
operator|.
name|get
argument_list|()
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|flushToConsole
argument_list|(
name|getName
argument_list|()
operator|+
literal|" failed to write....at "
operator|+
name|editsCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to write "
operator|+
name|editsCount
operator|.
name|get
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|flushToConsole
argument_list|(
name|getName
argument_list|()
operator|+
literal|" HOW? "
operator|+
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|flushToConsole
argument_list|(
name|getName
argument_list|()
operator|+
literal|" Writer exiting"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @throws IOException    * @see https://issues.apache.org/jira/browse/HBASE-3020    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRecoveredEditsPathForMeta
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encoded
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
name|Path
name|tdir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|HBASEDIR
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Path
name|regiondir
init|=
operator|new
name|Path
argument_list|(
name|tdir
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|regiondir
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry
init|=
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
operator|new
name|HLogKey
argument_list|(
name|encoded
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
literal|1
argument_list|,
name|now
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
argument_list|,
operator|new
name|WALEdit
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|p
init|=
name|HLogSplitter
operator|.
name|getRegionSplitEditsPath
argument_list|(
name|fs
argument_list|,
name|entry
argument_list|,
name|HBASEDIR
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|parentOfParent
init|=
name|p
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|parentOfParent
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test old recovered edits file doesn't break HLogSplitter.    * This is useful in upgrading old instances.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testOldRecoveredEditsFileSidelined
parameter_list|()
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encoded
init|=
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
name|Path
name|tdir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|HBASEDIR
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Path
name|regiondir
init|=
operator|new
name|Path
argument_list|(
name|tdir
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|regiondir
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry
init|=
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
operator|new
name|HLogKey
argument_list|(
name|encoded
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
literal|1
argument_list|,
name|now
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
argument_list|,
operator|new
name|WALEdit
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|parent
init|=
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regiondir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|RECOVERED_EDITS_DIR
argument_list|)
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// create a recovered.edits file
name|Path
name|p
init|=
name|HLogSplitter
operator|.
name|getRegionSplitEditsPath
argument_list|(
name|fs
argument_list|,
name|entry
argument_list|,
name|HBASEDIR
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|parentOfParent
init|=
name|p
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|parentOfParent
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
name|HLogFactory
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSplitPreservesEdits
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|REGION
init|=
literal|"region__1"
decl_stmt|;
name|REGIONS
operator|.
name|removeAll
argument_list|(
name|REGIONS
argument_list|)
expr_stmt|;
name|REGIONS
operator|.
name|add
argument_list|(
name|REGION
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|originalLog
init|=
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|OLDLOGDIR
argument_list|)
operator|)
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
index|[]
name|splitLog
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|REGION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitLog
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"edits differ after split"
argument_list|,
literal|true
argument_list|,
name|logsAreEqual
argument_list|(
name|originalLog
argument_list|,
name|splitLog
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testEmptyLogFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|injectEmptyFile
argument_list|(
literal|".empty"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|injectEmptyFile
argument_list|(
literal|"empty"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// make fs act as a different client now
comment|// initialize will create a new DFSClient with a new client ID
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|expectedFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
operator|.
name|length
operator|-
literal|2
decl_stmt|;
comment|// less 2 empty files
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|REGIONS
control|)
block|{
name|Path
index|[]
name|logfiles
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFiles
argument_list|,
name|logfiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|logfile
range|:
name|logfiles
control|)
block|{
name|count
operator|+=
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_WRITERS
operator|*
name|ENTRIES
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testEmptyOpenLogFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|injectEmptyFile
argument_list|(
literal|".empty"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|injectEmptyFile
argument_list|(
literal|"empty"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// make fs act as a different client now
comment|// initialize will create a new DFSClient with a new client ID
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|expectedFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
operator|.
name|length
operator|-
literal|2
decl_stmt|;
comment|// less 2 empty files
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|REGIONS
control|)
block|{
name|Path
index|[]
name|logfiles
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFiles
argument_list|,
name|logfiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|logfile
range|:
name|logfiles
control|)
block|{
name|count
operator|+=
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_WRITERS
operator|*
name|ENTRIES
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testOpenZeroLengthReportedFileButWithDataGetsSplit
parameter_list|()
throws|throws
name|IOException
block|{
comment|// generate logs but leave hlog.dat.5 open.
name|generateHLogs
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|expectedFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
operator|.
name|length
decl_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|REGIONS
control|)
block|{
name|Path
index|[]
name|logfiles
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFiles
argument_list|,
name|logfiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|logfile
range|:
name|logfiles
control|)
block|{
name|count
operator|+=
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_WRITERS
operator|*
name|ENTRIES
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testTralingGarbageCorruptionFileSkipErrorsPasses
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
operator|new
name|Path
argument_list|(
name|HLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"5"
argument_list|)
argument_list|,
name|Corruptions
operator|.
name|APPEND_GARBAGE
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|expectedFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
operator|.
name|length
decl_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|REGIONS
control|)
block|{
name|Path
index|[]
name|logfiles
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFiles
argument_list|,
name|logfiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|logfile
range|:
name|logfiles
control|)
block|{
name|count
operator|+=
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_WRITERS
operator|*
name|ENTRIES
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testFirstLineCorruptionLogFileSkipErrorsPasses
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
operator|new
name|Path
argument_list|(
name|HLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"5"
argument_list|)
argument_list|,
name|Corruptions
operator|.
name|INSERT_GARBAGE_ON_FIRST_LINE
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|expectedFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
operator|.
name|length
operator|-
literal|1
decl_stmt|;
comment|// less 1 corrupted file
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|REGIONS
control|)
block|{
name|Path
index|[]
name|logfiles
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFiles
argument_list|,
name|logfiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|logfile
range|:
name|logfiles
control|)
block|{
name|count
operator|+=
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|(
name|NUM_WRITERS
operator|-
literal|1
operator|)
operator|*
name|ENTRIES
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMiddleGarbageCorruptionSkipErrorsReadsHalfOfFile
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
operator|new
name|Path
argument_list|(
name|HLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"5"
argument_list|)
argument_list|,
name|Corruptions
operator|.
name|INSERT_GARBAGE_IN_THE_MIDDLE
argument_list|,
literal|false
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|expectedFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
operator|.
name|length
decl_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|REGIONS
control|)
block|{
name|Path
index|[]
name|logfiles
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFiles
argument_list|,
name|logfiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|logfile
range|:
name|logfiles
control|)
block|{
name|count
operator|+=
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|// the entries in the original logs are alternating regions
comment|// considering the sequence file header, the middle corruption should
comment|// affect at least half of the entries
name|int
name|goodEntries
init|=
operator|(
name|NUM_WRITERS
operator|-
literal|1
operator|)
operator|*
name|ENTRIES
decl_stmt|;
name|int
name|firstHalfEntries
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|ENTRIES
operator|/
literal|2
argument_list|)
operator|-
literal|1
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The file up to the corrupted area hasn't been parsed"
argument_list|,
name|goodEntries
operator|+
name|firstHalfEntries
operator|<=
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCorruptedFileGetsArchivedIfSkipErrors
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|backupClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|false
expr_stmt|;
name|HLogFactory
operator|.
name|resetLogReaderClass
argument_list|()
expr_stmt|;
try|try
block|{
name|Path
name|c1
init|=
operator|new
name|Path
argument_list|(
name|HLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"0"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|FaultySequenceFileLogReader
operator|.
name|class
argument_list|,
name|HLog
operator|.
name|Reader
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|FaultySequenceFileLogReader
operator|.
name|FailureType
name|failureType
range|:
name|FaultySequenceFileLogReader
operator|.
name|FailureType
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"faultysequencefilelogreader.failuretype"
argument_list|,
name|failureType
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
literal|1
argument_list|,
name|ENTRIES
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|archivedLogs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|CORRUPTDIR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expected a different file"
argument_list|,
name|c1
operator|.
name|getName
argument_list|()
argument_list|,
name|archivedLogs
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|archivedLogs
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|OLDLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"0"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|backupClass
argument_list|,
name|Reader
operator|.
name|class
argument_list|)
expr_stmt|;
name|HLogFactory
operator|.
name|resetLogReaderClass
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|,
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTrailingGarbageCorruptionLogFileSkipErrorsFalseThrows
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|backupClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|false
expr_stmt|;
name|HLogFactory
operator|.
name|resetLogReaderClass
argument_list|()
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|FaultySequenceFileLogReader
operator|.
name|class
argument_list|,
name|HLog
operator|.
name|Reader
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"faultysequencefilelogreader.failuretype"
argument_list|,
name|FaultySequenceFileLogReader
operator|.
name|FailureType
operator|.
name|BEGINNING
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|backupClass
argument_list|,
name|Reader
operator|.
name|class
argument_list|)
expr_stmt|;
name|HLogFactory
operator|.
name|resetLogReaderClass
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCorruptedLogFilesSkipErrorsFalseDoesNotTouchLogs
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|backupClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|false
expr_stmt|;
name|HLogFactory
operator|.
name|resetLogReaderClass
argument_list|()
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|FaultySequenceFileLogReader
operator|.
name|class
argument_list|,
name|HLog
operator|.
name|Reader
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"faultysequencefilelogreader.failuretype"
argument_list|,
name|FaultySequenceFileLogReader
operator|.
name|FailureType
operator|.
name|BEGINNING
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"if skip.errors is false all files should remain in place"
argument_list|,
name|NUM_WRITERS
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|backupClass
argument_list|,
name|Reader
operator|.
name|class
argument_list|)
expr_stmt|;
name|HLogFactory
operator|.
name|resetLogReaderClass
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testEOFisIgnored
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|REGION
init|=
literal|"region__1"
decl_stmt|;
name|REGIONS
operator|.
name|removeAll
argument_list|(
name|REGIONS
argument_list|)
expr_stmt|;
name|REGIONS
operator|.
name|add
argument_list|(
name|REGION
argument_list|)
expr_stmt|;
name|int
name|entryCount
init|=
literal|10
decl_stmt|;
name|Path
name|c1
init|=
operator|new
name|Path
argument_list|(
name|HLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"0"
argument_list|)
decl_stmt|;
name|generateHLogs
argument_list|(
literal|1
argument_list|,
name|entryCount
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
name|c1
argument_list|,
name|Corruptions
operator|.
name|TRUNCATE
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
index|[]
name|splitLog
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|REGION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitLog
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|actualCount
init|=
literal|0
decl_stmt|;
name|HLog
operator|.
name|Reader
name|in
init|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|splitLog
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|HLog
operator|.
name|Entry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|in
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
operator|++
name|actualCount
expr_stmt|;
name|assertEquals
argument_list|(
name|entryCount
operator|-
literal|1
argument_list|,
name|actualCount
argument_list|)
expr_stmt|;
comment|// should not have stored the EOF files as corrupt
name|FileStatus
index|[]
name|archivedLogs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|CORRUPTDIR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|archivedLogs
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCorruptWALTrailer
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|REGION
init|=
literal|"region__1"
decl_stmt|;
name|REGIONS
operator|.
name|removeAll
argument_list|(
name|REGIONS
argument_list|)
expr_stmt|;
name|REGIONS
operator|.
name|add
argument_list|(
name|REGION
argument_list|)
expr_stmt|;
name|int
name|entryCount
init|=
literal|10
decl_stmt|;
name|Path
name|c1
init|=
operator|new
name|Path
argument_list|(
name|HLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|"0"
argument_list|)
decl_stmt|;
name|generateHLogs
argument_list|(
literal|1
argument_list|,
name|entryCount
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|corruptHLog
argument_list|(
name|c1
argument_list|,
name|Corruptions
operator|.
name|TRUNCATE_TRAILER
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
index|[]
name|splitLog
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|REGION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitLog
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|actualCount
init|=
literal|0
decl_stmt|;
name|HLog
operator|.
name|Reader
name|in
init|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|splitLog
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|HLog
operator|.
name|Entry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|in
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
operator|++
name|actualCount
expr_stmt|;
name|assertEquals
argument_list|(
name|entryCount
argument_list|,
name|actualCount
argument_list|)
expr_stmt|;
comment|// should not have stored the EOF files as corrupt
name|FileStatus
index|[]
name|archivedLogs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|CORRUPTDIR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|archivedLogs
operator|.
name|length
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testLogsGetArchivedAfterSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|archivedLogs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|OLDLOGDIR
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"wrong number of files in the archive log"
argument_list|,
name|NUM_WRITERS
argument_list|,
name|archivedLogs
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|expectedFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
operator|.
name|length
decl_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|REGIONS
control|)
block|{
name|Path
index|[]
name|logfiles
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedFiles
argument_list|,
name|logfiles
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Path
name|logfile
range|:
name|logfiles
control|)
block|{
name|count
operator|+=
name|countHLog
argument_list|(
name|logfile
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NUM_WRITERS
operator|*
name|ENTRIES
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testLogDirectoryShouldBeDeletedAfterSuccessfulSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|statuses
init|=
literal|null
decl_stmt|;
try|try
block|{
name|statuses
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
expr_stmt|;
if|if
condition|(
name|statuses
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Files left in log dir: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|statuses
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
comment|// hadoop 0.21 throws FNFE whereas hadoop 0.20 returns null
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|,
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSplitWillFailIfWritingToRegionFails
parameter_list|()
throws|throws
name|Exception
block|{
comment|//leave 5th log open so we could append the "trap"
name|HLog
operator|.
name|Writer
index|[]
name|writer
init|=
name|generateHLogs
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|String
name|region
init|=
literal|"break"
decl_stmt|;
name|Path
name|regiondir
init|=
operator|new
name|Path
argument_list|(
name|TABLEDIR
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|regiondir
argument_list|)
expr_stmt|;
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|false
expr_stmt|;
name|appendEntry
argument_list|(
name|writer
index|[
literal|4
index|]
argument_list|,
name|TABLE_NAME
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|region
argument_list|)
argument_list|,
operator|(
literal|"r"
operator|+
literal|999
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
index|[
literal|4
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|true
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"This exception is instrumented and should only be thrown for testing"
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|InstrumentedSequenceFileLogWriter
operator|.
name|activateFailure
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// @Test TODO this test has been disabled since it was created!
comment|// It currently fails because the second split doesn't output anything
comment|// -- because there are no region dirs after we move aside the first
comment|// split result
specifier|public
name|void
name|testSplittingLargeNumberOfRegionsConsistency
parameter_list|()
throws|throws
name|IOException
block|{
name|REGIONS
operator|.
name|removeAll
argument_list|(
name|REGIONS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|REGIONS
operator|.
name|add
argument_list|(
literal|"region__"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|generateHLogs
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|OLDLOGDIR
argument_list|,
name|HLOGDIR
argument_list|)
expr_stmt|;
name|Path
name|firstSplitPath
init|=
operator|new
name|Path
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
operator|+
literal|".first"
argument_list|)
decl_stmt|;
name|Path
name|splitPath
init|=
operator|new
name|Path
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|splitPath
argument_list|,
name|firstSplitPath
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|compareHLogSplitDirs
argument_list|(
name|firstSplitPath
argument_list|,
name|splitPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSplitDeletedRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|REGIONS
operator|.
name|removeAll
argument_list|(
name|REGIONS
argument_list|)
expr_stmt|;
name|String
name|region
init|=
literal|"region_that_splits"
decl_stmt|;
name|REGIONS
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|regiondir
init|=
operator|new
name|Path
argument_list|(
name|TABLEDIR
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|regiondir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|regiondir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testIOEOnOutputThread
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|logfiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There should be some log file"
argument_list|,
name|logfiles
operator|!=
literal|null
operator|&&
name|logfiles
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Set up a splitter that will throw an IOE on the output side
name|HLogSplitter
name|logSplitter
init|=
operator|new
name|HLogSplitter
argument_list|(
name|conf
argument_list|,
name|HBASEDIR
argument_list|,
name|fs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
specifier|protected
name|HLog
operator|.
name|Writer
name|createWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logfile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HLog
operator|.
name|Writer
name|mockWriter
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HLog
operator|.
name|Writer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Injected"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|append
argument_list|(
name|Mockito
operator|.
expr|<
name|HLog
operator|.
name|Entry
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mockWriter
return|;
block|}
block|}
decl_stmt|;
comment|// Set up a background thread dumper.  Needs a thread to depend on and then we need to run
comment|// the thread dumping in a background thread so it does not hold up the test.
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Thread
name|someOldThread
init|=
operator|new
name|Thread
argument_list|(
literal|"Some-old-thread"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|someOldThread
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|someOldThread
operator|.
name|start
argument_list|()
expr_stmt|;
specifier|final
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|"Background-thread-dumper"
argument_list|)
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|Threads
operator|.
name|threadDumpingIsAlive
argument_list|(
name|someOldThread
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|logSplitter
operator|.
name|splitLogFile
argument_list|(
name|logfiles
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Didn't throw!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Injected"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Setting this to true will turn off the background thread dumper.
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test for HBASE-3412
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMovedHLogDuringRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// This partial mock will throw LEE for every file simulating
comment|// files that were moved
name|FileSystem
name|spiedFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|fs
argument_list|)
decl_stmt|;
comment|// The "File does not exist" part is very important,
comment|// that's how it comes out of HDFS
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|LeaseExpiredException
argument_list|(
literal|"Injected: File does not exist"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spiedFs
argument_list|)
operator|.
name|append
argument_list|(
name|Mockito
operator|.
expr|<
name|Path
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|spiedFs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_WRITERS
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|OLDLOGDIR
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|HLOGDIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"There shouldn't be any exception but: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRetryOpenDuringRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileSystem
name|spiedFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|fs
argument_list|)
decl_stmt|;
comment|// The "Cannot obtain block length", "Could not obtain the last block",
comment|// and "Blocklist for [^ ]* has changed.*" part is very important,
comment|// that's how it comes out of HDFS. If HDFS changes the exception
comment|// message, this test needs to be adjusted accordingly.
comment|//
comment|// When DFSClient tries to open a file, HDFS needs to locate
comment|// the last block of the file and get its length. However, if the
comment|// last block is under recovery, HDFS may have problem to obtain
comment|// the block length, in which case, retry may help.
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|String
index|[]
name|errors
init|=
operator|new
name|String
index|[]
block|{
literal|"Cannot obtain block length"
block|,
literal|"Could not obtain the last block"
block|,
literal|"Blocklist for "
operator|+
name|OLDLOGDIR
operator|+
literal|" has changed"
block|}
decl_stmt|;
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|public
name|FSDataInputStream
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|count
operator|<
literal|3
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|errors
index|[
name|count
operator|++
index|]
argument_list|)
throw|;
block|}
return|return
operator|(
name|FSDataInputStream
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spiedFs
argument_list|)
operator|.
name|open
argument_list|(
name|Mockito
operator|.
expr|<
name|Path
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|spiedFs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_WRITERS
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|OLDLOGDIR
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|HLOGDIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"There shouldn't be any exception but: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testTerminationAskedByReporter
parameter_list|()
throws|throws
name|IOException
throws|,
name|CorruptedLogFileException
block|{
name|generateHLogs
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|FileStatus
name|logfile
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|count
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|CancelableProgressable
name|localReporter
init|=
operator|new
name|CancelableProgressable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|progress
parameter_list|()
block|{
name|count
operator|.
name|getAndIncrement
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|FileSystem
name|spiedFs
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|FSDataInputStream
argument_list|>
argument_list|()
block|{
specifier|public
name|FSDataInputStream
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
comment|// Sleep a while and wait report status invoked
return|return
operator|(
name|FSDataInputStream
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spiedFs
argument_list|)
operator|.
name|open
argument_list|(
name|Mockito
operator|.
expr|<
name|Path
operator|>
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.splitlog.report.period"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|HLogSplitter
operator|.
name|splitLogFile
argument_list|(
name|HBASEDIR
argument_list|,
name|logfile
argument_list|,
name|spiedFs
argument_list|,
name|conf
argument_list|,
name|localReporter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Log splitting should failed"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"There shouldn't be any exception but: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// reset it back to its default value
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.splitlog.report.period"
argument_list|,
literal|59000
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test log split process with fake data and lots of edits to trigger threading    * issues.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testThreading
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestThreading
argument_list|(
literal|20000
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test blocking behavior of the log split process if writers are writing slower    * than the reader is reading.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testThreadingSlowWriterSmallBuffer
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestThreading
argument_list|(
literal|200
argument_list|,
literal|1024
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets up a log splitter with a mock reader and writer. The mock reader generates    * a specified number of edits spread across 5 regions. The mock writer optionally    * sleeps for each edit it is fed.    * *    * After the split is complete, verifies that the statistics show the correct number    * of edits output into each region.    *    * @param numFakeEdits number of fake edits to push through pipeline    * @param bufferSize size of in-memory buffer    * @param writerSlowness writer threads will sleep this many ms per edit    */
specifier|private
name|void
name|doTestThreading
parameter_list|(
specifier|final
name|int
name|numFakeEdits
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|,
specifier|final
name|int
name|writerSlowness
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|localConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|localConf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.buffersize"
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
comment|// Create a fake log file (we'll override the reader to produce a stream of edits)
name|Path
name|logPath
init|=
operator|new
name|Path
argument_list|(
name|HLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|".fake"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|logPath
argument_list|)
decl_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make region dirs for our destination regions so the output doesn't get skipped
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"r0"
argument_list|,
literal|"r1"
argument_list|,
literal|"r2"
argument_list|,
literal|"r3"
argument_list|,
literal|"r4"
argument_list|)
decl_stmt|;
name|makeRegionDirs
argument_list|(
name|fs
argument_list|,
name|regions
argument_list|)
expr_stmt|;
comment|// Create a splitter that reads and writes the data without touching disk
name|HLogSplitter
name|logSplitter
init|=
operator|new
name|HLogSplitter
argument_list|(
name|localConf
argument_list|,
name|HBASEDIR
argument_list|,
name|fs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
comment|/* Produce a mock writer that doesn't write anywhere */
specifier|protected
name|HLog
operator|.
name|Writer
name|createWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logfile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HLog
operator|.
name|Writer
name|mockWriter
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HLog
operator|.
name|Writer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
name|int
name|expectedIndex
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
if|if
condition|(
name|writerSlowness
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|writerSlowness
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|HLog
operator|.
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|WALEdit
name|edit
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|keyValues
init|=
name|edit
operator|.
name|getKeyValues
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|keyValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|kv
init|=
name|keyValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Check that the edits come in the right order.
name|assertEquals
argument_list|(
name|expectedIndex
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|kv
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expectedIndex
operator|++
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockWriter
argument_list|)
operator|.
name|append
argument_list|(
name|Mockito
operator|.
expr|<
name|HLog
operator|.
name|Entry
operator|>
name|any
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mockWriter
return|;
block|}
comment|/* Produce a mock reader that generates fake entries */
specifier|protected
name|Reader
name|getReader
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|curLogFile
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|CancelableProgressable
name|reporter
parameter_list|)
throws|throws
name|IOException
block|{
name|Reader
name|mockReader
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|HLog
operator|.
name|Entry
argument_list|>
argument_list|()
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|HLog
operator|.
name|Entry
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|index
operator|>=
name|numFakeEdits
condition|)
return|return
literal|null
return|;
comment|// Generate r0 through r4 in round robin fashion
name|int
name|regionIdx
init|=
name|index
operator|%
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
name|byte
name|region
index|[]
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'r'
block|,
call|(
name|byte
call|)
argument_list|(
literal|0x30
operator|+
name|regionIdx
argument_list|)
block|}
decl_stmt|;
name|HLog
operator|.
name|Entry
name|ret
init|=
name|createTestEntry
argument_list|(
name|TABLE_NAME
argument_list|,
name|region
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
call|(
name|int
call|)
argument_list|(
name|index
operator|/
name|regions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|index
operator|++
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|mockReader
argument_list|)
operator|.
name|next
argument_list|()
expr_stmt|;
return|return
name|mockReader
return|;
block|}
block|}
decl_stmt|;
name|logSplitter
operator|.
name|splitLogFile
argument_list|(
name|fs
operator|.
name|getFileStatus
argument_list|(
name|logPath
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Verify number of written edits per region
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|outputCounts
init|=
name|logSplitter
operator|.
name|outputSink
operator|.
name|getOutputCounts
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|outputCounts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|" output edits for region "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|numFakeEdits
operator|/
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|outputCounts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// HBASE-2312: tests the case where a RegionServer enters a GC pause,
comment|// comes back online after the master declared it dead and started to split.
comment|// Want log rolling after a master split to fail
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
annotation|@
name|Ignore
argument_list|(
literal|"Need HADOOP-6886, HADOOP-6840,& HDFS-617 for this. HDFS 0.20.205.1+ should have this"
argument_list|)
specifier|public
name|void
name|testLogRollAfterSplitStart
parameter_list|()
throws|throws
name|IOException
block|{
comment|// set flush interval to a large number so it doesn't interrupt us
specifier|final
name|String
name|F_INTERVAL
init|=
literal|"hbase.regionserver.optionallogflushinterval"
decl_stmt|;
name|long
name|oldFlushInterval
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|F_INTERVAL
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|F_INTERVAL
argument_list|,
literal|1000
operator|*
literal|1000
operator|*
literal|100
argument_list|)
expr_stmt|;
name|HLog
name|log
init|=
literal|null
decl_stmt|;
name|String
name|logName
init|=
literal|"testLogRollAfterSplitStart"
decl_stmt|;
name|Path
name|thisTestsDir
init|=
operator|new
name|Path
argument_list|(
name|HBASEDIR
argument_list|,
name|logName
argument_list|)
decl_stmt|;
try|try
block|{
comment|// put some entries in an HLog
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
name|regioninfo
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|log
operator|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|HBASEDIR
argument_list|,
name|logName
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|int
name|total
init|=
literal|20
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|kvs
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"column"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|regioninfo
argument_list|,
name|tableName
argument_list|,
name|kvs
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
comment|// Send the data to HDFS datanodes and close the HDFS writer
name|log
operator|.
name|sync
argument_list|()
expr_stmt|;
operator|(
operator|(
name|FSHLog
operator|)
name|log
operator|)
operator|.
name|cleanupCurrentWriter
argument_list|(
name|log
operator|.
name|getFilenum
argument_list|()
argument_list|)
expr_stmt|;
comment|/* code taken from ProcessServerShutdown.process()        * handles RS shutdowns (as observed by the Master)        */
comment|// rename the directory so a rogue RS doesn't create more HLogs
name|Path
name|rsSplitDir
init|=
operator|new
name|Path
argument_list|(
name|thisTestsDir
operator|.
name|getParent
argument_list|()
argument_list|,
name|thisTestsDir
operator|.
name|getName
argument_list|()
operator|+
literal|"-splitting"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|thisTestsDir
argument_list|,
name|rsSplitDir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Renamed region directory: "
operator|+
name|rsSplitDir
argument_list|)
expr_stmt|;
comment|// Process the old log files
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|rsSplitDir
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Now, try to roll the HLog and verify failure
try|try
block|{
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"rollWriter() did not throw any exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
if|if
condition|(
name|ioe
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"FileNotFound"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got the expected exception: "
argument_list|,
name|ioe
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unexpected exception: "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|F_INTERVAL
argument_list|,
name|oldFlushInterval
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|thisTestsDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|thisTestsDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This thread will keep adding new log files    * It simulates a region server that was considered dead but woke up and wrote    * some more to a new hlog    */
class|class
name|ZombieNewLogWriterRegionServer
extends|extends
name|Thread
block|{
name|AtomicBoolean
name|stop
decl_stmt|;
name|CountDownLatch
name|latch
decl_stmt|;
specifier|public
name|ZombieNewLogWriterRegionServer
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|,
name|AtomicBoolean
name|stop
parameter_list|)
block|{
name|super
argument_list|(
literal|"ZombieNewLogWriterRegionServer"
argument_list|)
expr_stmt|;
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
name|this
operator|.
name|stop
operator|=
name|stop
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
return|return;
block|}
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|REGIONS
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|recoveredEdits
init|=
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|HConstants
operator|.
name|RECOVERED_EDITS_DIR
argument_list|)
decl_stmt|;
name|String
name|region
init|=
literal|"juliet"
decl_stmt|;
name|Path
name|julietLog
init|=
operator|new
name|Path
argument_list|(
name|HLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
literal|".juliet"
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|recoveredEdits
argument_list|)
operator|&&
operator|!
name|stop
operator|.
name|get
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Juliet: split not started, sleeping a bit..."
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Writer
name|writer
init|=
name|HLogFactory
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|julietLog
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|appendEntry
argument_list|(
name|writer
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"juliet"
argument_list|)
argument_list|,
operator|(
literal|"juliet"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
literal|"r"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Juliet file creator: created file "
operator|+
name|julietLog
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create file "
operator|+
name|julietLog
argument_list|,
name|e1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Failed to create file "
operator|+
name|julietLog
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSplitLogFileWithOneRegion
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSplitLogFileWithOneRegion"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|REGION
init|=
literal|"region__1"
decl_stmt|;
name|REGIONS
operator|.
name|removeAll
argument_list|(
name|REGIONS
argument_list|)
expr_stmt|;
name|REGIONS
operator|.
name|add
argument_list|(
name|REGION
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|originalLog
init|=
operator|(
name|fs
operator|.
name|listStatus
argument_list|(
name|OLDLOGDIR
argument_list|)
operator|)
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Path
index|[]
name|splitLog
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|REGION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|splitLog
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|logsAreEqual
argument_list|(
name|originalLog
argument_list|,
name|splitLog
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSplitLogFileDeletedRegionDir
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSplitLogFileDeletedRegionDir"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|REGION
init|=
literal|"region__1"
decl_stmt|;
name|REGIONS
operator|.
name|removeAll
argument_list|(
name|REGIONS
argument_list|)
expr_stmt|;
name|REGIONS
operator|.
name|add
argument_list|(
name|REGION
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|regiondir
init|=
operator|new
name|Path
argument_list|(
name|TABLEDIR
argument_list|,
name|REGION
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Region directory is"
operator|+
name|regiondir
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|regiondir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|regiondir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSplitLogFileEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSplitLogFileEmpty"
argument_list|)
expr_stmt|;
name|injectEmptyFile
argument_list|(
literal|".empty"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|tdir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|tdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countHLog
argument_list|(
name|fs
operator|.
name|listStatus
argument_list|(
name|OLDLOGDIR
argument_list|)
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSplitLogFileMultipleRegions
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSplitLogFileMultipleRegions"
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|region
range|:
name|REGIONS
control|)
block|{
name|Path
index|[]
name|recovered
init|=
name|getLogForRegion
argument_list|(
name|HBASEDIR
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|recovered
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|countHLog
argument_list|(
name|recovered
index|[
literal|0
index|]
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSplitLogFileFirstLineCorruptionLog
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBASE_SKIP_ERRORS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|FileStatus
name|logfile
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|corruptHLog
argument_list|(
name|logfile
operator|.
name|getPath
argument_list|()
argument_list|,
name|Corruptions
operator|.
name|INSERT_GARBAGE_ON_FIRST_LINE
argument_list|,
literal|true
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|fs
operator|.
name|initialize
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLogSplitter
operator|.
name|split
argument_list|(
name|HBASEDIR
argument_list|,
name|HLOGDIR
argument_list|,
name|OLDLOGDIR
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|corruptDir
init|=
operator|new
name|Path
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"hbase.regionserver.hlog.splitlog.corrupt.dir"
argument_list|,
name|HConstants
operator|.
name|CORRUPT_DIR_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fs
operator|.
name|listStatus
argument_list|(
name|corruptDir
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws IOException    * @see https://issues.apache.org/jira/browse/HBASE-4862    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testConcurrentSplitLogAndReplayRecoverEdit
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testConcurrentSplitLogAndReplayRecoverEdit"
argument_list|)
expr_stmt|;
comment|// Generate hlogs for our destination region
name|String
name|regionName
init|=
literal|"r0"
decl_stmt|;
specifier|final
name|Path
name|regiondir
init|=
operator|new
name|Path
argument_list|(
name|TABLEDIR
argument_list|,
name|regionName
argument_list|)
decl_stmt|;
name|REGIONS
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|REGIONS
operator|.
name|add
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|generateHLogs
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|regiondir
argument_list|,
name|regionName
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
index|[]
name|logfiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|HLOGDIR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There should be some log file"
argument_list|,
name|logfiles
operator|!=
literal|null
operator|&&
name|logfiles
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|HLogSplitter
name|logSplitter
init|=
operator|new
name|HLogSplitter
argument_list|(
name|conf
argument_list|,
name|HBASEDIR
argument_list|,
name|fs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|{
specifier|protected
name|HLog
operator|.
name|Writer
name|createWriter
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|logfile
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|HLog
operator|.
name|Writer
name|writer
init|=
name|HLogFactory
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
name|logfile
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// After creating writer, simulate region's
comment|// replayRecoveredEditsIfAny() which gets SplitEditFiles of this
comment|// region and delete them, excluding files with '.temp' suffix.
name|NavigableSet
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|HLogUtil
operator|.
name|getSplitEditFilesSorted
argument_list|(
name|fs
argument_list|,
name|regiondir
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|!=
literal|null
operator|&&
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Path
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed delete of "
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleted recovered.edits file="
operator|+
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|writer
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|logSplitter
operator|.
name|splitLogFile
argument_list|(
name|logfiles
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Throws IOException when spliting "
operator|+
literal|"log, it is most likely because writing file does not "
operator|+
literal|"exist which is caused by concurrent replayRecoveredEditsIfAny()"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|CORRUPTDIR
argument_list|)
condition|)
block|{
if|if
condition|(
name|fs
operator|.
name|listStatus
argument_list|(
name|CORRUPTDIR
argument_list|)
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"There are some corrupt logs, "
operator|+
literal|"it is most likely caused by concurrent replayRecoveredEditsIfAny()"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|flushToConsole
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|private
name|HLog
operator|.
name|Writer
index|[]
name|generateHLogs
parameter_list|(
name|int
name|leaveOpen
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|generateHLogs
argument_list|(
name|NUM_WRITERS
argument_list|,
name|ENTRIES
argument_list|,
name|leaveOpen
argument_list|)
return|;
block|}
specifier|private
name|HLog
operator|.
name|Writer
index|[]
name|generateHLogs
parameter_list|(
specifier|final
name|int
name|writers
parameter_list|,
specifier|final
name|int
name|entries
parameter_list|,
specifier|final
name|int
name|leaveOpen
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|generateHLogs
argument_list|(
operator|(
name|DistributedFileSystem
operator|)
name|this
operator|.
name|fs
argument_list|,
name|writers
argument_list|,
name|entries
argument_list|,
name|leaveOpen
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|makeRegionDirs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|region
range|:
name|regions
control|)
block|{
name|flushToConsole
argument_list|(
literal|"Creating dir for region "
operator|+
name|region
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|TABLEDIR
argument_list|,
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|HLog
operator|.
name|Writer
index|[]
name|generateHLogs
parameter_list|(
specifier|final
name|DistributedFileSystem
name|dfs
parameter_list|,
name|int
name|writers
parameter_list|,
name|int
name|entries
parameter_list|,
name|int
name|leaveOpen
parameter_list|)
throws|throws
name|IOException
block|{
name|makeRegionDirs
argument_list|(
name|dfs
argument_list|,
name|REGIONS
argument_list|)
expr_stmt|;
name|dfs
operator|.
name|mkdirs
argument_list|(
name|HLOGDIR
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Writer
index|[]
name|ws
init|=
operator|new
name|HLog
operator|.
name|Writer
index|[
name|writers
index|]
decl_stmt|;
name|int
name|seq
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
condition|;
name|i
operator|++
control|)
block|{
name|ws
index|[
name|i
index|]
operator|=
name|HLogFactory
operator|.
name|createWriter
argument_list|(
name|dfs
argument_list|,
operator|new
name|Path
argument_list|(
name|HLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
name|i
argument_list|)
argument_list|,
name|dfs
operator|.
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|entries
condition|;
name|j
operator|++
control|)
block|{
name|int
name|prefix
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|region
range|:
name|REGIONS
control|)
block|{
name|String
name|row_key
init|=
name|region
operator|+
name|prefix
operator|++
operator|+
name|i
operator|+
name|j
decl_stmt|;
name|appendEntry
argument_list|(
name|ws
index|[
name|i
index|]
argument_list|,
name|TABLE_NAME
argument_list|,
name|region
operator|.
name|getBytes
argument_list|()
argument_list|,
name|row_key
operator|.
name|getBytes
argument_list|()
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
name|seq
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|i
operator|!=
name|leaveOpen
condition|)
block|{
name|ws
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closing writer "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ws
return|;
block|}
specifier|private
name|Path
index|[]
name|getLogForRegion
parameter_list|(
name|Path
name|rootdir
parameter_list|,
name|TableName
name|table
parameter_list|,
name|String
name|region
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tdir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|table
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
name|Path
name|editsdir
init|=
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|HRegion
operator|.
name|getRegionDir
argument_list|(
name|tdir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|region
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|this
operator|.
name|fs
operator|.
name|listStatus
argument_list|(
name|editsdir
argument_list|)
decl_stmt|;
name|Path
index|[]
name|paths
init|=
operator|new
name|Path
index|[
name|files
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|paths
index|[
name|i
index|]
operator|=
name|files
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
return|return
name|paths
return|;
block|}
specifier|private
name|void
name|corruptHLog
parameter_list|(
name|Path
name|path
parameter_list|,
name|Corruptions
name|corruption
parameter_list|,
name|boolean
name|close
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
decl_stmt|;
name|int
name|fileSize
init|=
operator|(
name|int
operator|)
name|fs
operator|.
name|listStatus
argument_list|(
name|path
argument_list|)
index|[
literal|0
index|]
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|byte
index|[]
name|corrupted_bytes
init|=
operator|new
name|byte
index|[
name|fileSize
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
literal|0
argument_list|,
name|corrupted_bytes
argument_list|,
literal|0
argument_list|,
name|fileSize
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|corruption
condition|)
block|{
case|case
name|APPEND_GARBAGE
case|:
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|corrupted_bytes
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|"-----"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|closeOrFlush
argument_list|(
name|close
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT_GARBAGE_ON_FIRST_LINE
case|:
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|corrupted_bytes
argument_list|)
expr_stmt|;
name|closeOrFlush
argument_list|(
name|close
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT_GARBAGE_IN_THE_MIDDLE
case|:
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|int
name|middle
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|corrupted_bytes
operator|.
name|length
operator|/
literal|2
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|corrupted_bytes
argument_list|,
literal|0
argument_list|,
name|middle
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|corrupted_bytes
argument_list|,
name|middle
argument_list|,
name|corrupted_bytes
operator|.
name|length
operator|-
name|middle
argument_list|)
expr_stmt|;
name|closeOrFlush
argument_list|(
name|close
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRUNCATE
case|:
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|corrupted_bytes
argument_list|,
literal|0
argument_list|,
name|fileSize
operator|-
operator|(
literal|32
operator|+
name|ProtobufLogReader
operator|.
name|PB_WAL_COMPLETE_MAGIC
operator|.
name|length
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
operator|)
argument_list|)
expr_stmt|;
name|closeOrFlush
argument_list|(
name|close
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
case|case
name|TRUNCATE_TRAILER
case|:
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|=
name|fs
operator|.
name|create
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|corrupted_bytes
argument_list|,
literal|0
argument_list|,
name|fileSize
operator|-
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
comment|// trailer is truncated.
name|closeOrFlush
argument_list|(
name|close
argument_list|,
name|out
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|void
name|closeOrFlush
parameter_list|(
name|boolean
name|close
parameter_list|,
name|FSDataOutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|close
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Method
name|syncMethod
init|=
literal|null
decl_stmt|;
try|try
block|{
name|syncMethod
operator|=
name|out
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"hflush"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
try|try
block|{
name|syncMethod
operator|=
name|out
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"sync"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This version of Hadoop supports "
operator|+
literal|"neither Syncable.sync() nor Syncable.hflush()."
argument_list|)
throw|;
block|}
block|}
try|try
block|{
name|syncMethod
operator|.
name|invoke
argument_list|(
name|out
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Not in 0out.hflush();
block|}
end_class

begin_expr_stmt
unit|}    @
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|dumpHLog
argument_list|(
name|Path
name|log
argument_list|,
name|FileSystem
name|fs
argument_list|,
name|Configuration
name|conf
argument_list|)
throws|throws
name|IOException
block|{
name|HLog
operator|.
name|Entry
name|entry
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|HLog
operator|.
name|Reader
name|in
init|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|log
argument_list|,
name|conf
argument_list|)
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
operator|(
name|entry
operator|=
name|in
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
end_while

begin_function
unit|}    private
name|int
name|countHLog
parameter_list|(
name|Path
name|log
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|HLog
operator|.
name|Reader
name|in
init|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|log
argument_list|,
name|conf
argument_list|)
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|long
name|appendEntry
parameter_list|(
name|HLog
operator|.
name|Writer
name|writer
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|long
name|seq
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" append"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|createTestEntry
argument_list|(
name|table
argument_list|,
name|region
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|,
name|seq
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" sync"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|sync
argument_list|()
expr_stmt|;
return|return
name|seq
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|HLog
operator|.
name|Entry
name|createTestEntry
parameter_list|(
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|region
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|long
name|seq
parameter_list|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|seq
operator|++
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|time
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
operator|new
name|HLogKey
argument_list|(
name|region
argument_list|,
name|table
argument_list|,
name|seq
argument_list|,
name|time
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
argument_list|,
name|edit
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|injectEmptyFile
parameter_list|(
name|String
name|suffix
parameter_list|,
name|boolean
name|closeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|HLog
operator|.
name|Writer
name|writer
init|=
name|HLogFactory
operator|.
name|createWriter
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|HLOGDIR
argument_list|,
name|HLOG_FILE_PREFIX
operator|+
name|suffix
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|closeFile
condition|)
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|listLogs
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|FileStatus
name|file
range|:
name|fs
operator|.
name|listStatus
argument_list|(
name|dir
argument_list|)
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|int
name|compareHLogSplitDirs
parameter_list|(
name|Path
name|p1
parameter_list|,
name|Path
name|p2
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|f1
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p1
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|f2
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|p2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Path "
operator|+
name|p1
operator|+
literal|" doesn't exist"
argument_list|,
name|f1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Path "
operator|+
name|p2
operator|+
literal|" doesn't exist"
argument_list|,
name|f2
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files in "
operator|+
name|p1
operator|+
literal|": "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|f1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Files in "
operator|+
name|p2
operator|+
literal|": "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|FileUtil
operator|.
name|stat2Paths
argument_list|(
name|f2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|f1
operator|.
name|length
argument_list|,
name|f2
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|f1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Regions now have a directory named RECOVERED_EDITS_DIR and in here
comment|// are split edit files. In below presume only 1.
name|Path
name|rd1
init|=
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|f1
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|rd1fs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rd1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rd1fs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|rd2
init|=
name|HLogUtil
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|f2
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|rd2fs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|rd2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rd2fs
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|logsAreEqual
argument_list|(
name|rd1fs
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|rd2fs
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|private
name|boolean
name|logsAreEqual
parameter_list|(
name|Path
name|p1
parameter_list|,
name|Path
name|p2
parameter_list|)
throws|throws
name|IOException
block|{
name|HLog
operator|.
name|Reader
name|in1
decl_stmt|,
name|in2
decl_stmt|;
name|in1
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|p1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|in2
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|p2
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Entry
name|entry1
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry2
decl_stmt|;
while|while
condition|(
operator|(
name|entry1
operator|=
name|in1
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|entry2
operator|=
name|in2
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|entry1
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|entry2
operator|.
name|getKey
argument_list|()
argument_list|)
operator|!=
literal|0
operator|)
operator|||
operator|(
operator|!
name|entry1
operator|.
name|getEdit
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|entry2
operator|.
name|getEdit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function

unit|}
end_unit

