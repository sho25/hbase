begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|replication
operator|.
name|ReplicationPeerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationBarrierCleaner
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestReplicationBarrierCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHFileCleaner
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|;
name|ResultScanner
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|)
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|TableName
name|tableName
init|=
name|RegionInfo
operator|.
name|getTable
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tableName
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|table
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|ReplicationPeerManager
name|create
parameter_list|(
name|ReplicationQueueStorage
name|queueStorage
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|firstPeerIds
parameter_list|,
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|String
argument_list|>
modifier|...
name|peerIds
parameter_list|)
block|{
name|ReplicationPeerManager
name|peerManager
init|=
name|mock
argument_list|(
name|ReplicationPeerManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|queueStorage
operator|!=
literal|null
condition|)
block|{
name|when
argument_list|(
name|peerManager
operator|.
name|getQueueStorage
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|queueStorage
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|peerIds
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|when
argument_list|(
name|peerManager
operator|.
name|getSerialPeerIdsBelongsTo
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|firstPeerIds
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|when
argument_list|(
name|peerManager
operator|.
name|getSerialPeerIdsBelongsTo
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|firstPeerIds
argument_list|,
name|peerIds
argument_list|)
expr_stmt|;
block|}
return|return
name|peerManager
return|;
block|}
specifier|private
name|ReplicationQueueStorage
name|create
parameter_list|(
name|Long
name|lastPushedSeqId
parameter_list|,
name|Long
modifier|...
name|lastPushedSeqIds
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|ReplicationQueueStorage
name|queueStorage
init|=
name|mock
argument_list|(
name|ReplicationQueueStorage
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastPushedSeqIds
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|when
argument_list|(
name|queueStorage
operator|.
name|getLastSequenceId
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lastPushedSeqId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|when
argument_list|(
name|queueStorage
operator|.
name|getLastSequenceId
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|lastPushedSeqId
argument_list|,
name|lastPushedSeqIds
argument_list|)
expr_stmt|;
block|}
return|return
name|queueStorage
return|;
block|}
specifier|private
name|ReplicationBarrierCleaner
name|create
parameter_list|(
name|ReplicationPeerManager
name|peerManager
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ReplicationBarrierCleaner
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|WarnOnlyStoppable
argument_list|()
argument_list|,
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|peerManager
argument_list|)
return|;
block|}
specifier|private
name|void
name|addBarrier
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|long
modifier|...
name|barriers
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|barriers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|,
name|put
operator|.
name|getTimestamp
argument_list|()
operator|-
name|barriers
operator|.
name|length
operator|+
name|i
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|barriers
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fillCatalogFamily
parameter_list|(
name|RegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"whatever"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"whatever"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clearCatalogFamily
parameter_list|(
name|RegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNothing
parameter_list|()
throws|throws
name|IOException
block|{
name|ReplicationPeerManager
name|peerManager
init|=
name|mock
argument_list|(
name|ReplicationPeerManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReplicationBarrierCleaner
name|cleaner
init|=
name|create
argument_list|(
name|peerManager
argument_list|)
decl_stmt|;
name|cleaner
operator|.
name|chore
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|peerManager
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getSerialPeerIdsBelongsTo
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|peerManager
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getQueueStorage
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanNoPeers
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_1"
argument_list|)
decl_stmt|;
name|RegionInfo
name|region11
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName1
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addBarrier
argument_list|(
name|region11
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|,
literal|50
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|RegionInfo
name|region12
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName1
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addBarrier
argument_list|(
name|region12
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|,
literal|50
argument_list|,
literal|60
argument_list|,
literal|70
argument_list|)
expr_stmt|;
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_2"
argument_list|)
decl_stmt|;
name|RegionInfo
name|region21
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName2
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addBarrier
argument_list|(
name|region21
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|RegionInfo
name|region22
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName2
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addBarrier
argument_list|(
name|region22
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|,
literal|400
argument_list|,
literal|500
argument_list|,
literal|600
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ReplicationPeerManager
name|peerManager
init|=
name|create
argument_list|(
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|ReplicationBarrierCleaner
name|cleaner
init|=
name|create
argument_list|(
name|peerManager
argument_list|)
decl_stmt|;
name|cleaner
operator|.
name|chore
argument_list|()
expr_stmt|;
comment|// should never call this method
name|verify
argument_list|(
name|peerManager
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|getQueueStorage
argument_list|()
expr_stmt|;
comment|// should only be called twice although we have 4 regions to clean
name|verify
argument_list|(
name|peerManager
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getSerialPeerIdsBelongsTo
argument_list|(
name|any
argument_list|(
name|TableName
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|60
block|}
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region11
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|70
block|}
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region12
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|400
block|}
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region21
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|600
block|}
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region22
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteBarriers
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionInfo
name|region
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addBarrier
argument_list|(
name|region
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|30
argument_list|,
literal|40
argument_list|,
literal|50
argument_list|,
literal|60
argument_list|)
expr_stmt|;
comment|// two peers
name|ReplicationQueueStorage
name|queueStorage
init|=
name|create
argument_list|(
operator|-
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|15L
argument_list|,
literal|25L
argument_list|,
literal|20L
argument_list|,
literal|25L
argument_list|,
literal|65L
argument_list|,
literal|55L
argument_list|,
literal|70L
argument_list|,
literal|70L
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|peerIds
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ReplicationPeerManager
name|peerManager
init|=
name|create
argument_list|(
name|queueStorage
argument_list|,
name|peerIds
argument_list|,
name|peerIds
argument_list|,
name|peerIds
argument_list|,
name|peerIds
argument_list|,
name|peerIds
argument_list|)
decl_stmt|;
name|ReplicationBarrierCleaner
name|cleaner
init|=
name|create
argument_list|(
name|peerManager
argument_list|)
decl_stmt|;
comment|// beyond the first barrier, no deletion
name|cleaner
operator|.
name|chore
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|50
block|,
literal|60
block|}
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// in the first range, still no deletion
name|cleaner
operator|.
name|chore
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|10
block|,
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|50
block|,
literal|60
block|}
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// in the second range, 10 is deleted
name|cleaner
operator|.
name|chore
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|20
block|,
literal|30
block|,
literal|40
block|,
literal|50
block|,
literal|60
block|}
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// between 50 and 60, so the barriers before 50 will be deleted
name|cleaner
operator|.
name|chore
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|50
block|,
literal|60
block|}
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// in the last open range, 50 is deleted
name|cleaner
operator|.
name|chore
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|60
block|}
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteRowForDeletedRegion
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionInfo
name|region
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|addBarrier
argument_list|(
name|region
argument_list|,
literal|40
argument_list|,
literal|50
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|fillCatalogFamily
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|String
name|peerId
init|=
literal|"1"
decl_stmt|;
name|ReplicationQueueStorage
name|queueStorage
init|=
name|create
argument_list|(
literal|59L
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ReplicationPeerManager
name|peerManager
init|=
name|create
argument_list|(
name|queueStorage
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|peerId
argument_list|)
argument_list|)
decl_stmt|;
name|ReplicationBarrierCleaner
name|cleaner
init|=
name|create
argument_list|(
name|peerManager
argument_list|)
decl_stmt|;
comment|// we have something in catalog family, so only delete 40
name|cleaner
operator|.
name|chore
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|long
index|[]
block|{
literal|50
block|,
literal|60
block|}
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|queueStorage
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|removeLastSequenceIds
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyList
argument_list|()
argument_list|)
expr_stmt|;
comment|// No catalog family, then we should remove the whole row
name|clearCatalogFamily
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|cleaner
operator|.
name|chore
argument_list|()
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|assertFalse
argument_list|(
name|table
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|queueStorage
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|removeLastSequenceIds
argument_list|(
name|peerId
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|WarnOnlyStoppable
implements|implements
name|Stoppable
block|{
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"TestReplicationBarrierCleaner received stop, ignoring. Reason: "
operator|+
name|why
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

