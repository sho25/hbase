begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|TaskMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CancelableProgressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKeyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * HBASE-21031  * If replay edits fails, we need to make sure memstore is rollbacked  * And if MSLAB is used, all chunk is released too.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRecoveredEditsReplayAndAbort
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRecoveredEditsReplayAndAbort
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRecoveredEditsReplayAndAbort
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowA"
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|byte
index|[]
name|fam1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"colfamily11"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|// Test names
specifier|protected
name|TableName
name|tableName
decl_stmt|;
specifier|protected
name|String
name|method
decl_stmt|;
specifier|protected
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|public
specifier|static
name|Configuration
name|CONF
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|FILESYSTEM
decl_stmt|;
specifier|private
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|FILESYSTEM
operator|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
name|CONF
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|method
operator|=
name|name
operator|.
name|getMethodName
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Cleaning test directory: "
operator|+
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
comment|//set flush size to 10MB
name|CONF
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.memstore.flush.size"
argument_list|,
literal|1024
operator|*
literal|1024
operator|*
literal|10
argument_list|)
expr_stmt|;
comment|//set the report interval to a very small value
name|CONF
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.report.interval.edits"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.report.period"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//mock a RegionServerServices
specifier|final
name|RegionServerAccounting
name|rsAccounting
init|=
operator|new
name|RegionServerAccounting
argument_list|(
name|CONF
argument_list|)
decl_stmt|;
name|RegionServerServices
name|rs
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RegionServerServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|ChunkCreator
operator|.
name|initialize
argument_list|(
name|MemStoreLABImpl
operator|.
name|CHUNK_SIZE_DEFAULT
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rs
operator|.
name|getRegionServerAccounting
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rsAccounting
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rs
operator|.
name|isAborted
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rs
operator|.
name|getNonceManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|rs
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"test"
argument_list|,
literal|0
argument_list|,
literal|111
argument_list|)
argument_list|)
expr_stmt|;
comment|//create a region
name|TableName
name|testTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testRecoveredEidtsReplayAndAbort"
argument_list|)
decl_stmt|;
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|testTable
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|fam1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|logDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"TestRecoveredEidtsReplayAndAbort.log"
argument_list|)
decl_stmt|;
specifier|final
name|WAL
name|wal
init|=
name|HBaseTestingUtility
operator|.
name|createWal
argument_list|(
name|CONF
argument_list|,
name|logDir
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|Path
name|rootDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|info
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|CONF
argument_list|,
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|tableDir
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|newHRegion
argument_list|(
name|tableDir
argument_list|,
name|wal
argument_list|,
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|CONF
argument_list|,
name|info
argument_list|,
name|htd
argument_list|,
name|rs
argument_list|)
expr_stmt|;
comment|//create some recovered.edits
specifier|final
name|WALFactory
name|wals
init|=
operator|new
name|WALFactory
argument_list|(
name|CONF
argument_list|,
name|method
argument_list|)
decl_stmt|;
try|try
block|{
name|Path
name|regiondir
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getRegionDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
name|Path
name|recoveredEditsDir
init|=
name|WALSplitter
operator|.
name|getRegionDirRecoveredEditsDir
argument_list|(
name|regiondir
argument_list|)
decl_stmt|;
name|long
name|maxSeqId
init|=
literal|1200
decl_stmt|;
name|long
name|minSeqId
init|=
literal|1000
decl_stmt|;
name|long
name|totalEdits
init|=
name|maxSeqId
operator|-
name|minSeqId
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
name|minSeqId
init|;
name|i
operator|<=
name|maxSeqId
condition|;
name|i
operator|+=
literal|100
control|)
block|{
name|Path
name|recoveredEdits
init|=
operator|new
name|Path
argument_list|(
name|recoveredEditsDir
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"%019d"
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Begin to write recovered.edits : "
operator|+
name|recoveredEdits
argument_list|)
expr_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|recoveredEdits
argument_list|)
expr_stmt|;
name|WALProvider
operator|.
name|Writer
name|writer
init|=
name|wals
operator|.
name|createRecoveredEditsWriter
argument_list|(
name|fs
argument_list|,
name|recoveredEdits
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|j
init|=
name|i
init|;
name|j
operator|<
name|i
operator|+
literal|100
condition|;
name|j
operator|++
control|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
comment|// 200KB kv
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|200
operator|*
literal|1024
index|]
decl_stmt|;
name|random
operator|.
name|nextBytes
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
argument_list|,
name|time
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|WAL
operator|.
name|Entry
argument_list|(
operator|new
name|WALKeyImpl
argument_list|(
name|regionName
argument_list|,
name|tableName
argument_list|,
name|j
argument_list|,
name|time
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
argument_list|,
name|edit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|MonitoredTask
name|status
init|=
name|TaskMonitor
operator|.
name|get
argument_list|()
operator|.
name|createStatus
argument_list|(
name|method
argument_list|)
decl_stmt|;
comment|//try to replay the edits
try|try
block|{
name|region
operator|.
name|initialize
argument_list|(
operator|new
name|CancelableProgressable
argument_list|()
block|{
specifier|private
name|long
name|replayedEdits
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|progress
parameter_list|()
block|{
name|replayedEdits
operator|++
expr_stmt|;
comment|//during replay, rsAccounting should align with global memstore, because
comment|//there is only one memstore here
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rsAccounting
operator|.
name|getGlobalMemStoreDataSize
argument_list|()
argument_list|,
name|region
operator|.
name|getMemStoreDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rsAccounting
operator|.
name|getGlobalMemStoreHeapSize
argument_list|()
argument_list|,
name|region
operator|.
name|getMemStoreHeapSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rsAccounting
operator|.
name|getGlobalMemStoreOffHeapSize
argument_list|()
argument_list|,
name|region
operator|.
name|getMemStoreOffHeapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// abort the replay before finishing, leaving some edits in the memory
return|return
name|replayedEdits
operator|<
name|totalEdits
operator|-
literal|10
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Should not reach here"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Current memstore: "
operator|+
name|region
operator|.
name|getMemStoreDataSize
argument_list|()
operator|+
literal|", "
operator|+
name|region
operator|.
name|getMemStoreHeapSize
argument_list|()
operator|+
literal|", "
operator|+
name|region
operator|.
name|getMemStoreOffHeapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//After aborting replay, there should be no data in the memory
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsAccounting
operator|.
name|getGlobalMemStoreDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|region
operator|.
name|getMemStoreDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//All the chunk in the MSLAB should be recycled, otherwise, there might be
comment|//a memory leak.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ChunkCreator
operator|.
name|getInstance
argument_list|()
operator|.
name|numberOfMappedChunks
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|this
operator|.
name|region
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|=
literal|null
expr_stmt|;
name|wals
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

