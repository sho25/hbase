begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNameTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MultiRowMutationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|NoSuchColumnFamilyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Run tests that use the HBase clients; {@link Table}.  * Sets up the HBase mini cluster once at start and runs through all client tests.  * Each creates a table named for the method and does its stuff against that.  *  * Parameterized to run with different registry implementations.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFromClientSide4
extends|extends
name|FromClientSideBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFromClientSide4
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestFromClientSide4
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TableNameTestRule
name|name
init|=
operator|new
name|TableNameTestRule
argument_list|()
decl_stmt|;
comment|// To keep the child classes happy.
name|TestFromClientSide4
parameter_list|()
block|{   }
specifier|public
name|TestFromClientSide4
parameter_list|(
name|Class
name|registry
parameter_list|,
name|int
name|numHedgedReqs
parameter_list|)
throws|throws
name|Exception
block|{
name|initialize
argument_list|(
name|registry
argument_list|,
name|numHedgedReqs
argument_list|,
name|MultiRowMutationEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Collection
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|MasterRegistry
operator|.
name|class
block|,
literal|1
block|}
block|,
block|{
name|MasterRegistry
operator|.
name|class
block|,
literal|2
block|}
block|,
block|{
name|ZKConnectionRegistry
operator|.
name|class
block|,
literal|1
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|afterClass
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test batch operations with combination of valid and invalid args    */
annotation|@
name|Test
specifier|public
name|void
name|testBatchOperationsWithErrors
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|foo
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
literal|10
argument_list|)
init|)
block|{
name|int
name|NUM_OPS
init|=
literal|100
decl_stmt|;
comment|// 1.1 Put with no column families (local validation, runtime exception)
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|NUM_OPS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|foo
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
name|assertEquals
argument_list|(
name|NUM_OPS
argument_list|,
name|puts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 1.2 Put with invalid column family
name|puts
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
condition|?
name|FAMILY
else|:
name|INVALID_FAMILY
argument_list|,
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|foo
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NoSuchColumnFamilyException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 2.1 Get non-existent rows
name|List
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|NUM_OPS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
name|Result
index|[]
name|getsResult
init|=
name|foo
operator|.
name|get
argument_list|(
name|gets
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|getsResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_OPS
argument_list|,
name|getsResult
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|getResult
init|=
name|getsResult
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|assertFalse
argument_list|(
name|getResult
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|getResult
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// 2.2 Get with invalid column family
name|gets
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
condition|?
name|FAMILY
else|:
name|INVALID_FAMILY
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|foo
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NoSuchColumnFamilyException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 3.1 Delete with invalid column family
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|NUM_OPS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
operator|(
name|i
operator|%
literal|2
operator|)
operator|==
literal|0
condition|?
name|FAMILY
else|:
name|INVALID_FAMILY
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|foo
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
comment|// expected
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|NoSuchColumnFamilyException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// all valid rows should have been deleted
name|gets
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
name|getsResult
operator|=
name|foo
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getsResult
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_OPS
argument_list|,
name|getsResult
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|getResult
range|:
name|getsResult
control|)
block|{
name|assertTrue
argument_list|(
name|getResult
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 3.2 Delete non-existent rows
name|deletes
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_OPS
condition|;
name|i
operator|++
control|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|foo
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
block|}
block|}
comment|//
comment|// JIRA Testers
comment|//
comment|/**    * HBASE-867    * If millions of columns in a column family, hbase scanner won't come up    * Test will create numRows rows, each with numColsPerRow columns    * (1 version each), and attempt to scan them all.    * To test at scale, up numColsPerRow to the millions    * (have not gotten that to work running as junit though)    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest867
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRows
init|=
literal|10
decl_stmt|;
name|int
name|numColsPerRow
init|=
literal|2000
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
name|numRows
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeN
argument_list|(
name|QUALIFIER
argument_list|,
name|numColsPerRow
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
comment|// Insert rows
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numColsPerRow
condition|;
name|j
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|j
index|]
argument_list|,
name|QUALIFIERS
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Put expected to contain "
operator|+
name|numColsPerRow
operator|+
literal|" columns but "
operator|+
literal|"only contains "
operator|+
name|put
operator|.
name|size
argument_list|()
argument_list|,
name|put
operator|.
name|size
argument_list|()
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// Get a row
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|keys
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Scan the rows
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColsPerRow
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|rowCount
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|rowCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected to scan "
operator|+
name|numRows
operator|+
literal|" rows but actually scanned "
operator|+
name|rowCount
operator|+
literal|" rows"
argument_list|,
name|rowCount
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
block|}
comment|// flush and try again
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Get a row
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|keys
operator|=
name|result
operator|.
name|rawCells
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Scan the rows
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColsPerRow
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|rowCount
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|rowCount
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected to scan "
operator|+
name|numRows
operator|+
literal|" rows but actually scanned "
operator|+
name|rowCount
operator|+
literal|" rows"
argument_list|,
name|rowCount
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * HBASE-861    * get with timestamp will return a value if there is a version with an    * earlier timestamp    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest861
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
init|)
block|{
comment|// Insert three versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get the middle value
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Try to get one version before (expect fail)
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Try to get one version after (expect fail)
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Insert two more versions surrounding others, into memstore
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Check we can get everything we should and can't get what we shouldn't
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Try same from two storefiles
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * HBASE-33    * Add a HTable get/obtainScanner method that retrieves all versions of a    * particular column and row between two timestamps    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest33
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
init|)
block|{
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * HBASE-1014    * commit(BatchUpdate) method should return timestamp    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest1014
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
init|)
block|{
name|long
name|manualStamp
init|=
literal|12345
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
operator|-
literal|1
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * HBASE-1182    * Scan for columns> some timestamp    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest1182
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
init|)
block|{
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * HBASE-52    * Add a means of scanning over all versions    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest52
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
init|)
block|{
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:MethodLength"
argument_list|)
specifier|public
name|void
name|testDuplicateVersions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|20
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
init|)
block|{
comment|// Insert 4 versions of same column
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Flush and redo
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add some memstore and retest
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions of table is respected
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|,
name|VALUES
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|13
index|]
argument_list|,
name|VALUES
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|15
index|]
argument_list|,
name|VALUES
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// Delete a version in the memstore and a version in a storefile
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Test that it's gone
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdates
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
init|)
block|{
comment|// Write a column with values at timestamp 1, 2 and 3
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCol"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|3L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
comment|// Check that the column indeed has the right values at timestamps 1 and
comment|// 2
name|Result
name|result
init|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BBB"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 1
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 2
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Check that the values at timestamp 2 and 1 got updated
name|result
operator|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|navigableMap
operator|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CCC"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DDD"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatesWithMajorCompaction
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
init|)
block|{
comment|// Write a column with values at timestamp 1, 2 and 3
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCol"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|3L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
comment|// Check that the column indeed has the right values at timestamps 1 and
comment|// 2
name|Result
name|result
init|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BBB"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 1
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 2
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Check that the values at timestamp 2 and 1 got updated
name|result
operator|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|navigableMap
operator|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CCC"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DDD"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompactionBetweenTwoUpdates
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
init|)
block|{
comment|// Write a column with values at timestamp 1, 2 and 3
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCol"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|3L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
comment|// Check that the column indeed has the right values at timestamps 1 and
comment|// 2
name|Result
name|result
init|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BBB"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 1
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 2
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Check that the values at timestamp 2 and 1 got updated
name|result
operator|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|navigableMap
operator|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CCC"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DDD"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_EmptyTable
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_NullQualifier
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row put"
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_NonExistentRow
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row put"
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Row retrieved successfully"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|missingrow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"missingrow"
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|missingrow
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row missing as it should be"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SMALL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"smallfam"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FAMILY
block|,
name|SMALL_FAMILY
block|}
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|put
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|put
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|get
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// KeyValue v1 expectation.  Cast for now until we go all Cell all the time. TODO
name|KeyValue
name|kv
init|=
operator|(
name|KeyValue
operator|)
name|put
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|get
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|,
name|CONTENTS_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// will it return null or an empty byte array?
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
for|for
control|(
name|Cell
name|key
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutNoCF
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|BAD_FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BAD_CF"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|VAL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|100
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|boolean
name|caughtNSCFE
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|BAD_FAM
argument_list|,
name|QUALIFIER
argument_list|,
name|VAL
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|caughtNSCFE
operator|=
name|e
operator|instanceof
name|NoSuchColumnFamilyException
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Should throw NoSuchColumnFamilyException"
argument_list|,
name|caughtNSCFE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowsPut
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SMALL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"smallfam"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NB_BATCH_ROWS
init|=
literal|10
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FAMILY
block|,
name|SMALL_FAMILY
block|}
argument_list|)
init|)
block|{
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|rowsUpdate
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_BATCH_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rowsUpdate
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|rowsUpdate
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|nbRows
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|row
range|:
name|scanner
control|)
block|{
name|nbRows
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NB_BATCH_ROWS
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowsPutBufferedManyManyFlushes
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SMALL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"smallfam"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NB_BATCH_ROWS
init|=
literal|10
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FAMILY
block|,
name|SMALL_FAMILY
block|}
argument_list|)
init|)
block|{
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|rowsUpdate
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_BATCH_ROWS
operator|*
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rowsUpdate
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|rowsUpdate
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|nbRows
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|row
range|:
name|scanner
control|)
block|{
name|nbRows
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|NB_BATCH_ROWS
operator|*
literal|10
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddKeyValue
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf1"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
comment|// Adding KeyValue with the same row
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|CONTENTS_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
try|try
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
comment|// Adding KeyValue with the different row
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|CONTENTS_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
comment|/**    * test for HBASE-737    */
annotation|@
name|Test
specifier|public
name|void
name|testHBase737
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|FAM1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAM2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
comment|// Open table
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM1
block|,
name|FAM2
block|}
argument_list|)
init|)
block|{
comment|// Insert some values
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"letters"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcdefg"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{
comment|//ignore
block|}
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"numbers"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123456"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{
comment|//ignore
block|}
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"letters"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hijklmnop"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|long
index|[]
name|times
init|=
operator|new
name|long
index|[
literal|3
index|]
decl_stmt|;
comment|// First scan the memstore
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM2
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|s
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Result
name|r
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cell
name|key
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|times
index|[
name|index
operator|++
index|]
operator|=
name|key
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|times
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|times
index|[
name|j
index|]
operator|>
name|times
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Flush data to disk and try again
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Reset times
name|Arrays
operator|.
name|fill
argument_list|(
name|times
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{
comment|//ignore
block|}
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM2
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|s
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cell
name|key
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|times
index|[
name|index
operator|++
index|]
operator|=
name|key
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|times
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|times
index|[
name|j
index|]
operator|>
name|times
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListTables
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|testTableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testTableName
operator|+
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testTableName
operator|+
literal|"2"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testTableName
operator|+
literal|"3"
argument_list|)
decl_stmt|;
name|TableName
index|[]
name|tables
init|=
operator|new
name|TableName
index|[]
block|{
name|tableName1
block|,
name|tableName2
block|,
name|tableName3
block|}
decl_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|ts
init|=
name|admin
operator|.
name|listTableDescriptors
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|TableDescriptor
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|size
operator|>=
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TableDescriptor
name|t
range|:
name|ts
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Not found: "
operator|+
name|table
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * simple test that just executes parts of the client    * API that accept a pre-created Connection instance    */
annotation|@
name|Test
specifier|public
name|void
name|testUnmanagedHConnection
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|t
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test of that unmanaged HConnections are able to reconnect    * properly (see HBASE-5058)    */
annotation|@
name|Test
specifier|public
name|void
name|testUnmanagedHConnectionReconnect
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Class
name|registryImpl
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|HConstants
operator|.
name|CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY
argument_list|,
name|ZKConnectionRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// This test does not make sense for MasterRegistry since it stops the only master in the
comment|// cluster and starts a new master without populating the underlying config for the connection.
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|registryImpl
operator|.
name|equals
argument_list|(
name|MasterRegistry
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// stop the master
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|stopMaster
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitOnMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// start up a new master
name|cluster
operator|.
name|startMaster
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
argument_list|)
expr_stmt|;
comment|// test that the same unmanaged connection works with a new
comment|// Admin and can connect to the new master;
name|boolean
name|tablesOnMaster
init|=
name|LoadBalancer
operator|.
name|isTablesOnMaster
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|SLAVES
operator|+
operator|(
name|tablesOnMaster
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiscHTableStuff
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|testTableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableAname
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testTableName
operator|+
literal|"A"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableBname
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testTableName
operator|+
literal|"B"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|attrName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TESTATTR"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|attrValue
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somevalue"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|a
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
init|;
name|Table
name|b
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableBname
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// open a new connection to A and a connection to b
try|try
init|(
name|Table
name|newA
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableAname
argument_list|)
init|)
block|{
comment|// copy data from A to B
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|s
init|=
name|newA
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|s
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Opening a new connection to A will cause the tables to be reloaded
try|try
init|(
name|Table
name|anotherA
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableAname
argument_list|)
init|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|anotherA
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
comment|// We can still access A through newA because it has the table information
comment|// cached. And if it needs to recalibrate, that will cause the information
comment|// to be reloaded.
comment|// Test user metadata
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// make a modifiable descriptor
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|a
operator|.
name|getDescriptor
argument_list|()
argument_list|)
decl_stmt|;
comment|// offline the table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
comment|// add a user attribute to HTD
name|desc
operator|.
name|setValue
argument_list|(
name|attrName
argument_list|,
name|attrValue
argument_list|)
expr_stmt|;
comment|// add a user attribute to HCD
for|for
control|(
name|HColumnDescriptor
name|c
range|:
name|desc
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|c
operator|.
name|setValue
argument_list|(
name|attrName
argument_list|,
name|attrValue
argument_list|)
expr_stmt|;
block|}
comment|// update metadata for all regions of this table
name|admin
operator|.
name|modifyTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// enable the table
name|admin
operator|.
name|enableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
comment|// Test that attribute changes were applied
name|desc
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|a
operator|.
name|getDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong table descriptor returned"
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableAname
argument_list|)
expr_stmt|;
comment|// check HTD attribute
name|value
operator|=
name|desc
operator|.
name|getValue
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"missing HTD attribute value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"HTD attribute value is incorrect"
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|value
argument_list|,
name|attrValue
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// check HCD attribute
for|for
control|(
name|HColumnDescriptor
name|c
range|:
name|desc
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|value
operator|=
name|c
operator|.
name|getValue
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"missing HCD attribute value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"HCD attribute value is incorrect"
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|value
argument_list|,
name|attrValue
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

