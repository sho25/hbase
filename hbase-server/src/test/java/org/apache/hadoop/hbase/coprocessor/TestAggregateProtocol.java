begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|AggregationClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|LongColumnInterpreter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|EmptyMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|LongMsg
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|CoprocessorTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * A test class to cover aggregate functions, that can be implemented using  * Coprocessors.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|CoprocessorTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAggregateProtocol
block|{
specifier|protected
specifier|static
name|Log
name|myLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAggregateProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Creating the test infrastructure.    */
specifier|private
specifier|static
specifier|final
name|TableName
name|TEST_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestTable"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_MULTI_CQ
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestMultiCQ"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ROWSIZE
init|=
literal|20
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|rowSeperator1
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|rowSeperator2
init|=
literal|12
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
name|ROWSIZE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|/**    * A set up method to start the test cluster. AggregateProtocolImpl is    * registered and will be loaded during region startup.    * @throws Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
literal|"org.apache.hadoop.hbase.coprocessor.AggregateImplementation"
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|SPLIT_KEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|ROWS
index|[
name|rowSeperator1
index|]
block|,
name|ROWS
index|[
name|rowSeperator2
index|]
block|}
decl_stmt|;
name|HTable
name|table
init|=
name|util
operator|.
name|createTable
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|SPLIT_KEYS
argument_list|)
decl_stmt|;
comment|/**      * The testtable has one CQ which is always populated and one variable CQ      * for each row rowkey1: CF:CQ CF:CQ1 rowKey2: CF:CQ CF:CQ2      */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROWSIZE
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|Long
name|l
init|=
operator|new
name|Long
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Put
name|p2
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|p2
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|TEST_MULTI_CQ
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|l
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|l
operator|*
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p2
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Shutting down the cluster    * @throws Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * an infrastructure method to prepare rows for the testtable.    * @param base    * @param n    * @return    */
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|makeN
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * ****************** Test cases for Median **********************    */
comment|/**    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMedianWithValidRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|median
init|=
name|aClient
operator|.
name|median
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8L
argument_list|,
name|median
argument_list|)
expr_stmt|;
block|}
comment|/**    * **************************** ROW COUNT Test cases *******************    */
comment|/**    * This will test rowcount with a valid range, i.e., a subset of rows. It will    * be the most common use case.    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRowCountWithValidRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|rowCount
init|=
name|aClient
operator|.
name|rowCount
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * This will test the row count on the entire table. Startrow and endrow will    * be null.    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRowCountAllTable
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|rowCount
init|=
name|aClient
operator|.
name|rowCount
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ROWSIZE
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * This will test the row count with startrow> endrow. The result should be    * -1.    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRowCountWithInvalidRange1
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|rowCount
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|rowCount
operator|=
name|aClient
operator|.
name|rowCount
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|myLog
operator|.
name|error
argument_list|(
literal|"Exception thrown in the invalidRange method"
operator|+
name|e
operator|.
name|getStackTrace
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * This will test the row count with startrow = endrow and they will be    * non-null. The result should be 0, as it assumes a non-get query.    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRowCountWithInvalidRange2
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|rowCount
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|rowCount
operator|=
name|aClient
operator|.
name|rowCount
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|rowCount
operator|=
literal|0
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRowCountWithNullCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|rowCount
init|=
name|aClient
operator|.
name|rowCount
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testRowCountWithPrefixFilter
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|long
name|rowCount
init|=
name|aClient
operator|.
name|rowCount
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * ***************Test cases for Maximum *******************    */
comment|/**    * give max for the entire table.    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMaxWithValidRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|maximum
init|=
name|aClient
operator|.
name|max
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|19
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMaxWithValidRange2
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|max
init|=
name|aClient
operator|.
name|max
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMaxWithValidRangeWithNoCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|maximum
init|=
name|aClient
operator|.
name|max
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|190
argument_list|,
name|maximum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMaxWithValidRange2WithNoCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|max
init|=
name|aClient
operator|.
name|max
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMaxWithValidRangeWithNullCF
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|Long
name|max
init|=
literal|null
decl_stmt|;
try|try
block|{
name|max
operator|=
name|aClient
operator|.
name|max
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|max
operator|=
literal|null
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|max
argument_list|)
expr_stmt|;
comment|// CP will throw an IOException about the
comment|// null column family, and max will be set to 0
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMaxWithInvalidRange
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
try|try
block|{
name|max
operator|=
name|aClient
operator|.
name|max
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|max
operator|=
literal|0
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|max
argument_list|)
expr_stmt|;
comment|// control should go to the catch block
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMaxWithInvalidRange2
parameter_list|()
throws|throws
name|Throwable
block|{
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
try|try
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|max
operator|=
name|aClient
operator|.
name|max
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|max
operator|=
literal|0
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|max
argument_list|)
expr_stmt|;
comment|// control should go to the catch block
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMaxWithFilter
parameter_list|()
throws|throws
name|Throwable
block|{
name|Long
name|max
init|=
literal|0l
decl_stmt|;
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|max
operator|=
name|aClient
operator|.
name|max
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**    * **************************Test cases for Minimum ***********************    */
comment|/**    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMinWithValidRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Long
name|min
init|=
name|aClient
operator|.
name|min
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0l
argument_list|,
name|min
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMinWithValidRange2
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|min
init|=
name|aClient
operator|.
name|min
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMinWithValidRangeWithNoCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|min
init|=
name|aClient
operator|.
name|min
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMinWithValidRange2WithNoCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|min
init|=
name|aClient
operator|.
name|min
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMinWithValidRangeWithNullCF
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Long
name|min
init|=
literal|null
decl_stmt|;
try|try
block|{
name|min
operator|=
name|aClient
operator|.
name|min
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|min
argument_list|)
expr_stmt|;
comment|// CP will throw an IOException about the
comment|// null column family, and max will be set to 0
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMinWithInvalidRange
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Long
name|min
init|=
literal|null
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
try|try
block|{
name|min
operator|=
name|aClient
operator|.
name|min
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|min
argument_list|)
expr_stmt|;
comment|// control should go to the catch block
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMinWithInvalidRange2
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Long
name|min
init|=
literal|null
decl_stmt|;
try|try
block|{
name|min
operator|=
name|aClient
operator|.
name|min
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|min
argument_list|)
expr_stmt|;
comment|// control should go to the catch block
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testMinWithFilter
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Long
name|min
init|=
literal|null
decl_stmt|;
name|min
operator|=
name|aClient
operator|.
name|min
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
comment|/**    * *************** Test cases for Sum *********************    */
comment|/**    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSumWithValidRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|sum
init|=
name|aClient
operator|.
name|sum
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|190
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSumWithValidRange2
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|sum
init|=
name|aClient
operator|.
name|sum
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|95
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSumWithValidRangeWithNoCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|sum
init|=
name|aClient
operator|.
name|sum
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|190
operator|+
literal|1900
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSumWithValidRange2WithNoCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|long
name|sum
init|=
name|aClient
operator|.
name|sum
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|+
literal|60
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSumWithValidRangeWithNullCF
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Long
name|sum
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sum
operator|=
name|aClient
operator|.
name|sum
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|sum
argument_list|)
expr_stmt|;
comment|// CP will throw an IOException about the
comment|// null column family, and max will be set to 0
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSumWithInvalidRange
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Long
name|sum
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sum
operator|=
name|aClient
operator|.
name|sum
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|sum
argument_list|)
expr_stmt|;
comment|// control should go to the catch block
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testSumWithFilter
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Long
name|sum
init|=
literal|null
decl_stmt|;
name|sum
operator|=
name|aClient
operator|.
name|sum
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|sum
argument_list|)
expr_stmt|;
block|}
comment|/**    * ****************************** Test Cases for Avg **************    */
comment|/**    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testAvgWithValidRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|double
name|avg
init|=
name|aClient
operator|.
name|avg
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9.5
argument_list|,
name|avg
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testAvgWithValidRange2
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|double
name|avg
init|=
name|aClient
operator|.
name|avg
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9.5
argument_list|,
name|avg
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testAvgWithValidRangeWithNoCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|double
name|avg
init|=
name|aClient
operator|.
name|avg
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|104.5
argument_list|,
name|avg
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testAvgWithValidRange2WithNoCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|double
name|avg
init|=
name|aClient
operator|.
name|avg
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|+
literal|60
argument_list|,
name|avg
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testAvgWithValidRangeWithNullCF
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Double
name|avg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|avg
operator|=
name|aClient
operator|.
name|avg
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|avg
argument_list|)
expr_stmt|;
comment|// CP will throw an IOException about the
comment|// null column family, and max will be set to 0
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testAvgWithInvalidRange
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Double
name|avg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|avg
operator|=
name|aClient
operator|.
name|avg
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|avg
argument_list|)
expr_stmt|;
comment|// control should go to the catch block
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testAvgWithFilter
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Double
name|avg
init|=
literal|null
decl_stmt|;
name|avg
operator|=
name|aClient
operator|.
name|avg
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|avg
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * ****************** Test cases for STD **********************    */
comment|/**    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testStdWithValidRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|double
name|std
init|=
name|aClient
operator|.
name|std
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5.766
argument_list|,
name|std
argument_list|,
literal|0.05d
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws Throwable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testStdWithValidRange2
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|double
name|std
init|=
name|aClient
operator|.
name|std
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2.87
argument_list|,
name|std
argument_list|,
literal|0.05d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testStdWithValidRangeWithNoCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|double
name|std
init|=
name|aClient
operator|.
name|std
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|63.42
argument_list|,
name|std
argument_list|,
literal|0.05d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testStdWithValidRange2WithNoCQ
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|double
name|std
init|=
name|aClient
operator|.
name|std
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|std
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testStdWithValidRangeWithNullCF
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|17
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Double
name|std
init|=
literal|null
decl_stmt|;
try|try
block|{
name|std
operator|=
name|aClient
operator|.
name|std
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|std
argument_list|)
expr_stmt|;
comment|// CP will throw an IOException about the
comment|// null column family, and max will be set to 0
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testStdWithInvalidRange
parameter_list|()
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|ROWS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Double
name|std
init|=
literal|null
decl_stmt|;
try|try
block|{
name|std
operator|=
name|aClient
operator|.
name|std
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{     }
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|std
argument_list|)
expr_stmt|;
comment|// control should go to the catch block
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testStdWithFilter
parameter_list|()
throws|throws
name|Throwable
block|{
name|AggregationClient
name|aClient
init|=
operator|new
name|AggregationClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo:bar"
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
specifier|final
name|ColumnInterpreter
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|,
name|EmptyMsg
argument_list|,
name|LongMsg
argument_list|,
name|LongMsg
argument_list|>
name|ci
init|=
operator|new
name|LongColumnInterpreter
argument_list|()
decl_stmt|;
name|Double
name|std
init|=
literal|null
decl_stmt|;
name|std
operator|=
name|aClient
operator|.
name|std
argument_list|(
name|TEST_TABLE
argument_list|,
name|ci
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Double
operator|.
name|NaN
argument_list|,
name|std
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

