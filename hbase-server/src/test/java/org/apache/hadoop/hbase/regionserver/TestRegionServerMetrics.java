begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompatibilityFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|test
operator|.
name|MetricsAssertHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionServerMetrics
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionServerMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRegionServerMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|MetricsAssertHelper
name|metricsHelper
decl_stmt|;
specifier|private
specifier|static
name|MiniHBaseCluster
name|cluster
decl_stmt|;
specifier|private
specifier|static
name|HRegionServer
name|rs
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|connection
decl_stmt|;
specifier|private
specifier|static
name|MetricsRegionServer
name|metricsRegionServer
decl_stmt|;
specifier|private
specifier|static
name|MetricsRegionServerSource
name|serverSource
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SCAN_NEXT
init|=
literal|30
decl_stmt|;
specifier|private
specifier|static
name|int
name|numScanNext
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Admin
name|admin
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|TABLES_ON_MASTER
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|metricsHelper
operator|=
name|CompatibilityFactory
operator|.
name|getInstance
argument_list|(
name|MetricsAssertHelper
operator|.
name|class
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|TABLES_ON_MASTER
operator|=
name|LoadBalancer
operator|.
name|isTablesOnMaster
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|getLong
argument_list|(
literal|"hbase.splitlog.max.resubmit"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Make the failure test faster
name|conf
operator|.
name|setInt
argument_list|(
literal|"zookeeper.recovery.retry"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// testMobMetrics creates few hfiles and manages compaction manually.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.max"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.periodicmemstoreflusher.rangeofdelayseconds"
argument_list|,
literal|4
operator|*
literal|60
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_INFO_PORT
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|connection
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
expr_stmt|;
while|while
condition|(
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|==
literal|null
operator|&&
name|rs
operator|.
name|getRegionServerMetrics
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|rs
operator|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|=
name|rs
operator|.
name|getRegionServerMetrics
argument_list|()
expr_stmt|;
name|serverSource
operator|=
name|metricsRegionServer
operator|.
name|getMetricsSource
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|TEST_UTIL
operator|!=
literal|null
condition|)
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
name|TableName
name|tableName
decl_stmt|;
name|Table
name|table
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|beforeTestMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|cf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|afterTestMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertCounter
parameter_list|(
name|String
name|metric
parameter_list|,
name|long
name|expectedValue
parameter_list|)
block|{
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
name|metric
argument_list|,
name|expectedValue
argument_list|,
name|serverSource
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|assertGauge
parameter_list|(
name|String
name|metric
parameter_list|,
name|long
name|expectedValue
parameter_list|)
block|{
name|metricsHelper
operator|.
name|assertGauge
argument_list|(
name|metric
argument_list|,
name|expectedValue
argument_list|,
name|serverSource
argument_list|)
expr_stmt|;
block|}
comment|// Aggregates metrics from regions and assert given list of metrics and expected values.
specifier|public
name|void
name|assertRegionMetrics
parameter_list|(
name|String
name|metric
parameter_list|,
name|long
name|expectedValue
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RegionLocator
name|locator
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
for|for
control|(
name|HRegionLocation
name|location
range|:
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
control|)
block|{
name|RegionInfo
name|hri
init|=
name|location
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|MetricsRegionAggregateSource
name|agg
init|=
name|rs
operator|.
name|getRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|getSource
argument_list|()
operator|.
name|getAggregateSource
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|"namespace_"
operator|+
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
operator|+
literal|"_table_"
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_region_"
operator|+
name|hri
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|"_metric_"
decl_stmt|;
name|metricsHelper
operator|.
name|assertCounter
argument_list|(
name|prefix
operator|+
name|metric
argument_list|,
name|expectedValue
argument_list|,
name|agg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doNPuts
parameter_list|(
name|int
name|n
parameter_list|,
name|boolean
name|batch
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|batch
condition|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
operator|+
literal|"row"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doNGets
parameter_list|(
name|int
name|n
parameter_list|,
name|boolean
name|batch
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|batch
condition|)
block|{
name|List
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|doScan
parameter_list|(
name|int
name|n
parameter_list|,
name|boolean
name|caching
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
if|if
condition|(
name|caching
condition|)
block|{
name|scan
operator|.
name|setCaching
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Result
name|res
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Result row: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|", value: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|res
operator|.
name|getValue
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionCount
parameter_list|()
throws|throws
name|Exception
block|{
name|metricsHelper
operator|.
name|assertGauge
argument_list|(
literal|"regionCount"
argument_list|,
name|TABLES_ON_MASTER
condition|?
literal|1
else|:
literal|2
argument_list|,
name|serverSource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocalFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|assertGauge
argument_list|(
literal|"percentFilesLocal"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"percentFilesLocalSecondaryRegions"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRequestCount
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Do a first put to be sure that the connection is established, meta is there and so on.
name|doNPuts
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|long
name|requests
init|=
name|metricsHelper
operator|.
name|getCounter
argument_list|(
literal|"totalRequestCount"
argument_list|,
name|serverSource
argument_list|)
decl_stmt|;
name|long
name|rowActionRequests
init|=
name|metricsHelper
operator|.
name|getCounter
argument_list|(
literal|"totalRowActionRequestCount"
argument_list|,
name|serverSource
argument_list|)
decl_stmt|;
name|long
name|readRequests
init|=
name|metricsHelper
operator|.
name|getCounter
argument_list|(
literal|"readRequestCount"
argument_list|,
name|serverSource
argument_list|)
decl_stmt|;
name|long
name|writeRequests
init|=
name|metricsHelper
operator|.
name|getCounter
argument_list|(
literal|"writeRequestCount"
argument_list|,
name|serverSource
argument_list|)
decl_stmt|;
name|doNPuts
argument_list|(
literal|30
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertCounter
argument_list|(
literal|"totalRequestCount"
argument_list|,
name|requests
operator|+
literal|30
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"totalRowActionRequestCount"
argument_list|,
name|rowActionRequests
operator|+
literal|30
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"readRequestCount"
argument_list|,
name|readRequests
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"writeRequestCount"
argument_list|,
name|writeRequests
operator|+
literal|30
argument_list|)
expr_stmt|;
name|doNGets
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertCounter
argument_list|(
literal|"totalRequestCount"
argument_list|,
name|requests
operator|+
literal|40
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"totalRowActionRequestCount"
argument_list|,
name|rowActionRequests
operator|+
literal|40
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"readRequestCount"
argument_list|,
name|readRequests
operator|+
literal|10
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"writeRequestCount"
argument_list|,
name|writeRequests
operator|+
literal|30
argument_list|)
expr_stmt|;
name|assertRegionMetrics
argument_list|(
literal|"getCount"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertRegionMetrics
argument_list|(
literal|"putCount"
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|doNGets
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// true = batch
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
if|if
condition|(
name|TABLES_ON_MASTER
condition|)
block|{
name|assertCounter
argument_list|(
literal|"totalRequestCount"
argument_list|,
name|requests
operator|+
literal|41
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"totalRowActionRequestCount"
argument_list|,
name|rowActionRequests
operator|+
literal|50
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"readRequestCount"
argument_list|,
name|readRequests
operator|+
literal|20
argument_list|)
expr_stmt|;
block|}
name|assertCounter
argument_list|(
literal|"writeRequestCount"
argument_list|,
name|writeRequests
operator|+
literal|30
argument_list|)
expr_stmt|;
name|doNPuts
argument_list|(
literal|30
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
if|if
condition|(
name|TABLES_ON_MASTER
condition|)
block|{
name|assertCounter
argument_list|(
literal|"totalRequestCount"
argument_list|,
name|requests
operator|+
literal|42
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"totalRowActionRequestCount"
argument_list|,
name|rowActionRequests
operator|+
literal|80
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"readRequestCount"
argument_list|,
name|readRequests
operator|+
literal|20
argument_list|)
expr_stmt|;
block|}
name|assertCounter
argument_list|(
literal|"writeRequestCount"
argument_list|,
name|writeRequests
operator|+
literal|60
argument_list|)
expr_stmt|;
name|doScan
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// test after batch put so we have enough lines
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
if|if
condition|(
name|TABLES_ON_MASTER
condition|)
block|{
name|assertCounter
argument_list|(
literal|"totalRequestCount"
argument_list|,
name|requests
operator|+
literal|52
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"totalRowActionRequestCount"
argument_list|,
name|rowActionRequests
operator|+
literal|90
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"readRequestCount"
argument_list|,
name|readRequests
operator|+
literal|30
argument_list|)
expr_stmt|;
block|}
name|assertCounter
argument_list|(
literal|"writeRequestCount"
argument_list|,
name|writeRequests
operator|+
literal|60
argument_list|)
expr_stmt|;
name|numScanNext
operator|+=
literal|10
expr_stmt|;
name|doScan
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// true = caching
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
if|if
condition|(
name|TABLES_ON_MASTER
condition|)
block|{
name|assertCounter
argument_list|(
literal|"totalRequestCount"
argument_list|,
name|requests
operator|+
literal|53
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"totalRowActionRequestCount"
argument_list|,
name|rowActionRequests
operator|+
literal|100
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"readRequestCount"
argument_list|,
name|readRequests
operator|+
literal|40
argument_list|)
expr_stmt|;
block|}
name|assertCounter
argument_list|(
literal|"writeRequestCount"
argument_list|,
name|writeRequests
operator|+
literal|60
argument_list|)
expr_stmt|;
name|numScanNext
operator|+=
literal|1
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Do a first put to be sure that the connection is established, meta is there and so on.
name|doNPuts
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doNGets
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertRegionMetrics
argument_list|(
literal|"getCount"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|metricsHelper
operator|.
name|assertCounterGt
argument_list|(
literal|"Get_num_ops"
argument_list|,
literal|10
argument_list|,
name|serverSource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMutationsWithoutWal
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|val
argument_list|)
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertGauge
argument_list|(
literal|"mutationsWithoutWALCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|long
name|minLength
init|=
name|row
operator|.
name|length
operator|+
name|cf
operator|.
name|length
operator|+
name|qualifier
operator|.
name|length
operator|+
name|val
operator|.
name|length
decl_stmt|;
name|metricsHelper
operator|.
name|assertGaugeGt
argument_list|(
literal|"mutationsWithoutWALSize"
argument_list|,
name|minLength
argument_list|,
name|serverSource
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreCount
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Force a hfile.
name|doNPuts
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertGauge
argument_list|(
literal|"storeCount"
argument_list|,
name|TABLES_ON_MASTER
condition|?
literal|1
else|:
literal|5
argument_list|)
expr_stmt|;
name|assertGauge
argument_list|(
literal|"storeFileCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoreFileAge
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Force a hfile.
name|doNPuts
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|metricsHelper
operator|.
name|getGaugeLong
argument_list|(
literal|"maxStoreFileAge"
argument_list|,
name|serverSource
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metricsHelper
operator|.
name|getGaugeLong
argument_list|(
literal|"minStoreFileAge"
argument_list|,
name|serverSource
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metricsHelper
operator|.
name|getGaugeLong
argument_list|(
literal|"avgStoreFileAge"
argument_list|,
name|serverSource
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndPutCount
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|valOne
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Value"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valTwo
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ValueTwo"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valThree
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ValueThree"
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|valOne
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Put
name|pTwo
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|pTwo
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|valTwo
argument_list|)
expr_stmt|;
name|table
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|cf
argument_list|)
operator|.
name|qualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|valOne
argument_list|)
operator|.
name|thenPut
argument_list|(
name|pTwo
argument_list|)
expr_stmt|;
name|Put
name|pThree
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|pThree
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|valThree
argument_list|)
expr_stmt|;
name|table
operator|.
name|checkAndMutate
argument_list|(
name|row
argument_list|,
name|cf
argument_list|)
operator|.
name|qualifier
argument_list|(
name|qualifier
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|valOne
argument_list|)
operator|.
name|thenPut
argument_list|(
name|pThree
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertCounter
argument_list|(
literal|"checkMutateFailedCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"checkMutatePassedCount"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrement
parameter_list|()
throws|throws
name|Exception
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
literal|13
condition|;
name|count
operator|++
control|)
block|{
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|table
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertCounter
argument_list|(
literal|"incrementNumOps"
argument_list|,
literal|13
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|doNPuts
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|count
init|=
literal|0
init|;
name|count
operator|<
literal|73
condition|;
name|count
operator|++
control|)
block|{
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|append
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|",Test"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
block|}
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertCounter
argument_list|(
literal|"appendNumOps"
argument_list|,
literal|73
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanSize
parameter_list|()
throws|throws
name|Exception
block|{
name|doNPuts
argument_list|(
literal|100
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// batch put
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|s
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|resultScanners
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|nextCount
init|=
literal|0
init|;
name|nextCount
operator|<
name|NUM_SCAN_NEXT
condition|;
name|nextCount
operator|++
control|)
block|{
name|Result
name|result
init|=
name|resultScanners
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numScanNext
operator|+=
name|NUM_SCAN_NEXT
expr_stmt|;
name|assertRegionMetrics
argument_list|(
literal|"scanCount"
argument_list|,
name|NUM_SCAN_NEXT
argument_list|)
expr_stmt|;
if|if
condition|(
name|TABLES_ON_MASTER
condition|)
block|{
name|assertCounter
argument_list|(
literal|"ScanSize_num_ops"
argument_list|,
name|numScanNext
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanTime
parameter_list|()
throws|throws
name|Exception
block|{
name|doNPuts
argument_list|(
literal|100
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setBatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|s
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|resultScanners
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|nextCount
init|=
literal|0
init|;
name|nextCount
operator|<
name|NUM_SCAN_NEXT
condition|;
name|nextCount
operator|++
control|)
block|{
name|Result
name|result
init|=
name|resultScanners
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|numScanNext
operator|+=
name|NUM_SCAN_NEXT
expr_stmt|;
name|assertRegionMetrics
argument_list|(
literal|"scanCount"
argument_list|,
name|NUM_SCAN_NEXT
argument_list|)
expr_stmt|;
if|if
condition|(
name|TABLES_ON_MASTER
condition|)
block|{
name|assertCounter
argument_list|(
literal|"ScanTime_num_ops"
argument_list|,
name|numScanNext
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanSizeForSmallScan
parameter_list|()
throws|throws
name|Exception
block|{
name|doNPuts
argument_list|(
literal|100
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|resultScanners
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|nextCount
init|=
literal|0
init|;
name|nextCount
operator|<
name|NUM_SCAN_NEXT
condition|;
name|nextCount
operator|++
control|)
block|{
name|Result
name|result
init|=
name|resultScanners
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|TABLES_ON_MASTER
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|numScanNext
operator|+=
name|NUM_SCAN_NEXT
expr_stmt|;
name|assertRegionMetrics
argument_list|(
literal|"scanCount"
argument_list|,
name|NUM_SCAN_NEXT
argument_list|)
expr_stmt|;
if|if
condition|(
name|TABLES_ON_MASTER
condition|)
block|{
name|assertCounter
argument_list|(
literal|"ScanSize_num_ops"
argument_list|,
name|numScanNext
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMobMetrics
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMobMetricsLocal"
argument_list|)
decl_stmt|;
name|int
name|numHfiles
init|=
literal|5
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mobdata"
argument_list|)
decl_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
index|[
literal|0
index|]
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|rs
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|insertCount
init|=
literal|0
init|;
name|insertCount
operator|<
name|numHfiles
condition|;
name|insertCount
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|insertCount
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertCounter
argument_list|(
literal|"mobFlushCount"
argument_list|,
name|numHfiles
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|numHfiles
argument_list|)
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|numScanNext
operator|++
expr_stmt|;
comment|// this is an ugly construct
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertCounter
argument_list|(
literal|"mobScanCellsCount"
argument_list|,
name|numHfiles
argument_list|)
expr_stmt|;
name|setMobThreshold
argument_list|(
name|region
argument_list|,
name|cf
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// metrics are reset by the region initialization
name|region
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertCounter
argument_list|(
literal|"cellsCountCompactedFromMob"
argument_list|,
name|numHfiles
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"cellsCountCompactedToMob"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|next
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|numScanNext
operator|++
expr_stmt|;
comment|// this is an ugly construct
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertCounter
argument_list|(
literal|"mobScanCellsCount"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|insertCount
init|=
name|numHfiles
init|;
name|insertCount
operator|<
literal|2
operator|*
name|numHfiles
condition|;
name|insertCount
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|insertCount
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|setMobThreshold
argument_list|(
name|region
argument_list|,
name|cf
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// closing the region forces the compaction.discharger to archive the compacted hfiles
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// metrics are reset by the region initialization
name|region
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
comment|// metrics are reset by the region initialization
name|assertCounter
argument_list|(
literal|"cellsCountCompactedFromMob"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertCounter
argument_list|(
literal|"cellsCountCompactedToMob"
argument_list|,
literal|2
operator|*
name|numHfiles
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Region
name|setMobThreshold
parameter_list|(
name|Region
name|region
parameter_list|,
name|byte
index|[]
name|cfName
parameter_list|,
name|long
name|modThreshold
parameter_list|)
block|{
name|ColumnFamilyDescriptor
name|cfd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getColumnFamily
argument_list|(
name|cfName
argument_list|)
argument_list|)
operator|.
name|setMobThreshold
argument_list|(
name|modThreshold
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TableDescriptor
name|td
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|region
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
operator|.
name|removeColumnFamily
argument_list|(
name|cfName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
operator|(
operator|(
name|HRegion
operator|)
name|region
operator|)
operator|.
name|setTableDescriptor
argument_list|(
name|td
argument_list|)
expr_stmt|;
return|return
name|region
return|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|testRangeCountMetrics
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
index|[]
name|timeranges
init|=
block|{
literal|1
block|,
literal|3
block|,
literal|10
block|,
literal|30
block|,
literal|100
block|,
literal|300
block|,
literal|1000
block|,
literal|3000
block|,
literal|10000
block|,
literal|30000
block|,
literal|60000
block|,
literal|120000
block|,
literal|300000
block|,
literal|600000
block|}
decl_stmt|;
specifier|final
name|String
name|timeRangeType
init|=
literal|"TimeRangeCount"
decl_stmt|;
specifier|final
name|String
name|timeRangeMetricName
init|=
literal|"Mutate"
decl_stmt|;
name|boolean
name|timeRangeCountUpdated
init|=
literal|false
decl_stmt|;
comment|// Do a first put to be sure that the connection is established, meta is there and so on.
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|cf
argument_list|,
name|qualifier
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// do some puts and gets
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
comment|// Check some time range counters were updated
name|long
name|prior
init|=
literal|0
decl_stmt|;
name|String
name|dynamicMetricName
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timeranges
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|dynamicMetricName
operator|=
name|timeRangeMetricName
operator|+
literal|"_"
operator|+
name|timeRangeType
operator|+
literal|"_"
operator|+
name|prior
operator|+
literal|"-"
operator|+
name|timeranges
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|metricsHelper
operator|.
name|checkCounterExists
argument_list|(
name|dynamicMetricName
argument_list|,
name|serverSource
argument_list|)
condition|)
block|{
name|long
name|count
init|=
name|metricsHelper
operator|.
name|getGaugeLong
argument_list|(
name|dynamicMetricName
argument_list|,
name|serverSource
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|timeRangeCountUpdated
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|prior
operator|=
name|timeranges
index|[
name|i
index|]
expr_stmt|;
block|}
name|dynamicMetricName
operator|=
name|timeRangeMetricName
operator|+
literal|"_"
operator|+
name|timeRangeType
operator|+
literal|"_"
operator|+
name|timeranges
index|[
name|timeranges
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|"-inf"
expr_stmt|;
if|if
condition|(
name|metricsHelper
operator|.
name|checkCounterExists
argument_list|(
name|dynamicMetricName
argument_list|,
name|serverSource
argument_list|)
condition|)
block|{
name|long
name|count
init|=
name|metricsHelper
operator|.
name|getCounter
argument_list|(
name|dynamicMetricName
argument_list|,
name|serverSource
argument_list|)
decl_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|timeRangeCountUpdated
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|timeRangeCountUpdated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAverageRegionSize
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Force a hfile.
name|doNPuts
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|metricsRegionServer
operator|.
name|getRegionServerWrapper
argument_list|()
operator|.
name|forceRecompute
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|metricsHelper
operator|.
name|getGaugeDouble
argument_list|(
literal|"averageRegionSize"
argument_list|,
name|serverSource
argument_list|)
operator|>
literal|0.0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

