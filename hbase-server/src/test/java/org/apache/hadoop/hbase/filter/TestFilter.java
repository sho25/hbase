begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|FilterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_comment
comment|/**  * Test filters at the HRegion doorstep.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|FilterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestFilter
block|{
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Region
name|region
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|//
comment|// Rows, Qualifiers, and Values are in two groups, One and Two.
comment|//
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|ROWS_ONE
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|ROWS_TWO
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|ROWS_THREE
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowThree-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowThree-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowThree-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowThree-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|ROWS_FOUR
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowFour-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowFour-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowFour-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowFour-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyOne"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyTwo"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES_1
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyThree"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyFour"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|QUALIFIERS_ONE
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|QUALIFIERS_TWO
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|QUALIFIERS_THREE
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierThree-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierThree-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierThree-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierThree-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|QUALIFIERS_FOUR
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierFour-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierFour-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierFour-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierFour-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|VALUES
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
block|}
decl_stmt|;
name|byte
index|[]
index|[]
name|NEW_FAMILIES
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
block|}
decl_stmt|;
specifier|private
name|long
name|numRows
init|=
name|ROWS_ONE
operator|.
name|length
operator|+
name|ROWS_TWO
operator|.
name|length
decl_stmt|;
specifier|private
name|long
name|colsPerRow
init|=
name|FAMILIES
operator|.
name|length
operator|*
name|QUALIFIERS_ONE
operator|.
name|length
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestFilter"
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILIES_1
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILIES_1
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|NEW_FAMILIES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|NEW_FAMILIES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|info
argument_list|,
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// Insert first half
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_ONE
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_ONE
control|)
block|{
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_TWO
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_TWO
control|)
block|{
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// Flush
name|this
operator|.
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Insert second half (reverse families)
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_ONE
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_ONE
control|)
block|{
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_TWO
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_TWO
control|)
block|{
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// Delete the second qualifier from all rows and families
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_ONE
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_TWO
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|colsPerRow
operator|-=
literal|2
expr_stmt|;
comment|// Delete the second rows from both groups, one column at a time
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_ONE
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROWS_ONE
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_TWO
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROWS_TWO
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|numRows
operator|-=
literal|2
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionScannerReseek
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create new rows and column family to show how reseek works..
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_THREE
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_THREE
control|)
block|{
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_FOUR
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_FOUR
control|)
block|{
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// Flush
name|this
operator|.
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Insert second half (reverse families)
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_THREE
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_THREE
control|)
block|{
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_FOUR
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_FOUR
control|)
block|{
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// set a start row
name|s
operator|.
name|setStartRow
argument_list|(
name|ROWS_FOUR
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|RegionScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
comment|// reseek to row three.
name|scanner
operator|.
name|reseek
argument_list|(
name|ROWS_THREE
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
comment|// the results should belong to ROWS_THREE[1]
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|keyValue
range|:
name|results
control|)
block|{
name|assertTrue
argument_list|(
literal|"The rows with ROWS_TWO as row key should be appearing."
argument_list|,
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|keyValue
argument_list|,
name|ROWS_THREE
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// again try to reseek to a value before ROWS_THREE[1]
name|scanner
operator|.
name|reseek
argument_list|(
name|ROWS_ONE
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
expr_stmt|;
comment|// This time no seek would have been done to ROWS_ONE[1]
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|keyValue
range|:
name|results
control|)
block|{
name|assertFalse
argument_list|(
literal|"Cannot rewind back to a value less than previous reseek."
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|keyValue
argument_list|)
argument_list|)
operator|.
name|contains
argument_list|(
literal|"testRowOne"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// No filter
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
comment|// Both families
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// One family
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrefixFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Grab rows from group one (half of total)
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
operator|/
literal|2
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPrefixFilterWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Grab rows from group one (half of total)
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
operator|/
literal|2
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// KVs in first 6 rows
name|KeyValue
index|[]
name|expectedKVs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
comment|// Grab all 6 rows
name|long
name|expectedRows
init|=
literal|6
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs
argument_list|)
expr_stmt|;
comment|// Grab first 4 rows (6 cols per row)
name|expectedRows
operator|=
literal|4
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expectedKVs
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
comment|// Grab first 2 rows
name|expectedRows
operator|=
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expectedKVs
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
comment|// Grab first row
name|expectedRows
operator|=
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expectedKVs
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testPageFilterWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
comment|// KVs in first 6 rows
name|KeyValue
index|[]
name|expectedKVs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
comment|// Grab all 6 rows
name|long
name|expectedRows
init|=
literal|6
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Grab first 4 rows (6 cols per row)
name|expectedRows
operator|=
literal|4
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Grab first 2 rows
name|expectedRows
operator|=
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Grab first row
name|expectedRows
operator|=
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWhileMatchFilterWithFilterRowWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|pageSize
init|=
literal|4
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WhileMatchFilter
name|filter
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|pageSize
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|scannerCounter
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|isMoreResults
init|=
name|scanner
operator|.
name|next
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|scannerCounter
operator|++
expr_stmt|;
if|if
condition|(
name|scannerCounter
operator|>=
name|pageSize
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The WhileMatchFilter should now filter all remaining"
argument_list|,
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isMoreResults
condition|)
block|{
break|break;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"The page filter returned more rows than expected"
argument_list|,
name|pageSize
argument_list|,
name|scannerCounter
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testWhileMatchFilterWithFilterRowKeyWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|"testRowOne"
decl_stmt|;
name|WhileMatchFilter
name|filter
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|prefix
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|s
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isMoreResults
init|=
name|scanner
operator|.
name|next
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isMoreResults
operator|||
operator|!
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The WhileMatchFilter should now filter all remaining"
argument_list|,
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isMoreResults
condition|)
block|{
break|break;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests the the {@link WhileMatchFilter} works in combination with a    * {@link Filter} that uses the    * {@link Filter#filterRow()} method.    *    * See HBASE-2258.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testWhileMatchFilterWithFilterRow
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|pageSize
init|=
literal|4
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|WhileMatchFilter
name|filter
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|pageSize
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|scannerCounter
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|isMoreResults
init|=
name|scanner
operator|.
name|next
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|scannerCounter
operator|++
expr_stmt|;
if|if
condition|(
name|scannerCounter
operator|>=
name|pageSize
condition|)
block|{
name|assertTrue
argument_list|(
literal|"The WhileMatchFilter should now filter all remaining"
argument_list|,
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isMoreResults
condition|)
block|{
break|break;
block|}
block|}
name|assertEquals
argument_list|(
literal|"The page filter returned more rows than expected"
argument_list|,
name|pageSize
argument_list|,
name|scannerCounter
argument_list|)
expr_stmt|;
block|}
comment|/**    * The following filter simulates a pre-0.96 filter where filterRow() is defined while    * hasFilterRow() returns false    */
specifier|static
class|class
name|OldTestFilter
extends|extends
name|FilterBase
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFilterRow
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRow
parameter_list|()
block|{
comment|// always filter out rows
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|Cell
name|ignored
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
block|}
comment|/**    * The following test is to ensure old(such as hbase0.94) filterRow() can be correctly fired in    * 0.96+ code base.    *    * See HBASE-10366    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|tes94FilterRowCompatibility
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|OldTestFilter
name|filter
init|=
operator|new
name|OldTestFilter
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"All rows should be filtered out"
argument_list|,
name|values
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the the {@link WhileMatchFilter} works in combination with a    * {@link Filter} that uses the    * {@link Filter#filterRowKey(Cell)} method.    *    * See HBASE-2258.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testWhileMatchFilterWithFilterRowKey
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|"testRowOne"
decl_stmt|;
name|WhileMatchFilter
name|filter
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|prefix
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isMoreResults
init|=
name|scanner
operator|.
name|next
argument_list|(
name|values
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isMoreResults
operator|||
operator|!
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"The WhileMatchFilter should now filter all remaining"
argument_list|,
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isMoreResults
condition|)
block|{
break|break;
block|}
block|}
block|}
comment|/**    * Tests the the {@link WhileMatchFilter} works in combination with a    * {@link Filter} that uses the {@link Filter#filterKeyValue(Cell)} method.    *    * See HBASE-2258.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testWhileMatchFilterWithFilterKeyValue
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|WhileMatchFilter
name|filter
init|=
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|isMoreResults
init|=
name|scanner
operator|.
name|next
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The WhileMatchFilter should now filter all remaining"
argument_list|,
name|filter
operator|.
name|filterAllRemaining
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isMoreResults
condition|)
block|{
break|break;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInclusiveStopFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Grab rows from group one
comment|// If we just use start/stop row, we get total/2 - 1 rows
name|long
name|expectedRows
init|=
operator|(
name|this
operator|.
name|numRows
operator|/
literal|2
operator|)
operator|-
literal|1
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-3"
argument_list|)
argument_list|)
decl_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Now use start row with inclusive stop filter
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-0"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|InclusiveStopFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Grab rows from group two
comment|// If we just use start/stop row, we get total/2 - 1 rows
name|expectedRows
operator|=
operator|(
name|this
operator|.
name|numRows
operator|/
literal|2
operator|)
operator|-
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-3"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Now use start row with inclusive stop filter
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-0"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|InclusiveStopFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQualifierFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Match two keys (one from each family) in half the rows
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
operator|/
literal|2
decl_stmt|;
name|long
name|expectedKeys
init|=
literal|2
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys less than same qualifier
comment|// Expect only two keys (one from each family) in half the rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|2
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys less than or equal
comment|// Expect four keys (two from each family) in half the rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|4
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys not equal
comment|// Expect four keys (two from each family)
comment|// Only look in first group of rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|4
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater or equal
comment|// Expect four keys (two from each family)
comment|// Only look in first group of rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|4
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater
comment|// Expect two keys (one from each family)
comment|// Only look in first group of rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|2
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys not equal to
comment|// Look across rows and fully validate the keys and ordering
comment|// Expect varied numbers of keys, 4 per row in group one, 6 per row in group two
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Test across rows and groups with a regex
comment|// Filter out "test*-2"
comment|// Expect 4 keys per row across both groups
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"test.+-2"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFamilyFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Match family, only half of columns returned.
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
operator|/
literal|2
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyOne"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys less than given family, should return nothing
name|expectedRows
operator|=
literal|0
expr_stmt|;
name|expectedKeys
operator|=
literal|0
expr_stmt|;
name|f
operator|=
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys less than or equal, should return half of columns
name|expectedRows
operator|=
name|this
operator|.
name|numRows
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
operator|/
literal|2
expr_stmt|;
name|f
operator|=
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys from second family
comment|// look only in second group of rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
operator|/
literal|2
expr_stmt|;
name|f
operator|=
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match all columns
comment|// look only in second group of rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match all columns in second family
comment|// look only in second group of rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
operator|/
literal|2
expr_stmt|;
name|f
operator|=
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys not equal to given family
comment|// Look across rows and fully validate the keys and ordering
name|f
operator|=
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,       }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Test across rows and groups with a regex
comment|// Filter out "test*-2"
comment|// Expect 4 keys per row across both groups
name|f
operator|=
operator|new
name|FamilyFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"test.*One"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,       }
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Match a single row, all keys
name|long
name|expectedRows
init|=
literal|1
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match a two rows, one from each group, using regex
name|expectedRows
operator|=
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"testRow.+-2"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows less than
comment|// Expect all keys in one row
name|expectedRows
operator|=
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows less than or equal
comment|// Expect all keys in two rows
name|expectedRows
operator|=
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows not equal
comment|// Expect all keys in all but one row
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|-
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater or equal
comment|// Expect all keys in all but one row
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|-
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater
comment|// Expect all keys in all but two rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|-
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows not equal to testRowTwo-2
comment|// Look across rows and fully validate the keys and ordering
comment|// Should see all keys in all rows but testRowTwo-2
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Test across rows and groups with a regex
comment|// Filter out everything that doesn't match "*-2"
comment|// Expect all keys in two rows
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValueFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Match group one rows
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
operator|/
literal|2
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match group two rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match all values using regex
name|expectedRows
operator|=
name|this
operator|.
name|numRows
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"testValue((One)|(Two))"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values less than
comment|// Expect group one rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values less than or equal
comment|// Expect all rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values less than or equal
comment|// Expect group one rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values not equal
comment|// Expect half the rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values greater or equal
comment|// Expect all rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values greater
comment|// Expect half rows
name|expectedRows
operator|=
name|this
operator|.
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|this
operator|.
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values not equal to testValueOne
comment|// Look across rows and fully validate the keys and ordering
comment|// Should see all keys in all group two rows
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSkipFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test for qualifier regex: "testQualifierOne-2"
comment|// Should only get rows from second group, and all keys
name|Filter
name|f
init|=
operator|new
name|SkipFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
comment|// TODO: This is important... need many more tests for ordering, etc
comment|// There are limited tests elsewhere but we need HRegion level ones here
annotation|@
name|Test
specifier|public
name|void
name|testFilterList
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test getting a single row, single key using Row, Qualifier, and Value
comment|// regular expression and substring filters
comment|// Use must pass all
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"One"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|}
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Test getting everything with a MUST_PASS_ONE filter including row, qf, val
comment|// regular expression and substring filters
name|filters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+Two.+"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"One"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filters
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|this
operator|.
name|numRows
argument_list|,
name|this
operator|.
name|colsPerRow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirstKeyOnlyFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expected KVs, the first KV from each of the remaining 6 rows
name|KeyValue
index|[]
name|kvs
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterListWithSingleColumnValueFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test for HBASE-3191
comment|// Scan using SingleColumnValueFilter
name|SingleColumnValueFilter
name|f1
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|f1
operator|.
name|setFilterIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Scan
name|s1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s1
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s1
operator|.
name|setFilter
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs1
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s1
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s1
argument_list|,
name|kvs1
argument_list|)
expr_stmt|;
comment|// Scan using another SingleColumnValueFilter, expect disjoint result
name|SingleColumnValueFilter
name|f2
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|f2
operator|.
name|setFilterIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Scan
name|s2
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s2
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s2
operator|.
name|setFilter
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs2
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s2
argument_list|,
name|kvs2
argument_list|)
expr_stmt|;
comment|// Scan, ORing the two previous filters, expect unified result
name|FilterList
name|f
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
decl_stmt|;
name|f
operator|.
name|addFilter
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|f
operator|.
name|addFilter
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
comment|// HBASE-9747
annotation|@
name|Test
specifier|public
name|void
name|testFilterListWithPrefixFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestFilter"
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Region
name|testRegion
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|info
argument_list|,
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
name|i
argument_list|)
operator|+
literal|"row"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
literal|111
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|testRegion
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|testRegion
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// rows starting with "b"
name|PrefixFilter
name|pf
init|=
operator|new
name|PrefixFilter
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'b'
block|}
argument_list|)
decl_stmt|;
comment|// rows with value of column 'q1' set to '113'
name|SingleColumnValueFilter
name|scvf
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"113"
argument_list|)
argument_list|)
decl_stmt|;
comment|// combine these two with OR in a FilterList
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|pf
argument_list|,
name|scvf
argument_list|)
decl_stmt|;
name|Scan
name|s1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s1
operator|.
name|setFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|testRegion
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|resultCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|)
block|{
name|resultCount
operator|++
expr_stmt|;
name|byte
index|[]
name|row
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Found row: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"brow"
argument_list|)
argument_list|)
operator|||
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"crow"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultCount
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|WAL
name|wal
init|=
operator|(
operator|(
name|HRegion
operator|)
name|testRegion
operator|)
operator|.
name|getWAL
argument_list|()
decl_stmt|;
operator|(
operator|(
name|HRegion
operator|)
name|testRegion
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleColumnValueFilter
parameter_list|()
throws|throws
name|IOException
block|{
comment|// From HBASE-1821
comment|// Desired action is to combine two SCVF in a FilterList
comment|// Want to return only rows that match both conditions
comment|// Need to change one of the group one columns to use group two value
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// Now let's grab rows that have Q_ONE[0](VALUES[0]) and Q_ONE[2](VALUES[1])
comment|// Since group two rows don't have these qualifiers, they will pass
comment|// so limiting scan to group one
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
comment|// Expect only one row, all qualifiers
name|KeyValue
index|[]
name|kvs
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|}
decl_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// In order to get expected behavior without limiting to group one
comment|// need to wrap SCVFs in SkipFilters
name|filters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|SkipFilter
argument_list|(
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|SkipFilter
argument_list|(
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
comment|// Expect same KVs
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// More tests from HBASE-1821 for Clint and filterIfMissing flag
name|byte
index|[]
index|[]
name|ROWS_THREE
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowThree-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowThree-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowThree-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowThree-3"
argument_list|)
block|}
decl_stmt|;
comment|// Give row 0 and 2 QUALIFIERS_ONE[0] (VALUE[0] VALUE[1])
comment|// Give row 1 and 3 QUALIFIERS_ONE[1] (VALUE[0] VALUE[1])
name|KeyValue
index|[]
name|srcKVs
init|=
operator|new
name|KeyValue
index|[]
block|{
operator|new
name|KeyValue
argument_list|(
name|ROWS_THREE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_THREE
index|[
literal|1
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_THREE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_THREE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|srcKVs
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// Match VALUES[0] against QUALIFIERS_ONE[0] with filterIfMissing = false
comment|// Expect 3 rows (0, 2, 3)
name|SingleColumnValueFilter
name|scvf
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS_THREE
index|[
literal|0
index|]
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowThree-4"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|scvf
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
name|srcKVs
index|[
literal|0
index|]
block|,
name|srcKVs
index|[
literal|2
index|]
block|,
name|srcKVs
index|[
literal|3
index|]
block|}
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Match VALUES[0] against QUALIFIERS_ONE[0] with filterIfMissing = true
comment|// Expect 1 row (0)
name|scvf
operator|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scvf
operator|.
name|setFilterIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS_THREE
index|[
literal|0
index|]
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowThree-4"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|scvf
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
name|srcKVs
index|[
literal|0
index|]
block|}
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Match VALUES[1] against QUALIFIERS_ONE[1] with filterIfMissing = true
comment|// Expect 1 row (3)
name|scvf
operator|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scvf
operator|.
name|setFilterIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS_THREE
index|[
literal|0
index|]
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowThree-4"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|scvf
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
name|srcKVs
index|[
literal|3
index|]
block|}
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Add QUALIFIERS_ONE[1] to ROWS_THREE[0] with VALUES[0]
name|KeyValue
name|kvA
init|=
operator|new
name|KeyValue
argument_list|(
name|ROWS_THREE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kvA
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|kvA
argument_list|)
argument_list|)
expr_stmt|;
comment|// Match VALUES[1] against QUALIFIERS_ONE[1] with filterIfMissing = true
comment|// Expect 1 row (3)
name|scvf
operator|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scvf
operator|.
name|setFilterIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS_THREE
index|[
literal|0
index|]
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rowThree-4"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|scvf
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
name|srcKVs
index|[
literal|3
index|]
block|}
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyScan
parameter_list|(
name|Scan
name|s
parameter_list|,
name|long
name|expectedRows
parameter_list|,
name|long
name|expectedKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|done
init|=
literal|true
init|;
name|done
condition|;
name|i
operator|++
control|)
block|{
name|done
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|KeyValue
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"counter="
operator|+
name|i
operator|+
literal|", "
operator|+
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|assertTrue
argument_list|(
literal|"Scanned too many rows! Only expected "
operator|+
name|expectedRows
operator|+
literal|" total but already scanned "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|expectedRows
operator|>
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedKeys
operator|+
literal|" keys per row but "
operator|+
literal|"returned "
operator|+
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|expectedKeys
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedRows
operator|+
literal|" rows but scanned "
operator|+
name|i
operator|+
literal|" rows"
argument_list|,
name|expectedRows
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyScanNoEarlyOut
parameter_list|(
name|Scan
name|s
parameter_list|,
name|long
name|expectedRows
parameter_list|,
name|long
name|expectedKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|done
init|=
literal|true
init|;
name|done
condition|;
name|i
operator|++
control|)
block|{
name|done
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|KeyValue
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"counter="
operator|+
name|i
operator|+
literal|", "
operator|+
name|results
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|assertTrue
argument_list|(
literal|"Scanned too many rows! Only expected "
operator|+
name|expectedRows
operator|+
literal|" total but already scanned "
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
name|expectedRows
operator|>
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedKeys
operator|+
literal|" keys per row but "
operator|+
literal|"returned "
operator|+
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|expectedKeys
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedRows
operator|+
literal|" rows but scanned "
operator|+
name|i
operator|+
literal|" rows"
argument_list|,
name|expectedRows
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyScanFull
parameter_list|(
name|Scan
name|s
parameter_list|,
name|KeyValue
index|[]
name|kvs
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|done
init|=
literal|true
init|;
name|done
condition|;
name|row
operator|++
control|)
block|{
name|done
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|KeyValue
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|assertTrue
argument_list|(
literal|"Scanned too many keys! Only expected "
operator|+
name|kvs
operator|.
name|length
operator|+
literal|" total but already scanned "
operator|+
operator|(
name|results
operator|.
name|size
argument_list|()
operator|+
name|idx
operator|)
operator|+
operator|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"("
operator|+
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|")"
operator|)
argument_list|,
name|kvs
operator|.
name|length
operator|>=
name|idx
operator|+
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"row="
operator|+
name|row
operator|+
literal|", result="
operator|+
name|kv
operator|.
name|toString
argument_list|()
operator|+
literal|", match="
operator|+
name|kvs
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Row mismatch"
argument_list|,
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|kv
argument_list|,
name|kvs
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Family mismatch"
argument_list|,
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|kv
argument_list|,
name|kvs
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Qualifier mismatch"
argument_list|,
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|kv
argument_list|,
name|kvs
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Value mismatch"
argument_list|,
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|kv
argument_list|,
name|kvs
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Looked at "
operator|+
name|row
operator|+
literal|" rows with "
operator|+
name|idx
operator|+
literal|" keys"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|kvs
operator|.
name|length
operator|+
literal|" total keys but scanned "
operator|+
name|idx
argument_list|,
name|kvs
operator|.
name|length
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyScanFullNoValues
parameter_list|(
name|Scan
name|s
parameter_list|,
name|KeyValue
index|[]
name|kvs
parameter_list|,
name|boolean
name|useLen
parameter_list|)
throws|throws
name|IOException
block|{
name|InternalScanner
name|scanner
init|=
name|this
operator|.
name|region
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|more
init|=
literal|true
init|;
name|more
condition|;
name|row
operator|++
control|)
block|{
name|more
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|results
operator|.
name|toArray
argument_list|(
operator|new
name|KeyValue
index|[
name|results
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|assertTrue
argument_list|(
literal|"Scanned too many keys! Only expected "
operator|+
name|kvs
operator|.
name|length
operator|+
literal|" total but already scanned "
operator|+
operator|(
name|results
operator|.
name|size
argument_list|()
operator|+
name|idx
operator|)
operator|+
operator|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"("
operator|+
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
operator|+
literal|")"
operator|)
argument_list|,
name|kvs
operator|.
name|length
operator|>=
name|idx
operator|+
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"row="
operator|+
name|row
operator|+
literal|", result="
operator|+
name|kv
operator|.
name|toString
argument_list|()
operator|+
literal|", match="
operator|+
name|kvs
index|[
name|idx
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Row mismatch"
argument_list|,
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|kv
argument_list|,
name|kvs
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Family mismatch"
argument_list|,
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|kv
argument_list|,
name|kvs
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Qualifier mismatch"
argument_list|,
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|kv
argument_list|,
name|kvs
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Should not have returned whole value"
argument_list|,
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|kv
argument_list|,
name|kvs
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useLen
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Value in result is not SIZEOF_INT"
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"idx = "
operator|+
name|idx
operator|+
literal|", len="
operator|+
name|kvs
index|[
name|idx
index|]
operator|.
name|getValueLength
argument_list|()
operator|+
literal|", actual="
operator|+
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Scan value should be the length of the actual value. "
argument_list|,
name|kvs
index|[
name|idx
index|]
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"good"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Value in result is not empty"
argument_list|,
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|idx
operator|++
expr_stmt|;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Looked at "
operator|+
name|row
operator|+
literal|" rows with "
operator|+
name|idx
operator|+
literal|" keys"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|kvs
operator|.
name|length
operator|+
literal|" total keys but scanned "
operator|+
name|idx
argument_list|,
name|kvs
operator|.
name|length
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testColumnPaginationFilterColumnOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyValue
index|[]
name|expectedKVs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|KeyValue
index|[]
name|expectedKVs1
init|=
block|{
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
name|KeyValue
index|[]
name|expectedKVs2
init|=
block|{
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
name|KeyValue
index|[]
name|expectedKVs3
init|=
block|{
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// Page size 1.
name|long
name|expectedRows
init|=
literal|6
decl_stmt|;
name|long
name|expectedKeys
init|=
literal|1
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|1
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs
argument_list|)
expr_stmt|;
comment|// Page size 2.
name|expectedRows
operator|=
literal|3
expr_stmt|;
name|expectedKeys
operator|=
literal|2
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|2
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs1
argument_list|)
expr_stmt|;
comment|// Page size 3 across multiple column families.
name|expectedRows
operator|=
literal|3
expr_stmt|;
name|expectedKeys
operator|=
literal|3
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|3
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs2
argument_list|)
expr_stmt|;
comment|// Page size 2 restricted to one column family.
name|expectedRows
operator|=
literal|3
expr_stmt|;
name|expectedKeys
operator|=
literal|2
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|2
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColumnPaginationFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that the filter skips multiple column versions.
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|this
operator|.
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Set of KVs (page: 1; pageSize: 1) - the first set of 1 column per row
name|KeyValue
index|[]
name|expectedKVs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
comment|// Set of KVs (page: 3; pageSize: 1)  - the third set of 1 column per row
name|KeyValue
index|[]
name|expectedKVs2
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,       }
decl_stmt|;
comment|// Set of KVs (page: 2; pageSize 2)  - the 2nd set of 2 columns per row
name|KeyValue
index|[]
name|expectedKVs3
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,       }
decl_stmt|;
comment|// Set of KVs (page: 2; pageSize 2)  - the 2nd set of 2 columns per row
name|KeyValue
index|[]
name|expectedKVs4
init|=
block|{        }
decl_stmt|;
name|long
name|expectedRows
init|=
name|this
operator|.
name|numRows
decl_stmt|;
name|long
name|expectedKeys
init|=
literal|1
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// Page 1; 1 Column per page  (Limit 1, Offset 0)
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs
argument_list|)
expr_stmt|;
comment|// Page 3; 1 Result per page  (Limit 1, Offset 2)
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs2
argument_list|)
expr_stmt|;
comment|// Page 2; 2 Results per page (Limit 2, Offset 2)
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|expectedKeys
operator|=
literal|2
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|this
operator|.
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs3
argument_list|)
expr_stmt|;
comment|// Page 8; 20 Results per page (no results) (Limit 20, Offset 140)
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnPaginationFilter
argument_list|(
literal|20
argument_list|,
literal|140
argument_list|)
argument_list|)
expr_stmt|;
name|expectedKeys
operator|=
literal|0
expr_stmt|;
name|expectedRows
operator|=
literal|0
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeyOnlyFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// KVs in first 6 rows
name|KeyValue
index|[]
name|expectedKVs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
comment|// Grab all 6 rows
name|long
name|expectedRows
init|=
literal|6
decl_stmt|;
name|long
name|expectedKeys
init|=
name|this
operator|.
name|colsPerRow
decl_stmt|;
for|for
control|(
name|boolean
name|useLen
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|KeyOnlyFilter
argument_list|(
name|useLen
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|verifyScanFullNoValues
argument_list|(
name|s
argument_list|,
name|expectedKVs
argument_list|,
name|useLen
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Filter which makes sleeps for a second between each row of a scan.    * This can be useful for manual testing of bugs like HBASE-5973. For example:    *<code>    * create 't1', 'f1'    * 1.upto(100)  { |x| put 't1', 'r' + x.to_s, 'f1:q1', 'hi' }    * import org.apache.hadoop.hbase.filter.TestFilter    * scan 't1', { FILTER => TestFilter::SlowScanFilter.new(), CACHE => 50 }    *</code>    */
specifier|public
specifier|static
class|class
name|SlowScanFilter
extends|extends
name|FilterBase
block|{
specifier|private
specifier|static
name|Thread
name|ipcHandlerThread
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|Cell
name|ignored
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterRow
parameter_list|()
throws|throws
name|IOException
block|{
name|ipcHandlerThread
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Handler thread "
operator|+
name|ipcHandlerThread
operator|+
literal|" sleeping in filter..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Throwables
operator|.
name|propagate
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|filterRow
argument_list|()
return|;
block|}
block|}
comment|// TODO: intentionally disabled?
specifier|public
name|void
name|testNestedFilterListWithSCVF
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|columnStatus
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"S"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testNestedFilterListWithSCVF"
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Region
name|testRegion
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|info
argument_list|,
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|columnStatus
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|%
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|testRegion
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|testRegion
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// 1. got rows> "row4"
name|Filter
name|rowFilter
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row4"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s1
operator|.
name|setFilter
argument_list|(
name|rowFilter
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|testRegion
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|5
decl_stmt|;
for|for
control|(
name|boolean
name|done
init|=
literal|true
init|;
name|done
condition|;
name|i
operator|++
control|)
block|{
name|done
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|i
operator|%
literal|2
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// 2. got rows<= "row4" and S=
name|FilterList
name|subFilterList
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|)
decl_stmt|;
name|Filter
name|subFilter1
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row4"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|subFilterList
operator|.
name|addFilter
argument_list|(
name|subFilter1
argument_list|)
expr_stmt|;
name|Filter
name|subFilter2
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|columnStatus
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|subFilterList
operator|.
name|addFilter
argument_list|(
name|subFilter2
argument_list|)
expr_stmt|;
name|s1
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s1
operator|.
name|setFilter
argument_list|(
name|subFilterList
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|testRegion
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
literal|4
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|i
operator|%
literal|2
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. let's begin to verify nested filter list
comment|// 3.1 add rowFilter, then add subFilterList
name|FilterList
name|filterList
init|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
decl_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|rowFilter
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|subFilterList
argument_list|)
expr_stmt|;
name|s1
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s1
operator|.
name|setFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|testRegion
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
literal|4
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|i
operator|%
literal|2
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|5
init|;
name|i
operator|<=
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|i
operator|%
literal|2
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3.2 MAGIC here! add subFilterList first, then add rowFilter
name|filterList
operator|=
operator|new
name|FilterList
argument_list|(
name|FilterList
operator|.
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|subFilterList
argument_list|)
expr_stmt|;
name|filterList
operator|.
name|addFilter
argument_list|(
name|rowFilter
argument_list|)
expr_stmt|;
name|s1
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s1
operator|.
name|setFilter
argument_list|(
name|filterList
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|testRegion
operator|.
name|getScanner
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
literal|4
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|i
operator|%
literal|2
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|i
operator|=
literal|5
init|;
name|i
operator|<=
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|i
operator|%
literal|2
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|WAL
name|wal
init|=
operator|(
operator|(
name|HRegion
operator|)
name|testRegion
operator|)
operator|.
name|getWAL
argument_list|()
decl_stmt|;
operator|(
operator|(
name|HRegion
operator|)
name|testRegion
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

