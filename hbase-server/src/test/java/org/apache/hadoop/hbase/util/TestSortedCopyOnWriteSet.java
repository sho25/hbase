begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011 The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSortedCopyOnWriteSet
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSorting
parameter_list|()
throws|throws
name|Exception
block|{
name|SortedCopyOnWriteSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|SortedCopyOnWriteSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
decl_stmt|;
name|String
index|[]
name|stored
init|=
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|stored
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|stored
operator|=
name|set
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|stored
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIteratorIsolation
parameter_list|()
throws|throws
name|Exception
block|{
name|SortedCopyOnWriteSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|SortedCopyOnWriteSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|,
literal|"c"
argument_list|,
literal|"d"
argument_list|,
literal|"e"
argument_list|)
argument_list|)
decl_stmt|;
comment|// isolation of remove()
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|set
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|set
operator|.
name|remove
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|)
block|{
name|found
operator|=
literal|"c"
operator|.
name|equals
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
name|iter
operator|=
name|set
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|)
block|{
name|found
operator|=
literal|"c"
operator|.
name|equals
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|found
argument_list|)
expr_stmt|;
comment|// isolation of add()
name|iter
operator|=
name|set
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|"f"
argument_list|)
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|)
block|{
name|String
name|next
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|found
operator|=
literal|"f"
operator|.
name|equals
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|found
argument_list|)
expr_stmt|;
comment|// isolation of addAll()
name|iter
operator|=
name|set
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|set
operator|.
name|addAll
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"g"
argument_list|,
literal|"h"
argument_list|,
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|found
condition|)
block|{
name|String
name|next
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|found
operator|=
literal|"g"
operator|.
name|equals
argument_list|(
name|next
argument_list|)
operator|||
literal|"h"
operator|.
name|equals
argument_list|(
name|next
argument_list|)
operator|||
literal|"i"
operator|.
name|equals
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|found
argument_list|)
expr_stmt|;
comment|// isolation of clear()
name|iter
operator|=
name|set
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|size
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

