begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|TestHFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitTransactionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SplitTransactionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TestEndToEndSplitTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HFileCorruptionChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHBaseFsckOneRS
extends|extends
name|BaseTestHBaseFsck
block|{
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|MasterSyncObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.handler.count"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.metahandler.count"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.htable.threads.max"
argument_list|,
name|POOL_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hconnection.threads.max"
argument_list|,
literal|2
operator|*
name|POOL_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hconnection.threads.core"
argument_list|,
name|POOL_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hbck.close.timeout"
argument_list|,
literal|2
operator|*
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|8
operator|*
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tableExecutorService
operator|=
operator|new
name|ThreadPoolExecutor
argument_list|(
literal|1
argument_list|,
name|POOL_SIZE
argument_list|,
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
name|Threads
operator|.
name|newDaemonThreadFactory
argument_list|(
literal|"testhbck"
argument_list|)
argument_list|)
expr_stmt|;
name|hbfsckExecutorService
operator|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
name|POOL_SIZE
argument_list|)
expr_stmt|;
name|AssignmentManager
name|assignmentManager
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|regionStates
operator|=
name|assignmentManager
operator|.
name|getRegionStates
argument_list|()
expr_stmt|;
name|connection
operator|=
operator|(
name|ClusterConnection
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|tableExecutorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|hbfsckExecutorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
comment|/**    * This creates a clean table and confirms that the table is clean.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testHBaseFsckClean
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableClean"
argument_list|)
decl_stmt|;
try|try
block|{
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// We created 1 table, should be fine
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test thread pooling in the case where there are more regions than threads    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testHbckThreadpooling
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableDupeStartKey"
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Create table with 4 regions
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// limit number of threads to 1.
name|Configuration
name|newconf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|newconf
operator|.
name|setInt
argument_list|(
literal|"hbasefsck.numthreads"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|newconf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// We should pass without triggering a RejectedExecutionException
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testTableWithNoRegions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// We might end up with empty regions in a table
comment|// see also testNoHdfsTable()
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// create table with one region
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|FAM
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// If a table has no CF's it doesn't get checked
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|desc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|table
argument_list|,
name|tableExecutorService
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the assignment, meta, and hdfs data
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|}
argument_list|)
expr_stmt|;
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testHbckFixOrphanTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableInfo"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
literal|null
decl_stmt|;
name|Path
name|tableinfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Path
name|hbaseTableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|fs
operator|=
name|hbaseTableDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|FileStatus
name|status
init|=
name|FSTableDescriptors
operator|.
name|getTableInfoPath
argument_list|(
name|fs
argument_list|,
name|hbaseTableDir
argument_list|)
decl_stmt|;
name|tableinfo
operator|=
name|status
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|tableinfo
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/.tableinfo"
argument_list|)
argument_list|)
expr_stmt|;
comment|//to report error if .tableinfo is missing.
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NO_TABLEINFO_FILE
block|}
argument_list|)
expr_stmt|;
comment|// fix OrphanTable with default .tableinfo (htd not yet cached on master)
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
name|status
operator|=
literal|null
expr_stmt|;
name|status
operator|=
name|FSTableDescriptors
operator|.
name|getTableInfoPath
argument_list|(
name|fs
argument_list|,
name|hbaseTableDir
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setValue
argument_list|(
literal|"NOT_DEFAULT"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|table
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// fix OrphanTable with cache
name|htd
operator|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// warms up cached htd on master
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
name|status
operator|=
name|FSTableDescriptors
operator|.
name|getTableInfoPath
argument_list|(
name|fs
argument_list|,
name|hbaseTableDir
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|htd
operator|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|htd
operator|.
name|getValue
argument_list|(
literal|"NOT_DEFAULT"
argument_list|)
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fs
operator|!=
literal|null
condition|)
block|{
name|fs
operator|.
name|rename
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/.tableinfo"
argument_list|)
argument_list|,
name|tableinfo
argument_list|)
expr_stmt|;
block|}
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testReadOnlyProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"shouldIgnorePreCheckPermission"
argument_list|,
literal|true
argument_list|,
name|hbck
operator|.
name|shouldIgnorePreCheckPermission
argument_list|()
argument_list|)
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"shouldIgnorePreCheckPermission"
argument_list|,
literal|false
argument_list|,
name|hbck
operator|.
name|shouldIgnorePreCheckPermission
argument_list|()
argument_list|)
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|setIgnorePreCheckPermission
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"shouldIgnorePreCheckPermission"
argument_list|,
literal|true
argument_list|,
name|hbck
operator|.
name|shouldIgnorePreCheckPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This creates and fixes a bad table where a region is completely contained    * by another region, and there is a hole (sort of like a bad split)    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testOverlapAndOrphan
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableOverlapAndOrphan"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by creating an overlap in the metadata
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hriOverlap
init|=
name|createRegion
argument_list|(
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hriOverlap
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hriOverlap
argument_list|,
name|server
argument_list|,
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|ORPHAN_HDFS_REGION
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// fix the problem.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// verify that overlaps are fixed
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table where a region overlaps two regions --    * a start key contained in another region and its end key is contained in    * yet another region.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testCoveredStartKey
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableCoveredStartKey"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by creating an overlap in the metadata
name|HRegionInfo
name|hriOverlap
init|=
name|createRegion
argument_list|(
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B2"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hriOverlap
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hriOverlap
argument_list|,
name|server
argument_list|,
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|OVERLAP_IN_REGION_CHAIN
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|OVERLAP_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix the problem.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// verify that overlaps are fixed
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck2
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a missing region -- hole in meta    * and data missing in the fs.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRegionHole
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableRegionHole"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the assignment, meta, and hdfs data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
operator|-
literal|2
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// lost a region so lost a row
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The region is not deployed when the table is disabled.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRegionShouldNotBeDeployed
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableRegionShouldNotBeDeployed"
argument_list|)
decl_stmt|;
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testRegionShouldNotBeDeployed."
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|SPLIT_KEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[
literal|0
index|]
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
block|}
decl_stmt|;
name|HTableDescriptor
name|htdDisabled
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|htdDisabled
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAM
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write the .tableinfo
name|FSTableDescriptors
name|fstd
init|=
operator|new
name|FSTableDescriptors
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fstd
operator|.
name|createTableDescriptor
argument_list|(
name|htdDisabled
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|disabledRegions
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionsInMeta
argument_list|(
name|conf
argument_list|,
name|htdDisabled
argument_list|,
name|SPLIT_KEYS
argument_list|)
decl_stmt|;
comment|// Let's just assign everything to first RS
name|HRegionServer
name|hrs
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Create region files.
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Disable the table and close its regions
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HRegionInfo
name|region
init|=
name|disabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|region
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
comment|// The region should not be assigned currently
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getServerWith
argument_list|(
name|regionName
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Directly open a region on a region server.
comment|// If going through AM/ZK, the region won't be open.
comment|// Even it is opened, AM will close it which causes
comment|// flakiness of this test.
name|HRegion
name|r
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|region
argument_list|,
name|htdDisabled
argument_list|,
name|hrs
operator|.
name|getWAL
argument_list|(
name|region
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|hrs
operator|.
name|addToOnlineRegions
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|SHOULD_NOT_BE_DEPLOYED
block|}
argument_list|)
expr_stmt|;
comment|// fix this fault
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check result
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test makes sure that parallel instances of Hbck is disabled.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testParallelHbck
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ExecutorService
name|service
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|HBaseFsck
argument_list|>
name|hbck1
decl_stmt|,
name|hbck2
decl_stmt|;
class|class
name|RunHbck
implements|implements
name|Callable
argument_list|<
name|HBaseFsck
argument_list|>
block|{
name|boolean
name|fail
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|HBaseFsck
name|call
parameter_list|()
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|c
operator|.
name|setInt
argument_list|(
literal|"hbase.hbck.lockfile.attempts"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// HBASE-13574 found that in HADOOP-2.6 and later, the create file would internally retry.
comment|// To avoid flakiness of the test, set low max wait time.
name|c
operator|.
name|setInt
argument_list|(
literal|"hbase.hbck.lockfile.maxwaittime"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|doFsck
argument_list|(
name|c
argument_list|,
literal|true
argument_list|)
return|;
comment|// Exclusive hbck only when fixing
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Duplicate hbck"
argument_list|)
condition|)
block|{
name|fail
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// If we reach here, then an exception was caught
if|if
condition|(
name|fail
condition|)
name|fail
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|service
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hbck1
operator|=
name|service
operator|.
name|submit
argument_list|(
operator|new
name|RunHbck
argument_list|()
argument_list|)
expr_stmt|;
name|hbck2
operator|=
name|service
operator|.
name|submit
argument_list|(
operator|new
name|RunHbck
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//wait for 15 seconds, for both hbck calls finish
name|service
operator|.
name|awaitTermination
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|HBaseFsck
name|h1
init|=
name|hbck1
operator|.
name|get
argument_list|()
decl_stmt|;
name|HBaseFsck
name|h2
init|=
name|hbck2
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Make sure only one of the calls was successful
assert|assert
operator|(
name|h1
operator|==
literal|null
operator|||
name|h2
operator|==
literal|null
operator|)
assert|;
if|if
condition|(
name|h1
operator|!=
literal|null
condition|)
block|{
assert|assert
operator|(
name|h1
operator|.
name|getRetCode
argument_list|()
operator|>=
literal|0
operator|)
assert|;
block|}
if|if
condition|(
name|h2
operator|!=
literal|null
condition|)
block|{
assert|assert
operator|(
name|h2
operator|.
name|getRetCode
argument_list|()
operator|>=
literal|0
operator|)
assert|;
block|}
block|}
comment|/**    * This test makes sure that with enough retries both parallel instances    * of hbck will be completed successfully.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testParallelWithRetriesHbck
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ExecutorService
name|service
decl_stmt|;
specifier|final
name|Future
argument_list|<
name|HBaseFsck
argument_list|>
name|hbck1
decl_stmt|,
name|hbck2
decl_stmt|;
comment|// With the ExponentialBackoffPolicyWithLimit (starting with 200 milliseconds sleep time, and
comment|// max sleep time of 5 seconds), we can retry around 15 times within 80 seconds before bail out.
comment|//
comment|// Note: the reason to use 80 seconds is that in HADOOP-2.6 and later, the create file would
comment|// retry up to HdfsConstants.LEASE_SOFTLIMIT_PERIOD (60 seconds).  See HBASE-13574 for more
comment|// details.
specifier|final
name|int
name|timeoutInSeconds
init|=
literal|80
decl_stmt|;
specifier|final
name|int
name|sleepIntervalInMilliseconds
init|=
literal|200
decl_stmt|;
specifier|final
name|int
name|maxSleepTimeInMilliseconds
init|=
literal|6000
decl_stmt|;
specifier|final
name|int
name|maxRetryAttempts
init|=
literal|15
decl_stmt|;
class|class
name|RunHbck
implements|implements
name|Callable
argument_list|<
name|HBaseFsck
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|HBaseFsck
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Increase retry attempts to make sure the non-active hbck doesn't get starved
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|c
operator|.
name|setInt
argument_list|(
literal|"hbase.hbck.lockfile.maxwaittime"
argument_list|,
name|timeoutInSeconds
argument_list|)
expr_stmt|;
name|c
operator|.
name|setInt
argument_list|(
literal|"hbase.hbck.lockfile.attempt.sleep.interval"
argument_list|,
name|sleepIntervalInMilliseconds
argument_list|)
expr_stmt|;
name|c
operator|.
name|setInt
argument_list|(
literal|"hbase.hbck.lockfile.attempt.maxsleeptime"
argument_list|,
name|maxSleepTimeInMilliseconds
argument_list|)
expr_stmt|;
name|c
operator|.
name|setInt
argument_list|(
literal|"hbase.hbck.lockfile.attempts"
argument_list|,
name|maxRetryAttempts
argument_list|)
expr_stmt|;
return|return
name|doFsck
argument_list|(
name|c
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
name|service
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hbck1
operator|=
name|service
operator|.
name|submit
argument_list|(
operator|new
name|RunHbck
argument_list|()
argument_list|)
expr_stmt|;
name|hbck2
operator|=
name|service
operator|.
name|submit
argument_list|(
operator|new
name|RunHbck
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//wait for some time, for both hbck calls finish
name|service
operator|.
name|awaitTermination
argument_list|(
name|timeoutInSeconds
operator|*
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|HBaseFsck
name|h1
init|=
name|hbck1
operator|.
name|get
argument_list|()
decl_stmt|;
name|HBaseFsck
name|h2
init|=
name|hbck2
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Both should be successful
name|assertNotNull
argument_list|(
name|h1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|h2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|h1
operator|.
name|getRetCode
argument_list|()
operator|>=
literal|0
operator|)
assert|;
assert|assert
operator|(
name|h2
operator|.
name|getRetCode
argument_list|()
operator|>=
literal|0
operator|)
assert|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRegionBoundariesCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
comment|// no errors
try|try
block|{
name|hbck
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// need connection to have access to META
name|hbck
operator|.
name|checkRegionBoundaries
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"not a valid DFS filename."
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Table directory path is not valid."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hbck
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * test region boundaries and make sure store file had been created.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRegionBoundariesCheckWithFlushTable
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
comment|// no errors
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testRegionBoundariesCheckWithFlushTable"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|connect
argument_list|()
expr_stmt|;
comment|// need connection to have access to META
name|hbck
operator|.
name|checkRegionBoundaries
argument_list|()
expr_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
comment|// no errors
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"not a valid DFS filename."
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Table directory path is not valid."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hbck
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testHbckAfterRegionMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMergeRegionFilesInHdfs"
argument_list|)
decl_stmt|;
name|Table
name|meta
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// disable CatalogJanitor
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|rl
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tbl
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
comment|// make sure data in regions, if in wal only there is no data loss
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HRegionInfo
name|region1
init|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|HRegionInfo
name|region2
init|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|int
name|regionCountBeforeMerge
init|=
name|rl
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|region1
argument_list|,
name|region2
argument_list|)
expr_stmt|;
comment|// do a region merge
name|admin
operator|.
name|mergeRegions
argument_list|(
name|region1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|region2
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// wait until region merged
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30
operator|*
literal|1000
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|rl
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|regionCountBeforeMerge
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|timeout
condition|)
block|{
name|fail
argument_list|(
literal|"Time out waiting on region "
operator|+
name|region1
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" and "
operator|+
name|region2
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" be merged"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
comment|// no errors
block|}
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|setCatalogJanitorEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates entries in hbase:meta with no hdfs data.  This should cleanly    * remove the table.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testNoHdfsTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"NoHdfsTable"
argument_list|)
decl_stmt|;
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in wal only there is no data loss
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Mess it up by deleting hdfs dirs
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
comment|// also remove the table directory in hdfs
name|deleteTableDir
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|ORPHAN_TABLE_STATE
block|, }
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// detect dangling regions and remove those
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Table "
operator|+
name|table
operator|+
literal|" should have been deleted"
argument_list|,
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * when the hbase.version file missing, It is fix the fault.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testNoVersionFile
parameter_list|()
throws|throws
name|Exception
block|{
comment|// delete the hbase.version file
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|rootDir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|versionFile
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|HConstants
operator|.
name|VERSION_FILE_NAME
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|versionFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NO_VERSION_FILE
block|}
argument_list|)
expr_stmt|;
comment|// fix hbase.version missing
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// no version file fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testNoTableState
parameter_list|()
throws|throws
name|Exception
block|{
comment|// delete the hbase.version file
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testNoTableState"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in wal only there is no data loss
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|deleteTableState
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// test
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NO_TABLE_STATE
block|}
argument_list|)
expr_stmt|;
comment|// fix table state missing
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|isTableEnabled
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates two tables and mess both of them and fix them one by one    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testFixByTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testFixByTable1"
argument_list|)
decl_stmt|;
name|TableName
name|table2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testFixByTable2"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table1
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in wal only there is no data loss
name|admin
operator|.
name|flush
argument_list|(
name|table1
argument_list|)
expr_stmt|;
comment|// Mess them up by leaving a hole in the hdfs data
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|setupTable
argument_list|(
name|table2
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in wal only there is no data loss
name|admin
operator|.
name|flush
argument_list|(
name|table2
argument_list|)
expr_stmt|;
comment|// Mess them up by leaving a hole in the hdfs data
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|}
argument_list|)
expr_stmt|;
comment|// fix hole in table 1
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|,
name|table1
argument_list|)
expr_stmt|;
comment|// check that hole in table 1 fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
name|table1
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that hole in table 2 still there
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
name|table2
argument_list|)
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|}
argument_list|)
expr_stmt|;
comment|// fix hole in table 2
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|,
name|table2
argument_list|)
expr_stmt|;
comment|// check that hole in both tables fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
operator|-
literal|2
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|cleanupTable
argument_list|(
name|table2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A split parent in meta, in hdfs, and not deployed    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testLingeringSplitParent
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testLingeringSplitParent"
argument_list|)
decl_stmt|;
name|Table
name|meta
init|=
literal|null
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in wal only there is no data loss
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HRegionLocation
name|location
decl_stmt|;
try|try
init|(
name|RegionLocator
name|rl
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tbl
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
name|location
operator|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Delete one region from meta, but not hdfs, unassign it.
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Create a new meta entry to fake it as a split parent.
name|meta
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|tableExecutorService
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|HRegionInfo
name|a
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tbl
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BM"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|b
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tbl
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BM"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|)
decl_stmt|;
name|hri
operator|.
name|setOffline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hri
operator|.
name|setSplit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|LINGERING_SPLIT_PARENT
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// regular repair cannot fix lingering split parent
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|LINGERING_SPLIT_PARENT
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hbck
operator|.
name|shouldRerun
argument_list|()
argument_list|)
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|LINGERING_SPLIT_PARENT
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// fix lingering split parent
name|hbck
operator|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|connect
argument_list|()
expr_stmt|;
name|HBaseFsck
operator|.
name|setDisplayFullReport
argument_list|()
expr_stmt|;
comment|// i.e. -details
name|hbck
operator|.
name|setTimeLag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|setFixSplitParents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hbck
operator|.
name|shouldRerun
argument_list|()
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|close
argument_list|()
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|meta
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getColumnCells
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getColumnCells
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
comment|// fix other issues
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that all are fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests that LINGERING_SPLIT_PARENT is not erroneously reported for    * valid cases where the daughters are there.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testValidLingeringSplitParent
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testLingeringSplitParent"
argument_list|)
decl_stmt|;
name|Table
name|meta
init|=
literal|null
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in wal only there is no data loss
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|rl
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tbl
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
name|HRegionLocation
name|location
init|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|meta
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|tableExecutorService
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
comment|// do a regular split
name|byte
index|[]
name|regionName
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|admin
operator|.
name|splitRegion
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BM"
argument_list|)
argument_list|)
expr_stmt|;
name|TestEndToEndSplitTransaction
operator|.
name|blockUntilRegionSplit
argument_list|(
name|conf
argument_list|,
literal|60000
argument_list|,
name|regionName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// TODO: fixHdfsHoles does not work against splits, since the parent dir lingers on
comment|// for some time until children references are deleted. HBCK erroneously sees this as
comment|// overlapping regions
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{}
argument_list|)
expr_stmt|;
comment|//no LINGERING_SPLIT_PARENT reported
comment|// assert that the split hbase:meta entry is still there.
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|meta
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|MetaTableAccessor
operator|.
name|getHRegionInfo
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert that we still have the split regions
name|assertEquals
argument_list|(
name|rl
operator|.
name|getStartKeys
argument_list|()
operator|.
name|length
argument_list|,
name|SPLITS
operator|.
name|length
operator|+
literal|1
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|//SPLITS + 1 is # regions
comment|// pre-split.
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Split crashed after write to hbase:meta finished for the parent region, but    * failed to write daughters (pre HBASE-7721 codebase)    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|75000
argument_list|)
specifier|public
name|void
name|testSplitDaughtersNotInMeta
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSplitdaughtersNotInMeta"
argument_list|)
decl_stmt|;
name|Table
name|meta
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|tableExecutorService
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in wal only there is no data loss
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|rl
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tbl
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
name|HRegionLocation
name|location
init|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
comment|// Disable CatalogJanitor to prevent it from cleaning up the parent region
comment|// after split.
name|admin
operator|.
name|enableCatalogJanitor
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// do a regular split
name|byte
index|[]
name|regionName
init|=
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|admin
operator|.
name|splitRegion
argument_list|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BM"
argument_list|)
argument_list|)
expr_stmt|;
name|TestEndToEndSplitTransaction
operator|.
name|blockUntilRegionSplit
argument_list|(
name|conf
argument_list|,
literal|60000
argument_list|,
name|regionName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PairOfSameType
argument_list|<
name|HRegionInfo
argument_list|>
name|daughters
init|=
name|MetaTableAccessor
operator|.
name|getDaughterRegions
argument_list|(
name|meta
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|regionName
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Delete daughter regions from meta, but not hdfs, unassign it.
name|ServerName
name|firstSN
init|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
name|daughters
operator|.
name|getFirst
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|ServerName
name|secondSN
init|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
name|daughters
operator|.
name|getSecond
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|undeployRegion
argument_list|(
name|connection
argument_list|,
name|firstSN
argument_list|,
name|daughters
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|undeployRegion
argument_list|(
name|connection
argument_list|,
name|secondSN
argument_list|,
name|daughters
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|deletes
operator|.
name|add
argument_list|(
operator|new
name|Delete
argument_list|(
name|daughters
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
operator|new
name|Delete
argument_list|(
name|daughters
operator|.
name|getSecond
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
comment|// Remove daughters from regionStates
name|RegionStates
name|regionStates
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|regionStates
operator|.
name|deleteRegion
argument_list|(
name|daughters
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|regionStates
operator|.
name|deleteRegion
argument_list|(
name|daughters
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|//no LINGERING_SPLIT_PARENT
comment|// now fix it. The fix should not revert the region split, but add daughters to META
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// assert that the split hbase:meta entry is still there.
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|meta
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|MetaTableAccessor
operator|.
name|getHRegionInfo
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// assert that we still have the split regions
name|assertEquals
argument_list|(
name|rl
operator|.
name|getStartKeys
argument_list|()
operator|.
name|length
argument_list|,
name|SPLITS
operator|.
name|length
operator|+
literal|1
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|//SPLITS + 1 is # regions
comment|// pre-split.
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|//should be fixed by now
block|}
block|}
finally|finally
block|{
name|admin
operator|.
name|enableCatalogJanitor
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a missing region which is the 1st region -- hole in    * meta and data missing in the fs.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testMissingFirstRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMissingFirstRegion"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the assignment, meta, and hdfs data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|FIRST_REGION_STARTKEY_NOT_EMPTY
block|}
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a missing region which is the 1st region -- hole in    * meta and data missing in the fs.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testRegionDeployedNotInHdfs
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSingleRegionDeployedNotInHdfs"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Mess it up by deleting region dir
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|}
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with missing last region -- hole in meta and data missing in    * the fs.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testMissingLastRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMissingLastRegion"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the assignment, meta, and hdfs data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|LAST_REGION_ENDKEY_NOT_EMPTY
block|}
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test -noHdfsChecking option can detect and fix assignments issue.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testFixAssignmentsAndNoHdfsChecking
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testFixAssignmentsAndNoHdfsChecking"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by closing a region
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
expr_stmt|;
comment|// verify there is no other errors
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// verify that noHdfsChecking report the same errors
name|HBaseFsck
name|fsck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
decl_stmt|;
name|fsck
operator|.
name|connect
argument_list|()
expr_stmt|;
name|HBaseFsck
operator|.
name|setDisplayFullReport
argument_list|()
expr_stmt|;
comment|// i.e. -details
name|fsck
operator|.
name|setTimeLag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setCheckHdfs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|assertErrors
argument_list|(
name|fsck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify that fixAssignments works fine with noHdfsChecking
name|fsck
operator|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|connect
argument_list|()
expr_stmt|;
name|HBaseFsck
operator|.
name|setDisplayFullReport
argument_list|()
expr_stmt|;
comment|// i.e. -details
name|fsck
operator|.
name|setTimeLag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setCheckHdfs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixAssignments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|fsck
operator|.
name|shouldRerun
argument_list|()
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|assertNoErrors
argument_list|(
name|fsck
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test -noHdfsChecking option can detect region is not in meta but deployed.    * However, it can not fix it without checking Hdfs because we need to get    * the region info from Hdfs in this case, then to patch the meta.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testFixMetaNotWorkingWithNoHdfsChecking
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testFixMetaNotWorkingWithNoHdfsChecking"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by deleting a region from the metadata
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
expr_stmt|;
comment|// verify there is no other errors
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// verify that noHdfsChecking report the same errors
name|HBaseFsck
name|fsck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
decl_stmt|;
name|fsck
operator|.
name|connect
argument_list|()
expr_stmt|;
name|HBaseFsck
operator|.
name|setDisplayFullReport
argument_list|()
expr_stmt|;
comment|// i.e. -details
name|fsck
operator|.
name|setTimeLag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setCheckHdfs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|assertErrors
argument_list|(
name|fsck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify that fixMeta doesn't work with noHdfsChecking
name|fsck
operator|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|connect
argument_list|()
expr_stmt|;
name|HBaseFsck
operator|.
name|setDisplayFullReport
argument_list|()
expr_stmt|;
comment|// i.e. -details
name|fsck
operator|.
name|setTimeLag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setCheckHdfs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixAssignments
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixMeta
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|fsck
operator|.
name|shouldRerun
argument_list|()
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|fsck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// fix the cluster so other tests won't be impacted
name|fsck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fsck
operator|.
name|shouldRerun
argument_list|()
argument_list|)
expr_stmt|;
name|fsck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|fsck
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test -fixHdfsHoles doesn't work with -noHdfsChecking option,    * and -noHdfsChecking can't detect orphan Hdfs region.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testFixHdfsHolesNotWorkingWithNoHdfsChecking
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testFixHdfsHolesNotWorkingWithNoHdfsChecking"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by creating an overlap in the metadata
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hriOverlap
init|=
name|createRegion
argument_list|(
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriOverlap
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hriOverlap
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hriOverlap
argument_list|,
name|server
argument_list|,
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|ORPHAN_HDFS_REGION
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// verify that noHdfsChecking can't detect ORPHAN_HDFS_REGION
name|HBaseFsck
name|fsck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
decl_stmt|;
name|fsck
operator|.
name|connect
argument_list|()
expr_stmt|;
name|HBaseFsck
operator|.
name|setDisplayFullReport
argument_list|()
expr_stmt|;
comment|// i.e. -details
name|fsck
operator|.
name|setTimeLag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setCheckHdfs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|assertErrors
argument_list|(
name|fsck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// verify that fixHdfsHoles doesn't work with noHdfsChecking
name|fsck
operator|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|connect
argument_list|()
expr_stmt|;
name|HBaseFsck
operator|.
name|setDisplayFullReport
argument_list|()
expr_stmt|;
comment|// i.e. -details
name|fsck
operator|.
name|setTimeLag
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setCheckHdfs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixHdfsHoles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixHdfsOverlaps
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|setFixHdfsOrphans
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|fsck
operator|.
name|shouldRerun
argument_list|()
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|fsck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
name|fsck
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates a table and then corrupts an hfile.  Hbck should quarantine the file.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testQuarantineCorruptHFile
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// flush is async.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|hfile
init|=
name|getFlushedHFile
argument_list|(
name|fs
argument_list|,
name|table
argument_list|)
decl_stmt|;
comment|// Mess it up by leaving a hole in the assignment, meta, and hdfs data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// create new corrupt file called deadbeef (valid hfile name)
name|Path
name|corrupt
init|=
operator|new
name|Path
argument_list|(
name|hfile
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"deadbeef"
argument_list|)
decl_stmt|;
name|TestHFile
operator|.
name|truncateFile
argument_list|(
name|fs
argument_list|,
name|hfile
argument_list|,
name|corrupt
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created corrupted file "
operator|+
name|corrupt
argument_list|)
expr_stmt|;
name|HBaseFsck
operator|.
name|debugLsr
argument_list|(
name|conf
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// we cannot enable here because enable never finished due to the corrupt region.
name|HBaseFsck
name|res
init|=
name|HbckTestingUtil
operator|.
name|doHFileQuarantine
argument_list|(
name|conf
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|res
operator|.
name|getRetCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|HFileCorruptionChecker
name|hfcc
init|=
name|res
operator|.
name|getHFilecorruptionChecker
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|hfcc
operator|.
name|getHFilesChecked
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hfcc
operator|.
name|getCorrupted
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hfcc
operator|.
name|getFailures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hfcc
operator|.
name|getQuarantined
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hfcc
operator|.
name|getMissing
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Its been fixed, verify that we can enable.
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates a table and simulates the race situation where a concurrent compaction or split    * has removed an hfile after the corruption checker learned about it.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testQuarantineMissingHFile
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// inject a fault in the hfcc created.
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HBaseFsck
name|hbck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|HFileCorruptionChecker
name|createHFileCorruptionChecker
parameter_list|(
name|boolean
name|sidelineCorruptHFiles
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HFileCorruptionChecker
argument_list|(
name|conf
argument_list|,
name|executor
argument_list|,
name|sidelineCorruptHFiles
argument_list|)
block|{
name|AtomicBoolean
name|attemptedFirstHFile
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|checkHFile
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|attemptedFirstHFile
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure delete happened.
block|}
name|super
operator|.
name|checkHFile
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|doQuarantineTest
argument_list|(
name|table
argument_list|,
name|hbck
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// 4 attempted, but 1 missing.
name|hbck
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * This creates and fixes a bad table with regions that has startkey == endkey    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testDegenerateRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableDegenerateRegions"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now let's mess it up, by adding a region with a duplicate startkey
name|HRegionInfo
name|hriDupe
init|=
name|createRegion
argument_list|(
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignRegion
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hriDupe
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hriDupe
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hriDupe
argument_list|,
name|server
argument_list|,
name|REGION_ONLINE_TIMEOUT
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|DEGENERATE_REGION
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|DUPE_STARTKEYS
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix the degenerate region.
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that the degenerate region is gone and no data loss
name|HBaseFsck
name|hbck2
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck2
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test mission REGIONINFO_QUALIFIER in hbase:meta    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testMissingRegionInfoQualifier
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMissingRegionInfoQualifier"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Mess it up by removing the RegionInfo for one region.
specifier|final
name|List
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|LinkedList
argument_list|<
name|Delete
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|meta
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|hbfsckExecutorService
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|fullScanRegions
argument_list|(
name|connection
argument_list|,
operator|new
name|MetaTableAccessor
operator|.
name|Visitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|visit
parameter_list|(
name|Result
name|rowResult
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegionInfo
name|hri
init|=
name|MetaTableAccessor
operator|.
name|getHRegionInfo
argument_list|(
name|rowResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|hri
operator|!=
literal|null
operator|&&
operator|!
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|rowResult
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|meta
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
comment|// Mess it up by creating a fake hbase:meta entry with no associated RegionInfo
name|meta
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
operator|+
literal|",,1361911384013.810e28f59a57da91c66"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"node1:60020"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
operator|+
literal|",,1361911384013.810e28f59a57da91c66"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1362150791183L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hbck
operator|.
name|getErrors
argument_list|()
operator|.
name|getErrorList
argument_list|()
operator|.
name|contains
argument_list|(
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|EMPTY_META_CELL
argument_list|)
argument_list|)
expr_stmt|;
comment|// fix reference file
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that reference file fixed
name|assertFalse
argument_list|(
name|hbck
operator|.
name|getErrors
argument_list|()
operator|.
name|getErrorList
argument_list|()
operator|.
name|contains
argument_list|(
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|EMPTY_META_CELL
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test pluggable error reporter. It can be plugged in    * from system property or configuration.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testErrorReporter
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|MockErrorReporter
operator|.
name|calledCount
operator|=
literal|0
expr_stmt|;
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MockErrorReporter
operator|.
name|calledCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbasefsck.errorreporter"
argument_list|,
name|MockErrorReporter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MockErrorReporter
operator|.
name|calledCount
operator|>
literal|20
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hbasefsck.errorreporter"
argument_list|,
name|HBaseFsck
operator|.
name|PrintingErrorReporter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|MockErrorReporter
operator|.
name|calledCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testCheckTableLocks
parameter_list|()
throws|throws
name|Exception
block|{
name|IncrementingEnvironmentEdge
name|edge
init|=
operator|new
name|IncrementingEnvironmentEdge
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
comment|// check no errors
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
name|ServerName
name|mockName
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"localhost"
argument_list|,
literal|60000
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
comment|// obtain one lock
specifier|final
name|TableLockManager
name|tableLockManager
init|=
name|TableLockManager
operator|.
name|createTableLockManager
argument_list|(
name|conf
argument_list|,
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|mockName
argument_list|)
decl_stmt|;
name|TableLockManager
operator|.
name|TableLock
name|writeLock
init|=
name|tableLockManager
operator|.
name|writeLock
argument_list|(
name|tableName
argument_list|,
literal|"testCheckTableLocks"
argument_list|)
decl_stmt|;
name|writeLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
comment|// should not have expired, no problems
name|edge
operator|.
name|incrementTime
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|TableLockManager
operator|.
name|TABLE_LOCK_EXPIRE_TIMEOUT
argument_list|,
name|TableLockManager
operator|.
name|DEFAULT_TABLE_LOCK_EXPIRE_TIMEOUT_MS
argument_list|)
argument_list|)
expr_stmt|;
comment|// let table lock expire
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|EXPIRED_TABLE_LOCK
block|}
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|TableLockManager
operator|.
name|TableLock
name|readLock
init|=
name|tableLockManager
operator|.
name|writeLock
argument_list|(
name|tableName
argument_list|,
literal|"testCheckTableLocks"
argument_list|)
decl_stmt|;
try|try
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|readLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
return|return;
comment|// expected, since this will be reaped under us.
block|}
name|fail
argument_list|(
literal|"should not have come here"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
operator|.
name|start
argument_list|()
expr_stmt|;
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// wait until thread starts
name|Threads
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|// wait some more to ensure writeLock.acquire() is called
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|EXPIRED_TABLE_LOCK
block|}
argument_list|)
expr_stmt|;
comment|// still one expired, one not-expired
name|edge
operator|.
name|incrementTime
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|TableLockManager
operator|.
name|TABLE_LOCK_EXPIRE_TIMEOUT
argument_list|,
name|TableLockManager
operator|.
name|DEFAULT_TABLE_LOCK_EXPIRE_TIMEOUT_MS
argument_list|)
argument_list|)
expr_stmt|;
comment|// let table lock expire
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|EXPIRED_TABLE_LOCK
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|EXPIRED_TABLE_LOCK
block|}
argument_list|)
expr_stmt|;
comment|// both are expired
name|conf
operator|.
name|setLong
argument_list|(
name|TableLockManager
operator|.
name|TABLE_LOCK_EXPIRE_TIMEOUT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// reaping from ZKInterProcessWriteLock uses znode cTime,
comment|// which is not injectable through EnvironmentEdge
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// now fix both cases
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
comment|// ensure that locks are deleted
name|writeLock
operator|=
name|tableLockManager
operator|.
name|writeLock
argument_list|(
name|tableName
argument_list|,
literal|"should acquire without blocking"
argument_list|)
expr_stmt|;
name|writeLock
operator|.
name|acquire
argument_list|()
expr_stmt|;
comment|// this should not block.
name|writeLock
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// release for clean state
name|tableLockManager
operator|.
name|tableDeleted
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testCheckReplication
parameter_list|()
throws|throws
name|Exception
block|{
comment|// check no errors
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
comment|// create peer
name|ReplicationAdmin
name|replicationAdmin
init|=
operator|new
name|ReplicationAdmin
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|replicationAdmin
operator|.
name|getPeersCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|zkPort
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEPER_CLIENT_PORT
argument_list|)
decl_stmt|;
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
literal|"127.0.0.1:"
operator|+
name|zkPort
operator|+
literal|":/hbase"
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|addPeer
argument_list|(
literal|"1"
argument_list|,
name|rpc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|getPeersCount
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|replicationAdmin
operator|.
name|getPeersCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// create replicator
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"Test Hbase Fsck"
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|ReplicationQueues
name|repQueues
init|=
name|ReplicationFactory
operator|.
name|getReplicationQueues
argument_list|(
name|zkw
argument_list|,
name|conf
argument_list|,
name|connection
argument_list|)
decl_stmt|;
name|repQueues
operator|.
name|init
argument_list|(
literal|"server1"
argument_list|)
expr_stmt|;
comment|// queues for current peer, no errors
name|repQueues
operator|.
name|addLog
argument_list|(
literal|"1"
argument_list|,
literal|"file1"
argument_list|)
expr_stmt|;
name|repQueues
operator|.
name|addLog
argument_list|(
literal|"1-server2"
argument_list|,
literal|"file1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|repQueues
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
comment|// queues for removed peer
name|repQueues
operator|.
name|addLog
argument_list|(
literal|"2"
argument_list|,
literal|"file1"
argument_list|)
expr_stmt|;
name|repQueues
operator|.
name|addLog
argument_list|(
literal|"2-server2"
argument_list|,
literal|"file1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|repQueues
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|UNDELETED_REPLICATION_QUEUE
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|UNDELETED_REPLICATION_QUEUE
block|}
argument_list|)
expr_stmt|;
comment|// fix the case
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hbck
operator|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
comment|// ensure only "2" is deleted
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|repQueues
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|repQueues
operator|.
name|getLogsInQueue
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|repQueues
operator|.
name|getLogsInQueue
argument_list|(
literal|"2-sever2"
argument_list|)
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|removePeer
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|repQueues
operator|.
name|removeAllQueues
argument_list|()
expr_stmt|;
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
name|replicationAdmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * This creates and fixes a bad table with a missing region -- hole in meta    * and data present but .regioninfo missing (an orphan hdfs region)in the fs.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testHDFSRegioninfoMissing
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableHDFSRegioninfoMissing"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|HRegionInfo
operator|.
name|DEFAULT_REPLICA_ID
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|ORPHAN_HDFS_REGION
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a region that is missing meta and    * not assigned to a region server.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testNotInMetaOrDeployedHole
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableNotInMetaOrDeployedHole"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// don't rm from fs
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testCleanUpDaughtersNotInMetaAfterFailedSplit
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCleanUpDaughtersNotInMetaAfterFailedSplit"
argument_list|)
decl_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|desc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p1
init|=
operator|new
name|Put
argument_list|(
operator|(
literal|"r"
operator|+
name|i
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|p1
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
literal|"q1"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"v"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|put
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|flush
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|cluster
operator|.
name|getRegions
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|serverWith
init|=
name|cluster
operator|.
name|getServerWith
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionServer
name|regionServer
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|serverWith
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getServerWith
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|SplitTransactionImpl
name|st
init|=
operator|(
name|SplitTransactionImpl
operator|)
operator|new
name|SplitTransactionFactory
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|create
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r3"
argument_list|)
argument_list|)
decl_stmt|;
name|st
operator|.
name|prepare
argument_list|()
expr_stmt|;
name|st
operator|.
name|stepsBeforePONR
argument_list|(
name|regionServer
argument_list|,
name|regionServer
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RegionState
argument_list|>
name|regionsInTransition
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsInTransition
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionState
name|state
range|:
name|regionsInTransition
operator|.
name|values
argument_list|()
control|)
block|{
name|am
operator|.
name|regionOffline
argument_list|(
name|state
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionsMap
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|regionsMap
operator|.
name|put
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|regionServer
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|assign
argument_list|(
name|regionsMap
argument_list|)
expr_stmt|;
name|am
operator|.
name|waitForAssignment
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|}
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|close
argument_list|()
expr_stmt|;
name|tbl
operator|=
literal|null
expr_stmt|;
block|}
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates fixes a bad table with a hole in meta.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testNotInMetaHole
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableNotInMetaHole"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the meta data
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// don't rm from fs
name|admin
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|assertErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_META_OR_DEPLOYED
block|,
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|HOLE_IN_REGION_CHAIN
block|}
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates and fixes a bad table with a region that is in meta but has    * no deployment or data hdfs    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testNotInHdfs
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableNotInHdfs"
argument_list|)
decl_stmt|;
try|try
block|{
name|setupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure data in regions, if in wal only there is no data loss
name|admin
operator|.
name|flush
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the hdfs data
name|deleteRegion
argument_list|(
name|conf
argument_list|,
name|tbl
operator|.
name|getTableDescriptor
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"C"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// don't rm meta
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
index|[]
block|{
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
operator|.
name|NOT_IN_HDFS
block|}
argument_list|)
expr_stmt|;
comment|// holes are separate from overlap groups
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbck
operator|.
name|getOverlapGroups
argument_list|(
name|table
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// fix hole
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check that hole fixed
name|assertNoErrors
argument_list|(
name|doFsck
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ROWKEYS
operator|.
name|length
operator|-
literal|2
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cleanupTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This creates a table and simulates the race situation where a concurrent compaction or split    * has removed an colfam dir before the corruption checker got to it.    */
comment|// Disabled because fails sporadically.  Is this test right?  Timing-wise, there could be no
comment|// files in a column family on initial creation -- as suggested by Matteo.
annotation|@
name|Ignore
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testQuarantineMissingFamdir
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// inject a fault in the hfcc created.
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HBaseFsck
name|hbck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|HFileCorruptionChecker
name|createHFileCorruptionChecker
parameter_list|(
name|boolean
name|sidelineCorruptHFiles
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HFileCorruptionChecker
argument_list|(
name|conf
argument_list|,
name|executor
argument_list|,
name|sidelineCorruptHFiles
argument_list|)
block|{
name|AtomicBoolean
name|attemptedFirstHFile
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|checkColFamDir
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|attemptedFirstHFile
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure delete happened.
block|}
name|super
operator|.
name|checkColFamDir
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|doQuarantineTest
argument_list|(
name|table
argument_list|,
name|hbck
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * This creates a table and simulates the race situation where a concurrent compaction or split    * has removed a region dir before the corruption checker got to it.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testQuarantineMissingRegionDir
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// inject a fault in the hfcc created.
specifier|final
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|HBaseFsck
name|hbck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|hbfsckExecutorService
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|HFileCorruptionChecker
name|createHFileCorruptionChecker
parameter_list|(
name|boolean
name|sidelineCorruptHFiles
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|HFileCorruptionChecker
argument_list|(
name|conf
argument_list|,
name|executor
argument_list|,
name|sidelineCorruptHFiles
argument_list|)
block|{
name|AtomicBoolean
name|attemptedFirstHFile
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|checkRegionDir
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|attemptedFirstHFile
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure delete happened.
block|}
name|super
operator|.
name|checkRegionDir
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
name|doQuarantineTest
argument_list|(
name|table
argument_list|,
name|hbck
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    *  See HBASE-15406    * */
annotation|@
name|Test
specifier|public
name|void
name|testSplitOrMergeStatWhenHBCKAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|admin
operator|.
name|setSplitOrMergeEnabled
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|Admin
operator|.
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|,
name|Admin
operator|.
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
expr_stmt|;
name|boolean
name|oldSplit
init|=
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|Admin
operator|.
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
decl_stmt|;
name|boolean
name|oldMerge
init|=
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|Admin
operator|.
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|oldSplit
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|oldMerge
argument_list|)
expr_stmt|;
name|ExecutorService
name|exec
init|=
operator|new
name|ScheduledThreadPoolExecutor
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|HBaseFsck
name|hbck
init|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|exec
argument_list|)
decl_stmt|;
name|HBaseFsck
operator|.
name|setDisplayFullReport
argument_list|()
expr_stmt|;
comment|// i.e. -details
specifier|final
name|HBaseFsck
name|spiedHbck
init|=
name|spy
argument_list|(
name|hbck
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
comment|// we close splitOrMerge flag in hbck, so in finally hbck will not set splitOrMerge back.
name|spiedHbck
operator|.
name|setDisableSplitAndMerge
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spiedHbck
argument_list|)
operator|.
name|onlineConsistencyRepair
argument_list|()
expr_stmt|;
name|spiedHbck
operator|.
name|setDisableSplitAndMerge
argument_list|()
expr_stmt|;
name|spiedHbck
operator|.
name|connect
argument_list|()
expr_stmt|;
name|spiedHbck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|spiedHbck
operator|.
name|close
argument_list|()
expr_stmt|;
name|boolean
name|split
init|=
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|Admin
operator|.
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
decl_stmt|;
name|boolean
name|merge
init|=
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|Admin
operator|.
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|merge
argument_list|)
expr_stmt|;
comment|// rerun hbck to repair the switches state
name|hbck
operator|=
operator|new
name|HBaseFsck
argument_list|(
name|conf
argument_list|,
name|exec
argument_list|)
expr_stmt|;
name|hbck
operator|.
name|setDisableSplitAndMerge
argument_list|()
expr_stmt|;
name|hbck
operator|.
name|connect
argument_list|()
expr_stmt|;
name|hbck
operator|.
name|onlineHbck
argument_list|()
expr_stmt|;
name|hbck
operator|.
name|close
argument_list|()
expr_stmt|;
name|split
operator|=
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|Admin
operator|.
name|MasterSwitchType
operator|.
name|SPLIT
argument_list|)
expr_stmt|;
name|merge
operator|=
name|admin
operator|.
name|isSplitOrMergeEnabled
argument_list|(
name|Admin
operator|.
name|MasterSwitchType
operator|.
name|MERGE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|split
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|merge
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

