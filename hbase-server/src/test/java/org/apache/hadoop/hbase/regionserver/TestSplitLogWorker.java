begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|not
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|LongAdder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ChoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogCounters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CancelableProgressable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSplitLogWorker
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSplitLogWorker
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_TIME
init|=
literal|15000
decl_stmt|;
specifier|private
specifier|final
name|ServerName
name|MANAGER
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"manager,1,1"
argument_list|)
decl_stmt|;
static|static
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"org.apache.hadoop.hbase"
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|DummyServer
name|ds
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|zkw
decl_stmt|;
specifier|private
name|SplitLogWorker
name|slw
decl_stmt|;
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
specifier|private
name|RecoveryMode
name|mode
decl_stmt|;
class|class
name|DummyServer
implements|implements
name|Server
block|{
specifier|private
name|ZooKeeperWatcher
name|zkw
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|CoordinatedStateManager
name|cm
decl_stmt|;
specifier|public
name|DummyServer
parameter_list|(
name|ZooKeeperWatcher
name|zkw
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|zkw
operator|=
name|zkw
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|cm
operator|=
name|CoordinatedStateManagerFactory
operator|.
name|getCoordinatedStateManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cm
operator|.
name|initialize
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|ZooKeeperWatcher
name|getZooKeeper
parameter_list|()
block|{
return|return
name|zkw
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CoordinatedStateManager
name|getCoordinatedStateManager
parameter_list|()
block|{
return|return
name|cm
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterConnection
name|getConnection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaTableLocator
name|getMetaTableLocator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChoreService
name|getChoreService
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterConnection
name|getClusterConnection
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|void
name|waitForCounter
parameter_list|(
name|LongAdder
name|ctr
parameter_list|,
name|long
name|oldval
parameter_list|,
name|long
name|newval
parameter_list|,
name|long
name|timems
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"ctr="
operator|+
name|ctr
operator|.
name|sum
argument_list|()
operator|+
literal|", oldval="
operator|+
name|oldval
operator|+
literal|", newval="
operator|+
name|newval
argument_list|,
name|waitForCounterBoolean
argument_list|(
name|ctr
argument_list|,
name|oldval
argument_list|,
name|newval
argument_list|,
name|timems
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|waitForCounterBoolean
parameter_list|(
specifier|final
name|LongAdder
name|ctr
parameter_list|,
specifier|final
name|long
name|oldval
parameter_list|,
name|long
name|newval
parameter_list|,
name|long
name|timems
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|waitForCounterBoolean
argument_list|(
name|ctr
argument_list|,
name|oldval
argument_list|,
name|newval
argument_list|,
name|timems
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|waitForCounterBoolean
parameter_list|(
specifier|final
name|LongAdder
name|ctr
parameter_list|,
specifier|final
name|long
name|oldval
parameter_list|,
specifier|final
name|long
name|newval
parameter_list|,
name|long
name|timems
parameter_list|,
name|boolean
name|failIfTimeout
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|timeWaited
init|=
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|timems
argument_list|,
literal|10
argument_list|,
name|failIfTimeout
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|(
name|ctr
operator|.
name|sum
argument_list|()
operator|>=
name|newval
operator|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeWaited
operator|>
literal|0
condition|)
block|{
comment|// when not timed out
name|assertEquals
argument_list|(
name|newval
argument_list|,
name|ctr
operator|.
name|sum
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|zkw
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"split-log-worker-tests"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ds
operator|=
operator|new
name|DummyServer
argument_list|(
name|zkw
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteChildrenRecursively
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
argument_list|)
argument_list|,
name|not
argument_list|(
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|baseZNode
operator|+
literal|" created"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|splitLogZNode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|splitLogZNode
argument_list|)
argument_list|,
name|not
argument_list|(
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|splitLogZNode
operator|+
literal|" created"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|rsZNode
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|rsZNode
argument_list|)
argument_list|,
name|not
argument_list|(
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
name|executorService
operator|=
operator|new
name|ExecutorService
argument_list|(
literal|"TestSplitLogWorker"
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|startExecutorService
argument_list|(
name|ExecutorType
operator|.
name|RS_LOG_REPLAY_OPS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|this
operator|.
name|mode
operator|=
operator|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|false
argument_list|)
condition|?
name|RecoveryMode
operator|.
name|LOG_REPLAY
else|:
name|RecoveryMode
operator|.
name|LOG_SPLITTING
operator|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
name|SplitLogWorker
operator|.
name|TaskExecutor
name|neverEndingTask
init|=
operator|new
name|SplitLogWorker
operator|.
name|TaskExecutor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Status
name|exec
parameter_list|(
name|String
name|name
parameter_list|,
name|RecoveryMode
name|mode
parameter_list|,
name|CancelableProgressable
name|p
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
name|Status
operator|.
name|PREEMPTED
return|;
block|}
if|if
condition|(
operator|!
name|p
operator|.
name|progress
argument_list|()
condition|)
block|{
return|return
name|Status
operator|.
name|PREEMPTED
return|;
block|}
block|}
block|}
block|}
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAcquireTaskAtStartup
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testAcquireTaskAtStartup"
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
specifier|final
name|String
name|TATAS
init|=
literal|"tatas"
decl_stmt|;
specifier|final
name|ServerName
name|RS
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"rs,1,1"
argument_list|)
decl_stmt|;
name|RegionServerServices
name|mockedRS
init|=
name|getRegionServer
argument_list|(
name|RS
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|TATAS
argument_list|)
argument_list|,
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"mgr,1,1"
argument_list|)
argument_list|,
name|this
operator|.
name|mode
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|SplitLogWorker
name|slw
init|=
operator|new
name|SplitLogWorker
argument_list|(
name|ds
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|mockedRS
argument_list|,
name|neverEndingTask
argument_list|)
decl_stmt|;
name|slw
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|TATAS
argument_list|)
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|slt
operator|.
name|isOwned
argument_list|(
name|RS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopSplitLogWorker
argument_list|(
name|slw
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|stopSplitLogWorker
parameter_list|(
specifier|final
name|SplitLogWorker
name|slw
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|slw
operator|!=
literal|null
condition|)
block|{
name|slw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|slw
operator|.
name|worker
operator|.
name|join
argument_list|(
name|WAIT_TIME
argument_list|)
expr_stmt|;
if|if
condition|(
name|slw
operator|.
name|worker
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
operator|(
literal|"Could not stop the worker thread slw="
operator|+
name|slw
operator|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRaceForTask
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testRaceForTask"
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
specifier|final
name|String
name|TRFT
init|=
literal|"trft"
decl_stmt|;
specifier|final
name|ServerName
name|SVR1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"svr1,1,1"
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|SVR2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"svr2,1,1"
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|TRFT
argument_list|)
argument_list|,
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|MANAGER
argument_list|,
name|this
operator|.
name|mode
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|RegionServerServices
name|mockedRS1
init|=
name|getRegionServer
argument_list|(
name|SVR1
argument_list|)
decl_stmt|;
name|RegionServerServices
name|mockedRS2
init|=
name|getRegionServer
argument_list|(
name|SVR2
argument_list|)
decl_stmt|;
name|SplitLogWorker
name|slw1
init|=
operator|new
name|SplitLogWorker
argument_list|(
name|ds
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|mockedRS1
argument_list|,
name|neverEndingTask
argument_list|)
decl_stmt|;
name|SplitLogWorker
name|slw2
init|=
operator|new
name|SplitLogWorker
argument_list|(
name|ds
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|mockedRS2
argument_list|,
name|neverEndingTask
argument_list|)
decl_stmt|;
name|slw1
operator|.
name|start
argument_list|()
expr_stmt|;
name|slw2
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
comment|// Assert that either the tot_wkr_failed_to_grab_task_owned count was set of if
comment|// not it, that we fell through to the next counter in line and it was set.
name|assertTrue
argument_list|(
name|waitForCounterBoolean
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_failed_to_grab_task_owned
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|,
literal|false
argument_list|)
operator|||
name|SplitLogCounters
operator|.
name|tot_wkr_failed_to_grab_task_lost_race
operator|.
name|sum
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|TRFT
argument_list|)
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|slt
operator|.
name|isOwned
argument_list|(
name|SVR1
argument_list|)
operator|||
name|slt
operator|.
name|isOwned
argument_list|(
name|SVR2
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopSplitLogWorker
argument_list|(
name|slw1
argument_list|)
expr_stmt|;
name|stopSplitLogWorker
argument_list|(
name|slw2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testPreemptTask
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testPreemptTask"
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
specifier|final
name|ServerName
name|SRV
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"tpt_svr,1,1"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|PATH
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
literal|"tpt_task"
argument_list|)
decl_stmt|;
name|RegionServerServices
name|mockedRS
init|=
name|getRegionServer
argument_list|(
name|SRV
argument_list|)
decl_stmt|;
name|SplitLogWorker
name|slw
init|=
operator|new
name|SplitLogWorker
argument_list|(
name|ds
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|mockedRS
argument_list|,
name|neverEndingTask
argument_list|)
decl_stmt|;
name|slw
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// let the worker start
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_grabing
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
comment|// this time create a task node after starting the splitLogWorker
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|PATH
argument_list|,
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|MANAGER
argument_list|,
name|this
operator|.
name|mode
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|slw
operator|.
name|getTaskReadySeq
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|PATH
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|slt
operator|.
name|isOwned
argument_list|(
name|SRV
argument_list|)
argument_list|)
expr_stmt|;
name|slt
operator|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|MANAGER
argument_list|,
name|this
operator|.
name|mode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|PATH
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_preempt_task
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopSplitLogWorker
argument_list|(
name|slw
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMultipleTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testMultipleTasks"
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
specifier|final
name|ServerName
name|SRV
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"tmt_svr,1,1"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|PATH1
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
literal|"tmt_task"
argument_list|)
decl_stmt|;
name|RegionServerServices
name|mockedRS
init|=
name|getRegionServer
argument_list|(
name|SRV
argument_list|)
decl_stmt|;
name|SplitLogWorker
name|slw
init|=
operator|new
name|SplitLogWorker
argument_list|(
name|ds
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|mockedRS
argument_list|,
name|neverEndingTask
argument_list|)
decl_stmt|;
name|slw
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// let the worker start
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_grabing
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
name|SplitLogTask
name|unassignedManager
init|=
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|MANAGER
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|PATH1
argument_list|,
name|unassignedManager
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
comment|// now the worker is busy doing the above task
comment|// create another task
specifier|final
name|String
name|PATH2
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
literal|"tmt_task_2"
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|PATH2
argument_list|,
name|unassignedManager
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
comment|// preempt the first task, have it owned by another worker
specifier|final
name|ServerName
name|anotherWorker
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"another-worker,1,1"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|anotherWorker
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|PATH1
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_preempt_task
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|slw
operator|.
name|getTaskReadySeq
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|PATH2
argument_list|)
decl_stmt|;
name|slt
operator|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slt
operator|.
name|isOwned
argument_list|(
name|SRV
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopSplitLogWorker
argument_list|(
name|slw
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRescan
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testRescan"
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
specifier|final
name|ServerName
name|SRV
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"svr,1,1"
argument_list|)
decl_stmt|;
name|RegionServerServices
name|mockedRS
init|=
name|getRegionServer
argument_list|(
name|SRV
argument_list|)
decl_stmt|;
name|slw
operator|=
operator|new
name|SplitLogWorker
argument_list|(
name|ds
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|mockedRS
argument_list|,
name|neverEndingTask
argument_list|)
expr_stmt|;
name|slw
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// let the worker start
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|String
name|task
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
literal|"task"
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|MANAGER
argument_list|,
name|this
operator|.
name|mode
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|task
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
comment|// now the worker is busy doing the above task
comment|// preempt the task, have it owned by another worker
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|task
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_preempt_task
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
comment|// create a RESCAN node
name|String
name|rescan
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
literal|"RESCAN"
argument_list|)
decl_stmt|;
name|rescan
operator|=
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|rescan
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT_SEQUENTIAL
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
comment|// RESCAN node might not have been processed if the worker became busy
comment|// with the above task. preempt the task again so that now the RESCAN
comment|// node is processed
name|ZKUtil
operator|.
name|setData
argument_list|(
name|zkw
argument_list|,
name|task
argument_list|,
name|slt
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_preempt_task
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired_rescan
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|splitLogZNode
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|int
name|num
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|num
operator|++
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|startsWith
argument_list|(
literal|"RESCAN"
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|String
name|fn
init|=
name|ZKSplitLog
operator|.
name|getFileName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|splitLogZNode
argument_list|,
name|fn
argument_list|)
argument_list|)
decl_stmt|;
name|slt
operator|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|slt
operator|.
name|toString
argument_list|()
argument_list|,
name|slt
operator|.
name|isDone
argument_list|(
name|SRV
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|num
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAcquireMultiTasks
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testAcquireMultiTasks"
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
specifier|final
name|String
name|TATAS
init|=
literal|"tatas"
decl_stmt|;
specifier|final
name|ServerName
name|RS
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"rs,1,1"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxTasks
init|=
literal|3
decl_stmt|;
name|Configuration
name|testConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|testConf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.wal.max.splitters"
argument_list|,
name|maxTasks
argument_list|)
expr_stmt|;
name|RegionServerServices
name|mockedRS
init|=
name|getRegionServer
argument_list|(
name|RS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxTasks
condition|;
name|i
operator|++
control|)
block|{
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|TATAS
operator|+
name|i
argument_list|)
argument_list|,
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"mgr,1,1"
argument_list|)
argument_list|,
name|this
operator|.
name|mode
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
name|SplitLogWorker
name|slw
init|=
operator|new
name|SplitLogWorker
argument_list|(
name|ds
argument_list|,
name|testConf
argument_list|,
name|mockedRS
argument_list|,
name|neverEndingTask
argument_list|)
decl_stmt|;
name|slw
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired
argument_list|,
literal|0
argument_list|,
name|maxTasks
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxTasks
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|TATAS
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|slt
operator|.
name|isOwned
argument_list|(
name|RS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|stopSplitLogWorker
argument_list|(
name|slw
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The test checks SplitLogWorker should not spawn more splitters than expected num of tasks per    * RS    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAcquireMultiTasksByAvgTasksPerRS
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testAcquireMultiTasks"
argument_list|)
expr_stmt|;
name|SplitLogCounters
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
specifier|final
name|String
name|TATAS
init|=
literal|"tatas"
decl_stmt|;
specifier|final
name|ServerName
name|RS
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"rs,1,1"
argument_list|)
decl_stmt|;
specifier|final
name|ServerName
name|RS2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"rs,1,2"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxTasks
init|=
literal|3
decl_stmt|;
name|Configuration
name|testConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|testConf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.wal.max.splitters"
argument_list|,
name|maxTasks
argument_list|)
expr_stmt|;
name|RegionServerServices
name|mockedRS
init|=
name|getRegionServer
argument_list|(
name|RS
argument_list|)
decl_stmt|;
comment|// create two RS nodes
name|String
name|rsPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|rsZNode
argument_list|,
name|RS
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|rsPath
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
expr_stmt|;
name|rsPath
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|rsZNode
argument_list|,
name|RS2
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|rsPath
argument_list|,
literal|null
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|EPHEMERAL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxTasks
condition|;
name|i
operator|++
control|)
block|{
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|TATAS
operator|+
name|i
argument_list|)
argument_list|,
operator|new
name|SplitLogTask
operator|.
name|Unassigned
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"mgr,1,1"
argument_list|)
argument_list|,
name|this
operator|.
name|mode
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
block|}
name|SplitLogWorker
name|slw
init|=
operator|new
name|SplitLogWorker
argument_list|(
name|ds
argument_list|,
name|testConf
argument_list|,
name|mockedRS
argument_list|,
name|neverEndingTask
argument_list|)
decl_stmt|;
name|slw
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|acquiredTasks
init|=
literal|0
decl_stmt|;
name|waitForCounter
argument_list|(
name|SplitLogCounters
operator|.
name|tot_wkr_task_acquired
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
name|WAIT_TIME
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxTasks
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|TATAS
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|SplitLogTask
name|slt
init|=
name|SplitLogTask
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|slt
operator|.
name|isOwned
argument_list|(
name|RS
argument_list|)
condition|)
block|{
name|acquiredTasks
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acquiredTasks
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stopSplitLogWorker
argument_list|(
name|slw
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a mocked region server service instance    * @param server    * @return    */
specifier|private
name|RegionServerServices
name|getRegionServer
parameter_list|(
name|ServerName
name|name
parameter_list|)
block|{
name|RegionServerServices
name|mockedServer
init|=
name|mock
argument_list|(
name|RegionServerServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockedServer
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockedServer
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockedServer
operator|.
name|getZooKeeper
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockedServer
operator|.
name|isStopped
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockedServer
operator|.
name|getExecutorService
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|executorService
argument_list|)
expr_stmt|;
return|return
name|mockedServer
return|;
block|}
block|}
end_class

end_unit

