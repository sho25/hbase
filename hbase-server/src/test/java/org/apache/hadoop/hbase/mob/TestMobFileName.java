begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMobFileName
extends|extends
name|TestCase
block|{
specifier|private
name|String
name|uuid
decl_stmt|;
specifier|private
name|Date
name|date
decl_stmt|;
specifier|private
name|String
name|dateStr
decl_stmt|;
specifier|private
name|byte
index|[]
name|startKey
decl_stmt|;
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|uuid
operator|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"-"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|date
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|dateStr
operator|=
name|MobUtils
operator|.
name|formatDate
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|startKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHashCode
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|dateStr
argument_list|,
name|uuid
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|dateStr
argument_list|,
name|uuid
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|dateStr
argument_list|,
name|uuid
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|,
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|dateStr
argument_list|,
name|uuid
argument_list|)
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreate
parameter_list|()
block|{
name|MobFileName
name|mobFileName
init|=
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|dateStr
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|mobFileName
argument_list|,
name|MobFileName
operator|.
name|create
argument_list|(
name|mobFileName
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
block|{
name|MobFileName
name|mobFileName
init|=
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|dateStr
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|MD5Hash
operator|.
name|getMD5AsHex
argument_list|(
name|startKey
argument_list|,
literal|0
argument_list|,
name|startKey
operator|.
name|length
argument_list|)
argument_list|,
name|mobFileName
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dateStr
argument_list|,
name|mobFileName
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mobFileName
operator|.
name|getFileName
argument_list|()
argument_list|,
name|MD5Hash
operator|.
name|getMD5AsHex
argument_list|(
name|startKey
argument_list|,
literal|0
argument_list|,
name|startKey
operator|.
name|length
argument_list|)
operator|+
name|dateStr
operator|+
name|uuid
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|MobFileName
name|mobFileName
init|=
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|dateStr
argument_list|,
name|uuid
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|mobFileName
operator|.
name|equals
argument_list|(
name|mobFileName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mobFileName
operator|.
name|equals
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mobFileName
operator|.
name|equals
argument_list|(
name|MobFileName
operator|.
name|create
argument_list|(
name|startKey
argument_list|,
name|dateStr
argument_list|,
name|uuid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

