begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestByteBufferOutputStream
block|{
annotation|@
name|Test
specifier|public
name|void
name|testByteBufferReuse
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|someBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"some bytes"
argument_list|)
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|someBytes
operator|.
name|length
argument_list|)
decl_stmt|;
name|ByteBuffer
name|bbToReuse
init|=
name|write
argument_list|(
name|bb
argument_list|,
name|someBytes
argument_list|)
decl_stmt|;
name|bbToReuse
operator|=
name|write
argument_list|(
name|bbToReuse
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"less"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bb
operator|==
name|bbToReuse
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ByteBuffer
name|write
parameter_list|(
specifier|final
name|ByteBuffer
name|bb
parameter_list|,
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ByteBufferOutputStream
name|bbos
init|=
operator|new
name|ByteBufferOutputStream
argument_list|(
name|bb
argument_list|)
init|)
block|{
name|bbos
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|bytes
argument_list|,
name|bbos
operator|.
name|toByteArray
argument_list|(
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|bbos
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|bbos
operator|.
name|getByteBuffer
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

