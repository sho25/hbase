begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coordination
operator|.
name|BaseCoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionMergeTransaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerStoppedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|MasterThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaRegionTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKTableStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMasterFailover
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMasterFailover
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Complex test of master failover that tests as many permutations of the    * different possible states that regions in transition could be in within ZK.    *<p>    * This tests the proper handling of these states by the failed-over master    * and includes a thorough testing of the timeout code as well.    *<p>    * Starts with a single master and three regionservers.    *<p>    * Creates two tables, enabledTable and disabledTable, each containing 5    * regions.  The disabledTable is then disabled.    *<p>    * After reaching steady-state, the master is killed.  We then mock several    * states in ZK.    *<p>    * After mocking them, we will startup a new master which should become the    * active master and also detect that it is a failover.  The primary test    * passing condition will be that all regions of the enabled table are    * assigned and all the regions of the disabled table are not assigned.    *<p>    * The different scenarios to be tested are below:    *<p>    *<b>ZK State:  OFFLINE</b>    *<p>A node can get into OFFLINE state if</p>    *<ul>    *<li>An RS fails to open a region, so it reverts the state back to OFFLINE    *<li>The Master is assigning the region to a RS before it sends RPC    *</ul>    *<p>We will mock the scenarios</p>    *<ul>    *<li>Master has assigned an enabled region but RS failed so a region is    *     not assigned anywhere and is sitting in ZK as OFFLINE</li>    *<li>This seems to cover both cases?</li>    *</ul>    *<p>    *<b>ZK State:  CLOSING</b>    *<p>A node can get into CLOSING state if</p>    *<ul>    *<li>An RS has begun to close a region    *</ul>    *<p>We will mock the scenarios</p>    *<ul>    *<li>Region of enabled table was being closed but did not complete    *<li>Region of disabled table was being closed but did not complete    *</ul>    *<p>    *<b>ZK State:  CLOSED</b>    *<p>A node can get into CLOSED state if</p>    *<ul>    *<li>An RS has completed closing a region but not acknowledged by master yet    *</ul>    *<p>We will mock the scenarios</p>    *<ul>    *<li>Region of a table that should be enabled was closed on an RS    *<li>Region of a table that should be disabled was closed on an RS    *</ul>    *<p>    *<b>ZK State:  OPENING</b>    *<p>A node can get into OPENING state if</p>    *<ul>    *<li>An RS has begun to open a region    *</ul>    *<p>We will mock the scenarios</p>    *<ul>    *<li>RS was opening a region of enabled table but never finishes    *</ul>    *<p>    *<b>ZK State:  OPENED</b>    *<p>A node can get into OPENED state if</p>    *<ul>    *<li>An RS has finished opening a region but not acknowledged by master yet    *</ul>    *<p>We will mock the scenarios</p>    *<ul>    *<li>Region of a table that should be enabled was opened on an RS    *<li>Region of a table that should be disabled was opened on an RS    *</ul>    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
specifier|public
name|void
name|testMasterFailoverWithMockedRIT
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_MASTERS
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|NUM_RS
init|=
literal|3
decl_stmt|;
comment|// Create config to use for this cluster
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.assignment.usezk"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Start the cluster
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|log
argument_list|(
literal|"Cluster started"
argument_list|)
expr_stmt|;
comment|// Create a ZKW to use in the test
name|ZooKeeperWatcher
name|zkw
init|=
name|HBaseTestingUtility
operator|.
name|getZooKeeperWatcher
argument_list|(
name|TEST_UTIL
argument_list|)
decl_stmt|;
comment|// get all the master threads
name|List
argument_list|<
name|MasterThread
argument_list|>
name|masterThreads
init|=
name|cluster
operator|.
name|getMasterThreads
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|masterThreads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one master thread, let's wait for it to be initialized
name|assertTrue
argument_list|(
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|masterThreads
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|master
operator|.
name|isActiveMaster
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|master
operator|.
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable load balancing on this master
name|master
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// create two tables in META, each with 10 regions
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|SPLIT_KEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[
literal|0
index|]
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fff"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ggg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hhh"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"iii"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jjj"
argument_list|)
block|}
decl_stmt|;
name|byte
index|[]
name|enabledTable
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"enabledTable"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htdEnabled
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|enabledTable
argument_list|)
argument_list|)
decl_stmt|;
name|htdEnabled
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|filesystem
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootdir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSTableDescriptors
name|fstd
init|=
operator|new
name|FSTableDescriptors
argument_list|(
name|filesystem
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
comment|// Write the .tableinfo
name|fstd
operator|.
name|createTableDescriptor
argument_list|(
name|htdEnabled
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hriEnabled
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htdEnabled
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|createRegion
argument_list|(
name|hriEnabled
argument_list|,
name|rootdir
argument_list|,
name|conf
argument_list|,
name|htdEnabled
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|enabledRegions
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionsInMeta
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htdEnabled
argument_list|,
name|SPLIT_KEYS
argument_list|)
decl_stmt|;
name|TableName
name|disabledTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"disabledTable"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htdDisabled
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|disabledTable
argument_list|)
decl_stmt|;
name|htdDisabled
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write the .tableinfo
name|fstd
operator|.
name|createTableDescriptor
argument_list|(
name|htdDisabled
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hriDisabled
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htdDisabled
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|createRegion
argument_list|(
name|hriDisabled
argument_list|,
name|rootdir
argument_list|,
name|conf
argument_list|,
name|htdDisabled
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|disabledRegions
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionsInMeta
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htdDisabled
argument_list|,
name|SPLIT_KEYS
argument_list|)
decl_stmt|;
name|TableName
name|tableWithMergingRegions
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tableWithMergingRegions"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableWithMergingRegions
argument_list|,
name|FAMILY
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"m"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Regions in hbase:meta and namespace have been created"
argument_list|)
expr_stmt|;
comment|// at this point we only expect 4 regions to be assigned out
comment|// (catalogs and namespace, + 2 merging regions)
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cluster
operator|.
name|countServedRegions
argument_list|()
argument_list|)
expr_stmt|;
comment|// Move merging regions to the same region server
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|mergingRegions
init|=
name|regionStates
operator|.
name|getRegionsOfTable
argument_list|(
name|tableWithMergingRegions
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mergingRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
name|a
init|=
name|mergingRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|HRegionInfo
name|b
init|=
name|mergingRegions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|newRegion
init|=
name|RegionMergeTransaction
operator|.
name|getMergedRegionInfo
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|ServerName
name|mergingServer
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|ServerName
name|serverB
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|serverB
operator|.
name|equals
argument_list|(
name|mergingServer
argument_list|)
condition|)
block|{
name|RegionPlan
name|plan
init|=
operator|new
name|RegionPlan
argument_list|(
name|b
argument_list|,
name|serverB
argument_list|,
name|mergingServer
argument_list|)
decl_stmt|;
name|am
operator|.
name|balance
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Let's just assign everything to first RS
name|HRegionServer
name|hrs
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ServerName
name|serverName
init|=
name|hrs
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|HRegionInfo
name|closingRegion
init|=
name|enabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// we'll need some regions to already be assigned out properly on live RS
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|enabledAndAssignedRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|enabledAndAssignedRegions
operator|.
name|add
argument_list|(
name|enabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|enabledAndAssignedRegions
operator|.
name|add
argument_list|(
name|enabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|enabledAndAssignedRegions
operator|.
name|add
argument_list|(
name|closingRegion
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|disabledAndAssignedRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|disabledAndAssignedRegions
operator|.
name|add
argument_list|(
name|disabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|disabledAndAssignedRegions
operator|.
name|add
argument_list|(
name|disabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// now actually assign them
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|enabledAndAssignedRegions
control|)
block|{
name|master
operator|.
name|assignmentManager
operator|.
name|regionPlans
operator|.
name|put
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|,
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|disabledAndAssignedRegions
control|)
block|{
name|master
operator|.
name|assignmentManager
operator|.
name|regionPlans
operator|.
name|put
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|,
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
comment|// wait for no more RIT
name|log
argument_list|(
literal|"Waiting for assignment to finish"
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Assignment completed"
argument_list|)
expr_stmt|;
comment|// Stop the master
name|log
argument_list|(
literal|"Aborting master"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|abortMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitOnMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Master has aborted"
argument_list|)
expr_stmt|;
comment|/*      * Now, let's start mocking up some weird states as described in the method      * javadoc.      */
comment|// Master is down, so is the meta. We need to assign it somewhere
comment|// so that regions can be assigned during the mocking phase.
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|ProtobufUtil
operator|.
name|openRegion
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|,
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ServerName
name|sn
init|=
name|MetaRegionTracker
operator|.
name|getMetaRegionLocation
argument_list|(
name|zkw
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|!=
literal|null
operator|&&
name|sn
operator|.
name|equals
argument_list|(
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsThatShouldBeOnline
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsThatShouldBeOffline
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|log
argument_list|(
literal|"Beginning to mock scenarios"
argument_list|)
expr_stmt|;
comment|// Disable the disabledTable in ZK
name|TableStateManager
name|zktable
init|=
operator|new
name|ZKTableStateManager
argument_list|(
name|zkw
argument_list|)
decl_stmt|;
name|zktable
operator|.
name|setTableState
argument_list|(
name|disabledTable
argument_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
comment|/*      *  ZK = OFFLINE      */
comment|// Region that should be assigned but is not and is in ZK as OFFLINE
comment|// Cause: This can happen if the master crashed after creating the znode but before sending the
comment|//  request to the region server
name|HRegionInfo
name|region
init|=
name|enabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|regionsThatShouldBeOnline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
comment|/*      * ZK = CLOSING      */
comment|// Cause: Same as offline.
name|regionsThatShouldBeOnline
operator|.
name|add
argument_list|(
name|closingRegion
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|zkw
argument_list|,
name|closingRegion
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
comment|/*      * ZK = CLOSED      */
comment|// Region of enabled table closed but not ack
comment|//Cause: Master was down while the region server updated the ZK status.
name|region
operator|=
name|enabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOnline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|,
name|version
argument_list|)
expr_stmt|;
comment|// Region of disabled table closed but not ack
name|region
operator|=
name|disabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOffline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|version
operator|=
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|,
name|version
argument_list|)
expr_stmt|;
comment|/*      * ZK = OPENED      */
comment|// Region of enabled table was opened on RS
comment|// Cause: as offline
name|region
operator|=
name|enabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOnline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|ProtobufUtil
operator|.
name|openRegion
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|,
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKAssign
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|rt
operator|!=
literal|null
operator|&&
name|rt
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_OPENED
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// Region of disable table was opened on RS
comment|// Cause: Master failed while updating the status for this region server.
name|region
operator|=
name|disabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOffline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|ProtobufUtil
operator|.
name|openRegion
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|,
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKAssign
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|rt
operator|!=
literal|null
operator|&&
name|rt
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_OPENED
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/*      * ZK = MERGING      */
comment|// Regions of table of merging regions
comment|// Cause: Master was down while merging was going on
operator|(
operator|(
name|BaseCoordinatedStateManager
operator|)
name|hrs
operator|.
name|getCoordinatedStateManager
argument_list|()
operator|)
operator|.
name|getRegionMergeCoordination
argument_list|()
operator|.
name|startRegionMergeTransaction
argument_list|(
name|newRegion
argument_list|,
name|mergingServer
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|/*      * ZK = NONE      */
comment|/*      * DONE MOCKING      */
name|log
argument_list|(
literal|"Done mocking data up in ZK"
argument_list|)
expr_stmt|;
comment|// Start up a new master
name|log
argument_list|(
literal|"Starting up a new master"
argument_list|)
expr_stmt|;
name|master
operator|=
name|cluster
operator|.
name|startMaster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"Waiting for master to be ready"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"Master is ready"
argument_list|)
expr_stmt|;
comment|// Get new region states since master restarted
name|regionStates
operator|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
expr_stmt|;
comment|// Merging region should remain merging
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|isRegionInState
argument_list|(
name|a
argument_list|,
name|State
operator|.
name|MERGING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|isRegionInState
argument_list|(
name|b
argument_list|,
name|State
operator|.
name|MERGING
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|isRegionInState
argument_list|(
name|newRegion
argument_list|,
name|State
operator|.
name|MERGING_NEW
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now remove the faked merging znode, merging regions should be
comment|// offlined automatically, otherwise it is a bug in AM.
name|ZKAssign
operator|.
name|deleteNodeFailSilent
argument_list|(
name|zkw
argument_list|,
name|newRegion
argument_list|)
expr_stmt|;
comment|// Failover should be completed, now wait for no RIT
name|log
argument_list|(
literal|"Waiting for no more RIT"
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"No more RIT in ZK, now doing final test verification"
argument_list|)
expr_stmt|;
comment|// Grab all the regions that are online across RSs
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
operator|new
name|TreeSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|onlineRegions
operator|.
name|addAll
argument_list|(
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Now, everything that should be online should be online
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionsThatShouldBeOnline
control|)
block|{
name|assertTrue
argument_list|(
name|onlineRegions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Everything that should be offline should not be online
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionsThatShouldBeOffline
control|)
block|{
if|if
condition|(
name|onlineRegions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|onlineRegions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
argument_list|(
literal|"Done with verification, all passed, shutting down cluster"
argument_list|)
expr_stmt|;
comment|// Done, shutdown the cluster
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Complex test of master failover that tests as many permutations of the    * different possible states that regions in transition could be in within ZK    * pointing to an RS that has died while no master is around to process it.    *<p>    * This tests the proper handling of these states by the failed-over master    * and includes a thorough testing of the timeout code as well.    *<p>    * Starts with a single master and two regionservers.    *<p>    * Creates two tables, enabledTable and disabledTable, each containing 5    * regions.  The disabledTable is then disabled.    *<p>    * After reaching steady-state, the master is killed.  We then mock several    * states in ZK.  And one of the RS will be killed.    *<p>    * After mocking them and killing an RS, we will startup a new master which    * should become the active master and also detect that it is a failover.  The    * primary test passing condition will be that all regions of the enabled    * table are assigned and all the regions of the disabled table are not    * assigned.    *<p>    * The different scenarios to be tested are below:    *<p>    *<b>ZK State:  CLOSING</b>    *<p>A node can get into CLOSING state if</p>    *<ul>    *<li>An RS has begun to close a region    *</ul>    *<p>We will mock the scenarios</p>    *<ul>    *<li>Region was being closed but the RS died before finishing the close    *</ul>    *<b>ZK State:  OPENED</b>    *<p>A node can get into OPENED state if</p>    *<ul>    *<li>An RS has finished opening a region but not acknowledged by master yet    *</ul>    *<p>We will mock the scenarios</p>    *<ul>    *<li>Region of a table that should be enabled was opened by a now-dead RS    *<li>Region of a table that should be disabled was opened by a now-dead RS    *</ul>    *<p>    *<b>ZK State:  NONE</b>    *<p>A region could not have a transition node if</p>    *<ul>    *<li>The server hosting the region died and no master processed it    *</ul>    *<p>We will mock the scenarios</p>    *<ul>    *<li>Region of enabled table was on a dead RS that was not yet processed    *<li>Region of disabled table was on a dead RS that was not yet processed    *</ul>    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testMasterFailoverWithMockedRITOnDeadRS
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_MASTERS
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|NUM_RS
init|=
literal|2
decl_stmt|;
comment|// Create and start the cluster
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.assignment.usezk"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MAXTOSTART
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|log
argument_list|(
literal|"Cluster started"
argument_list|)
expr_stmt|;
comment|// Create a ZKW to use in the test
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"unittest"
argument_list|,
operator|new
name|Abortable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Fatal ZK Error: "
operator|+
name|why
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Fatal ZK error"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// get all the master threads
name|List
argument_list|<
name|MasterThread
argument_list|>
name|masterThreads
init|=
name|cluster
operator|.
name|getMasterThreads
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|masterThreads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one master thread, let's wait for it to be initialized
name|assertTrue
argument_list|(
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|masterThreads
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|master
operator|.
name|isActiveMaster
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|master
operator|.
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable load balancing on this master
name|master
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// create two tables in META, each with 30 regions
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|SPLIT_KEYS
init|=
name|TEST_UTIL
operator|.
name|getRegionSplitStartKeys
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz"
argument_list|)
argument_list|,
literal|30
argument_list|)
decl_stmt|;
name|byte
index|[]
name|enabledTable
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"enabledTable"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htdEnabled
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|enabledTable
argument_list|)
argument_list|)
decl_stmt|;
name|htdEnabled
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|filesystem
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootdir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSTableDescriptors
name|fstd
init|=
operator|new
name|FSTableDescriptors
argument_list|(
name|filesystem
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
comment|// Write the .tableinfo
name|fstd
operator|.
name|createTableDescriptor
argument_list|(
name|htdEnabled
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hriEnabled
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htdEnabled
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|createRegion
argument_list|(
name|hriEnabled
argument_list|,
name|rootdir
argument_list|,
name|conf
argument_list|,
name|htdEnabled
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|enabledRegions
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionsInMeta
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htdEnabled
argument_list|,
name|SPLIT_KEYS
argument_list|)
decl_stmt|;
name|TableName
name|disabledTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"disabledTable"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htdDisabled
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|disabledTable
argument_list|)
decl_stmt|;
name|htdDisabled
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write the .tableinfo
name|fstd
operator|.
name|createTableDescriptor
argument_list|(
name|htdDisabled
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hriDisabled
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htdDisabled
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|createRegion
argument_list|(
name|hriDisabled
argument_list|,
name|rootdir
argument_list|,
name|conf
argument_list|,
name|htdDisabled
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|disabledRegions
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionsInMeta
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htdDisabled
argument_list|,
name|SPLIT_KEYS
argument_list|)
decl_stmt|;
name|log
argument_list|(
literal|"Regions in hbase:meta and Namespace have been created"
argument_list|)
expr_stmt|;
comment|// at this point we only expect 2 regions to be assigned out (catalogs and namespace  )
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cluster
operator|.
name|countServedRegions
argument_list|()
argument_list|)
expr_stmt|;
comment|// The first RS will stay online
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|regionservers
init|=
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
decl_stmt|;
name|HRegionServer
name|hrs
init|=
name|regionservers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
comment|// The second RS is going to be hard-killed
name|RegionServerThread
name|hrsDeadThread
init|=
name|regionservers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HRegionServer
name|hrsDead
init|=
name|hrsDeadThread
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
name|ServerName
name|deadServerName
init|=
name|hrsDead
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// we'll need some regions to already be assigned out properly on live RS
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|enabledAndAssignedRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|enabledAndAssignedRegions
operator|.
name|addAll
argument_list|(
name|enabledRegions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|enabledRegions
operator|.
name|removeAll
argument_list|(
name|enabledAndAssignedRegions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|disabledAndAssignedRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|disabledAndAssignedRegions
operator|.
name|addAll
argument_list|(
name|disabledRegions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|disabledRegions
operator|.
name|removeAll
argument_list|(
name|disabledAndAssignedRegions
argument_list|)
expr_stmt|;
comment|// now actually assign them
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|enabledAndAssignedRegions
control|)
block|{
name|master
operator|.
name|assignmentManager
operator|.
name|regionPlans
operator|.
name|put
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|,
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|disabledAndAssignedRegions
control|)
block|{
name|master
operator|.
name|assignmentManager
operator|.
name|regionPlans
operator|.
name|put
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|,
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
name|log
argument_list|(
literal|"Waiting for assignment to finish"
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|master
operator|.
name|assignmentManager
operator|.
name|waitUntilNoRegionsInTransition
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Assignment completed"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" Table must be enabled."
argument_list|,
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"enabledTable"
argument_list|)
argument_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
comment|// we also need regions assigned out on the dead server
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|enabledAndOnDeadRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|enabledAndOnDeadRegions
operator|.
name|addAll
argument_list|(
name|enabledRegions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|enabledRegions
operator|.
name|removeAll
argument_list|(
name|enabledAndOnDeadRegions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|disabledAndOnDeadRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|disabledAndOnDeadRegions
operator|.
name|addAll
argument_list|(
name|disabledRegions
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|disabledRegions
operator|.
name|removeAll
argument_list|(
name|disabledAndOnDeadRegions
argument_list|)
expr_stmt|;
comment|// set region plan to server to be killed and trigger assign
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|enabledAndOnDeadRegions
control|)
block|{
name|master
operator|.
name|assignmentManager
operator|.
name|regionPlans
operator|.
name|put
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|,
name|deadServerName
argument_list|)
argument_list|)
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|disabledAndOnDeadRegions
control|)
block|{
name|master
operator|.
name|assignmentManager
operator|.
name|regionPlans
operator|.
name|put
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|,
name|deadServerName
argument_list|)
argument_list|)
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
block|}
comment|// wait for no more RIT
name|log
argument_list|(
literal|"Waiting for assignment to finish"
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|master
operator|.
name|assignmentManager
operator|.
name|waitUntilNoRegionsInTransition
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Assignment completed"
argument_list|)
expr_stmt|;
comment|// Due to master.assignRegion(hri) could fail to assign a region to a specified RS
comment|// therefore, we need make sure that regions are in the expected RS
name|verifyRegionLocation
argument_list|(
name|hrs
argument_list|,
name|enabledAndAssignedRegions
argument_list|)
expr_stmt|;
name|verifyRegionLocation
argument_list|(
name|hrs
argument_list|,
name|disabledAndAssignedRegions
argument_list|)
expr_stmt|;
name|verifyRegionLocation
argument_list|(
name|hrsDead
argument_list|,
name|enabledAndOnDeadRegions
argument_list|)
expr_stmt|;
name|verifyRegionLocation
argument_list|(
name|hrsDead
argument_list|,
name|disabledAndOnDeadRegions
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" Didn't get enough regions of enabledTalbe on live rs."
argument_list|,
name|enabledAndAssignedRegions
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" Didn't get enough regions of disalbedTable on live rs."
argument_list|,
name|disabledAndAssignedRegions
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" Didn't get enough regions of enabledTalbe on dead rs."
argument_list|,
name|enabledAndOnDeadRegions
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" Didn't get enough regions of disalbedTable on dead rs."
argument_list|,
name|disabledAndOnDeadRegions
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
comment|// Stop the master
name|log
argument_list|(
literal|"Aborting master"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|abortMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitOnMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Master has aborted"
argument_list|)
expr_stmt|;
comment|/*      * Now, let's start mocking up some weird states as described in the method      * javadoc.      */
comment|// Master is down, so is the meta. We need to assign it somewhere
comment|// so that regions can be assigned during the mocking phase.
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|ProtobufUtil
operator|.
name|openRegion
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|,
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|,
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ServerName
name|sn
init|=
name|MetaRegionTracker
operator|.
name|getMetaRegionLocation
argument_list|(
name|zkw
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|!=
literal|null
operator|&&
name|sn
operator|.
name|equals
argument_list|(
name|hrs
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsThatShouldBeOnline
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsThatShouldBeOffline
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|log
argument_list|(
literal|"Beginning to mock scenarios"
argument_list|)
expr_stmt|;
comment|// Disable the disabledTable in ZK
name|TableStateManager
name|zktable
init|=
operator|new
name|ZKTableStateManager
argument_list|(
name|zkw
argument_list|)
decl_stmt|;
name|zktable
operator|.
name|setTableState
argument_list|(
name|disabledTable
argument_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|" The enabled table should be identified on master fail over."
argument_list|,
name|zktable
operator|.
name|isTableState
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"enabledTable"
argument_list|)
argument_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * ZK = CLOSING      */
comment|// Region of enabled table being closed on dead RS but not finished
name|HRegionInfo
name|region
init|=
name|enabledAndOnDeadRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|regionsThatShouldBeOnline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nRegion of enabled table was CLOSING on dead RS\n"
operator|+
name|region
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|// Region of disabled table being closed on dead RS but not finished
name|region
operator|=
name|disabledAndOnDeadRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOffline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nRegion of disabled table was CLOSING on dead RS\n"
operator|+
name|region
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|/*      * ZK = CLOSED      */
comment|// Region of enabled on dead server gets closed but not ack'd by master
name|region
operator|=
name|enabledAndOnDeadRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOnline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nRegion of enabled table was CLOSED on dead RS\n"
operator|+
name|region
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|// Region of disabled on dead server gets closed but not ack'd by master
name|region
operator|=
name|disabledAndOnDeadRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOffline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|version
operator|=
name|ZKAssign
operator|.
name|createNodeClosing
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|transitionNodeClosed
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nRegion of disabled table was CLOSED on dead RS\n"
operator|+
name|region
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|/*      * ZK = OPENING      */
comment|// RS was opening a region of enabled table then died
name|region
operator|=
name|enabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOnline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|transitionNodeOpening
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nRegion of enabled table was OPENING on dead RS\n"
operator|+
name|region
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|// RS was opening a region of disabled table then died
name|region
operator|=
name|disabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOffline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|transitionNodeOpening
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nRegion of disabled table was OPENING on dead RS\n"
operator|+
name|region
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|/*      * ZK = OPENED      */
comment|// Region of enabled table was opened on dead RS
name|region
operator|=
name|enabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOnline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|ProtobufUtil
operator|.
name|openRegion
argument_list|(
name|hrsDead
operator|.
name|getRSRpcServices
argument_list|()
argument_list|,
name|hrsDead
operator|.
name|getServerName
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKAssign
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|rt
operator|!=
literal|null
operator|&&
name|rt
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_OPENED
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nRegion of enabled table was OPENED on dead RS\n"
operator|+
name|region
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|// Region of disabled table was opened on dead RS
name|region
operator|=
name|disabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOffline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|ProtobufUtil
operator|.
name|openRegion
argument_list|(
name|hrsDead
operator|.
name|getRSRpcServices
argument_list|()
argument_list|,
name|hrsDead
operator|.
name|getServerName
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKAssign
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|rt
operator|!=
literal|null
operator|&&
name|rt
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_OPENED
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nRegion of disabled table was OPENED on dead RS\n"
operator|+
name|region
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|/*      * ZK = NONE      */
comment|// Region of enabled table was open at steady-state on dead RS
name|region
operator|=
name|enabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOnline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|ProtobufUtil
operator|.
name|openRegion
argument_list|(
name|hrsDead
operator|.
name|getRSRpcServices
argument_list|()
argument_list|,
name|hrsDead
operator|.
name|getServerName
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKAssign
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|rt
operator|!=
literal|null
operator|&&
name|rt
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_OPENED
argument_list|)
condition|)
block|{
name|ZKAssign
operator|.
name|deleteOpenedNode
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|rt
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"DELETED "
operator|+
name|rt
argument_list|)
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nRegion of enabled table was open at steady-state on dead RS"
operator|+
literal|"\n"
operator|+
name|region
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|// Region of disabled table was open at steady-state on dead RS
name|region
operator|=
name|disabledRegions
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|regionsThatShouldBeOffline
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|region
argument_list|,
name|deadServerName
argument_list|)
expr_stmt|;
name|ProtobufUtil
operator|.
name|openRegion
argument_list|(
name|hrsDead
operator|.
name|getRSRpcServices
argument_list|()
argument_list|,
name|hrsDead
operator|.
name|getServerName
argument_list|()
argument_list|,
name|region
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|byte
index|[]
name|bytes
init|=
name|ZKAssign
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|rt
operator|!=
literal|null
operator|&&
name|rt
operator|.
name|getEventType
argument_list|()
operator|.
name|equals
argument_list|(
name|EventType
operator|.
name|RS_ZK_REGION_OPENED
argument_list|)
condition|)
block|{
name|ZKAssign
operator|.
name|deleteOpenedNode
argument_list|(
name|zkw
argument_list|,
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|rt
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nRegion of disabled table was open at steady-state on dead RS"
operator|+
literal|"\n"
operator|+
name|region
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
comment|/*      * DONE MOCKING      */
name|log
argument_list|(
literal|"Done mocking data up in ZK"
argument_list|)
expr_stmt|;
comment|// Kill the RS that had a hard death
name|log
argument_list|(
literal|"Killing RS "
operator|+
name|deadServerName
argument_list|)
expr_stmt|;
name|hrsDead
operator|.
name|abort
argument_list|(
literal|"Killing for unit test"
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"RS "
operator|+
name|deadServerName
operator|+
literal|" killed"
argument_list|)
expr_stmt|;
comment|// Start up a new master.  Wait until regionserver is completely down
comment|// before starting new master because of hbase-4511.
while|while
condition|(
name|hrsDeadThread
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|log
argument_list|(
literal|"Starting up a new master"
argument_list|)
expr_stmt|;
name|master
operator|=
name|cluster
operator|.
name|startMaster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"Waiting for master to be ready"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Master is ready"
argument_list|)
expr_stmt|;
comment|// Wait until SSH processing completed for dead server.
while|while
condition|(
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|areDeadServersInProgress
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// Failover should be completed, now wait for no RIT
name|log
argument_list|(
literal|"Waiting for no more RIT"
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"No more RIT in ZK"
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|maxTime
init|=
literal|120000
decl_stmt|;
name|boolean
name|done
init|=
name|master
operator|.
name|assignmentManager
operator|.
name|waitUntilNoRegionsInTransition
argument_list|(
name|maxTime
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|done
condition|)
block|{
name|RegionStates
name|regionStates
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"rit="
operator|+
name|regionStates
operator|.
name|getRegionsInTransition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|now
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Elapsed="
operator|+
name|elapsed
operator|+
literal|", maxTime="
operator|+
name|maxTime
operator|+
literal|", done="
operator|+
name|done
argument_list|,
name|elapsed
operator|<
name|maxTime
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"No more RIT in RIT map, doing final test verification"
argument_list|)
expr_stmt|;
comment|// Grab all the regions that are online across RSs
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
operator|new
name|TreeSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|now
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|maxTime
operator|=
literal|30000
expr_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|cluster
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
try|try
block|{
name|HRegionServer
name|rs
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|rs
operator|.
name|getRegionsInTransitionInRS
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|elapsed
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|now
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test timed out in getting online regions"
argument_list|,
name|elapsed
operator|<
name|maxTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|isAborted
argument_list|()
operator|||
name|rs
operator|.
name|isStopped
argument_list|()
condition|)
block|{
comment|// This region server is stopped, skip it.
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|onlineRegions
operator|.
name|addAll
argument_list|(
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RegionServerStoppedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Got RegionServerStoppedException"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Now, everything that should be online should be online
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionsThatShouldBeOnline
control|)
block|{
name|assertTrue
argument_list|(
literal|"region="
operator|+
name|hri
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", "
operator|+
name|onlineRegions
operator|.
name|toString
argument_list|()
argument_list|,
name|onlineRegions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Everything that should be offline should not be online
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regionsThatShouldBeOffline
control|)
block|{
name|assertFalse
argument_list|(
name|onlineRegions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|log
argument_list|(
literal|"Done with verification, all passed, shutting down cluster"
argument_list|)
expr_stmt|;
comment|// Done, shutdown the cluster
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify regions are on the expected region server    */
specifier|private
name|void
name|verifyRegionLocation
parameter_list|(
name|HRegionServer
name|hrs
parameter_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|tmpOnlineRegions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|HRegionInfo
argument_list|>
name|itr
init|=
name|regions
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|HRegionInfo
name|tmp
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tmpOnlineRegions
operator|.
name|contains
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
name|itr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|HRegion
name|createRegion
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|Path
name|rootdir
parameter_list|,
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|HRegion
name|r
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|hri
argument_list|,
name|rootdir
argument_list|,
name|c
argument_list|,
name|htd
argument_list|)
decl_stmt|;
comment|// The above call to create a region will create an hlog file.  Each
comment|// log file create will also create a running thread to do syncing.  We need
comment|// to close out this log else we will have a running thread trying to sync
comment|// the file system continuously which is ugly when dfs is taken away at the
comment|// end of the test.
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
comment|// TODO: Next test to add is with testing permutations of the RIT or the RS
comment|//       killed are hosting ROOT and hbase:meta regions.
specifier|private
name|void
name|log
parameter_list|(
name|String
name|string
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"\n\n"
operator|+
name|string
operator|+
literal|" \n\n"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testShouldCheckMasterFailOverWhenMETAIsInOpenedState
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testShouldCheckMasterFailOverWhenMETAIsInOpenedState"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|NUM_MASTERS
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|NUM_RS
init|=
literal|2
decl_stmt|;
comment|// Start the cluster
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.info.port"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.assignment.usezk"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
comment|// Find regionserver carrying meta.
name|HRegionServer
name|regionServer
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|HRegion
name|metaRegion
init|=
name|regionServer
operator|.
name|getOnlineRegion
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
comment|// Create a ZKW to use in the test
name|ZooKeeperWatcher
name|zkw
init|=
name|HBaseTestingUtility
operator|.
name|createAndForceNodeToOpenedState
argument_list|(
name|TEST_UTIL
argument_list|,
name|metaRegion
argument_list|,
name|regionServer
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Staring cluster for second time"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniHBaseCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|master
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// Failover should be completed, now wait for no RIT
name|log
argument_list|(
literal|"Waiting for no more RIT"
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|zkw
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Stop the cluster
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * This tests a RIT in offline state will get re-assigned after a master restart    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
specifier|public
name|void
name|testOfflineRegionReAssginedAfterMasterRestart
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testOfflineRegionReAssginedAfterMasterRestart"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NUM_MASTERS
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|NUM_RS
init|=
literal|2
decl_stmt|;
comment|// Create config to use for this cluster
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.assignment.usezk"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Start the cluster
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Cluster started"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|HRegionInfo
name|hri
init|=
name|regionStates
operator|.
name|getRegionsOfTable
argument_list|(
name|table
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ServerName
name|serverName
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|ServerName
name|dstName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerName
name|tmpServer
range|:
name|master
operator|.
name|serverManager
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|tmpServer
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|dstName
operator|=
name|tmpServer
expr_stmt|;
break|break;
block|}
block|}
comment|// find a different server
name|assertTrue
argument_list|(
name|dstName
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// shutdown HBase cluster
name|TEST_UTIL
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
comment|// create a RIT node in offline state
name|ZooKeeperWatcher
name|zkw
init|=
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
decl_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|hri
argument_list|,
name|dstName
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKAssign
operator|.
name|getDataNoWatch
argument_list|(
name|zkw
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|stat
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|data
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|RegionTransition
name|rt
init|=
name|RegionTransition
operator|.
name|parseFrom
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rt
operator|.
name|getEventType
argument_list|()
operator|==
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" region is in offline state with source server="
operator|+
name|serverName
operator|+
literal|" and dst server="
operator|+
name|dstName
argument_list|)
expr_stmt|;
comment|// start HBase cluster
name|TEST_UTIL
operator|.
name|startMiniHBaseCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|master
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
if|if
condition|(
name|master
operator|!=
literal|null
operator|&&
name|master
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|ServerManager
name|serverManager
init|=
name|master
operator|.
name|getServerManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|serverManager
operator|.
name|areDeadServersInProgress
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
comment|// verify the region is assigned
name|master
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|regionStates
operator|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
expr_stmt|;
name|RegionState
name|newState
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newState
operator|.
name|isOpened
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Simple test of master failover.    *<p>    * Starts with three masters.  Kills a backup master.  Then kills the active    * master.  Ensures the final master becomes active and we can still contact    * the cluster.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
specifier|public
name|void
name|testSimpleMasterFailover
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_MASTERS
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|NUM_RS
init|=
literal|3
decl_stmt|;
comment|// Start the cluster
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
comment|// get all the master threads
name|List
argument_list|<
name|MasterThread
argument_list|>
name|masterThreads
init|=
name|cluster
operator|.
name|getMasterThreads
argument_list|()
decl_stmt|;
comment|// wait for each to come online
for|for
control|(
name|MasterThread
name|mt
range|:
name|masterThreads
control|)
block|{
name|assertTrue
argument_list|(
name|mt
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// verify only one is the active master and we have right number
name|int
name|numActive
init|=
literal|0
decl_stmt|;
name|int
name|activeIndex
init|=
operator|-
literal|1
decl_stmt|;
name|ServerName
name|activeName
init|=
literal|null
decl_stmt|;
name|HMaster
name|active
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|masterThreads
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|masterThreads
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getMaster
argument_list|()
operator|.
name|isActiveMaster
argument_list|()
condition|)
block|{
name|numActive
operator|++
expr_stmt|;
name|activeIndex
operator|=
name|i
expr_stmt|;
name|active
operator|=
name|masterThreads
operator|.
name|get
argument_list|(
name|activeIndex
argument_list|)
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|activeName
operator|=
name|active
operator|.
name|getServerName
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numActive
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_MASTERS
argument_list|,
name|masterThreads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Active master "
operator|+
name|activeName
argument_list|)
expr_stmt|;
comment|// Check that ClusterStatus reports the correct active and backup masters
name|assertNotNull
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|ClusterStatus
name|status
init|=
name|active
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getMaster
argument_list|()
operator|.
name|equals
argument_list|(
name|activeName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|status
operator|.
name|getBackupMastersSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|status
operator|.
name|getBackupMasters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// attempt to stop one of the inactive masters
name|int
name|backupIndex
init|=
operator|(
name|activeIndex
operator|==
literal|0
condition|?
literal|1
else|:
name|activeIndex
operator|-
literal|1
operator|)
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|(
name|backupIndex
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nStopping a backup master: "
operator|+
name|master
operator|.
name|getServerName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|stopMaster
argument_list|(
name|backupIndex
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitOnMaster
argument_list|(
name|backupIndex
argument_list|)
expr_stmt|;
comment|// Verify still one active master and it's the same
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|masterThreads
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|masterThreads
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getMaster
argument_list|()
operator|.
name|isActiveMaster
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|activeName
operator|.
name|equals
argument_list|(
name|masterThreads
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|activeIndex
operator|=
name|i
expr_stmt|;
name|active
operator|=
name|masterThreads
operator|.
name|get
argument_list|(
name|activeIndex
argument_list|)
operator|.
name|getMaster
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|numActive
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|masterThreads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|rsCount
init|=
name|masterThreads
operator|.
name|get
argument_list|(
name|activeIndex
argument_list|)
operator|.
name|getMaster
argument_list|()
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServersSize
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Active master "
operator|+
name|active
operator|.
name|getServerName
argument_list|()
operator|+
literal|" managing "
operator|+
name|rsCount
operator|+
literal|" regions servers"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|rsCount
argument_list|)
expr_stmt|;
comment|// Check that ClusterStatus reports the correct active and backup masters
name|assertNotNull
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|status
operator|=
name|active
operator|.
name|getClusterStatus
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|getMaster
argument_list|()
operator|.
name|equals
argument_list|(
name|activeName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getBackupMastersSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getBackupMasters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// kill the active master
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nStopping the active master "
operator|+
name|active
operator|.
name|getServerName
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|stopMaster
argument_list|(
name|activeIndex
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitOnMaster
argument_list|(
name|activeIndex
argument_list|)
expr_stmt|;
comment|// wait for an active master to show up and be ready
name|assertTrue
argument_list|(
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"\n\nVerifying backup master is now active\n"
argument_list|)
expr_stmt|;
comment|// should only have one master now
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|masterThreads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// and he should be active
name|active
operator|=
name|masterThreads
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|active
argument_list|)
expr_stmt|;
name|status
operator|=
name|active
operator|.
name|getClusterStatus
argument_list|()
expr_stmt|;
name|ServerName
name|mastername
init|=
name|status
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mastername
operator|.
name|equals
argument_list|(
name|active
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|active
operator|.
name|isActiveMaster
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
operator|.
name|getBackupMastersSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|status
operator|.
name|getBackupMasters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|rss
init|=
name|status
operator|.
name|getServersSize
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Active master "
operator|+
name|mastername
operator|.
name|getServerName
argument_list|()
operator|+
literal|" managing "
operator|+
name|rss
operator|+
literal|" region servers"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rss
argument_list|)
expr_stmt|;
comment|// Stop the cluster
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test region in pending_open/close when master failover    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testPendingOpenOrCloseWhenMasterFailover
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NUM_MASTERS
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|NUM_RS
init|=
literal|1
decl_stmt|;
comment|// Create config to use for this cluster
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.assignment.usezk"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Start the cluster
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|log
argument_list|(
literal|"Cluster started"
argument_list|)
expr_stmt|;
comment|// get all the master threads
name|List
argument_list|<
name|MasterThread
argument_list|>
name|masterThreads
init|=
name|cluster
operator|.
name|getMasterThreads
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|masterThreads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// only one master thread, let's wait for it to be initialized
name|assertTrue
argument_list|(
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|masterThreads
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|master
operator|.
name|isActiveMaster
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|master
operator|.
name|isInitialized
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a table with a region online
name|HTable
name|onlineTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
literal|"onlineTable"
argument_list|,
literal|"family"
argument_list|)
decl_stmt|;
comment|// Create a table in META, so it has a region offline
name|HTableDescriptor
name|offlineTable
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"offlineTable"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|offlineTable
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FileSystem
name|filesystem
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|rootdir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSTableDescriptors
name|fstd
init|=
operator|new
name|FSTableDescriptors
argument_list|(
name|filesystem
argument_list|,
name|rootdir
argument_list|)
decl_stmt|;
name|fstd
operator|.
name|createTableDescriptor
argument_list|(
name|offlineTable
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hriOffline
init|=
operator|new
name|HRegionInfo
argument_list|(
name|offlineTable
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|createRegion
argument_list|(
name|hriOffline
argument_list|,
name|rootdir
argument_list|,
name|conf
argument_list|,
name|offlineTable
argument_list|)
expr_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|master
operator|.
name|getCatalogTracker
argument_list|()
argument_list|,
name|hriOffline
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Regions in hbase:meta and namespace have been created"
argument_list|)
expr_stmt|;
comment|// at this point we only expect 3 regions to be assigned out
comment|// (catalogs and namespace, + 1 online region)
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cluster
operator|.
name|countServedRegions
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hriOnline
init|=
name|onlineTable
operator|.
name|getRegionLocation
argument_list|(
literal|""
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|RegionStateStore
name|stateStore
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStateStore
argument_list|()
decl_stmt|;
comment|// Put the online region in pending_close. It is actually already opened.
comment|// This is to simulate that the region close RPC is not sent out before failover
name|RegionState
name|oldState
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hriOnline
argument_list|)
decl_stmt|;
name|RegionState
name|newState
init|=
operator|new
name|RegionState
argument_list|(
name|hriOnline
argument_list|,
name|State
operator|.
name|PENDING_CLOSE
argument_list|,
name|oldState
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|stateStore
operator|.
name|updateRegionState
argument_list|(
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|,
name|newState
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
comment|// Put the offline region in pending_open. It is actually not opened yet.
comment|// This is to simulate that the region open RPC is not sent out before failover
name|oldState
operator|=
operator|new
name|RegionState
argument_list|(
name|hriOffline
argument_list|,
name|State
operator|.
name|OFFLINE
argument_list|)
expr_stmt|;
name|newState
operator|=
operator|new
name|RegionState
argument_list|(
name|hriOffline
argument_list|,
name|State
operator|.
name|PENDING_OPEN
argument_list|,
name|newState
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|stateStore
operator|.
name|updateRegionState
argument_list|(
name|HConstants
operator|.
name|NO_SEQNUM
argument_list|,
name|newState
argument_list|,
name|oldState
argument_list|)
expr_stmt|;
comment|// Stop the master
name|log
argument_list|(
literal|"Aborting master"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|abortMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitOnMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Master has aborted"
argument_list|)
expr_stmt|;
comment|// Start up a new master
name|log
argument_list|(
literal|"Starting up a new master"
argument_list|)
expr_stmt|;
name|master
operator|=
name|cluster
operator|.
name|startMaster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"Waiting for master to be ready"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"Master is ready"
argument_list|)
expr_stmt|;
comment|// Wait till no region in transition any more
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitUntilNoRegionsInTransition
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
comment|// Get new region states since master restarted
name|regionStates
operator|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
expr_stmt|;
comment|// Both pending_open (RPC sent/not yet) regions should be online
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|isRegionOnline
argument_list|(
name|hriOffline
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|isRegionOnline
argument_list|(
name|hriOnline
argument_list|)
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Done with verification, shutting down cluster"
argument_list|)
expr_stmt|;
comment|// Done, shutdown the cluster
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

