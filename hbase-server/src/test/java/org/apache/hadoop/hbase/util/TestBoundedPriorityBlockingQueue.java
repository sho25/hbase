begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBoundedPriorityBlockingQueue
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBoundedPriorityBlockingQueue
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|CAPACITY
init|=
literal|16
decl_stmt|;
specifier|static
class|class
name|TestObject
block|{
specifier|private
specifier|final
name|int
name|priority
decl_stmt|;
specifier|private
specifier|final
name|int
name|seqId
decl_stmt|;
specifier|public
name|TestObject
parameter_list|(
specifier|final
name|int
name|priority
parameter_list|,
specifier|final
name|int
name|seqId
parameter_list|)
block|{
name|this
operator|.
name|priority
operator|=
name|priority
expr_stmt|;
name|this
operator|.
name|seqId
operator|=
name|seqId
expr_stmt|;
block|}
specifier|public
name|int
name|getSeqId
parameter_list|()
block|{
return|return
name|this
operator|.
name|seqId
return|;
block|}
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|this
operator|.
name|priority
return|;
block|}
block|}
specifier|static
class|class
name|TestObjectComparator
implements|implements
name|Comparator
argument_list|<
name|TestObject
argument_list|>
block|{
specifier|public
name|TestObjectComparator
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TestObject
name|a
parameter_list|,
name|TestObject
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getPriority
argument_list|()
operator|-
name|b
operator|.
name|getPriority
argument_list|()
return|;
block|}
block|}
specifier|private
name|BoundedPriorityBlockingQueue
argument_list|<
name|TestObject
argument_list|>
name|queue
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|queue
operator|=
operator|new
name|BoundedPriorityBlockingQueue
argument_list|<>
argument_list|(
name|CAPACITY
argument_list|,
operator|new
name|TestObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
specifier|public
name|void
name|tesAppend
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Push
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|CAPACITY
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|TestObject
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CAPACITY
operator|-
name|i
argument_list|,
name|queue
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pop
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|CAPACITY
condition|;
operator|++
name|i
control|)
block|{
name|TestObject
name|obj
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|obj
operator|.
name|getSeqId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CAPACITY
operator|-
name|i
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|queue
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tesAppendSamePriority
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Push
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|CAPACITY
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CAPACITY
operator|-
name|i
argument_list|,
name|queue
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pop
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|CAPACITY
condition|;
operator|++
name|i
control|)
block|{
name|TestObject
name|obj
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|obj
operator|.
name|getSeqId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CAPACITY
operator|-
name|i
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|queue
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrepend
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Push
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|CAPACITY
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|TestObject
argument_list|(
name|CAPACITY
operator|-
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CAPACITY
operator|-
name|i
argument_list|,
name|queue
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Pop
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|CAPACITY
condition|;
operator|++
name|i
control|)
block|{
name|TestObject
name|obj
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|CAPACITY
operator|-
operator|(
name|i
operator|-
literal|1
operator|)
argument_list|,
name|obj
operator|.
name|getSeqId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CAPACITY
operator|-
name|i
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|queue
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsert
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Push
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|CAPACITY
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|assertTrue
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|TestObject
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
literal|1
operator|+
name|i
operator|)
operator|/
literal|2
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
name|CAPACITY
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|assertTrue
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|TestObject
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CAPACITY
operator|/
literal|2
operator|+
operator|(
name|i
operator|/
literal|2
operator|)
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|TestObject
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pop
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|CAPACITY
condition|;
operator|++
name|i
control|)
block|{
name|TestObject
name|obj
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|obj
operator|.
name|getSeqId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CAPACITY
operator|-
name|i
argument_list|,
name|queue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|queue
operator|.
name|remainingCapacity
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFifoSamePriority
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|CAPACITY
operator|>=
literal|6
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
name|assertTrue
argument_list|(
name|queue
operator|.
name|offer
argument_list|(
operator|new
name|TestObject
argument_list|(
operator|(
literal|1
operator|+
operator|(
name|i
operator|%
literal|2
operator|)
operator|)
operator|*
literal|10
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|TestObject
name|obj
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|obj
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|obj
operator|.
name|getSeqId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|TestObject
name|obj
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|obj
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|obj
operator|.
name|getSeqId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPoll
parameter_list|()
block|{
name|assertNull
argument_list|(
name|queue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|PriorityQueue
argument_list|<
name|TestObject
argument_list|>
name|testList
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
name|CAPACITY
argument_list|,
operator|new
name|TestObjectComparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CAPACITY
condition|;
operator|++
name|i
control|)
block|{
name|TestObject
name|obj
init|=
operator|new
name|TestObject
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|testList
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CAPACITY
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|testList
operator|.
name|poll
argument_list|()
argument_list|,
name|queue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
literal|null
argument_list|,
name|queue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPollInExecutor
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|TestObject
name|testObj
init|=
operator|new
name|TestObject
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|CyclicBarrier
name|threadsStarted
init|=
operator|new
name|CyclicBarrier
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|assertNull
argument_list|(
name|queue
operator|.
name|poll
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|threadsStarted
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|testObj
argument_list|,
name|queue
operator|.
name|poll
argument_list|(
literal|1000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|queue
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|threadsStarted
operator|.
name|await
argument_list|()
expr_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|testObj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|8000
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

