begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNameTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MultiRowMutationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|InclusiveStopFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|KeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RegexStringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SubstringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|TimeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|NoSuchColumnFamilyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Run tests that use the HBase clients; {@link Table}.  * Sets up the HBase mini cluster once at start and runs through all client tests.  * Each creates a table named for the method and does its stuff against that.  *  * Parameterized to run with different registry implementations.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFromClientSide5
extends|extends
name|FromClientSideBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFromClientSide5
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestFromClientSide5
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TableNameTestRule
name|name
init|=
operator|new
name|TableNameTestRule
argument_list|()
decl_stmt|;
comment|// To keep the child classes happy.
name|TestFromClientSide5
parameter_list|()
block|{}
specifier|public
name|TestFromClientSide5
parameter_list|(
name|Class
name|registry
parameter_list|,
name|int
name|numHedgedReqs
parameter_list|)
throws|throws
name|Exception
block|{
name|initialize
argument_list|(
name|registry
argument_list|,
name|numHedgedReqs
argument_list|,
name|MultiRowMutationEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Collection
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|MasterRegistry
operator|.
name|class
block|,
literal|1
block|}
block|,
block|{
name|MasterRegistry
operator|.
name|class
block|,
literal|2
block|}
block|,
block|{
name|ZKConnectionRegistry
operator|.
name|class
block|,
literal|1
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|afterClass
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetClosestRowBefore
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|firstRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row111"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|secondRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row222"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|thirdRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row333"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|forthRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row444"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|beforeFirstRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|beforeSecondRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row22"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|beforeThirdRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row33"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|beforeForthRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row44"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|CATALOG_FAMILY
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info2"
argument_list|)
block|}
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
comment|// set block size to 64 to making 2 kvs into one block, bypassing the walkForwardInSingleRow
comment|// in Store.rowAtOrBeforeFromStoreFile
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|HRegion
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|firstRow
argument_list|)
decl_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|secondRow
argument_list|)
decl_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|thirdRow
argument_list|)
decl_stmt|;
name|Put
name|put4
init|=
operator|new
name|Put
argument_list|(
name|forthRow
argument_list|)
decl_stmt|;
name|byte
index|[]
name|one
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|two
init|=
operator|new
name|byte
index|[]
block|{
literal|2
block|}
decl_stmt|;
name|byte
index|[]
name|three
init|=
operator|new
name|byte
index|[]
block|{
literal|3
block|}
decl_stmt|;
name|byte
index|[]
name|four
init|=
operator|new
name|byte
index|[]
block|{
literal|4
block|}
decl_stmt|;
name|put1
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|put4
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|four
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put4
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Result
name|result
decl_stmt|;
comment|// Test before first that null is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|beforeFirstRow
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Test at first that first is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|firstRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|firstRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test in between first and second that first is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|beforeSecondRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|firstRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test at second make sure second is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|secondRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|secondRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test in second and third, make sure second is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|beforeThirdRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|secondRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test at third make sure third is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|thirdRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|thirdRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|three
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test in third and forth, make sure third is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|beforeForthRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|thirdRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|three
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test at forth make sure forth is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|forthRow
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|forthRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|four
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test after forth make sure forth is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|forthRow
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|forthRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|four
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Result
name|getReverseScanResult
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
return|return
name|scanner
operator|.
name|next
argument_list|()
return|;
block|}
block|}
comment|/**    * For HBASE-2156    */
annotation|@
name|Test
specifier|public
name|void
name|testScanVariableReuse
parameter_list|()
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiRowMutation
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMultiRowMutation"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow1"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|MutationProto
name|m1
init|=
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|MutationType
operator|.
name|PUT
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|MutationProto
name|m2
init|=
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|MutationType
operator|.
name|PUT
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|MutateRowsRequest
operator|.
name|Builder
name|mrmBuilder
init|=
name|MutateRowsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|mrmBuilder
operator|.
name|addMutationRequest
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|mrmBuilder
operator|.
name|addMutationRequest
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|MutateRowsRequest
name|mrm
init|=
name|mrmBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|CoprocessorRpcChannel
name|channel
init|=
name|t
operator|.
name|coprocessorService
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|MultiRowMutationService
operator|.
name|BlockingInterface
name|service
init|=
name|MultiRowMutationService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|service
operator|.
name|mutateRows
argument_list|(
literal|null
argument_list|,
name|mrm
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowMutation
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testRowMutation"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|}
decl_stmt|;
name|RowMutations
name|arm
init|=
operator|new
name|RowMutations
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|t
operator|.
name|mutateRow
argument_list|(
name|arm
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|arm
operator|=
operator|new
name|RowMutations
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// TODO: Trying mutateRow again. The batch was failing with a one try only.
name|t
operator|.
name|mutateRow
argument_list|(
name|arm
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that we get a region level exception
try|try
block|{
name|arm
operator|=
operator|new
name|RowMutations
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'b'
block|,
literal|'o'
block|,
literal|'g'
block|,
literal|'u'
block|,
literal|'s'
block|}
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|t
operator|.
name|mutateRow
argument_list|(
name|arm
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NoSuchColumnFamilyException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchColumnFamilyException
name|e
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|e
parameter_list|)
block|{
for|for
control|(
name|Throwable
name|rootCause
range|:
name|e
operator|.
name|getCauses
argument_list|()
control|)
block|{
if|if
condition|(
name|rootCause
operator|instanceof
name|NoSuchColumnFamilyException
condition|)
block|{
return|return;
block|}
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchAppendWithReturnResultFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testBatchAppendWithReturnResultFalse"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Append
name|append1
init|=
operator|new
name|Append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|append1
operator|.
name|setReturnResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|append1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|Append
name|append2
init|=
operator|new
name|Append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|append2
operator|.
name|setReturnResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|append2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Append
argument_list|>
name|appends
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appends
operator|.
name|add
argument_list|(
name|append1
argument_list|)
expr_stmt|;
name|appends
operator|.
name|add
argument_list|(
name|append2
argument_list|)
expr_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
literal|2
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|appends
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|r
range|:
name|results
control|)
block|{
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|r
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testAppend"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"42"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"23"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
block|}
decl_stmt|;
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|a
operator|.
name|setReturnResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|t
operator|.
name|append
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|append
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|v2
argument_list|,
name|v1
argument_list|)
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// QUALIFIERS[2] previously not exist, verify both value and timestamp are correct
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|v2
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Result
argument_list|>
name|doAppend
parameter_list|(
specifier|final
name|boolean
name|walUsed
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testAppend, walUsed is "
operator|+
name|walUsed
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|walUsed
condition|?
literal|"testAppendWithWAL"
else|:
literal|"testAppendWithoutWAL"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
name|Put
name|put_0
init|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|put_0
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"put"
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put_1
init|=
operator|new
name|Put
argument_list|(
name|row3
argument_list|)
decl_stmt|;
name|put_1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"put"
argument_list|)
argument_list|)
expr_stmt|;
name|Append
name|append_0
init|=
operator|new
name|Append
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|append_0
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|Append
name|append_1
init|=
operator|new
name|Append
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|append_1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"k"
argument_list|)
argument_list|)
expr_stmt|;
name|Append
name|append_2
init|=
operator|new
name|Append
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|append_2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|walUsed
condition|)
block|{
name|append_2
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
block|}
name|Append
name|append_3
init|=
operator|new
name|Append
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|append_3
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
name|append_0
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|put_0
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|put_1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|t
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
init|)
block|{
name|t
operator|.
name|append
argument_list|(
name|append_1
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
name|append_2
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
name|append_3
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendWithoutWAL
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|resultsWithWal
init|=
name|doAppend
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|resultsWithoutWal
init|=
name|doAppend
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultsWithWal
operator|.
name|size
argument_list|()
argument_list|,
name|resultsWithoutWal
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|resultsWithWal
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Result
name|resultWithWal
init|=
name|resultsWithWal
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Result
name|resultWithoutWal
init|=
name|resultsWithoutWal
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultWithWal
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|,
name|resultWithoutWal
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|resultWithWal
operator|.
name|rawCells
argument_list|()
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|Cell
name|cellWithWal
init|=
name|resultWithWal
operator|.
name|rawCells
argument_list|()
index|[
name|j
index|]
decl_stmt|;
name|Cell
name|cellWithoutWal
init|=
name|resultWithoutWal
operator|.
name|rawCells
argument_list|()
index|[
name|j
index|]
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cellWithWal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cellWithoutWal
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cellWithWal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cellWithoutWal
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cellWithWal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cellWithoutWal
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cellWithWal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cellWithoutWal
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientPoolRoundRobin
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|int
name|poolSize
init|=
literal|3
decl_stmt|;
name|int
name|numVersions
init|=
name|poolSize
operator|*
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_TYPE
argument_list|,
literal|"round-robin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_SIZE
argument_list|,
name|poolSize
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
init|)
block|{
specifier|final
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|versions
init|=
literal|1
init|;
name|versions
operator|<=
name|numVersions
condition|;
name|versions
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
operator|+
name|versions
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|QUALIFIER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of versions of '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|QUALIFIER
argument_list|)
operator|+
literal|" did not match"
argument_list|,
name|versions
argument_list|,
name|navigableMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|navigableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"The value at time "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" did not match what was put"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"Flakey: HBASE-8989"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testClientPoolThreadLocal
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|int
name|poolSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|numVersions
init|=
literal|3
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_TYPE
argument_list|,
literal|"thread-local"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_SIZE
argument_list|,
name|poolSize
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
literal|3
argument_list|)
init|)
block|{
specifier|final
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
specifier|final
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|versions
init|=
literal|1
init|;
name|versions
operator|<=
name|numVersions
condition|;
name|versions
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
operator|+
name|versions
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|QUALIFIER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of versions of '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|QUALIFIER
argument_list|)
operator|+
literal|" did not match"
argument_list|,
name|versions
argument_list|,
name|navigableMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|navigableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"The value at time "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" did not match what was put"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Object
name|waitLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numVersions
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|AssertionError
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|versions
init|=
name|numVersions
init|;
name|versions
operator|<
name|numVersions
operator|*
literal|2
condition|;
name|versions
operator|++
control|)
block|{
specifier|final
name|int
name|versionsCopy
init|=
name|versions
decl_stmt|;
name|executorService
operator|.
name|submit
argument_list|(
call|(
name|Callable
argument_list|<
name|Void
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
operator|+
name|versionsCopy
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|QUALIFIER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of versions of '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|QUALIFIER
argument_list|)
operator|+
literal|" did not match "
operator|+
name|versionsCopy
argument_list|,
name|versionsCopy
argument_list|,
name|navigableMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|navigableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"The value at time "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" did not match what was put"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|waitLock
init|)
block|{
name|waitLock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{           }
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// the error happens in a thread, it won't fail the test,
comment|// need to pass it to the caller for proper handling.
name|error
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|)
function|;
block|}
end_class

begin_synchronized
synchronized|synchronized
init|(
name|waitLock
init|)
block|{
name|waitLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
end_synchronized

begin_expr_stmt
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertNull
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}   }
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndPut
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|anotherrow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"anotherrow"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// row doesn't exist, so using non-null value should be considered "not match".
name|boolean
name|ok
init|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put1
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
comment|// row doesn't exist, so using "ifNotExists" should be considered "match".
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifNotExists
argument_list|()
operator|.
name|thenPut
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
comment|// row now exists, so using "ifNotExists" should be considered "not match".
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifNotExists
argument_list|()
operator|.
name|thenPut
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value2
argument_list|)
expr_stmt|;
comment|// row now exists, use the matching value to check
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|anotherrow
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// try to do CheckAndPut on different rows
try|try
block|{
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|value2
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"trying to check and modify different rows should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{       }
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndMutateWithTimeRange
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
specifier|final
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|2
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifNotExists
argument_list|()
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|at
argument_list|(
name|ts
operator|+
literal|10000
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|from
argument_list|(
name|ts
operator|+
literal|10000
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|between
argument_list|(
name|ts
operator|+
literal|10000
argument_list|,
name|ts
operator|+
literal|20000
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|until
argument_list|(
name|ts
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|at
argument_list|(
name|ts
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|from
argument_list|(
name|ts
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|between
argument_list|(
name|ts
argument_list|,
name|ts
operator|+
literal|20000
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|until
argument_list|(
name|ts
operator|+
literal|10000
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|RowMutations
name|rm
init|=
operator|new
name|RowMutations
argument_list|(
name|ROW
argument_list|)
operator|.
name|add
argument_list|(
operator|(
name|Mutation
operator|)
name|put
argument_list|)
decl_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|at
argument_list|(
name|ts
operator|+
literal|10000
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenMutate
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|at
argument_list|(
name|ts
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenMutate
argument_list|(
name|rm
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|at
argument_list|(
name|ts
operator|+
literal|10000
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|timeRange
argument_list|(
name|TimeRange
operator|.
name|at
argument_list|(
name|ts
argument_list|)
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndPutWithCompareOp
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaa"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbbb"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cccc"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"dddd"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value3
argument_list|)
expr_stmt|;
comment|// row doesn't exist, so using "ifNotExists" should be considered "match".
name|boolean
name|ok
init|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifNotExists
argument_list|()
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
comment|// cell = "bbbb", using "aaaa" to compare only LESS/LESS_OR_EQUAL/NOT_EQUAL
comment|// turns out "match"
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER
argument_list|,
name|value1
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
name|value1
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value1
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS
argument_list|,
name|value1
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value1
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|NOT_EQUAL
argument_list|,
name|value1
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
comment|// cell = "cccc", using "dddd" to compare only LARGER/LARGER_OR_EQUAL/NOT_EQUAL
comment|// turns out "match"
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS
argument_list|,
name|value4
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value4
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
name|value4
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER
argument_list|,
name|value4
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value4
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|NOT_EQUAL
argument_list|,
name|value4
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
comment|// cell = "bbbb", using "bbbb" to compare only GREATER_OR_EQUAL/LESS_OR_EQUAL/EQUAL
comment|// turns out "match"
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER
argument_list|,
name|value2
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|NOT_EQUAL
argument_list|,
name|value2
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS
argument_list|,
name|value2
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value2
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value2
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
name|value2
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndDelete
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaa"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|value1
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndDeleteWithCompareOp
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaa"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbbb"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cccc"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"dddd"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value3
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// cell = "bbbb", using "aaaa" to compare only LESS/LESS_OR_EQUAL/NOT_EQUAL
comment|// turns out "match"
name|boolean
name|ok
init|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER
argument_list|,
name|value1
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
name|value1
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value1
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS
argument_list|,
name|value1
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value1
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|NOT_EQUAL
argument_list|,
name|value1
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
comment|// cell = "cccc", using "dddd" to compare only LARGER/LARGER_OR_EQUAL/NOT_EQUAL
comment|// turns out "match"
name|table
operator|.
name|put
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS
argument_list|,
name|value4
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value4
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
name|value4
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER
argument_list|,
name|value4
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value4
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|NOT_EQUAL
argument_list|,
name|value4
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
comment|// cell = "bbbb", using "bbbb" to compare only GREATER_OR_EQUAL/LESS_OR_EQUAL/EQUAL
comment|// turns out "match"
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER
argument_list|,
name|value2
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|NOT_EQUAL
argument_list|,
name|value2
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS
argument_list|,
name|value2
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value2
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value2
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|qualifier
argument_list|(
name|QUALIFIER
argument_list|)
operator|.
name|ifMatches
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
name|value2
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**   * Test ScanMetrics   */
end_comment

begin_function
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unused"
block|,
literal|"checkstyle:EmptyBlock"
block|}
argument_list|)
specifier|public
name|void
name|testScanMetrics
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// Set up test table:
comment|// Create table:
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|int
name|numOfRegions
decl_stmt|;
try|try
init|(
name|RegionLocator
name|r
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|numOfRegions
operator|=
name|r
operator|.
name|getStartKeys
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
comment|// Create 3 rows in the table, with rowkeys starting with "zzz*" so that
comment|// scan are forced to hit all the regions.
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz1"
argument_list|)
argument_list|)
decl_stmt|;
name|put1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz2"
argument_list|)
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz3"
argument_list|)
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|put1
argument_list|,
name|put2
argument_list|,
name|put3
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|scan1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|int
name|numRecords
init|=
literal|0
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan1
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|numRecords
operator|++
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"test data has "
operator|+
name|numRecords
operator|+
literal|" records."
argument_list|)
expr_stmt|;
comment|// by default, scan metrics collection is turned off
name|assertNull
argument_list|(
name|scanner
operator|.
name|getScanMetrics
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// turn on scan metrics
name|Scan
name|scan2
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan2
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan2
operator|.
name|setCaching
argument_list|(
name|numRecords
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|result
range|:
name|scanner
operator|.
name|next
argument_list|(
name|numRecords
operator|-
literal|1
argument_list|)
control|)
block|{         }
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// closing the scanner will set the metrics.
name|assertNotNull
argument_list|(
name|scanner
operator|.
name|getScanMetrics
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// set caching to 1, because metrics are collected in each roundtrip only
name|scan2
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan2
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan2
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
init|)
block|{
comment|// per HBASE-5717, this should still collect even if you don't run all the way to
comment|// the end of the scanner. So this is asking for 2 of the 3 rows we inserted.
for|for
control|(
name|Result
name|result
range|:
name|scanner
operator|.
name|next
argument_list|(
name|numRecords
operator|-
literal|1
argument_list|)
control|)
block|{         }
name|ScanMetrics
name|scanMetrics
init|=
name|scanner
operator|.
name|getScanMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not access all the regions in the table"
argument_list|,
name|numOfRegions
argument_list|,
name|scanMetrics
operator|.
name|countOfRegions
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check byte counters
name|scan2
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan2
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan2
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
init|)
block|{
name|int
name|numBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
operator|.
name|next
argument_list|(
literal|1
argument_list|)
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|result
operator|.
name|listCells
argument_list|()
control|)
block|{
name|numBytes
operator|+=
name|PrivateCellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|ScanMetrics
name|scanMetrics
init|=
name|scanner
operator|.
name|getScanMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not count the result bytes"
argument_list|,
name|numBytes
argument_list|,
name|scanMetrics
operator|.
name|countOfBytesInResults
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check byte counters on a small scan
name|scan2
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan2
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan2
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan2
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
init|)
block|{
name|int
name|numBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
operator|.
name|next
argument_list|(
literal|1
argument_list|)
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|result
operator|.
name|listCells
argument_list|()
control|)
block|{
name|numBytes
operator|+=
name|PrivateCellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|ScanMetrics
name|scanMetrics
init|=
name|scanner
operator|.
name|getScanMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not count the result bytes"
argument_list|,
name|numBytes
argument_list|,
name|scanMetrics
operator|.
name|countOfBytesInResults
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now, test that the metrics are still collected even if you don't call close, but do
comment|// run past the end of all the records
comment|/** There seems to be a timing issue here.  Comment out for now. Fix when time.        Scan scanWithoutClose = new Scan();        scanWithoutClose.setCaching(1);        scanWithoutClose.setScanMetricsEnabled(true);        ResultScanner scannerWithoutClose = ht.getScanner(scanWithoutClose);        for (Result result : scannerWithoutClose.next(numRecords + 1)) {        }        ScanMetrics scanMetricsWithoutClose = getScanMetrics(scanWithoutClose);        assertEquals("Did not access all the regions in the table", numOfRegions,        scanMetricsWithoutClose.countOfRegions.get());        */
comment|// finally,
comment|// test that the metrics are collected correctly if you both run past all the records,
comment|// AND close the scanner
name|Scan
name|scanWithClose
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// make sure we can set caching up to the number of a scanned values
name|scanWithClose
operator|.
name|setCaching
argument_list|(
name|numRecords
argument_list|)
expr_stmt|;
name|scanWithClose
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scannerWithClose
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scanWithClose
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|result
range|:
name|scannerWithClose
operator|.
name|next
argument_list|(
name|numRecords
operator|+
literal|1
argument_list|)
control|)
block|{         }
name|scannerWithClose
operator|.
name|close
argument_list|()
expr_stmt|;
name|ScanMetrics
name|scanMetricsWithClose
init|=
name|scannerWithClose
operator|.
name|getScanMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not access all the regions in the table"
argument_list|,
name|numOfRegions
argument_list|,
name|scanMetricsWithClose
operator|.
name|countOfRegions
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Tests that cache on write works all the way up from the client-side.    *    * Performs inserts, flushes, and compactions, verifying changes in the block    * cache along the way.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCacheOnWriteEvictOnClose
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
comment|// get the block cache and region
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|HRegion
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getRegion
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|HStore
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// establish baseline stats
name|long
name|startBlockCount
init|=
name|cache
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
name|long
name|startBlockHits
init|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
decl_stmt|;
name|long
name|startBlockMiss
init|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
decl_stmt|;
comment|// wait till baseline is stable, (minimal 500 ms)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|startBlockCount
operator|!=
name|cache
operator|.
name|getBlockCount
argument_list|()
operator|||
name|startBlockHits
operator|!=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
operator|||
name|startBlockMiss
operator|!=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
condition|)
block|{
name|startBlockCount
operator|=
name|cache
operator|.
name|getBlockCount
argument_list|()
expr_stmt|;
name|startBlockHits
operator|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
expr_stmt|;
name|startBlockMiss
operator|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
expr_stmt|;
name|i
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|// insert data
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// data was in memstore so don't expect any changes
name|assertEquals
argument_list|(
name|startBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush the data
name|LOG
operator|.
name|debug
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// expect two more blocks in cache - DATA and ROOT_INDEX
comment|// , no change in hits/misses
name|long
name|expectedBlockCount
init|=
name|startBlockCount
operator|+
literal|2
decl_stmt|;
name|long
name|expectedBlockHits
init|=
name|startBlockHits
decl_stmt|;
name|long
name|expectedBlockMiss
init|=
name|startBlockMiss
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// read the data and expect same blocks, one new hit, no misses
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// insert a second column, read the row, no new blocks, one new hit
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|data
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush, one new block
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// + 1 for Index Block, +1 for data block
name|expectedBlockCount
operator|+=
literal|2
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// compact, net minus two blocks, two hits, no misses
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compacting"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|closeAndArchiveCompactedFiles
argument_list|()
expr_stmt|;
name|waitForStoreFileCount
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// wait 10 seconds max
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// evicted two data blocks and two index blocks and compaction does not cache new blocks
name|expectedBlockCount
operator|=
literal|0
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|expectedBlockHits
operator|+=
literal|2
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// read the row, this should be a cache miss because we don't cache data
comment|// blocks on compaction
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|expectedBlockCount
operator|+=
literal|1
expr_stmt|;
comment|// cached one data block
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|waitForStoreFileCount
parameter_list|(
name|HStore
name|store
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|start
operator|+
name|timeout
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|&&
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|!=
name|count
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"start="
operator|+
name|start
operator|+
literal|", now="
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|", cur="
operator|+
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Tests the non cached version of getRegionLocator by moving a region.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testNonCachedGetRegionLocation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ignored
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family1
block|,
name|family2
block|}
argument_list|,
literal|10
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
init|;
name|RegionLocator
name|locator
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|allRegionLocations
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allRegionLocations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RegionInfo
name|regionInfo
init|=
name|allRegionLocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegion
argument_list|()
decl_stmt|;
name|ServerName
name|addrBefore
init|=
name|allRegionLocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// Verify region location before move.
name|HRegionLocation
name|addrCache
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HRegionLocation
name|addrNoCache
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|addrBefore
operator|.
name|getPort
argument_list|()
argument_list|,
name|addrCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|addrBefore
operator|.
name|getPort
argument_list|()
argument_list|,
name|addrNoCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure more than one server.
if|if
condition|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|startRegionServer
argument_list|()
expr_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|30000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|ServerName
name|addrAfter
init|=
literal|null
decl_stmt|;
comment|// Now move the region to a different server.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|regionServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ServerName
name|addr
init|=
name|regionServer
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|getPort
argument_list|()
operator|!=
name|addrBefore
operator|.
name|getPort
argument_list|()
condition|)
block|{
name|admin
operator|.
name|move
argument_list|(
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|addr
argument_list|)
expr_stmt|;
comment|// Wait for the region to move.
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|addrAfter
operator|=
name|addr
expr_stmt|;
break|break;
block|}
block|}
comment|// Verify the region was moved.
name|addrCache
operator|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addrNoCache
operator|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|addrAfter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addrAfter
operator|.
name|getPort
argument_list|()
operator|!=
name|addrCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|addrAfter
operator|.
name|getPort
argument_list|()
argument_list|,
name|addrNoCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Tests getRegionsInRange by creating some regions over which a range of    * keys spans; then changing the key range.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testGetRegionsInRange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddc"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mmm"
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|int
name|numOfRegions
decl_stmt|;
try|try
init|(
name|RegionLocator
name|r
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|numOfRegions
operator|=
name|r
operator|.
name|getStartKeys
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|numOfRegions
argument_list|)
expr_stmt|;
comment|// Get the regions in this range
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regionsList
init|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the start key
name|startKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fff"
argument_list|)
expr_stmt|;
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the end key
name|endKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nnn"
argument_list|)
expr_stmt|;
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Empty start key
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Empty end key
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both start and end keys empty
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the end key to somewhere in the last block
name|endKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz1"
argument_list|)
expr_stmt|;
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the start key to somewhere in the first block
name|startKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aac"
argument_list|)
expr_stmt|;
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make start and end key the same
name|startKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
expr_stmt|;
name|endKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
expr_stmt|;
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|getRegionsInRange
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regionsInRange
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|currentKey
init|=
name|startKey
decl_stmt|;
specifier|final
name|boolean
name|endKeyIsEndOfTable
init|=
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
try|try
init|(
name|RegionLocator
name|r
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
do|do
block|{
name|HRegionLocation
name|regionLocation
init|=
name|r
operator|.
name|getRegionLocation
argument_list|(
name|currentKey
argument_list|)
decl_stmt|;
name|regionsInRange
operator|.
name|add
argument_list|(
name|regionLocation
argument_list|)
expr_stmt|;
name|currentKey
operator|=
name|regionLocation
operator|.
name|getRegion
argument_list|()
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|currentKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|&&
operator|(
name|endKeyIsEndOfTable
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|currentKey
argument_list|,
name|endKey
argument_list|)
operator|<
literal|0
operator|)
condition|)
do|;
return|return
name|regionsInRange
return|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testJira6912
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|foo
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
literal|10
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|foo
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
comment|// If i comment this out it works
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareOperator
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|foo
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
index|[]
name|bar
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bar
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testScan_NullQualifier
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row put"
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|bar
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bar
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bar
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|bar
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bar
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bar
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testNegativeTimestamp
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative timestamps should not have been allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
operator|-
literal|1
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative timestamps should not have been allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative timestamps should not have been allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative timestamps should not have been allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative timestamps should not have been allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// KeyValue should allow negative timestamps for backwards compat. Otherwise, if the user
comment|// already has negative timestamps in cluster data, HBase won't be able to handle that
try|try
block|{
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|42
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|42
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|42
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"KeyValue SHOULD allow negative timestamps"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testRawScanRespectsVersions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
comment|// put the same row 4 times, with different values
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|10
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|11
argument_list|,
name|ArrayUtils
operator|.
name|add
argument_list|(
name|VALUE
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|12
argument_list|,
name|ArrayUtils
operator|.
name|add
argument_list|(
name|VALUE
argument_list|,
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|13
argument_list|,
name|ArrayUtils
operator|.
name|add
argument_list|(
name|VALUE
argument_list|,
operator|(
name|byte
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|int
name|versions
init|=
literal|4
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// get all the possible versions
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
literal|"Found an unexpected number of results for the row!"
argument_list|,
name|versions
argument_list|,
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Found more than a single row when raw scanning the table with a single row!"
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|// then if we decrease the number of versions, but keep the scan raw, we should see exactly
comment|// that number of versions
name|versions
operator|=
literal|2
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|(
name|versions
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
literal|"Found an unexpected number of results for the row!"
argument_list|,
name|versions
argument_list|,
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Found more than a single row when raw scanning the table with a single row!"
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|// finally, if we turn off raw scanning, but max out the number of versions, we should go back
comment|// to seeing just three
name|versions
operator|=
literal|3
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|(
name|versions
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
literal|"Found an unexpected number of results for the row!"
argument_list|,
name|versions
argument_list|,
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Found more than a single row when raw scanning the table with a single row!"
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testEmptyFilterList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
comment|// Insert one row each region
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|scanResults
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|scanResults
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scanResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|getResult
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Result
name|scanResult
init|=
name|scanResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|scanResult
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|,
name|getResult
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|scanResult
operator|.
name|rawCells
argument_list|()
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Cell
name|scanCell
init|=
name|scanResult
operator|.
name|rawCells
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|Cell
name|getCell
init|=
name|getResult
operator|.
name|rawCells
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|scanCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|getCell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|scanCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|getCell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|scanCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|getCell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|scanCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|getCell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testSmallScan
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
comment|// Insert one row each region
name|int
name|insertNum
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// normal scan
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|insertNum
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|// small scan
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|insertNum
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testSuperSimpleWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000000"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000002"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000004"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000006"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000008"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b22222-0000000000000000001"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b22222-0000000000000000003"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b22222-0000000000000000005"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b22222-0000000000000000007"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b22222-0000000000000000009"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-9223372036854775807"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000000"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000008"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testFiltersWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"col[1-5]"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|expectedIndex
init|=
literal|5
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|c
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|c
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|ROWS
index|[
name|expectedIndex
index|]
argument_list|,
literal|0
argument_list|,
name|ROWS
index|[
name|expectedIndex
index|]
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|QUALIFIERS
index|[
name|expectedIndex
index|]
argument_list|,
literal|0
argument_list|,
name|QUALIFIERS
index|[
name|expectedIndex
index|]
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|expectedIndex
operator|--
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testKeyOnlyFilterWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|KeyOnlyFilter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|ignored
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|VALUE
operator|.
name|length
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Test simple table and non-existent row cases.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testSimpleMissingWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// Try to get a row on an empty table
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Insert a row
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Make sure we can scan the row
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Try to scan empty rows around it
comment|// Introduced MemStore#shouldSeekForReverseScan to fix the following
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testNullWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
comment|// Null qualifier (should work)
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
comment|// Use a new table
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"2"
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
comment|// Empty qualifier, byte[0] instead of null (should work)
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Null value
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:MethodLength"
argument_list|)
specifier|public
name|void
name|testDeletesWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeNAscii
argument_list|(
name|ROW
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|,
literal|3
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test delete latest version
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// ts[4]
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test for HBASE-1847
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Cleanup null qualifier
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Expected client behavior might be that you can re-put deleted values
comment|// But alas, this is not to be. We can't put them back in either case.
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// The Scanner returns the previous values, the expected-naive-unexpected
comment|// behavior
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test deleting an entire family from one row but not the other various
comment|// ways
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test if we delete the family first in one row (HBASE-1541)
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Tests reversed scan under multi regions    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testReversedScanUnderMultiRegions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|maxByteArray
init|=
name|ConnectionUtils
operator|.
name|MAX_BYTE_ARRAY
decl_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"005"
argument_list|)
block|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"005"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|multiple
argument_list|(
name|maxByteArray
argument_list|,
literal|16
argument_list|)
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"006"
argument_list|)
block|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"006"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|multiple
argument_list|(
name|maxByteArray
argument_list|,
literal|8
argument_list|)
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"007"
argument_list|)
block|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"007"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|multiple
argument_list|(
name|maxByteArray
argument_list|,
literal|4
argument_list|)
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"008"
argument_list|)
block|,
name|Bytes
operator|.
name|multiple
argument_list|(
name|maxByteArray
argument_list|,
literal|2
argument_list|)
block|}
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
name|splitRows
argument_list|)
init|)
block|{
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|splitRows
operator|.
name|length
operator|+
literal|1
argument_list|,
name|l
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Insert one row each region
name|int
name|insertNum
init|=
name|splitRows
operator|.
name|length
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|splitRow
range|:
name|splitRows
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|splitRow
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// scan forward
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|insertNum
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|// scan backward
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|lastRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|insertNum
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Tests reversed scan under multi regions    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testSmallReversedScanUnderMultiRegions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"000"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"002"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"004"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"006"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"008"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"010"
argument_list|)
block|}
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
name|splitRows
argument_list|)
init|)
block|{
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|splitRows
operator|.
name|length
operator|+
literal|1
argument_list|,
name|l
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|splitRow
range|:
name|splitRows
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|splitRow
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|byte
index|[]
name|nextRow
init|=
name|Bytes
operator|.
name|copy
argument_list|(
name|splitRow
argument_list|)
decl_stmt|;
name|nextRow
index|[
name|nextRow
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|nextRow
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// scan forward
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|reverseScanTest
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reverseScanTest
argument_list|(
name|table
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|reverseScanTest
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|small
parameter_list|)
throws|throws
name|IOException
block|{
comment|// scan backward
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|lastRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"002"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|lastRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// 000 001 002
block|}
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"002"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"000"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|lastRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// 001 002
block|}
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"001"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|lastRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// 000 001
block|}
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"000"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|lastRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// 000
block|}
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"006"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"002"
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|lastRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// 003 004 005 006
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testFilterAllRecords
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setBatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Filter out any records
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|,
operator|new
name|InclusiveStopFilter
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
try|try
init|(
name|ResultScanner
name|s
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|assertNull
argument_list|(
name|s
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCellSizeLimit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCellSizeLimit"
argument_list|)
decl_stmt|;
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
name|tableDescriptor
init|=
operator|new
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|setValue
argument_list|(
name|HRegion
operator|.
name|HBASE_MAX_CELL_SIZE_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|familyDescriptor
init|=
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|tableDescriptor
operator|.
name|setColumnFamily
argument_list|(
name|familyDescriptor
argument_list|)
expr_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
block|}
comment|// Will succeed
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|increment
argument_list|(
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Will succeed
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|byte
index|[
literal|9
operator|*
literal|1024
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Will fail
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
try|try
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|byte
index|[
literal|10
operator|*
literal|1024
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Oversize cell failed to trigger exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|t
operator|.
name|append
argument_list|(
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|byte
index|[
literal|2
operator|*
literal|1024
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Oversize cell failed to trigger exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testDeleteSpecifiedVersionOfSpecifiedColumn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// Put version 1000,2000,3000,4000 of column FAMILY:QUALIFIER
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|4
condition|;
name|t
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUES
index|[
name|t
index|]
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// Delete version 3000 of column FAMILY:QUALIFIER
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
comment|// verify version 1000,2000,4000 remains for column FAMILY:QUALIFIER
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
comment|// Delete a version 5000 of column FAMILY:QUALIFIER which didn't exist
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// verify version 1000,2000,4000 remains for column FAMILY:QUALIFIER
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testDeleteLatestVersionOfSpecifiedColumn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// Put version 1000,2000,3000,4000 of column FAMILY:QUALIFIER
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|4
condition|;
name|t
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUES
index|[
name|t
index|]
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// Delete latest version of column FAMILY:QUALIFIER
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
comment|// verify version 1000,2000,3000 remains for column FAMILY:QUALIFIER
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
comment|// Delete two latest version of column FAMILY:QUALIFIER
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// verify version 1000 remains for column FAMILY:QUALIFIER
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
comment|// Put a version 5000 of column FAMILY:QUALIFIER
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// verify version 1000,5000 remains for column FAMILY:QUALIFIER
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Test for HBASE-17125    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testReadWithFilter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|)
init|)
block|{
name|byte
index|[]
name|VALUEA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value-a"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|VALUEB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value-b"
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|}
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// Put version 1000,2000,3000,4000 of column FAMILY:QUALIFIER
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<=
literal|3
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|<=
literal|1
condition|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUEA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUEB
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|readVersions
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test with max versions 1, it should still read ts[1]
name|scan
operator|=
operator|new
name|Scan
argument_list|()
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test with max versions 1, it should still read ts[1]
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|readVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test with max versions 5, it should still read ts[1]
name|scan
operator|=
operator|new
name|Scan
argument_list|()
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test with max versions 5, it should still read ts[1]
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|readVersions
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCellUtilTypeMethods
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"p"
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
init|)
block|{
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|CellScanner
name|cs
init|=
name|result
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|c
init|=
name|cs
operator|.
name|current
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|isPut
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scanner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|CellScanner
name|cs
init|=
name|result
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
comment|// First cell should be the delete (masking the Put)
name|Cell
name|c
init|=
name|cs
operator|.
name|current
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Cell should be a Delete: "
operator|+
name|c
argument_list|,
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Cell should not be a Put: "
operator|+
name|c
argument_list|,
name|CellUtil
operator|.
name|isPut
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
comment|// Second cell should be the original Put
name|assertTrue
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|cs
operator|.
name|current
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Cell should not be a Delete: "
operator|+
name|c
argument_list|,
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cell should be a Put: "
operator|+
name|c
argument_list|,
name|CellUtil
operator|.
name|isPut
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
comment|// No more cells in this row
name|assertFalse
argument_list|(
name|cs
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
comment|// No more results in this scan
name|assertNull
argument_list|(
name|scanner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DoNotRetryIOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTableWithZeroRegionReplicas
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setRegionReplication
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|DoNotRetryIOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testModifyTableWithZeroRegionReplicas
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|TableDescriptor
name|newDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|desc
argument_list|)
operator|.
name|setRegionReplication
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|modifyTable
argument_list|(
name|newDesc
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testModifyTableWithMemstoreData
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|createTableAndValidateTableSchemaModification
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testDeleteCFWithMemstoreData
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|createTableAndValidateTableSchemaModification
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Create table and validate online schema modification    * @param tableName Table name    * @param modifyTable Modify table if true otherwise delete column family    * @throws IOException in case of failures    */
end_comment

begin_function
specifier|private
name|void
name|createTableAndValidateTableSchemaModification
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|boolean
name|modifyTable
parameter_list|)
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Create table with two Cfs
name|byte
index|[]
name|cf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf2"
argument_list|)
decl_stmt|;
name|TableDescriptor
name|tableDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|cf1
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|cf2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Insert few records and flush the table
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|cf1
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|cf2
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|TEST_UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|regionDirs
init|=
name|FSUtils
operator|.
name|getRegionDirs
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|tableDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regionDirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|familyDirs
init|=
name|FSUtils
operator|.
name|getFamilyDirs
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|regionDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|familyDirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert record but dont flush the table
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|cf1
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|cf2
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|modifyTable
condition|)
block|{
name|tableDesc
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableDesc
argument_list|)
operator|.
name|removeColumnFamily
argument_list|(
name|cf2
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|cf2
argument_list|)
expr_stmt|;
block|}
comment|// After table modification or delete family there should be only one CF in FS
name|familyDirs
operator|=
name|FSUtils
operator|.
name|getFamilyDirs
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|regionDirs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CF dir count should be 1, but was "
operator|+
name|familyDirs
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|,
name|familyDirs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

