begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
operator|.
name|get
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncTableRegionLocator
extends|extends
name|AbstractTestRegionLocator
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAsyncTableRegionLocator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AsyncConnection
name|CONN
decl_stmt|;
specifier|private
specifier|static
name|AsyncTableRegionLocator
name|LOCATOR
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|startClusterAndCreateTable
argument_list|()
expr_stmt|;
name|CONN
operator|=
name|ConnectionFactory
operator|.
name|createAsyncConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOCATOR
operator|=
name|CONN
operator|.
name|getRegionLocator
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|CONN
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
index|[]
name|getStartKeys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|LOCATOR
operator|.
name|getStartKeys
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|byte
index|[]
index|[]
name|getEndKeys
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|LOCATOR
operator|.
name|getEndKeys
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
index|[]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|getStartEndKeys
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|startEndKeys
init|=
name|get
argument_list|(
name|LOCATOR
operator|.
name|getStartEndKeys
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|startKeys
init|=
operator|new
name|byte
index|[
name|startEndKeys
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
name|byte
index|[]
index|[]
name|endKeys
init|=
operator|new
name|byte
index|[
name|startEndKeys
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|startEndKeys
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|pair
init|=
name|startEndKeys
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|startKeys
index|[
name|i
index|]
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|endKeys
index|[
name|i
index|]
operator|=
name|pair
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
return|return
name|Pair
operator|.
name|newPair
argument_list|(
name|startKeys
argument_list|,
name|endKeys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|HRegionLocation
name|getRegionLocation
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|LOCATOR
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
name|replicaId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|getRegionLocations
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|LOCATOR
operator|.
name|getRegionLocations
argument_list|(
name|row
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|getAllRegionLocations
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|get
argument_list|(
name|LOCATOR
operator|.
name|getAllRegionLocations
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|clearCache
parameter_list|()
throws|throws
name|IOException
block|{
name|LOCATOR
operator|.
name|clearRegionLocationCache
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

