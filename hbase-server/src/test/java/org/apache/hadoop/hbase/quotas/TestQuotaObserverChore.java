begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|SpaceQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_comment
comment|/**  * Non-HBase cluster unit tests for {@link QuotaObserverChore}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestQuotaObserverChore
block|{
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|QuotaObserverChore
name|chore
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conn
operator|=
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
expr_stmt|;
name|chore
operator|=
name|mock
argument_list|(
name|QuotaObserverChore
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Set up some rules to call the real method on the mock.
name|when
argument_list|(
name|chore
operator|.
name|getViolationPolicy
argument_list|(
name|any
argument_list|(
name|SpaceQuota
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNumRegionsForTable
parameter_list|()
block|{
name|TableName
name|tn1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
name|TableName
name|tn2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t2"
argument_list|)
decl_stmt|;
name|TableName
name|tn3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t3"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numTable1Regions
init|=
literal|10
decl_stmt|;
specifier|final
name|int
name|numTable2Regions
init|=
literal|15
decl_stmt|;
specifier|final
name|int
name|numTable3Regions
init|=
literal|8
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Long
argument_list|>
name|regionReports
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTable1Regions
condition|;
name|i
operator|++
control|)
block|{
name|regionReports
operator|.
name|put
argument_list|(
operator|new
name|HRegionInfo
argument_list|(
name|tn1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTable2Regions
condition|;
name|i
operator|++
control|)
block|{
name|regionReports
operator|.
name|put
argument_list|(
operator|new
name|HRegionInfo
argument_list|(
name|tn2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTable3Regions
condition|;
name|i
operator|++
control|)
block|{
name|regionReports
operator|.
name|put
argument_list|(
operator|new
name|HRegionInfo
argument_list|(
name|tn3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
name|TableQuotaViolationStore
name|store
init|=
operator|new
name|TableQuotaViolationStore
argument_list|(
name|conn
argument_list|,
name|chore
argument_list|,
name|regionReports
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|chore
operator|.
name|getTableViolationStore
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numTable1Regions
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|store
operator|.
name|filterBySubject
argument_list|(
name|tn1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numTable2Regions
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|store
operator|.
name|filterBySubject
argument_list|(
name|tn2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numTable3Regions
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|store
operator|.
name|filterBySubject
argument_list|(
name|tn3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExtractViolationPolicy
parameter_list|()
block|{
for|for
control|(
name|SpaceViolationPolicy
name|policy
range|:
name|SpaceViolationPolicy
operator|.
name|values
argument_list|()
control|)
block|{
name|SpaceQuota
name|spaceQuota
init|=
name|SpaceQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
literal|1024L
argument_list|)
operator|.
name|setViolationPolicy
argument_list|(
name|ProtobufUtil
operator|.
name|toProtoViolationPolicy
argument_list|(
name|policy
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|policy
argument_list|,
name|chore
operator|.
name|getViolationPolicy
argument_list|(
name|spaceQuota
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SpaceQuota
name|malformedQuota
init|=
name|SpaceQuota
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSoftLimit
argument_list|(
literal|1024L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|chore
operator|.
name|getViolationPolicy
argument_list|(
name|malformedQuota
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an IllegalArgumentException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Pass
block|}
block|}
block|}
end_class

end_unit

