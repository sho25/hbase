begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|ByteBufferPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|CallCleanup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|MultiByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|SingleByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RPCTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RPCTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRpcServer
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAllocateByteBuffToReadInto
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|maxBuffersInPool
init|=
literal|10
decl_stmt|;
name|ByteBufferPool
name|pool
init|=
operator|new
name|ByteBufferPool
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
name|maxBuffersInPool
argument_list|)
decl_stmt|;
name|initPoolWithAllBuffers
argument_list|(
name|pool
argument_list|,
name|maxBuffersInPool
argument_list|)
expr_stmt|;
name|ByteBuff
name|buff
init|=
literal|null
decl_stmt|;
name|Pair
argument_list|<
name|ByteBuff
argument_list|,
name|CallCleanup
argument_list|>
name|pair
decl_stmt|;
comment|// When the request size is less than 1/6th of the pool buffer size. We should use on demand
comment|// created on heap Buffer
name|pair
operator|=
name|RpcServer
operator|.
name|allocateByteBuffToReadInto
argument_list|(
name|pool
argument_list|,
name|RpcServer
operator|.
name|getMinSizeForReservoirUse
argument_list|(
name|pool
argument_list|)
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|buff
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBuffersInPool
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
comment|// When the request size is> 1/6th of the pool buffer size.
name|pair
operator|=
name|RpcServer
operator|.
name|allocateByteBuffToReadInto
argument_list|(
name|pool
argument_list|,
name|RpcServer
operator|.
name|getMinSizeForReservoirUse
argument_list|(
name|pool
argument_list|)
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|buff
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBuffersInPool
operator|-
literal|1
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// CallCleanup#run should put back the BB to pool.
name|assertEquals
argument_list|(
name|maxBuffersInPool
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Request size> pool buffer size
name|pair
operator|=
name|RpcServer
operator|.
name|allocateByteBuffToReadInto
argument_list|(
name|pool
argument_list|,
name|RpcServer
operator|.
name|getMinSizeForReservoirUse
argument_list|(
name|pool
argument_list|)
argument_list|,
literal|7
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|buff
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|instanceof
name|MultiByteBuff
argument_list|)
expr_stmt|;
name|ByteBuffer
index|[]
name|bbs
init|=
operator|(
operator|(
name|MultiByteBuff
operator|)
name|buff
operator|)
operator|.
name|getEnclosingByteBuffers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bbs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bbs
index|[
literal|0
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bbs
index|[
literal|1
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
name|bbs
index|[
literal|0
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|bbs
index|[
literal|1
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBuffersInPool
operator|-
literal|2
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// CallCleanup#run should put back the BB to pool.
name|assertEquals
argument_list|(
name|maxBuffersInPool
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|pair
operator|=
name|RpcServer
operator|.
name|allocateByteBuffToReadInto
argument_list|(
name|pool
argument_list|,
name|RpcServer
operator|.
name|getMinSizeForReservoirUse
argument_list|(
name|pool
argument_list|)
argument_list|,
literal|6
operator|*
literal|1024
operator|+
literal|200
argument_list|)
expr_stmt|;
name|buff
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|instanceof
name|MultiByteBuff
argument_list|)
expr_stmt|;
name|bbs
operator|=
operator|(
operator|(
name|MultiByteBuff
operator|)
name|buff
operator|)
operator|.
name|getEnclosingByteBuffers
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bbs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bbs
index|[
literal|0
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bbs
index|[
literal|1
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
name|bbs
index|[
literal|0
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|bbs
index|[
literal|1
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|maxBuffersInPool
operator|-
literal|1
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// CallCleanup#run should put back the BB to pool.
name|assertEquals
argument_list|(
name|maxBuffersInPool
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
index|[]
name|buffers
init|=
operator|new
name|ByteBuffer
index|[
name|maxBuffersInPool
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxBuffersInPool
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|=
name|pool
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
block|}
name|pair
operator|=
name|RpcServer
operator|.
name|allocateByteBuffToReadInto
argument_list|(
name|pool
argument_list|,
name|RpcServer
operator|.
name|getMinSizeForReservoirUse
argument_list|(
name|pool
argument_list|)
argument_list|,
literal|20
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|buff
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|instanceof
name|MultiByteBuff
argument_list|)
expr_stmt|;
name|bbs
operator|=
operator|(
operator|(
name|MultiByteBuff
operator|)
name|buff
operator|)
operator|.
name|getEnclosingByteBuffers
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bbs
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bbs
index|[
literal|0
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bbs
index|[
literal|1
index|]
operator|.
name|isDirect
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
operator|*
literal|1024
argument_list|,
name|bbs
index|[
literal|0
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
operator|*
literal|1024
argument_list|,
name|bbs
index|[
literal|1
index|]
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
comment|// CallCleanup#run should put back the BB to pool.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pool
operator|.
name|getQueueSize
argument_list|()
argument_list|)
expr_stmt|;
name|pool
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
name|pair
operator|=
name|RpcServer
operator|.
name|allocateByteBuffToReadInto
argument_list|(
name|pool
argument_list|,
name|RpcServer
operator|.
name|getMinSizeForReservoirUse
argument_list|(
name|pool
argument_list|)
argument_list|,
literal|7
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|buff
operator|=
name|pair
operator|.
name|getFirst
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|.
name|hasArray
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buff
operator|instanceof
name|SingleByteBuff
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
operator|*
literal|1024
argument_list|,
operator|(
operator|(
name|SingleByteBuff
operator|)
name|buff
operator|)
operator|.
name|getEnclosingByteBuffer
argument_list|()
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initPoolWithAllBuffers
parameter_list|(
name|ByteBufferPool
name|pool
parameter_list|,
name|int
name|maxBuffersInPool
parameter_list|)
block|{
name|ByteBuffer
index|[]
name|buffers
init|=
operator|new
name|ByteBuffer
index|[
name|maxBuffersInPool
index|]
decl_stmt|;
comment|// Just call getBuffer() on pool 'maxBuffersInPool' so as to init all buffers and then put back
comment|// all. Makes pool with max #buffers.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxBuffersInPool
condition|;
name|i
operator|++
control|)
block|{
name|buffers
index|[
name|i
index|]
operator|=
name|pool
operator|.
name|getBuffer
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ByteBuffer
name|buf
range|:
name|buffers
control|)
block|{
name|pool
operator|.
name|putbackBuffer
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

