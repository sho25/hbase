begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDataManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotRegionManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSnapshotManifest
block|{
specifier|private
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME_STR
init|=
literal|"testSnapshotManifest"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME_STR
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TEST_NUM_REGIONS
init|=
literal|16000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TEST_NUM_REGIONFILES
init|=
literal|1000000
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Path
name|rootDir
decl_stmt|;
specifier|private
name|Path
name|snapshotDir
decl_stmt|;
specifier|private
name|SnapshotDescription
name|snapshotDesc
decl_stmt|;
specifier|private
name|SnapshotTestingUtils
operator|.
name|SnapshotMock
operator|.
name|SnapshotBuilder
name|builder
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
name|HBaseTestingUtility
operator|.
name|createLocalHTU
argument_list|()
expr_stmt|;
name|rootDir
operator|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
name|TABLE_NAME_STR
argument_list|)
expr_stmt|;
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|SnapshotMock
name|snapshotMock
init|=
operator|new
name|SnapshotTestingUtils
operator|.
name|SnapshotMock
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|builder
operator|=
name|snapshotMock
operator|.
name|createSnapshotV2
argument_list|(
literal|"snapshot"
argument_list|,
name|TABLE_NAME_STR
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|snapshotDir
operator|=
name|builder
operator|.
name|commit
argument_list|()
expr_stmt|;
name|snapshotDesc
operator|=
name|builder
operator|.
name|getSnapshotDescription
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|fs
operator|.
name|delete
argument_list|(
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadSnapshotManifest
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|p
init|=
name|createDataManifest
argument_list|()
decl_stmt|;
try|try
block|{
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshotDesc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"fail to test snapshot manifest because message size is too small."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptedSnapshotException
name|cse
parameter_list|)
block|{
try|try
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|SnapshotManifest
operator|.
name|SNAPSHOT_MANIFEST_SIZE_LIMIT_CONF_KEY
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshotDesc
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"open snapshot manifest succeed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptedSnapshotException
name|cse2
parameter_list|)
block|{
name|fail
argument_list|(
literal|"fail to take snapshot because Manifest proto-message too large."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadSnapshotRegionManifest
parameter_list|()
throws|throws
name|IOException
block|{
comment|// remove datamanifest file
name|fs
operator|.
name|delete
argument_list|(
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|SnapshotManifest
operator|.
name|DATA_MANIFEST_NAME
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Path
name|regionPath
init|=
name|createRegionManifest
argument_list|()
decl_stmt|;
try|try
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|SnapshotManifest
operator|.
name|SNAPSHOT_MANIFEST_SIZE_LIMIT_CONF_KEY
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshotDesc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CorruptedSnapshotException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"fail to test snapshot manifest because region message size is too small."
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fs
operator|.
name|delete
argument_list|(
name|regionPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Path
name|createDataManifest
parameter_list|()
throws|throws
name|IOException
block|{
name|SnapshotDataManifest
operator|.
name|Builder
name|dataManifestBuilder
init|=
name|SnapshotDataManifest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|byte
index|[]
name|startKey
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|stopKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|TEST_NUM_REGIONS
condition|;
name|i
operator|++
control|)
block|{
name|stopKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%016d"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|regionInfo
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TABLE_NAME
argument_list|,
name|startKey
argument_list|,
name|stopKey
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SnapshotRegionManifest
operator|.
name|Builder
name|dataRegionManifestBuilder
init|=
name|SnapshotRegionManifest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|builder
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|SnapshotRegionManifest
operator|.
name|FamilyFiles
operator|.
name|Builder
name|family
init|=
name|SnapshotRegionManifest
operator|.
name|FamilyFiles
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|family
operator|.
name|setFamilyName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|100
condition|;
operator|++
name|j
control|)
block|{
name|SnapshotRegionManifest
operator|.
name|StoreFile
operator|.
name|Builder
name|sfManifest
init|=
name|SnapshotRegionManifest
operator|.
name|StoreFile
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|sfManifest
operator|.
name|setName
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%032d"
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sfManifest
operator|.
name|setFileSize
argument_list|(
operator|(
literal|1
operator|+
name|i
operator|)
operator|*
operator|(
literal|1
operator|+
name|i
operator|)
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|family
operator|.
name|addStoreFiles
argument_list|(
name|sfManifest
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dataRegionManifestBuilder
operator|.
name|addFamilyFiles
argument_list|(
name|family
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dataRegionManifestBuilder
operator|.
name|setRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
name|dataManifestBuilder
operator|.
name|addRegionManifests
argument_list|(
name|dataRegionManifestBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|startKey
operator|=
name|stopKey
expr_stmt|;
block|}
name|dataManifestBuilder
operator|.
name|setTableSchema
argument_list|(
name|ProtobufUtil
operator|.
name|toTableSchema
argument_list|(
name|builder
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SnapshotDataManifest
name|dataManifest
init|=
name|dataManifestBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|writeDataManifest
argument_list|(
name|dataManifest
argument_list|)
return|;
block|}
specifier|private
name|Path
name|createRegionManifest
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAAAAA"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|stopKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BBBBBB"
argument_list|)
decl_stmt|;
name|HRegionInfo
name|regionInfo
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TABLE_NAME
argument_list|,
name|startKey
argument_list|,
name|stopKey
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SnapshotRegionManifest
operator|.
name|Builder
name|dataRegionManifestBuilder
init|=
name|SnapshotRegionManifest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|dataRegionManifestBuilder
operator|.
name|setRegionInfo
argument_list|(
name|HRegionInfo
operator|.
name|convert
argument_list|(
name|regionInfo
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|builder
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|SnapshotRegionManifest
operator|.
name|FamilyFiles
operator|.
name|Builder
name|family
init|=
name|SnapshotRegionManifest
operator|.
name|FamilyFiles
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|family
operator|.
name|setFamilyName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|TEST_NUM_REGIONFILES
condition|;
operator|++
name|j
control|)
block|{
name|SnapshotRegionManifest
operator|.
name|StoreFile
operator|.
name|Builder
name|sfManifest
init|=
name|SnapshotRegionManifest
operator|.
name|StoreFile
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|sfManifest
operator|.
name|setName
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%064d"
argument_list|,
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|sfManifest
operator|.
name|setFileSize
argument_list|(
name|j
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|family
operator|.
name|addStoreFiles
argument_list|(
name|sfManifest
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dataRegionManifestBuilder
operator|.
name|addFamilyFiles
argument_list|(
name|family
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SnapshotRegionManifest
name|manifest
init|=
name|dataRegionManifestBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|Path
name|regionPath
init|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|SnapshotManifestV2
operator|.
name|SNAPSHOT_MANIFEST_PREFIX
operator|+
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|regionPath
argument_list|)
decl_stmt|;
try|try
block|{
name|manifest
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|regionPath
return|;
block|}
specifier|private
name|Path
name|writeDataManifest
parameter_list|(
specifier|final
name|SnapshotDataManifest
name|manifest
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dataRegionPath
init|=
operator|new
name|Path
argument_list|(
name|snapshotDir
argument_list|,
name|SnapshotManifest
operator|.
name|DATA_MANIFEST_NAME
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|stream
init|=
name|fs
operator|.
name|create
argument_list|(
name|dataRegionPath
argument_list|)
decl_stmt|;
try|try
block|{
name|manifest
operator|.
name|writeTo
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|dataRegionPath
return|;
block|}
block|}
end_class

end_unit

