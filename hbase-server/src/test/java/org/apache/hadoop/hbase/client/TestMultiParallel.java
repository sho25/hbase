begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadPoolExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|KeyValueCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|FlakeyTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|FlakeyTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMultiParallel
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMultiParallel
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAMILY
init|=
literal|"family"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TEST_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"multi_test_table"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|BYTES_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ONE_ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xxx"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|KEYS
init|=
name|makeKeys
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|slaves
init|=
literal|5
decl_stmt|;
comment|// also used for testing HTable pool size
specifier|private
specifier|static
name|Connection
name|CONNECTION
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Uncomment the following lines if more verbosity is needed for
comment|// debugging (see HBASE-12285 for details).
comment|//((Log4JLogger)RpcServer.LOG).getLogger().setLevel(Level.ALL);
comment|//((Log4JLogger)RpcClient.LOG).getLogger().setLevel(Level.ALL);
comment|//((Log4JLogger)ScannerCallable.LOG).getLogger().setLevel(Level.ALL);
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|RPC_CODEC_CONF_KEY
argument_list|,
name|KeyValueCodec
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|LoadBalancer
operator|.
name|TABLES_ON_MASTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|LoadBalancer
operator|.
name|SYSTEM_TABLES_ON_MASTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
name|slaves
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|TEST_TABLE
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
decl_stmt|;
name|UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|CONNECTION
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|CONNECTION
operator|.
name|close
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"before"
argument_list|)
expr_stmt|;
if|if
condition|(
name|UTIL
operator|.
name|ensureSomeRegionServersAvailable
argument_list|(
name|slaves
argument_list|)
condition|)
block|{
comment|// Distribute regions
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|balance
argument_list|()
expr_stmt|;
comment|// Wait until completing balance
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|15
operator|*
literal|1000
argument_list|,
name|UTIL
operator|.
name|predicateNoRegionsInTransition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"before done"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|makeKeys
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|starterKeys
init|=
name|HBaseTestingUtility
operator|.
name|KEYS
decl_stmt|;
comment|// Create a "non-uniform" test set with the following characteristics:
comment|// a) Unequal number of keys per region
comment|// Don't use integer as a multiple, so that we have a number of keys that is
comment|// not a multiple of the number of regions
name|int
name|numKeys
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|float
operator|)
name|starterKeys
operator|.
name|length
operator|*
literal|10.33F
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numKeys
condition|;
name|i
operator|++
control|)
block|{
name|int
name|kIdx
init|=
name|i
operator|%
name|starterKeys
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|k
init|=
name|starterKeys
index|[
name|kIdx
index|]
decl_stmt|;
name|byte
index|[]
name|cp
init|=
operator|new
name|byte
index|[
name|k
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|k
argument_list|,
literal|0
argument_list|,
name|cp
argument_list|,
literal|0
argument_list|,
name|k
operator|.
name|length
argument_list|)
expr_stmt|;
name|cp
index|[
name|k
operator|.
name|length
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|i
operator|%
literal|256
argument_list|)
operator|.
name|byteValue
argument_list|()
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
comment|// b) Same duplicate keys (showing multiple Gets/Puts to the same row, which
comment|// should work)
comment|// c) keys are not in sorted order (within a region), to ensure that the
comment|// sorting code and index mapping doesn't break the functionality
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|int
name|kIdx
init|=
name|i
operator|%
name|starterKeys
operator|.
name|length
decl_stmt|;
name|byte
index|[]
name|k
init|=
name|starterKeys
index|[
name|kIdx
index|]
decl_stmt|;
name|byte
index|[]
name|cp
init|=
operator|new
name|byte
index|[
name|k
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|k
argument_list|,
literal|0
argument_list|,
name|cp
argument_list|,
literal|0
argument_list|,
name|k
operator|.
name|length
argument_list|)
expr_stmt|;
name|cp
index|[
name|k
operator|.
name|length
index|]
operator|=
operator|new
name|Integer
argument_list|(
name|i
operator|%
literal|256
argument_list|)
operator|.
name|byteValue
argument_list|()
expr_stmt|;
name|keys
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{}
block|}
argument_list|)
return|;
block|}
comment|/**    * This is for testing the active number of threads that were used while    * doing a batch operation. It inserts one row per region via the batch    * operation, and then checks the number of active threads.    * For HBASE-3553    * @throws IOException    * @throws InterruptedException    * @throws NoSuchFieldException    * @throws SecurityException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testActiveThreadsCount
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"hbase.htable.threads.coresize"
argument_list|,
name|slaves
operator|+
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|ThreadPoolExecutor
name|executor
init|=
name|HTable
operator|.
name|getDefaultExecutor
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|,
name|executor
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|constructPutRequests
argument_list|()
decl_stmt|;
comment|// creates a Put for every region
name|t
operator|.
name|batch
argument_list|(
name|puts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|ServerName
argument_list|>
name|regionservers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|TEST_TABLE
argument_list|)
init|)
block|{
for|for
control|(
name|Row
name|r
range|:
name|puts
control|)
block|{
name|HRegionLocation
name|location
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|regionservers
operator|.
name|add
argument_list|(
name|location
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|regionservers
operator|.
name|size
argument_list|()
argument_list|,
name|executor
operator|.
name|getLargestPoolSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testBatchWithGet
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testBatchWithGet"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
comment|// load test data
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|constructPutRequests
argument_list|()
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|puts
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// create a list of gets and run it
name|List
argument_list|<
name|Row
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|k
range|:
name|KEYS
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
name|Result
index|[]
name|multiRes
init|=
operator|new
name|Result
index|[
name|gets
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|gets
argument_list|,
name|multiRes
argument_list|)
expr_stmt|;
comment|// Same gets using individual call API
name|List
argument_list|<
name|Result
argument_list|>
name|singleRes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
name|get
range|:
name|gets
control|)
block|{
name|singleRes
operator|.
name|add
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|(
name|Get
operator|)
name|get
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Compare results
name|Assert
operator|.
name|assertEquals
argument_list|(
name|singleRes
operator|.
name|size
argument_list|()
argument_list|,
name|multiRes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|singleRes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|singleRes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|containsColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|singleKvs
init|=
name|singleRes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|Cell
index|[]
name|multiKvs
init|=
name|multiRes
index|[
name|i
index|]
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|singleKvs
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|singleKvs
index|[
name|j
index|]
argument_list|,
name|multiKvs
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|singleKvs
index|[
name|j
index|]
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|multiKvs
index|[
name|j
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBadFam
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testBadFam"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bad_family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// row1 and row2 should be in the same region.
name|Object
index|[]
name|r
init|=
operator|new
name|Object
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
try|try
block|{
name|table
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ex
argument_list|)
expr_stmt|;
comment|// good!
name|assertFalse
argument_list|(
name|ex
operator|.
name|mayHaveClusterIssues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
index|[
literal|0
index|]
operator|instanceof
name|Throwable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
index|[
literal|1
index|]
operator|instanceof
name|Result
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testFlushCommitsNoAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testFlushCommitsNoAbort"
argument_list|)
expr_stmt|;
name|doTestFlushCommits
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Only run one Multi test with a forced RegionServer abort. Otherwise, the    * unit tests will take an unnecessarily long time to run.    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|360000
argument_list|)
specifier|public
name|void
name|testFlushCommitsWithAbort
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testFlushCommitsWithAbort"
argument_list|)
expr_stmt|;
name|doTestFlushCommits
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set table auto flush to false and test flushing commits    * @param doAbort true if abort one regionserver in the testing    * @throws Exception    */
specifier|private
name|void
name|doTestFlushCommits
parameter_list|(
name|boolean
name|doAbort
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Load the data
name|LOG
operator|.
name|info
argument_list|(
literal|"get new table"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"constructPutRequests"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|constructPutRequests
argument_list|()
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"puts"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|liveRScount
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|liveRScount
operator|>
literal|0
assert|;
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|liveRS
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|doAbort
condition|)
block|{
name|liveRS
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"Aborting for tests"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"doTestFlushCommits"
argument_list|)
argument_list|)
expr_stmt|;
comment|// If we wait for no regions being online after we abort the server, we
comment|// could ensure the master has re-assigned the regions on killed server
comment|// after writing successfully. It means the server we aborted is dead
comment|// and detected by matser
while|while
condition|(
name|liveRS
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getNumberOfOnlineRegions
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// try putting more keys after the abort. same key/qual... just validating
comment|// no exceptions thrown
name|puts
operator|=
name|constructPutRequests
argument_list|()
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"validating loaded data"
argument_list|)
expr_stmt|;
name|validateLoadedData
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Validate server and region count
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|>
name|liveRSs
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|t
range|:
name|liveRSs
control|)
block|{
name|count
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Count="
operator|+
name|count
operator|+
literal|", Alive="
operator|+
name|t
operator|.
name|getRegionServer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Count="
operator|+
name|count
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Server count="
operator|+
name|count
operator|+
literal|", abort="
operator|+
name|doAbort
argument_list|,
operator|(
name|doAbort
condition|?
operator|(
name|liveRScount
operator|-
literal|1
operator|)
else|:
name|liveRScount
operator|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|doAbort
condition|)
block|{
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|waitOnRegionServer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|15
operator|*
literal|1000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Master is also a regionserver, so the count is liveRScount
return|return
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServersSize
argument_list|()
operator|==
name|liveRScount
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|15
operator|*
literal|1000
argument_list|,
name|UTIL
operator|.
name|predicateNoRegionsInTransition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"done"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testBatchWithPut
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testBatchWithPut"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|CONNECTION
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
comment|// put multiple rows using a batch
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|constructPutRequests
argument_list|()
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|puts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|puts
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|validateSizeAndEmpty
argument_list|(
name|results
argument_list|,
name|KEYS
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
literal|true
condition|)
block|{
name|int
name|liveRScount
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
name|liveRScount
operator|>
literal|0
assert|;
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|liveRS
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|liveRS
operator|.
name|getRegionServer
argument_list|()
operator|.
name|abort
argument_list|(
literal|"Aborting for tests"
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"testBatchWithPut"
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|=
name|constructPutRequests
argument_list|()
expr_stmt|;
try|try
block|{
name|results
operator|=
operator|new
name|Object
index|[
name|puts
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|puts
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|ree
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|ree
operator|.
name|getExhaustiveDescription
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
name|ree
throw|;
block|}
name|validateSizeAndEmpty
argument_list|(
name|results
argument_list|,
name|KEYS
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|validateLoadedData
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testBatchWithDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testBatchWithDelete"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
comment|// Load some data
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|constructPutRequests
argument_list|()
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|puts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|puts
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|validateSizeAndEmpty
argument_list|(
name|results
argument_list|,
name|KEYS
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Deletes
name|List
argument_list|<
name|Row
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|KEYS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|KEYS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|BYTES_FAMILY
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|results
operator|=
operator|new
name|Object
index|[
name|deletes
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|deletes
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|validateSizeAndEmpty
argument_list|(
name|results
argument_list|,
name|KEYS
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Get to make sure ...
for|for
control|(
name|byte
index|[]
name|k
range|:
name|KEYS
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testHTableDeleteWithList
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testHTableDeleteWithList"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
comment|// Load some data
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|constructPutRequests
argument_list|()
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|puts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|puts
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|validateSizeAndEmpty
argument_list|(
name|results
argument_list|,
name|KEYS
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Deletes
name|ArrayList
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|KEYS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|KEYS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|BYTES_FAMILY
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|deletes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get to make sure ...
for|for
control|(
name|byte
index|[]
name|k
range|:
name|KEYS
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testBatchWithManyColsInOneRowGetAndPut
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testBatchWithManyColsInOneRowGetAndPut"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ONE_ROW
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
operator|+
name|i
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|puts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|puts
argument_list|,
name|results
argument_list|)
expr_stmt|;
comment|// validate
name|validateSizeAndEmpty
argument_list|(
name|results
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// get the data back and validate that it is correct
name|List
argument_list|<
name|Row
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ONE_ROW
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
operator|+
name|i
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|multiRes
init|=
operator|new
name|Object
index|[
name|gets
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|gets
argument_list|,
name|multiRes
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
name|r
range|:
name|multiRes
control|)
block|{
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
operator|+
name|idx
argument_list|)
decl_stmt|;
name|validateResult
argument_list|(
name|r
argument_list|,
name|qual
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testBatchWithIncrementAndAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testBatchWithIncrementAndAppend"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|QUAL1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|QUAL2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|QUAL3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual3"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|QUAL4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual4"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ONE_ROW
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ONE_ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUAL1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUAL2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ONE_ROW
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUAL2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUAL3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|ONE_ROW
argument_list|)
decl_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUAL1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUAL4
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|Object
index|[]
name|multiRes
init|=
operator|new
name|Object
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
name|multiRes
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|multiRes
index|[
literal|1
index|]
argument_list|,
name|QUAL1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|multiRes
index|[
literal|1
index|]
argument_list|,
name|QUAL4
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xyz"
argument_list|)
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|multiRes
index|[
literal|0
index|]
argument_list|,
name|QUAL2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|multiRes
index|[
literal|0
index|]
argument_list|,
name|QUAL3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testNonceCollision
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testNonceCollision"
argument_list|)
expr_stmt|;
specifier|final
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ONE_ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Replace nonce manager with the one that returns each nonce twice.
name|NonceGenerator
name|cnm
init|=
operator|new
name|NonceGenerator
argument_list|()
block|{
specifier|private
specifier|final
name|PerClientRandomNonceGenerator
name|delegate
init|=
name|PerClientRandomNonceGenerator
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|private
name|long
name|lastNonce
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|synchronized
name|long
name|newNonce
parameter_list|()
block|{
name|long
name|nonce
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|lastNonce
operator|==
operator|-
literal|1
condition|)
block|{
name|lastNonce
operator|=
name|nonce
operator|=
name|delegate
operator|.
name|newNonce
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nonce
operator|=
name|lastNonce
expr_stmt|;
name|lastNonce
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
return|return
name|nonce
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getNonceGroup
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getNonceGroup
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|NonceGenerator
name|oldCnm
init|=
name|ConnectionUtils
operator|.
name|injectNonceGeneratorForTesting
argument_list|(
operator|(
name|ClusterConnection
operator|)
name|connection
argument_list|,
name|cnm
argument_list|)
decl_stmt|;
comment|// First test sequential requests.
try|try
block|{
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ONE_ROW
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|table
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
comment|// duplicate increment
name|inc
operator|=
operator|new
name|Increment
argument_list|(
name|ONE_ROW
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
decl_stmt|;
name|validateResult
argument_list|(
name|result
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ONE_ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|result
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now run a bunch of requests in parallel, exactly half should succeed.
name|int
name|numRequests
init|=
literal|40
decl_stmt|;
specifier|final
name|CountDownLatch
name|startedLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numRequests
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|startLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|doneLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numRequests
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRequests
condition|;
operator|++
name|i
control|)
block|{
name|Runnable
name|r
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Table
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Not expected"
argument_list|)
expr_stmt|;
block|}
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|ONE_ROW
argument_list|)
decl_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|startedLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
try|try
block|{
name|startLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Not expected"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|table
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioEx
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Not expected"
argument_list|)
expr_stmt|;
block|}
name|doneLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
operator|new
name|Thread
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|startedLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Wait until all threads are ready...
name|startLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// ...and unleash the herd!
name|doneLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// Now verify
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ONE_ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|result
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|numRequests
operator|/
literal|2
operator|)
operator|+
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|ConnectionImplementation
operator|.
name|injectNonceGeneratorForTesting
argument_list|(
operator|(
name|ClusterConnection
operator|)
name|connection
argument_list|,
name|oldCnm
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testBatchWithMixedActions
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"test=testBatchWithMixedActions"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
comment|// Load some data to start
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
name|constructPutRequests
argument_list|()
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|puts
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|puts
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|validateSizeAndEmpty
argument_list|(
name|results
argument_list|,
name|KEYS
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Batch: get, get, put(new col), delete, get, get of put, get of deleted,
comment|// put
name|List
argument_list|<
name|Row
argument_list|>
name|actions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|qual2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"putvalue2"
argument_list|)
decl_stmt|;
comment|// 0 get
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|KEYS
index|[
literal|10
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// 1 get
name|get
operator|=
operator|new
name|Get
argument_list|(
name|KEYS
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// 2 put of new column
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|KEYS
index|[
literal|10
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual2
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// 3 delete
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|KEYS
index|[
literal|20
index|]
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|BYTES_FAMILY
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// 4 get
name|get
operator|=
operator|new
name|Get
argument_list|(
name|KEYS
index|[
literal|30
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// There used to be a 'get' of a previous put here, but removed
comment|// since this API really cannot guarantee order in terms of mixed
comment|// get/puts.
comment|// 5 put of new column
name|put
operator|=
operator|new
name|Put
argument_list|(
name|KEYS
index|[
literal|40
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual2
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// 6 RowMutations
name|RowMutations
name|rm
init|=
operator|new
name|RowMutations
argument_list|(
name|KEYS
index|[
literal|50
index|]
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|KEYS
index|[
literal|50
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual2
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|rm
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|byte
index|[]
name|qual3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"putvalue3"
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|KEYS
index|[
literal|50
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual3
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|rm
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|rm
argument_list|)
expr_stmt|;
comment|// 7 Add another Get to the mixed sequence after RowMutations
name|get
operator|=
operator|new
name|Get
argument_list|(
name|KEYS
index|[
literal|10
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|results
operator|=
operator|new
name|Object
index|[
name|actions
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
name|results
argument_list|)
expr_stmt|;
comment|// Validation
name|validateResult
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|results
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|validateEmpty
argument_list|(
name|results
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|results
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|validateEmpty
argument_list|(
name|results
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|validateEmpty
argument_list|(
name|results
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|results
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// validate last put, externally from the batch
name|get
operator|=
operator|new
name|Get
argument_list|(
name|KEYS
index|[
literal|40
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual2
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|validateResult
argument_list|(
name|r
argument_list|,
name|qual2
argument_list|,
name|val2
argument_list|)
expr_stmt|;
comment|// validate last RowMutations, externally from the batch
name|get
operator|=
operator|new
name|Get
argument_list|(
name|KEYS
index|[
literal|50
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual2
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|r
argument_list|,
name|qual2
argument_list|,
name|val2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|KEYS
index|[
literal|50
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual3
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|validateResult
argument_list|(
name|r
argument_list|,
name|qual3
argument_list|,
name|val3
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// // Helper methods ////
specifier|private
name|void
name|validateResult
parameter_list|(
name|Object
name|r
parameter_list|)
block|{
name|validateResult
argument_list|(
name|r
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateResult
parameter_list|(
name|Object
name|r1
parameter_list|,
name|byte
index|[]
name|qual
parameter_list|,
name|byte
index|[]
name|val
parameter_list|)
block|{
name|Result
name|r
init|=
operator|(
name|Result
operator|)
name|r1
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|containsColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|value
init|=
name|r
operator|.
name|getValue
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|qual
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|Bytes
operator|.
name|compareTo
argument_list|(
name|val
argument_list|,
name|value
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Expected ["
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|val
argument_list|)
operator|+
literal|"] but got ["
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|value
argument_list|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Put
argument_list|>
name|constructPutRequests
parameter_list|()
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|k
range|:
name|KEYS
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
return|return
name|puts
return|;
block|}
specifier|private
name|void
name|validateLoadedData
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the data back and validate that it is correct
name|LOG
operator|.
name|info
argument_list|(
literal|"Validating data on "
operator|+
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|k
range|:
name|KEYS
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|k
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
name|int
name|retryNum
init|=
literal|10
decl_stmt|;
name|Result
index|[]
name|results
init|=
literal|null
decl_stmt|;
do|do
block|{
name|results
operator|=
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|boolean
name|finished
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|finished
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|finished
condition|)
block|{
break|break;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{       }
name|retryNum
operator|--
expr_stmt|;
block|}
do|while
condition|(
name|retryNum
operator|>
literal|0
condition|)
do|;
if|if
condition|(
name|retryNum
operator|==
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"Timeout for validate data"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|results
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|results
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|r
operator|.
name|containsColumn
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|BYTES_FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Validating data on "
operator|+
name|table
operator|+
literal|" successfully!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|validateEmpty
parameter_list|(
name|Object
name|r1
parameter_list|)
block|{
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|r1
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateSizeAndEmpty
parameter_list|(
name|Object
index|[]
name|results
parameter_list|,
name|int
name|expectedSize
parameter_list|)
block|{
comment|// Validate got back the same number of Result objects, all empty
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|result
range|:
name|results
control|)
block|{
name|validateEmpty
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

