begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestDataBlockEncoding
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetDataBlockEncoder
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|DataBlockEncoding
name|algo
range|:
name|DataBlockEncoding
operator|.
name|values
argument_list|()
control|)
block|{
name|DataBlockEncoder
name|encoder
init|=
name|DataBlockEncoding
operator|.
name|getDataBlockEncoderById
argument_list|(
name|algo
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|algo
operator|.
name|getId
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|DataBlockEncoding
operator|.
name|isCorrectEncoder
argument_list|(
name|encoder
argument_list|,
name|algo
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|DataBlockEncoding
operator|.
name|getDataBlockEncoderById
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Illegal encoderId, should get IllegalArgumentException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{     }
try|try
block|{
name|DataBlockEncoding
operator|.
name|getDataBlockEncoderById
argument_list|(
name|Byte
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// fail because idArray[Byte.MAX_VALUE] = null
name|fail
argument_list|(
literal|"Illegal encoderId, should get IllegalArgumentException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ie
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

