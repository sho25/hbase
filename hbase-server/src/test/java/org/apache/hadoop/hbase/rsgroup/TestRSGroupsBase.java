begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|TestRSGroupsBase
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRSGroupsBase
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//shared
specifier|protected
specifier|final
specifier|static
name|String
name|groupPrefix
init|=
literal|"Group"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|tablePrefix
init|=
literal|"Group"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|//shared, cluster type specific
specifier|protected
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|protected
specifier|static
name|Admin
name|admin
decl_stmt|;
specifier|protected
specifier|static
name|HBaseCluster
name|cluster
decl_stmt|;
specifier|protected
specifier|static
name|RSGroupAdminClient
name|rsGroupAdmin
decl_stmt|;
specifier|protected
specifier|static
name|HMaster
name|master
decl_stmt|;
specifier|protected
name|boolean
name|INIT
init|=
literal|false
decl_stmt|;
specifier|protected
specifier|static
name|RSGroupAdminEndpoint
name|rsGroupAdminEndpoint
decl_stmt|;
specifier|protected
specifier|static
name|CPMasterObserver
name|observer
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|long
name|WAIT_TIMEOUT
init|=
literal|60000
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|NUM_SLAVES_BASE
init|=
literal|4
decl_stmt|;
comment|//number of slaves for the smallest cluster
specifier|public
specifier|static
name|int
name|NUM_DEAD_SERVERS
init|=
literal|0
decl_stmt|;
comment|// Per test variables
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|protected
name|TableName
name|tableName
decl_stmt|;
specifier|public
specifier|static
name|void
name|setUpTestBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.tableSkewCost"
argument_list|,
literal|6000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|RSGroupBasedLoadBalancer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|RSGroupAdminEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
name|NUM_SLAVES_BASE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|SnapshotManager
operator|.
name|HBASE_SNAPSHOT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.rpc.timeout"
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_SLAVES_BASE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
expr_stmt|;
name|master
operator|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
comment|//wait for balancer to come online
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|master
operator|.
name|isInitialized
argument_list|()
operator|&&
operator|(
operator|(
name|RSGroupBasedLoadBalancer
operator|)
name|master
operator|.
name|getLoadBalancer
argument_list|()
operator|)
operator|.
name|isOnline
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|admin
operator|.
name|balancerSwitch
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|=
operator|new
name|VerifyingRSGroupAdminClient
argument_list|(
operator|new
name|RSGroupAdminClient
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|)
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|MasterCoprocessorHost
name|host
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|observer
operator|=
operator|(
name|CPMasterObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdminEndpoint
operator|=
operator|(
name|RSGroupAdminEndpoint
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|RSGroupAdminEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setUpBeforeMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tablePrefix
operator|+
literal|"_"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|INIT
condition|)
block|{
name|INIT
operator|=
literal|true
expr_stmt|;
name|tearDownAfterMethod
argument_list|()
expr_stmt|;
block|}
name|observer
operator|.
name|resetFlags
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|tearDownAfterMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteTableIfNecessary
argument_list|()
expr_stmt|;
name|deleteNamespaceIfNecessary
argument_list|()
expr_stmt|;
name|deleteGroups
argument_list|()
expr_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|admin
operator|.
name|listDecommissionedRegionServers
argument_list|()
control|)
block|{
name|admin
operator|.
name|recommissionRegionServer
argument_list|(
name|sn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|admin
operator|.
name|listDecommissionedRegionServers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|missing
init|=
name|NUM_SLAVES_BASE
operator|-
name|getNumServers
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Restoring servers: "
operator|+
name|missing
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|missing
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|MiniHBaseCluster
operator|)
name|cluster
operator|)
operator|.
name|startRegionServer
argument_list|()
expr_stmt|;
block|}
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
literal|"master"
argument_list|)
expr_stmt|;
name|ServerName
name|masterServerName
init|=
operator|(
operator|(
name|MiniHBaseCluster
operator|)
name|cluster
operator|)
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|masterServerName
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
literal|"master"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got this on setup, FYI"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|observer
operator|.
name|preMoveServersCalled
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for cleanup to finish "
operator|+
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
argument_list|)
expr_stmt|;
comment|//Might be greater since moving servers back to default
comment|//is after starting a server
return|return
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|NUM_SLAVES_BASE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|RSGroupInfo
name|addGroup
parameter_list|(
name|String
name|groupName
parameter_list|,
name|int
name|serverCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|RSGroupInfo
name|defaultInfo
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Address
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Address
name|server
range|:
name|defaultInfo
operator|.
name|getServers
argument_list|()
control|)
block|{
if|if
condition|(
name|set
operator|.
name|size
argument_list|()
operator|==
name|serverCount
condition|)
block|{
break|break;
block|}
name|set
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|set
argument_list|,
name|groupName
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|result
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|removeGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|RSGroupInfo
name|groupInfo
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|groupInfo
operator|.
name|getTables
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|groupInfo
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deleteTableIfNecessary
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|TableDescriptor
name|desc
range|:
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|listTableDescriptors
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|tablePrefix
operator|+
literal|".*"
argument_list|)
argument_list|)
control|)
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|deleteNamespaceIfNecessary
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|NamespaceDescriptor
name|desc
range|:
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|listNamespaceDescriptors
argument_list|()
control|)
block|{
if|if
condition|(
name|desc
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|tablePrefix
argument_list|)
condition|)
block|{
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|deleteGroups
parameter_list|()
throws|throws
name|IOException
block|{
name|RSGroupAdminClient
name|groupAdmin
init|=
operator|new
name|RSGroupAdminClient
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RSGroupInfo
name|group
range|:
name|groupAdmin
operator|.
name|listRSGroups
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|group
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
condition|)
block|{
name|groupAdmin
operator|.
name|moveTables
argument_list|(
name|group
operator|.
name|getTables
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|groupAdmin
operator|.
name|moveServers
argument_list|(
name|group
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|groupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getTableRegionMap
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|tableServerRegionMap
init|=
name|getTableServerRegionMap
argument_list|()
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableServerRegionMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
operator|new
name|LinkedList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|subset
range|:
name|tableServerRegionMap
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|map
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|addAll
argument_list|(
name|subset
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|protected
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|getTableServerRegionMap
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|map
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|ClusterMetrics
name|metrics
init|=
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterMetrics
operator|.
name|Option
operator|.
name|SERVERS_NAME
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|metrics
operator|.
name|getServersName
argument_list|()
control|)
block|{
for|for
control|(
name|RegionInfo
name|region
range|:
name|admin
operator|.
name|getRegions
argument_list|(
name|serverName
argument_list|)
control|)
block|{
name|TableName
name|tableName
init|=
name|region
operator|.
name|getTable
argument_list|()
decl_stmt|;
name|map
operator|.
name|computeIfAbsent
argument_list|(
name|tableName
argument_list|,
name|k
lambda|->
operator|new
name|TreeMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|computeIfAbsent
argument_list|(
name|serverName
argument_list|,
name|k
lambda|->
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
comment|// return the real number of region servers, excluding the master embedded region server in 2.0+
specifier|protected
name|int
name|getNumServers
parameter_list|()
throws|throws
name|IOException
block|{
name|ClusterMetrics
name|status
init|=
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|MASTER
argument_list|,
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
decl_stmt|;
name|ServerName
name|masterName
init|=
name|status
operator|.
name|getMasterName
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|status
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|sn
operator|.
name|equals
argument_list|(
name|masterName
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|protected
name|String
name|getGroupName
parameter_list|(
name|String
name|baseName
parameter_list|)
block|{
return|return
name|groupPrefix
operator|+
literal|"_"
operator|+
name|baseName
operator|+
literal|"_"
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
return|;
block|}
comment|/**    * The server name in group does not contain the start code, this method will find out the start    * code and construct the ServerName object.    */
specifier|protected
name|ServerName
name|getServerName
parameter_list|(
name|Address
name|addr
parameter_list|)
block|{
return|return
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|t
lambda|->
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|sn
lambda|->
name|sn
operator|.
name|getAddress
argument_list|()
operator|.
name|equals
argument_list|(
name|addr
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|CPMasterObserver
implements|implements
name|MasterCoprocessor
implements|,
name|MasterObserver
block|{
name|boolean
name|preBalanceRSGroupCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|postBalanceRSGroupCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|preMoveServersCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|postMoveServersCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|preMoveTablesCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|postMoveTablesCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|preAddRSGroupCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|postAddRSGroupCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|preRemoveRSGroupCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|postRemoveRSGroupCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|preRemoveServersCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|postRemoveServersCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|preMoveServersAndTables
init|=
literal|false
decl_stmt|;
name|boolean
name|postMoveServersAndTables
init|=
literal|false
decl_stmt|;
name|boolean
name|preGetRSGroupInfoCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|postGetRSGroupInfoCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|preGetRSGroupInfoOfTableCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|postGetRSGroupInfoOfTableCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|preListRSGroupsCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|postListRSGroupsCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|preGetRSGroupInfoOfServerCalled
init|=
literal|false
decl_stmt|;
name|boolean
name|postGetRSGroupInfoOfServerCalled
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|resetFlags
parameter_list|()
block|{
name|preBalanceRSGroupCalled
operator|=
literal|false
expr_stmt|;
name|postBalanceRSGroupCalled
operator|=
literal|false
expr_stmt|;
name|preMoveServersCalled
operator|=
literal|false
expr_stmt|;
name|postMoveServersCalled
operator|=
literal|false
expr_stmt|;
name|preMoveTablesCalled
operator|=
literal|false
expr_stmt|;
name|postMoveTablesCalled
operator|=
literal|false
expr_stmt|;
name|preAddRSGroupCalled
operator|=
literal|false
expr_stmt|;
name|postAddRSGroupCalled
operator|=
literal|false
expr_stmt|;
name|preRemoveRSGroupCalled
operator|=
literal|false
expr_stmt|;
name|postRemoveRSGroupCalled
operator|=
literal|false
expr_stmt|;
name|preRemoveServersCalled
operator|=
literal|false
expr_stmt|;
name|postRemoveServersCalled
operator|=
literal|false
expr_stmt|;
name|preMoveServersAndTables
operator|=
literal|false
expr_stmt|;
name|postMoveServersAndTables
operator|=
literal|false
expr_stmt|;
name|preGetRSGroupInfoCalled
operator|=
literal|false
expr_stmt|;
name|postGetRSGroupInfoCalled
operator|=
literal|false
expr_stmt|;
name|preGetRSGroupInfoOfTableCalled
operator|=
literal|false
expr_stmt|;
name|postGetRSGroupInfoOfTableCalled
operator|=
literal|false
expr_stmt|;
name|preListRSGroupsCalled
operator|=
literal|false
expr_stmt|;
name|postListRSGroupsCalled
operator|=
literal|false
expr_stmt|;
name|preGetRSGroupInfoOfServerCalled
operator|=
literal|false
expr_stmt|;
name|postGetRSGroupInfoOfServerCalled
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|MasterObserver
argument_list|>
name|getMasterObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preMoveServersAndTables
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|preMoveServersAndTables
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postMoveServersAndTables
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|postMoveServersAndTables
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preRemoveServers
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoveServersCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postRemoveServers
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|)
throws|throws
name|IOException
block|{
name|postRemoveServersCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preRemoveRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|preRemoveRSGroupCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postRemoveRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|postRemoveRSGroupCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preAddRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|preAddRSGroupCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postAddRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|postAddRSGroupCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preMoveTables
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|preMoveTablesCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postMoveTables
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|postMoveTablesCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preMoveServers
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|preMoveServersCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postMoveServers
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|Address
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{
name|postMoveServersCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preBalanceRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|preBalanceRSGroupCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postBalanceRSGroup
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|groupName
parameter_list|,
name|boolean
name|balancerRan
parameter_list|)
throws|throws
name|IOException
block|{
name|postBalanceRSGroupCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetRSGroupInfo
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|preGetRSGroupInfoCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postGetRSGroupInfo
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{
name|postGetRSGroupInfoCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetRSGroupInfoOfTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|preGetRSGroupInfoOfTableCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postGetRSGroupInfoOfTable
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|postGetRSGroupInfoOfTableCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preListRSGroups
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|preListRSGroupsCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postListRSGroups
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|postListRSGroupsCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetRSGroupInfoOfServer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|Address
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|preGetRSGroupInfoOfServerCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postGetRSGroupInfoOfServer
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|Address
name|server
parameter_list|)
throws|throws
name|IOException
block|{
name|postGetRSGroupInfoOfServerCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

