begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncRegionAdminApiWithRegionReplicas
extends|extends
name|TestAsyncAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAsyncRegionAdminApiWithRegionReplicas
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|META_REPLICAS_NUM
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|TestAsyncAdminBase
operator|.
name|setUpBeforeClass
argument_list|()
expr_stmt|;
try|try
init|(
name|AsyncRegistry
name|registry
init|=
name|AsyncRegistryFactory
operator|.
name|getRegistry
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|RegionReplicaTestHelper
operator|.
name|waitUntilAllMetaReplicasHavingRegionLocation
argument_list|(
name|registry
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testMoveNonDefaultReplica
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|AsyncTableRegionLocator
name|locator
init|=
name|ASYNC_CONN
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locs
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// try region name
name|admin
operator|.
name|move
argument_list|(
name|locs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
name|locs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// try encoded region name
name|admin
operator|.
name|move
argument_list|(
name|locs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
name|locs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveNonDefaultReplica
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|testMoveNonDefaultReplica
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|testMoveNonDefaultReplica
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitNonDefaultReplica
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locs
init|=
name|ASYNC_CONN
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|splitRegion
argument_list|(
name|locs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|admin
operator|.
name|splitRegion
argument_list|(
name|locs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMergeNonDefaultReplicas
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|IOException
block|{
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
block|}
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
literal|3
argument_list|,
name|splitRows
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|locs
init|=
name|ASYNC_CONN
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|locs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|replicaId2RegionInfo
init|=
name|locs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|HRegionLocation
operator|::
name|getRegion
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|groupingBy
argument_list|(
name|RegionInfo
operator|::
name|getReplicaId
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|replicaOnes
init|=
name|replicaId2RegionInfo
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|mergeRegions
argument_list|(
name|replicaOnes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|replicaOnes
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|replicaTwos
init|=
name|replicaId2RegionInfo
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|mergeRegions
argument_list|(
name|replicaTwos
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|replicaTwos
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

