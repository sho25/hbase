begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
operator|.
name|RSGroupAdminServer
operator|.
name|DEFAULT_MAX_RETRY_VALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
operator|.
name|sleep
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|RegionStateNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|net
operator|.
name|Address
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRSGroupsAdmin2
extends|extends
name|TestRSGroupsBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRSGroupsAdmin2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRSGroupsAdmin2
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpTestBeforeClass
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDownAfterClass
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|beforeMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpBeforeMethod
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|afterMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDownAfterMethod
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionMove
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
comment|// All the regions created below will be assigned to the default group.
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|familyNameBytes
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|6
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// get target region to move
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|assignMap
init|=
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|String
name|targetRegion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|assignMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|targetRegion
operator|=
name|assignMap
operator|.
name|get
argument_list|(
name|server
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|assignMap
operator|.
name|get
argument_list|(
name|server
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|targetRegion
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
comment|// get server which is not a member of new group
name|ServerName
name|tmpTargetServer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|newGroup
operator|.
name|containsServer
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|tmpTargetServer
operator|=
name|server
expr_stmt|;
break|break;
block|}
block|}
specifier|final
name|ServerName
name|targetServer
init|=
name|tmpTargetServer
decl_stmt|;
comment|// move target server to group
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|admin
operator|.
name|getRegions
argument_list|(
name|targetServer
argument_list|)
operator|.
name|size
argument_list|()
operator|<=
literal|0
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Lets move this region to the new group.
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|targetRegion
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|targetServer
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|!=
literal|null
operator|&&
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|&&
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|REGIONS_IN_TRANSITION
argument_list|)
argument_list|)
operator|.
name|getRegionStatesInTransition
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// verify that targetServer didn't open it
for|for
control|(
name|RegionInfo
name|region
range|:
name|admin
operator|.
name|getRegions
argument_list|(
name|targetServer
argument_list|)
control|)
block|{
if|if
condition|(
name|targetRegion
operator|.
name|equals
argument_list|(
name|region
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Target server opened region"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionServerMove
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|initNumGroups
init|=
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|RSGroupInfo
name|appInfo
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|adminInfo
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|dInfo
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|initNumGroups
operator|+
literal|2
argument_list|,
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|adminInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|appInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getNumServers
argument_list|()
operator|-
literal|2
argument_list|,
name|dInfo
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|appInfo
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|appInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|adminInfo
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|adminInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|initNumGroups
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveServers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create groups and assign servers
name|addGroup
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|barGroup
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
name|RSGroupInfo
name|fooGroup
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|barGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test fail bogus server move
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Address
operator|.
name|fromString
argument_list|(
literal|"foo:9999"
argument_list|)
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Bogus servers shouldn't have been successfully moved."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|exp
init|=
literal|"Source RSGroup for server foo:9999 does not exist."
decl_stmt|;
name|String
name|msg
init|=
literal|"Expected '"
operator|+
name|exp
operator|+
literal|"' in exception message: "
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test success case
name|LOG
operator|.
name|info
argument_list|(
literal|"moving servers "
operator|+
name|barGroup
operator|.
name|getServers
argument_list|()
operator|+
literal|" to group foo"
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|barGroup
operator|.
name|getServers
argument_list|()
argument_list|,
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|barGroup
operator|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|fooGroup
operator|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|barGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"moving servers "
operator|+
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|+
literal|" to group default"
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|fooGroup
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getNumServers
argument_list|()
operator|==
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fooGroup
operator|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test group removal
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove group "
operator|+
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|barGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove group "
operator|+
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveServers
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testRemoveServers"
argument_list|)
expr_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Address
argument_list|>
name|iterator
init|=
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|ServerName
name|targetServer
init|=
name|getServerName
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
comment|// remove online servers
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Online servers shouldn't have been successfully removed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|exp
init|=
literal|"Server "
operator|+
name|targetServer
operator|.
name|getAddress
argument_list|()
operator|+
literal|" is an online server, not allowed to remove."
decl_stmt|;
name|String
name|msg
init|=
literal|"Expected '"
operator|+
name|exp
operator|+
literal|"' in exception message: "
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove dead servers
name|NUM_DEAD_SERVERS
operator|=
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getDeadServerNames
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
try|try
block|{
comment|// stopping may cause an exception
comment|// due to the connection loss
name|LOG
operator|.
name|info
argument_list|(
literal|"stopping server "
operator|+
name|targetServer
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|stopRegionServer
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|NUM_DEAD_SERVERS
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
comment|// wait for stopped regionserver to dead server list
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|areDeadServersInProgress
argument_list|()
operator|&&
name|cluster
operator|.
name|getClusterMetrics
argument_list|()
operator|.
name|getDeadServerNames
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|NUM_DEAD_SERVERS
return|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|rsGroupAdmin
operator|.
name|removeServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Dead servers shouldn't have been successfully removed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|exp
init|=
literal|"Server "
operator|+
name|targetServer
operator|.
name|getAddress
argument_list|()
operator|+
literal|" is on the dead servers list,"
operator|+
literal|" Maybe it will come back again, not allowed to remove."
decl_stmt|;
name|String
name|msg
init|=
literal|"Expected '"
operator|+
name|exp
operator|+
literal|"' in exception message: "
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove decommissioned servers
name|List
argument_list|<
name|ServerName
argument_list|>
name|serversToDecommission
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|targetServer
operator|=
name|getServerName
argument_list|(
name|iterator
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|containsKey
argument_list|(
name|targetServer
argument_list|)
argument_list|)
expr_stmt|;
name|serversToDecommission
operator|.
name|add
argument_list|(
name|targetServer
argument_list|)
expr_stmt|;
name|admin
operator|.
name|decommissionRegionServers
argument_list|(
name|serversToDecommission
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|admin
operator|.
name|listDecommissionedRegionServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Address
argument_list|>
name|newGroupServers
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|newGroupServers
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newGroupServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|preRemoveServersCalled
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|postRemoveServersCalled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveServersAndTables
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testMoveServersAndTables"
argument_list|)
expr_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// create table
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|familyNameBytes
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|5
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// get server which is not a member of new group
name|ServerName
name|targetServer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|newGroup
operator|.
name|containsServer
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
operator|&&
operator|!
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"master"
argument_list|)
operator|.
name|containsServer
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|)
block|{
name|targetServer
operator|=
name|server
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Print group info : "
operator|+
name|rsGroupAdmin
operator|.
name|listRSGroups
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|oldDefaultGroupServerSize
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|oldDefaultGroupTableSize
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// test fail bogus server move
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServersAndTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Address
operator|.
name|fromString
argument_list|(
literal|"foo:9999"
argument_list|)
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Bogus servers shouldn't have been successfully moved."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|String
name|exp
init|=
literal|"Source RSGroup for server foo:9999 does not exist."
decl_stmt|;
name|String
name|msg
init|=
literal|"Expected '"
operator|+
name|exp
operator|+
literal|"' in exception message: "
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|exp
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test move when src = dst
name|rsGroupAdmin
operator|.
name|moveServersAndTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
comment|// verify default group info
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDefaultGroupServerSize
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|oldDefaultGroupTableSize
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify new group info
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// get all region to move targetServer
name|List
argument_list|<
name|String
argument_list|>
name|regionList
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|region
range|:
name|regionList
control|)
block|{
comment|// Lets move this region to the targetServer
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|RegionInfo
operator|.
name|encodeRegionName
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|region
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|targetServer
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|!=
literal|null
operator|&&
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|&&
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|admin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|REGIONS_IN_TRANSITION
argument_list|)
argument_list|)
operator|.
name|getRegionStatesInTransition
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// verify that all region move to targetServer
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
name|targetServer
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// move targetServer and table to newGroup
name|LOG
operator|.
name|info
argument_list|(
literal|"moving server and table to newGroup"
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServersAndTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify group change
name|Assert
operator|.
name|assertEquals
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfoOfTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify servers' not exist in old group
name|Set
argument_list|<
name|Address
argument_list|>
name|defaultServers
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|defaultServers
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify servers' exist in new group
name|Set
argument_list|<
name|Address
argument_list|>
name|newGroupServers
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newGroupServers
operator|.
name|contains
argument_list|(
name|targetServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify tables' not exist in old group
name|Set
argument_list|<
name|TableName
argument_list|>
name|defaultTables
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|defaultTables
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify tables' exist in new group
name|Set
argument_list|<
name|TableName
argument_list|>
name|newGroupTables
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getTables
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newGroupTables
operator|.
name|contains
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify that all region still assgin on targetServer
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|getTableServerRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
name|targetServer
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|preMoveServersAndTables
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|observer
operator|.
name|postMoveServersAndTables
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveServersFromDefaultGroup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create groups and assign servers
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|fooGroup
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|RSGroupInfo
name|defaultGroup
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
decl_stmt|;
comment|// test remove all servers from default
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|defaultGroup
operator|.
name|getServers
argument_list|()
argument_list|,
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|RSGroupAdminServer
operator|.
name|KEEP_ONE_SERVER_IN_DEFAULT_ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|RSGroupAdminServer
operator|.
name|KEEP_ONE_SERVER_IN_DEFAULT_ERROR_MESSAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test success case, remove one server from default ,keep at least one server
if|if
condition|(
name|defaultGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Address
name|serverInDefaultGroup
init|=
name|defaultGroup
operator|.
name|getServers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"moving server "
operator|+
name|serverInDefaultGroup
operator|+
literal|" from group default to group "
operator|+
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|serverInDefaultGroup
argument_list|)
argument_list|,
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fooGroup
operator|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"moving servers "
operator|+
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|+
literal|" to group default"
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|fooGroup
operator|.
name|getServers
argument_list|()
argument_list|,
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getNumServers
argument_list|()
operator|==
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
argument_list|)
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fooGroup
operator|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fooGroup
operator|.
name|getServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test group removal
name|LOG
operator|.
name|info
argument_list|(
literal|"Remove group "
operator|+
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|removeRSGroup
argument_list|(
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|fooGroup
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailedMoveBeforeRetryExhaustedWhenMoveServer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|groupName
init|=
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|rsGroupAdmin
operator|.
name|addRSGroup
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|rsGroupAdmin
operator|.
name|getRSGroupInfo
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|RegionStateNode
argument_list|>
name|gotPair
init|=
name|createTableWithRegionSplitting
argument_list|(
name|newGroup
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// start thread to recover region state
specifier|final
name|ServerName
name|movedServer
init|=
name|gotPair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
specifier|final
name|RegionStateNode
name|rsn
init|=
name|gotPair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|changed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
name|recoverRegionStateThread
argument_list|(
name|movedServer
argument_list|,
name|server
lambda|->
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsOnServer
argument_list|(
name|movedServer
argument_list|)
argument_list|,
name|rsn
argument_list|,
name|changed
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// move target server to group
name|Thread
name|t2
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"thread2 start running, to move regions"
argument_list|)
expr_stmt|;
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|movedServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"move server error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
block|{
if|if
condition|(
name|changed
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsOnServer
argument_list|(
name|movedServer
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
operator|!
name|rsn
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|movedServer
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailedMoveBeforeRetryExhaustedWhenMoveTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|RegionStateNode
argument_list|>
name|gotPair
init|=
name|createTableWithRegionSplitting
argument_list|(
name|newGroup
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// move table to group
name|Thread
name|t2
init|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"thread2 start running, to move regions"
argument_list|)
expr_stmt|;
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"move server error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// start thread to recover region state
specifier|final
name|ServerName
name|ss
init|=
name|gotPair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
specifier|final
name|RegionStateNode
name|rsn
init|=
name|gotPair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|changed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Thread
name|t1
init|=
name|recoverRegionStateThread
argument_list|(
name|ss
argument_list|,
name|server
lambda|->
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsOnServer
argument_list|(
name|ss
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|tableRegions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|regions
control|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|tableRegions
operator|.
name|add
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableRegions
return|;
block|}
argument_list|,
name|rsn
argument_list|,
name|changed
argument_list|)
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
block|{
if|if
condition|(
name|changed
operator|.
name|get
argument_list|()
condition|)
block|{
name|boolean
name|serverHasTableRegions
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsOnServer
argument_list|(
name|ss
argument_list|)
control|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|serverHasTableRegions
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
operator|!
name|serverHasTableRegions
operator|&&
operator|!
name|rsn
operator|.
name|getRegionLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|ss
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Thread
name|recoverRegionStateThread
parameter_list|(
name|T
name|owner
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|getRegions
parameter_list|,
name|RegionStateNode
name|rsn
parameter_list|,
name|AtomicBoolean
name|changed
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"thread1 start running, will recover region state"
argument_list|)
expr_stmt|;
name|long
name|current
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// wait until there is only left the region we changed state and recover its state.
comment|// wait time is set according to the number of max retries, all except failed regions will be
comment|// moved in one retry, and will sleep 1s until next retry.
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|current
operator|<=
name|DEFAULT_MAX_RETRY_VALUE
operator|*
literal|1000
condition|)
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|getRegions
operator|.
name|apply
argument_list|(
name|owner
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"server table region size is:{}"
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|regions
operator|.
name|size
argument_list|()
operator|>=
literal|1
assert|;
comment|// when there is exactly one region left, we can determine the move operation encountered
comment|// exception caused by the strange region state.
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|rsn
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|rsn
operator|.
name|setState
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"set region {} state OPEN"
argument_list|,
name|rsn
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|RegionStateNode
argument_list|>
name|createTableWithRegionSplitting
parameter_list|(
name|RSGroupInfo
name|rsGroupInfo
parameter_list|,
name|int
name|tableRegionCount
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
comment|// All the regions created below will be assigned to the default group.
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|familyNameBytes
argument_list|,
name|tableRegionCount
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
name|WAIT_TIMEOUT
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|regions
init|=
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getTableRegionMap
argument_list|()
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
name|tableRegionCount
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|randomlySetOneRegionStateToSplitting
argument_list|(
name|rsGroupInfo
argument_list|)
return|;
block|}
comment|/**    * Randomly choose a region to set state.    * @param newGroup target group    * @return source server of region, and region state    * @throws IOException if methods called throw    */
specifier|private
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|RegionStateNode
argument_list|>
name|randomlySetOneRegionStateToSplitting
parameter_list|(
name|RSGroupInfo
name|newGroup
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get target server to move, which should has more than one regions
comment|// randomly set a region state to SPLITTING to make move fail
return|return
name|randomlySetRegionState
argument_list|(
name|newGroup
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|SPLITTING
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|RegionStateNode
argument_list|>
name|randomlySetRegionState
parameter_list|(
name|RSGroupInfo
name|groupInfo
parameter_list|,
name|RegionState
operator|.
name|State
name|state
parameter_list|,
name|TableName
modifier|...
name|tableNames
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|tableNames
operator|.
name|length
operator|==
literal|1
operator|||
name|tableNames
operator|.
name|length
operator|==
literal|2
argument_list|,
literal|"only support one or two tables"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|>
name|tableServerRegionMap
init|=
name|getTableServerRegionMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|assignMap
init|=
name|tableServerRegionMap
operator|.
name|get
argument_list|(
name|tableNames
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableNames
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|assignMap2
init|=
name|tableServerRegionMap
operator|.
name|get
argument_list|(
name|tableNames
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|assignMap2
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
operator|!
name|assignMap
operator|.
name|containsKey
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|assignMap
operator|.
name|remove
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|String
name|toCorrectRegionName
init|=
literal|null
decl_stmt|;
name|ServerName
name|srcServer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerName
name|server
range|:
name|assignMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|toCorrectRegionName
operator|=
name|assignMap
operator|.
name|get
argument_list|(
name|server
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|1
operator|&&
operator|!
name|groupInfo
operator|.
name|containsServer
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
argument_list|)
condition|?
name|assignMap
operator|.
name|get
argument_list|(
name|server
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|toCorrectRegionName
operator|!=
literal|null
condition|)
block|{
name|srcServer
operator|=
name|server
expr_stmt|;
break|break;
block|}
block|}
assert|assert
name|srcServer
operator|!=
literal|null
assert|;
name|RegionInfo
name|toCorrectRegionInfo
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionInfo
argument_list|(
name|Bytes
operator|.
name|toBytesBinary
argument_list|(
name|toCorrectRegionName
argument_list|)
argument_list|)
decl_stmt|;
name|RegionStateNode
name|rsn
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionStateNode
argument_list|(
name|toCorrectRegionInfo
argument_list|)
decl_stmt|;
name|rsn
operator|.
name|setState
argument_list|(
name|state
argument_list|)
expr_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|srcServer
argument_list|,
name|rsn
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailedMoveTablesAndRepair
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This UT calls moveTables() twice to test the idempotency of it.
comment|// The first time, movement fails because a region is made in SPLITTING state
comment|// which will not be moved.
comment|// The second time, the region state is OPEN and check if all
comment|// regions on target group servers after the call.
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Iterator
name|iterator
init|=
name|newGroup
operator|.
name|getServers
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Address
name|newGroupServer1
init|=
operator|(
name|Address
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// create table
comment|// randomly set a region state to SPLITTING to make move abort
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|RegionStateNode
argument_list|>
name|gotPair
init|=
name|createTableWithRegionSplitting
argument_list|(
name|newGroup
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|8
argument_list|)
operator|+
literal|4
argument_list|)
decl_stmt|;
name|RegionStateNode
name|rsn
init|=
name|gotPair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
comment|// move table to newGroup and check regions
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should get IOException when retry exhausted but there still exists failed moved "
operator|+
literal|"regions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|gotPair
operator|.
name|getSecond
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getAssignedRegions
argument_list|()
control|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
operator|&&
name|regionInfo
operator|.
name|equals
argument_list|(
name|rsn
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
condition|)
block|{
name|assertNotEquals
argument_list|(
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|regionInfo
argument_list|)
operator|.
name|getAddress
argument_list|()
argument_list|,
name|newGroupServer1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// retry move table to newGroup and check if all regions are corrected
name|rsn
operator|.
name|setState
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getAssignedRegions
argument_list|()
control|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|regionInfo
argument_list|)
operator|.
name|getAddress
argument_list|()
argument_list|,
name|newGroupServer1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailedMoveServersAndRepair
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This UT calls moveServers() twice to test the idempotency of it.
comment|// The first time, movement fails because a region is made in SPLITTING state
comment|// which will not be moved.
comment|// The second time, the region state is OPEN and check if all
comment|// regions on target group servers after the call.
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// create table
comment|// randomly set a region state to SPLITTING to make move abort
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|RegionStateNode
argument_list|>
name|gotPair
init|=
name|createTableWithRegionSplitting
argument_list|(
name|newGroup
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|8
argument_list|)
operator|+
literal|4
argument_list|)
decl_stmt|;
name|RegionStateNode
name|rsn
init|=
name|gotPair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|ServerName
name|srcServer
init|=
name|rsn
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
comment|// move server to newGroup and check regions
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|srcServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should get IOException when retry exhausted but there still exists failed moved "
operator|+
literal|"regions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|gotPair
operator|.
name|getSecond
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getAssignedRegions
argument_list|()
control|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|tableName
argument_list|)
operator|&&
name|regionInfo
operator|.
name|equals
argument_list|(
name|rsn
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|regionInfo
argument_list|)
argument_list|,
name|srcServer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// retry move server to newGroup and check if all regions on srcServer was moved
name|rsn
operator|.
name|setState
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServers
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|srcServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsOnServer
argument_list|(
name|srcServer
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFailedMoveServersTablesAndRepair
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This UT calls moveTablesAndServers() twice to test the idempotency of it.
comment|// The first time, movement fails because a region is made in SPLITTING state
comment|// which will not be moved.
comment|// The second time, the region state is OPEN and check if all
comment|// regions on target group servers after the call.
specifier|final
name|RSGroupInfo
name|newGroup
init|=
name|addGroup
argument_list|(
name|getGroupName
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// create table
specifier|final
name|byte
index|[]
name|familyNameBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
name|TableName
name|table1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_1"
argument_list|)
decl_stmt|;
name|TableName
name|table2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_2"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|table1
argument_list|,
name|familyNameBytes
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
operator|+
literal|4
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|table2
argument_list|,
name|familyNameBytes
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
operator|+
literal|4
argument_list|)
expr_stmt|;
comment|// randomly set a region state to SPLITTING to make move abort
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|RegionStateNode
argument_list|>
name|gotPair
init|=
name|randomlySetRegionState
argument_list|(
name|newGroup
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|SPLITTING
argument_list|,
name|table1
argument_list|,
name|table2
argument_list|)
decl_stmt|;
name|RegionStateNode
name|rsn
init|=
name|gotPair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|ServerName
name|srcServer
init|=
name|rsn
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
comment|// move server and table to newGroup and check regions
try|try
block|{
name|rsGroupAdmin
operator|.
name|moveServersAndTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|srcServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|table2
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should get IOException when retry exhausted but there still exists failed moved "
operator|+
literal|"regions"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|gotPair
operator|.
name|getSecond
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getAssignedRegions
argument_list|()
control|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|table1
argument_list|)
operator|&&
name|regionInfo
operator|.
name|equals
argument_list|(
name|rsn
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|regionInfo
argument_list|)
argument_list|,
name|srcServer
argument_list|)
expr_stmt|;
block|}
block|}
comment|// retry moveServersAndTables to newGroup and check if all regions on srcServer belongs to
comment|// table2
name|rsn
operator|.
name|setState
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|)
expr_stmt|;
name|rsGroupAdmin
operator|.
name|moveServersAndTables
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|srcServer
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|table2
argument_list|)
argument_list|,
name|newGroup
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|regionsInfo
range|:
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsOnServer
argument_list|(
name|srcServer
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|regionsInfo
operator|.
name|getTable
argument_list|()
argument_list|,
name|table2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

