begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_comment
comment|/**  * Simple Increments Performance Test. Run this from main. It is to go against a cluster.  * Presumption is the table exists already. Defaults are a zk ensemble of localhost:2181,  * a tableName of 'tableName', a column famly name of 'columnFamilyName', with 80 threads by  * default and 10000 increments per thread. To change any of these configs, pass -DNAME=VALUE as  * in -DtableName="newTableName". It prints out configuration it is running with at the start and  * on the end it prints out percentiles.  */
end_comment

begin_class
specifier|public
class|class
name|IncrementPerformanceTest
implements|implements
name|Tool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|IncrementPerformanceTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER
init|=
operator|new
name|byte
index|[]
block|{
literal|'q'
block|}
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|MetricRegistry
name|metrics
init|=
operator|new
name|MetricRegistry
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLENAME
init|=
literal|"tableName"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLUMN_FAMILY
init|=
literal|"columnFamilyName"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THREAD_COUNT
init|=
literal|"threadCount"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_THREAD_COUNT
init|=
literal|80
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INCREMENT_COUNT
init|=
literal|"incrementCount"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_INCREMENT_COUNT
init|=
literal|10000
decl_stmt|;
name|IncrementPerformanceTest
parameter_list|()
block|{}
specifier|public
name|int
name|run
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|TABLENAME
argument_list|)
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|columnFamilyName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|COLUMN_FAMILY
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|threadCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|THREAD_COUNT
argument_list|,
name|DEFAULT_THREAD_COUNT
argument_list|)
decl_stmt|;
specifier|final
name|int
name|incrementCount
init|=
name|conf
operator|.
name|getInt
argument_list|(
name|INCREMENT_COUNT
argument_list|,
name|DEFAULT_INCREMENT_COUNT
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Running test with "
operator|+
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
operator|+
literal|"="
operator|+
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
operator|+
literal|", tableName="
operator|+
name|tableName
operator|+
literal|", columnFamilyName="
operator|+
name|columnFamilyName
operator|+
literal|", threadCount="
operator|+
name|threadCount
operator|+
literal|", incrementCount="
operator|+
name|incrementCount
argument_list|)
expr_stmt|;
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadCount
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|HashSet
argument_list|<
name|Future
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|integer
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// needed a simple "final" counter
while|while
condition|(
name|integer
operator|.
name|incrementAndGet
argument_list|()
operator|<=
name|threadCount
condition|)
block|{
name|futures
operator|.
name|add
argument_list|(
name|service
operator|.
name|submit
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Timer
name|timer
init|=
name|metrics
operator|.
name|timer
argument_list|(
literal|"increments"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incrementCount
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Timer
operator|.
name|Context
name|context
init|=
name|timer
operator|.
name|time
argument_list|()
decl_stmt|;
try|try
block|{
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|row
argument_list|,
name|columnFamilyName
argument_list|,
name|QUALIFIER
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// swallow..it's a test.
block|}
finally|finally
block|{
name|context
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Future
argument_list|<
name|?
argument_list|>
name|future
range|:
name|futures
control|)
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Snapshot
name|s
init|=
name|metrics
operator|.
name|timer
argument_list|(
literal|"increments"
argument_list|)
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"75th=%s, 95th=%s, 99th=%s"
argument_list|,
name|s
operator|.
name|get75thPercentile
argument_list|()
argument_list|,
name|s
operator|.
name|get95thPercentile
argument_list|()
argument_list|,
name|s
operator|.
name|get99thPercentile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|this
operator|.
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|exit
argument_list|(
name|ToolRunner
operator|.
name|run
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
operator|new
name|IncrementPerformanceTest
argument_list|()
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

