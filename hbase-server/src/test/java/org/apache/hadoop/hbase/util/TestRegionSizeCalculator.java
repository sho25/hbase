begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionSizeCalculator
block|{
specifier|private
name|Configuration
name|configuration
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|long
name|megabyte
init|=
literal|1024L
operator|*
literal|1024L
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSimpleTestCase
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
name|mockTable
argument_list|(
literal|"region1"
argument_list|,
literal|"region2"
argument_list|,
literal|"region3"
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|mockAdmin
argument_list|(
name|mockServer
argument_list|(
name|mockRegion
argument_list|(
literal|"region1"
argument_list|,
literal|123
argument_list|)
argument_list|,
name|mockRegion
argument_list|(
literal|"region3"
argument_list|,
literal|1232
argument_list|)
argument_list|)
argument_list|,
name|mockServer
argument_list|(
name|mockRegion
argument_list|(
literal|"region2"
argument_list|,
literal|54321
argument_list|)
argument_list|,
name|mockRegion
argument_list|(
literal|"otherTableRegion"
argument_list|,
literal|110
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSizeCalculator
name|calculator
init|=
operator|new
name|RegionSizeCalculator
argument_list|(
name|table
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|123
operator|*
name|megabyte
argument_list|,
name|calculator
operator|.
name|getRegionSize
argument_list|(
literal|"region1"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|54321
operator|*
name|megabyte
argument_list|,
name|calculator
operator|.
name|getRegionSize
argument_list|(
literal|"region2"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1232
operator|*
name|megabyte
argument_list|,
name|calculator
operator|.
name|getRegionSize
argument_list|(
literal|"region3"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// if region is not inside our table, it should return 0
name|assertEquals
argument_list|(
literal|0
operator|*
name|megabyte
argument_list|,
name|calculator
operator|.
name|getRegionSize
argument_list|(
literal|"otherTableRegion"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|calculator
operator|.
name|getRegionSizeMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * When size of region in megabytes is larger than largest possible integer there could be    * error caused by lost of precision.    * */
annotation|@
name|Test
specifier|public
name|void
name|testLargeRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
name|mockTable
argument_list|(
literal|"largeRegion"
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|mockAdmin
argument_list|(
name|mockServer
argument_list|(
name|mockRegion
argument_list|(
literal|"largeRegion"
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|RegionSizeCalculator
name|calculator
init|=
operator|new
name|RegionSizeCalculator
argument_list|(
name|table
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|)
operator|*
name|megabyte
argument_list|,
name|calculator
operator|.
name|getRegionSize
argument_list|(
literal|"largeRegion"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** When calculator is disabled, it should return 0 for each request.*/
annotation|@
name|Test
specifier|public
name|void
name|testDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|regionName
init|=
literal|"cz.goout:/index.html"
decl_stmt|;
name|HTable
name|table
init|=
name|mockTable
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|mockAdmin
argument_list|(
name|mockServer
argument_list|(
name|mockRegion
argument_list|(
name|regionName
argument_list|,
literal|999
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|//first request on enabled calculator
name|RegionSizeCalculator
name|calculator
init|=
operator|new
name|RegionSizeCalculator
argument_list|(
name|table
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|999
operator|*
name|megabyte
argument_list|,
name|calculator
operator|.
name|getRegionSize
argument_list|(
name|regionName
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//then disabled calculator.
name|configuration
operator|.
name|setBoolean
argument_list|(
name|RegionSizeCalculator
operator|.
name|ENABLE_REGIONSIZECALCULATOR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|RegionSizeCalculator
name|disabledCalculator
init|=
operator|new
name|RegionSizeCalculator
argument_list|(
name|table
argument_list|,
name|admin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
operator|*
name|megabyte
argument_list|,
name|disabledCalculator
operator|.
name|getRegionSize
argument_list|(
name|regionName
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|disabledCalculator
operator|.
name|getRegionSizeMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Makes some table with given region names.    * */
specifier|private
name|HTable
name|mockTable
parameter_list|(
name|String
modifier|...
name|regionNames
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|mockedTable
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HTable
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockedTable
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockedTable
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"sizeTestTable"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|NavigableMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regionLocations
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockedTable
operator|.
name|getRegionLocations
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|regionLocations
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|regionName
range|:
name|regionNames
control|)
block|{
name|HRegionInfo
name|info
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HRegionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|regionName
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|regionLocations
operator|.
name|put
argument_list|(
name|info
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//we are not interested in values
block|}
return|return
name|mockedTable
return|;
block|}
comment|/**    * Creates mock returing ClusterStatus info about given servers.   */
specifier|private
name|Admin
name|mockAdmin
parameter_list|(
name|ServerLoad
modifier|...
name|servers
parameter_list|)
throws|throws
name|Exception
block|{
comment|//get clusterstatus
name|Admin
name|mockAdmin
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HBaseAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClusterStatus
name|clusterStatus
init|=
name|mockCluster
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockAdmin
operator|.
name|getClusterStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterStatus
argument_list|)
expr_stmt|;
return|return
name|mockAdmin
return|;
block|}
comment|/**    * Creates mock of region with given name and size.    *    * @param  fileSizeMb number of megabytes occupied by region in file store in megabytes    * */
specifier|private
name|RegionLoad
name|mockRegion
parameter_list|(
name|String
name|regionName
parameter_list|,
name|int
name|fileSizeMb
parameter_list|)
block|{
name|RegionLoad
name|region
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RegionLoad
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|region
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|regionName
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|region
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|region
operator|.
name|getStorefileSizeMB
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fileSizeMb
argument_list|)
expr_stmt|;
return|return
name|region
return|;
block|}
specifier|private
name|ClusterStatus
name|mockCluster
parameter_list|(
name|ServerLoad
index|[]
name|servers
parameter_list|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverNames
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|ClusterStatus
name|clusterStatus
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClusterStatus
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|clusterStatus
operator|.
name|getServers
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|serverNames
argument_list|)
expr_stmt|;
name|int
name|serverCounter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ServerLoad
name|server
range|:
name|servers
control|)
block|{
name|ServerName
name|serverName
init|=
name|mock
argument_list|(
name|ServerName
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|serverName
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"server"
operator|+
operator|(
name|serverCounter
operator|++
operator|)
argument_list|)
expr_stmt|;
name|serverNames
operator|.
name|add
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clusterStatus
operator|.
name|getLoad
argument_list|(
name|serverName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
return|return
name|clusterStatus
return|;
block|}
comment|/** Creates mock of region server with given regions*/
specifier|private
name|ServerLoad
name|mockServer
parameter_list|(
name|RegionLoad
modifier|...
name|regions
parameter_list|)
block|{
name|ServerLoad
name|serverLoad
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServerLoad
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|regionMap
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionLoad
name|regionName
range|:
name|regions
control|)
block|{
name|regionMap
operator|.
name|put
argument_list|(
name|regionName
operator|.
name|getName
argument_list|()
argument_list|,
name|regionName
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|serverLoad
operator|.
name|getRegionsLoad
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|regionMap
argument_list|)
expr_stmt|;
return|return
name|serverLoad
return|;
block|}
block|}
end_class

end_unit

