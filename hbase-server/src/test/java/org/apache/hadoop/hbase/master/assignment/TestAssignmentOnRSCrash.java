begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAssignmentOnRSCrash
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAssignmentOnRSCrash
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TEST_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testb"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FAMILY_STR
init|=
literal|"f"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|FAMILY_STR
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RS
init|=
literal|3
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|UTIL
decl_stmt|;
specifier|private
specifier|static
name|void
name|setupConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|MasterProcedureConstants
operator|.
name|MASTER_PROCEDURE_THREADS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.balancer.tablesOnMaster"
argument_list|,
literal|"none"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|setupConf
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_RS
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|TEST_TABLE
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"B"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"D"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"F"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"L"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testKillRsWithUserRegionWithData
parameter_list|()
throws|throws
name|Exception
block|{
name|testCrashRsWithUserRegion
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testKillRsWithUserRegionWithoutData
parameter_list|()
throws|throws
name|Exception
block|{
name|testCrashRsWithUserRegion
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testStopRsWithUserRegionWithData
parameter_list|()
throws|throws
name|Exception
block|{
name|testCrashRsWithUserRegion
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testStopRsWithUserRegionWithoutData
parameter_list|()
throws|throws
name|Exception
block|{
name|testCrashRsWithUserRegion
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testCrashRsWithUserRegion
parameter_list|(
specifier|final
name|boolean
name|kill
parameter_list|,
specifier|final
name|boolean
name|withData
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|NROWS
init|=
literal|100
decl_stmt|;
name|int
name|nkilled
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|TEST_TABLE
argument_list|)
control|)
block|{
name|ServerName
name|serverName
init|=
name|AssignmentTestingUtil
operator|.
name|getServerHoldingRegion
argument_list|(
name|UTIL
argument_list|,
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|AssignmentTestingUtil
operator|.
name|isServerHoldingMeta
argument_list|(
name|UTIL
argument_list|,
name|serverName
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|withData
condition|)
block|{
name|testInsert
argument_list|(
name|hri
argument_list|,
name|NROWS
argument_list|)
expr_stmt|;
block|}
comment|// wait for regions to enter in transition and then to get out of transition
name|AssignmentTestingUtil
operator|.
name|crashRs
argument_list|(
name|UTIL
argument_list|,
name|serverName
argument_list|,
name|kill
argument_list|)
expr_stmt|;
name|AssignmentTestingUtil
operator|.
name|waitForRegionToBeInTransition
argument_list|(
name|UTIL
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|()
expr_stmt|;
if|if
condition|(
name|withData
condition|)
block|{
name|assertEquals
argument_list|(
name|NROWS
argument_list|,
name|testGet
argument_list|(
name|hri
argument_list|,
name|NROWS
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// region should be moved to another RS
name|assertNotEquals
argument_list|(
name|serverName
argument_list|,
name|AssignmentTestingUtil
operator|.
name|getServerHoldingRegion
argument_list|(
name|UTIL
argument_list|,
name|hri
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|nkilled
operator|==
operator|(
name|NUM_RS
operator|-
literal|1
operator|)
condition|)
block|{
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"expected RSs to be killed"
argument_list|,
name|nkilled
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testKillRsWithMetaRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|testCrashRsWithMetaRegion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStopRsWithMetaRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|testCrashRsWithMetaRegion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testCrashRsWithMetaRegion
parameter_list|(
specifier|final
name|boolean
name|kill
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|nkilled
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|AssignmentTestingUtil
operator|.
name|getMetaRegions
argument_list|(
name|UTIL
argument_list|)
control|)
block|{
name|ServerName
name|serverName
init|=
name|AssignmentTestingUtil
operator|.
name|crashRsWithRegion
argument_list|(
name|UTIL
argument_list|,
name|hri
argument_list|,
name|kill
argument_list|)
decl_stmt|;
comment|// wait for region to enter in transition and then to get out of transition
name|AssignmentTestingUtil
operator|.
name|waitForRegionToBeInTransition
argument_list|(
name|UTIL
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|()
expr_stmt|;
name|testGet
argument_list|(
name|hri
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// region should be moved to another RS
name|assertNotEquals
argument_list|(
name|serverName
argument_list|,
name|AssignmentTestingUtil
operator|.
name|getServerHoldingRegion
argument_list|(
name|UTIL
argument_list|,
name|hri
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|nkilled
operator|==
operator|(
name|NUM_RS
operator|-
literal|1
operator|)
condition|)
block|{
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"expected RSs to be killed"
argument_list|,
name|nkilled
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testInsert
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|int
name|nrows
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrows
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|testGet
parameter_list|(
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|int
name|nrows
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|nresults
init|=
literal|0
decl_stmt|;
specifier|final
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrows
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
block|{
name|nresults
operator|++
expr_stmt|;
block|}
block|}
return|return
name|nresults
return|;
block|}
block|}
end_class

end_unit

