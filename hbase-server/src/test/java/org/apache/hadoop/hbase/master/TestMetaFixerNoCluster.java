begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test small utility methods inside {@link MetaFixer}.  * For cluster tests see {@link TestMetaFixer}  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMetaFixerNoCluster
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMetaFixerNoCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|B
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|C
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|D
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|RegionInfo
name|ALL
init|=
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
decl_stmt|;
specifier|private
specifier|static
name|RegionInfo
name|_ARI
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|A
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|RegionInfo
name|_BRI
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|B
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|RegionInfo
name|ABRI
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|A
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|B
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|RegionInfo
name|ACRI
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|A
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|C
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|RegionInfo
name|CDRI
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|C
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|D
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|RegionInfo
name|ADRI
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|A
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|D
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|RegionInfo
name|D_RI
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|D
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|RegionInfo
name|C_RI
init|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|C
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetRegionInfoWithLargestEndKey
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|MetaFixer
operator|.
name|getRegionInfoWithLargestEndKey
argument_list|(
name|_ARI
argument_list|,
name|_BRI
argument_list|)
operator|.
name|equals
argument_list|(
name|_BRI
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MetaFixer
operator|.
name|getRegionInfoWithLargestEndKey
argument_list|(
name|C_RI
argument_list|,
name|D_RI
argument_list|)
operator|.
name|equals
argument_list|(
name|C_RI
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MetaFixer
operator|.
name|getRegionInfoWithLargestEndKey
argument_list|(
name|ABRI
argument_list|,
name|CDRI
argument_list|)
operator|.
name|equals
argument_list|(
name|CDRI
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MetaFixer
operator|.
name|getRegionInfoWithLargestEndKey
argument_list|(
literal|null
argument_list|,
name|CDRI
argument_list|)
operator|.
name|equals
argument_list|(
name|CDRI
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MetaFixer
operator|.
name|getRegionInfoWithLargestEndKey
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsOverlap
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|MetaFixer
operator|.
name|isOverlap
argument_list|(
name|_BRI
argument_list|,
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|ABRI
argument_list|,
name|ACRI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaFixer
operator|.
name|isOverlap
argument_list|(
name|_ARI
argument_list|,
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|C_RI
argument_list|,
name|D_RI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MetaFixer
operator|.
name|isOverlap
argument_list|(
name|ADRI
argument_list|,
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|CDRI
argument_list|,
name|C_RI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaFixer
operator|.
name|isOverlap
argument_list|(
name|_BRI
argument_list|,
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|CDRI
argument_list|,
name|C_RI
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCalculateMergesNoAggregation
parameter_list|()
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|>
name|overlaps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|_ARI
argument_list|,
name|_BRI
argument_list|)
argument_list|)
expr_stmt|;
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|C_RI
argument_list|,
name|D_RI
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SortedSet
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|merges
init|=
name|MetaFixer
operator|.
name|calculateMerges
argument_list|(
literal|10
argument_list|,
name|overlaps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|merges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|merges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|merges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCalculateMergesAggregation
parameter_list|()
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|>
name|overlaps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|ALL
argument_list|,
name|D_RI
argument_list|)
argument_list|)
expr_stmt|;
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|_ARI
argument_list|,
name|_BRI
argument_list|)
argument_list|)
expr_stmt|;
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|C_RI
argument_list|,
name|D_RI
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SortedSet
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|merges
init|=
name|MetaFixer
operator|.
name|calculateMerges
argument_list|(
literal|10
argument_list|,
name|overlaps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|merges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|merges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCalculateMergesNoRepeatOfRegionNames
parameter_list|()
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|>
name|overlaps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|_BRI
argument_list|,
name|ABRI
argument_list|)
argument_list|)
expr_stmt|;
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|ABRI
argument_list|,
name|ADRI
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SortedSet
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|merges
init|=
name|MetaFixer
operator|.
name|calculateMerges
argument_list|(
literal|10
argument_list|,
name|overlaps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|merges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should be three regions to merge, not four.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|merges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCalculateMergesRespectsMax
parameter_list|()
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|>
name|overlaps
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|_BRI
argument_list|,
name|ABRI
argument_list|)
argument_list|)
expr_stmt|;
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|ABRI
argument_list|,
name|ADRI
argument_list|)
argument_list|)
expr_stmt|;
name|overlaps
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|RegionInfo
argument_list|>
argument_list|(
name|C_RI
argument_list|,
name|D_RI
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SortedSet
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|merges
init|=
name|MetaFixer
operator|.
name|calculateMerges
argument_list|(
literal|3
argument_list|,
name|overlaps
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|merges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should be three regions to merge, not four.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|merges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|merges
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

