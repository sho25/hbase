begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|InvalidFamilyOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotDisabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotEnabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAdmin3
extends|extends
name|TestAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAdmin3
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAdmin3
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnableTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|ht
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be disabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|ht
operator|.
name|getName
argument_list|()
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that table is disabled
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotEnabledException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|ok
operator|=
literal|false
expr_stmt|;
comment|// verify that scan encounters correct exception
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
try|try
block|{
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
literal|null
decl_stmt|;
do|do
block|{
name|res
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|res
operator|!=
literal|null
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|TableNotEnabledException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|enableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be enabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|ht
operator|.
name|getName
argument_list|()
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that table is enabled
try|try
block|{
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableAndEnableTables
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|table1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|table2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|Table
name|ht1
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table1
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Table
name|ht2
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|table2
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ht1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|ht2
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|ht1
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|ht2
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|TableName
index|[]
name|tableNames
init|=
name|ADMIN
operator|.
name|listTableNames
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"testDisableAndEnableTable.*"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableNames
control|)
block|{
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// Test that tables are disabled
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ht1
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|ht2
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|DISABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tableNames
control|)
block|{
name|ADMIN
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// Test that tables are enabled
try|try
block|{
name|ht1
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
try|try
block|{
name|ht2
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|ht1
operator|.
name|close
argument_list|()
expr_stmt|;
name|ht2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|table2
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test retain assignment on enableTable.    */
annotation|@
name|Test
specifier|public
name|void
name|testEnableTableRetainAssignment
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
block|}
decl_stmt|;
name|int
name|expectedRegions
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Disable table.
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Enable table, use retain assignment to assign regions.
name|ADMIN
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions2
init|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
comment|// Check the assignment.
name|assertEquals
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|regions2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regions2
operator|.
name|containsAll
argument_list|(
name|regions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableDisableAddColumnDeleteColumn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|ADMIN
operator|.
name|isTableEnabled
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|ADMIN
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"col2"
argument_list|)
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotDisabledException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTableDescriptor
parameter_list|()
throws|throws
name|IOException
block|{
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"fam1"
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"fam2"
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"fam3"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptor
name|confirmedHtd
init|=
name|table
operator|.
name|getDescriptor
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|TableDescriptor
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|htd
argument_list|,
name|confirmedHtd
argument_list|)
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|fullScanMetaAndPrint
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verify schema change for read only table    */
annotation|@
name|Test
specifier|public
name|void
name|testReadOnlyTableModify
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make table read only
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|modifyTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
comment|// try to modify the read only table now
name|htd
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setCompactionEnabled
argument_list|(
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ADMIN
operator|.
name|modifyTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
comment|// Delete the table
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ADMIN
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TableNotDisabledException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testModifyRegionReplicasEnabledTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Modify region replication count
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setRegionReplication
argument_list|(
literal|3
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
comment|// try to modify the region replication count without disabling the table
name|ADMIN
operator|.
name|modifyTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an exception"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Delete the table
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ADMIN
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteLastColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|ADMIN
operator|.
name|isTableEnabled
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// test for enabled table
try|try
block|{
name|ADMIN
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to delete the only column family of a table"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFamilyOperationException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
comment|// test for disabled table
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to delete the only column family of a table"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidFamilyOperationException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
name|ADMIN
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteEditUnknownColumnFamilyAndOrTable
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test we get exception if we try to
specifier|final
name|TableName
name|nonexistentTable
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"nonexistent"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|nonexistentColumn
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nonexistent"
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|nonexistentHcd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|nonexistentColumn
argument_list|)
decl_stmt|;
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|addColumnFamily
argument_list|(
name|nonexistentTable
argument_list|,
name|nonexistentHcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|deleteTable
argument_list|(
name|nonexistentTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|deleteColumnFamily
argument_list|(
name|nonexistentTable
argument_list|,
name|nonexistentColumn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|nonexistentTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|enableTable
argument_list|(
name|nonexistentTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|modifyColumnFamily
argument_list|(
name|nonexistentTable
argument_list|,
name|nonexistentHcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|nonexistentTable
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|modifyTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exception
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
comment|// Now make it so at least the table exists and then do tests against a
comment|// nonexistent column family -- see if we get right exceptions.
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptor
name|htd
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
try|try
block|{
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|deleteColumnFamily
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|nonexistentHcd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"found="
operator|+
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|exception
operator|instanceof
name|InvalidFamilyOperationException
argument_list|)
expr_stmt|;
name|exception
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|modifyColumnFamily
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|nonexistentHcd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"found="
operator|+
name|exception
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|exception
operator|instanceof
name|InvalidFamilyOperationException
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

