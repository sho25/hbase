begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|QuotaObserverChore
operator|.
name|TablesWithQuotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|SpaceQuota
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_comment
comment|/**  * Test class for {@link QuotaObserverChore} that uses a live HBase cluster.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestQuotaObserverChoreWithMiniCluster
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestQuotaObserverChoreWithMiniCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|COUNTER
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_WAIT_MILLIS
init|=
literal|500
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|HMaster
name|master
decl_stmt|;
specifier|private
name|QuotaObserverChore
name|chore
decl_stmt|;
specifier|private
name|SpaceQuotaSnapshotNotifierForTest
name|snapshotNotifier
decl_stmt|;
specifier|private
name|SpaceQuotaHelperForTests
name|helper
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileSystemUtilizationChore
operator|.
name|FS_UTILIZATION_CHORE_DELAY_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileSystemUtilizationChore
operator|.
name|FS_UTILIZATION_CHORE_PERIOD_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|QuotaObserverChore
operator|.
name|QUOTA_OBSERVER_CHORE_DELAY_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|QuotaObserverChore
operator|.
name|QUOTA_OBSERVER_CHORE_PERIOD_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|SpaceQuotaSnapshotNotifierFactory
operator|.
name|SNAPSHOT_NOTIFIER_KEY
argument_list|,
name|SpaceQuotaSnapshotNotifierForTest
operator|.
name|class
argument_list|,
name|SpaceQuotaSnapshotNotifier
operator|.
name|class
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|removeAllQuotas
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
comment|// Wait for the quota table to be created
if|if
condition|(
operator|!
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
condition|)
block|{
do|do
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Quota table does not yet exist"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|DEFAULT_WAIT_MILLIS
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
condition|)
do|;
block|}
else|else
block|{
comment|// Or, clean up any quotas from previous test runs.
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|QuotaSettings
name|quotaSettings
range|:
name|scanner
control|)
block|{
specifier|final
name|String
name|namespace
init|=
name|quotaSettings
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|quotaSettings
operator|.
name|getTableName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|namespace
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting quota for namespace: "
operator|+
name|namespace
argument_list|)
expr_stmt|;
name|QuotaUtil
operator|.
name|deleteNamespaceQuota
argument_list|(
name|conn
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
literal|null
operator|!=
name|tableName
assert|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting quota for table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|QuotaUtil
operator|.
name|deleteTableQuota
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|master
operator|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|snapshotNotifier
operator|=
operator|(
name|SpaceQuotaSnapshotNotifierForTest
operator|)
name|master
operator|.
name|getSpaceQuotaSnapshotNotifier
argument_list|()
expr_stmt|;
name|snapshotNotifier
operator|.
name|clearSnapshots
argument_list|()
expr_stmt|;
name|chore
operator|=
name|master
operator|.
name|getQuotaObserverChore
argument_list|()
expr_stmt|;
name|helper
operator|=
operator|new
name|SpaceQuotaHelperForTests
argument_list|(
name|TEST_UTIL
argument_list|,
name|testName
argument_list|,
name|COUNTER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableViolatesQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sizeLimit
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
specifier|final
name|SpaceViolationPolicy
name|violationPolicy
init|=
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|sizeLimit
argument_list|,
name|violationPolicy
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Write more data than should be allowed
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
literal|3L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|quotaSnapshots
init|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
decl_stmt|;
name|boolean
name|foundSnapshot
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|foundSnapshot
condition|)
block|{
if|if
condition|(
name|quotaSnapshots
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found no violated quotas, sleeping and retrying. Current reports: "
operator|+
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|snapshotRegionSizes
argument_list|()
argument_list|)
expr_stmt|;
name|sleepWithInterrupt
argument_list|(
name|DEFAULT_WAIT_MILLIS
argument_list|)
expr_stmt|;
name|quotaSnapshots
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|entry
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|quotaSnapshots
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tn
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|isInViolation
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Found a snapshot, but it was not yet in violation. "
operator|+
name|snapshot
argument_list|)
expr_stmt|;
name|sleepWithInterrupt
argument_list|(
name|DEFAULT_WAIT_MILLIS
argument_list|)
expr_stmt|;
name|quotaSnapshots
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|foundSnapshot
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|entry
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|quotaSnapshots
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tn
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|SpaceQuotaSnapshot
name|snapshot
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Snapshot was "
operator|+
name|snapshot
argument_list|,
name|violationPolicy
argument_list|,
name|snapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sizeLimit
argument_list|,
name|snapshot
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The usage should be greater than the limit, but were "
operator|+
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|+
literal|" and "
operator|+
name|snapshot
operator|.
name|getLimit
argument_list|()
operator|+
literal|", respectively"
argument_list|,
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>
name|snapshot
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceViolatesQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|namespace
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Ensure the namespace exists
try|try
block|{
name|admin
operator|.
name|getNamespaceDescriptor
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamespaceNotFoundException
name|e
parameter_list|)
block|{
name|NamespaceDescriptor
name|desc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
name|TableName
name|tn1
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|namespace
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|TableName
name|tn2
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|namespace
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|TableName
name|tn3
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|namespace
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|long
name|sizeLimit
init|=
literal|5L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
specifier|final
name|SpaceViolationPolicy
name|violationPolicy
init|=
name|SpaceViolationPolicy
operator|.
name|DISABLE
decl_stmt|;
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitNamespaceSpace
argument_list|(
name|namespace
argument_list|,
name|sizeLimit
argument_list|,
name|violationPolicy
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tn1
argument_list|,
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|violatedQuotas
init|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
comment|// Check a few times to make sure we don't prematurely move to violation
name|assertEquals
argument_list|(
literal|"Should not see any quota violations after writing 2MB of data"
argument_list|,
literal|0
argument_list|,
name|violatedQuotas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DEFAULT_WAIT_MILLIS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|violatedQuotas
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
block|}
name|helper
operator|.
name|writeData
argument_list|(
name|tn2
argument_list|,
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn2
argument_list|)
expr_stmt|;
name|violatedQuotas
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
comment|// Check a few times to make sure we don't prematurely move to violation
name|assertEquals
argument_list|(
literal|"Should not see any quota violations after writing 4MB of data"
argument_list|,
literal|0
argument_list|,
name|violatedQuotas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DEFAULT_WAIT_MILLIS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|violatedQuotas
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
block|}
comment|// Writing the final 2MB of data will push the namespace over the 5MB limit (6MB in total)
comment|// and should push all three tables in the namespace into violation.
name|helper
operator|.
name|writeData
argument_list|(
name|tn3
argument_list|,
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn3
argument_list|)
expr_stmt|;
name|violatedQuotas
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
while|while
condition|(
name|violatedQuotas
operator|.
name|size
argument_list|()
operator|<
literal|3
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Saw fewer violations than desired (expected 3): "
operator|+
name|violatedQuotas
operator|+
literal|". Current reports: "
operator|+
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|snapshotRegionSizes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DEFAULT_WAIT_MILLIS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|violatedQuotas
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
block|}
name|SpaceQuotaSnapshot
name|snapshot1
init|=
name|violatedQuotas
operator|.
name|remove
argument_list|(
name|tn1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"tn1 should be in violation"
argument_list|,
name|snapshot1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|violationPolicy
argument_list|,
name|snapshot1
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|SpaceQuotaSnapshot
name|snapshot2
init|=
name|violatedQuotas
operator|.
name|remove
argument_list|(
name|tn2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"tn2 should be in violation"
argument_list|,
name|snapshot2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|violationPolicy
argument_list|,
name|snapshot2
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|SpaceQuotaSnapshot
name|snapshot3
init|=
name|violatedQuotas
operator|.
name|remove
argument_list|(
name|tn3
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"tn3 should be in violation"
argument_list|,
name|snapshot3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|violationPolicy
argument_list|,
name|snapshot3
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected additional quota violations: "
operator|+
name|violatedQuotas
argument_list|,
name|violatedQuotas
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableQuotaOverridesNamespaceQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|namespace
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Ensure the namespace exists
try|try
block|{
name|admin
operator|.
name|getNamespaceDescriptor
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NamespaceNotFoundException
name|e
parameter_list|)
block|{
name|NamespaceDescriptor
name|desc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
name|TableName
name|tn1
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|namespace
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|TableName
name|tn2
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|namespace
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|long
name|namespaceSizeLimit
init|=
literal|3L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
specifier|final
name|SpaceViolationPolicy
name|namespaceViolationPolicy
init|=
name|SpaceViolationPolicy
operator|.
name|DISABLE
decl_stmt|;
name|QuotaSettings
name|namespaceSettings
init|=
name|QuotaSettingsFactory
operator|.
name|limitNamespaceSpace
argument_list|(
name|namespace
argument_list|,
name|namespaceSizeLimit
argument_list|,
name|namespaceViolationPolicy
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|namespaceSettings
argument_list|)
expr_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tn1
argument_list|,
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|violatedQuotas
init|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
comment|// Check a few times to make sure we don't prematurely move to violation
name|assertEquals
argument_list|(
literal|"Should not see any quota violations after writing 2MB of data"
argument_list|,
literal|0
argument_list|,
name|violatedQuotas
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DEFAULT_WAIT_MILLIS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|violatedQuotas
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
block|}
name|helper
operator|.
name|writeData
argument_list|(
name|tn2
argument_list|,
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn2
argument_list|)
expr_stmt|;
name|violatedQuotas
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
while|while
condition|(
name|violatedQuotas
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Saw fewer violations than desired (expected 2): "
operator|+
name|violatedQuotas
operator|+
literal|". Current reports: "
operator|+
name|master
operator|.
name|getMasterQuotaManager
argument_list|()
operator|.
name|snapshotRegionSizes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DEFAULT_WAIT_MILLIS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|violatedQuotas
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
block|}
name|SpaceQuotaSnapshot
name|actualPolicyTN1
init|=
name|violatedQuotas
operator|.
name|get
argument_list|(
name|tn1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected to see violation policy for tn1"
argument_list|,
name|actualPolicyTN1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|namespaceViolationPolicy
argument_list|,
name|actualPolicyTN1
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|SpaceQuotaSnapshot
name|actualPolicyTN2
init|=
name|violatedQuotas
operator|.
name|get
argument_list|(
name|tn2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected to see violation policy for tn2"
argument_list|,
name|actualPolicyTN2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|namespaceViolationPolicy
argument_list|,
name|actualPolicyTN2
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// Override the namespace quota with a table quota
specifier|final
name|long
name|tableSizeLimit
init|=
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
specifier|final
name|SpaceViolationPolicy
name|tableViolationPolicy
init|=
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
decl_stmt|;
name|QuotaSettings
name|tableSettings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn1
argument_list|,
name|tableSizeLimit
argument_list|,
name|tableViolationPolicy
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|tableSettings
argument_list|)
expr_stmt|;
comment|// Keep checking for the table quota policy to override the namespace quota
while|while
condition|(
literal|true
condition|)
block|{
name|violatedQuotas
operator|=
name|snapshotNotifier
operator|.
name|copySnapshots
argument_list|()
expr_stmt|;
name|SpaceQuotaSnapshot
name|actualTableSnapshot
init|=
name|violatedQuotas
operator|.
name|get
argument_list|(
name|tn1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Violation policy should never be null"
argument_list|,
name|actualTableSnapshot
argument_list|)
expr_stmt|;
if|if
condition|(
name|tableViolationPolicy
operator|!=
name|actualTableSnapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|getPolicy
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Saw unexpected table violation policy, waiting and re-checking."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|DEFAULT_WAIT_MILLIS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
name|assertEquals
argument_list|(
name|tableViolationPolicy
argument_list|,
name|actualTableSnapshot
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// This should not change with the introduction of the table quota for tn1
name|actualPolicyTN2
operator|=
name|violatedQuotas
operator|.
name|get
argument_list|(
name|tn2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Expected to see violation policy for tn2"
argument_list|,
name|actualPolicyTN2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|namespaceViolationPolicy
argument_list|,
name|actualPolicyTN2
operator|.
name|getQuotaStatus
argument_list|()
operator|.
name|getPolicy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAllTablesWithQuotas
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|QuotaSettings
argument_list|>
name|quotas
init|=
name|helper
operator|.
name|createTablesWithSpaceQuotas
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesWithQuotas
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|namespaceTablesWithQuotas
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Partition the tables with quotas by table and ns quota
name|helper
operator|.
name|partitionTablesByQuotaTarget
argument_list|(
name|quotas
argument_list|,
name|tablesWithQuotas
argument_list|,
name|namespaceTablesWithQuotas
argument_list|)
expr_stmt|;
name|TablesWithQuotas
name|tables
init|=
name|chore
operator|.
name|fetchAllTablesWithQuotasDefined
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Found tables: "
operator|+
name|tables
argument_list|,
name|tablesWithQuotas
argument_list|,
name|tables
operator|.
name|getTableQuotaTables
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Found tables: "
operator|+
name|tables
argument_list|,
name|namespaceTablesWithQuotas
argument_list|,
name|tables
operator|.
name|getNamespaceQuotaTables
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRpcQuotaTablesAreFiltered
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|QuotaSettings
argument_list|>
name|quotas
init|=
name|helper
operator|.
name|createTablesWithSpaceQuotas
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|tablesWithQuotas
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TableName
argument_list|>
name|namespaceTablesWithQuotas
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Partition the tables with quotas by table and ns quota
name|helper
operator|.
name|partitionTablesByQuotaTarget
argument_list|(
name|quotas
argument_list|,
name|tablesWithQuotas
argument_list|,
name|namespaceTablesWithQuotas
argument_list|)
expr_stmt|;
name|TableName
name|rpcQuotaTable
init|=
name|helper
operator|.
name|createTable
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|rpcQuotaTable
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// The `rpcQuotaTable` should not be included in this Set
name|TablesWithQuotas
name|tables
init|=
name|chore
operator|.
name|fetchAllTablesWithQuotasDefined
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Found tables: "
operator|+
name|tables
argument_list|,
name|tablesWithQuotas
argument_list|,
name|tables
operator|.
name|getTableQuotaTables
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Found tables: "
operator|+
name|tables
argument_list|,
name|namespaceTablesWithQuotas
argument_list|,
name|tables
operator|.
name|getNamespaceQuotaTables
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Integer
argument_list|>
name|mockReportedRegions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Can't mock because of primitive int as a return type -- Mockito
comment|// can only handle an Integer.
name|TablesWithQuotas
name|tables
init|=
operator|new
name|TablesWithQuotas
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|int
name|getNumReportedRegions
parameter_list|(
name|TableName
name|table
parameter_list|,
name|QuotaSnapshotStore
argument_list|<
name|TableName
argument_list|>
name|tableStore
parameter_list|)
block|{
name|Integer
name|i
init|=
name|mockReportedRegions
operator|.
name|get
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|i
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|i
return|;
block|}
block|}
decl_stmt|;
comment|// Create the tables
name|TableName
name|tn1
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|TableName
name|tn2
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|TableName
name|tn3
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|20
argument_list|)
decl_stmt|;
comment|// Add them to the Tables with Quotas object
name|tables
operator|.
name|addTableQuotaTable
argument_list|(
name|tn1
argument_list|)
expr_stmt|;
name|tables
operator|.
name|addTableQuotaTable
argument_list|(
name|tn2
argument_list|)
expr_stmt|;
name|tables
operator|.
name|addTableQuotaTable
argument_list|(
name|tn3
argument_list|)
expr_stmt|;
comment|// Mock the number of regions reported
name|mockReportedRegions
operator|.
name|put
argument_list|(
name|tn1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// 50%
name|mockReportedRegions
operator|.
name|put
argument_list|(
name|tn2
argument_list|,
literal|19
argument_list|)
expr_stmt|;
comment|// 95%
name|mockReportedRegions
operator|.
name|put
argument_list|(
name|tn3
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// 100%
comment|// Argument is un-used
name|tables
operator|.
name|filterInsufficientlyReportedTables
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// The default of 95% reported should prevent tn1 from appearing
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tn2
argument_list|,
name|tn3
argument_list|)
argument_list|)
argument_list|,
name|tables
operator|.
name|getTableQuotaTables
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFetchSpaceQuota
parameter_list|()
throws|throws
name|Exception
block|{
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|QuotaSettings
argument_list|>
name|tables
init|=
name|helper
operator|.
name|createTablesWithSpaceQuotas
argument_list|()
decl_stmt|;
comment|// Can pass in an empty map, we're not consulting it.
name|chore
operator|.
name|initializeSnapshotStores
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// All tables that were created should have a quota defined.
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|QuotaSettings
argument_list|>
name|entry
range|:
name|tables
operator|.
name|entries
argument_list|()
control|)
block|{
specifier|final
name|TableName
name|table
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|QuotaSettings
name|qs
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"QuotaSettings was an instance of "
operator|+
name|qs
operator|.
name|getClass
argument_list|()
argument_list|,
name|qs
operator|instanceof
name|SpaceLimitSettings
argument_list|)
expr_stmt|;
name|SpaceQuota
name|spaceQuota
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|qs
operator|.
name|getTableName
argument_list|()
condition|)
block|{
name|spaceQuota
operator|=
name|chore
operator|.
name|getTableSnapshotStore
argument_list|()
operator|.
name|getSpaceQuota
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find table space quota for "
operator|+
name|table
argument_list|,
name|spaceQuota
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|!=
name|qs
operator|.
name|getNamespace
argument_list|()
condition|)
block|{
name|spaceQuota
operator|=
name|chore
operator|.
name|getNamespaceSnapshotStore
argument_list|()
operator|.
name|getSpaceQuota
argument_list|(
name|table
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find namespace space quota for "
operator|+
name|table
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|spaceQuota
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Expected table or namespace space quota"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SpaceLimitSettings
name|sls
init|=
operator|(
name|SpaceLimitSettings
operator|)
name|qs
decl_stmt|;
name|assertEquals
argument_list|(
name|sls
operator|.
name|getProto
argument_list|()
operator|.
name|getQuota
argument_list|()
argument_list|,
name|spaceQuota
argument_list|)
expr_stmt|;
block|}
name|TableName
name|tableWithoutQuota
init|=
name|helper
operator|.
name|createTable
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|chore
operator|.
name|getTableSnapshotStore
argument_list|()
operator|.
name|getSpaceQuota
argument_list|(
name|tableWithoutQuota
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|sleepWithInterrupt
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|millis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Interrupted while sleeping"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

