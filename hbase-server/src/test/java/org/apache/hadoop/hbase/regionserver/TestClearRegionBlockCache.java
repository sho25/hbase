begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CacheEvictionStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestClearRegionBlockCache
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestClearRegionBlockCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestClearRegionBlockCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testClearRegionBlockCache"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|SPLIT_KEY
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RS
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|CONF
init|=
name|HTU
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
name|Table
name|table
decl_stmt|;
specifier|private
name|HRegionServer
name|rs1
decl_stmt|,
name|rs2
decl_stmt|;
specifier|private
name|MiniHBaseCluster
name|cluster
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
specifier|public
name|String
name|cacheType
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: {0}"
argument_list|)
specifier|public
specifier|static
name|Object
index|[]
name|data
parameter_list|()
block|{
return|return
operator|new
name|Object
index|[]
block|{
literal|"lru"
block|,
literal|"bucket"
block|}
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cacheType
operator|.
name|equals
argument_list|(
literal|"bucket"
argument_list|)
condition|)
block|{
name|CONF
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|BUCKET_CACHE_IOENGINE_KEY
argument_list|,
literal|"offheap"
argument_list|)
expr_stmt|;
name|CONF
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|BUCKET_CACHE_SIZE_KEY
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|=
name|HTU
operator|.
name|startMiniCluster
argument_list|(
name|NUM_RS
argument_list|)
expr_stmt|;
name|rs1
operator|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|rs2
operator|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Create table
name|table
operator|=
name|HTU
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|,
name|SPLIT_KEY
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|loadNumericRows
argument_list|(
name|table
argument_list|,
name|FAMILY
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|flush
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|HTU
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClearBlockCache
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockCache
name|blockCache1
init|=
name|rs1
operator|.
name|getBlockCache
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|BlockCache
name|blockCache2
init|=
name|rs2
operator|.
name|getBlockCache
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|initialBlockCount1
init|=
name|blockCache1
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
name|long
name|initialBlockCount2
init|=
name|blockCache2
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
comment|// scan will cause blocks to be added in BlockCache
name|scanAllRegionsForRS
argument_list|(
name|rs1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockCache1
operator|.
name|getBlockCount
argument_list|()
operator|-
name|initialBlockCount1
argument_list|,
name|HTU
operator|.
name|getNumHFilesForRS
argument_list|(
name|rs1
argument_list|,
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|clearRegionBlockCache
argument_list|(
name|rs1
argument_list|)
expr_stmt|;
name|scanAllRegionsForRS
argument_list|(
name|rs2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockCache2
operator|.
name|getBlockCount
argument_list|()
operator|-
name|initialBlockCount2
argument_list|,
name|HTU
operator|.
name|getNumHFilesForRS
argument_list|(
name|rs2
argument_list|,
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|clearRegionBlockCache
argument_list|(
name|rs2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialBlockCount1
argument_list|,
name|blockCache1
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialBlockCount2
argument_list|,
name|blockCache2
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClearBlockCacheFromAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|HTU
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|BlockCache
name|blockCache1
init|=
name|rs1
operator|.
name|getBlockCache
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|BlockCache
name|blockCache2
init|=
name|rs2
operator|.
name|getBlockCache
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|initialBlockCount1
init|=
name|blockCache1
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
name|long
name|initialBlockCount2
init|=
name|blockCache2
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
comment|// scan will cause blocks to be added in BlockCache
name|scanAllRegionsForRS
argument_list|(
name|rs1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockCache1
operator|.
name|getBlockCount
argument_list|()
operator|-
name|initialBlockCount1
argument_list|,
name|HTU
operator|.
name|getNumHFilesForRS
argument_list|(
name|rs1
argument_list|,
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|scanAllRegionsForRS
argument_list|(
name|rs2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockCache2
operator|.
name|getBlockCount
argument_list|()
operator|-
name|initialBlockCount2
argument_list|,
name|HTU
operator|.
name|getNumHFilesForRS
argument_list|(
name|rs2
argument_list|,
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|CacheEvictionStats
name|stats
init|=
name|admin
operator|.
name|clearBlockCache
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getEvictedBlocks
argument_list|()
argument_list|,
name|HTU
operator|.
name|getNumHFilesForRS
argument_list|(
name|rs1
argument_list|,
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
operator|+
name|HTU
operator|.
name|getNumHFilesForRS
argument_list|(
name|rs2
argument_list|,
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialBlockCount1
argument_list|,
name|blockCache1
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialBlockCount2
argument_list|,
name|blockCache2
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClearBlockCacheFromAsyncAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncAdmin
name|admin
init|=
name|ConnectionFactory
operator|.
name|createAsyncConnection
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|BlockCache
name|blockCache1
init|=
name|rs1
operator|.
name|getBlockCache
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|BlockCache
name|blockCache2
init|=
name|rs2
operator|.
name|getBlockCache
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|initialBlockCount1
init|=
name|blockCache1
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
name|long
name|initialBlockCount2
init|=
name|blockCache2
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
comment|// scan will cause blocks to be added in BlockCache
name|scanAllRegionsForRS
argument_list|(
name|rs1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockCache1
operator|.
name|getBlockCount
argument_list|()
operator|-
name|initialBlockCount1
argument_list|,
name|HTU
operator|.
name|getNumHFilesForRS
argument_list|(
name|rs1
argument_list|,
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|scanAllRegionsForRS
argument_list|(
name|rs2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|blockCache2
operator|.
name|getBlockCount
argument_list|()
operator|-
name|initialBlockCount2
argument_list|,
name|HTU
operator|.
name|getNumHFilesForRS
argument_list|(
name|rs2
argument_list|,
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|CacheEvictionStats
name|stats
init|=
name|admin
operator|.
name|clearBlockCache
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|stats
operator|.
name|getEvictedBlocks
argument_list|()
argument_list|,
name|HTU
operator|.
name|getNumHFilesForRS
argument_list|(
name|rs1
argument_list|,
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
operator|+
name|HTU
operator|.
name|getNumHFilesForRS
argument_list|(
name|rs2
argument_list|,
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialBlockCount1
argument_list|,
name|blockCache1
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|initialBlockCount2
argument_list|,
name|blockCache2
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanAllRegionsForRS
parameter_list|(
name|HRegionServer
name|rs
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Region
name|region
range|:
name|rs
operator|.
name|getRegions
argument_list|(
name|TABLE_NAME
argument_list|)
control|)
block|{
name|RegionScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
argument_list|)
condition|)
empty_stmt|;
block|}
block|}
specifier|private
name|void
name|clearRegionBlockCache
parameter_list|(
name|HRegionServer
name|rs
parameter_list|)
block|{
for|for
control|(
name|Region
name|region
range|:
name|rs
operator|.
name|getRegions
argument_list|(
name|TABLE_NAME
argument_list|)
control|)
block|{
name|rs
operator|.
name|clearRegionBlockCache
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

