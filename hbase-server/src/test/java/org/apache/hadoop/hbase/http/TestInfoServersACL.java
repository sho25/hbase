begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LocalHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
operator|.
name|TokenProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthSchemeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|KerberosCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|AuthSchemes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|CloseableHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpGet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|Lookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|config
operator|.
name|RegistryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|auth
operator|.
name|SPNegoSchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClients
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSCredential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|GSSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|ietf
operator|.
name|jgss
operator|.
name|Oid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|InstanceNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_comment
comment|/**  * Testing info servers for admin acl.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestInfoServersACL
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestInfoServersACL
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestInfoServersACL
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|static
name|String
name|USERNAME
decl_stmt|;
specifier|private
specifier|static
name|LocalHBaseCluster
name|CLUSTER
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|KEYTAB_FILE
init|=
operator|new
name|File
argument_list|(
name|UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"keytab"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|MiniKdc
name|KDC
decl_stmt|;
specifier|private
specifier|static
name|String
name|HOST
init|=
literal|"localhost"
decl_stmt|;
specifier|private
specifier|static
name|String
name|PRINCIPAL
decl_stmt|;
specifier|private
specifier|static
name|String
name|HTTP_PRINCIPAL
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|// user/group present in hbase.admin.acl
specifier|private
specifier|static
specifier|final
name|String
name|USER_ADMIN_STR
init|=
literal|"admin"
decl_stmt|;
comment|// user with no permissions
specifier|private
specifier|static
specifier|final
name|String
name|USER_NONE_STR
init|=
literal|"none"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|KDC
operator|=
name|UTIL
operator|.
name|setupMiniKdc
argument_list|(
name|KEYTAB_FILE
argument_list|)
expr_stmt|;
name|USERNAME
operator|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getShortUserName
argument_list|()
expr_stmt|;
name|PRINCIPAL
operator|=
name|USERNAME
operator|+
literal|"/"
operator|+
name|HOST
expr_stmt|;
name|HTTP_PRINCIPAL
operator|=
literal|"HTTP/"
operator|+
name|HOST
expr_stmt|;
comment|// Create principals for services and the test users
name|KDC
operator|.
name|createPrincipal
argument_list|(
name|KEYTAB_FILE
argument_list|,
name|PRINCIPAL
argument_list|,
name|HTTP_PRINCIPAL
argument_list|,
name|USER_ADMIN_STR
argument_list|,
name|USER_NONE_STR
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|HBaseKerberosUtils
operator|.
name|setSecuredConfiguration
argument_list|(
name|conf
argument_list|,
name|PRINCIPAL
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
argument_list|,
name|HTTP_PRINCIPAL
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseKerberosUtils
operator|.
name|setSSLConfiguration
argument_list|(
name|UTIL
argument_list|,
name|TestInfoServersACL
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|TokenProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Path
name|rootdir
init|=
name|UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"TestInfoServersACL"
argument_list|)
decl_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
comment|// The info servers do not run in tests by default.
comment|// Set them to ephemeral ports so they will start
comment|// setup configuration
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|MASTER_INFO_PORT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_INFO_PORT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HttpServer
operator|.
name|HTTP_UI_AUTHENTICATION
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HttpServer
operator|.
name|HTTP_SPNEGO_AUTHENTICATION_PRINCIPAL_KEY
argument_list|,
name|HTTP_PRINCIPAL
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HttpServer
operator|.
name|HTTP_SPNEGO_AUTHENTICATION_KEYTAB_KEY
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// ACL lists work only when "hadoop.security.authorization" is set to true
name|conf
operator|.
name|setBoolean
argument_list|(
name|CommonConfigurationKeys
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// only user admin will have acl access
name|conf
operator|.
name|set
argument_list|(
name|HttpServer
operator|.
name|HTTP_SPNEGO_AUTHENTICATION_ADMIN_USERS_KEY
argument_list|,
name|USER_ADMIN_STR
argument_list|)
expr_stmt|;
comment|//conf.set(HttpServer.FILTER_INITIALIZERS_PROPERTY, "");
name|CLUSTER
operator|=
operator|new
name|LocalHBaseCluster
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CLUSTER
operator|.
name|startup
argument_list|()
expr_stmt|;
name|CLUSTER
operator|.
name|getActiveMaster
argument_list|()
operator|.
name|waitForMetaOnline
argument_list|()
expr_stmt|;
block|}
comment|/**    * Helper method to shut down the cluster (if running)    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|shutDownMiniCluster
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|CLUSTER
operator|!=
literal|null
condition|)
block|{
name|CLUSTER
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|CLUSTER
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|KDC
operator|!=
literal|null
condition|)
block|{
name|KDC
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthorizedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|admin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_ADMIN_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check the expected content is present in the http response
name|String
name|expectedContent
init|=
literal|"Get Log Level"
decl_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getLogLevelPage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected="
operator|+
name|expectedContent
operator|+
literal|", content="
operator|+
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedContent
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnauthorizedUser
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|nonAdmin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_NONE_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|nonAdmin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getLogLevelPage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableActionsAvailableForAdmins
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|expectedAuthorizedContent
init|=
literal|"Actions:"
decl_stmt|;
name|UserGroupInformation
name|admin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_ADMIN_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check the expected content is present in the http response
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getTablePage
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected="
operator|+
name|expectedAuthorizedContent
operator|+
literal|", content="
operator|+
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedAuthorizedContent
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|nonAdmin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_NONE_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|nonAdmin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getTablePage
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"should not find="
operator|+
name|expectedAuthorizedContent
operator|+
literal|", content="
operator|+
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedAuthorizedContent
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLogsAvailableForAdmins
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|expectedAuthorizedContent
init|=
literal|"Directory: /logs/"
decl_stmt|;
name|UserGroupInformation
name|admin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_ADMIN_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check the expected content is present in the http response
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getLogsPage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected="
operator|+
name|expectedAuthorizedContent
operator|+
literal|", content="
operator|+
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedAuthorizedContent
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|nonAdmin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_NONE_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|nonAdmin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getLogsPage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDumpActionsAvailableForAdmins
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|expectedAuthorizedContent
init|=
literal|"Master status for"
decl_stmt|;
name|UserGroupInformation
name|admin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_ADMIN_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check the expected content is present in the http response
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getMasterDumpPage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected="
operator|+
name|expectedAuthorizedContent
operator|+
literal|", content="
operator|+
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedAuthorizedContent
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|nonAdmin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_NONE_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|nonAdmin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getMasterDumpPage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStackActionsAvailableForAdmins
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|expectedAuthorizedContent
init|=
literal|"Process Thread Dump"
decl_stmt|;
name|UserGroupInformation
name|admin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_ADMIN_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check the expected content is present in the http response
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getStacksPage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected="
operator|+
name|expectedAuthorizedContent
operator|+
literal|", content="
operator|+
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedAuthorizedContent
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|nonAdmin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_NONE_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|nonAdmin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getStacksPage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJmxAvailableForAdmins
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|expectedAuthorizedContent
init|=
literal|"Hadoop:service=HBase"
decl_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ObjectName
name|name
range|:
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
operator|.
name|queryNames
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"*:*"
argument_list|)
argument_list|,
literal|null
argument_list|)
control|)
block|{
if|if
condition|(
name|name
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedAuthorizedContent
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|admin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_ADMIN_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check the expected content is present in the http response
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getJmxPage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected="
operator|+
name|expectedAuthorizedContent
operator|+
literal|", content="
operator|+
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedAuthorizedContent
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|nonAdmin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_NONE_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|nonAdmin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getJmxPage
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetricsAvailableForAdmins
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Looks like there's nothing exported to this, but leave it since
comment|// it's Hadoop2 only and will eventually be removed due to that.
specifier|final
name|String
name|expectedAuthorizedContent
init|=
literal|""
decl_stmt|;
name|UserGroupInformation
name|admin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_ADMIN_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check the expected content is present in the http response
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getMetricsPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
operator|==
name|pair
operator|.
name|getFirst
argument_list|()
condition|)
block|{
comment|// Not on hadoop 2
return|return
literal|null
return|;
block|}
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_OK
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expected="
operator|+
name|expectedAuthorizedContent
operator|+
literal|", content="
operator|+
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|,
name|pair
operator|.
name|getSecond
argument_list|()
operator|.
name|contains
argument_list|(
name|expectedAuthorizedContent
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|nonAdmin
init|=
name|UserGroupInformation
operator|.
name|loginUserFromKeytabAndReturnUGI
argument_list|(
name|USER_NONE_STR
argument_list|,
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|nonAdmin
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|getMetricsPage
argument_list|()
decl_stmt|;
if|if
condition|(
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
operator|==
name|pair
operator|.
name|getFirst
argument_list|()
condition|)
block|{
comment|// Not on hadoop 2
return|return
literal|null
return|;
block|}
name|assertEquals
argument_list|(
name|HttpURLConnection
operator|.
name|HTTP_FORBIDDEN
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getInfoServerHostAndPort
parameter_list|()
block|{
return|return
literal|"http://localhost:"
operator|+
name|CLUSTER
operator|.
name|getActiveMaster
argument_list|()
operator|.
name|getInfoServer
argument_list|()
operator|.
name|getPort
argument_list|()
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getLogLevelPage
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Build the url which we want to connect to
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getInfoServerHostAndPort
argument_list|()
operator|+
literal|"/logLevel"
argument_list|)
decl_stmt|;
return|return
name|getUrlContent
argument_list|(
name|url
argument_list|)
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getTablePage
parameter_list|(
name|TableName
name|tn
parameter_list|)
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getInfoServerHostAndPort
argument_list|()
operator|+
literal|"/table.jsp?name="
operator|+
name|tn
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getUrlContent
argument_list|(
name|url
argument_list|)
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getLogsPage
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getInfoServerHostAndPort
argument_list|()
operator|+
literal|"/logs/"
argument_list|)
decl_stmt|;
return|return
name|getUrlContent
argument_list|(
name|url
argument_list|)
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getMasterDumpPage
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getInfoServerHostAndPort
argument_list|()
operator|+
literal|"/dump"
argument_list|)
decl_stmt|;
return|return
name|getUrlContent
argument_list|(
name|url
argument_list|)
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getStacksPage
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getInfoServerHostAndPort
argument_list|()
operator|+
literal|"/stacks"
argument_list|)
decl_stmt|;
return|return
name|getUrlContent
argument_list|(
name|url
argument_list|)
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getJmxPage
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getInfoServerHostAndPort
argument_list|()
operator|+
literal|"/jmx"
argument_list|)
decl_stmt|;
return|return
name|getUrlContent
argument_list|(
name|url
argument_list|)
return|;
block|}
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getMetricsPage
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|getInfoServerHostAndPort
argument_list|()
operator|+
literal|"/metrics"
argument_list|)
decl_stmt|;
return|return
name|getUrlContent
argument_list|(
name|url
argument_list|)
return|;
block|}
comment|/**    * Retrieves the content of the specified URL. The content will only be returned if the status    * code for the operation was HTTP 200/OK.    */
specifier|private
name|Pair
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|getUrlContent
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|CloseableHttpClient
name|client
init|=
name|createHttpClient
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
operator|.
name|getUserName
argument_list|()
argument_list|)
init|)
block|{
name|CloseableHttpResponse
name|resp
init|=
name|client
operator|.
name|execute
argument_list|(
operator|new
name|HttpGet
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|resp
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|code
operator|==
name|HttpURLConnection
operator|.
name|HTTP_OK
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|code
argument_list|,
name|EntityUtils
operator|.
name|toString
argument_list|(
name|resp
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|code
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
specifier|private
name|CloseableHttpClient
name|createHttpClient
parameter_list|(
name|String
name|clientPrincipal
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Logs in with Kerberos via GSS
name|GSSManager
name|gssManager
init|=
name|GSSManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// jGSS Kerberos login constant
name|Oid
name|oid
init|=
operator|new
name|Oid
argument_list|(
literal|"1.2.840.113554.1.2.2"
argument_list|)
decl_stmt|;
name|GSSName
name|gssClient
init|=
name|gssManager
operator|.
name|createName
argument_list|(
name|clientPrincipal
argument_list|,
name|GSSName
operator|.
name|NT_USER_NAME
argument_list|)
decl_stmt|;
name|GSSCredential
name|credential
init|=
name|gssManager
operator|.
name|createCredential
argument_list|(
name|gssClient
argument_list|,
name|GSSCredential
operator|.
name|DEFAULT_LIFETIME
argument_list|,
name|oid
argument_list|,
name|GSSCredential
operator|.
name|INITIATE_ONLY
argument_list|)
decl_stmt|;
name|Lookup
argument_list|<
name|AuthSchemeProvider
argument_list|>
name|authRegistry
init|=
name|RegistryBuilder
operator|.
expr|<
name|AuthSchemeProvider
operator|>
name|create
argument_list|()
operator|.
name|register
argument_list|(
name|AuthSchemes
operator|.
name|SPNEGO
argument_list|,
operator|new
name|SPNegoSchemeFactory
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|BasicCredentialsProvider
name|credentialsProvider
init|=
operator|new
name|BasicCredentialsProvider
argument_list|()
decl_stmt|;
name|credentialsProvider
operator|.
name|setCredentials
argument_list|(
name|AuthScope
operator|.
name|ANY
argument_list|,
operator|new
name|KerberosCredentials
argument_list|(
name|credential
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|HttpClients
operator|.
name|custom
argument_list|()
operator|.
name|setDefaultAuthSchemeRegistry
argument_list|(
name|authRegistry
argument_list|)
operator|.
name|setDefaultCredentialsProvider
argument_list|(
name|credentialsProvider
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

