begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Tests the concurrent TinyLfuBlockCache.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestTinyLfuBlockCache
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestTinyLfuBlockCache
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCacheSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|1000000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|TinyLfuBlockCache
name|cache
init|=
operator|new
name|TinyLfuBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
name|blockSize
argument_list|,
name|Runnable
operator|::
name|run
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|blocks
init|=
name|generateRandomBlocks
argument_list|(
literal|100
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|long
name|expectedCacheSize
init|=
name|cache
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// Confirm empty
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|assertTrue
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Add blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|block
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
comment|// Verify correctly calculated cache heap size
name|assertEquals
argument_list|(
name|expectedCacheSize
argument_list|,
name|cache
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if all blocks are properly cached and retrieved
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|HeapSize
name|buf
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|heapSize
argument_list|()
argument_list|,
name|block
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Re-add same blocks and ensure nothing has changed
name|long
name|expectedBlockCount
init|=
name|cache
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Cache should ignore cache requests for blocks already in cache"
argument_list|,
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify correctly calculated cache heap size
name|assertEquals
argument_list|(
name|expectedCacheSize
argument_list|,
name|cache
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if all blocks are properly cached and retrieved
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|HeapSize
name|buf
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|heapSize
argument_list|()
argument_list|,
name|block
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Expect no evictions
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheEvictionSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|TinyLfuBlockCache
name|cache
init|=
operator|new
name|TinyLfuBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
name|blockSize
argument_list|,
name|Runnable
operator|::
name|run
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|blocks
init|=
name|generateFixedBlocks
argument_list|(
literal|11
argument_list|,
name|blockSize
argument_list|,
literal|"block"
argument_list|)
decl_stmt|;
comment|// Add all the blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
comment|// A single eviction run should have occurred
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// The cache did not grow beyond max
name|assertTrue
argument_list|(
name|cache
operator|.
name|heapSize
argument_list|()
operator|<
name|maxSize
argument_list|)
expr_stmt|;
comment|// All blocks except one should be in the cache
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanResistance
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|TinyLfuBlockCache
name|cache
init|=
operator|new
name|TinyLfuBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
name|blockSize
argument_list|,
name|Runnable
operator|::
name|run
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|singleBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|20
argument_list|,
name|blockSize
argument_list|,
literal|"single"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|multiBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
name|blockSize
argument_list|,
literal|"multi"
argument_list|)
decl_stmt|;
comment|// Add 5 blocks from each
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|multiBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Add frequency
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|CachedItem
name|block
init|=
name|multiBlocks
index|[
name|i
index|]
decl_stmt|;
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Let's keep "scanning" by adding single blocks.  From here on we only
comment|// expect evictions from the single bucket.
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CachedItem
name|block
range|:
name|multiBlocks
control|)
block|{
name|assertTrue
argument_list|(
name|cache
operator|.
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxBlockSize
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|TinyLfuBlockCache
name|cache
init|=
operator|new
name|TinyLfuBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
name|blockSize
argument_list|,
name|Runnable
operator|::
name|run
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|tooLong
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
literal|2
operator|*
name|blockSize
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|small
init|=
name|generateFixedBlocks
argument_list|(
literal|15
argument_list|,
name|blockSize
operator|/
literal|2
argument_list|,
literal|"small"
argument_list|)
decl_stmt|;
for|for
control|(
name|CachedItem
name|i
range|:
name|tooLong
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|i
operator|.
name|cacheKey
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CachedItem
name|i
range|:
name|small
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|i
operator|.
name|cacheKey
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CachedItem
name|i
range|:
name|small
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|i
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CachedItem
name|i
range|:
name|tooLong
control|)
block|{
name|assertNull
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|i
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getFailedInserts
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResizeBlockCache
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|TinyLfuBlockCache
name|cache
init|=
operator|new
name|TinyLfuBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
name|blockSize
argument_list|,
name|Runnable
operator|::
name|run
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|blocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"block"
argument_list|)
decl_stmt|;
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
comment|// Do not expect any evictions yet
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resize to half capacity plus an extra block (otherwise we evict an extra)
name|cache
operator|.
name|setMaxSize
argument_list|(
name|maxSize
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// And we expect 1/2 of the blocks to be evicted
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CachedItem
index|[]
name|generateFixedBlocks
parameter_list|(
name|int
name|numBlocks
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|pfx
parameter_list|)
block|{
name|CachedItem
index|[]
name|blocks
init|=
operator|new
name|CachedItem
index|[
name|numBlocks
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|CachedItem
argument_list|(
name|pfx
operator|+
name|i
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
return|return
name|blocks
return|;
block|}
specifier|private
name|CachedItem
index|[]
name|generateFixedBlocks
parameter_list|(
name|int
name|numBlocks
parameter_list|,
name|long
name|size
parameter_list|,
name|String
name|pfx
parameter_list|)
block|{
return|return
name|generateFixedBlocks
argument_list|(
name|numBlocks
argument_list|,
operator|(
name|int
operator|)
name|size
argument_list|,
name|pfx
argument_list|)
return|;
block|}
specifier|private
name|CachedItem
index|[]
name|generateRandomBlocks
parameter_list|(
name|int
name|numBlocks
parameter_list|,
name|long
name|maxSize
parameter_list|)
block|{
name|CachedItem
index|[]
name|blocks
init|=
operator|new
name|CachedItem
index|[
name|numBlocks
index|]
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|CachedItem
argument_list|(
literal|"block"
operator|+
name|i
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|maxSize
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|blocks
return|;
block|}
specifier|private
name|long
name|calculateBlockSize
parameter_list|(
name|long
name|maxSize
parameter_list|,
name|int
name|numBlocks
parameter_list|)
block|{
name|long
name|roughBlockSize
init|=
name|maxSize
operator|/
name|numBlocks
decl_stmt|;
name|int
name|numEntries
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.2
operator|)
operator|*
name|maxSize
operator|/
name|roughBlockSize
argument_list|)
decl_stmt|;
name|long
name|totalOverhead
init|=
name|LruBlockCache
operator|.
name|CACHE_FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP
operator|+
operator|(
name|numEntries
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_ENTRY
operator|)
operator|+
operator|(
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_SEGMENT
operator|)
decl_stmt|;
name|long
name|negateBlockSize
init|=
name|totalOverhead
operator|/
name|numEntries
decl_stmt|;
name|negateBlockSize
operator|+=
name|LruCachedBlock
operator|.
name|PER_BLOCK_OVERHEAD
expr_stmt|;
return|return
name|ClassSize
operator|.
name|align
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|roughBlockSize
operator|-
name|negateBlockSize
operator|)
operator|*
literal|0.99f
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|long
name|calculateBlockSizeDefault
parameter_list|(
name|long
name|maxSize
parameter_list|,
name|int
name|numBlocks
parameter_list|)
block|{
name|long
name|roughBlockSize
init|=
name|maxSize
operator|/
name|numBlocks
decl_stmt|;
name|int
name|numEntries
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.2
operator|)
operator|*
name|maxSize
operator|/
name|roughBlockSize
argument_list|)
decl_stmt|;
name|long
name|totalOverhead
init|=
name|LruBlockCache
operator|.
name|CACHE_FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP
operator|+
operator|(
name|numEntries
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_ENTRY
operator|)
operator|+
operator|(
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_SEGMENT
operator|)
decl_stmt|;
name|long
name|negateBlockSize
init|=
name|totalOverhead
operator|/
name|numEntries
decl_stmt|;
name|negateBlockSize
operator|+=
name|LruCachedBlock
operator|.
name|PER_BLOCK_OVERHEAD
expr_stmt|;
return|return
name|ClassSize
operator|.
name|align
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|roughBlockSize
operator|-
name|negateBlockSize
operator|)
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|CachedItem
implements|implements
name|Cacheable
block|{
name|BlockCacheKey
name|cacheKey
decl_stmt|;
name|int
name|size
decl_stmt|;
name|CachedItem
parameter_list|(
name|String
name|blockName
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|cacheKey
operator|=
operator|new
name|BlockCacheKey
argument_list|(
name|blockName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/** The size of this item reported to the block cache layer */
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
name|getDeserializer
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|BlockType
name|getBlockType
parameter_list|()
block|{
return|return
name|BlockType
operator|.
name|DATA
return|;
block|}
annotation|@
name|Override
specifier|public
name|MemoryType
name|getMemoryType
parameter_list|()
block|{
return|return
name|MemoryType
operator|.
name|EXCLUSIVE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|ByteBuffer
name|destination
parameter_list|,
name|boolean
name|includeNextBlockMetadata
parameter_list|)
block|{     }
block|}
block|}
end_class

end_unit

