begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/** * Licensed to the Apache Software Foundation (ASF) under one * or more contributor license agreements.  See the NOTICE file * distributed with this work for additional information * regarding copyright ownership.  The ASF licenses this file * to you under the Apache License, Version 2.0 (the * "License"); you may not use this file except in compliance * with the License.  You may obtain a copy of the License at * *     http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|log
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|log
operator|.
name|LogLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|NetUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestLogLevel
block|{
specifier|static
specifier|final
name|PrintStream
name|out
init|=
name|System
operator|.
name|out
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|testDynamicLogLevel
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|logName
init|=
name|TestLogLevel
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Log
name|testlog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|logName
argument_list|)
decl_stmt|;
comment|//only test Log4JLogger
if|if
condition|(
name|testlog
operator|instanceof
name|Log4JLogger
condition|)
block|{
name|Logger
name|log
init|=
operator|(
operator|(
name|Log4JLogger
operator|)
name|testlog
operator|)
operator|.
name|getLogger
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"log.debug1"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"log.info1"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"log.error1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|Level
operator|.
name|ERROR
operator|.
name|equals
argument_list|(
name|log
operator|.
name|getEffectiveLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HttpServer
name|server
init|=
literal|null
decl_stmt|;
try|try
block|{
name|server
operator|=
operator|new
name|HttpServer
operator|.
name|Builder
argument_list|()
operator|.
name|setName
argument_list|(
literal|".."
argument_list|)
operator|.
name|addEndpoint
argument_list|(
operator|new
name|URI
argument_list|(
literal|"http://localhost:0"
argument_list|)
argument_list|)
operator|.
name|setFindPort
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|authority
init|=
name|NetUtils
operator|.
name|getHostPortString
argument_list|(
name|server
operator|.
name|getConnectorAddress
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|//servlet
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|authority
operator|+
literal|"/logLevel?log="
operator|+
name|logName
operator|+
literal|"&level="
operator|+
name|Level
operator|.
name|ERROR
argument_list|)
decl_stmt|;
name|out
operator|.
name|println
argument_list|(
literal|"*** Connecting to "
operator|+
name|url
argument_list|)
expr_stmt|;
name|HttpURLConnection
name|connection
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|()
decl_stmt|;
name|connection
operator|.
name|connect
argument_list|()
expr_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|line
init|;
operator|(
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|;
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
control|)
empty_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"log.debug2"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"log.info2"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"log.error2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Level
operator|.
name|ERROR
operator|.
name|equals
argument_list|(
name|log
operator|.
name|getEffectiveLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//command line
name|String
index|[]
name|args
init|=
block|{
literal|"-setlevel"
block|,
name|authority
block|,
name|logName
block|,
name|Level
operator|.
name|DEBUG
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|LogLevel
operator|.
name|main
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"log.debug3"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"log.info3"
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|"log.error3"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Level
operator|.
name|DEBUG
operator|.
name|equals
argument_list|(
name|log
operator|.
name|getEffectiveLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|out
operator|.
name|println
argument_list|(
name|testlog
operator|.
name|getClass
argument_list|()
operator|+
literal|" not tested."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

