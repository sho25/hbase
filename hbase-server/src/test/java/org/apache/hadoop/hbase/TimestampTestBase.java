begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_comment
comment|/**  * Tests user specifiable time stamps putting, getting and scanning.  Also  * tests same in presence of deletes.  Test cores are written so can be  * run against an HRegion and against an HTable: i.e. both local and remote.  */
end_comment

begin_class
specifier|public
class|class
name|TimestampTestBase
block|{
specifier|private
specifier|static
specifier|final
name|long
name|T0
init|=
literal|10L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|T1
init|=
literal|100L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|T2
init|=
literal|200L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"colfamily11"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
interface|interface
name|FlushCache
block|{
name|void
name|flushcache
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
comment|/*    * Run test that delete works according to description in<a    * href="https://issues.apache.org/jira/browse/HADOOP-1784">hadoop-1784</a>.    * @param incommon    * @param flusher    * @throws IOException    */
specifier|public
specifier|static
name|void
name|doTestDelete
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
name|FlushCache
name|flusher
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Add values at various timestamps (Values are timestampes as bytes).
name|put
argument_list|(
name|table
argument_list|,
name|T0
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|table
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|table
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Verify that returned versions match passed timestamps.
name|assertVersions
argument_list|(
name|table
argument_list|,
operator|new
name|long
index|[]
block|{
name|HConstants
operator|.
name|LATEST_TIMESTAMP
block|,
name|T2
block|,
name|T1
block|}
argument_list|)
expr_stmt|;
comment|// If I delete w/o specifying a timestamp, this means I'm deleting the latest.
name|delete
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Verify that I get back T2 through T1 -- that the latest version has been deleted.
name|assertVersions
argument_list|(
name|table
argument_list|,
operator|new
name|long
index|[]
block|{
name|T2
block|,
name|T1
block|,
name|T0
block|}
argument_list|)
expr_stmt|;
comment|// Flush everything out to disk and then retry
name|flusher
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|assertVersions
argument_list|(
name|table
argument_list|,
operator|new
name|long
index|[]
block|{
name|T2
block|,
name|T1
block|,
name|T0
block|}
argument_list|)
expr_stmt|;
comment|// Now add, back a latest so I can test remove other than the latest.
name|put
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|table
argument_list|,
operator|new
name|long
index|[]
block|{
name|HConstants
operator|.
name|LATEST_TIMESTAMP
block|,
name|T2
block|,
name|T1
block|}
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|table
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|assertVersions
argument_list|(
name|table
argument_list|,
operator|new
name|long
index|[]
block|{
name|HConstants
operator|.
name|LATEST_TIMESTAMP
block|,
name|T1
block|,
name|T0
block|}
argument_list|)
expr_stmt|;
comment|// Flush everything out to disk and then retry
name|flusher
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|assertVersions
argument_list|(
name|table
argument_list|,
operator|new
name|long
index|[]
block|{
name|HConstants
operator|.
name|LATEST_TIMESTAMP
block|,
name|T1
block|,
name|T0
block|}
argument_list|)
expr_stmt|;
comment|// Now try deleting all from T2 back inclusive (We first need to add T2
comment|// back into the mix and to make things a little interesting, delete and then readd T1.
name|put
argument_list|(
name|table
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|delete
argument_list|(
name|table
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|table
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Should only be current value in set.  Assert this is so
name|assertOnlyLatest
argument_list|(
name|table
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
comment|// Flush everything out to disk and then redo above tests
name|flusher
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|assertOnlyLatest
argument_list|(
name|table
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertOnlyLatest
parameter_list|(
specifier|final
name|Table
name|incommon
parameter_list|,
specifier|final
name|long
name|currentTime
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
literal|null
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|incommon
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|time
argument_list|,
name|currentTime
argument_list|)
expr_stmt|;
block|}
comment|/*    * Assert that returned versions match passed in timestamps and that results    * are returned in the right order.  Assert that values when converted to    * longs match the corresponding passed timestamp.    * @param r    * @param tss    * @throws IOException    */
specifier|public
specifier|static
name|void
name|assertVersions
parameter_list|(
specifier|final
name|Table
name|incommon
parameter_list|,
specifier|final
name|long
index|[]
name|tss
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Assert that 'latest' is what we expect.
name|Get
name|get
init|=
literal|null
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|incommon
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
decl_stmt|;
name|long
name|t
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tss
index|[
literal|0
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
comment|// Now assert that if we ask for multiple versions, that they come out in
comment|// order.
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|tss
operator|.
name|length
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|incommon
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kvs
operator|.
name|length
argument_list|,
name|tss
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kvs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|t
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tss
index|[
name|i
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Determine highest stamp to set as next max stamp
name|long
name|maxStamp
init|=
name|kvs
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
comment|// Specify a timestamp get multiple versions.
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|maxStamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|kvs
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|incommon
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|result
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|kvs
operator|.
name|length
argument_list|,
name|tss
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|kvs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|t
operator|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tss
index|[
name|i
index|]
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
comment|// Test scanner returns expected version
name|assertScanContentTimestamp
argument_list|(
name|incommon
argument_list|,
name|tss
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/*    * Run test scanning different timestamps.    * @param incommon    * @param flusher    * @throws IOException    */
specifier|public
specifier|static
name|void
name|doTestTimestampScanning
parameter_list|(
specifier|final
name|Table
name|incommon
parameter_list|,
specifier|final
name|FlushCache
name|flusher
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Add a couple of values for three different timestamps.
name|put
argument_list|(
name|incommon
argument_list|,
name|T0
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|incommon
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|incommon
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
comment|// Get count of latest items.
name|int
name|count
init|=
name|assertScanContentTimestamp
argument_list|(
name|incommon
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
decl_stmt|;
comment|// Assert I get same count when I scan at each timestamp.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|count
argument_list|,
name|assertScanContentTimestamp
argument_list|(
name|incommon
argument_list|,
name|T0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|count
argument_list|,
name|assertScanContentTimestamp
argument_list|(
name|incommon
argument_list|,
name|T1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Flush everything out to disk and then retry
name|flusher
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|count
argument_list|,
name|assertScanContentTimestamp
argument_list|(
name|incommon
argument_list|,
name|T0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|count
argument_list|,
name|assertScanContentTimestamp
argument_list|(
name|incommon
argument_list|,
name|T1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Assert that the scan returns only values< timestamp.    * @param r    * @param ts    * @return Count of items scanned.    * @throws IOException    */
specifier|public
specifier|static
name|int
name|assertScanContentTimestamp
parameter_list|(
specifier|final
name|Table
name|in
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY_NAME
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|in
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
comment|// TODO FIX
comment|//      HStoreKey key = new HStoreKey();
comment|//      TreeMap<byte [], Cell>value =
comment|//        new TreeMap<byte [], Cell>(Bytes.BYTES_COMPARATOR);
comment|//      while (scanner.next(key, value)) {
comment|//        assertTrue(key.getTimestamp()<= ts);
comment|//        // Content matches the key or HConstants.LATEST_TIMESTAMP.
comment|//        // (Key does not match content if we 'put' with LATEST_TIMESTAMP).
comment|//        long l = Bytes.toLong(value.get(COLUMN).getValue());
comment|//        assertTrue(key.getTimestamp() == l ||
comment|//          HConstants.LATEST_TIMESTAMP == l);
comment|//        count++;
comment|//        value.clear();
comment|//      }
block|}
finally|finally
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|public
specifier|static
name|void
name|put
parameter_list|(
specifier|final
name|Table
name|loader
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|put
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ts
argument_list|)
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|put
parameter_list|(
specifier|final
name|Table
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|ts
init|=
name|HConstants
operator|.
name|LATEST_TIMESTAMP
decl_stmt|;
name|put
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ts
argument_list|)
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
comment|/*    * Put values.    * @param loader    * @param bytes    * @param ts    * @throws IOException    */
specifier|public
specifier|static
name|void
name|put
parameter_list|(
specifier|final
name|Table
name|loader
parameter_list|,
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|loader
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|delete
parameter_list|(
specifier|final
name|Table
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
name|delete
argument_list|(
name|loader
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|delete
parameter_list|(
specifier|final
name|Table
name|loader
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|)
throws|throws
name|IOException
block|{
name|delete
argument_list|(
name|loader
argument_list|,
name|column
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|delete
parameter_list|(
specifier|final
name|Table
name|loader
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|delete
argument_list|(
name|loader
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|delete
parameter_list|(
specifier|final
name|Table
name|loader
parameter_list|,
specifier|final
name|byte
index|[]
name|column
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|Delete
name|delete
init|=
name|ts
operator|==
name|HConstants
operator|.
name|LATEST_TIMESTAMP
condition|?
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
else|:
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|loader
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Result
name|get
parameter_list|(
specifier|final
name|Table
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|loader
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

