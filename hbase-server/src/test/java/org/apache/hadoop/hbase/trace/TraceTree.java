begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|trace
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|core
operator|.
name|SpanId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Used to create the graph formed by spans.  */
end_comment

begin_class
specifier|public
class|class
name|TraceTree
block|{
specifier|public
specifier|static
class|class
name|SpansByParent
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|Span
argument_list|>
name|set
decl_stmt|;
specifier|private
specifier|final
name|HashMap
argument_list|<
name|SpanId
argument_list|,
name|LinkedList
argument_list|<
name|Span
argument_list|>
argument_list|>
name|parentToSpans
decl_stmt|;
name|SpansByParent
parameter_list|(
name|Collection
argument_list|<
name|Span
argument_list|>
name|spans
parameter_list|)
block|{
name|set
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|Span
argument_list|>
argument_list|()
expr_stmt|;
name|parentToSpans
operator|=
operator|new
name|HashMap
argument_list|<
name|SpanId
argument_list|,
name|LinkedList
argument_list|<
name|Span
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|spans
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Span
name|span
range|:
name|spans
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|span
argument_list|)
expr_stmt|;
for|for
control|(
name|SpanId
name|parent
range|:
name|span
operator|.
name|getParents
argument_list|()
control|)
block|{
name|LinkedList
argument_list|<
name|Span
argument_list|>
name|list
init|=
name|parentToSpans
operator|.
name|get
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|LinkedList
argument_list|<
name|Span
argument_list|>
argument_list|()
expr_stmt|;
name|parentToSpans
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|span
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|span
operator|.
name|getParents
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|LinkedList
argument_list|<
name|Span
argument_list|>
name|list
init|=
name|parentToSpans
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|0L
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
name|list
operator|=
operator|new
name|LinkedList
argument_list|<
name|Span
argument_list|>
argument_list|()
expr_stmt|;
name|parentToSpans
operator|.
name|put
argument_list|(
operator|new
name|SpanId
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|span
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|Span
argument_list|>
name|find
parameter_list|(
name|SpanId
name|parentId
parameter_list|)
block|{
name|LinkedList
argument_list|<
name|Span
argument_list|>
name|spans
init|=
name|parentToSpans
operator|.
name|get
argument_list|(
name|parentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|spans
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|LinkedList
argument_list|<
name|Span
argument_list|>
argument_list|()
return|;
block|}
return|return
name|spans
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|Span
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|set
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SpansByProcessId
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|Span
argument_list|>
name|set
decl_stmt|;
name|SpansByProcessId
parameter_list|(
name|Collection
argument_list|<
name|Span
argument_list|>
name|spans
parameter_list|)
block|{
name|set
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|Span
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|spans
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Span
name|span
range|:
name|spans
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|span
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Iterator
argument_list|<
name|Span
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|set
argument_list|)
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|final
name|SpansByParent
name|spansByParent
decl_stmt|;
specifier|private
specifier|final
name|SpansByProcessId
name|spansByProcessId
decl_stmt|;
comment|/**    * Create a new TraceTree    *    * @param spans The collection of spans to use to create this TraceTree. Should    *              have at least one root span.    */
specifier|public
name|TraceTree
parameter_list|(
name|Collection
argument_list|<
name|Span
argument_list|>
name|spans
parameter_list|)
block|{
name|this
operator|.
name|spansByParent
operator|=
operator|new
name|SpansByParent
argument_list|(
name|spans
argument_list|)
expr_stmt|;
name|this
operator|.
name|spansByProcessId
operator|=
operator|new
name|SpansByProcessId
argument_list|(
name|spans
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SpansByParent
name|getSpansByParent
parameter_list|()
block|{
return|return
name|spansByParent
return|;
block|}
specifier|public
name|SpansByProcessId
name|getSpansByProcessId
parameter_list|()
block|{
return|return
name|spansByProcessId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|bld
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Span
argument_list|>
name|iter
init|=
name|spansByParent
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Span
name|span
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|bld
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
operator|.
name|append
argument_list|(
name|span
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|"\n"
expr_stmt|;
block|}
return|return
name|bld
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

