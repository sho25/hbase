begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|LruBlockCache
operator|.
name|EvictionThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Tests the concurrent LruBlockCache.<p>  *  * Tests will ensure it grows and shrinks in size properly,  * evictions run when they're supposed to and do what they should,  * and that cached blocks are accessible when expected to be.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestLruBlockCache
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCurrentSize
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|int
name|numBlocks
init|=
literal|9
decl_stmt|;
name|int
name|testRuns
init|=
literal|10
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
name|numBlocks
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"calculateBlockSize appears broken."
argument_list|,
name|blockSize
operator|*
name|numBlocks
operator|<=
name|maxSize
argument_list|)
expr_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|EvictionThread
name|evictionThread
init|=
name|cache
operator|.
name|getEvictionThread
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|evictionThread
operator|!=
literal|null
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|evictionThread
operator|.
name|isEnteringRun
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|blockCount
init|=
literal|0
decl_stmt|;
name|String
name|hfileName
init|=
literal|"hfile"
decl_stmt|;
for|for
control|(
name|int
name|run
init|=
literal|0
init|;
name|run
operator|!=
name|testRuns
condition|;
operator|++
name|run
control|)
block|{
while|while
condition|(
operator|!
name|cache
operator|.
name|isEvictionInProgress
argument_list|()
condition|)
block|{
name|CachedItem
name|block
init|=
operator|new
name|CachedItem
argument_list|(
name|hfileName
argument_list|,
operator|(
name|int
operator|)
name|blockSize
argument_list|,
name|blockCount
operator|++
argument_list|)
decl_stmt|;
name|boolean
name|inMemory
init|=
name|Math
operator|.
name|random
argument_list|()
operator|>
literal|0.5
decl_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|,
name|inMemory
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|cache
operator|.
name|isEvictionInProgress
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|evictBlocksByHfileName
argument_list|(
name|hfileName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cache
operator|.
name|getOverhead
argument_list|()
argument_list|,
name|cache
operator|.
name|getCurrentSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackgroundEvictionThread
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|int
name|numBlocks
init|=
literal|9
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
name|numBlocks
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"calculateBlockSize appears broken."
argument_list|,
name|blockSize
operator|*
name|numBlocks
operator|<=
name|maxSize
argument_list|)
expr_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|EvictionThread
name|evictionThread
init|=
name|cache
operator|.
name|getEvictionThread
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|evictionThread
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|CachedItem
index|[]
name|blocks
init|=
name|generateFixedBlocks
argument_list|(
name|numBlocks
operator|+
literal|1
argument_list|,
name|blockSize
argument_list|,
literal|"block"
argument_list|)
decl_stmt|;
comment|// Make sure eviction thread has entered run method
while|while
condition|(
operator|!
name|evictionThread
operator|.
name|isEnteringRun
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Add all the blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
comment|// wait until at least one eviction has run
name|int
name|n
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Eviction never happened."
argument_list|,
name|n
operator|++
operator|<
literal|20
argument_list|)
expr_stmt|;
block|}
comment|// let cache stabilize
comment|// On some systems, the cache will run multiple evictions before it attains
comment|// steady-state. For instance, after populating the cache with 10 blocks,
comment|// the first eviction evicts a single block and then a second eviction
comment|// evicts another. I think this is due to the delta between minSize and
comment|// acceptableSize, combined with variance between object overhead on
comment|// different environments.
name|n
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|long
name|prevCnt
init|=
literal|0
comment|/*< number of blocks added */
init|,
name|curCnt
init|=
name|cache
operator|.
name|getBlockCount
argument_list|()
init|;
name|prevCnt
operator|!=
name|curCnt
condition|;
name|prevCnt
operator|=
name|curCnt
operator|,
name|curCnt
operator|=
name|cache
operator|.
name|getBlockCount
argument_list|()
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cache never stabilized."
argument_list|,
name|n
operator|++
operator|<
literal|20
argument_list|)
expr_stmt|;
block|}
name|long
name|evictionCount
init|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|evictionCount
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Background Evictions run: "
operator|+
name|evictionCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|1000000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
literal|101
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|blocks
init|=
name|generateRandomBlocks
argument_list|(
literal|100
argument_list|,
name|blockSize
argument_list|)
decl_stmt|;
name|long
name|expectedCacheSize
init|=
name|cache
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// Confirm empty
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|assertTrue
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Add blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|block
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
block|}
comment|// Verify correctly calculated cache heap size
name|assertEquals
argument_list|(
name|expectedCacheSize
argument_list|,
name|cache
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if all blocks are properly cached and retrieved
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|HeapSize
name|buf
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|heapSize
argument_list|()
argument_list|,
name|block
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Re-add same blocks and ensure nothing has changed
name|long
name|expectedBlockCount
init|=
name|cache
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Cache should ignore cache requests for blocks already in cache"
argument_list|,
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify correctly calculated cache heap size
name|assertEquals
argument_list|(
name|expectedCacheSize
argument_list|,
name|cache
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check if all blocks are properly cached and retrieved
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|HeapSize
name|buf
init|=
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|buf
operator|.
name|heapSize
argument_list|()
argument_list|,
name|block
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Expect no evictions
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|LruBlockCache
operator|.
name|StatisticsThread
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheEvictionSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|blocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"block"
argument_list|)
decl_stmt|;
name|long
name|expectedCacheSize
init|=
name|cache
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// Add all the blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|blocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|block
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
block|}
comment|// A single eviction run should have occurred
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Our expected size overruns acceptable limit
name|assertTrue
argument_list|(
name|expectedCacheSize
operator|>
operator|(
name|maxSize
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
operator|)
argument_list|)
expr_stmt|;
comment|// But the cache did not grow beyond max
name|assertTrue
argument_list|(
name|cache
operator|.
name|heapSize
argument_list|()
operator|<
name|maxSize
argument_list|)
expr_stmt|;
comment|// And is still below the acceptable limit
name|assertTrue
argument_list|(
name|cache
operator|.
name|heapSize
argument_list|()
operator|<
operator|(
name|maxSize
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
operator|)
argument_list|)
expr_stmt|;
comment|// All blocks except block 0  should be in the cache
name|assertTrue
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|blocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|blocks
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|blocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|blocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheEvictionTwoPriorities
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSizeDefault
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|singleBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
literal|10000
argument_list|,
literal|"single"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|multiBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
literal|10000
argument_list|,
literal|"multi"
argument_list|)
decl_stmt|;
name|long
name|expectedCacheSize
init|=
name|cache
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// Add and get the multi blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|multiBlocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|block
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|block
argument_list|)
expr_stmt|;
block|}
comment|// Add the single blocks (no get)
for|for
control|(
name|CachedItem
name|block
range|:
name|singleBlocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|block
operator|.
name|heapSize
argument_list|()
expr_stmt|;
block|}
comment|// A single eviction run should have occurred
name|assertEquals
argument_list|(
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// We expect two entries evicted
name|assertEquals
argument_list|(
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Our expected size overruns acceptable limit
name|assertTrue
argument_list|(
name|expectedCacheSize
operator|>
operator|(
name|maxSize
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
operator|)
argument_list|)
expr_stmt|;
comment|// But the cache did not grow beyond max
name|assertTrue
argument_list|(
name|cache
operator|.
name|heapSize
argument_list|()
operator|<=
name|maxSize
argument_list|)
expr_stmt|;
comment|// And is now below the acceptable limit
name|assertTrue
argument_list|(
name|cache
operator|.
name|heapSize
argument_list|()
operator|<=
operator|(
name|maxSize
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
operator|)
argument_list|)
expr_stmt|;
comment|// We expect fairness across the two priorities.
comment|// This test makes multi go barely over its limit, in-memory
comment|// empty, and the rest in single.  Two single evictions and
comment|// one multi eviction expected.
name|assertTrue
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// And all others to be cached
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|multiBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheEvictionThreePriorities
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1.2
operator|*
name|maxSize
operator|/
name|blockSize
argument_list|)
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_LOAD_FACTOR
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
argument_list|,
literal|0.98f
argument_list|,
comment|// min
literal|0.99f
argument_list|,
comment|// acceptable
literal|0.33f
argument_list|,
comment|// single
literal|0.33f
argument_list|,
comment|// multi
literal|0.34f
argument_list|,
comment|// memory
literal|false
argument_list|,
literal|16
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|singleBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
name|blockSize
argument_list|,
literal|"single"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|multiBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
name|blockSize
argument_list|,
literal|"multi"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|memoryBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
name|blockSize
argument_list|,
literal|"memory"
argument_list|)
decl_stmt|;
name|long
name|expectedCacheSize
init|=
name|cache
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// Add 3 blocks from each priority
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
comment|// Just add single blocks
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
comment|// Add and get multi blocks
name|cache
operator|.
name|cacheBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|multiBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add memory blocks as such
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|memoryBlocks
index|[
name|i
index|]
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
block|}
comment|// Do not expect any evictions yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify cache size
name|assertEquals
argument_list|(
name|expectedCacheSize
argument_list|,
name|cache
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Insert a single block, oldest single should be evicted
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
literal|3
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// Single eviction, one thing evicted
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify oldest single block is the one evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Change the oldest remaining single block to a multi
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|1
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Insert another single block
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
literal|4
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Two evictions, two evicted.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Oldest multi block should be evicted now
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Insert another memory block
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|3
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|3
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Three evictions, three evicted.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Oldest memory block should be evicted now
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add a block that is twice as big (should force two evictions)
name|CachedItem
index|[]
name|bigBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|3
argument_list|,
name|blockSize
operator|*
literal|3
argument_list|,
literal|"big"
argument_list|)
decl_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|bigBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
name|bigBlocks
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Four evictions, six evicted (inserted block 3X size, expect +3 evicted)
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expect three remaining singles to be evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|2
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|3
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|4
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make the big block a multi block
name|cache
operator|.
name|getBlock
argument_list|(
name|bigBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Cache another single big block
name|cache
operator|.
name|cacheBlock
argument_list|(
name|bigBlocks
index|[
literal|1
index|]
operator|.
name|cacheKey
argument_list|,
name|bigBlocks
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Five evictions, nine evicted (3 new)
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expect three remaining multis to be evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|1
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|1
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|2
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cache a big memory block
name|cache
operator|.
name|cacheBlock
argument_list|(
name|bigBlocks
index|[
literal|2
index|]
operator|.
name|cacheKey
argument_list|,
name|bigBlocks
index|[
literal|2
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Six evictions, twelve evicted (3 new)
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expect three remaining in-memory to be evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
literal|1
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
literal|2
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
literal|3
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheEvictionInMemoryForceMode
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1.2
operator|*
name|maxSize
operator|/
name|blockSize
argument_list|)
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_LOAD_FACTOR
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
argument_list|,
literal|0.98f
argument_list|,
comment|// min
literal|0.99f
argument_list|,
comment|// acceptable
literal|0.2f
argument_list|,
comment|// single
literal|0.3f
argument_list|,
comment|// multi
literal|0.5f
argument_list|,
comment|// memory
literal|true
argument_list|,
literal|16
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|singleBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"single"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|multiBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"multi"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|memoryBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"memory"
argument_list|)
decl_stmt|;
name|long
name|expectedCacheSize
init|=
name|cache
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// 0. Add 5 single blocks and 4 multi blocks to make cache full, si:mu:me = 5:4:0
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
comment|// Just add single blocks
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
comment|// Add and get multi blocks
name|cache
operator|.
name|cacheBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|multiBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// 5th single block
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
literal|4
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|expectedCacheSize
operator|+=
name|singleBlocks
index|[
literal|4
index|]
operator|.
name|cacheBlockHeapSize
argument_list|()
expr_stmt|;
comment|// Do not expect any evictions yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify cache size
name|assertEquals
argument_list|(
name|expectedCacheSize
argument_list|,
name|cache
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// 1. Insert a memory block, oldest single should be evicted, si:mu:me = 4:4:1
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Single eviction, one block evicted
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify oldest single block (index = 0) is the one evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. Insert another memory block, another single evicted, si:mu:me = 3:4:2
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|1
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Two evictions, two evicted.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Current oldest single block (index = 1) should be evicted now
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|1
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. Insert 4 memory blocks, 2 single and 2 multi evicted, si:mu:me = 1:2:6
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|2
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|2
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|3
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|3
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|4
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|4
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|5
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|5
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Three evictions, three evicted.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// two oldest single blocks and two oldest multi blocks evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|2
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|3
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|1
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. Insert 3 memory blocks, the remaining 1 single and 2 multi evicted
comment|// si:mu:me = 0:0:9
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|6
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|6
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|7
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|7
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|8
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|8
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Three evictions, three evicted.
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// one oldest single block and two oldest multi blocks evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|4
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|2
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|3
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// 5. Insert one memory block, the oldest memory evicted
comment|// si:mu:me = 0:0:9
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
literal|9
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
literal|9
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// one eviction, one evicted.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// oldest memory block evicted
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// 6. Insert one new single block, itself evicted immediately since
comment|//    all blocks in cache are memory-type which have higher priority
comment|// si:mu:me = 0:0:9 (no change)
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
literal|9
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// one eviction, one evicted.
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// the single block just cached now evicted (can't evict memory)
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|9
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// test scan resistance
annotation|@
name|Test
specifier|public
name|void
name|testScanResistance
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1.2
operator|*
name|maxSize
operator|/
name|blockSize
argument_list|)
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_LOAD_FACTOR
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
argument_list|,
literal|0.66f
argument_list|,
comment|// min
literal|0.99f
argument_list|,
comment|// acceptable
literal|0.33f
argument_list|,
comment|// single
literal|0.33f
argument_list|,
comment|// multi
literal|0.34f
argument_list|,
comment|// memory
literal|false
argument_list|,
literal|16
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|singleBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|20
argument_list|,
name|blockSize
argument_list|,
literal|"single"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|multiBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|5
argument_list|,
name|blockSize
argument_list|,
literal|"multi"
argument_list|)
decl_stmt|;
comment|// Add 5 multi blocks
for|for
control|(
name|CachedItem
name|block
range|:
name|multiBlocks
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getBlock
argument_list|(
name|block
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// Add 5 single blocks
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// An eviction ran
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// To drop down to 2/3 capacity, we'll need to evict 4 blocks
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should have been taken off equally from single and multi
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
literal|1
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|0
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
literal|1
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let's keep "scanning" by adding single blocks.  From here on we only
comment|// expect evictions from the single bucket.
comment|// Every time we reach 10 total blocks (every 4 inserts) we get 4 single
comment|// blocks evicted.  Inserting 13 blocks should yield 3 more evictions and
comment|// 12 more evicted.
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|18
condition|;
name|i
operator|++
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// 4 total evictions, 16 total evicted
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should now have 7 total blocks
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxBlockSize
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|100000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1.2
operator|*
name|maxSize
operator|/
name|blockSize
argument_list|)
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_LOAD_FACTOR
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
argument_list|,
literal|0.66f
argument_list|,
comment|// min
literal|0.99f
argument_list|,
comment|// acceptable
literal|0.33f
argument_list|,
comment|// single
literal|0.33f
argument_list|,
comment|// multi
literal|0.34f
argument_list|,
comment|// memory
literal|false
argument_list|,
literal|1024
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|tooLong
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
literal|1024
operator|+
literal|5
argument_list|,
literal|"long"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|small
init|=
name|generateFixedBlocks
argument_list|(
literal|15
argument_list|,
literal|600
argument_list|,
literal|"small"
argument_list|)
decl_stmt|;
for|for
control|(
name|CachedItem
name|i
range|:
name|tooLong
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|i
operator|.
name|cacheKey
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CachedItem
name|i
range|:
name|small
control|)
block|{
name|cache
operator|.
name|cacheBlock
argument_list|(
name|i
operator|.
name|cacheKey
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CachedItem
name|i
range|:
name|small
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|i
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CachedItem
name|i
range|:
name|tooLong
control|)
block|{
name|assertNull
argument_list|(
name|cache
operator|.
name|getBlock
argument_list|(
name|i
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getFailedInserts
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// test setMaxSize
annotation|@
name|Test
specifier|public
name|void
name|testResizeBlockCache
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|maxSize
init|=
literal|300000
decl_stmt|;
name|long
name|blockSize
init|=
name|calculateBlockSize
argument_list|(
name|maxSize
argument_list|,
literal|31
argument_list|)
decl_stmt|;
name|LruBlockCache
name|cache
init|=
operator|new
name|LruBlockCache
argument_list|(
name|maxSize
argument_list|,
name|blockSize
argument_list|,
literal|false
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
literal|1.2
operator|*
name|maxSize
operator|/
name|blockSize
argument_list|)
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_LOAD_FACTOR
argument_list|,
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
argument_list|,
literal|0.98f
argument_list|,
comment|// min
literal|0.99f
argument_list|,
comment|// acceptable
literal|0.33f
argument_list|,
comment|// single
literal|0.33f
argument_list|,
comment|// multi
literal|0.34f
argument_list|,
comment|// memory
literal|false
argument_list|,
literal|16
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|singleBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"single"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|multiBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"multi"
argument_list|)
decl_stmt|;
name|CachedItem
index|[]
name|memoryBlocks
init|=
name|generateFixedBlocks
argument_list|(
literal|10
argument_list|,
name|blockSize
argument_list|,
literal|"memory"
argument_list|)
decl_stmt|;
comment|// Add all blocks from all priorities
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// Just add single blocks
name|cache
operator|.
name|cacheBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|singleBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Add and get multi blocks
name|cache
operator|.
name|cacheBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|multiBlocks
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add memory blocks as such
name|cache
operator|.
name|cacheBlock
argument_list|(
name|memoryBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
name|memoryBlocks
index|[
name|i
index|]
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Do not expect any evictions yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Resize to half capacity plus an extra block (otherwise we evict an extra)
name|cache
operator|.
name|setMaxSize
argument_list|(
call|(
name|long
call|)
argument_list|(
name|maxSize
operator|*
literal|0.5f
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should have run a single eviction
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictionCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// And we expect 1/2 of the blocks to be evicted
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// And the oldest 5 blocks from each category should be gone
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// And the newest 5 blocks should still be accessible
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|singleBlocks
index|[
name|i
index|]
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|singleBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|multiBlocks
index|[
name|i
index|]
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|multiBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|memoryBlocks
index|[
name|i
index|]
argument_list|,
name|cache
operator|.
name|getBlock
argument_list|(
name|memoryBlocks
index|[
name|i
index|]
operator|.
name|cacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test metricsPastNPeriods
annotation|@
name|Test
specifier|public
name|void
name|testPastNPeriodsMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|double
name|delta
init|=
literal|0.01
decl_stmt|;
comment|// 3 total periods
name|CacheStats
name|stats
init|=
operator|new
name|CacheStats
argument_list|(
literal|"test"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
comment|// No accesses, should be 0
name|stats
operator|.
name|rollMetricsPeriod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|stats
operator|.
name|getHitRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|stats
operator|.
name|getHitCachingRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// period 1, 1 hit caching, 1 hit non-caching, 2 miss non-caching
comment|// should be (2/4)=0.5 and (1/1)=1
name|stats
operator|.
name|hit
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|hit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|miss
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|miss
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|rollMetricsPeriod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|stats
operator|.
name|getHitRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|stats
operator|.
name|getHitCachingRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// period 2, 1 miss caching, 3 miss non-caching
comment|// should be (2/8)=0.25 and (1/2)=0.5
name|stats
operator|.
name|miss
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|miss
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|miss
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|miss
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|rollMetricsPeriod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.25
argument_list|,
name|stats
operator|.
name|getHitRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|stats
operator|.
name|getHitCachingRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// period 3, 2 hits of each type
comment|// should be (6/12)=0.5 and (3/4)=0.75
name|stats
operator|.
name|hit
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|hit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|hit
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|hit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|rollMetricsPeriod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|stats
operator|.
name|getHitRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.75
argument_list|,
name|stats
operator|.
name|getHitCachingRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// period 4, evict period 1, two caching misses
comment|// should be (4/10)=0.4 and (2/5)=0.4
name|stats
operator|.
name|miss
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|miss
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|rollMetricsPeriod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.4
argument_list|,
name|stats
operator|.
name|getHitRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.4
argument_list|,
name|stats
operator|.
name|getHitCachingRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// period 5, evict period 2, 2 caching misses, 2 non-caching hit
comment|// should be (6/10)=0.6 and (2/6)=1/3
name|stats
operator|.
name|miss
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|miss
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|hit
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|hit
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|rollMetricsPeriod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.6
argument_list|,
name|stats
operator|.
name|getHitRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
literal|1
operator|/
literal|3
argument_list|,
name|stats
operator|.
name|getHitCachingRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// period 6, evict period 3
comment|// should be (2/6)=1/3 and (0/4)=0
name|stats
operator|.
name|rollMetricsPeriod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
literal|1
operator|/
literal|3
argument_list|,
name|stats
operator|.
name|getHitRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|stats
operator|.
name|getHitCachingRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// period 7, evict period 4
comment|// should be (2/4)=0.5 and (0/2)=0
name|stats
operator|.
name|rollMetricsPeriod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|stats
operator|.
name|getHitRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|stats
operator|.
name|getHitCachingRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// period 8, evict period 5
comment|// should be 0 and 0
name|stats
operator|.
name|rollMetricsPeriod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|stats
operator|.
name|getHitRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|stats
operator|.
name|getHitCachingRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
comment|// period 9, one of each
comment|// should be (2/4)=0.5 and (1/2)=0.5
name|stats
operator|.
name|miss
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|miss
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|hit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|hit
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
expr_stmt|;
name|stats
operator|.
name|rollMetricsPeriod
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|stats
operator|.
name|getHitRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|stats
operator|.
name|getHitCachingRatioPastNPeriods
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CachedItem
index|[]
name|generateFixedBlocks
parameter_list|(
name|int
name|numBlocks
parameter_list|,
name|int
name|size
parameter_list|,
name|String
name|pfx
parameter_list|)
block|{
name|CachedItem
index|[]
name|blocks
init|=
operator|new
name|CachedItem
index|[
name|numBlocks
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|CachedItem
argument_list|(
name|pfx
operator|+
name|i
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
return|return
name|blocks
return|;
block|}
specifier|private
name|CachedItem
index|[]
name|generateFixedBlocks
parameter_list|(
name|int
name|numBlocks
parameter_list|,
name|long
name|size
parameter_list|,
name|String
name|pfx
parameter_list|)
block|{
return|return
name|generateFixedBlocks
argument_list|(
name|numBlocks
argument_list|,
operator|(
name|int
operator|)
name|size
argument_list|,
name|pfx
argument_list|)
return|;
block|}
specifier|private
name|CachedItem
index|[]
name|generateRandomBlocks
parameter_list|(
name|int
name|numBlocks
parameter_list|,
name|long
name|maxSize
parameter_list|)
block|{
name|CachedItem
index|[]
name|blocks
init|=
operator|new
name|CachedItem
index|[
name|numBlocks
index|]
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBlocks
condition|;
name|i
operator|++
control|)
block|{
name|blocks
index|[
name|i
index|]
operator|=
operator|new
name|CachedItem
argument_list|(
literal|"block"
operator|+
name|i
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
operator|(
name|int
operator|)
name|maxSize
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|blocks
return|;
block|}
specifier|private
name|long
name|calculateBlockSize
parameter_list|(
name|long
name|maxSize
parameter_list|,
name|int
name|numBlocks
parameter_list|)
block|{
name|long
name|roughBlockSize
init|=
name|maxSize
operator|/
name|numBlocks
decl_stmt|;
name|int
name|numEntries
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.2
operator|)
operator|*
name|maxSize
operator|/
name|roughBlockSize
argument_list|)
decl_stmt|;
name|long
name|totalOverhead
init|=
name|LruBlockCache
operator|.
name|CACHE_FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP
operator|+
operator|(
name|numEntries
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_ENTRY
operator|)
operator|+
operator|(
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_SEGMENT
operator|)
decl_stmt|;
name|long
name|negateBlockSize
init|=
call|(
name|long
call|)
argument_list|(
name|totalOverhead
operator|/
name|numEntries
argument_list|)
decl_stmt|;
name|negateBlockSize
operator|+=
name|LruCachedBlock
operator|.
name|PER_BLOCK_OVERHEAD
expr_stmt|;
return|return
name|ClassSize
operator|.
name|align
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|roughBlockSize
operator|-
name|negateBlockSize
operator|)
operator|*
literal|0.99f
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|long
name|calculateBlockSizeDefault
parameter_list|(
name|long
name|maxSize
parameter_list|,
name|int
name|numBlocks
parameter_list|)
block|{
name|long
name|roughBlockSize
init|=
name|maxSize
operator|/
name|numBlocks
decl_stmt|;
name|int
name|numEntries
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.2
operator|)
operator|*
name|maxSize
operator|/
name|roughBlockSize
argument_list|)
decl_stmt|;
name|long
name|totalOverhead
init|=
name|LruBlockCache
operator|.
name|CACHE_FIXED_OVERHEAD
operator|+
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP
operator|+
operator|(
name|numEntries
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_ENTRY
operator|)
operator|+
operator|(
name|LruBlockCache
operator|.
name|DEFAULT_CONCURRENCY_LEVEL
operator|*
name|ClassSize
operator|.
name|CONCURRENT_HASHMAP_SEGMENT
operator|)
decl_stmt|;
name|long
name|negateBlockSize
init|=
name|totalOverhead
operator|/
name|numEntries
decl_stmt|;
name|negateBlockSize
operator|+=
name|LruCachedBlock
operator|.
name|PER_BLOCK_OVERHEAD
expr_stmt|;
return|return
name|ClassSize
operator|.
name|align
argument_list|(
operator|(
name|long
operator|)
name|Math
operator|.
name|floor
argument_list|(
operator|(
name|roughBlockSize
operator|-
name|negateBlockSize
operator|)
operator|*
name|LruBlockCache
operator|.
name|DEFAULT_ACCEPTABLE_FACTOR
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|CachedItem
implements|implements
name|Cacheable
block|{
name|BlockCacheKey
name|cacheKey
decl_stmt|;
name|int
name|size
decl_stmt|;
name|CachedItem
parameter_list|(
name|String
name|blockName
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|this
operator|.
name|cacheKey
operator|=
operator|new
name|BlockCacheKey
argument_list|(
name|blockName
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
name|CachedItem
parameter_list|(
name|String
name|blockName
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|cacheKey
operator|=
operator|new
name|BlockCacheKey
argument_list|(
name|blockName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
comment|/** The size of this item reported to the block cache layer */
annotation|@
name|Override
specifier|public
name|long
name|heapSize
parameter_list|()
block|{
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|size
argument_list|)
return|;
block|}
comment|/** Size of the cache block holding this item. Used for verification. */
specifier|public
name|long
name|cacheBlockHeapSize
parameter_list|()
block|{
return|return
name|LruCachedBlock
operator|.
name|PER_BLOCK_OVERHEAD
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|cacheKey
operator|.
name|heapSize
argument_list|()
argument_list|)
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|size
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSerializedLength
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|CacheableDeserializer
argument_list|<
name|Cacheable
argument_list|>
name|getDeserializer
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|serialize
parameter_list|(
name|ByteBuffer
name|destination
parameter_list|)
block|{     }
annotation|@
name|Override
specifier|public
name|BlockType
name|getBlockType
parameter_list|()
block|{
return|return
name|BlockType
operator|.
name|DATA
return|;
block|}
annotation|@
name|Override
specifier|public
name|MemoryType
name|getMemoryType
parameter_list|()
block|{
return|return
name|MemoryType
operator|.
name|EXCLUSIVE
return|;
block|}
block|}
block|}
end_class

end_unit

