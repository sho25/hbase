begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClientServiceCallable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|log
operator|.
name|HBaseMarkers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TestHRegionServerBulkLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|BulkLoadHFileRequest
import|;
end_import

begin_comment
comment|/**  * Test cases for the atomic load error handling of the bulk load functionality.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestLoadIncrementalHFilesSplitRecovery
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestLoadIncrementalHFilesSplitRecovery
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHRegionServerBulkLoad
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|HBaseTestingUtility
name|util
decl_stmt|;
comment|// used by secure subclass
specifier|static
name|boolean
name|useSecure
init|=
literal|false
decl_stmt|;
specifier|final
specifier|static
name|int
name|NUM_CFS
init|=
literal|10
decl_stmt|;
specifier|final
specifier|static
name|byte
index|[]
name|QUAL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
specifier|final
specifier|static
name|int
name|ROWCOUNT
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
index|[]
name|families
init|=
operator|new
name|byte
index|[
name|NUM_CFS
index|]
index|[]
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CFS
condition|;
name|i
operator|++
control|)
block|{
name|families
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|byte
index|[]
name|rowkey
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"row_%08d"
argument_list|,
name|i
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|String
name|family
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"family_%04d"
argument_list|,
name|i
argument_list|)
return|;
block|}
specifier|static
name|byte
index|[]
name|value
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%010d"
argument_list|,
name|i
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|buildHFiles
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|dir
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|val
init|=
name|value
argument_list|(
name|value
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_CFS
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|testIn
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|family
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|TestHRegionServerBulkLoad
operator|.
name|createHFile
argument_list|(
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|testIn
argument_list|,
literal|"hfile_"
operator|+
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|QUAL
argument_list|,
name|val
argument_list|,
name|ROWCOUNT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|TableDescriptor
name|createTableDesc
parameter_list|(
name|TableName
name|name
parameter_list|,
name|int
name|cfs
parameter_list|)
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
name|cfs
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|family
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|forEachOrdered
argument_list|(
name|builder
operator|::
name|addColumnFamily
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Creates a table with given table name and specified number of column families if the table does    * not already exist.    */
specifier|private
name|void
name|setupTable
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
name|TableName
name|table
parameter_list|,
name|int
name|cfs
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table "
operator|+
name|table
argument_list|)
expr_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|createTableDesc
argument_list|(
name|table
argument_list|,
name|cfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|tee
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|table
operator|+
literal|" already exists"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Creates a table with given table name,specified number of column families<br>    * and splitkeys if the table does not already exist.    * @param table    * @param cfs    * @param SPLIT_KEYS    */
specifier|private
name|void
name|setupTableWithSplitkeys
parameter_list|(
name|TableName
name|table
parameter_list|,
name|int
name|cfs
parameter_list|,
name|byte
index|[]
index|[]
name|SPLIT_KEYS
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table "
operator|+
name|table
argument_list|)
expr_stmt|;
name|util
operator|.
name|createTable
argument_list|(
name|createTableDesc
argument_list|(
name|table
argument_list|,
name|cfs
argument_list|)
argument_list|,
name|SPLIT_KEYS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|tee
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|table
operator|+
literal|" already exists"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Path
name|buildBulkFiles
parameter_list|(
name|TableName
name|table
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|util
operator|.
name|getDataTestDirOnTestFS
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|bulk1
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
name|value
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|util
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|buildHFiles
argument_list|(
name|fs
argument_list|,
name|bulk1
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|bulk1
return|;
block|}
comment|/**    * Populate table with known values.    */
specifier|private
name|void
name|populateTable
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
name|TableName
name|table
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|Exception
block|{
comment|// create HFiles for different column families
name|LoadIncrementalHFiles
name|lih
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|bulk1
init|=
name|buildBulkFiles
argument_list|(
name|table
argument_list|,
name|value
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|table
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|lih
operator|.
name|doBulkLoad
argument_list|(
name|bulk1
argument_list|,
name|admin
argument_list|,
name|t
argument_list|,
name|locator
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Split the known table in half. (this is hard coded for this test suite)    */
specifier|private
name|void
name|forceSplit
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
try|try
block|{
comment|// need to call regions server to by synchronous but isn't visible.
name|HRegionServer
name|hrs
init|=
name|util
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|hri
range|:
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|splitRegionAsync
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|rowkey
argument_list|(
name|ROWCOUNT
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// ProtobufUtil.split(null, hrs.getRSRpcServices(), hri, rowkey(ROWCOUNT / 2));
block|}
block|}
comment|// verify that split completed.
name|int
name|regions
decl_stmt|;
do|do
block|{
name|regions
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|RegionInfo
name|hri
range|:
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|hrs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|regions
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|regions
operator|!=
literal|2
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Taking some time to complete split..."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|regions
operator|!=
literal|2
condition|)
do|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|teardownCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Checks that all columns have the expected value and that there is the expected number of rows.    * @throws IOException    */
name|void
name|assertExpectedTable
parameter_list|(
name|TableName
name|table
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|TableDescriptor
name|htd
init|=
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|getDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|htd
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|util
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
init|;
name|ResultScanner
name|sr
operator|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
init|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
init|;
operator|(
name|r
operator|=
name|sr
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|r
operator|.
name|getNoVersionMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|m
lambda|->
name|m
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|v
lambda|->
name|assertArrayEquals
argument_list|(
name|value
argument_list|(
name|value
argument_list|)
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed due to exception"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that shows that exception thrown from the RS side will result in an exception on the    * LIHFile client.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|,
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testBulkLoadPhaseFailure
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|attmptedCalls
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|final
name|AtomicInteger
name|failedCalls
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|setupTable
argument_list|(
name|connection
argument_list|,
name|table
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|LoadIncrementalHFiles
name|lih
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
name|tryAtomicRegionLoad
parameter_list|(
name|ClientServiceCallable
argument_list|<
name|byte
index|[]
argument_list|>
name|serviceCallable
parameter_list|,
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|first
parameter_list|,
name|Collection
argument_list|<
name|LoadQueueItem
argument_list|>
name|lqis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
name|attmptedCalls
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
name|Connection
name|errConn
decl_stmt|;
try|try
block|{
name|errConn
operator|=
name|getMockedConnection
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|serviceCallable
operator|=
name|this
operator|.
name|buildClientServiceCallable
argument_list|(
name|errConn
argument_list|,
name|table
argument_list|,
name|first
argument_list|,
name|lqis
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|HBaseMarkers
operator|.
name|FATAL
argument_list|,
literal|"mocking cruft, should never happen"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"mocking cruft, should never happen"
argument_list|)
throw|;
block|}
name|failedCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|tryAtomicRegionLoad
argument_list|(
name|serviceCallable
argument_list|,
name|tableName
argument_list|,
name|first
argument_list|,
name|lqis
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|tryAtomicRegionLoad
argument_list|(
name|serviceCallable
argument_list|,
name|tableName
argument_list|,
name|first
argument_list|,
name|lqis
argument_list|)
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
comment|// create HFiles for different column families
name|Path
name|dir
init|=
name|buildBulkFiles
argument_list|(
name|table
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|table
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|lih
operator|.
name|doBulkLoad
argument_list|(
name|dir
argument_list|,
name|admin
argument_list|,
name|t
argument_list|,
name|locator
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"doBulkLoad should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that shows that exception thrown from the RS side will result in the expected number of    * retries set by ${@link HConstants#HBASE_CLIENT_RETRIES_NUMBER} when    * ${@link LoadIncrementalHFiles#RETRY_ON_IO_EXCEPTION} is set    */
annotation|@
name|Test
specifier|public
name|void
name|testRetryOnIOException
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|calls
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|LoadIncrementalHFiles
operator|.
name|RETRY_ON_IO_EXCEPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|LoadIncrementalHFiles
name|lih
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
name|tryAtomicRegionLoad
parameter_list|(
name|ClientServiceCallable
argument_list|<
name|byte
index|[]
argument_list|>
name|serverCallable
parameter_list|,
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|first
parameter_list|,
name|Collection
argument_list|<
name|LoadQueueItem
argument_list|>
name|lqis
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|calls
operator|.
name|getAndIncrement
argument_list|()
operator|<
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_CLIENT_RETRIES_NUMBER
argument_list|)
operator|-
literal|1
condition|)
block|{
name|ClientServiceCallable
argument_list|<
name|byte
index|[]
argument_list|>
name|newServerCallable
init|=
operator|new
name|ClientServiceCallable
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|conn
argument_list|,
name|tableName
argument_list|,
name|first
argument_list|,
operator|new
name|RpcControllerFactory
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|newController
argument_list|()
argument_list|,
name|HConstants
operator|.
name|PRIORITY_UNSET
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|rpcCall
parameter_list|()
throws|throws
name|Exception
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error calling something on RegionServer"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
return|return
name|super
operator|.
name|tryAtomicRegionLoad
argument_list|(
name|newServerCallable
argument_list|,
name|tableName
argument_list|,
name|first
argument_list|,
name|lqis
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|tryAtomicRegionLoad
argument_list|(
name|serverCallable
argument_list|,
name|tableName
argument_list|,
name|first
argument_list|,
name|lqis
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
name|setupTable
argument_list|(
name|conn
argument_list|,
name|table
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
name|buildBulkFiles
argument_list|(
name|table
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|lih
operator|.
name|doBulkLoad
argument_list|(
name|dir
argument_list|,
name|conn
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|conn
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
argument_list|,
name|conn
operator|.
name|getRegionLocator
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|LoadIncrementalHFiles
operator|.
name|RETRY_ON_IO_EXCEPTION
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ClusterConnection
name|getMockedConnection
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
block|{
name|ClusterConnection
name|c
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClusterConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|c
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make it so we return a particular location when asked.
specifier|final
name|HRegionLocation
name|loc
init|=
operator|new
name|HRegionLocation
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"example.org"
argument_list|,
literal|1234
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getRegionLocation
argument_list|(
operator|(
name|TableName
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|locateRegion
argument_list|(
operator|(
name|TableName
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
name|hri
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hri
operator|.
name|bulkLoadHFile
argument_list|(
operator|(
name|RpcController
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|BulkLoadHFileRequest
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ServiceException
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"injecting bulk load error"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getClient
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hri
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
comment|/**    * This test exercises the path where there is a split after initial validation but before the    * atomic bulk load call. We cannot use presplitting to test this path, so we actually inject a    * split just before the atomic region load.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testSplitWhileBulkLoadPhase
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|setupTable
argument_list|(
name|connection
argument_list|,
name|table
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|populateTable
argument_list|(
name|connection
argument_list|,
name|table
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertExpectedTable
argument_list|(
name|table
argument_list|,
name|ROWCOUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Now let's cause trouble. This will occur after checks and cause bulk
comment|// files to fail when attempt to atomically import. This is recoverable.
specifier|final
name|AtomicInteger
name|attemptedCalls
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|LoadIncrementalHFiles
name|lih2
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|bulkLoadPhase
parameter_list|(
specifier|final
name|Table
name|htable
parameter_list|,
specifier|final
name|Connection
name|conn
parameter_list|,
name|ExecutorService
name|pool
parameter_list|,
name|Deque
argument_list|<
name|LoadQueueItem
argument_list|>
name|queue
parameter_list|,
specifier|final
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|regionGroups
parameter_list|,
name|boolean
name|copyFile
parameter_list|,
name|Map
argument_list|<
name|LoadQueueItem
argument_list|,
name|ByteBuffer
argument_list|>
name|item2RegionMap
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
name|attemptedCalls
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
block|{
comment|// On first attempt force a split.
name|forceSplit
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|bulkLoadPhase
argument_list|(
name|htable
argument_list|,
name|conn
argument_list|,
name|pool
argument_list|,
name|queue
argument_list|,
name|regionGroups
argument_list|,
name|copyFile
argument_list|,
name|item2RegionMap
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// create HFiles for different column families
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|table
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|Path
name|bulk
init|=
name|buildBulkFiles
argument_list|(
name|table
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|lih2
operator|.
name|doBulkLoad
argument_list|(
name|bulk
argument_list|,
name|admin
argument_list|,
name|t
argument_list|,
name|locator
argument_list|)
expr_stmt|;
block|}
comment|// check that data was loaded
comment|// The three expected attempts are 1) failure because need to split, 2)
comment|// load of split top 3) load of split bottom
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|attemptedCalls
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertExpectedTable
argument_list|(
name|table
argument_list|,
name|ROWCOUNT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test splits a table and attempts to bulk load. The bulk import files should be split    * before atomically importing.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testGroupOrSplitPresplit
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|setupTable
argument_list|(
name|connection
argument_list|,
name|table
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|populateTable
argument_list|(
name|connection
argument_list|,
name|table
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertExpectedTable
argument_list|(
name|connection
argument_list|,
name|table
argument_list|,
name|ROWCOUNT
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|forceSplit
argument_list|(
name|table
argument_list|)
expr_stmt|;
specifier|final
name|AtomicInteger
name|countedLqis
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|LoadIncrementalHFiles
name|lih
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
name|groupOrSplit
parameter_list|(
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|regionGroups
parameter_list|,
specifier|final
name|LoadQueueItem
name|item
parameter_list|,
specifier|final
name|Table
name|htable
parameter_list|,
specifier|final
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|startEndKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
name|lqis
init|=
name|super
operator|.
name|groupOrSplit
argument_list|(
name|regionGroups
argument_list|,
name|item
argument_list|,
name|htable
argument_list|,
name|startEndKeys
argument_list|)
decl_stmt|;
if|if
condition|(
name|lqis
operator|!=
literal|null
operator|&&
name|lqis
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|countedLqis
operator|.
name|addAndGet
argument_list|(
name|lqis
operator|.
name|getFirst
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|lqis
return|;
block|}
block|}
decl_stmt|;
comment|// create HFiles for different column families
name|Path
name|bulk
init|=
name|buildBulkFiles
argument_list|(
name|table
argument_list|,
literal|2
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|table
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|lih
operator|.
name|doBulkLoad
argument_list|(
name|bulk
argument_list|,
name|admin
argument_list|,
name|t
argument_list|,
name|locator
argument_list|)
expr_stmt|;
block|}
name|assertExpectedTable
argument_list|(
name|connection
argument_list|,
name|table
argument_list|,
name|ROWCOUNT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|countedLqis
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test creates a table with many small regions. The bulk load files would be splitted    * multiple times before all of them can be loaded successfully.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testSplitTmpFileCleanUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|SPLIT_KEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_00000010"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_00000020"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_00000030"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_00000040"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_00000050"
argument_list|)
block|}
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|setupTableWithSplitkeys
argument_list|(
name|table
argument_list|,
literal|10
argument_list|,
name|SPLIT_KEYS
argument_list|)
expr_stmt|;
name|LoadIncrementalHFiles
name|lih
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// create HFiles
name|Path
name|bulk
init|=
name|buildBulkFiles
argument_list|(
name|table
argument_list|,
literal|2
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|table
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|lih
operator|.
name|doBulkLoad
argument_list|(
name|bulk
argument_list|,
name|admin
argument_list|,
name|t
argument_list|,
name|locator
argument_list|)
expr_stmt|;
block|}
comment|// family path
name|Path
name|tmpPath
init|=
operator|new
name|Path
argument_list|(
name|bulk
argument_list|,
name|family
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// TMP_DIR under family path
name|tmpPath
operator|=
operator|new
name|Path
argument_list|(
name|tmpPath
argument_list|,
name|LoadIncrementalHFiles
operator|.
name|TMP_DIR
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|bulk
operator|.
name|getFileSystem
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// HFiles have been splitted, there is TMP_DIR
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// TMP_DIR should have been cleaned-up
name|assertNull
argument_list|(
name|LoadIncrementalHFiles
operator|.
name|TMP_DIR
operator|+
literal|" should be empty."
argument_list|,
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|tmpPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertExpectedTable
argument_list|(
name|connection
argument_list|,
name|table
argument_list|,
name|ROWCOUNT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This simulates an remote exception which should cause LIHF to exit with an exception.    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|,
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testGroupOrSplitFailure
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|setupTable
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|LoadIncrementalHFiles
name|lih
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
name|groupOrSplit
parameter_list|(
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|regionGroups
parameter_list|,
specifier|final
name|LoadQueueItem
name|item
parameter_list|,
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|startEndKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|5
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"failure"
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|groupOrSplit
argument_list|(
name|regionGroups
argument_list|,
name|item
argument_list|,
name|table
argument_list|,
name|startEndKeys
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// create HFiles for different column families
name|Path
name|dir
init|=
name|buildBulkFiles
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|lih
operator|.
name|doBulkLoad
argument_list|(
name|dir
argument_list|,
name|admin
argument_list|,
name|t
argument_list|,
name|locator
argument_list|)
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"doBulkLoad should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testGroupOrSplitWhenRegionHoleExistsInMeta
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|SPLIT_KEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_00000100"
argument_list|)
block|}
decl_stmt|;
comment|// Share connection. We were failing to find the table with our new reverse scan because it
comment|// looks for first region, not any region -- that is how it works now. The below removes first
comment|// region in test. Was reliant on the Connection caching having first region.
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|setupTableWithSplitkeys
argument_list|(
name|tableName
argument_list|,
literal|10
argument_list|,
name|SPLIT_KEYS
argument_list|)
expr_stmt|;
name|Path
name|dir
init|=
name|buildBulkFiles
argument_list|(
name|tableName
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|countedLqis
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|LoadIncrementalHFiles
name|loader
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
name|groupOrSplit
parameter_list|(
name|Multimap
argument_list|<
name|ByteBuffer
argument_list|,
name|LoadQueueItem
argument_list|>
name|regionGroups
parameter_list|,
specifier|final
name|LoadQueueItem
name|item
parameter_list|,
specifier|final
name|Table
name|htable
parameter_list|,
specifier|final
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|startEndKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Pair
argument_list|<
name|List
argument_list|<
name|LoadQueueItem
argument_list|>
argument_list|,
name|String
argument_list|>
name|lqis
init|=
name|super
operator|.
name|groupOrSplit
argument_list|(
name|regionGroups
argument_list|,
name|item
argument_list|,
name|htable
argument_list|,
name|startEndKeys
argument_list|)
decl_stmt|;
if|if
condition|(
name|lqis
operator|!=
literal|null
operator|&&
name|lqis
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|countedLqis
operator|.
name|addAndGet
argument_list|(
name|lqis
operator|.
name|getFirst
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|lqis
return|;
block|}
block|}
decl_stmt|;
comment|// do bulkload when there is no region hole in hbase:meta.
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|loader
operator|.
name|doBulkLoad
argument_list|(
name|dir
argument_list|,
name|admin
argument_list|,
name|t
argument_list|,
name|locator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"exeception="
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// check if all the data are loaded into the table.
name|this
operator|.
name|assertExpectedTable
argument_list|(
name|tableName
argument_list|,
name|ROWCOUNT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|dir
operator|=
name|buildBulkFiles
argument_list|(
name|tableName
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Mess it up by leaving a hole in the hbase:meta
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|regionInfos
control|)
block|{
if|if
condition|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
condition|)
block|{
name|MetaTableAccessor
operator|.
name|deleteRegion
argument_list|(
name|connection
argument_list|,
name|regionInfo
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|loader
operator|.
name|doBulkLoad
argument_list|(
name|dir
argument_list|,
name|admin
argument_list|,
name|t
argument_list|,
name|locator
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"exception="
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"IOException expected"
argument_list|,
name|e
operator|instanceof
name|IOException
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make sure at least the one region that still exists can be found.
name|regionInfos
operator|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionInfos
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|assertExpectedTable
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|ROWCOUNT
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Checks that all columns have the expected value and that there is the expected number of rows.    * @throws IOException    */
name|void
name|assertExpectedTable
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
name|TableName
name|table
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|TableDescriptor
name|htd
init|=
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|getDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|htd
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|table
argument_list|)
init|;
name|ResultScanner
name|sr
operator|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
init|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
init|;
operator|(
name|r
operator|=
name|sr
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|r
operator|.
name|getNoVersionMap
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|m
lambda|->
name|m
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|v
lambda|->
name|assertArrayEquals
argument_list|(
name|value
argument_list|(
name|value
argument_list|)
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Failed due to exception"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

