begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MiniBatchOperationInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MultiRowMutationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestFromClientSide3
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFromClientSide3
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|SLAVES
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ANOTHERROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"anotherrow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|COL_QUAL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|VAL_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|ROW_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|HTableDescriptor
name|htd
range|:
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|listTables
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Tear down, remove table="
operator|+
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|randomCFPuts
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|nPuts
parameter_list|)
throws|throws
name|Exception
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nPuts
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|performMultiplePutAndFlush
parameter_list|(
name|HBaseAdmin
name|admin
parameter_list|,
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|int
name|nFlushes
parameter_list|,
name|int
name|nPuts
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
comment|// connection needed for poll-wait
name|HRegionLocation
name|loc
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
name|server
init|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|admin
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getAdmin
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|regName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nFlushes
condition|;
name|i
operator|++
control|)
block|{
name|randomCFPuts
argument_list|(
name|table
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|nPuts
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sf
init|=
name|ProtobufUtil
operator|.
name|getStoreFiles
argument_list|(
name|server
argument_list|,
name|regName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|int
name|sfCount
init|=
name|sf
operator|.
name|size
argument_list|()
decl_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// override the config settings at the CF level and ensure priority
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAdvancedConfigOverride
parameter_list|()
throws|throws
name|Exception
block|{
comment|/*      * Overall idea: (1) create 3 store files and issue a compaction. config's      * compaction.min == 3, so should work. (2) Increase the compaction.min      * toggle in the HTD to 5 and modify table. If we use the HTD value instead      * of the default config value, adding 3 files and issuing a compaction      * SHOULD NOT work (3) Decrease the compaction.min toggle in the HCD to 2      * and modify table. The CF schema should override the Table schema and now      * cause a minor compaction.      */
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testAdvancedConfigOverride"
argument_list|)
decl_stmt|;
name|Table
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|ClusterConnection
name|connection
init|=
operator|(
name|ClusterConnection
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
comment|// Create 3 store files.
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|performMultiplePutAndFlush
argument_list|(
operator|(
name|HBaseAdmin
operator|)
name|admin
argument_list|,
name|hTable
argument_list|,
name|row
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|,
literal|100
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
comment|// Verify we have multiple store files.
name|HRegionLocation
name|loc
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
name|server
init|=
name|connection
operator|.
name|getAdmin
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ProtobufUtil
operator|.
name|getStoreFiles
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// Issue a compaction request
name|admin
operator|.
name|compact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// poll wait for the compactions to happen
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|*
literal|1000
operator|/
literal|40
condition|;
operator|++
name|i
control|)
block|{
comment|// The number of store files after compaction should be lesser.
name|loc
operator|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|isOffline
argument_list|()
condition|)
block|{
name|regionName
operator|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
name|server
operator|=
name|connection
operator|.
name|getAdmin
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ProtobufUtil
operator|.
name|getStoreFiles
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
break|break;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
comment|// verify the compactions took place and that we didn't just time out
name|assertTrue
argument_list|(
name|ProtobufUtil
operator|.
name|getStoreFiles
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
comment|// change the compaction.min config option for this table to 5
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase.hstore.compaction.min should now be 5"
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|hTable
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setValue
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|st
decl_stmt|;
while|while
condition|(
literal|null
operator|!=
operator|(
name|st
operator|=
name|admin
operator|.
name|getAlterStatus
argument_list|(
name|tableName
argument_list|)
operator|)
operator|&&
name|st
operator|.
name|getFirst
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|st
operator|.
name|getFirst
argument_list|()
operator|+
literal|" regions left to update"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"alter status finished"
argument_list|)
expr_stmt|;
comment|// Create 3 more store files.
name|performMultiplePutAndFlush
argument_list|(
operator|(
name|HBaseAdmin
operator|)
name|admin
argument_list|,
name|hTable
argument_list|,
name|row
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Issue a compaction request
name|admin
operator|.
name|compact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// This time, the compaction request should not happen
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|loc
operator|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|regionName
operator|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
name|server
operator|=
name|connection
operator|.
name|getAdmin
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|sfCount
init|=
name|ProtobufUtil
operator|.
name|getStoreFiles
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|sfCount
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// change an individual CF's config option to 2& online schema update
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase.hstore.compaction.min should now be 2"
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|htd
operator|.
name|getFamily
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setValue
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|modifyFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|htd
argument_list|)
expr_stmt|;
while|while
condition|(
literal|null
operator|!=
operator|(
name|st
operator|=
name|admin
operator|.
name|getAlterStatus
argument_list|(
name|tableName
argument_list|)
operator|)
operator|&&
name|st
operator|.
name|getFirst
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|st
operator|.
name|getFirst
argument_list|()
operator|+
literal|" regions left to update"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"alter status finished"
argument_list|)
expr_stmt|;
comment|// Issue a compaction request
name|admin
operator|.
name|compact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// poll wait for the compactions to happen
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|*
literal|1000
operator|/
literal|40
condition|;
operator|++
name|i
control|)
block|{
name|loc
operator|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|regionName
operator|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
expr_stmt|;
try|try
block|{
name|server
operator|=
name|connection
operator|.
name|getAdmin
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ProtobufUtil
operator|.
name|getStoreFiles
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|sfCount
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for region to come online: "
operator|+
name|regionName
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
comment|// verify the compaction took place and that we didn't just time out
name|assertTrue
argument_list|(
name|ProtobufUtil
operator|.
name|getStoreFiles
argument_list|(
name|server
argument_list|,
name|regionName
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|sfCount
argument_list|)
expr_stmt|;
comment|// Finally, ensure that we can remove a custom config value after we made it
name|LOG
operator|.
name|info
argument_list|(
literal|"Removing CF config value"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase.hstore.compaction.min should now be 5"
argument_list|)
expr_stmt|;
name|hcd
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|htd
operator|.
name|getFamily
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setValue
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|htd
operator|.
name|modifyFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|htd
argument_list|)
expr_stmt|;
while|while
condition|(
literal|null
operator|!=
operator|(
name|st
operator|=
name|admin
operator|.
name|getAlterStatus
argument_list|(
name|tableName
argument_list|)
operator|)
operator|&&
name|st
operator|.
name|getFirst
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|st
operator|.
name|getFirst
argument_list|()
operator|+
literal|" regions left to update"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|40
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"alter status finished"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|hTable
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getFamily
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|getValue
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableBatchWithEmptyPut
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testHTableBatchWithEmptyPut"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|List
name|actions
init|=
operator|(
name|List
operator|)
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
literal|2
index|]
decl_stmt|;
comment|// create an empty Put
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|ANOTHERROW
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|actions
operator|.
name|add
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|actions
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Empty Put should have failed the batch call"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{      }
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableExistsMethodSingleRegionSingleGet
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test with a single region table.
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testHTableExistsMethodSingleRegionSingleGet"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|boolean
name|exist
init|=
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exist
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|exist
operator|=
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exist
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testHTableExistsMethodSingleRegionMultipleGets
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testHTableExistsMethodSingleRegionMultipleGets"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|()
decl_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ANOTHERROW
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|results
init|=
name|table
operator|.
name|existsAll
argument_list|(
name|gets
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|1
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|2
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableExistsBeforeGet
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testHTableExistsBeforeGet"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|boolean
name|exist
init|=
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exist
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableExistsAllBeforeGet
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|ROW2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testHTableExistsAllBeforeGet"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Get
name|get2
init|=
operator|new
name|Get
argument_list|(
name|ROW2
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Get
argument_list|>
name|getList
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|getList
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|getList
operator|.
name|add
argument_list|(
name|get2
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|exists
init|=
name|table
operator|.
name|existsAll
argument_list|(
name|getList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exists
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|exists
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Result
index|[]
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|getList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|result
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|result
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|result
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|result
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableExistsMethodMultipleRegionsSingleGet
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testHTableExistsMethodMultipleRegionsSingleGet"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
literal|1
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x00
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|}
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|boolean
name|exist
init|=
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|exist
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|exist
operator|=
name|table
operator|.
name|exists
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|exist
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHTableExistsMethodMultipleRegionsMultipleGets
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testHTableExistsMethodMultipleRegionsMultipleGets"
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
literal|1
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x00
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|}
argument_list|,
literal|255
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Get
argument_list|>
name|gets
init|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|()
decl_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ANOTHERROW
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|ROW
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x00
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|ANOTHERROW
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0x00
block|}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Calling exists"
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|results
init|=
name|table
operator|.
name|existsAll
argument_list|(
name|gets
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|1
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|2
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|3
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test with the first region.
name|put
operator|=
operator|new
name|Put
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x00
block|}
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|gets
operator|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|()
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x00
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|0x00
block|,
literal|0x00
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|table
operator|.
name|existsAll
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|1
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test with the last region
name|put
operator|=
operator|new
name|Put
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|}
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|gets
operator|=
operator|new
name|ArrayList
argument_list|<
name|Get
argument_list|>
argument_list|()
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|gets
operator|.
name|add
argument_list|(
operator|new
name|Get
argument_list|(
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|,
operator|(
name|byte
operator|)
literal|0xff
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|=
name|table
operator|.
name|existsAll
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|results
index|[
literal|2
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEmptyRow
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Create a table and put in 1 row
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW_BYTES
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|COL_QUAL
argument_list|,
name|VAL_BYTES
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|//Try getting the row with an empty row key
name|Result
name|res
init|=
literal|null
decl_stmt|;
try|try
block|{
name|res
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Expected.
block|}
name|assertTrue
argument_list|(
name|res
operator|==
literal|null
argument_list|)
expr_stmt|;
name|res
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1-not-exist"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|isEmpty
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|res
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW_BYTES
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|res
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|COL_QUAL
argument_list|)
argument_list|,
name|VAL_BYTES
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConnectionDefaultUsesCodec
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterConnection
name|con
init|=
operator|(
name|ClusterConnection
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|con
operator|.
name|hasCellBlockSupport
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testPutWithPreBatchMutate
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testPutWithPreBatchMutate"
argument_list|)
decl_stmt|;
name|testPreBatchMutate
argument_list|(
name|tableName
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRowMutationsWithPreBatchMutate
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testRowMutationsWithPreBatchMutate"
argument_list|)
decl_stmt|;
name|testPreBatchMutate
argument_list|(
name|tableName
argument_list|,
parameter_list|()
lambda|->
block|{
try|try
block|{
name|RowMutations
name|rm
init|=
operator|new
name|RowMutations
argument_list|(
name|ROW
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|rm
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|t
operator|.
name|mutateRow
argument_list|(
name|rm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testPreBatchMutate
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Runnable
name|rn
parameter_list|)
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addCoprocessor
argument_list|(
name|WatiingForScanObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ExecutorService
name|service
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|rn
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
comment|// waiting for update.
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|t
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|cells
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|r
operator|.
name|rawCells
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|service
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The write is blocking by RegionObserver#postBatchMutate"
operator|+
literal|", so the data is invisible to reader"
argument_list|,
literal|0
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testLockLeakWithDelta
parameter_list|()
throws|throws
name|Exception
throws|,
name|Throwable
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testLockLeakWithDelta"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addCoprocessor
argument_list|(
name|WatiingForMultiMutationsObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setConfiguration
argument_list|(
literal|"hbase.rowlock.wait.duration"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// new a connection for lower retry number.
name|Configuration
name|copy
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|copy
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|con
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|copy
argument_list|)
init|)
block|{
name|HRegion
name|region
init|=
operator|(
name|HRegion
operator|)
name|find
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|region
operator|.
name|setTimeoutForWriteLock
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|ExecutorService
name|putService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|putService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|Table
name|table
init|=
name|con
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// the put will be blocked by WatiingForMultiMutationsObserver.
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ExecutorService
name|appendService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|appendService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|append
operator|.
name|add
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|con
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"The APPEND should fail because the target lock is blocked by previous put"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{         }
block|}
argument_list|)
expr_stmt|;
name|appendService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|appendService
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
name|WatiingForMultiMutationsObserver
name|observer
init|=
name|find
argument_list|(
name|tableName
argument_list|,
name|WatiingForMultiMutationsObserver
operator|.
name|class
argument_list|)
decl_stmt|;
name|observer
operator|.
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|putService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|putService
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|con
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|HRegion
name|region
init|=
operator|(
name|HRegion
operator|)
name|find
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|readLockCount
init|=
name|region
operator|.
name|getReadLockCount
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"readLockCount:"
operator|+
name|readLockCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|readLockCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testMultiRowMutations
parameter_list|()
throws|throws
name|Exception
throws|,
name|Throwable
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMultiRowMutations"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addCoprocessor
argument_list|(
name|MultiRowMutationEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addCoprocessor
argument_list|(
name|WatiingForMultiMutationsObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setConfiguration
argument_list|(
literal|"hbase.rowlock.wait.duration"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// new a connection for lower retry number.
name|Configuration
name|copy
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|copy
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|con
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|copy
argument_list|)
init|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ROW-0"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowLocked
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ROW-1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"VALUE-0"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"VALUE-1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"VALUE-2"
argument_list|)
decl_stmt|;
name|assertNoLocks
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ExecutorService
name|putService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|putService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
init|(
name|Table
name|table
init|=
name|con
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Put
name|put0
init|=
operator|new
name|Put
argument_list|(
name|rowLocked
argument_list|)
decl_stmt|;
name|put0
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value0
argument_list|)
expr_stmt|;
comment|// the put will be blocked by WatiingForMultiMutationsObserver.
name|table
operator|.
name|put
argument_list|(
name|put0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ExecutorService
name|cpService
init|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|()
decl_stmt|;
name|cpService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|rowLocked
argument_list|)
decl_stmt|;
name|put1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value2
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|con
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
name|request
init|=
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|addMutationRequest
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
argument_list|,
name|put1
argument_list|)
argument_list|)
operator|.
name|addMutationRequest
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
argument_list|,
name|put2
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|table
operator|.
name|coprocessorService
argument_list|(
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
operator|.
name|class
argument_list|,
name|ROW
argument_list|,
name|ROW
argument_list|,
parameter_list|(
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
name|exe
parameter_list|)
lambda|->
block|{
name|ServerRpcController
name|controller
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|CoprocessorRpcUtils
operator|.
name|BlockingRpcCallback
argument_list|<
name|MultiRowMutationProtos
operator|.
name|MutateRowsResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|CoprocessorRpcUtils
operator|.
name|BlockingRpcCallback
argument_list|<>
argument_list|()
decl_stmt|;
name|exe
operator|.
name|mutateRows
argument_list|(
name|controller
argument_list|,
name|request
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
return|return
name|rpcCallback
operator|.
name|get
argument_list|()
return|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"This cp should fail because the target lock is blocked by previous put"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{         }
block|}
argument_list|)
expr_stmt|;
name|cpService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|cpService
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
name|WatiingForMultiMutationsObserver
name|observer
init|=
name|find
argument_list|(
name|tableName
argument_list|,
name|WatiingForMultiMutationsObserver
operator|.
name|class
argument_list|)
decl_stmt|;
name|observer
operator|.
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|putService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|putService
operator|.
name|awaitTermination
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|con
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Get
name|g0
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Get
name|g1
init|=
operator|new
name|Get
argument_list|(
name|rowLocked
argument_list|)
decl_stmt|;
name|Result
name|r0
init|=
name|table
operator|.
name|get
argument_list|(
name|g0
argument_list|)
decl_stmt|;
name|Result
name|r1
init|=
name|table
operator|.
name|get
argument_list|(
name|g1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r0
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r1
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|value0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNoLocks
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A test case for issue HBASE-17482    * After combile seqid with mvcc readpoint, seqid/mvcc is acquired and stamped    * onto cells in the append thread, a countdown latch is used to ensure that happened    * before cells can be put into memstore. But the MVCCPreAssign patch(HBASE-16698)    * make the seqid/mvcc acquirement in handler thread and stamping in append thread    * No countdown latch to assure cells in memstore are stamped with seqid/mvcc.    * If cells without mvcc(A.K.A mvcc=0) are put into memstore, then a scanner    * with a smaller readpoint can see these data, which disobey the multi version    * concurrency control rules.    * This test case is to reproduce this scenario.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testMVCCUsingMVCCPreAssign
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMVCCUsingMVCCPreAssign"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMVCCUsingMVCCPreAssign"
argument_list|)
argument_list|)
decl_stmt|;
comment|//put two row first to init the scanner
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"00"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
comment|//the started scanner shouldn't see the rows put below
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|int
name|rowNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|rowNum
operator|++
expr_stmt|;
block|}
comment|//scanner should only see two rows
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|rowNum
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|rowNum
operator|++
expr_stmt|;
block|}
comment|// the new scanner should see all rows
name|assertEquals
argument_list|(
literal|1001
argument_list|,
name|rowNum
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertNoLocks
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HRegion
name|region
init|=
operator|(
name|HRegion
operator|)
name|find
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|region
operator|.
name|getLockedRows
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Region
name|find
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Region
argument_list|>
name|regions
init|=
name|rs
operator|.
name|getOnlineRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|RegionObserver
parameter_list|>
name|T
name|find
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clz
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Region
name|region
init|=
name|find
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Coprocessor
name|cp
init|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|clz
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The cp instance should be "
operator|+
name|clz
operator|.
name|getName
argument_list|()
operator|+
literal|", current instance is "
operator|+
name|cp
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|clz
operator|.
name|isInstance
argument_list|(
name|cp
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|clz
operator|.
name|cast
argument_list|(
name|cp
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|WatiingForMultiMutationsObserver
extends|extends
name|BaseRegionObserver
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|postBatchMutate
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|WatiingForScanObserver
extends|extends
name|BaseRegionObserver
block|{
specifier|private
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|postBatchMutate
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|MiniBatchOperationInProgress
argument_list|<
name|Mutation
argument_list|>
name|miniBatchOp
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
comment|// waiting for scanner
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|RegionScanner
name|postScannerOpen
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Scan
name|scan
parameter_list|,
specifier|final
name|RegionScanner
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
block|}
end_class

end_unit

