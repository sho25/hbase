begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|coprocessor
operator|.
name|Batch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|CountRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|CountResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|HelloRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|HelloResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|IncrementCountRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|IncrementCountResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|NoopRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|NoopResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|PingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|PingProtos
operator|.
name|PingResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|BlockingRpcCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestServerCustomProtocol
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestServerCustomProtocol
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|WHOAREYOU
init|=
literal|"Who are you?"
decl_stmt|;
specifier|static
specifier|final
name|String
name|NOBODY
init|=
literal|"nobody"
decl_stmt|;
specifier|static
specifier|final
name|String
name|HELLO
init|=
literal|"Hello, "
decl_stmt|;
comment|/* Test protocol implementation */
specifier|public
specifier|static
class|class
name|PingHandler
extends|extends
name|PingProtos
operator|.
name|PingService
implements|implements
name|Coprocessor
implements|,
name|CoprocessorService
block|{
specifier|private
name|int
name|counter
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
return|return;
throw|throw
operator|new
name|CoprocessorException
argument_list|(
literal|"Must be loaded on a table region!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Nothing to do.
block|}
annotation|@
name|Override
specifier|public
name|void
name|ping
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|PingRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|PingResponse
argument_list|>
name|done
parameter_list|)
block|{
name|this
operator|.
name|counter
operator|++
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|PingResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPong
argument_list|(
literal|"pong"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|count
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|CountRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|CountResponse
argument_list|>
name|done
parameter_list|)
block|{
name|done
operator|.
name|run
argument_list|(
name|CountResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCount
argument_list|(
name|this
operator|.
name|counter
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|increment
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|IncrementCountRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|IncrementCountResponse
argument_list|>
name|done
parameter_list|)
block|{
name|this
operator|.
name|counter
operator|+=
name|request
operator|.
name|getDiff
argument_list|()
expr_stmt|;
name|done
operator|.
name|run
argument_list|(
name|IncrementCountResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCount
argument_list|(
name|this
operator|.
name|counter
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|hello
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|HelloRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|HelloResponse
argument_list|>
name|done
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasName
argument_list|()
condition|)
name|done
operator|.
name|run
argument_list|(
name|HelloResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResponse
argument_list|(
name|WHOAREYOU
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|request
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|NOBODY
argument_list|)
condition|)
name|done
operator|.
name|run
argument_list|(
name|HelloResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|done
operator|.
name|run
argument_list|(
name|HelloResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResponse
argument_list|(
name|HELLO
operator|+
name|request
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|noop
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|NoopRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|NoopResponse
argument_list|>
name|done
parameter_list|)
block|{
name|done
operator|.
name|run
argument_list|(
name|NoopResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|()
block|{
return|return
name|this
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_TABLE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_B
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_C
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_AB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abb"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW_BC
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bcc"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|util
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|PingHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|util
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|HTable
name|table
init|=
name|util
operator|.
name|createTable
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|)
decl_stmt|;
name|util
operator|.
name|createMultiRegions
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|table
argument_list|,
name|TEST_FAMILY
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
block|,
name|ROW_B
block|,
name|ROW_C
block|}
argument_list|)
expr_stmt|;
name|Put
name|puta
init|=
operator|new
name|Put
argument_list|(
name|ROW_A
argument_list|)
decl_stmt|;
name|puta
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|puta
argument_list|)
expr_stmt|;
name|Put
name|putb
init|=
operator|new
name|Put
argument_list|(
name|ROW_B
argument_list|)
decl_stmt|;
name|putb
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|putb
argument_list|)
expr_stmt|;
name|Put
name|putc
init|=
operator|new
name|Put
argument_list|(
name|ROW_C
argument_list|)
decl_stmt|;
name|putc
operator|.
name|add
argument_list|(
name|TEST_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|putc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|deleteTable
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|util
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleProxy
parameter_list|()
throws|throws
name|Throwable
block|{
name|Table
name|table
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|results
init|=
name|ping
argument_list|(
name|table
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// There are three regions so should get back three results.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|e
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid custom protocol response"
argument_list|,
literal|"pong"
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hello
argument_list|(
name|table
argument_list|,
literal|"George"
argument_list|,
name|HELLO
operator|+
literal|"George"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Did george"
argument_list|)
expr_stmt|;
name|hello
argument_list|(
name|table
argument_list|,
literal|null
argument_list|,
literal|"Who are you?"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Who are you"
argument_list|)
expr_stmt|;
name|hello
argument_list|(
name|table
argument_list|,
name|NOBODY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|NOBODY
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|intResults
init|=
name|table
operator|.
name|coprocessorService
argument_list|(
name|PingProtos
operator|.
name|PingService
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|PingProtos
operator|.
name|PingService
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|(
name|PingProtos
operator|.
name|PingService
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|CountResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|CountResponse
argument_list|>
argument_list|()
decl_stmt|;
name|instance
operator|.
name|count
argument_list|(
literal|null
argument_list|,
name|PingProtos
operator|.
name|CountRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
return|return
name|rpcCallback
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|int
name|count
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|intResults
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|count
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
specifier|final
name|int
name|diff
init|=
literal|5
decl_stmt|;
name|intResults
operator|=
name|table
operator|.
name|coprocessorService
argument_list|(
name|PingProtos
operator|.
name|PingService
operator|.
name|class
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|PingProtos
operator|.
name|PingService
argument_list|,
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|call
parameter_list|(
name|PingProtos
operator|.
name|PingService
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|IncrementCountResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|IncrementCountResponse
argument_list|>
argument_list|()
decl_stmt|;
name|instance
operator|.
name|increment
argument_list|(
literal|null
argument_list|,
name|PingProtos
operator|.
name|IncrementCountRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDiff
argument_list|(
name|diff
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
return|return
name|rpcCallback
operator|.
name|get
argument_list|()
operator|.
name|getCount
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// There are three regions so should get back three results.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|intResults
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|count
operator|+
name|diff
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|hello
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|String
name|send
parameter_list|,
specifier|final
name|String
name|response
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|results
init|=
name|hello
argument_list|(
name|table
argument_list|,
name|send
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|e
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid custom protocol response"
argument_list|,
name|response
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|hello
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|String
name|send
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
return|return
name|hello
argument_list|(
name|table
argument_list|,
name|send
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|hello
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|String
name|send
parameter_list|,
specifier|final
name|byte
index|[]
name|start
parameter_list|,
specifier|final
name|byte
index|[]
name|end
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
return|return
name|table
operator|.
name|coprocessorService
argument_list|(
name|PingProtos
operator|.
name|PingService
operator|.
name|class
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|PingProtos
operator|.
name|PingService
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|(
name|PingProtos
operator|.
name|PingService
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|HelloResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|HelloResponse
argument_list|>
argument_list|()
decl_stmt|;
name|PingProtos
operator|.
name|HelloRequest
operator|.
name|Builder
name|builder
init|=
name|PingProtos
operator|.
name|HelloRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|send
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setName
argument_list|(
name|send
argument_list|)
expr_stmt|;
name|instance
operator|.
name|hello
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
name|PingProtos
operator|.
name|HelloResponse
name|r
init|=
name|rpcCallback
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|hasResponse
argument_list|()
condition|?
name|r
operator|.
name|getResponse
argument_list|()
else|:
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|compoundOfHelloAndPing
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|start
parameter_list|,
specifier|final
name|byte
index|[]
name|end
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
return|return
name|table
operator|.
name|coprocessorService
argument_list|(
name|PingProtos
operator|.
name|PingService
operator|.
name|class
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|PingProtos
operator|.
name|PingService
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|(
name|PingProtos
operator|.
name|PingService
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|HelloResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|HelloResponse
argument_list|>
argument_list|()
decl_stmt|;
name|PingProtos
operator|.
name|HelloRequest
operator|.
name|Builder
name|builder
init|=
name|PingProtos
operator|.
name|HelloRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
comment|// Call ping on same instance.  Use result calling hello on same instance.
name|builder
operator|.
name|setName
argument_list|(
name|doPing
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
name|instance
operator|.
name|hello
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
name|PingProtos
operator|.
name|HelloResponse
name|r
init|=
name|rpcCallback
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|hasResponse
argument_list|()
condition|?
name|r
operator|.
name|getResponse
argument_list|()
else|:
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|noop
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|start
parameter_list|,
specifier|final
name|byte
index|[]
name|end
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
return|return
name|table
operator|.
name|coprocessorService
argument_list|(
name|PingProtos
operator|.
name|PingService
operator|.
name|class
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|PingProtos
operator|.
name|PingService
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|(
name|PingProtos
operator|.
name|PingService
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|NoopResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|NoopResponse
argument_list|>
argument_list|()
decl_stmt|;
name|PingProtos
operator|.
name|NoopRequest
operator|.
name|Builder
name|builder
init|=
name|PingProtos
operator|.
name|NoopRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|instance
operator|.
name|noop
argument_list|(
literal|null
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
name|rpcCallback
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// Looks like null is expected when void.  That is what the test below is looking for
return|return
literal|null
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleMethod
parameter_list|()
throws|throws
name|Throwable
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|results
init|=
name|table
operator|.
name|coprocessorService
argument_list|(
name|PingProtos
operator|.
name|PingService
operator|.
name|class
argument_list|,
literal|null
argument_list|,
name|ROW_A
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|PingProtos
operator|.
name|PingService
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|(
name|PingProtos
operator|.
name|PingService
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|PingResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|PingResponse
argument_list|>
argument_list|()
decl_stmt|;
name|instance
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|PingProtos
operator|.
name|PingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
return|return
name|rpcCallback
operator|.
name|get
argument_list|()
operator|.
name|getPong
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|// Should have gotten results for 1 of the three regions only since we specified
comment|// rows from 1 region
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
name|ROW_A
argument_list|)
expr_stmt|;
specifier|final
name|String
name|name
init|=
literal|"NAME"
decl_stmt|;
name|results
operator|=
name|hello
argument_list|(
name|table
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
name|ROW_A
argument_list|)
expr_stmt|;
comment|// Should have gotten results for 1 of the three regions only since we specified
comment|// rows from 1 region
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|"Hello, NAME"
argument_list|,
name|ROW_A
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowRange
parameter_list|()
throws|throws
name|Throwable
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|e
range|:
name|table
operator|.
name|getRegionLocations
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Region "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|", servername="
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Here are what regions looked like on a run:
comment|//
comment|// test,,1355943549657.c65d4822d8bdecc033a96451f3a0f55d.
comment|// test,bbb,1355943549661.110393b070dd1ed93441e0bc9b3ffb7e.
comment|// test,ccc,1355943549665.c3d6d125141359cbbd2a43eaff3cdf74.
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|results
init|=
name|ping
argument_list|(
name|table
argument_list|,
literal|null
argument_list|,
name|ROW_A
argument_list|)
decl_stmt|;
comment|// Should contain first region only.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
name|ROW_A
argument_list|)
expr_stmt|;
comment|// Test start row + empty end
name|results
operator|=
name|ping
argument_list|(
name|table
argument_list|,
name|ROW_BC
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// should contain last 2 regions
name|HRegionLocation
name|loc
init|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|ROW_A
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"Should be missing region for row aaa (prior to start row)"
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
name|ROW_B
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
name|ROW_C
argument_list|)
expr_stmt|;
comment|// test empty start + end
name|results
operator|=
name|ping
argument_list|(
name|table
argument_list|,
literal|null
argument_list|,
name|ROW_BC
argument_list|)
expr_stmt|;
comment|// should contain the first 2 regions
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
name|ROW_A
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
name|ROW_B
argument_list|)
expr_stmt|;
name|loc
operator|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|ROW_C
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should be missing region for row ccc (past stop row)"
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test explicit start + end
name|results
operator|=
name|ping
argument_list|(
name|table
argument_list|,
name|ROW_AB
argument_list|,
name|ROW_BC
argument_list|)
expr_stmt|;
comment|// should contain first 2 regions
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
name|ROW_A
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
name|ROW_B
argument_list|)
expr_stmt|;
name|loc
operator|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|ROW_C
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should be missing region for row ccc (past stop row)"
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test single region
name|results
operator|=
name|ping
argument_list|(
name|table
argument_list|,
name|ROW_B
argument_list|,
name|ROW_BC
argument_list|)
expr_stmt|;
comment|// should only contain region bbb
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
name|ROW_B
argument_list|)
expr_stmt|;
name|loc
operator|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|ROW_A
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should be missing region for row aaa (prior to start)"
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loc
operator|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|ROW_C
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Should be missing region for row ccc (past stop row)"
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|ping
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|start
parameter_list|,
specifier|final
name|byte
index|[]
name|end
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|Throwable
block|{
return|return
name|table
operator|.
name|coprocessorService
argument_list|(
name|PingProtos
operator|.
name|PingService
operator|.
name|class
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
operator|new
name|Batch
operator|.
name|Call
argument_list|<
name|PingProtos
operator|.
name|PingService
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|call
parameter_list|(
name|PingProtos
operator|.
name|PingService
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doPing
argument_list|(
name|instance
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|doPing
parameter_list|(
name|PingProtos
operator|.
name|PingService
name|instance
parameter_list|)
throws|throws
name|IOException
block|{
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|PingResponse
argument_list|>
name|rpcCallback
init|=
operator|new
name|BlockingRpcCallback
argument_list|<
name|PingProtos
operator|.
name|PingResponse
argument_list|>
argument_list|()
decl_stmt|;
name|instance
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|PingProtos
operator|.
name|PingRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
name|rpcCallback
argument_list|)
expr_stmt|;
return|return
name|rpcCallback
operator|.
name|get
argument_list|()
operator|.
name|getPong
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompoundCall
parameter_list|()
throws|throws
name|Throwable
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|results
init|=
name|compoundOfHelloAndPing
argument_list|(
name|table
argument_list|,
name|ROW_A
argument_list|,
name|ROW_C
argument_list|)
decl_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|"Hello, pong"
argument_list|,
name|ROW_A
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|"Hello, pong"
argument_list|,
name|ROW_B
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|"Hello, pong"
argument_list|,
name|ROW_C
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullCall
parameter_list|()
throws|throws
name|Throwable
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|results
init|=
name|hello
argument_list|(
name|table
argument_list|,
literal|null
argument_list|,
name|ROW_A
argument_list|,
name|ROW_C
argument_list|)
decl_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|"Who are you?"
argument_list|,
name|ROW_A
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|"Who are you?"
argument_list|,
name|ROW_B
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|"Who are you?"
argument_list|,
name|ROW_C
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullReturn
parameter_list|()
throws|throws
name|Throwable
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|results
init|=
name|hello
argument_list|(
name|table
argument_list|,
literal|"nobody"
argument_list|,
name|ROW_A
argument_list|,
name|ROW_C
argument_list|)
decl_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|null
argument_list|,
name|ROW_A
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|null
argument_list|,
name|ROW_B
argument_list|)
expr_stmt|;
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|null
argument_list|,
name|ROW_C
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyReturnType
parameter_list|()
throws|throws
name|Throwable
block|{
name|Table
name|table
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|results
init|=
name|noop
argument_list|(
name|table
argument_list|,
name|ROW_A
argument_list|,
name|ROW_C
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have results from three regions"
argument_list|,
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// all results should be null
for|for
control|(
name|Object
name|v
range|:
name|results
operator|.
name|values
argument_list|()
control|)
block|{
name|assertNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyRegionResults
parameter_list|(
name|RegionLocator
name|table
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|results
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyRegionResults
argument_list|(
name|table
argument_list|,
name|results
argument_list|,
literal|"pong"
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyRegionResults
parameter_list|(
name|RegionLocator
name|table
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|results
parameter_list|,
name|String
name|expected
parameter_list|,
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|e
range|:
name|results
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|", expected="
operator|+
name|expected
operator|+
literal|", result key="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|+
literal|", value="
operator|+
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HRegionLocation
name|loc
init|=
name|table
operator|.
name|getRegionLocation
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|byte
index|[]
name|region
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Results should contain region "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|region
argument_list|)
operator|+
literal|" for row '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|"'"
argument_list|,
name|results
operator|.
name|containsKey
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Invalid result for row '"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|row
argument_list|)
operator|+
literal|"'"
argument_list|,
name|expected
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

