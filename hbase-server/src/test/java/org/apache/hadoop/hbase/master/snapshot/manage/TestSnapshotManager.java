begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|manage
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|TakeSnapshotHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|exception
operator|.
name|SnapshotCreationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test basic snapshot manager functionality  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSnapshotManager
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|MasterServices
name|services
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MasterServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExecutorService
name|pool
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExecutorService
operator|.
name|class
argument_list|)
decl_stmt|;
name|MasterFileSystem
name|mfs
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MasterFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
decl_stmt|;
block|{
try|try
block|{
name|fs
operator|=
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't get test filesystem"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|SnapshotManager
name|getNewManager
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|Mockito
operator|.
name|reset
argument_list|(
name|services
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|services
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|services
operator|.
name|getMasterFileSystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mfs
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mfs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|fs
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|mfs
operator|.
name|getRootDir
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|SnapshotManager
argument_list|(
name|services
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInProcess
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|SnapshotManager
name|manager
init|=
name|getNewManager
argument_list|()
decl_stmt|;
name|TakeSnapshotHandler
name|handler
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TakeSnapshotHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Manager is in process when there is no current handler"
argument_list|,
name|manager
operator|.
name|isTakingSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setSnapshotHandlerForTesting
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|handler
operator|.
name|isFinished
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Manager isn't in process when handler is running"
argument_list|,
name|manager
operator|.
name|isTakingSnapshot
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|handler
operator|.
name|isFinished
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Manager is process when handler isn't running"
argument_list|,
name|manager
operator|.
name|isTakingSnapshot
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

