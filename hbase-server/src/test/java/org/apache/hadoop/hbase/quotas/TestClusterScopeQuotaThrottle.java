begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|doGets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|doPuts
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|triggerNamespaceCacheRefresh
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|triggerTableCacheRefresh
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|triggerUserCacheRefresh
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestClusterScopeQuotaThrottle
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestClusterScopeQuotaThrottle
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|REFRESH_TIME
init|=
literal|30
operator|*
literal|60000
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|TableName
index|[]
name|TABLE_NAMES
init|=
operator|new
name|TableName
index|[]
block|{
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestQuotaAdmin0"
argument_list|)
block|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestQuotaAdmin1"
argument_list|)
block|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestQuotaAdmin2"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
index|[]
name|SPLITS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
name|Table
index|[]
name|tables
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NAMESPACE
init|=
literal|"TestNs"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|NAMESPACE
argument_list|,
literal|"TestTable"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Table
name|table
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|QuotaCache
operator|.
name|REFRESH_CONF_KEY
argument_list|,
name|REFRESH_TIME
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.msginterval"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.master.enabletable.roundrobin"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
expr_stmt|;
name|QuotaCache
operator|.
name|TEST_FORCE_REFRESH
operator|=
literal|true
expr_stmt|;
name|tables
operator|=
operator|new
name|Table
index|[
name|TABLE_NAMES
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TABLE_NAMES
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tables
index|[
name|i
index|]
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAMES
index|[
name|i
index|]
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|TABLE_NAMES
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|NAMESPACE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAMILY
argument_list|,
name|SPLITS
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|tables
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|tables
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|TABLE_NAMES
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|deleteNamespace
argument_list|(
name|NAMESPACE
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ThrottleQuotaTestUtil
operator|.
name|clearQuotaCache
argument_list|(
name|TEST_UTIL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceClusterScopeQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|NAMESPACE
init|=
literal|"default"
decl_stmt|;
comment|// Add 10req/min limit for write request in cluster scope
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|NAMESPACE
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|QuotaScope
operator|.
name|CLUSTER
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add 6req/min limit for read request in machine scope
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|NAMESPACE
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|QuotaScope
operator|.
name|MACHINE
argument_list|)
argument_list|)
expr_stmt|;
name|triggerNamespaceCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 5 write requests and at max 3 read requests
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doGets
argument_list|(
literal|10
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleNamespace
argument_list|(
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|triggerNamespaceCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableClusterScopeQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|,
name|QuotaScope
operator|.
name|CLUSTER
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionServerThread
name|rst
range|:
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
for|for
control|(
name|TableName
name|tableName
range|:
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineTables
argument_list|()
control|)
block|{
if|if
condition|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|rsRegionNum
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsRegionNum
operator|==
literal|0
condition|)
block|{
comment|// If rs has 0 region, the machine limiter is 0 (20 * 0 / 2)
break|break;
block|}
elseif|else
if|if
condition|(
name|rsRegionNum
operator|==
literal|1
condition|)
block|{
comment|// If rs has 1 region, the machine limiter is 10 (20 * 1 / 2)
comment|// Read rows from 1 region, so can read 10 first time and 0 second time
name|long
name|count
init|=
name|doGets
argument_list|(
literal|20
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|count
operator|==
literal|0
operator|||
name|count
operator|==
literal|10
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rsRegionNum
operator|==
literal|2
condition|)
block|{
comment|// If rs has 2 regions, the machine limiter is 20 (20 * 2 / 2)
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|doGets
argument_list|(
literal|20
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserClusterScopeQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
comment|// Add 6req/min limit for read request in cluster scope
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|QuotaScope
operator|.
name|CLUSTER
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add 6req/min limit for write request in machine scope
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
comment|// should execute at max 6 read requests and at max 3 write write requests
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|doGets
argument_list|(
literal|10
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserNamespaceClusterScopeQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|namespace
init|=
name|TABLE_NAMES
index|[
literal|0
index|]
operator|.
name|getNamespaceAsString
argument_list|()
decl_stmt|;
comment|// Add 10req/min limit for read request in cluster scope
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|namespace
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|,
name|QuotaScope
operator|.
name|CLUSTER
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add 6req/min limit for write request in machine scope
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|namespace
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 5 read requests and at max 6 write requests
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|doGets
argument_list|(
literal|10
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|,
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserTableClusterScopeQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAME
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|,
name|QuotaScope
operator|.
name|CLUSTER
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionServerThread
name|rst
range|:
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
for|for
control|(
name|TableName
name|tableName
range|:
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineTables
argument_list|()
control|)
block|{
if|if
condition|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|rsRegionNum
init|=
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsRegionNum
operator|==
literal|0
condition|)
block|{
comment|// If rs has 0 region, the machine limiter is 0 (20 * 0 / 2)
break|break;
block|}
elseif|else
if|if
condition|(
name|rsRegionNum
operator|==
literal|1
condition|)
block|{
comment|// If rs has 1 region, the machine limiter is 10 (20 * 1 / 2)
comment|// Read rows from 1 region, so can read 10 first time and 0 second time
name|long
name|count
init|=
name|doGets
argument_list|(
literal|20
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|count
operator|==
literal|0
operator|||
name|count
operator|==
literal|10
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rsRegionNum
operator|==
literal|2
condition|)
block|{
comment|// If rs has 2 regions, the machine limiter is 20 (20 * 2 / 2)
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|doGets
argument_list|(
literal|20
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAME
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

