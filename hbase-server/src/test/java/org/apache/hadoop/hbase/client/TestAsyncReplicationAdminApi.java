begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncConnectionConfiguration
operator|.
name|START_LOG_ERRORS_AFTER_COUNT_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|startsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationStorageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|VerifyWALEntriesReplicationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|HBaseInterClusterReplicationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Class to test asynchronous replication admin operations.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncReplicationAdminApi
extends|extends
name|TestAsyncAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAsyncReplicationAdminApi
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|ID_ONE
init|=
literal|"1"
decl_stmt|;
specifier|private
specifier|final
name|String
name|KEY_ONE
init|=
literal|"127.0.0.1:2181:/hbase"
decl_stmt|;
specifier|private
specifier|final
name|String
name|ID_TWO
init|=
literal|"2"
decl_stmt|;
specifier|private
specifier|final
name|String
name|KEY_TWO
init|=
literal|"127.0.0.1:2181:/hbase2"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_OPERATION_TIMEOUT
argument_list|,
literal|120000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|START_LOG_ERRORS_AFTER_COUNT_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|ASYNC_CONN
operator|=
name|ConnectionFactory
operator|.
name|createAsyncConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|clearPeerAndQueues
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
try|try
block|{
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
try|try
block|{
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_TWO
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
name|ReplicationQueueStorage
name|queueStorage
init|=
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|queueStorage
operator|.
name|getListOfReplicators
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|queue
range|:
name|queueStorage
operator|.
name|getAllQueues
argument_list|(
name|serverName
argument_list|)
control|)
block|{
name|queueStorage
operator|.
name|removeQueue
argument_list|(
name|serverName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddRemovePeer
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc1
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc1
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|ReplicationPeerConfig
name|rpc2
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc2
operator|.
name|setClusterKey
argument_list|(
name|KEY_TWO
argument_list|)
expr_stmt|;
comment|// Add a valid peer
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// try adding the same (fails)
try|try
block|{
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail as adding a same peer."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
comment|// OK!
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|admin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to remove an inexisting peer
try|try
block|{
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_TWO
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail as removing a inexisting peer."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
comment|// OK!
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|admin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a second since multi-slave is supported
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_TWO
argument_list|,
name|rpc2
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|admin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the first peer we added
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|admin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_TWO
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|admin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPeerConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|config
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|config
operator|.
name|getConfiguration
argument_list|()
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|getConfiguration
argument_list|()
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|config
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|peers
init|=
name|admin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|peers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationPeerDescription
name|peerOne
init|=
name|peers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|peerOne
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|peerOne
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|peerOne
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnableDisablePeer
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc1
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc1
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|peers
init|=
name|admin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|peers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|peers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|peers
operator|=
name|admin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|peers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|peers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPeerTableCFs
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc1
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc1
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"t1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"t2"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"t3"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"t4"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName5
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"t5"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName6
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"t6"
argument_list|)
decl_stmt|;
comment|// Add a valid peer
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|rpc1
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// append table t1 to replication
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
comment|// append table t2 to replication
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|result
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t1"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t2"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
comment|// append table column family: f1 of t3 to replication
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName3
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName3
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|result
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t1"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t2"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t3"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName3
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// append table column family: f1,f2 of t4 to replication
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName4
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName4
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName4
argument_list|)
operator|.
name|add
argument_list|(
literal|"f2"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|result
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t1"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t2"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t3"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t4"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName4
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName3
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName4
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName4
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName4
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// append "table5" => [], then append "table5" => ["f1"]
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName5
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName5
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName5
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|result
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t5"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName5
argument_list|)
argument_list|)
expr_stmt|;
comment|// null means replication all cfs of tab5
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName5
argument_list|)
argument_list|)
expr_stmt|;
comment|// append "table6" => ["f1"], then append "table6" => []
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName6
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName6
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName6
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|result
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t6"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName6
argument_list|)
argument_list|)
expr_stmt|;
comment|// null means replication all cfs of tab6
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName6
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePeerTableCFs
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc1
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc1
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"t1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"t2"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"t3"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"t4"
argument_list|)
decl_stmt|;
comment|// Add a valid peer
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|rpc1
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail as removing table-cfs from a peer whose table-cfs is null"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ReplicationException
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
try|try
block|{
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail as removing table-cfs from a peer whose"
operator|+
literal|" table-cfs didn't contain t3"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ReplicationException
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t1"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t2"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail, because table t1 didn't specify cfs in peer config"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ReplicationException
argument_list|)
expr_stmt|;
block|}
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|result
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail, because table t2 hase specified cfs in peer config"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|ReplicationException
argument_list|)
expr_stmt|;
block|}
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName4
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPeerNamespaces
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns1
init|=
literal|"ns1"
decl_stmt|;
name|String
name|ns2
init|=
literal|"ns2"
decl_stmt|;
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// add ns1 and ns2 to peer config
name|rpc
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns2
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|namespaces
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getNamespaces
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|namespaces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaces
operator|.
name|contains
argument_list|(
name|ns1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaces
operator|.
name|contains
argument_list|(
name|ns2
argument_list|)
argument_list|)
expr_stmt|;
comment|// update peer config only contains ns1
name|rpc
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|namespaces
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getNamespaces
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namespaces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaces
operator|.
name|contains
argument_list|(
name|ns1
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespacesAndTableCfsConfigConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns1
init|=
literal|"ns1"
decl_stmt|;
name|String
name|ns2
init|=
literal|"ns2"
decl_stmt|;
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|ns1
operator|+
literal|":"
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|ns2
operator|+
literal|":"
operator|+
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|rpc
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|rpc
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail, because table "
operator|+
name|tableName1
operator|+
literal|" conflict with namespace "
operator|+
name|ns1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|rpc
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|rpc
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns2
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail, because namespace "
operator|+
name|ns2
operator|+
literal|" conflict with table "
operator|+
name|tableName2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CompletionException
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPeerBandwidth
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|rpc
operator|=
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rpc
operator|.
name|getBandwidth
argument_list|()
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setBandwidth
argument_list|(
literal|2097152
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2097152
argument_list|,
name|admin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|join
argument_list|()
operator|.
name|getBandwidth
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidClusterKey
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
literal|"whatever"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DoNotRetryIOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidReplicationEndpoint
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReplicationEndpointImpl
argument_list|(
literal|"whatever"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DoNotRetryIOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"Can not instantiate"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetReplicationEndpoint
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
comment|// make sure that we do not need to set cluster key when we use customized ReplicationEndpoint
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|VerifyWALEntriesReplicationEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// but we still need to check cluster key if we specify the default ReplicationEndpoint
try|try
block|{
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_TWO
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|HBaseInterClusterReplicationEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DoNotRetryIOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

