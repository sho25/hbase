begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|AbstractTestWALReplay
operator|.
name|addRegionEdits
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|BoundedRecoveredHFilesOutputSink
operator|.
name|WAL_SPLIT_TO_HFILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DefaultStoreEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|AbstractTestWALReplay
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|FSHLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestWALSplitToHFile
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestWALSplitToHFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AbstractTestWALReplay
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|EnvironmentEdge
name|ee
init|=
name|EnvironmentEdgeManager
operator|.
name|getDelegate
argument_list|()
decl_stmt|;
specifier|private
name|Path
name|rootDir
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|logName
decl_stmt|;
specifier|private
name|Path
name|oldLogDir
decl_stmt|;
specifier|private
name|Path
name|logDir
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|WALFactory
name|wals
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|TEST_NAME
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|WAL_SPLIT_TO_HFILE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Path
name|hbaseRootDir
init|=
name|UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|makeQualified
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/hbase"
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"hbase.rootdir="
operator|+
name|hbaseRootDir
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|conf
argument_list|,
name|hbaseRootDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fs
operator|=
name|UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|oldLogDir
operator|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
expr_stmt|;
name|String
name|serverName
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|TEST_NAME
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"-manual"
argument_list|,
literal|16010
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|this
operator|.
name|logName
operator|=
name|AbstractFSWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|this
operator|.
name|logDir
operator|=
operator|new
name|Path
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
name|logName
argument_list|)
expr_stmt|;
if|if
condition|(
name|UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|this
operator|.
name|rootDir
argument_list|)
condition|)
block|{
name|UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|wals
operator|=
operator|new
name|WALFactory
argument_list|(
name|conf
argument_list|,
name|TEST_NAME
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|wals
operator|.
name|close
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param p Directory to cleanup    */
specifier|private
name|void
name|deleteDir
parameter_list|(
specifier|final
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|fs
operator|.
name|exists
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed remove of "
operator|+
name|p
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
name|TableDescriptor
name|createBasic3FamilyTD
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|TableDescriptorBuilder
name|builder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|TableDescriptor
name|td
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|td
argument_list|)
expr_stmt|;
return|return
name|td
return|;
block|}
specifier|private
name|WAL
name|createWAL
parameter_list|(
name|Configuration
name|c
parameter_list|,
name|Path
name|hbaseRootDir
parameter_list|,
name|String
name|logName
parameter_list|)
throws|throws
name|IOException
block|{
name|FSHLog
name|wal
init|=
operator|new
name|FSHLog
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|,
name|hbaseRootDir
argument_list|,
name|logName
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|wal
operator|.
name|init
argument_list|()
expr_stmt|;
return|return
name|wal
return|;
block|}
comment|/**    * Test writing edits into an HRegion, closing it, splitting logs, opening    * Region again.  Verify seqids.    */
annotation|@
name|Test
specifier|public
name|void
name|testReplayEditsWrittenViaHRegion
parameter_list|()
throws|throws
name|IOException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TEST_NAME
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableDescriptor
name|td
init|=
name|createBasic3FamilyTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|RegionInfo
name|ri
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|countPerFamily
init|=
literal|10
decl_stmt|;
name|HRegion
name|region3
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|ri
argument_list|,
name|rootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|td
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region3
argument_list|)
expr_stmt|;
comment|// Write countPerFamily edits into the three families.  Do a flush on one
comment|// of the families during the load of edits so its seqid is not same as
comment|// others to test we do right thing when different seqids.
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|rootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|rootDir
argument_list|,
name|ri
argument_list|,
name|td
argument_list|,
name|wal
argument_list|)
decl_stmt|;
name|long
name|seqid
init|=
name|region
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|cfd
range|:
name|td
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|cfd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|this
operator|.
name|ee
argument_list|,
name|region
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
comment|// If first, so we have at least one family w/ different seqid to rest.
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// Now assert edits made it in.
specifier|final
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|countPerFamily
operator|*
name|td
operator|.
name|getColumnFamilies
argument_list|()
operator|.
name|length
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now close the region (without flush), split the log, reopen the region and assert that
comment|// replay of log has the correct effect, that our seqids are calculated correctly so
comment|// all edits in logs are seen as 'stale'/old.
name|region
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wal
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|WALSplitter
operator|.
name|split
argument_list|(
name|rootDir
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|wals
argument_list|)
expr_stmt|;
name|WAL
name|wal2
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|rootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region2
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|rootDir
argument_list|,
name|ri
argument_list|,
name|td
argument_list|,
name|wal2
argument_list|)
decl_stmt|;
name|long
name|seqid2
init|=
name|region2
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|seqid
operator|+
name|result
operator|.
name|size
argument_list|()
operator|<
name|seqid2
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result1b
init|=
name|region2
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result1b
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Next test.  Add more edits, then 'crash' this region by stealing its wal
comment|// out from under it and assert that replay of the log adds the edits back
comment|// correctly when region is opened again.
for|for
control|(
name|ColumnFamilyDescriptor
name|hcd
range|:
name|td
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|this
operator|.
name|ee
argument_list|,
name|region2
argument_list|,
literal|"y"
argument_list|)
expr_stmt|;
block|}
comment|// Get count of edits.
specifier|final
name|Result
name|result2
init|=
name|region2
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
operator|*
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|wal2
operator|.
name|sync
argument_list|()
expr_stmt|;
specifier|final
name|Configuration
name|newConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|HBaseTestingUtility
operator|.
name|getDifferentUser
argument_list|(
name|newConf
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|WALSplitter
operator|.
name|split
argument_list|(
name|rootDir
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
argument_list|,
name|wals
argument_list|)
expr_stmt|;
name|FileSystem
name|newFS
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|newConf
argument_list|)
decl_stmt|;
comment|// Make a new wal for new region open.
name|WAL
name|wal3
init|=
name|createWAL
argument_list|(
name|newConf
argument_list|,
name|rootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region3
init|=
operator|new
name|HRegion
argument_list|(
name|basedir
argument_list|,
name|wal3
argument_list|,
name|newFS
argument_list|,
name|newConf
argument_list|,
name|ri
argument_list|,
name|td
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|seqid3
init|=
name|region3
operator|.
name|initialize
argument_list|()
decl_stmt|;
name|Result
name|result3
init|=
name|region3
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
comment|// Assert that count of cells is same as before crash.
name|assertEquals
argument_list|(
name|result2
operator|.
name|size
argument_list|()
argument_list|,
name|result3
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// I can't close wal1.  Its been appropriated when we split.
name|region3
operator|.
name|close
argument_list|()
expr_stmt|;
name|wal3
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we recover correctly when there is a failure in between the    * flushes. i.e. Some stores got flushed but others did not.    * Unfortunately, there is no easy hook to flush at a store level. The way    * we get around this is by flushing at the region level, and then deleting    * the recently flushed store file for one of the Stores. This would put us    * back in the situation where all but that store got flushed and the region    * died.    * We restart Region again, and verify that the edits were replayed.    */
annotation|@
name|Test
specifier|public
name|void
name|testReplayEditsAfterPartialFlush
parameter_list|()
throws|throws
name|IOException
throws|,
name|SecurityException
throws|,
name|IllegalArgumentException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TEST_NAME
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RegionInfo
name|ri
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|countPerFamily
init|=
literal|10
decl_stmt|;
specifier|final
name|TableDescriptor
name|td
init|=
name|createBasic3FamilyTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegion
name|region3
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|ri
argument_list|,
name|rootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|td
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region3
argument_list|)
expr_stmt|;
comment|// Write countPerFamily edits into the three families.  Do a flush on one
comment|// of the families during the load of edits so its seqid is not same as
comment|// others to test we do right thing when different seqids.
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|rootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|rootDir
argument_list|,
name|ri
argument_list|,
name|td
argument_list|,
name|wal
argument_list|)
decl_stmt|;
name|long
name|seqid
init|=
name|region
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|cfd
range|:
name|td
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|cfd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|this
operator|.
name|ee
argument_list|,
name|region
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
block|}
comment|// Now assert edits made it in.
specifier|final
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|countPerFamily
operator|*
name|td
operator|.
name|getColumnFamilies
argument_list|()
operator|.
name|length
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let us flush the region
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|region
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wal
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// delete the store files in the second column family to simulate a failure
comment|// in between the flushcache();
comment|// we have 3 families. killing the middle one ensures that taking the maximum
comment|// will make us fail.
name|int
name|cf_count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ColumnFamilyDescriptor
name|cfd
range|:
name|td
operator|.
name|getColumnFamilies
argument_list|()
control|)
block|{
name|cf_count
operator|++
expr_stmt|;
if|if
condition|(
name|cf_count
operator|==
literal|2
condition|)
block|{
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|deleteFamily
argument_list|(
name|cfd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Let us try to split and recover
name|WALSplitter
operator|.
name|split
argument_list|(
name|rootDir
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|wals
argument_list|)
expr_stmt|;
name|WAL
name|wal2
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|rootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|HRegion
name|region2
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|rootDir
argument_list|,
name|ri
argument_list|,
name|td
argument_list|,
name|wal2
argument_list|)
decl_stmt|;
name|long
name|seqid2
init|=
name|region2
operator|.
name|getOpenSeqNum
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|seqid
operator|+
name|result
operator|.
name|size
argument_list|()
operator|<
name|seqid2
argument_list|)
expr_stmt|;
specifier|final
name|Result
name|result1b
init|=
name|region2
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result1b
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we could recover the data correctly after aborting flush. In the    * test, first we abort flush after writing some data, then writing more data    * and flush again, at last verify the data.    */
annotation|@
name|Test
specifier|public
name|void
name|testReplayEditsAfterAbortingFlush
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TEST_NAME
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|RegionInfo
name|ri
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|basedir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|deleteDir
argument_list|(
name|basedir
argument_list|)
expr_stmt|;
specifier|final
name|TableDescriptor
name|td
init|=
name|createBasic3FamilyTD
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegion
name|region3
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|ri
argument_list|,
name|rootDir
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|td
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|region3
argument_list|)
expr_stmt|;
comment|// Write countPerFamily edits into the three families. Do a flush on one
comment|// of the families during the load of edits so its seqid is not same as
comment|// others to test we do right thing when different seqids.
name|WAL
name|wal
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|rootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|RegionServerServices
name|rsServices
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RegionServerServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|rsServices
argument_list|)
operator|.
name|isAborted
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|rsServices
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rsServices
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Configuration
name|customConf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|customConf
operator|.
name|set
argument_list|(
name|DefaultStoreEngine
operator|.
name|DEFAULT_STORE_FLUSHER_CLASS_KEY
argument_list|,
name|AbstractTestWALReplay
operator|.
name|CustomStoreFlusher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
name|ri
argument_list|,
name|td
argument_list|,
name|wal
argument_list|,
name|customConf
argument_list|,
name|rsServices
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|writtenRowCount
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|ColumnFamilyDescriptor
argument_list|>
name|families
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|td
operator|.
name|getColumnFamilies
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writtenRowCount
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|families
operator|.
name|get
argument_list|(
name|i
operator|%
name|families
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// Now assert edits made it in.
name|RegionScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|writtenRowCount
argument_list|,
name|getScannedCount
argument_list|(
name|scanner
argument_list|)
argument_list|)
expr_stmt|;
comment|// Let us flush the region
name|AbstractTestWALReplay
operator|.
name|CustomStoreFlusher
operator|.
name|throwExceptionWhenFlushing
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Injected exception hasn't been thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected simulated exception when flushing region, {}"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// simulated to abort server
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|rsServices
argument_list|)
operator|.
name|isAborted
argument_list|()
expr_stmt|;
name|region
operator|.
name|setClosing
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// region normally does not accept writes after
comment|// DroppedSnapshotException. We mock around it for this test.
block|}
comment|// writing more data
name|int
name|moreRow
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|writtenRowCount
init|;
name|i
operator|<
name|writtenRowCount
operator|+
name|moreRow
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableName
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|families
operator|.
name|get
argument_list|(
name|i
operator|%
name|families
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|writtenRowCount
operator|+=
name|moreRow
expr_stmt|;
comment|// call flush again
name|AbstractTestWALReplay
operator|.
name|CustomStoreFlusher
operator|.
name|throwExceptionWhenFlushing
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected exception when flushing region because server is stopped,"
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wal
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|// Let us try to split and recover
name|WALSplitter
operator|.
name|split
argument_list|(
name|rootDir
argument_list|,
name|logDir
argument_list|,
name|oldLogDir
argument_list|,
name|FileSystem
operator|.
name|get
argument_list|(
name|this
operator|.
name|conf
argument_list|)
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|wals
argument_list|)
expr_stmt|;
name|WAL
name|wal2
init|=
name|createWAL
argument_list|(
name|this
operator|.
name|conf
argument_list|,
name|rootDir
argument_list|,
name|logName
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|when
argument_list|(
name|rsServices
argument_list|)
operator|.
name|isAborted
argument_list|()
expr_stmt|;
name|HRegion
name|region2
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|this
operator|.
name|rootDir
argument_list|,
name|ri
argument_list|,
name|td
argument_list|,
name|wal2
argument_list|,
name|this
operator|.
name|conf
argument_list|,
name|rsServices
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|scanner
operator|=
name|region2
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writtenRowCount
argument_list|,
name|getScannedCount
argument_list|(
name|scanner
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getScannedCount
parameter_list|(
name|RegionScanner
name|scanner
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|scannedCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|existMore
init|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|scannedCount
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|existMore
condition|)
block|{
break|break;
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|scannedCount
return|;
block|}
block|}
end_class

end_unit

