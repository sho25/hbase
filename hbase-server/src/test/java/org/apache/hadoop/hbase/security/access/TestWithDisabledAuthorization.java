begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionServerCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Quotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MiniBatchOperationInProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|TestTableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestWithDisabledAuthorization
extends|extends
name|SecureTestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestWithDisabledAuthorization
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
name|AccessController
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|AccessControlFilter
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|TableAuthManager
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_Q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_Q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_Q3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_Q4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q4"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ZERO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|MasterCoprocessorEnvironment
name|CP_ENV
decl_stmt|;
specifier|private
specifier|static
name|AccessController
name|ACCESS_CONTROLLER
decl_stmt|;
specifier|private
specifier|static
name|RegionServerCoprocessorEnvironment
name|RSCP_ENV
decl_stmt|;
specifier|private
name|RegionCoprocessorEnvironment
name|RCP_ENV
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestTableName
name|TEST_TABLE
init|=
operator|new
name|TestTableName
argument_list|()
decl_stmt|;
comment|// default users
comment|// superuser
specifier|private
specifier|static
name|User
name|SUPERUSER
decl_stmt|;
comment|// user granted with all global permission
specifier|private
specifier|static
name|User
name|USER_ADMIN
decl_stmt|;
comment|// user with rw permissions on column family.
specifier|private
specifier|static
name|User
name|USER_RW
decl_stmt|;
comment|// user with read-only permissions
specifier|private
specifier|static
name|User
name|USER_RO
decl_stmt|;
comment|// user is table owner. will have all permissions on table
specifier|private
specifier|static
name|User
name|USER_OWNER
decl_stmt|;
comment|// user with create table permissions alone
specifier|private
specifier|static
name|User
name|USER_CREATE
decl_stmt|;
comment|// user with no permissions
specifier|private
specifier|static
name|User
name|USER_NONE
decl_stmt|;
comment|// user with only partial read-write perms (on family:q1 only)
specifier|private
specifier|static
name|User
name|USER_QUAL
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Up the handlers; this test needs more than usual.
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HIGH_PRIORITY_HANDLER_COUNT
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Enable security
name|enableSecurity
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// We expect 0.98 cell ACL semantics
name|conf
operator|.
name|setBoolean
argument_list|(
name|AccessControlConstants
operator|.
name|CF_ATTRIBUTE_EARLY_OUT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Enable EXEC permission checking
name|conf
operator|.
name|setBoolean
argument_list|(
name|AccessControlConstants
operator|.
name|EXEC_PERMISSION_CHECKS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Verify enableSecurity sets up what we require
name|verifyConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Now, DISABLE only active authorization
name|conf
operator|.
name|setBoolean
argument_list|(
name|User
operator|.
name|HBASE_SECURITY_AUTHORIZATION_CONF_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Start the minicluster
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|MasterCoprocessorHost
name|cpHost
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|cpHost
operator|.
name|load
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|=
operator|(
name|AccessController
operator|)
name|cpHost
operator|.
name|findCoprocessor
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CP_ENV
operator|=
name|cpHost
operator|.
name|createEnvironment
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|ACCESS_CONTROLLER
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|RegionServerCoprocessorHost
name|rsHost
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
decl_stmt|;
name|RSCP_ENV
operator|=
name|rsHost
operator|.
name|createEnvironment
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|ACCESS_CONTROLLER
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Wait for the ACL table to become available
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
comment|// create a set of test users
name|SUPERUSER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"admin"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
expr_stmt|;
name|USER_ADMIN
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"admin2"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_OWNER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"owner"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_CREATE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"tbl_create"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_RW
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"rwuser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_RO
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"rouser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_QUAL
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"rwpartial"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_NONE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"nouser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create the test table (owner added to the _acl_ table)
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setOwner
argument_list|(
name|USER_OWNER
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RegionCoprocessorHost
name|rcpHost
init|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
decl_stmt|;
name|RCP_ENV
operator|=
name|rcpHost
operator|.
name|createEnvironment
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|ACCESS_CONTROLLER
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set up initial grants
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_RW
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
comment|// USER_CREATE is USER_RW plus CREATE permissions
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_CREATE
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_RO
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_QUAL
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Clean the _acl_ table
try|try
block|{
name|deleteTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|ex
parameter_list|)
block|{
comment|// Test deleted the table, no problem
name|LOG
operator|.
name|info
argument_list|(
literal|"Test deleted table "
operator|+
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify all table/namespace permissions are erased
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AccessControlLists
operator|.
name|getNamespacePermissions
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckPermissions
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|checkGlobalAdmin
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkGlobalPerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkGlobalAdmin
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkGlobalAdmin
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkGlobalRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkGlobalPerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkGlobalRead
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkGlobalRead
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkGlobalReadWrite
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkGlobalPerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkGlobalReadWrite
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkGlobalReadWrite
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkTableAdmin
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkTableAdmin
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkTableAdmin
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkTableCreate
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkTableCreate
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkTableCreate
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkTableRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkTableRead
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkTableRead
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkTableReadWrite
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkTableReadWrite
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkTableReadWrite
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkColumnRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkColumnRead
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkColumnRead
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkColumnReadWrite
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkColumnReadWrite
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkColumnReadWrite
argument_list|,
name|USER_RO
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkQualifierRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkQualifierRead
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_QUAL
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkQualifierRead
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkQualifierReadWrite
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkQualifierReadWrite
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_QUAL
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkQualifierReadWrite
argument_list|,
name|USER_RO
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkMultiQualifierRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|Permission
index|[]
block|{
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
block|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q2
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
block|, }
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkMultiQualifierRead
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkMultiQualifierRead
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|AccessTestAction
name|checkMultiQualifierReadWrite
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|new
name|Permission
index|[]
block|{
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
block|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q2
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
block|, }
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|checkMultiQualifierReadWrite
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_RW
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|checkMultiQualifierReadWrite
argument_list|,
name|USER_RO
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
comment|/** Test grants and revocations with authorization disabled */
annotation|@
name|Test
specifier|public
name|void
name|testPassiveGrantRevoke
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add a test user
name|User
name|tblUser
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"tbluser"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// If we check now, the test user won't have permissions
name|AccessTestAction
name|checkTableRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|checkTablePerms
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|checkTableRead
argument_list|)
expr_stmt|;
comment|// An actual read won't be denied
name|AccessTestAction
name|tableRead
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Table
name|t
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|tableRead
argument_list|)
expr_stmt|;
comment|// Grant read perms to the test user
name|grantOnTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// Now both the permission check and actual op will succeed
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|checkTableRead
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|tableRead
argument_list|)
expr_stmt|;
comment|// Revoke read perms from the test user
name|revokeFromTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tblUser
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY
argument_list|,
literal|null
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
comment|// Now the permission check will indicate revocation but the actual op will still succeed
name|verifyDenied
argument_list|(
name|tblUser
argument_list|,
name|checkTableRead
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|tblUser
argument_list|,
name|tableRead
argument_list|)
expr_stmt|;
block|}
comment|/** Test master observer */
annotation|@
name|Test
specifier|public
name|void
name|testPassiveMasterOperations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// preCreateTable
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preCreateTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preModifyTable
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY2
argument_list|)
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preModifyTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preDeleteTable
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDeleteTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preTruncateTable
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preTruncateTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preAddColumnFamily
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY2
argument_list|)
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preAddColumnFamily
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preModifyColumnFamily
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY2
argument_list|)
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preModifyColumnFamily
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preDeleteColumnFamily
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDeleteColumnFamily
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|TEST_FAMILY2
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preEnableTable
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preEnableTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preDisableTable
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDisableTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preMove
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|srcServer
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"1.1.1.1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ServerName
name|destServer
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"2.2.2.2"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preMove
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|region
argument_list|,
name|srcServer
argument_list|,
name|destServer
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preAssign
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preAssign
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|region
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preUnassign
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preUnassign
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|region
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preBalance
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preBalance
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preBalanceSwitch
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preBalanceSwitch
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preSnapshot
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preListSnapshot
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preListSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preCloneSnapshot
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preCloneSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preRestoreSnapshot
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preRestoreSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|,
name|htd
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preDeleteSnapshot
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|SnapshotDescription
name|snapshot
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setName
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preDeleteSnapshot
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preGetTableDescriptors
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNamesList
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|tableNamesList
operator|.
name|add
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preGetTableDescriptors
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|tableNamesList
argument_list|,
name|descriptors
argument_list|,
literal|".+"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preGetTableNames
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preGetTableNames
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|descriptors
argument_list|,
literal|".+"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preCreateNamespace
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|NamespaceDescriptor
name|ns
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preCreateNamespace
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ns
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preDeleteNamespace
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDeleteNamespace
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preModifyNamespace
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|NamespaceDescriptor
name|ns
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
literal|"test"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preModifyNamespace
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ns
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preGetNamespaceDescriptor
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preGetNamespaceDescriptor
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preListNamespaceDescriptors
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|descriptors
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preListNamespaceDescriptors
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|descriptors
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preSplit
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preSplitRegion
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ss"
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preSetUserQuota
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Quotas
name|quotas
init|=
name|Quotas
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preSetUserQuota
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"testuser"
argument_list|,
name|quotas
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preSetTableQuota
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Quotas
name|quotas
init|=
name|Quotas
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preSetTableQuota
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|,
name|quotas
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preSetNamespaceQuota
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Quotas
name|quotas
init|=
name|Quotas
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preSetNamespaceQuota
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|quotas
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
comment|/** Test region server observer */
annotation|@
name|Test
specifier|public
name|void
name|testPassiveRegionServerOperations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// preStopRegionServer
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preStopRegionServer
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RSCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preMerge
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Region
name|region_a
init|=
name|mock
argument_list|(
name|Region
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|region_a
operator|.
name|getTableDesc
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|Region
name|region_b
init|=
name|mock
argument_list|(
name|Region
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|region_b
operator|.
name|getTableDesc
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preMerge
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RSCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|region_a
argument_list|,
name|region_b
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preRollWALWriterRequest
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preRollWALWriterRequest
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RSCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
comment|/** Test region observer */
annotation|@
name|Test
specifier|public
name|void
name|testPassiveRegionOperations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// preOpen
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preOpen
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preFlush
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preFlush
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preGetOp
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preGetOp
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|,
name|cells
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preExists
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preExists
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// prePut
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|prePut
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|,
operator|new
name|WALEdit
argument_list|()
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preDelete
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDelete
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|,
operator|new
name|WALEdit
argument_list|()
argument_list|,
name|Durability
operator|.
name|USE_DEFAULT
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preBatchMutate
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preBatchMutate
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|MiniBatchOperationInProgress
argument_list|<>
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preCheckAndPut
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preCheckAndPut
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_ROW
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preCheckAndDelete
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preCheckAndDelete
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_ROW
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preAppend
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preAppend
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Append
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preIncrement
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preIncrement
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Increment
argument_list|(
name|TEST_ROW
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preScannerOpen
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preScannerOpen
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|Scan
argument_list|()
argument_list|,
name|mock
argument_list|(
name|RegionScanner
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
comment|// preBulkLoadHFile
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|paths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preBulkLoadHFile
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|RCP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|paths
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_ADMIN
argument_list|,
name|USER_RW
argument_list|,
name|USER_RO
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_CREATE
argument_list|,
name|USER_QUAL
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPassiveCellPermissions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// store two sets of values, one store with a cell level ACL, and one without
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|t
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Put
name|p
decl_stmt|;
comment|// with ro ACL
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|USER_NONE
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|Permission
argument_list|(
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// with rw ACL
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_Q2
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|USER_NONE
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|Permission
argument_list|(
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// no ACL
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_Q3
argument_list|,
name|ZERO
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_Q4
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
comment|// check that a scan over the test data returns the expected number of KVs
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|scanResults
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|AccessTestAction
name|scanAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Cell
argument_list|>
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|TEST_ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|TEST_ROW
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|0
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ResultScanner
name|scanner
init|=
name|t
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
do|do
block|{
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|scanResults
operator|.
name|addAll
argument_list|(
name|result
operator|.
name|listCells
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|result
operator|!=
literal|null
condition|)
do|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|scanResults
return|;
block|}
block|}
decl_stmt|;
comment|// owner will see all values
name|scanResults
operator|.
name|clear
argument_list|()
expr_stmt|;
name|verifyAllowed
argument_list|(
name|scanAction
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scanResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// other user will also see 4 values
comment|// if cell filtering was active, we would only see 2 values
name|scanResults
operator|.
name|clear
argument_list|()
expr_stmt|;
name|verifyAllowed
argument_list|(
name|scanAction
argument_list|,
name|USER_NONE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|scanResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

