begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedWithDetailsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|AccessControlService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|CheckPermissionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Utility methods for testing security  */
end_comment

begin_class
specifier|public
class|class
name|SecureTestUtil
block|{
specifier|public
specifier|static
name|void
name|enableSecurity
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authorization"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.coprocessor.master.classes"
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.coprocessor.region.classes"
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|SecureBulkLoadEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// add the process running user to superusers
name|String
name|currentUser
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.superuser"
argument_list|,
literal|"admin,"
operator|+
name|currentUser
argument_list|)
expr_stmt|;
comment|// Need HFile V3 for tags for security features
name|conf
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|verifyAllowed
parameter_list|(
name|User
name|user
parameter_list|,
name|PrivilegedExceptionAction
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|PrivilegedExceptionAction
name|action
range|:
name|actions
control|)
block|{
try|try
block|{
name|user
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|ade
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected action to pass for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"' but was denied"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|verifyAllowed
parameter_list|(
name|PrivilegedExceptionAction
name|action
parameter_list|,
name|User
modifier|...
name|users
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|verifyDenied
parameter_list|(
name|User
name|user
parameter_list|,
name|PrivilegedExceptionAction
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|PrivilegedExceptionAction
name|action
range|:
name|actions
control|)
block|{
try|try
block|{
name|user
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected AccessDeniedException for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|boolean
name|isAccessDeniedException
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RetriesExhaustedWithDetailsException
condition|)
block|{
comment|// in case of batch operations, and put, the client assembles a
comment|// RetriesExhaustedWithDetailsException instead of throwing an
comment|// AccessDeniedException
for|for
control|(
name|Throwable
name|ex
range|:
operator|(
operator|(
name|RetriesExhaustedWithDetailsException
operator|)
name|e
operator|)
operator|.
name|getCauses
argument_list|()
control|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|AccessDeniedException
condition|)
block|{
name|isAccessDeniedException
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// For doBulkLoad calls AccessDeniedException
comment|// is buried in the stack trace
name|Throwable
name|ex
init|=
name|e
decl_stmt|;
do|do
block|{
if|if
condition|(
name|ex
operator|instanceof
name|AccessDeniedException
condition|)
block|{
name|isAccessDeniedException
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
operator|(
name|ex
operator|=
name|ex
operator|.
name|getCause
argument_list|()
operator|)
operator|!=
literal|null
condition|)
do|;
block|}
if|if
condition|(
operator|!
name|isAccessDeniedException
condition|)
block|{
name|fail
argument_list|(
literal|"Not receiving AccessDeniedException for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ute
parameter_list|)
block|{
comment|// TODO why we get a PrivilegedActionException, which is unexpected?
name|Throwable
name|ex
init|=
name|ute
operator|.
name|getUndeclaredThrowable
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|PrivilegedActionException
condition|)
block|{
name|ex
operator|=
operator|(
operator|(
name|PrivilegedActionException
operator|)
name|ex
operator|)
operator|.
name|getException
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|ServiceException
condition|)
block|{
name|ServiceException
name|se
init|=
operator|(
name|ServiceException
operator|)
name|ex
decl_stmt|;
if|if
condition|(
name|se
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessDeniedException
condition|)
block|{
comment|// expected result
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"Not receiving AccessDeniedException for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|verifyDenied
parameter_list|(
name|PrivilegedExceptionAction
name|action
parameter_list|,
name|User
modifier|...
name|users
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkTablePerms
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
index|[]
name|perms
init|=
operator|new
name|Permission
index|[
name|actions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|perms
index|[
name|i
index|]
operator|=
operator|new
name|TablePermission
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|,
name|family
argument_list|,
name|column
argument_list|,
name|actions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|checkTablePerms
argument_list|(
name|conf
argument_list|,
name|table
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkTablePerms
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|table
parameter_list|,
name|Permission
modifier|...
name|perms
parameter_list|)
throws|throws
name|IOException
block|{
name|CheckPermissionsRequest
operator|.
name|Builder
name|request
init|=
name|CheckPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|p
range|:
name|perms
control|)
block|{
name|request
operator|.
name|addPermission
argument_list|(
name|ProtobufUtil
operator|.
name|toPermission
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HTable
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|acl
operator|.
name|coprocessorService
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|protocol
operator|.
name|checkPermissions
argument_list|(
literal|null
argument_list|,
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|ProtobufUtil
operator|.
name|toIOException
argument_list|(
name|se
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

