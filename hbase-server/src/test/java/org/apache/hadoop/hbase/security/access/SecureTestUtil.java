begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedWithDetailsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|AccessControlService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|CheckPermissionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingRpcChannel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Utility methods for testing security  */
end_comment

begin_class
specifier|public
class|class
name|SecureTestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SecureTestUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|WAIT_TIME
init|=
literal|10000
decl_stmt|;
specifier|public
specifier|static
name|void
name|enableSecurity
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authorization"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|SecureBulkLoadEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGIONSERVER_COPROCESSOR_CONF_KEY
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// The secure minicluster creates separate service principals based on the
comment|// current user's name, one for each slave. We need to add all of these to
comment|// the superuser list or security won't function properly. We expect the
comment|// HBase service account(s) to have superuser privilege.
name|String
name|currentUser
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"admin,"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|currentUser
argument_list|)
expr_stmt|;
comment|// Assumes we won't ever have a minicluster with more than 5 slaves
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|currentUser
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".hfs."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.superuser"
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Need HFile V3 for tags for security features
name|conf
operator|.
name|setInt
argument_list|(
name|HFile
operator|.
name|FORMAT_VERSION_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|verifyConfiguration
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|conf
operator|.
name|get
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|)
operator|.
name|contains
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|conf
operator|.
name|get
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|)
operator|.
name|contains
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|conf
operator|.
name|get
argument_list|(
name|CoprocessorHost
operator|.
name|REGIONSERVER_COPROCESSOR_CONF_KEY
argument_list|)
operator|.
name|contains
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"AccessController is missing from a system coprocessor list"
argument_list|)
throw|;
block|}
if|if
condition|(
name|conf
operator|.
name|getInt
argument_list|(
name|HFile
operator|.
name|FORMAT_VERSION_KEY
argument_list|,
literal|2
argument_list|)
operator|<
name|HFile
operator|.
name|MIN_FORMAT_VERSION_WITH_TAGS
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Post 0.96 security features require HFile version>= 3"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|checkTablePerms
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|table
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
index|[]
name|perms
init|=
operator|new
name|Permission
index|[
name|actions
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|actions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|perms
index|[
name|i
index|]
operator|=
operator|new
name|TablePermission
argument_list|(
name|table
argument_list|,
name|family
argument_list|,
name|column
argument_list|,
name|actions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|checkTablePerms
argument_list|(
name|conf
argument_list|,
name|table
argument_list|,
name|perms
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|checkTablePerms
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|TableName
name|table
parameter_list|,
name|Permission
modifier|...
name|perms
parameter_list|)
throws|throws
name|IOException
block|{
name|CheckPermissionsRequest
operator|.
name|Builder
name|request
init|=
name|CheckPermissionsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Permission
name|p
range|:
name|perms
control|)
block|{
name|request
operator|.
name|addPermission
argument_list|(
name|ProtobufUtil
operator|.
name|toPermission
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Table
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|table
argument_list|)
decl_stmt|;
try|try
block|{
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|acl
operator|.
name|coprocessorService
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|protocol
operator|.
name|checkPermissions
argument_list|(
literal|null
argument_list|,
name|request
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
name|ProtobufUtil
operator|.
name|toIOException
argument_list|(
name|se
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * An AccessTestAction performs an action that will be examined to confirm    * the results conform to expected access rights.    *<p>    * To indicate an action was allowed, return null or a non empty list of    * KeyValues.    *<p>    * To indicate the action was not allowed, either throw an AccessDeniedException    * or return an empty list of KeyValues.    */
specifier|static
interface|interface
name|AccessTestAction
extends|extends
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
block|{ }
specifier|public
specifier|static
name|void
name|verifyAllowed
parameter_list|(
name|User
name|user
parameter_list|,
name|AccessTestAction
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|AccessTestAction
name|action
range|:
name|actions
control|)
block|{
try|try
block|{
name|Object
name|obj
init|=
name|user
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Empty non null results from action for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|ade
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected action to pass for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"' but was denied"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_function
specifier|public
specifier|static
name|void
name|verifyAllowed
parameter_list|(
name|AccessTestAction
name|action
parameter_list|,
name|User
modifier|...
name|users
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|verifyAllowed
argument_list|(
name|user
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|verifyAllowed
parameter_list|(
name|User
name|user
parameter_list|,
name|AccessTestAction
name|action
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|Object
name|obj
init|=
name|user
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Empty non null results from action for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|AccessDeniedException
name|ade
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Expected action to pass for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"' but was denied"
argument_list|)
expr_stmt|;
block|}
end_catch

begin_function
unit|}    public
specifier|static
name|void
name|verifyDeniedWithException
parameter_list|(
name|User
name|user
parameter_list|,
name|AccessTestAction
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyDenied
argument_list|(
name|user
argument_list|,
literal|true
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|verifyDeniedWithException
parameter_list|(
name|AccessTestAction
name|action
parameter_list|,
name|User
modifier|...
name|users
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|verifyDenied
argument_list|(
name|user
argument_list|,
literal|true
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|verifyDenied
parameter_list|(
name|User
name|user
parameter_list|,
name|AccessTestAction
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyDenied
argument_list|(
name|user
argument_list|,
literal|false
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|verifyDenied
parameter_list|(
name|User
name|user
parameter_list|,
name|boolean
name|requireException
parameter_list|,
name|AccessTestAction
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|AccessTestAction
name|action
range|:
name|actions
control|)
block|{
try|try
block|{
name|Object
name|obj
init|=
name|user
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|requireException
condition|)
block|{
name|fail
argument_list|(
literal|"Expected exception was not thrown for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|instanceof
name|List
argument_list|<
name|?
argument_list|>
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Unexpected results for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|boolean
name|isAccessDeniedException
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RetriesExhaustedWithDetailsException
condition|)
block|{
comment|// in case of batch operations, and put, the client assembles a
comment|// RetriesExhaustedWithDetailsException instead of throwing an
comment|// AccessDeniedException
for|for
control|(
name|Throwable
name|ex
range|:
operator|(
operator|(
name|RetriesExhaustedWithDetailsException
operator|)
name|e
operator|)
operator|.
name|getCauses
argument_list|()
control|)
block|{
if|if
condition|(
name|ex
operator|instanceof
name|AccessDeniedException
condition|)
block|{
name|isAccessDeniedException
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// For doBulkLoad calls AccessDeniedException
comment|// is buried in the stack trace
name|Throwable
name|ex
init|=
name|e
decl_stmt|;
do|do
block|{
if|if
condition|(
name|ex
operator|instanceof
name|AccessDeniedException
condition|)
block|{
name|isAccessDeniedException
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
do|while
condition|(
operator|(
name|ex
operator|=
name|ex
operator|.
name|getCause
argument_list|()
operator|)
operator|!=
literal|null
condition|)
do|;
block|}
if|if
condition|(
operator|!
name|isAccessDeniedException
condition|)
block|{
name|fail
argument_list|(
literal|"Expected exception was not thrown for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|ute
parameter_list|)
block|{
comment|// TODO why we get a PrivilegedActionException, which is unexpected?
name|Throwable
name|ex
init|=
name|ute
operator|.
name|getUndeclaredThrowable
argument_list|()
decl_stmt|;
if|if
condition|(
name|ex
operator|instanceof
name|PrivilegedActionException
condition|)
block|{
name|ex
operator|=
operator|(
operator|(
name|PrivilegedActionException
operator|)
name|ex
operator|)
operator|.
name|getException
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|instanceof
name|ServiceException
condition|)
block|{
name|ServiceException
name|se
init|=
operator|(
name|ServiceException
operator|)
name|ex
decl_stmt|;
if|if
condition|(
name|se
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|se
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessDeniedException
condition|)
block|{
comment|// expected result
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"Expected exception was not thrown for user '"
operator|+
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
unit|}    public
specifier|static
name|void
name|verifyDenied
parameter_list|(
name|AccessTestAction
name|action
parameter_list|,
name|User
modifier|...
name|users
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|User
name|user
range|:
name|users
control|)
block|{
name|verifyDenied
argument_list|(
name|user
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|AccessController
argument_list|>
name|getAccessControllers
parameter_list|(
name|MiniHBaseCluster
name|cluster
parameter_list|)
block|{
name|List
argument_list|<
name|AccessController
argument_list|>
name|result
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|t
range|:
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
control|)
block|{
for|for
control|(
name|HRegion
name|region
range|:
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
control|)
block|{
name|Coprocessor
name|cp
init|=
name|region
operator|.
name|getCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|(
name|AccessController
operator|)
name|cp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|Map
argument_list|<
name|AccessController
argument_list|,
name|Long
argument_list|>
name|getAuthManagerMTimes
parameter_list|(
name|MiniHBaseCluster
name|cluster
parameter_list|)
block|{
name|Map
argument_list|<
name|AccessController
argument_list|,
name|Long
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessController
name|ac
range|:
name|getAccessControllers
argument_list|(
name|cluster
argument_list|)
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|ac
argument_list|,
name|ac
operator|.
name|getAuthManager
argument_list|()
operator|.
name|getMTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|private
specifier|static
name|void
name|updateACLs
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
name|Callable
name|c
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Get the current mtimes for all access controllers
specifier|final
name|Map
argument_list|<
name|AccessController
argument_list|,
name|Long
argument_list|>
name|oldMTimes
init|=
name|getAuthManagerMTimes
argument_list|(
name|util
operator|.
name|getHBaseCluster
argument_list|()
argument_list|)
decl_stmt|;
comment|// Run the update action
name|c
operator|.
name|call
argument_list|()
expr_stmt|;
comment|// Wait until mtimes for all access controllers have incremented
name|util
operator|.
name|waitFor
argument_list|(
name|WAIT_TIME
argument_list|,
literal|100
argument_list|,
operator|new
name|Predicate
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|AccessController
argument_list|,
name|Long
argument_list|>
name|mtimes
init|=
name|getAuthManagerMTimes
argument_list|(
name|util
operator|.
name|getHBaseCluster
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AccessController
argument_list|,
name|Long
argument_list|>
name|e
range|:
name|mtimes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|oldMTimes
operator|.
name|containsKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Snapshot of AccessController state does not include instance on region "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Error out the predicate, we will try again
return|return
literal|false
return|;
block|}
name|long
name|old
init|=
name|oldMTimes
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|<=
name|old
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"AccessController on region "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getRegion
argument_list|()
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" has not updated: mtime="
operator|+
name|now
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Grant permissions globally to the given user. Will wait until all active    * AccessController instances have updated their permissions caches or will    * throw an exception upon timeout (10 seconds).    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|grantGlobal
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureTestUtil
operator|.
name|updateACLs
argument_list|(
name|util
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|grant
argument_list|(
name|protocol
argument_list|,
name|user
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Revoke permissions globally from the given user. Will wait until all active    * AccessController instances have updated their permissions caches or will    * throw an exception upon timeout (10 seconds).    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|revokeGlobal
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureTestUtil
operator|.
name|updateACLs
argument_list|(
name|util
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|revoke
argument_list|(
name|protocol
argument_list|,
name|user
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Grant permissions on a namespace to the given user. Will wait until all active    * AccessController instances have updated their permissions caches or will    * throw an exception upon timeout (10 seconds).    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|grantOnNamespace
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureTestUtil
operator|.
name|updateACLs
argument_list|(
name|util
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|grant
argument_list|(
name|protocol
argument_list|,
name|user
argument_list|,
name|namespace
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Grant permissions on a namespace to the given user using AccessControl Client.    * Will wait until all active AccessController instances have updated their permissions caches    * or will throw an exception upon timeout (10 seconds).    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|grantOnNamespaceUsingAccessControlClient
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureTestUtil
operator|.
name|updateACLs
argument_list|(
name|util
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|AccessControlClient
operator|.
name|grant
argument_list|(
name|conf
argument_list|,
name|namespace
argument_list|,
name|user
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Revoke permissions on a namespace from the given user using AccessControl Client.    * Will wait until all active AccessController instances have updated their permissions caches    * or will throw an exception upon timeout (10 seconds).    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|revokeFromNamespaceUsingAccessControlClient
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureTestUtil
operator|.
name|updateACLs
argument_list|(
name|util
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|AccessControlClient
operator|.
name|revoke
argument_list|(
name|conf
argument_list|,
name|namespace
argument_list|,
name|user
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Revoke permissions on a namespace from the given user. Will wait until all active    * AccessController instances have updated their permissions caches or will    * throw an exception upon timeout (10 seconds).    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|revokeFromNamespace
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureTestUtil
operator|.
name|updateACLs
argument_list|(
name|util
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|revoke
argument_list|(
name|protocol
argument_list|,
name|user
argument_list|,
name|namespace
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Grant permissions on a table to the given user. Will wait until all active    * AccessController instances have updated their permissions caches or will    * throw an exception upon timeout (10 seconds).    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|grantOnTable
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureTestUtil
operator|.
name|updateACLs
argument_list|(
name|util
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|grant
argument_list|(
name|protocol
argument_list|,
name|user
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Grant permissions on a table to the given user using AccessControlClient. Will wait until all    * active AccessController instances have updated their permissions caches or will    * throw an exception upon timeout (10 seconds).    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|grantOnTableUsingAccessControlClient
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureTestUtil
operator|.
name|updateACLs
argument_list|(
name|util
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|AccessControlClient
operator|.
name|grant
argument_list|(
name|conf
argument_list|,
name|table
argument_list|,
name|user
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Revoke permissions on a table from the given user. Will wait until all active    * AccessController instances have updated their permissions caches or will    * throw an exception upon timeout (10 seconds).    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|revokeFromTable
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureTestUtil
operator|.
name|updateACLs
argument_list|(
name|util
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|acl
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|revoke
argument_list|(
name|protocol
argument_list|,
name|user
argument_list|,
name|table
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Revoke permissions on a table from the given user using AccessControlClient. Will wait until    * all active AccessController instances have updated their permissions caches or will    * throw an exception upon timeout (10 seconds).    */
end_comment

begin_function
specifier|public
specifier|static
name|void
name|revokeFromTableUsingAccessControlClient
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|,
specifier|final
name|byte
index|[]
name|qualifier
parameter_list|,
specifier|final
name|Permission
operator|.
name|Action
modifier|...
name|actions
parameter_list|)
throws|throws
name|Exception
block|{
name|SecureTestUtil
operator|.
name|updateACLs
argument_list|(
name|util
argument_list|,
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|AccessControlClient
operator|.
name|revoke
argument_list|(
name|conf
argument_list|,
name|table
argument_list|,
name|user
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|actions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

