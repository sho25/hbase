begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|TestTableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCellACLWithMultipleVersions
extends|extends
name|SecureTestUtil
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCellACLWithMultipleVersions
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|Logger
operator|.
name|getLogger
argument_list|(
name|AccessController
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|AccessControlFilter
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
name|Logger
operator|.
name|getLogger
argument_list|(
name|TableAuthManager
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|TRACE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Rule
specifier|public
name|TestTableName
name|TEST_TABLE
init|=
operator|new
name|TestTableName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAMILY2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cellpermtest"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_Q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TEST_Q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ZERO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ONE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TWO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP
init|=
literal|"group"
decl_stmt|;
specifier|private
specifier|static
name|User
name|GROUP_USER
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER_OWNER
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER_OTHER
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER_OTHER2
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|usersAndGroups
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup configuration
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// Enable security
name|enableSecurity
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Verify enableSecurity sets up what we require
name|verifyConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// We expect 0.98 cell ACL semantics
name|conf
operator|.
name|setBoolean
argument_list|(
name|AccessControlConstants
operator|.
name|CF_ATTRIBUTE_EARLY_OUT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|MasterCoprocessorHost
name|cpHost
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|cpHost
operator|.
name|load
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|AccessController
name|ac
init|=
operator|(
name|AccessController
operator|)
name|cpHost
operator|.
name|findCoprocessor
argument_list|(
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cpHost
operator|.
name|createEnvironment
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|ac
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|RegionServerCoprocessorHost
name|rsHost
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
decl_stmt|;
name|rsHost
operator|.
name|createEnvironment
argument_list|(
name|AccessController
operator|.
name|class
argument_list|,
name|ac
argument_list|,
name|Coprocessor
operator|.
name|PRIORITY_HIGHEST
argument_list|,
literal|1
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Wait for the ACL table to become available
name|TEST_UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
comment|// create a set of test users
name|USER_OWNER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"owner"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_OTHER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"other"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_OTHER2
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"other2"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|GROUP_USER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"group_user"
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP
block|}
argument_list|)
expr_stmt|;
name|usersAndGroups
operator|=
operator|new
name|String
index|[]
block|{
name|USER_OTHER
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|}
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY1
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setOwner
argument_list|(
name|USER_OWNER
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|hcd
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY2
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|htd
operator|.
name|setOwner
argument_list|(
name|USER_OWNER
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// Create the test table (owner added to the _acl_ table)
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"s"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|TEST_UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping a second because of HBASE-12581"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCellPermissionwithVersions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// store two sets of values, one store with a cell level ACL, and one
comment|// without
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|writePerms
init|=
name|prepareCellPermissions
argument_list|(
name|usersAndGroups
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|readPerms
init|=
name|prepareCellPermissions
argument_list|(
name|usersAndGroups
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
decl_stmt|;
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|t
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Put
name|p
decl_stmt|;
comment|// with ro ACL
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|writePerms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// with ro ACL
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|readPerms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|writePerms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|readPerms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|writePerms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
comment|/* ---- Gets ---- */
name|AccessTestAction
name|getQ1
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|10
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|t
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
return|return
name|t
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|listCells
argument_list|()
return|;
block|}
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|get2
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|10
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|t
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
return|return
name|t
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|listCells
argument_list|()
return|;
block|}
block|}
block|}
decl_stmt|;
comment|// Confirm special read access set at cell level
name|verifyAllowed
argument_list|(
name|GROUP_USER
argument_list|,
name|getQ1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|USER_OTHER
argument_list|,
name|getQ1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// store two sets of values, one store with a cell level ACL, and one
comment|// without
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|t
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Put
name|p
decl_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|writePerms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|readPerms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|writePerms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
comment|// Confirm special read access set at cell level
name|verifyAllowed
argument_list|(
name|USER_OTHER
argument_list|,
name|get2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|GROUP_USER
argument_list|,
name|get2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|prepareCellPermissions
parameter_list|(
name|String
index|[]
name|users
parameter_list|,
name|Action
modifier|...
name|action
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|perms
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|user
range|:
name|users
control|)
block|{
name|perms
operator|.
name|put
argument_list|(
name|user
argument_list|,
operator|new
name|Permission
argument_list|(
name|action
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|perms
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCellPermissionsWithDeleteMutipleVersions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// table/column/qualifier level permissions
specifier|final
name|byte
index|[]
name|TEST_ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_ROW2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|ZERO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
comment|// additional test user
specifier|final
name|User
name|user1
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user1"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|User
name|user2
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user2"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
comment|// with rw ACL for "user1"
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|user1
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// with rw ACL for "user1"
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|user1
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
comment|// with rw ACL for "user1", "user2" and "@group"
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|perms
init|=
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|user1
operator|.
name|getShortName
argument_list|()
block|,
name|user2
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|perms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// with rw ACL for "user1", "user2" and "@group"
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|perms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|user1
argument_list|)
expr_stmt|;
comment|// user1 should be allowed to delete TEST_ROW1 as he is having write permission on both
comment|// versions of the cells
name|user1
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// user2 should not be allowed to delete TEST_ROW2 as he is having write permission only on one
comment|// version of the cells.
name|verifyUserDeniedForDeleteMultipleVersions
argument_list|(
name|user2
argument_list|,
name|TEST_ROW2
argument_list|,
name|TEST_Q1
argument_list|,
name|TEST_Q2
argument_list|)
expr_stmt|;
comment|// GROUP_USER should not be allowed to delete TEST_ROW2 as he is having write permission only on
comment|// one version of the cells.
name|verifyUserDeniedForDeleteMultipleVersions
argument_list|(
name|GROUP_USER
argument_list|,
name|TEST_ROW2
argument_list|,
name|TEST_Q1
argument_list|,
name|TEST_Q2
argument_list|)
expr_stmt|;
comment|// user1 should be allowed to delete the cf. (All data under cf for a row)
name|user1
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW2
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteFamily
argument_list|(
name|TEST_FAMILY1
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUserDeniedForDeleteMultipleVersions
parameter_list|(
specifier|final
name|User
name|user
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|q1
parameter_list|,
specifier|final
name|byte
index|[]
name|q2
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|" should not be allowed to delete the row"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{            }
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteWithFutureTimestamp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Store two values, one in the future
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
comment|// Store a read write ACL without a timestamp, server will use current time
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
name|ONE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|readAndWritePerms
init|=
name|prepareCellPermissions
argument_list|(
name|usersAndGroups
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|readAndWritePerms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY2
argument_list|,
name|TEST_Q2
argument_list|,
name|ONE
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|readAndWritePerms
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Stored at current time"
argument_list|)
expr_stmt|;
comment|// Store read only ACL at a future time
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
literal|1000000
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|USER_OTHER
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
comment|// Confirm stores are visible
name|AccessTestAction
name|getQ1
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
return|return
name|t
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|listCells
argument_list|()
return|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|getQ2
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
return|return
name|t
operator|.
name|get
argument_list|(
name|get
argument_list|)
operator|.
name|listCells
argument_list|()
return|;
block|}
block|}
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|getQ1
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_OTHER
argument_list|,
name|GROUP_USER
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|getQ2
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_OTHER
argument_list|,
name|GROUP_USER
argument_list|)
expr_stmt|;
comment|// Issue a DELETE for the family, should succeed because the future ACL is
comment|// not considered
name|AccessTestAction
name|deleteFamily1
init|=
name|getDeleteFamilyAction
argument_list|(
name|TEST_FAMILY1
argument_list|)
decl_stmt|;
name|AccessTestAction
name|deleteFamily2
init|=
name|getDeleteFamilyAction
argument_list|(
name|TEST_FAMILY2
argument_list|)
decl_stmt|;
name|verifyAllowed
argument_list|(
name|deleteFamily1
argument_list|,
name|USER_OTHER
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|deleteFamily2
argument_list|,
name|GROUP_USER
argument_list|)
expr_stmt|;
comment|// The future put should still exist
name|verifyAllowed
argument_list|(
name|getQ1
argument_list|,
name|USER_OWNER
argument_list|,
name|USER_OTHER
argument_list|,
name|GROUP_USER
argument_list|)
expr_stmt|;
comment|// The other put should be covered by the tombstone
name|verifyIfNull
argument_list|(
name|getQ2
argument_list|,
name|USER_OTHER
argument_list|,
name|GROUP_USER
argument_list|)
expr_stmt|;
block|}
specifier|private
name|AccessTestAction
name|getDeleteFamilyAction
parameter_list|(
specifier|final
name|byte
index|[]
name|fam
parameter_list|)
block|{
name|AccessTestAction
name|deleteFamilyAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|)
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|t
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
return|return
name|deleteFamilyAction
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCellPermissionsWithDeleteWithUserTs
parameter_list|()
throws|throws
name|Exception
block|{
name|USER_OWNER
operator|.
name|runAs
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
comment|// This version (TS = 123) with rw ACL for USER_OTHER and USER_OTHER2
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|123L
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|123L
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|USER_OTHER
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|,
name|USER_OTHER2
operator|.
name|getShortName
argument_list|()
block|}
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// This version (TS = 125) with rw ACL for USER_OTHER
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|125L
argument_list|,
name|ONE
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|125L
argument_list|,
name|ONE
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|USER_OTHER
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// This version (TS = 127) with rw ACL for USER_OTHER
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|127L
argument_list|,
name|TWO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|127L
argument_list|,
name|TWO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|USER_OTHER
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|// USER_OTHER2 should be allowed to delete the column f1:q1 versions older than TS 124L
name|USER_OTHER2
operator|.
name|runAs
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|,
literal|124L
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// USER_OTHER2 should be allowed to delete the column f1:q2 versions older than TS 124L
name|USER_OTHER2
operator|.
name|runAs
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|124L
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCellPermissionsWithDeleteExactVersion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|TEST_ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|ZERO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|final
name|User
name|user1
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user1"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|User
name|user2
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user2"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permsU1andOwner
init|=
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|user1
operator|.
name|getShortName
argument_list|()
block|,
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permsU2andGUandOwner
init|=
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|user2
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|,
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1andOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU2andGUandOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY2
argument_list|,
name|TEST_Q1
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY2
argument_list|,
name|TEST_Q2
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU2andGUandOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY2
argument_list|,
name|TEST_Q1
argument_list|,
literal|125
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY2
argument_list|,
name|TEST_Q2
argument_list|,
literal|125
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1andOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|127
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU2andGUandOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|127
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1andOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY2
argument_list|,
name|TEST_Q1
argument_list|,
literal|129
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY2
argument_list|,
name|TEST_Q2
argument_list|,
literal|129
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1andOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
comment|// user1 should be allowed to delete TEST_ROW1 as he is having write permission on both
comment|// versions of the cells
name|user1
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumn
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteFamilyVersion
argument_list|(
name|TEST_FAMILY2
argument_list|,
literal|125
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|verifyUserDeniedForDeleteExactVersion
argument_list|(
name|user2
argument_list|,
name|TEST_ROW1
argument_list|,
name|TEST_Q1
argument_list|,
name|TEST_Q2
argument_list|)
expr_stmt|;
name|verifyUserDeniedForDeleteExactVersion
argument_list|(
name|GROUP_USER
argument_list|,
name|TEST_ROW1
argument_list|,
name|TEST_Q1
argument_list|,
name|TEST_Q2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUserDeniedForDeleteExactVersion
parameter_list|(
specifier|final
name|User
name|user
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|q1
parameter_list|,
specifier|final
name|byte
index|[]
name|q2
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|,
literal|127
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|q1
argument_list|)
expr_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|q2
argument_list|)
expr_stmt|;
name|d
operator|.
name|addFamily
argument_list|(
name|TEST_FAMILY2
argument_list|,
literal|129
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|" can not do the delete"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{            }
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCellPermissionsForIncrementWithMultipleVersions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|TEST_ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|ZERO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|final
name|User
name|user1
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user1"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|User
name|user2
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user2"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permsU1andOwner
init|=
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|user1
operator|.
name|getShortName
argument_list|()
block|,
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permsU2andGUandOwner
init|=
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|user2
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|,
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1andOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU2andGUandOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|127
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU2andGUandOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|127
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1andOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
comment|// Increment considers the TimeRange set on it.
name|user1
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|inc
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|t
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|t
operator|.
name|incrementColumnValue
argument_list|(
name|TEST_ROW1
argument_list|,
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|verifyUserDeniedForIncrementMultipleVersions
argument_list|(
name|user2
argument_list|,
name|TEST_ROW1
argument_list|,
name|TEST_Q2
argument_list|)
expr_stmt|;
name|verifyUserDeniedForIncrementMultipleVersions
argument_list|(
name|GROUP_USER
argument_list|,
name|TEST_ROW1
argument_list|,
name|TEST_Q2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUserDeniedForIncrementMultipleVersions
parameter_list|(
specifier|final
name|User
name|user
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|q1
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Increment
name|inc
init|=
operator|new
name|Increment
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|inc
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
literal|127
argument_list|)
expr_stmt|;
name|inc
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|q1
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|t
operator|.
name|increment
argument_list|(
name|inc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|" cannot do the increment."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{            }
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCellPermissionsForPutWithMultipleVersions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|TEST_ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|ZERO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|final
name|User
name|user1
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user1"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|User
name|user2
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user2"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permsU1andOwner
init|=
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|user1
operator|.
name|getShortName
argument_list|()
block|,
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permsU2andGUandOwner
init|=
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|user1
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|,
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|permsU2andGUandOwner
operator|.
name|put
argument_list|(
name|user2
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|permsU2andGUandOwner
operator|.
name|put
argument_list|(
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1andOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU2andGUandOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|127
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU2andGUandOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|127
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1andOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
comment|// new Put with TEST_Q1 column having TS=125. This covers old cell with TS 123 and user1 is
comment|// having RW permission. While TEST_Q2 is with latest TS and so it covers old cell with TS 127.
comment|// User1 is having RW permission on that too.
name|user1
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|125
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|user2
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|verifyUserDeniedForPutMultipleVersions
argument_list|(
name|user2
argument_list|,
name|TEST_ROW1
argument_list|,
name|TEST_Q1
argument_list|,
name|TEST_Q2
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|verifyUserDeniedForPutMultipleVersions
argument_list|(
name|GROUP_USER
argument_list|,
name|TEST_ROW1
argument_list|,
name|TEST_Q1
argument_list|,
name|TEST_Q2
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUserDeniedForPutMultipleVersions
parameter_list|(
specifier|final
name|User
name|user
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|q1
parameter_list|,
specifier|final
name|byte
index|[]
name|q2
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// column Q1 covers version at 123 fr which user2 do not have permission
name|p
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|q1
argument_list|,
literal|124
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|q2
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|" cannot do the put."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{            }
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCellPermissionsForCheckAndDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|TEST_ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|TEST_Q3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q3"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|ZERO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
decl_stmt|;
specifier|final
name|User
name|user1
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user1"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|User
name|user2
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user2"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|verifyAllowed
argument_list|(
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permsU1andOwner
init|=
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|user1
operator|.
name|getShortName
argument_list|()
block|,
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permsU1andU2andGUandOwner
init|=
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|user1
operator|.
name|getShortName
argument_list|()
block|,
name|user2
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|,
name|USER_OWNER
operator|.
name|getShortName
argument_list|()
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Permission
argument_list|>
name|permsU1_U2andGU
init|=
name|prepareCellPermissions
argument_list|(
operator|new
name|String
index|[]
block|{
name|user1
operator|.
name|getShortName
argument_list|()
block|,
name|user2
operator|.
name|getShortName
argument_list|()
block|,
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
block|}
argument_list|,
name|Action
operator|.
name|READ
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|120
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|120
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q3
argument_list|,
literal|120
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1andU2andGUandOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q3
argument_list|,
literal|123
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1andOwner
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|127
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|permsU1_U2andGU
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q2
argument_list|,
literal|127
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|user2
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|TEST_ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q3
argument_list|,
literal|127
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
name|p
operator|.
name|setACL
argument_list|(
name|AuthUtil
operator|.
name|toGroupEntry
argument_list|(
name|GROUP
argument_list|)
argument_list|,
operator|new
name|Permission
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|USER_OWNER
argument_list|)
expr_stmt|;
comment|// user1 should be allowed to do the checkAndDelete. user1 having read permission on the latest
comment|// version cell and write permission on all versions
name|user1
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|TEST_ROW1
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
literal|120
argument_list|)
expr_stmt|;
name|t
operator|.
name|checkAndDelete
argument_list|(
name|TEST_ROW1
argument_list|,
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|ZERO
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// user2 shouldn't be allowed to do the checkAndDelete. user2 having RW permission on the latest
comment|// version cell but not on cell version TS=123
name|verifyUserDeniedForCheckAndDelete
argument_list|(
name|user2
argument_list|,
name|TEST_ROW1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
comment|// GROUP_USER shouldn't be allowed to do the checkAndDelete. GROUP_USER having RW permission on
comment|// the latest
comment|// version cell but not on cell version TS=123
name|verifyUserDeniedForCheckAndDelete
argument_list|(
name|GROUP_USER
argument_list|,
name|TEST_ROW1
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
comment|// user2 should be allowed to do the checkAndDelete when delete tries to delete the old version
comment|// TS=120. user2 having R permission on the latest version(no W permission) cell
comment|// and W permission on cell version TS=120.
name|verifyUserAllowedforCheckAndDelete
argument_list|(
name|user2
argument_list|,
name|TEST_ROW1
argument_list|,
name|TEST_Q2
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
comment|// GROUP_USER should be allowed to do the checkAndDelete when delete tries to delete the old
comment|// version
comment|// TS=120. user2 having R permission on the latest version(no W permission) cell
comment|// and W permission on cell version TS=120.
name|verifyUserAllowedforCheckAndDelete
argument_list|(
name|GROUP_USER
argument_list|,
name|TEST_ROW1
argument_list|,
name|TEST_Q3
argument_list|,
name|ZERO
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUserAllowedforCheckAndDelete
parameter_list|(
specifier|final
name|User
name|user
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|q1
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|q1
argument_list|,
literal|120
argument_list|)
expr_stmt|;
name|t
operator|.
name|checkAndDelete
argument_list|(
name|row
argument_list|,
name|TEST_FAMILY1
argument_list|,
name|q1
argument_list|,
name|value
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyUserDeniedForCheckAndDelete
parameter_list|(
specifier|final
name|User
name|user
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|user
operator|.
name|runAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
init|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|)
expr_stmt|;
name|t
operator|.
name|checkAndDelete
argument_list|(
name|row
argument_list|,
name|TEST_FAMILY1
argument_list|,
name|TEST_Q1
argument_list|,
name|value
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|user
operator|.
name|getShortName
argument_list|()
operator|+
literal|" should not be allowed to do checkAndDelete"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{           }
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Clean the _acl_ table
try|try
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|ex
parameter_list|)
block|{
comment|// Test deleted the table, no problem
name|LOG
operator|.
name|info
argument_list|(
literal|"Test deleted table "
operator|+
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

