begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Test the admin operations for Balancer, Normalizer, CleanerChore, and CatalogJanitor.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncToolAdminApi
extends|extends
name|TestAsyncAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAsyncToolAdminApi
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBalancer
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|initialState
init|=
name|admin
operator|.
name|isBalancerEnabled
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Start the balancer, wait for it.
name|boolean
name|prevState
init|=
name|admin
operator|.
name|balancerSwitch
argument_list|(
operator|!
name|initialState
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// The previous state should be the original state we observed
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be opposite of the original
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|admin
operator|.
name|isBalancerEnabled
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset it back to what it was
name|prevState
operator|=
name|admin
operator|.
name|balancerSwitch
argument_list|(
name|initialState
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// The previous state should be the opposite of the initial state
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be the original state again
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|admin
operator|.
name|isBalancerEnabled
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNormalizer
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|initialState
init|=
name|admin
operator|.
name|isNormalizerEnabled
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// flip state
name|boolean
name|prevState
init|=
name|admin
operator|.
name|normalizerSwitch
argument_list|(
operator|!
name|initialState
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// The previous state should be the original state we observed
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be opposite of the original
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|admin
operator|.
name|isNormalizerEnabled
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset it back to what it was
name|prevState
operator|=
name|admin
operator|.
name|normalizerSwitch
argument_list|(
name|initialState
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// The previous state should be the opposite of the initial state
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be the original state again
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|admin
operator|.
name|isNormalizerEnabled
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanerChore
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|initialState
init|=
name|admin
operator|.
name|isCleanerChoreEnabled
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// flip state
name|boolean
name|prevState
init|=
name|admin
operator|.
name|cleanerChoreSwitch
argument_list|(
operator|!
name|initialState
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// The previous state should be the original state we observed
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be opposite of the original
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|admin
operator|.
name|isCleanerChoreEnabled
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset it back to what it was
name|prevState
operator|=
name|admin
operator|.
name|cleanerChoreSwitch
argument_list|(
name|initialState
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// The previous state should be the opposite of the initial state
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be the original state again
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|admin
operator|.
name|isCleanerChoreEnabled
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCatalogJanitor
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|initialState
init|=
name|admin
operator|.
name|isCatalogJanitorEnabled
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// flip state
name|boolean
name|prevState
init|=
name|admin
operator|.
name|catalogJanitorSwitch
argument_list|(
operator|!
name|initialState
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// The previous state should be the original state we observed
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be opposite of the original
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|admin
operator|.
name|isCatalogJanitorEnabled
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset it back to what it was
name|prevState
operator|=
name|admin
operator|.
name|catalogJanitorSwitch
argument_list|(
name|initialState
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// The previous state should be the opposite of the initial state
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be the original state again
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|admin
operator|.
name|isCatalogJanitorEnabled
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

