begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|handler
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTableDeleteFamilyHandler
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLENAME
init|=
literal|"column_family_handlers"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf3"
argument_list|)
block|}
decl_stmt|;
comment|/**    * Start up a mini cluster and put a small table of empty regions into it.    *     * @throws Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Create a table of three families. This will assign a region.
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TABLENAME
argument_list|)
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLENAME
argument_list|)
decl_stmt|;
comment|// Create multiple regions in all the three column families
name|TEST_UTIL
operator|.
name|createMultiRegions
argument_list|(
name|t
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Load the table with data for all families
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|FAMILIES
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TEST_UTIL
operator|.
name|ensureSomeRegionServersAvailable
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteColumnFamilyWithMultipleRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|beforehtd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// 1 - Check if table exists in descriptor
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableAvailable
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 - Check if all three families exist in descriptor
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|beforehtd
operator|.
name|getColumnFamilies
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|HColumnDescriptor
index|[]
name|families
init|=
name|beforehtd
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|families
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|families
index|[
name|i
index|]
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"cf"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// 3 - Check if table exists in FS
name|Path
name|tableDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|TABLENAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|tableDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4 - Check if all the 3 column families exist in FS
name|FileStatus
index|[]
name|fileStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableDir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fileStatus
index|[
name|i
index|]
operator|.
name|isDir
argument_list|()
operator|==
literal|true
condition|)
block|{
name|FileStatus
index|[]
name|cf
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|fileStatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|k
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cf
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|cf
index|[
name|j
index|]
operator|.
name|isDir
argument_list|()
operator|==
literal|true
operator|&&
name|cf
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
operator|==
literal|false
condition|)
block|{
name|assertTrue
argument_list|(
name|cf
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"cf"
operator|+
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|k
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// TEST - Disable and delete the column family
name|admin
operator|.
name|disableTable
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteColumn
argument_list|(
name|TABLENAME
argument_list|,
literal|"cf2"
argument_list|)
expr_stmt|;
comment|// 5 - Check if only 2 column families exist in the descriptor
name|HTableDescriptor
name|afterhtd
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|afterhtd
operator|.
name|getColumnFamilies
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|HColumnDescriptor
index|[]
name|newFamilies
init|=
name|afterhtd
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|newFamilies
index|[
literal|0
index|]
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"cf1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|newFamilies
index|[
literal|1
index|]
operator|.
name|getNameAsString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"cf3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// 6 - Check if the second column family is gone from the FS
name|fileStatus
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tableDir
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileStatus
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fileStatus
index|[
name|i
index|]
operator|.
name|isDir
argument_list|()
operator|==
literal|true
condition|)
block|{
name|FileStatus
index|[]
name|cf
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|fileStatus
index|[
name|i
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cf
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|cf
index|[
name|j
index|]
operator|.
name|isDir
argument_list|()
operator|==
literal|true
condition|)
block|{
name|assertFalse
argument_list|(
name|cf
index|[
name|j
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"cf2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
specifier|public
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
name|cu
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ResourceCheckerJUnitRule
argument_list|()
decl_stmt|;
block|}
end_class

end_unit

