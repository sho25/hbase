begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|reset
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CallRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|DelegatingRpcScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|PriorityFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RSRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|SimpleRpcSchedulerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Test {@link org.apache.hadoop.hbase.MetaTableAccessor}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|TestMetaTableAccessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMetaTableAccessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|connection
decl_stmt|;
specifier|private
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Tests to 4 retries every 5 seconds. Make it try every 1 second so more
comment|// responsive.  1 second is default as is ten retries.
name|c
operator|.
name|setLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * Does {@link MetaTableAccessor#getRegion(Connection, byte[])} and a write    * against hbase:meta while its hosted server is restarted to prove our retrying    * works.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testRetrying
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|int
name|regionCount
init|=
operator|-
literal|1
decl_stmt|;
try|try
init|(
name|RegionLocator
name|r
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|regionCount
operator|=
name|r
operator|.
name|getStartKeys
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
comment|// Test it works getting a region from just made user table.
specifier|final
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|testGettingTableRegions
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|,
name|regionCount
argument_list|)
decl_stmt|;
name|MetaTask
name|reader
init|=
operator|new
name|MetaTask
argument_list|(
name|connection
argument_list|,
literal|"reader"
argument_list|)
block|{
annotation|@
name|Override
name|void
name|metaTask
parameter_list|()
throws|throws
name|Throwable
block|{
name|testGetRegion
argument_list|(
name|connection
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Read "
operator|+
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|MetaTask
name|writer
init|=
operator|new
name|MetaTask
argument_list|(
name|connection
argument_list|,
literal|"writer"
argument_list|)
block|{
annotation|@
name|Override
name|void
name|metaTask
parameter_list|()
throws|throws
name|Throwable
block|{
name|MetaTableAccessor
operator|.
name|addRegionToMeta
argument_list|(
name|connection
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Wrote "
operator|+
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|reader
operator|.
name|start
argument_list|()
expr_stmt|;
name|writer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// We're gonna check how it takes. If it takes too long, we will consider
comment|//  it as a fail. We can't put that in the @Test tag as we want to close
comment|//  the threads nicely
specifier|final
name|long
name|timeOut
init|=
literal|180000
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
comment|// Make sure reader and writer are working.
name|assertTrue
argument_list|(
name|reader
operator|.
name|isProgressing
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|writer
operator|.
name|isProgressing
argument_list|()
argument_list|)
expr_stmt|;
comment|// Kill server hosting meta -- twice  . See if our reader/writer ride over the
comment|// meta moves.  They'll need to retry.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Restart="
operator|+
name|i
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|ensureSomeRegionServersAvailable
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
do|do
block|{
name|index
operator|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getServerWithMeta
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|index
operator|==
operator|-
literal|1
operator|&&
name|startTime
operator|+
name|timeOut
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
do|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|abortRegionServer
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|waitOnRegionServer
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"reader: "
operator|+
name|reader
operator|.
name|toString
argument_list|()
argument_list|,
name|reader
operator|.
name|isProgressing
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"writer: "
operator|+
name|writer
operator|.
name|toString
argument_list|()
argument_list|,
name|writer
operator|.
name|isProgressing
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|reader
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
name|writer
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
name|reader
operator|.
name|join
argument_list|()
expr_stmt|;
name|writer
operator|.
name|join
argument_list|()
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|long
name|exeTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Timeout: test took "
operator|+
name|exeTime
operator|/
literal|1000
operator|+
literal|" sec"
argument_list|,
name|exeTime
operator|<
name|timeOut
argument_list|)
expr_stmt|;
block|}
comment|/**    * Thread that runs a MetaTableAccessor task until asked stop.    */
specifier|abstract
specifier|static
class|class
name|MetaTask
extends|extends
name|Thread
block|{
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
specifier|final
name|Connection
name|connection
decl_stmt|;
name|MetaTask
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|connection
operator|=
name|connection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
operator|!
name|this
operator|.
name|stop
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Before "
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|", count="
operator|+
name|this
operator|.
name|count
argument_list|)
expr_stmt|;
name|metaTask
argument_list|()
expr_stmt|;
name|this
operator|.
name|count
operator|+=
literal|1
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After "
operator|+
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|", count="
operator|+
name|this
operator|.
name|count
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|this
operator|.
name|getName
argument_list|()
operator|+
literal|" failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
block|}
block|}
name|boolean
name|isProgressing
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|int
name|currentCount
init|=
name|this
operator|.
name|count
decl_stmt|;
while|while
condition|(
name|currentCount
operator|==
name|this
operator|.
name|count
condition|)
block|{
if|if
condition|(
operator|!
name|isAlive
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|t
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"count="
operator|+
name|this
operator|.
name|count
operator|+
literal|", t="
operator|+
operator|(
name|this
operator|.
name|t
operator|==
literal|null
condition|?
literal|"null"
else|:
name|this
operator|.
name|t
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|abstract
name|void
name|metaTask
parameter_list|()
throws|throws
name|Throwable
function_decl|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRegionsFromMetaTable
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
operator|new
name|MetaTableLocator
argument_list|()
operator|.
name|getMetaRegions
argument_list|(
name|UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regions
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|MetaTableLocator
argument_list|()
operator|.
name|getMetaRegionsAndLocations
argument_list|(
name|UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableExists
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|connection
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|MetaTableAccessor
operator|.
name|tableExists
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRegion
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|name
init|=
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started "
operator|+
name|name
argument_list|)
expr_stmt|;
comment|// Test get on non-existent region.
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaTableAccessor
operator|.
name|getRegion
argument_list|(
name|connection
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nonexistent-region"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|pair
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
comment|// Test for the optimization made in HBASE-3650
annotation|@
name|Test
specifier|public
name|void
name|testScanMetaForTable
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started "
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|/** Create 2 tables      - testScanMetaForTable      - testScanMetaForTablf     **/
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// name that is +1 greater than the first one (e+1=f)
name|TableName
name|greaterName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testScanMetaForTablf"
argument_list|)
decl_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|greaterName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
comment|// Now make sure we only get the regions from 1 of the tables at a time
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|connection
argument_list|,
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|connection
argument_list|,
name|greaterName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|testGettingTableRegions
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|TableName
name|name
parameter_list|,
specifier|final
name|int
name|regionCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|connection
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|regionCount
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaTableAccessor
operator|.
name|getRegion
argument_list|(
name|connection
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|regions
return|;
block|}
specifier|private
specifier|static
name|void
name|testGetRegion
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|RegionInfo
name|region
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|MetaTableAccessor
operator|.
name|getRegion
argument_list|(
name|connection
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParseReplicaIdFromServerColumn
parameter_list|()
block|{
name|String
name|column1
init|=
name|HConstants
operator|.
name|SERVER_QUALIFIER_STR
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|MetaTableAccessor
operator|.
name|parseReplicaIdFromServerColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|column2
init|=
name|column1
operator|+
name|MetaTableAccessor
operator|.
name|META_REPLICA_ID_DELIMITER
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|MetaTableAccessor
operator|.
name|parseReplicaIdFromServerColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|column3
init|=
name|column2
operator|+
literal|"00"
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|MetaTableAccessor
operator|.
name|parseReplicaIdFromServerColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|column4
init|=
name|column3
operator|+
literal|"2A"
decl_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|MetaTableAccessor
operator|.
name|parseReplicaIdFromServerColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|column5
init|=
name|column4
operator|+
literal|"2A"
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|MetaTableAccessor
operator|.
name|parseReplicaIdFromServerColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|column6
init|=
name|HConstants
operator|.
name|STARTCODE_QUALIFIER_STR
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|MetaTableAccessor
operator|.
name|parseReplicaIdFromServerColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|column6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaReaderGetColumnMethods
parameter_list|()
block|{
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|,
name|MetaTableAccessor
operator|.
name|getServerColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|SERVER_QUALIFIER_STR
operator|+
name|MetaTableAccessor
operator|.
name|META_REPLICA_ID_DELIMITER
operator|+
literal|"002A"
argument_list|)
argument_list|,
name|MetaTableAccessor
operator|.
name|getServerColumn
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|HConstants
operator|.
name|STARTCODE_QUALIFIER
argument_list|,
name|MetaTableAccessor
operator|.
name|getStartCodeColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|STARTCODE_QUALIFIER_STR
operator|+
name|MetaTableAccessor
operator|.
name|META_REPLICA_ID_DELIMITER
operator|+
literal|"002A"
argument_list|)
argument_list|,
name|MetaTableAccessor
operator|.
name|getStartCodeColumn
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|,
name|MetaTableAccessor
operator|.
name|getSeqNumColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|SEQNUM_QUALIFIER_STR
operator|+
name|MetaTableAccessor
operator|.
name|META_REPLICA_ID_DELIMITER
operator|+
literal|"002A"
argument_list|)
argument_list|,
name|MetaTableAccessor
operator|.
name|getSeqNumColumn
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaLocationsForRegionReplicas
parameter_list|()
throws|throws
name|IOException
block|{
name|ServerName
name|serverName0
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|,
literal|60010
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|serverName1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"bar"
argument_list|,
literal|60010
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|serverName100
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"baz"
argument_list|,
literal|60010
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|regionId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RegionInfo
name|primary
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|replica1
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|replica100
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|seqNum0
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|long
name|seqNum1
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|long
name|seqNum100
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|Table
name|meta
init|=
name|MetaTableAccessor
operator|.
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|MetaTableAccessor
operator|.
name|updateRegionLocation
argument_list|(
name|connection
argument_list|,
name|primary
argument_list|,
name|serverName0
argument_list|,
name|seqNum0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// assert that the server, startcode and seqNum columns are there for the primary region
name|assertMetaLocation
argument_list|(
name|meta
argument_list|,
name|primary
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName0
argument_list|,
name|seqNum0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// add replica = 1
name|MetaTableAccessor
operator|.
name|updateRegionLocation
argument_list|(
name|connection
argument_list|,
name|replica1
argument_list|,
name|serverName1
argument_list|,
name|seqNum1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// check whether the primary is still there
name|assertMetaLocation
argument_list|(
name|meta
argument_list|,
name|primary
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName0
argument_list|,
name|seqNum0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// now check for replica 1
name|assertMetaLocation
argument_list|(
name|meta
argument_list|,
name|primary
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName1
argument_list|,
name|seqNum1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// add replica = 1
name|MetaTableAccessor
operator|.
name|updateRegionLocation
argument_list|(
name|connection
argument_list|,
name|replica100
argument_list|,
name|serverName100
argument_list|,
name|seqNum100
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// check whether the primary is still there
name|assertMetaLocation
argument_list|(
name|meta
argument_list|,
name|primary
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName0
argument_list|,
name|seqNum0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// check whether the replica 1 is still there
name|assertMetaLocation
argument_list|(
name|meta
argument_list|,
name|primary
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName1
argument_list|,
name|seqNum1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// now check for replica 1
name|assertMetaLocation
argument_list|(
name|meta
argument_list|,
name|primary
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|serverName100
argument_list|,
name|seqNum100
argument_list|,
literal|100
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|assertMetaLocation
parameter_list|(
name|Table
name|meta
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|ServerName
name|serverName
parameter_list|,
name|long
name|seqNum
parameter_list|,
name|int
name|replicaId
parameter_list|,
name|boolean
name|checkSeqNum
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|meta
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getServerColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|serverName
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getStartCodeColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|serverName
operator|.
name|getStartcode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|checkSeqNum
condition|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getSeqNumColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|seqNum
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|assertEmptyMetaLocation
parameter_list|(
name|Table
name|meta
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|int
name|replicaId
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|meta
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
name|serverCell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getServerColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|startCodeCell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getStartCodeColumn
argument_list|(
name|replicaId
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|serverCell
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|startCodeCell
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|serverCell
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|startCodeCell
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaLocationForRegionReplicasIsAddedAtTableCreation
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|regionId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RegionInfo
name|primary
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Table
name|meta
init|=
name|MetaTableAccessor
operator|.
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|primary
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|addRegionsToMeta
argument_list|(
name|connection
argument_list|,
name|regionInfos
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEmptyMetaLocation
argument_list|(
name|meta
argument_list|,
name|primary
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEmptyMetaLocation
argument_list|(
name|meta
argument_list|,
name|primary
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaLocationForRegionReplicasIsAddedAtRegionSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|regionId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ServerName
name|serverName0
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|,
literal|60010
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|RegionInfo
name|parent
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|splitA
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
operator|+
literal|1
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|splitB
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
operator|+
literal|1
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Table
name|meta
init|=
name|MetaTableAccessor
operator|.
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|addRegionsToMeta
argument_list|(
name|connection
argument_list|,
name|regionInfos
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|splitRegion
argument_list|(
name|connection
argument_list|,
name|parent
argument_list|,
name|splitA
argument_list|,
name|splitB
argument_list|,
name|serverName0
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEmptyMetaLocation
argument_list|(
name|meta
argument_list|,
name|splitA
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEmptyMetaLocation
argument_list|(
name|meta
argument_list|,
name|splitA
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEmptyMetaLocation
argument_list|(
name|meta
argument_list|,
name|splitB
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEmptyMetaLocation
argument_list|(
name|meta
argument_list|,
name|splitB
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaLocationForRegionReplicasIsAddedAtRegionMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|regionId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ServerName
name|serverName0
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|,
literal|60010
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|RegionInfo
name|parentA
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|parentB
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|merged
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
operator|+
literal|1
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Table
name|meta
init|=
name|MetaTableAccessor
operator|.
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|parentA
argument_list|,
name|parentB
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|addRegionsToMeta
argument_list|(
name|connection
argument_list|,
name|regionInfos
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|mergeRegions
argument_list|(
name|connection
argument_list|,
name|merged
argument_list|,
name|parentA
argument_list|,
name|parentB
argument_list|,
name|serverName0
argument_list|,
literal|3
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEmptyMetaLocation
argument_list|(
name|meta
argument_list|,
name|merged
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEmptyMetaLocation
argument_list|(
name|meta
argument_list|,
name|merged
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaScanner
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting "
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|SPLIT_KEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_b"
argument_list|)
block|}
decl_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
name|SPLIT_KEYS
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Make sure all the regions are deployed
name|UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|Visitor
name|visitor
init|=
name|mock
argument_list|(
name|MetaTableAccessor
operator|.
name|Visitor
operator|.
name|class
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|visitor
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Scanning the entire table should give us three rows
name|MetaTableAccessor
operator|.
name|scanMetaForTableRegions
argument_list|(
name|connection
argument_list|,
name|visitor
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Scanning the table with a specified empty start row should also
comment|// give us three hbase:meta rows
name|reset
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|visitor
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|scanMeta
argument_list|(
name|connection
argument_list|,
name|visitor
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Scanning the table starting in the middle should give us two rows:
comment|// region_a and region_b
name|reset
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|visitor
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|scanMeta
argument_list|(
name|connection
argument_list|,
name|visitor
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_ac"
argument_list|)
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
comment|// Scanning with a limit of 1 should only give us one row
name|reset
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|doReturn
argument_list|(
literal|true
argument_list|)
operator|.
name|when
argument_list|(
name|visitor
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|scanMeta
argument_list|(
name|connection
argument_list|,
name|visitor
argument_list|,
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_ac"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|visitor
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|visit
argument_list|(
operator|(
name|Result
operator|)
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests whether maximum of masters system time versus RSs local system time is used    */
annotation|@
name|Test
specifier|public
name|void
name|testMastersSystemTimeIsUsedInUpdateLocations
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|regionId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RegionInfo
name|regionInfo
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"bar"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Table
name|meta
init|=
name|MetaTableAccessor
operator|.
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|addRegionsToMeta
argument_list|(
name|connection
argument_list|,
name|regionInfos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|long
name|masterSystemTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
literal|123456789
decl_stmt|;
name|MetaTableAccessor
operator|.
name|updateRegionLocation
argument_list|(
name|connection
argument_list|,
name|regionInfo
argument_list|,
name|sn
argument_list|,
literal|1
argument_list|,
name|masterSystemTime
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|meta
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
name|serverCell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getServerColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|startCodeCell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getStartCodeColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|seqNumCell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getSeqNumColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|serverCell
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|startCodeCell
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|seqNumCell
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|serverCell
operator|.
name|getValueLength
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|startCodeCell
operator|.
name|getValueLength
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seqNumCell
operator|.
name|getValueLength
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|masterSystemTime
argument_list|,
name|serverCell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|masterSystemTime
argument_list|,
name|startCodeCell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|masterSystemTime
argument_list|,
name|seqNumCell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMastersSystemTimeIsUsedInMergeRegions
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|regionId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|RegionInfo
name|regionInfoA
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'a'
block|}
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|regionInfoB
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'a'
block|}
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|mergedRegionInfo
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"bar"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Table
name|meta
init|=
name|MetaTableAccessor
operator|.
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|regionInfoA
argument_list|,
name|regionInfoB
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|addRegionsToMeta
argument_list|(
name|connection
argument_list|,
name|regionInfos
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// write the serverName column with a big current time, but set the masters time as even
comment|// bigger. When region merge deletes the rows for regionA and regionB, the serverName columns
comment|// should not be seen by the following get
name|long
name|serverNameTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
literal|100000000
decl_stmt|;
name|long
name|masterSystemTime
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
literal|123456789
decl_stmt|;
comment|// write the serverName columns
name|MetaTableAccessor
operator|.
name|updateRegionLocation
argument_list|(
name|connection
argument_list|,
name|regionInfoA
argument_list|,
name|sn
argument_list|,
literal|1
argument_list|,
name|serverNameTime
argument_list|)
expr_stmt|;
comment|// assert that we have the serverName column with expected ts
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|mergedRegionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|meta
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|Cell
name|serverCell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getServerColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|serverCell
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|serverNameTime
argument_list|,
name|serverCell
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
comment|// now merge the regions, effectively deleting the rows for region a and b.
name|MetaTableAccessor
operator|.
name|mergeRegions
argument_list|(
name|connection
argument_list|,
name|mergedRegionInfo
argument_list|,
name|regionInfoA
argument_list|,
name|regionInfoB
argument_list|,
name|sn
argument_list|,
literal|1
argument_list|,
name|masterSystemTime
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|meta
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|serverCell
operator|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getServerColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
name|startCodeCell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getStartCodeColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|seqNumCell
init|=
name|result
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getSeqNumColumn
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|serverCell
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|startCodeCell
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|seqNumCell
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SpyingRpcSchedulerFactory
extends|extends
name|SimpleRpcSchedulerFactory
block|{
annotation|@
name|Override
specifier|public
name|RpcScheduler
name|create
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|PriorityFunction
name|priority
parameter_list|,
name|Abortable
name|server
parameter_list|)
block|{
specifier|final
name|RpcScheduler
name|delegate
init|=
name|super
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|priority
argument_list|,
name|server
argument_list|)
decl_stmt|;
return|return
operator|new
name|SpyingRpcScheduler
argument_list|(
name|delegate
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SpyingRpcScheduler
extends|extends
name|DelegatingRpcScheduler
block|{
name|long
name|numPriorityCalls
init|=
literal|0
decl_stmt|;
specifier|public
name|SpyingRpcScheduler
parameter_list|(
name|RpcScheduler
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dispatch
parameter_list|(
name|CallRunner
name|task
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|priority
init|=
name|task
operator|.
name|getRpcCall
argument_list|()
operator|.
name|getPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|priority
operator|>
name|HConstants
operator|.
name|QOS_THRESHOLD
condition|)
block|{
name|numPriorityCalls
operator|++
expr_stmt|;
block|}
return|return
name|super
operator|.
name|dispatch
argument_list|(
name|task
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaUpdatesGoToPriorityQueue
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test has to be end-to-end, and do the verification from the server side
name|Configuration
name|c
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|RSRpcServices
operator|.
name|REGION_SERVER_RPC_SCHEDULER_FACTORY_CLASS
argument_list|,
name|SpyingRpcSchedulerFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// restart so that new config takes place
name|afterClass
argument_list|()
expr_stmt|;
name|beforeClass
argument_list|()
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|;
name|RegionLocator
name|rl
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
comment|// create a table and prepare for a manual split
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
literal|"cf1"
argument_list|)
expr_stmt|;
name|HRegionLocation
name|loc
init|=
name|rl
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RegionInfo
name|parent
init|=
name|loc
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|long
name|rid
init|=
literal|1000
decl_stmt|;
name|byte
index|[]
name|splitKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|RegionInfo
name|splitA
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|parent
operator|.
name|getTable
argument_list|()
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|parent
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|splitKey
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|rid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|splitB
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|parent
operator|.
name|getTable
argument_list|()
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|splitKey
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|parent
operator|.
name|getEndKey
argument_list|()
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|rid
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// find the meta server
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
decl_stmt|;
name|int
name|rsIndex
init|=
name|cluster
operator|.
name|getServerWithMeta
argument_list|()
decl_stmt|;
name|HRegionServer
name|rs
decl_stmt|;
if|if
condition|(
name|rsIndex
operator|>=
literal|0
condition|)
block|{
name|rs
operator|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|rsIndex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// it is in master
name|rs
operator|=
name|cluster
operator|.
name|getMaster
argument_list|()
expr_stmt|;
block|}
name|SpyingRpcScheduler
name|scheduler
init|=
operator|(
name|SpyingRpcScheduler
operator|)
name|rs
operator|.
name|getRpcServer
argument_list|()
operator|.
name|getScheduler
argument_list|()
decl_stmt|;
name|long
name|prevCalls
init|=
name|scheduler
operator|.
name|numPriorityCalls
decl_stmt|;
name|MetaTableAccessor
operator|.
name|splitRegion
argument_list|(
name|connection
argument_list|,
name|parent
argument_list|,
name|splitA
argument_list|,
name|splitB
argument_list|,
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|prevCalls
operator|<
name|scheduler
operator|.
name|numPriorityCalls
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyMetaDaughterLocationDuringSplit
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|regionId
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ServerName
name|serverName0
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|,
literal|60010
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|RegionInfo
name|parent
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table_foo"
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|splitA
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table_foo"
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
operator|+
literal|1
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|splitB
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table_foo"
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
name|regionId
operator|+
literal|1
argument_list|)
operator|.
name|setReplicaId
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Table
name|meta
init|=
name|MetaTableAccessor
operator|.
name|getMetaHTable
argument_list|(
name|connection
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|MetaTableAccessor
operator|.
name|addRegionsToMeta
argument_list|(
name|connection
argument_list|,
name|regionInfos
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|MetaTableAccessor
operator|.
name|splitRegion
argument_list|(
name|connection
argument_list|,
name|parent
argument_list|,
name|splitA
argument_list|,
name|splitB
argument_list|,
name|serverName0
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Get
name|get1
init|=
operator|new
name|Get
argument_list|(
name|splitA
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|resultA
init|=
name|meta
operator|.
name|get
argument_list|(
name|get1
argument_list|)
decl_stmt|;
name|Cell
name|serverCellA
init|=
name|resultA
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getServerColumn
argument_list|(
name|splitA
operator|.
name|getReplicaId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|startCodeCellA
init|=
name|resultA
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getStartCodeColumn
argument_list|(
name|splitA
operator|.
name|getReplicaId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|serverCellA
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|startCodeCellA
argument_list|)
expr_stmt|;
name|Get
name|get2
init|=
operator|new
name|Get
argument_list|(
name|splitA
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|resultB
init|=
name|meta
operator|.
name|get
argument_list|(
name|get2
argument_list|)
decl_stmt|;
name|Cell
name|serverCellB
init|=
name|resultB
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getServerColumn
argument_list|(
name|splitB
operator|.
name|getReplicaId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Cell
name|startCodeCellB
init|=
name|resultB
operator|.
name|getColumnLatestCell
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|MetaTableAccessor
operator|.
name|getStartCodeColumn
argument_list|(
name|splitB
operator|.
name|getReplicaId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|serverCellB
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|startCodeCellB
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

