begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|FaultInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_comment
comment|/**  * Fault injector that can take a policy for when to inject a fault  * @param<E> type of exception that should be returned  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PoliciedFaultInjector
parameter_list|<
name|E
extends|extends
name|Exception
parameter_list|>
implements|implements
name|FaultInjector
argument_list|<
name|E
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PoliciedFaultInjector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FaultInjectionPolicy
name|policy
decl_stmt|;
specifier|public
name|PoliciedFaultInjector
parameter_list|(
name|FaultInjectionPolicy
name|policy
parameter_list|)
block|{
name|this
operator|.
name|policy
operator|=
name|policy
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Pair
argument_list|<
name|E
argument_list|,
name|Object
index|[]
argument_list|>
name|injectFault
parameter_list|(
name|StackTraceElement
index|[]
name|trace
parameter_list|)
block|{
if|if
condition|(
name|policy
operator|.
name|shouldFault
argument_list|(
name|trace
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|getInjectedError
argument_list|(
name|trace
argument_list|)
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"NOT injecting fault, stack:"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|trace
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**    * Get the error that should be returned to the caller when the {@link FaultInjectionPolicy}    * determines we need to inject a fault    * @param trace trace for which the {@link FaultInjectionPolicy} specified we should have an error    * @return the information about the fault that should be returned if there was a fault, null    *         otherwise    */
specifier|protected
specifier|abstract
name|Pair
argument_list|<
name|E
argument_list|,
name|Object
index|[]
argument_list|>
name|getInjectedError
parameter_list|(
name|StackTraceElement
index|[]
name|trace
parameter_list|)
function_decl|;
block|}
end_class

end_unit

