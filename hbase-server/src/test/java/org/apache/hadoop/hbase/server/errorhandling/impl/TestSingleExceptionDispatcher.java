begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|impl
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|ExceptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|OperationAttemptTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|server
operator|.
name|errorhandling
operator|.
name|exception
operator|.
name|OperationAttemptTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * Test using the single error dispatcher  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSingleExceptionDispatcher
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSingleExceptionDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testErrorPropagation
parameter_list|()
block|{
name|ExceptionListener
argument_list|<
name|Exception
argument_list|>
name|listener1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExceptionListener
argument_list|<
name|Exception
argument_list|>
name|listener2
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExceptionDispatcher
argument_list|<
name|?
extends|extends
name|ExceptionListener
argument_list|<
name|Exception
argument_list|>
argument_list|,
name|Exception
argument_list|>
name|monitor
init|=
operator|new
name|ExceptionDispatcher
argument_list|<
name|ExceptionListener
argument_list|<
name|Exception
argument_list|>
argument_list|,
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
comment|// add the listeners
name|monitor
operator|.
name|addErrorListener
argument_list|(
name|monitor
operator|.
name|genericVisitor
argument_list|,
name|listener1
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|addErrorListener
argument_list|(
name|monitor
operator|.
name|genericVisitor
argument_list|,
name|listener2
argument_list|)
expr_stmt|;
comment|// create an artificial error
name|String
name|message
init|=
literal|"Some error"
decl_stmt|;
name|Exception
name|expected
init|=
operator|new
name|ExceptionForTesting
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
name|Object
name|info
init|=
literal|"info1"
decl_stmt|;
name|monitor
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|// make sure the listeners got the error
name|Mockito
operator|.
name|verify
argument_list|(
name|listener1
argument_list|)
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|listener2
argument_list|)
operator|.
name|receiveError
argument_list|(
name|message
argument_list|,
name|expected
argument_list|,
name|info
argument_list|)
expr_stmt|;
comment|// make sure that we get an exception
try|try
block|{
name|monitor
operator|.
name|failOnError
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Monitor should have thrown an exception after getting error."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Got an unexpected exception:"
operator|+
name|e
argument_list|,
name|e
operator|instanceof
name|ExceptionForTesting
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got the testing exception!"
argument_list|)
expr_stmt|;
block|}
comment|// push another error, but this shouldn't be passed to the listeners
name|monitor
operator|.
name|receiveError
argument_list|(
literal|"another error"
argument_list|,
operator|new
name|ExceptionForTesting
argument_list|(
literal|"hello"
argument_list|)
argument_list|,
literal|"shouldn't be found"
argument_list|)
expr_stmt|;
comment|// make sure we don't re-propagate the error
name|Mockito
operator|.
name|verifyNoMoreInteractions
argument_list|(
name|listener1
argument_list|,
name|listener2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleDispatcherWithTimer
parameter_list|()
block|{
name|ExceptionListener
argument_list|<
name|Exception
argument_list|>
name|listener1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExceptionListener
argument_list|<
name|Exception
argument_list|>
name|listener2
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|ExceptionDispatcher
argument_list|<
name|?
extends|extends
name|ExceptionListener
argument_list|<
name|Exception
argument_list|>
argument_list|,
name|Exception
argument_list|>
name|monitor
init|=
operator|new
name|ExceptionDispatcher
argument_list|<
name|ExceptionListener
argument_list|<
name|Exception
argument_list|>
argument_list|,
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
comment|// add the listeners
name|monitor
operator|.
name|addErrorListener
argument_list|(
name|monitor
operator|.
name|genericVisitor
argument_list|,
name|listener1
argument_list|)
expr_stmt|;
name|monitor
operator|.
name|addErrorListener
argument_list|(
name|monitor
operator|.
name|genericVisitor
argument_list|,
name|listener2
argument_list|)
expr_stmt|;
name|Object
name|info
init|=
literal|"message"
decl_stmt|;
name|OperationAttemptTimer
name|timer
init|=
operator|new
name|OperationAttemptTimer
argument_list|(
name|monitor
argument_list|,
literal|1000
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|timer
operator|.
name|trigger
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Monitor didn't get timeout"
argument_list|,
name|monitor
operator|.
name|checkForError
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that that we propagated the error
name|Mockito
operator|.
name|verify
argument_list|(
name|listener1
argument_list|)
operator|.
name|receiveError
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|OperationAttemptTimeoutException
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|listener2
argument_list|)
operator|.
name|receiveError
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|,
name|Mockito
operator|.
name|any
argument_list|(
name|OperationAttemptTimeoutException
operator|.
name|class
argument_list|)
argument_list|,
name|Mockito
operator|.
name|eq
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddListenerWithoutVisitor
parameter_list|()
block|{
name|SimpleErrorListener
argument_list|<
name|Exception
argument_list|>
name|listener
init|=
operator|new
name|SimpleErrorListener
argument_list|<
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
name|ExceptionDispatcher
argument_list|<
name|SimpleErrorListener
argument_list|<
name|Exception
argument_list|>
argument_list|,
name|Exception
argument_list|>
name|monitor
init|=
operator|new
name|ExceptionDispatcher
argument_list|<
name|SimpleErrorListener
argument_list|<
name|Exception
argument_list|>
argument_list|,
name|Exception
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|monitor
operator|.
name|addErrorListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Monitor needs t have a visitor for adding generically typed listeners"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Correctly failed to add listener without visitor: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

