begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|START_KEY_BYTES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam2
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
operator|.
name|HRegionIncommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Test minor compactions  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMinorCompaction
block|{
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMinorCompaction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
name|HBaseTestingUtility
operator|.
name|createLocalHTU
argument_list|()
decl_stmt|;
specifier|protected
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
name|HRegion
name|r
init|=
literal|null
decl_stmt|;
specifier|private
name|HTableDescriptor
name|htd
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|compactionThreshold
decl_stmt|;
specifier|private
name|byte
index|[]
name|firstRowBytes
decl_stmt|,
name|secondRowBytes
decl_stmt|,
name|thirdRowBytes
decl_stmt|;
specifier|final
specifier|private
name|byte
index|[]
name|col1
decl_stmt|,
name|col2
decl_stmt|;
comment|/** constructor */
specifier|public
name|TestMinorCompaction
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
comment|// Set cache flush size to 1MB
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.memstore.block.multiplier"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|compactionThreshold
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|firstRowBytes
operator|=
name|START_KEY_BYTES
expr_stmt|;
name|secondRowBytes
operator|=
name|START_KEY_BYTES
operator|.
name|clone
argument_list|()
expr_stmt|;
comment|// Increment the least significant character so we get to next row.
name|secondRowBytes
index|[
name|START_KEY_BYTES
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
name|thirdRowBytes
operator|=
name|START_KEY_BYTES
operator|.
name|clone
argument_list|()
expr_stmt|;
name|thirdRowBytes
index|[
name|START_KEY_BYTES
operator|.
name|length
operator|-
literal|1
index|]
operator|+=
literal|2
expr_stmt|;
name|col1
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column1"
argument_list|)
expr_stmt|;
name|col2
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|htd
operator|=
name|UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|r
operator|=
name|UTIL
operator|.
name|createLocalHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|WAL
name|wal
init|=
name|r
operator|.
name|getWAL
argument_list|()
decl_stmt|;
name|this
operator|.
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionWithDeleteRow
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|deleteRow
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
name|testMinorCompactionWithDelete
argument_list|(
name|deleteRow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionWithDeleteColumn1
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|dc
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
comment|/* delete all timestamps in the column */
name|dc
operator|.
name|deleteColumns
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
expr_stmt|;
name|testMinorCompactionWithDelete
argument_list|(
name|dc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionWithDeleteColumn2
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|dc
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
name|dc
operator|.
name|deleteColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
expr_stmt|;
comment|/* compactionThreshold is 3. The table has 4 versions: 0, 1, 2, and 3.      * we only delete the latest version. One might expect to see only      * versions 1 and 2. HBase differs, and gives us 0, 1 and 2.      * This is okay as well. Since there was no compaction done before the      * delete, version 0 seems to stay on.      */
name|testMinorCompactionWithDelete
argument_list|(
name|dc
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionWithDeleteColumnFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|deleteCF
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
name|deleteCF
operator|.
name|deleteFamily
argument_list|(
name|fam2
argument_list|)
expr_stmt|;
name|testMinorCompactionWithDelete
argument_list|(
name|deleteCF
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionWithDeleteVersion1
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|deleteVersion
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
name|deleteVersion
operator|.
name|deleteColumns
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|/* compactionThreshold is 3. The table has 4 versions: 0, 1, 2, and 3.      * We delete versions 0 ... 2. So, we still have one remaining.      */
name|testMinorCompactionWithDelete
argument_list|(
name|deleteVersion
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompactionWithDeleteVersion2
parameter_list|()
throws|throws
name|Exception
block|{
name|Delete
name|deleteVersion
init|=
operator|new
name|Delete
argument_list|(
name|secondRowBytes
argument_list|)
decl_stmt|;
name|deleteVersion
operator|.
name|deleteColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|/*      * the table has 4 versions: 0, 1, 2, and 3.      * We delete 1.      * Should have 3 remaining.      */
name|testMinorCompactionWithDelete
argument_list|(
name|deleteVersion
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/*    * A helper function to test the minor compaction algorithm. We check that    * the delete markers are left behind. Takes delete as an argument, which    * can be any delete (row, column, columnfamliy etc), that essentially    * deletes row2 and column2. row1 and column1 should be undeleted    */
specifier|private
name|void
name|testMinorCompactionWithDelete
parameter_list|(
name|Delete
name|delete
parameter_list|)
throws|throws
name|Exception
block|{
name|testMinorCompactionWithDelete
argument_list|(
name|delete
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMinorCompactionWithDelete
parameter_list|(
name|Delete
name|delete
parameter_list|,
name|int
name|expectedResultsAfterDelete
parameter_list|)
throws|throws
name|Exception
block|{
name|HRegionIncommon
name|loader
init|=
operator|new
name|HRegionIncommon
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|col1
argument_list|)
argument_list|,
name|firstRowBytes
argument_list|,
name|thirdRowBytes
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|col2
argument_list|)
argument_list|,
name|firstRowBytes
argument_list|,
name|thirdRowBytes
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|col1
argument_list|)
argument_list|,
name|firstRowBytes
argument_list|,
name|thirdRowBytes
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|HBaseTestCase
operator|.
name|addContent
argument_list|(
name|loader
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam2
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|col2
argument_list|)
argument_list|,
name|firstRowBytes
argument_list|,
name|thirdRowBytes
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
name|Result
name|result
init|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|firstRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col1
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now add deletes to memstore and then flush it.  That will put us over
comment|// the compaction threshold of 3 store files.  Compacting these store files
comment|// should result in a compacted store file that has no references to the
comment|// deleted row.
name|r
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Make sure that we have only deleted family2 from secondRowBytes
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResultsAfterDelete
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// but we still have firstrow
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|firstRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col1
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// should not change anything.
comment|// Let us check again
comment|// Make sure that we have only deleted family2 from secondRowBytes
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResultsAfterDelete
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// but we still have firstrow
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|firstRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col1
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// do a compaction
name|Store
name|store2
init|=
name|this
operator|.
name|r
operator|.
name|stores
operator|.
name|get
argument_list|(
name|fam2
argument_list|)
decl_stmt|;
name|int
name|numFiles1
init|=
name|store2
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Was expecting to see 4 store files"
argument_list|,
name|numFiles1
operator|>
name|compactionThreshold
argument_list|)
expr_stmt|;
comment|//> 3
operator|(
operator|(
name|HStore
operator|)
name|store2
operator|)
operator|.
name|compactRecentForTestingAssumingDefaultPolicy
argument_list|(
name|compactionThreshold
argument_list|)
expr_stmt|;
comment|// = 3
name|int
name|numFiles2
init|=
name|store2
operator|.
name|getStorefiles
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Check that we did compact
name|assertTrue
argument_list|(
literal|"Number of store files should go down"
argument_list|,
name|numFiles1
operator|>
name|numFiles2
argument_list|)
expr_stmt|;
comment|// Check that it was a minor compaction.
name|assertTrue
argument_list|(
literal|"Was not supposed to be a major compaction"
argument_list|,
name|numFiles2
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// Make sure that we have only deleted family2 from secondRowBytes
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|secondRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam2
argument_list|,
name|col2
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResultsAfterDelete
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// but we still have firstrow
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|firstRowBytes
argument_list|)
operator|.
name|addColumn
argument_list|(
name|fam1
argument_list|,
name|col1
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|compactionThreshold
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

