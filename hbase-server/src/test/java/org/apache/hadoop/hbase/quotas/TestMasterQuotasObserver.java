begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Test class for {@link MasterQuotasObserver}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMasterQuotasObserver
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMasterQuotasObserver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|SpaceQuotaHelperForTests
name|helper
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|removeAllQuotas
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|helper
operator|==
literal|null
condition|)
block|{
name|helper
operator|=
operator|new
name|SpaceQuotaHelperForTests
argument_list|(
name|TEST_UTIL
argument_list|,
name|testName
argument_list|,
operator|new
name|AtomicLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
comment|// Wait for the quota table to be created
if|if
condition|(
operator|!
name|conn
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
condition|)
block|{
name|helper
operator|.
name|waitForQuotaTable
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Or, clean up any quotas from previous test runs.
name|helper
operator|.
name|removeAllQuotas
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|helper
operator|.
name|listNumDefinedQuotas
argument_list|(
name|conn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableSpaceQuotaRemoved
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Drop the table if it somehow exists
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|dropTable
argument_list|(
name|admin
argument_list|,
name|tn
argument_list|)
expr_stmt|;
block|}
name|createTable
argument_list|(
name|admin
argument_list|,
name|tn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getNumSpaceQuotas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set space quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
literal|1024L
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getNumSpaceQuotas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Drop the table and observe the Space quota being automatically deleted as well
name|dropTable
argument_list|(
name|admin
argument_list|,
name|tn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getNumSpaceQuotas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableRPCQuotaRemoved
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testName
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Drop the table if it somehow exists
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|dropTable
argument_list|(
name|admin
argument_list|,
name|tn
argument_list|)
expr_stmt|;
block|}
name|createTable
argument_list|(
name|admin
argument_list|,
name|tn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getThrottleQuotas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set RPC quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|tn
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getThrottleQuotas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete the table and observe the RPC quota being automatically deleted as well
name|dropTable
argument_list|(
name|admin
argument_list|,
name|tn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getThrottleQuotas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceSpaceQuotaRemoved
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|ns
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
comment|// Drop the ns if it somehow exists
if|if
condition|(
name|namespaceExists
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
comment|// Create the ns
name|NamespaceDescriptor
name|desc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|ns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getNumSpaceQuotas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set a quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitNamespaceSpace
argument_list|(
name|ns
argument_list|,
literal|1024L
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getNumSpaceQuotas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete the namespace and observe the quota being automatically deleted as well
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getNumSpaceQuotas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceRPCQuotaRemoved
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Connection
name|conn
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
decl_stmt|;
specifier|final
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|ns
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
comment|// Drop the ns if it somehow exists
if|if
condition|(
name|namespaceExists
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
comment|// Create the ns
name|NamespaceDescriptor
name|desc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|ns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getThrottleQuotas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Set a quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|ns
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|2L
argument_list|,
name|TimeUnit
operator|.
name|HOURS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getThrottleQuotas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete the namespace and observe the quota being automatically deleted as well
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|getThrottleQuotas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObserverAddedByDefault
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
specifier|final
name|MasterCoprocessorHost
name|cpHost
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|coprocessorNames
init|=
name|cpHost
operator|.
name|getCoprocessors
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find MasterQuotasObserver in list of CPs: "
operator|+
name|coprocessorNames
argument_list|,
name|coprocessorNames
operator|.
name|contains
argument_list|(
name|MasterQuotasObserver
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|namespaceExists
parameter_list|(
name|String
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
name|NamespaceDescriptor
index|[]
name|descs
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|listNamespaceDescriptors
argument_list|()
decl_stmt|;
for|for
control|(
name|NamespaceDescriptor
name|desc
range|:
name|descs
control|)
block|{
if|if
condition|(
name|ns
operator|.
name|equals
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getNumSpaceQuotas
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numSpaceQuotas
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QuotaSettings
name|quotaSettings
range|:
name|scanner
control|)
block|{
if|if
condition|(
name|quotaSettings
operator|.
name|getQuotaType
argument_list|()
operator|==
name|QuotaType
operator|.
name|SPACE
condition|)
block|{
name|numSpaceQuotas
operator|++
expr_stmt|;
block|}
block|}
return|return
name|numSpaceQuotas
return|;
block|}
specifier|public
name|int
name|getThrottleQuotas
parameter_list|()
throws|throws
name|Exception
block|{
name|QuotaRetriever
name|scanner
init|=
name|QuotaRetriever
operator|.
name|open
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|throttleQuotas
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QuotaSettings
name|quotaSettings
range|:
name|scanner
control|)
block|{
if|if
condition|(
name|quotaSettings
operator|.
name|getQuotaType
argument_list|()
operator|==
name|QuotaType
operator|.
name|THROTTLE
condition|)
block|{
name|throttleQuotas
operator|++
expr_stmt|;
block|}
block|}
return|return
name|throttleQuotas
return|;
block|}
specifier|private
name|void
name|createTable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TableName
name|tn
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create a table
name|HTableDescriptor
name|tableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|tableDesc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"F1"
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|dropTable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TableName
name|tn
parameter_list|)
throws|throws
name|Exception
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

