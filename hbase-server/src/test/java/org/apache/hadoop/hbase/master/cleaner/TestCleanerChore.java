begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|StoppableImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCleanerChore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCleanerChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// delete and recreate the test directory, ensuring a clean test dir between tests
name|Path
name|testDir
init|=
name|UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|testDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|testDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSavesFilesOnRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|Stoppable
name|stop
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|testDir
init|=
name|UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|String
name|confKey
init|=
literal|"hbase.test.cleaner.delegates"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|confKey
argument_list|,
name|NeverDelete
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AllValidPaths
name|chore
init|=
operator|new
name|AllValidPaths
argument_list|(
literal|"test-file-cleaner"
argument_list|,
name|stop
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
name|testDir
argument_list|,
name|confKey
argument_list|)
decl_stmt|;
comment|// create the directory layout in the directory to clean
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"someFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// touch a new file
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test file didn't get created."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
comment|// run the chore
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
comment|// verify all the files got deleted
name|assertTrue
argument_list|(
literal|"File didn't get deleted"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Empty directory didn't get deleted"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeletesEmptyDirectories
parameter_list|()
throws|throws
name|Exception
block|{
name|Stoppable
name|stop
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|testDir
init|=
name|UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|String
name|confKey
init|=
literal|"hbase.test.cleaner.delegates"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|confKey
argument_list|,
name|AlwaysDelete
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AllValidPaths
name|chore
init|=
operator|new
name|AllValidPaths
argument_list|(
literal|"test-file-cleaner"
argument_list|,
name|stop
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
name|testDir
argument_list|,
name|confKey
argument_list|)
decl_stmt|;
comment|// create the directory layout in the directory to clean
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
name|Path
name|child
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"child"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|child
argument_list|,
literal|"someFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|child
argument_list|)
expr_stmt|;
comment|// touch a new file
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// also create a file in the top level directory
name|Path
name|topFile
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"topFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|topFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test file didn't get created."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test file didn't get created."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|topFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// run the chore
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
comment|// verify all the files got deleted
name|assertFalse
argument_list|(
literal|"File didn't get deleted"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|topFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"File didn't get deleted"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Empty directory didn't get deleted"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Empty directory didn't get deleted"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to make sure that we don't attempt to ask the delegate whether or not we should preserve a    * directory.    * @throws Exception on failure    */
annotation|@
name|Test
specifier|public
name|void
name|testDoesNotCheckDirectories
parameter_list|()
throws|throws
name|Exception
block|{
name|Stoppable
name|stop
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|testDir
init|=
name|UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|String
name|confKey
init|=
literal|"hbase.test.cleaner.delegates"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|confKey
argument_list|,
name|AlwaysDelete
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AllValidPaths
name|chore
init|=
operator|new
name|AllValidPaths
argument_list|(
literal|"test-file-cleaner"
argument_list|,
name|stop
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
name|testDir
argument_list|,
name|confKey
argument_list|)
decl_stmt|;
comment|// spy on the delegate to ensure that we don't check for directories
name|AlwaysDelete
name|delegate
init|=
operator|(
name|AlwaysDelete
operator|)
name|chore
operator|.
name|cleanersChain
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AlwaysDelete
name|spy
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|chore
operator|.
name|cleanersChain
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|spy
argument_list|)
expr_stmt|;
comment|// create the directory layout in the directory to clean
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"someFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// touch a new file
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test file didn't get created."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
comment|// make sure we never checked the directory
name|Mockito
operator|.
name|verify
argument_list|(
name|spy
argument_list|,
name|Mockito
operator|.
name|never
argument_list|()
argument_list|)
operator|.
name|isFileDeletable
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|reset
argument_list|(
name|spy
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStoppedCleanerDoesNotDeleteFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Stoppable
name|stop
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Path
name|testDir
init|=
name|UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|String
name|confKey
init|=
literal|"hbase.test.cleaner.delegates"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|confKey
argument_list|,
name|AlwaysDelete
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AllValidPaths
name|chore
init|=
operator|new
name|AllValidPaths
argument_list|(
literal|"test-file-cleaner"
argument_list|,
name|stop
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
name|testDir
argument_list|,
name|confKey
argument_list|)
decl_stmt|;
comment|// also create a file in the top level directory
name|Path
name|topFile
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"topFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|create
argument_list|(
name|topFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test file didn't get created."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|topFile
argument_list|)
argument_list|)
expr_stmt|;
comment|// stop the chore
name|stop
operator|.
name|stop
argument_list|(
literal|"testing stop"
argument_list|)
expr_stmt|;
comment|// run the chore
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
comment|// test that the file still exists
name|assertTrue
argument_list|(
literal|"File got deleted while chore was stopped"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|topFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * While cleaning a directory, all the files in the directory may be deleted, but there may be    * another file added, in which case the directory shouldn't be deleted.    * @throws IOException on failure    */
annotation|@
name|Test
specifier|public
name|void
name|testCleanerDoesNotDeleteDirectoryWithLateAddedFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Stoppable
name|stop
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|testDir
init|=
name|UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|String
name|confKey
init|=
literal|"hbase.test.cleaner.delegates"
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|confKey
argument_list|,
name|AlwaysDelete
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AllValidPaths
name|chore
init|=
operator|new
name|AllValidPaths
argument_list|(
literal|"test-file-cleaner"
argument_list|,
name|stop
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
name|testDir
argument_list|,
name|confKey
argument_list|)
decl_stmt|;
comment|// spy on the delegate to ensure that we don't check for directories
name|AlwaysDelete
name|delegate
init|=
operator|(
name|AlwaysDelete
operator|)
name|chore
operator|.
name|cleanersChain
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AlwaysDelete
name|spy
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|delegate
argument_list|)
decl_stmt|;
name|chore
operator|.
name|cleanersChain
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|spy
argument_list|)
expr_stmt|;
comment|// create the directory layout in the directory to clean
specifier|final
name|Path
name|parent
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"parent"
argument_list|)
decl_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"someFile"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|// touch a new file
name|fs
operator|.
name|create
argument_list|(
name|file
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test file didn't get created."
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|addedFile
init|=
operator|new
name|Path
argument_list|(
name|parent
argument_list|,
literal|"addedFile"
argument_list|)
decl_stmt|;
comment|// when we attempt to delete the original file, add another file in the same directory
name|Mockito
operator|.
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|fs
operator|.
name|create
argument_list|(
name|addedFile
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|fs
argument_list|,
name|testDir
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
return|return
operator|(
name|Boolean
operator|)
name|invocation
operator|.
name|callRealMethod
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|spy
argument_list|)
operator|.
name|isFileDeletable
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// run the chore
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
comment|// make sure all the directories + added file exist, but the original file is deleted
name|assertTrue
argument_list|(
literal|"Added file unexpectedly deleted"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|addedFile
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Parent directory deleted unexpectedly"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Original file unexpectedly retained"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|spy
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|isFileDeletable
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Path
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|reset
argument_list|(
name|spy
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|AllValidPaths
extends|extends
name|CleanerChore
argument_list|<
name|BaseHFileCleanerDelegate
argument_list|>
block|{
specifier|public
name|AllValidPaths
parameter_list|(
name|String
name|name
parameter_list|,
name|Stoppable
name|s
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|Path
name|oldFileDir
parameter_list|,
name|String
name|confkey
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|s
argument_list|,
name|conf
argument_list|,
name|fs
argument_list|,
name|oldFileDir
argument_list|,
name|confkey
argument_list|)
expr_stmt|;
block|}
comment|// all paths are valid
annotation|@
name|Override
specifier|protected
name|boolean
name|validate
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
empty_stmt|;
specifier|public
specifier|static
class|class
name|AlwaysDelete
extends|extends
name|BaseHFileCleanerDelegate
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFileDeletable
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NeverDelete
extends|extends
name|BaseHFileCleanerDelegate
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFileDeletable
parameter_list|(
name|Path
name|file
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

