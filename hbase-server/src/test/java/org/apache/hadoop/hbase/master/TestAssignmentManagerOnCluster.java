begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
operator|.
name|MetaEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|executor
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|StochasticLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * This tests AssignmentManager with a testing cluster.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestAssignmentManagerOnCluster
block|{
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"FAMILY"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|HBaseAdmin
name|admin
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Using the our load balancer to control region plans
name|conf
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|MyLoadBalancer
operator|.
name|class
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|MyRegionObserver
operator|.
name|class
argument_list|,
name|RegionObserver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Reduce the maximum attempts to speed up the test
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.assignment.maximum.attempts"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|,
name|MyMaster
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * This tests region assignment    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAssignRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"testAssignRegion"
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// Region is assigned now. Let's assign it again.
comment|// Master should not abort, and region should be assigned.
name|RegionState
name|oldState
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|assign
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|RegionState
name|newState
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|newState
operator|.
name|isOpened
argument_list|()
operator|&&
name|newState
operator|.
name|getStamp
argument_list|()
operator|!=
name|oldState
operator|.
name|getStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests region assignment on a simulated restarted server    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|120000
argument_list|)
specifier|public
name|void
name|testAssignRegionOnRestartedServer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"testAssignRegionOnRestartedServer"
decl_stmt|;
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.assignment.maximum.attempts"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|stopMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|startMaster
argument_list|()
expr_stmt|;
comment|//restart the master so that conf take into affect
name|ServerName
name|deadServer
init|=
literal|null
decl_stmt|;
name|HMaster
name|master
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|master
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|onlineServers
init|=
name|master
operator|.
name|serverManager
operator|.
name|getOnlineServers
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"There should be some servers online"
argument_list|,
name|onlineServers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Use the first server as the destination server
name|ServerName
name|destServer
init|=
name|onlineServers
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Created faked dead server
name|deadServer
operator|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|destServer
operator|.
name|getHostname
argument_list|()
argument_list|,
name|destServer
operator|.
name|getPort
argument_list|()
argument_list|,
name|destServer
operator|.
name|getStartcode
argument_list|()
operator|-
literal|100L
argument_list|)
expr_stmt|;
name|master
operator|.
name|serverManager
operator|.
name|recordNewServerWithLock
argument_list|(
name|deadServer
argument_list|,
name|ServerLoad
operator|.
name|EMPTY_SERVERLOAD
argument_list|)
expr_stmt|;
specifier|final
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|RegionPlan
name|plan
init|=
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
literal|null
argument_list|,
name|deadServer
argument_list|)
decl_stmt|;
name|am
operator|.
name|addPlan
argument_list|(
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|plan
argument_list|)
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|int
name|version
init|=
name|ZKAssign
operator|.
name|transitionNode
argument_list|(
name|master
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|hri
argument_list|,
name|destServer
argument_list|,
name|EventType
operator|.
name|M_ZK_REGION_OFFLINE
argument_list|,
name|EventType
operator|.
name|RS_ZK_REGION_OPENING
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"TansitionNode should fail"
argument_list|,
operator|-
literal|1
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Region should be assigned"
argument_list|,
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|deadServer
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|serverManager
operator|.
name|expireServer
argument_list|(
name|deadServer
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests offlining a region    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testOfflineRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testOfflineRegion"
argument_list|)
decl_stmt|;
try|try
block|{
name|HRegionInfo
name|hri
init|=
name|createTableAndGetOneRegion
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|admin
operator|.
name|offline
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|timeoutTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|800
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|regionStates
operator|.
name|getRegionsOfTable
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|regions
operator|.
name|contains
argument_list|(
name|hri
argument_list|)
condition|)
break|break;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|timeoutTime
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to offline the region in time"
argument_list|)
expr_stmt|;
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|RegionState
name|regionState
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regionState
operator|.
name|isOffline
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests moving a region    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
specifier|public
name|void
name|testMoveRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMoveRegion"
argument_list|)
decl_stmt|;
try|try
block|{
name|HRegionInfo
name|hri
init|=
name|createTableAndGetOneRegion
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|ServerName
name|destServerName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|destServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destServer
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|destServerName
operator|=
name|destServer
operator|.
name|getServerName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|destServerName
operator|!=
literal|null
operator|&&
operator|!
name|destServerName
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|destServerName
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|timeoutTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30000
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ServerName
name|sn
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
if|if
condition|(
name|sn
operator|!=
literal|null
operator|&&
name|sn
operator|.
name|equals
argument_list|(
name|destServerName
argument_list|)
condition|)
block|{
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hri
argument_list|,
name|sn
argument_list|,
literal|200
argument_list|)
expr_stmt|;
break|break;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|timeoutTime
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to move the region in time: "
operator|+
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|regionStates
operator|.
name|waitForUpdate
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * If a table is deleted, we should not be able to move it anymore.    * Otherwise, the region will be brought back.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|50000
argument_list|)
specifier|public
name|void
name|testMoveRegionOfDeletedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testMoveRegionOfDeletedTable"
argument_list|)
decl_stmt|;
name|HBaseAdmin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
try|try
block|{
name|HRegionInfo
name|hri
init|=
name|createTableAndGetOneRegion
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|ServerName
name|destServerName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|destServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destServer
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|destServerName
operator|=
name|destServer
operator|.
name|getServerName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|destServerName
operator|!=
literal|null
operator|&&
operator|!
name|destServerName
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|move
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|destServerName
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"We should not find the region"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ioe
operator|instanceof
name|UnknownRegionException
argument_list|)
expr_stmt|;
block|}
name|am
operator|.
name|balance
argument_list|(
operator|new
name|RegionPlan
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
name|destServerName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"The region should not be in transition"
argument_list|,
name|regionStates
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|HRegionInfo
name|createTableAndGetOneRegion
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// wait till the table is assigned
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|long
name|timeoutTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1000
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
return|return
name|regions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
return|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|timeoutTime
condition|)
block|{
name|fail
argument_list|(
literal|"Could not find an online region"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This test should not be flaky. If it is flaky, it means something    * wrong with AssignmentManager which should be reported and fixed    *    * This tests forcefully assign a region while it's closing and re-assigned.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testForceAssignWhileClosing
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"testForceAssignWhileClosing"
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|MyRegionObserver
operator|.
name|preCloseEnabled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|RegionState
name|state
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|FAILED_CLOSE
argument_list|,
name|state
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|MyRegionObserver
operator|.
name|preCloseEnabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// region is closing now, will be re-assigned automatically.
comment|// now, let's forcefully assign it again. it should be
comment|// assigned properly and no double-assignment
name|am
operator|.
name|assign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// let's check if it's assigned after it's out of transition
name|am
operator|.
name|waitOnRegionToClearRegionsInTransition
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|serverName
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnlyOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|MyRegionObserver
operator|.
name|preCloseEnabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests region close failed    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testCloseFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"testCloseFailed"
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|MyRegionObserver
operator|.
name|preCloseEnabled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|RegionState
name|state
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|FAILED_CLOSE
argument_list|,
name|state
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|MyRegionObserver
operator|.
name|preCloseEnabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// region may still be assigned now since it's closing,
comment|// let's check if it's assigned after it's out of transition
name|am
operator|.
name|waitOnRegionToClearRegionsInTransition
argument_list|(
name|hri
argument_list|)
expr_stmt|;
comment|// region should be closed and re-assigned
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|serverName
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|MyRegionObserver
operator|.
name|preCloseEnabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests region open failed    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testOpenFailed
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"testOpenFailed"
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|MyLoadBalancer
operator|.
name|controledRegion
operator|=
name|hri
operator|.
name|getEncodedName
argument_list|()
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|RegionState
name|state
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|FAILED_OPEN
argument_list|,
name|state
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Failed to open since no plan, so it's on no server
name|assertNull
argument_list|(
name|state
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|MyLoadBalancer
operator|.
name|controledRegion
operator|=
literal|null
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|serverName
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|MyLoadBalancer
operator|.
name|controledRegion
operator|=
literal|null
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests region open failure which is not recoverable    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testOpenFailedUnrecoverable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testOpenFailedUnrecoverable"
argument_list|)
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|table
argument_list|)
decl_stmt|;
name|Path
name|regionDir
init|=
operator|new
name|Path
argument_list|(
name|tableDir
argument_list|,
name|hri
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
comment|// create a file named the same as the region dir to
comment|// mess up with region opening
name|fs
operator|.
name|create
argument_list|(
name|regionDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|RegionState
name|state
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|FAILED_OPEN
argument_list|,
name|state
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Failed to open due to file system issue. Region state should
comment|// carry the opening region server so that we can force close it
comment|// later on before opening it again. See HBASE-9092.
name|assertNotNull
argument_list|(
name|state
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove the blocking file, so that region can be opened
name|fs
operator|.
name|delete
argument_list|(
name|regionDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|serverName
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testSSHWhenDisablingTableRegionsInOpeningOrPendingOpenState
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testSSHWhenDisablingTableRegionsInOpeningOrPendingOpenState"
argument_list|)
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|HRegionInfo
name|hri
init|=
literal|null
decl_stmt|;
name|ServerName
name|serverName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hri
operator|=
name|createTableAndGetOneRegion
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|serverName
operator|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|ServerName
name|destServerName
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|destServer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|destServer
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|destServer
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|destServerName
operator|=
name|destServer
operator|.
name|getServerName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|am
operator|.
name|regionOffline
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
decl_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|updateRegionState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|OFFLINE
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|createNodeOffline
argument_list|(
name|zkw
argument_list|,
name|hri
argument_list|,
name|destServerName
argument_list|)
expr_stmt|;
name|ZKAssign
operator|.
name|transitionNodeOpening
argument_list|(
name|zkw
argument_list|,
name|hri
argument_list|,
name|destServerName
argument_list|)
expr_stmt|;
comment|// Wait till the event is processed and the region is in transition
name|long
name|timeoutTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|20000
decl_stmt|;
while|while
condition|(
operator|!
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInTransition
argument_list|(
name|hri
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Failed to process ZK opening event in time"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeoutTime
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setDisablingTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|toAssignRegions
init|=
name|am
operator|.
name|processServerShutdown
argument_list|(
name|destServerName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Regions to be assigned should be empty."
argument_list|,
name|toAssignRegions
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Regions to be assigned should be empty."
argument_list|,
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
operator|.
name|isOffline
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hri
operator|!=
literal|null
operator|&&
name|serverName
operator|!=
literal|null
condition|)
block|{
name|am
operator|.
name|regionOnline
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
block|}
name|am
operator|.
name|getZKTable
argument_list|()
operator|.
name|setDisabledTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests region close hanging    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testCloseHang
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"testCloseHang"
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|MyRegionObserver
operator|.
name|postCloseEnabled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
comment|// Now region should pending_close or closing
comment|// Unassign it again forcefully so that we can trigger already
comment|// in transition exception. This test is to make sure this scenario
comment|// is handled properly.
name|am
operator|.
name|server
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|AssignmentManager
operator|.
name|ALREADY_IN_TRANSITION_WAITTIME
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RegionState
name|state
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|FAILED_CLOSE
argument_list|,
name|state
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let region closing move ahead. The region should be closed
comment|// properly and re-assigned automatically
name|MyRegionObserver
operator|.
name|postCloseEnabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// region may still be assigned now since it's closing,
comment|// let's check if it's assigned after it's out of transition
name|am
operator|.
name|waitOnRegionToClearRegionsInTransition
argument_list|(
name|hri
argument_list|)
expr_stmt|;
comment|// region should be closed and re-assigned
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|serverName
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|MyRegionObserver
operator|.
name|postCloseEnabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This tests region close racing with open    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testOpenCloseRacing
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"testOpenCloseRacing"
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
name|MyRegionObserver
operator|.
name|postOpenEnabled
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|MyRegionObserver
operator|.
name|postOpenCalled
operator|=
literal|false
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
comment|// Region will be opened, but it won't complete
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|long
name|end
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|20000
decl_stmt|;
comment|// Wait till postOpen is called
while|while
condition|(
operator|!
name|MyRegionObserver
operator|.
name|postOpenCalled
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Timed out waiting for postOpen to be called"
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|end
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|300
argument_list|)
expr_stmt|;
block|}
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
comment|// Now let's unassign it, it should do nothing
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|RegionState
name|state
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|ServerName
name|oldServerName
init|=
name|state
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|isPendingOpenOrOpening
argument_list|()
operator|&&
name|oldServerName
operator|!=
literal|null
argument_list|)
expr_stmt|;
comment|// Now the region is stuck in opening
comment|// Let's forcefully re-assign it to trigger closing/opening
comment|// racing. This test is to make sure this scenario
comment|// is handled properly.
name|MyRegionObserver
operator|.
name|postOpenEnabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ServerName
name|destServerName
init|=
literal|null
decl_stmt|;
name|int
name|numRS
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRS
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|destServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destServer
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|oldServerName
argument_list|)
condition|)
block|{
name|destServerName
operator|=
name|destServer
operator|.
name|getServerName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|destServerName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Region should be assigned on a new region server"
argument_list|,
name|oldServerName
operator|.
name|equals
argument_list|(
name|destServerName
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|am
operator|.
name|assign
argument_list|(
name|destServerName
argument_list|,
name|regions
argument_list|)
expr_stmt|;
comment|// let's check if it's assigned after it's out of transition
name|am
operator|.
name|waitOnRegionToClearRegionsInTransition
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|serverName
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnlyOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Region should be assigned on a new region server"
argument_list|,
name|oldServerName
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|MyRegionObserver
operator|.
name|postOpenEnabled
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test force unassign/assign a region hosted on a dead server    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAssignRacingWithSSH
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"testAssignRacingWithSSH"
decl_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|MyMaster
name|master
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// Assign the region
name|master
operator|=
operator|(
name|MyMaster
operator|)
name|cluster
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
comment|// Hold SSH before killing the hosting server
name|master
operator|.
name|enableSSH
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|ServerName
name|metaServer
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|RegionState
name|state
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|ServerName
name|oldServerName
init|=
name|state
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|oldServerName
argument_list|,
name|metaServer
argument_list|)
condition|)
block|{
comment|// Kill the hosting server, which doesn't have meta on it.
name|cluster
operator|.
name|killRegionServer
argument_list|(
name|oldServerName
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitForRegionServerToStop
argument_list|(
name|oldServerName
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
name|int
name|i
init|=
name|cluster
operator|.
name|getServerWithMeta
argument_list|()
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|1
else|:
literal|0
argument_list|)
decl_stmt|;
name|oldServerName
operator|=
name|rs
operator|.
name|getServerName
argument_list|()
expr_stmt|;
name|master
operator|.
name|move
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|oldServerName
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// You can't assign a dead region before SSH
name|am
operator|.
name|assign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|RegionState
name|state
init|=
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|isFailedClose
argument_list|()
argument_list|)
expr_stmt|;
comment|// You can't unassign a dead region before SSH either
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|state
operator|.
name|isFailedClose
argument_list|()
argument_list|)
expr_stmt|;
comment|// Enable SSH so that log can be split
name|master
operator|.
name|enableSSH
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// let's check if it's assigned after it's out of transition.
comment|// no need to assign it manually, SSH should do it
name|am
operator|.
name|waitOnRegionToClearRegionsInTransition
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|serverName
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnlyOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|master
operator|!=
literal|null
condition|)
block|{
name|master
operator|.
name|enableSSH
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test force unassign/assign a region of a disabled table    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testAssignDisabledRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|table
init|=
literal|"testAssignDisabledRegion"
decl_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|MyMaster
name|master
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|MetaEditor
operator|.
name|addRegionToMeta
argument_list|(
name|meta
argument_list|,
name|hri
argument_list|)
expr_stmt|;
comment|// Assign the region
name|master
operator|=
operator|(
name|MyMaster
operator|)
name|cluster
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|master
operator|.
name|assignRegion
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|am
operator|.
name|waitForAssignment
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disable the table
name|admin
operator|.
name|disableTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|isRegionOffline
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
comment|// You can't assign a disabled region
name|am
operator|.
name|assign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|isRegionOffline
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
comment|// You can't unassign a disabled region either
name|am
operator|.
name|unassign
argument_list|(
name|hri
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|isRegionOffline
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|MyLoadBalancer
extends|extends
name|StochasticLoadBalancer
block|{
comment|// For this region, if specified, always assign to nowhere
specifier|static
specifier|volatile
name|String
name|controledRegion
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ServerName
name|randomAssignment
parameter_list|(
name|HRegionInfo
name|regionInfo
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|controledRegion
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|super
operator|.
name|randomAssignment
argument_list|(
name|regionInfo
argument_list|,
name|servers
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MyMaster
extends|extends
name|HMaster
block|{
name|AtomicBoolean
name|enabled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|public
name|MyMaster
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isServerShutdownHandlerEnabled
parameter_list|()
block|{
return|return
name|enabled
operator|.
name|get
argument_list|()
operator|&&
name|super
operator|.
name|isServerShutdownHandlerEnabled
argument_list|()
return|;
block|}
specifier|public
name|void
name|enableSSH
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|.
name|set
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|serverManager
operator|.
name|processQueuedDeadServers
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|MyRegionObserver
extends|extends
name|BaseRegionObserver
block|{
comment|// If enabled, fail all preClose calls
specifier|static
name|AtomicBoolean
name|preCloseEnabled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// If enabled, stall postClose calls
specifier|static
name|AtomicBoolean
name|postCloseEnabled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// If enabled, stall postOpen calls
specifier|static
name|AtomicBoolean
name|postOpenEnabled
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// A flag to track if postOpen is called
specifier|static
specifier|volatile
name|boolean
name|postOpenCalled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|preClose
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|boolean
name|abortRequested
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|preCloseEnabled
operator|.
name|get
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"fail preClose from coprocessor"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postClose
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|boolean
name|abortRequested
parameter_list|)
block|{
name|stallOnFlag
argument_list|(
name|postCloseEnabled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
block|{
name|postOpenCalled
operator|=
literal|true
expr_stmt|;
name|stallOnFlag
argument_list|(
name|postOpenEnabled
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|stallOnFlag
parameter_list|(
specifier|final
name|AtomicBoolean
name|flag
parameter_list|)
block|{
try|try
block|{
comment|// If enabled, stall
while|while
condition|(
name|flag
operator|.
name|get
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

