begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|TimeToLiveHFileCleaner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|MobSnapshotTestingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotTestingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Test clone snapshots from the client  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMobCloneSnapshotFromClient
extends|extends
name|TestCloneSnapshotFromClient
block|{
specifier|private
specifier|static
name|boolean
name|delayFlush
init|=
literal|false
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|void
name|setupConfiguration
parameter_list|()
block|{
name|TestCloneSnapshotFromClient
operator|.
name|setupConfiguration
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|TimeToLiveHFileCleaner
operator|.
name|TTL_CONF_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|MobConstants
operator|.
name|MOB_FILE_CACHE_SIZE_KEY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConfiguration
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createTableAndSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create Table and disable it
name|createMobTable
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|,
name|SnapshotTestingUtils
operator|.
name|getSplitKeys
argument_list|()
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|delayFlush
operator|=
literal|false
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// take an empty snapshot
name|admin
operator|.
name|snapshot
argument_list|(
name|emptySnapshot
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Connection
name|c
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|c
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
comment|// enable table and insert data
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|,
literal|20
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|snapshot0Rows
operator|=
name|MobSnapshotTestingUtils
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// take a snapshot
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotName0
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// enable table and insert more data
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|,
literal|20
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|snapshot1Rows
operator|=
name|MobSnapshotTestingUtils
operator|.
name|countMobRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// take a snapshot of the updated table
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotName1
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// re-enable table
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Override
specifier|public
name|void
name|testCloneLinksAfterDelete
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// delay the flush to make sure
name|delayFlush
operator|=
literal|true
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|TEST_UTIL
argument_list|,
name|tableName
argument_list|,
literal|20
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|long
name|tid
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|byte
index|[]
name|snapshotName3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"snaptb3-"
operator|+
name|tid
argument_list|)
decl_stmt|;
name|TableName
name|clonedTableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotName3
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|delayFlush
operator|=
literal|false
expr_stmt|;
name|int
name|snapshot3Rows
init|=
operator|-
literal|1
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|snapshot3Rows
operator|=
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|cloneSnapshot
argument_list|(
name|snapshotName3
argument_list|,
name|clonedTableName3
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotName3
argument_list|)
expr_stmt|;
name|super
operator|.
name|testCloneLinksAfterDelete
argument_list|()
expr_stmt|;
name|verifyRowCount
argument_list|(
name|TEST_UTIL
argument_list|,
name|clonedTableName3
argument_list|,
name|snapshot3Rows
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|clonedTableName3
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|clonedTableName3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|verifyRowCount
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|long
name|expectedRows
parameter_list|)
throws|throws
name|IOException
block|{
name|MobSnapshotTestingUtils
operator|.
name|verifyMobRowCount
argument_list|(
name|util
argument_list|,
name|tableName
argument_list|,
name|expectedRows
argument_list|)
expr_stmt|;
block|}
comment|/**    * This coprocessor is used to delay the flush.    */
specifier|public
specifier|static
class|class
name|DelayFlushCoprocessor
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preFlush
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|delayFlush
condition|)
block|{
try|try
block|{
if|if
condition|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|e
operator|.
name|getEnvironment
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|createMobTable
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|splitKeys
parameter_list|,
name|int
name|regionReplication
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setRegionReplication
argument_list|(
name|regionReplication
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addCoprocessor
argument_list|(
name|DelayFlushCoprocessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|waitForTableToBeOnline
argument_list|(
name|util
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|splitKeys
operator|.
name|length
operator|+
literal|1
operator|)
operator|*
name|regionReplication
argument_list|,
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

