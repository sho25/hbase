begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
operator|.
name|createCell
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueTestUtil
operator|.
name|create
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|KeyValueScanFixture
operator|.
name|scanFixture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|OptionalInt
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CategoryBasedTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ColumnCountGetFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManagerTestHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|// Can't be small as it plays with EnvironmentEdgeManager
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStoreScanner
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStoreScanner
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestRule
name|timeout
init|=
name|CategoryBasedTimeout
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withLookingForStuckThread
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CF_STR
init|=
literal|"cf"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CF
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|CF_STR
argument_list|)
decl_stmt|;
specifier|static
name|Configuration
name|CONF
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|CONF
argument_list|,
name|CF
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|/**    * From here on down, we have a bunch of defines and specific CELL_GRID of Cells. The    * CELL_GRID then has a Scanner that can fake out 'block' transitions. All this elaborate    * setup is for tests that ensure we don't overread, and that the    * {@link StoreScanner#optimize(org.apache.hadoop.hbase.regionserver.querymatcher.ScanQueryMatcher.MatchCode,    * Cell)} is not overly enthusiastic.    */
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ZERO
init|=
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ZERO_POINT_ZERO
init|=
operator|new
name|byte
index|[]
block|{
literal|'0'
block|,
literal|'.'
block|,
literal|'0'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ONE
init|=
operator|new
name|byte
index|[]
block|{
literal|'1'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TWO
init|=
operator|new
name|byte
index|[]
block|{
literal|'2'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TWO_POINT_TWO
init|=
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|'.'
block|,
literal|'2'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|THREE
init|=
operator|new
name|byte
index|[]
block|{
literal|'3'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FOUR
init|=
operator|new
name|byte
index|[]
block|{
literal|'4'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FIVE
init|=
operator|new
name|byte
index|[]
block|{
literal|'5'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE
init|=
operator|new
name|byte
index|[]
block|{
literal|'v'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CELL_GRID_BLOCK2_BOUNDARY
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CELL_GRID_BLOCK3_BOUNDARY
init|=
literal|11
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CELL_GRID_BLOCK4_BOUNDARY
init|=
literal|15
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CELL_GRID_BLOCK5_BOUNDARY
init|=
literal|19
decl_stmt|;
comment|/**    * Five rows by four columns distinguished by column qualifier (column qualifier is one of the    * four rows... ONE, TWO, etc.). Exceptions are a weird row after TWO; it is TWO_POINT_TWO.    * And then row FOUR has five columns finishing w/ row FIVE having a single column.    * We will use this to test scan does the right thing as it    * we do Gets, StoreScanner#optimize, and what we do on (faked) block boundaries.    */
specifier|private
specifier|static
specifier|final
name|Cell
index|[]
name|CELL_GRID
init|=
operator|new
name|Cell
index|[]
block|{
name|createCell
argument_list|(
name|ONE
argument_list|,
name|CF
argument_list|,
name|ONE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|ONE
argument_list|,
name|CF
argument_list|,
name|TWO
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|ONE
argument_list|,
name|CF
argument_list|,
name|THREE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|ONE
argument_list|,
name|CF
argument_list|,
name|FOUR
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
comment|// Offset 4 CELL_GRID_BLOCK2_BOUNDARY
name|createCell
argument_list|(
name|TWO
argument_list|,
name|CF
argument_list|,
name|ONE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|TWO
argument_list|,
name|CF
argument_list|,
name|TWO
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|TWO
argument_list|,
name|CF
argument_list|,
name|THREE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|TWO
argument_list|,
name|CF
argument_list|,
name|FOUR
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|TWO_POINT_TWO
argument_list|,
name|CF
argument_list|,
name|ZERO
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|TWO_POINT_TWO
argument_list|,
name|CF
argument_list|,
name|ZERO_POINT_ZERO
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|TWO_POINT_TWO
argument_list|,
name|CF
argument_list|,
name|FIVE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
comment|// Offset 11! CELL_GRID_BLOCK3_BOUNDARY
name|createCell
argument_list|(
name|THREE
argument_list|,
name|CF
argument_list|,
name|ONE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|THREE
argument_list|,
name|CF
argument_list|,
name|TWO
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|THREE
argument_list|,
name|CF
argument_list|,
name|THREE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|THREE
argument_list|,
name|CF
argument_list|,
name|FOUR
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
comment|// Offset 15 CELL_GRID_BLOCK4_BOUNDARY
name|createCell
argument_list|(
name|FOUR
argument_list|,
name|CF
argument_list|,
name|ONE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|FOUR
argument_list|,
name|CF
argument_list|,
name|TWO
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|FOUR
argument_list|,
name|CF
argument_list|,
name|THREE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|FOUR
argument_list|,
name|CF
argument_list|,
name|FOUR
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
comment|// Offset 19 CELL_GRID_BLOCK5_BOUNDARY
name|createCell
argument_list|(
name|FOUR
argument_list|,
name|CF
argument_list|,
name|FIVE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|FIVE
argument_list|,
name|CF
argument_list|,
name|ZERO
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,   }
decl_stmt|;
specifier|private
specifier|static
class|class
name|KeyValueHeapWithCount
extends|extends
name|KeyValueHeap
block|{
specifier|final
name|AtomicInteger
name|count
decl_stmt|;
specifier|public
name|KeyValueHeapWithCount
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|CellComparator
name|comparator
parameter_list|,
name|AtomicInteger
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|peek
parameter_list|()
block|{
name|this
operator|.
name|count
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|peek
argument_list|()
return|;
block|}
block|}
comment|/**    * A StoreScanner for our CELL_GRID above. Fakes the block transitions. Does counts of    * calls to optimize and counts of when optimize actually did an optimize.    */
specifier|private
specifier|static
class|class
name|CellGridStoreScanner
extends|extends
name|StoreScanner
block|{
comment|// Count of how often optimize is called and of how often it does an optimize.
name|AtomicInteger
name|count
decl_stmt|;
specifier|final
name|AtomicInteger
name|optimization
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CellGridStoreScanner
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|CF
argument_list|)
argument_list|,
name|Arrays
operator|.
expr|<
name|KeyValueScanner
operator|>
name|asList
argument_list|(
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
name|CELL_GRID
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|resetKVHeap
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|scanners
parameter_list|,
name|CellComparator
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|count
operator|==
literal|null
condition|)
block|{
name|count
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|heap
operator|=
operator|new
name|KeyValueHeapWithCount
argument_list|(
name|scanners
argument_list|,
name|comparator
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|trySkipToNextRow
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|optimized
init|=
name|super
operator|.
name|trySkipToNextRow
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cell="
operator|+
name|cell
operator|+
literal|", nextIndex="
operator|+
name|CellUtil
operator|.
name|toString
argument_list|(
name|getNextIndexedKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|+
literal|", optimized="
operator|+
name|optimized
argument_list|)
expr_stmt|;
if|if
condition|(
name|optimized
condition|)
block|{
name|optimization
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|optimized
return|;
block|}
specifier|protected
name|boolean
name|trySkipToNextColumn
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|optimized
init|=
name|super
operator|.
name|trySkipToNextColumn
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cell="
operator|+
name|cell
operator|+
literal|", nextIndex="
operator|+
name|CellUtil
operator|.
name|toString
argument_list|(
name|getNextIndexedKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|+
literal|", optimized="
operator|+
name|optimized
argument_list|)
expr_stmt|;
if|if
condition|(
name|optimized
condition|)
block|{
name|optimization
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|optimized
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextIndexedKey
parameter_list|()
block|{
comment|// Fake block boundaries by having index of next block change as we go through scan.
return|return
name|count
operator|.
name|get
argument_list|()
operator|>
name|CELL_GRID_BLOCK4_BOUNDARY
condition|?
name|PrivateCellUtil
operator|.
name|createFirstOnRow
argument_list|(
name|CELL_GRID
index|[
name|CELL_GRID_BLOCK5_BOUNDARY
index|]
argument_list|)
else|:
name|count
operator|.
name|get
argument_list|()
operator|>
name|CELL_GRID_BLOCK3_BOUNDARY
condition|?
name|PrivateCellUtil
operator|.
name|createFirstOnRow
argument_list|(
name|CELL_GRID
index|[
name|CELL_GRID_BLOCK4_BOUNDARY
index|]
argument_list|)
else|:
name|count
operator|.
name|get
argument_list|()
operator|>
name|CELL_GRID_BLOCK2_BOUNDARY
condition|?
name|PrivateCellUtil
operator|.
name|createFirstOnRow
argument_list|(
name|CELL_GRID
index|[
name|CELL_GRID_BLOCK3_BOUNDARY
index|]
argument_list|)
else|:
name|PrivateCellUtil
operator|.
name|createFirstOnRow
argument_list|(
name|CELL_GRID
index|[
name|CELL_GRID_BLOCK2_BOUNDARY
index|]
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|int
name|CELL_WITH_VERSIONS_BLOCK2_BOUNDARY
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Cell
index|[]
name|CELL_WITH_VERSIONS
init|=
operator|new
name|Cell
index|[]
block|{
name|createCell
argument_list|(
name|ONE
argument_list|,
name|CF
argument_list|,
name|ONE
argument_list|,
literal|2L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|ONE
argument_list|,
name|CF
argument_list|,
name|ONE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|ONE
argument_list|,
name|CF
argument_list|,
name|TWO
argument_list|,
literal|2L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|ONE
argument_list|,
name|CF
argument_list|,
name|TWO
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
comment|// Offset 4 CELL_WITH_VERSIONS_BLOCK2_BOUNDARY
name|createCell
argument_list|(
name|TWO
argument_list|,
name|CF
argument_list|,
name|ONE
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,
name|createCell
argument_list|(
name|TWO
argument_list|,
name|CF
argument_list|,
name|TWO
argument_list|,
literal|1L
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
argument_list|,
name|VALUE
argument_list|)
block|,   }
decl_stmt|;
specifier|private
specifier|static
class|class
name|CellWithVersionsStoreScanner
extends|extends
name|StoreScanner
block|{
comment|// Count of how often optimize is called and of how often it does an optimize.
specifier|final
name|AtomicInteger
name|optimization
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CellWithVersionsStoreScanner
parameter_list|(
specifier|final
name|Scan
name|scan
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|CF
argument_list|)
argument_list|,
name|Arrays
operator|.
expr|<
name|KeyValueScanner
operator|>
name|asList
argument_list|(
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
name|CELL_WITH_VERSIONS
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|trySkipToNextColumn
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|optimized
init|=
name|super
operator|.
name|trySkipToNextColumn
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cell="
operator|+
name|cell
operator|+
literal|", nextIndex="
operator|+
name|CellUtil
operator|.
name|toString
argument_list|(
name|getNextIndexedKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|+
literal|", optimized="
operator|+
name|optimized
argument_list|)
expr_stmt|;
if|if
condition|(
name|optimized
condition|)
block|{
name|optimization
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|optimized
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextIndexedKey
parameter_list|()
block|{
comment|// Fake block boundaries by having index of next block change as we go through scan.
return|return
name|PrivateCellUtil
operator|.
name|createFirstOnRow
argument_list|(
name|CELL_WITH_VERSIONS
index|[
name|CELL_WITH_VERSIONS_BLOCK2_BOUNDARY
index|]
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CellWithVersionsNoOptimizeStoreScanner
extends|extends
name|StoreScanner
block|{
comment|// Count of how often optimize is called and of how often it does an optimize.
specifier|final
name|AtomicInteger
name|optimization
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CellWithVersionsNoOptimizeStoreScanner
parameter_list|(
name|Scan
name|scan
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|CF
argument_list|)
argument_list|,
name|Arrays
operator|.
expr|<
name|KeyValueScanner
operator|>
name|asList
argument_list|(
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
name|CELL_WITH_VERSIONS
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|trySkipToNextColumn
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|optimized
init|=
name|super
operator|.
name|trySkipToNextColumn
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Cell="
operator|+
name|cell
operator|+
literal|", nextIndex="
operator|+
name|CellUtil
operator|.
name|toString
argument_list|(
name|getNextIndexedKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|+
literal|", optimized="
operator|+
name|optimized
argument_list|)
expr_stmt|;
if|if
condition|(
name|optimized
condition|)
block|{
name|optimization
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|optimized
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cell
name|getNextIndexedKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithColumnCountGetFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ONE
argument_list|)
decl_stmt|;
name|get
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|CF
argument_list|)
expr_stmt|;
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnCountGetFilter
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|CellWithVersionsNoOptimizeStoreScanner
name|scannerNoOptimize
init|=
operator|new
name|CellWithVersionsNoOptimizeStoreScanner
argument_list|(
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
argument_list|,
name|this
operator|.
name|scanInfo
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scannerNoOptimize
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|CELL_WITH_VERSIONS
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|CELL_WITH_VERSIONS
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Optimize should do some optimizations"
argument_list|,
name|scannerNoOptimize
operator|.
name|optimization
operator|.
name|get
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|ColumnCountGetFilter
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|CellWithVersionsStoreScanner
name|scanner
init|=
operator|new
name|CellWithVersionsStoreScanner
argument_list|(
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
argument_list|,
name|this
operator|.
name|scanInfo
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|CELL_WITH_VERSIONS
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingColumn
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|CELL_WITH_VERSIONS
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Optimize should do some optimizations"
argument_list|,
name|scanner
operator|.
name|optimization
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test utility for building a NavigableSet for scanners.    * @param strCols    * @return    */
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|getCols
parameter_list|(
name|String
modifier|...
name|strCols
parameter_list|)
block|{
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|cols
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|strCols
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
return|return
name|cols
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullRowGetDoesNotOverreadWhenRowInsideOneBlock
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do a Get against row two. Row two is inside a block that starts with row TWO but ends with
comment|// row TWO_POINT_TWO. We should read one block only.
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|TWO
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
try|try
init|(
name|CellGridStoreScanner
name|scanner
init|=
operator|new
name|CellGridStoreScanner
argument_list|(
name|scan
argument_list|,
name|this
operator|.
name|scanInfo
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Should be four results of column 1 (though there are 5 rows in the CELL_GRID -- the
comment|// TWO_POINT_TWO row does not have a a column ONE.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should have gone the optimize route 5 times totally... an INCLUDE for the four cells
comment|// in the row plus the DONE on the end.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|scanner
operator|.
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// For a full row Get, there should be no opportunity for scanner optimization.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scanner
operator|.
name|optimization
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFullRowSpansBlocks
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Do a Get against row FOUR. It spans two blocks.
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|FOUR
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
try|try
init|(
name|CellGridStoreScanner
name|scanner
init|=
operator|new
name|CellGridStoreScanner
argument_list|(
name|scan
argument_list|,
name|this
operator|.
name|scanInfo
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Should be four results of column 1 (though there are 5 rows in the CELL_GRID -- the
comment|// TWO_POINT_TWO row does not have a a column ONE.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should have gone the optimize route 6 times totally... an INCLUDE for the five cells
comment|// in the row plus the DONE on the end.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|scanner
operator|.
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// For a full row Get, there should be no opportunity for scanner optimization.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scanner
operator|.
name|optimization
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test optimize in StoreScanner. Test that we skip to the next 'block' when we it makes sense    * reading the block 'index'.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testOptimize
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// A scan that just gets the first qualifier on each row of the CELL_GRID
name|scan
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|ONE
argument_list|)
expr_stmt|;
try|try
init|(
name|CellGridStoreScanner
name|scanner
init|=
operator|new
name|CellGridStoreScanner
argument_list|(
name|scan
argument_list|,
name|this
operator|.
name|scanInfo
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Should be four results of column 1 (though there are 5 rows in the CELL_GRID -- the
comment|// TWO_POINT_TWO row does not have a a column ONE.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|results
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|ONE
argument_list|,
literal|0
argument_list|,
name|ONE
operator|.
name|length
argument_list|,
name|cell
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getQualifierLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Optimize should do some optimizations"
argument_list|,
name|scanner
operator|.
name|optimization
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure the optimize Scan method in StoreScanner does not get in the way of a Get doing minimum    * work... seeking to start of block and then SKIPPING until we find the wanted Cell.    * This 'simple' scenario mimics case of all Cells fitting inside a single HFileBlock.    * See HBASE-15392. This test is a little cryptic. Takes a bit of staring to figure what it up to.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeAndGet
parameter_list|()
throws|throws
name|IOException
block|{
comment|// First test a Get of two columns in the row R2. Every Get is a Scan. Get columns named
comment|// R2 and R3.
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|TWO
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|TWO
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|THREE
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
try|try
init|(
name|CellGridStoreScanner
name|scanner
init|=
operator|new
name|CellGridStoreScanner
argument_list|(
name|scan
argument_list|,
name|this
operator|.
name|scanInfo
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// For a Get there should be no more next's after the first call.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should be one result only.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// And we should have gone through optimize twice only.
name|assertEquals
argument_list|(
literal|"First qcode is SEEK_NEXT_COL and second INCLUDE_AND_SEEK_NEXT_ROW"
argument_list|,
literal|3
argument_list|,
name|scanner
operator|.
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure that optimize does not cause the Get to do more seeking than required. Optimize    * (see HBASE-15392) was causing us to seek all Cells in a block when a Get Scan if the next block    * index/start key was a different row to the current one. A bug. We'd call next too often    * because we had to exhaust all Cells in the current row making us load the next block just to    * discard what we read there. This test is a little cryptic. Takes a bit of staring to figure    * what it up to.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testOptimizeAndGetWithFakedNextBlockIndexStart
parameter_list|()
throws|throws
name|IOException
block|{
comment|// First test a Get of second column in the row R2. Every Get is a Scan. Second column has a
comment|// qualifier of R2.
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|THREE
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|TWO
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|get
argument_list|)
decl_stmt|;
try|try
init|(
name|CellGridStoreScanner
name|scanner
init|=
operator|new
name|CellGridStoreScanner
argument_list|(
name|scan
argument_list|,
name|this
operator|.
name|scanInfo
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// For a Get there should be no more next's after the first call.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should be one result only.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// And we should have gone through optimize twice only.
name|assertEquals
argument_list|(
literal|"First qcode is SEEK_NEXT_COL and second INCLUDE_AND_SEEK_NEXT_ROW"
argument_list|,
literal|2
argument_list|,
name|scanner
operator|.
name|count
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanTimeRange
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|r1
init|=
literal|"R1"
decl_stmt|;
comment|// returns only 1 of these 2 even though same timestamp
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
name|r1
argument_list|,
name|CF_STR
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
name|r1
argument_list|,
name|CF_STR
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
name|r1
argument_list|,
name|CF_STR
argument_list|,
literal|"a"
argument_list|,
literal|3
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
name|r1
argument_list|,
name|CF_STR
argument_list|,
literal|"a"
argument_list|,
literal|4
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
name|r1
argument_list|,
name|CF_STR
argument_list|,
literal|"a"
argument_list|,
literal|5
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,     }
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|Arrays
operator|.
expr|<
name|KeyValueScanner
operator|>
name|asList
argument_list|(
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
name|kvs
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|r1
argument_list|)
argument_list|)
decl_stmt|;
name|scanSpec
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scanSpec
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|results
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
name|kvs
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Scan limited TimeRange
name|scanSpec
operator|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|scanSpec
operator|.
name|setTimeRange
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scanSpec
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|results
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Another range.
name|scanSpec
operator|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|scanSpec
operator|.
name|setTimeRange
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|scanSpec
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|results
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// See how TimeRange and Versions interact.
comment|// Another range.
name|scanSpec
operator|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|scanSpec
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|scanSpec
operator|.
name|readVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|results
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanSameTimestamp
parameter_list|()
throws|throws
name|IOException
block|{
comment|// returns only 1 of these 2 even though same timestamp
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,     }
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|KeyValueScanner
index|[]
block|{
operator|new
name|KeyValueScanFixture
argument_list|(
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
name|kvs
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// this only uses maxVersions (default=1) and TimeRange (default=all)
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test test shows exactly how the matcher's return codes confuses the StoreScanner    * and prevent it from doing the right thing.  Seeking once, then nexting twice    * should return R1, then R2, but in this case it doesnt.    * TODO this comment makes no sense above. Appears to do the right thing.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testWontNextToNext
parameter_list|()
throws|throws
name|IOException
block|{
comment|// build the scan file:
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// this only uses maxVersions (default=1) and TimeRange (default=all)
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// should be ok...
comment|// now scan _next_ again.
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteVersionSameTimestamp
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,     }
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test the case where there is a delete row 'in front of' the next row, the scanner    * will move to the next row.    */
annotation|@
name|Test
specifier|public
name|void
name|testDeletedRowThenGoodRow
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|20
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteVersionMaskingMultiplePuts
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|kvs1
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|KeyValue
index|[]
name|kvs2
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|500
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs1
argument_list|,
name|kvs2
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// the two put at ts=now will be masked by the 1 delete, and
comment|// since the scan default returns 1 version we'll return the newest
comment|// key, which is kvs[2], now-100.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs2
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteVersionsMixedAndMultipleVersionReturn
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|kvs1
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|KeyValue
index|[]
name|kvs2
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|500
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|+
literal|500
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"z"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs1
argument_list|,
name|kvs2
argument_list|)
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
operator|.
name|readVersions
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs2
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs2
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildCardOneVersionScan
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,     }
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
argument_list|,
name|scanInfo
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWildCardScannerUnderDeletes
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// inc
comment|// orphaned delete column.
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// column b
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// inc
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// inc
comment|// column c
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// no
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|9
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// inc
comment|// column d
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// inc
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|9
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// no
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|8
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// no
block|}
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|readVersions
argument_list|(
literal|2
argument_list|)
argument_list|,
name|scanInfo
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|6
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|7
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteFamily
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"e"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"e"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"f"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"g"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"g"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"h"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"i"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,     }
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|readAllVersions
argument_list|()
argument_list|,
name|scanInfo
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
name|kvs
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteColumn
parameter_list|()
throws|throws
name|IOException
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|9
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|8
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|5
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|,
name|scanInfo
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"e"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"f"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"g"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"h"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"i"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,     }
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSkipColumn
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
name|kvs
operator|.
name|length
operator|-
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scan
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Test expiration of KeyValues in combination with a configured TTL for    * a column family (as should be triggered in a major compaction).    */
annotation|@
name|Test
specifier|public
name|void
name|testWildCardTtlScan
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|1000
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
name|now
operator|-
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
name|now
operator|-
literal|200
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
name|now
operator|-
literal|10000
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
name|now
operator|-
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
name|now
operator|-
literal|200
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
name|now
operator|-
literal|1000
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|}
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|readVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|CONF
argument_list|,
name|CF
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scanner
init|=
operator|new
name|StoreScanner
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|4
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|5
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|6
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScannerReseekDoesntNPE
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
comment|// Previously a updateReaders twice in a row would cause an NPE. In test this would also
comment|// normally cause an NPE because scan.store is null. So as long as we get through these
comment|// two calls we are good and the bug was quashed.
name|scan
operator|.
name|updateReaders
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|updateReaders
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|.
name|peek
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"this fails, since we don't handle deletions, etc, in peek"
argument_list|)
specifier|public
name|void
name|testPeek
parameter_list|()
throws|throws
name|Exception
block|{
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
block|,     }
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Scan
name|scanSpec
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scan
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanSpec
argument_list|,
name|scanInfo
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|assertNull
argument_list|(
name|scan
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Ensure that expired delete family markers don't override valid puts    */
annotation|@
name|Test
specifier|public
name|void
name|testExpiredDeleteFamily
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|now
operator|-
literal|1000
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,     }
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|readVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// scanner with ttl equal to 500
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|CONF
argument_list|,
name|CF
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scanner
init|=
operator|new
name|StoreScanner
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
literal|null
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteMarkerLongevity
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|EnvironmentEdgeManagerTestHelper
operator|.
name|injectEdge
argument_list|(
operator|new
name|EnvironmentEdge
argument_list|()
block|{
specifier|public
name|long
name|currentTime
parameter_list|()
block|{
return|return
name|now
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
comment|/*0*/
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|now
operator|-
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|)
block|,
comment|// live
comment|/*1*/
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|now
operator|-
literal|1000
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|)
block|,
comment|// expired
comment|/*2*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|50
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"v3"
argument_list|)
block|,
comment|// live
comment|/*3*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|55
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dontcare"
argument_list|)
block|,
comment|// live
comment|/*4*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|55
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"deleted-version v2"
argument_list|)
block|,
comment|// deleted
comment|/*5*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|60
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"v1"
argument_list|)
block|,
comment|// live
comment|/*6*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|65
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"v0"
argument_list|)
block|,
comment|// max-version reached
comment|/*7*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|// max-version
comment|/*8*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
name|now
operator|-
literal|600
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
block|,
comment|//expired
comment|/*9*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
name|now
operator|-
literal|70
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"v2"
argument_list|)
block|,
comment|//live
comment|/*10*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
name|now
operator|-
literal|750
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"v1"
argument_list|)
block|,
comment|//expired
comment|/*11*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
name|now
operator|-
literal|500
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dontcare"
argument_list|)
block|,
comment|//expired
comment|/*12*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
name|now
operator|-
literal|600
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"v1"
argument_list|)
block|,
comment|//expired
comment|/*13*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
name|now
operator|-
literal|1000
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dontcare"
argument_list|)
block|,
comment|//expired
comment|/*14*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
name|now
operator|-
literal|60
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"expired put"
argument_list|)
block|,
comment|//live
comment|/*15*/
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
name|now
operator|-
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"not-expired delete"
argument_list|)
block|,
comment|//live
block|}
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|CONF
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
literal|0
comment|/* minVersions */
argument_list|,
literal|2
comment|/* maxVersions */
argument_list|,
literal|500
comment|/* ttl */
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
comment|/* keepDeletedCells */
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
comment|/* block size */
argument_list|,
literal|200
argument_list|,
comment|/* timeToPurgeDeletes */
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|scanner
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanInfo
argument_list|,
name|OptionalInt
operator|.
name|of
argument_list|(
literal|2
argument_list|)
argument_list|,
name|ScanType
operator|.
name|COMPACT_DROP_DELETES
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|results
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|5
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|9
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|14
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|kvs
index|[
literal|15
index|]
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|EnvironmentEdgeManagerTestHelper
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreadNotEnabledForCompactionStoreScanners
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"R1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|now
operator|-
literal|1000
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
name|now
operator|-
literal|10
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|, }
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|scanFixture
argument_list|(
name|kvs
argument_list|)
decl_stmt|;
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|CONF
argument_list|,
name|CF
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
name|StoreScanner
name|storeScanner
init|=
operator|new
name|StoreScanner
argument_list|(
name|scanInfo
argument_list|,
name|OptionalInt
operator|.
name|empty
argument_list|()
argument_list|,
name|ScanType
operator|.
name|COMPACT_RETAIN_DELETES
argument_list|,
name|scanners
argument_list|)
init|)
block|{
name|assertFalse
argument_list|(
name|storeScanner
operator|.
name|isScanUsePread
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

