begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
operator|.
name|toGroupEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AccessControlProtos
operator|.
name|AccessControlService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
operator|.
name|Permission
operator|.
name|Action
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingRpcChannel
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestNamespaceCommands
extends|extends
name|SecureTestUtil
block|{
specifier|private
specifier|static
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestNamespaceCommands
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|TEST_NAMESPACE
init|=
literal|"ns1"
decl_stmt|;
specifier|private
specifier|static
name|String
name|TEST_NAMESPACE2
init|=
literal|"ns2"
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|MasterCoprocessorEnvironment
name|CP_ENV
decl_stmt|;
specifier|private
specifier|static
name|AccessController
name|ACCESS_CONTROLLER
decl_stmt|;
comment|// user with all permissions
specifier|private
specifier|static
name|User
name|SUPERUSER
decl_stmt|;
comment|// user with A permission on global
specifier|private
specifier|static
name|User
name|USER_GLOBAL_ADMIN
decl_stmt|;
comment|// user with C permission on global
specifier|private
specifier|static
name|User
name|USER_GLOBAL_CREATE
decl_stmt|;
comment|// user with W permission on global
specifier|private
specifier|static
name|User
name|USER_GLOBAL_WRITE
decl_stmt|;
comment|// user with R permission on global
specifier|private
specifier|static
name|User
name|USER_GLOBAL_READ
decl_stmt|;
comment|// user with X permission on global
specifier|private
specifier|static
name|User
name|USER_GLOBAL_EXEC
decl_stmt|;
comment|// user with A permission on namespace
specifier|private
specifier|static
name|User
name|USER_NS_ADMIN
decl_stmt|;
comment|// user with C permission on namespace
specifier|private
specifier|static
name|User
name|USER_NS_CREATE
decl_stmt|;
comment|// user with W permission on namespace
specifier|private
specifier|static
name|User
name|USER_NS_WRITE
decl_stmt|;
comment|// user with R permission on namespace.
specifier|private
specifier|static
name|User
name|USER_NS_READ
decl_stmt|;
comment|// user with X permission on namespace.
specifier|private
specifier|static
name|User
name|USER_NS_EXEC
decl_stmt|;
comment|// user with rw permissions
specifier|private
specifier|static
name|User
name|USER_TABLE_WRITE
decl_stmt|;
comment|// TODO: WE DO NOT GIVE ANY PERMS TO THIS USER
comment|//user with create table permissions alone
specifier|private
specifier|static
name|User
name|USER_TABLE_CREATE
decl_stmt|;
comment|// TODO: WE DO NOT GIVE ANY PERMS TO THIS USER
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_ADMIN
init|=
literal|"group_admin"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_NS_ADMIN
init|=
literal|"group_ns_admin"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_CREATE
init|=
literal|"group_create"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_READ
init|=
literal|"group_read"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_WRITE
init|=
literal|"group_write"
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER_GROUP_ADMIN
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER_GROUP_NS_ADMIN
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER_GROUP_CREATE
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER_GROUP_READ
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER_GROUP_WRITE
decl_stmt|;
specifier|private
specifier|static
name|String
name|TEST_TABLE
init|=
name|TEST_NAMESPACE
operator|+
literal|":testtable"
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|enableSecurity
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|SUPERUSER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"admin"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
expr_stmt|;
comment|// Users with global permissions
name|USER_GLOBAL_ADMIN
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"global_admin"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_GLOBAL_CREATE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"global_create"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_GLOBAL_WRITE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"global_write"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_GLOBAL_READ
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"global_read"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_GLOBAL_EXEC
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"global_exec"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_NS_ADMIN
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"namespace_admin"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_NS_CREATE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"namespace_create"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_NS_WRITE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"namespace_write"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_NS_READ
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"namespace_read"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_NS_EXEC
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"namespace_exec"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_TABLE_CREATE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"table_create"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_TABLE_WRITE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"table_write"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_GROUP_ADMIN
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_group_admin"
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP_ADMIN
block|}
argument_list|)
expr_stmt|;
name|USER_GROUP_NS_ADMIN
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_group_ns_admin"
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP_NS_ADMIN
block|}
argument_list|)
expr_stmt|;
name|USER_GROUP_CREATE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_group_create"
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP_CREATE
block|}
argument_list|)
expr_stmt|;
name|USER_GROUP_READ
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_group_read"
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP_READ
block|}
argument_list|)
expr_stmt|;
name|USER_GROUP_WRITE
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_group_write"
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP_WRITE
block|}
argument_list|)
expr_stmt|;
comment|// TODO: other table perms
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
comment|// Wait for the ACL table to become available
name|UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
operator|.
name|getName
argument_list|()
argument_list|,
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Find the Access Controller CP. Could be on master or if master is not serving regions, is
comment|// on an arbitrary server.
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|rst
range|:
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
control|)
block|{
name|ACCESS_CONTROLLER
operator|=
name|rst
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getRegionServerCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|AccessController
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|ACCESS_CONTROLLER
operator|!=
literal|null
condition|)
break|break;
block|}
if|if
condition|(
name|ACCESS_CONTROLLER
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|TEST_NAMESPACE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|TEST_NAMESPACE2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// grants on global
name|grantGlobal
argument_list|(
name|UTIL
argument_list|,
name|USER_GLOBAL_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|grantGlobal
argument_list|(
name|UTIL
argument_list|,
name|USER_GLOBAL_CREATE
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|grantGlobal
argument_list|(
name|UTIL
argument_list|,
name|USER_GLOBAL_WRITE
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|grantGlobal
argument_list|(
name|UTIL
argument_list|,
name|USER_GLOBAL_READ
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grantGlobal
argument_list|(
name|UTIL
argument_list|,
name|USER_GLOBAL_EXEC
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|EXEC
argument_list|)
expr_stmt|;
comment|// grants on namespace
name|grantOnNamespace
argument_list|(
name|UTIL
argument_list|,
name|USER_NS_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|grantOnNamespace
argument_list|(
name|UTIL
argument_list|,
name|USER_NS_CREATE
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|grantOnNamespace
argument_list|(
name|UTIL
argument_list|,
name|USER_NS_WRITE
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|grantOnNamespace
argument_list|(
name|UTIL
argument_list|,
name|USER_NS_READ
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grantOnNamespace
argument_list|(
name|UTIL
argument_list|,
name|USER_NS_EXEC
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|EXEC
argument_list|)
expr_stmt|;
name|grantOnNamespace
argument_list|(
name|UTIL
argument_list|,
name|toGroupEntry
argument_list|(
name|GROUP_NS_ADMIN
argument_list|)
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|grantOnNamespace
argument_list|(
name|UTIL
argument_list|,
name|USER_NS_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_NAMESPACE2
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|grantGlobal
argument_list|(
name|UTIL
argument_list|,
name|toGroupEntry
argument_list|(
name|GROUP_ADMIN
argument_list|)
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|grantGlobal
argument_list|(
name|UTIL
argument_list|,
name|toGroupEntry
argument_list|(
name|GROUP_CREATE
argument_list|)
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
expr_stmt|;
name|grantGlobal
argument_list|(
name|UTIL
argument_list|,
name|toGroupEntry
argument_list|(
name|GROUP_READ
argument_list|)
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|grantGlobal
argument_list|(
name|UTIL
argument_list|,
name|toGroupEntry
argument_list|(
name|GROUP_WRITE
argument_list|)
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|deleteNamespace
argument_list|(
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|deleteNamespace
argument_list|(
name|TEST_NAMESPACE2
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAclTableEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|userTestNamespace
init|=
literal|"userTestNsp"
decl_stmt|;
name|Table
name|acl
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|AccessControlLists
operator|.
name|getNamespacePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_NAMESPACE
argument_list|)
decl_stmt|;
name|perms
operator|=
name|AccessControlLists
operator|.
name|getNamespacePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|entry
range|:
name|perms
operator|.
name|entries
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|perms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Grant and check state in ACL table
name|grantOnNamespace
argument_list|(
name|UTIL
argument_list|,
name|userTestNamespace
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|acl
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|userTestNamespace
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|perms
operator|=
name|AccessControlLists
operator|.
name|getNamespacePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|perms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TablePermission
argument_list|>
name|namespacePerms
init|=
name|perms
operator|.
name|get
argument_list|(
name|userTestNamespace
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|perms
operator|.
name|containsKey
argument_list|(
name|userTestNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namespacePerms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_NAMESPACE
argument_list|,
name|namespacePerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|namespacePerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|namespacePerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namespacePerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|namespacePerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getActions
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Revoke and check state in ACL table
name|revokeFromNamespace
argument_list|(
name|UTIL
argument_list|,
name|userTestNamespace
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|perms
operator|=
name|AccessControlLists
operator|.
name|getNamespacePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|perms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|modifyNamespace
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preModifyNamespace
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|TEST_NAMESPACE
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"abc"
argument_list|,
literal|"156"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// modifyNamespace: superuser | global(A) | NS(A)
name|verifyAllowed
argument_list|(
name|modifyNamespace
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_GROUP_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|modifyNamespace
argument_list|,
name|USER_GLOBAL_CREATE
argument_list|,
name|USER_GLOBAL_WRITE
argument_list|,
name|USER_GLOBAL_READ
argument_list|,
name|USER_GLOBAL_EXEC
argument_list|,
name|USER_NS_ADMIN
argument_list|,
name|USER_NS_CREATE
argument_list|,
name|USER_NS_WRITE
argument_list|,
name|USER_NS_READ
argument_list|,
name|USER_NS_EXEC
argument_list|,
name|USER_GROUP_READ
argument_list|,
name|USER_GROUP_WRITE
argument_list|,
name|USER_GROUP_CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateAndDeleteNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|createNamespace
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preCreateNamespace
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|TEST_NAMESPACE2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|deleteNamespace
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preDeleteNamespace
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_NAMESPACE2
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// createNamespace: superuser | global(A)
name|verifyAllowed
argument_list|(
name|createNamespace
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_GROUP_ADMIN
argument_list|)
expr_stmt|;
comment|// all others should be denied
name|verifyDenied
argument_list|(
name|createNamespace
argument_list|,
name|USER_GLOBAL_CREATE
argument_list|,
name|USER_GLOBAL_WRITE
argument_list|,
name|USER_GLOBAL_READ
argument_list|,
name|USER_GLOBAL_EXEC
argument_list|,
name|USER_NS_ADMIN
argument_list|,
name|USER_NS_CREATE
argument_list|,
name|USER_NS_WRITE
argument_list|,
name|USER_NS_READ
argument_list|,
name|USER_NS_EXEC
argument_list|,
name|USER_TABLE_CREATE
argument_list|,
name|USER_TABLE_WRITE
argument_list|,
name|USER_GROUP_READ
argument_list|,
name|USER_GROUP_WRITE
argument_list|,
name|USER_GROUP_CREATE
argument_list|)
expr_stmt|;
comment|// deleteNamespace: superuser | global(A) | NS(A)
name|verifyAllowed
argument_list|(
name|deleteNamespace
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_GROUP_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|deleteNamespace
argument_list|,
name|USER_GLOBAL_CREATE
argument_list|,
name|USER_GLOBAL_WRITE
argument_list|,
name|USER_GLOBAL_READ
argument_list|,
name|USER_GLOBAL_EXEC
argument_list|,
name|USER_NS_ADMIN
argument_list|,
name|USER_NS_CREATE
argument_list|,
name|USER_NS_WRITE
argument_list|,
name|USER_NS_READ
argument_list|,
name|USER_NS_EXEC
argument_list|,
name|USER_TABLE_CREATE
argument_list|,
name|USER_TABLE_WRITE
argument_list|,
name|USER_GROUP_READ
argument_list|,
name|USER_GROUP_WRITE
argument_list|,
name|USER_GROUP_CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamespaceDescriptor
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|getNamespaceAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ACCESS_CONTROLLER
operator|.
name|preGetNamespaceDescriptor
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|TEST_NAMESPACE
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// getNamespaceDescriptor : superuser | global(A) | NS(A)
name|verifyAllowed
argument_list|(
name|getNamespaceAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_NS_ADMIN
argument_list|,
name|USER_GROUP_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|getNamespaceAction
argument_list|,
name|USER_GLOBAL_CREATE
argument_list|,
name|USER_GLOBAL_WRITE
argument_list|,
name|USER_GLOBAL_READ
argument_list|,
name|USER_GLOBAL_EXEC
argument_list|,
name|USER_NS_CREATE
argument_list|,
name|USER_NS_WRITE
argument_list|,
name|USER_NS_READ
argument_list|,
name|USER_NS_EXEC
argument_list|,
name|USER_TABLE_CREATE
argument_list|,
name|USER_TABLE_WRITE
argument_list|,
name|USER_GROUP_READ
argument_list|,
name|USER_GROUP_WRITE
argument_list|,
name|USER_GROUP_CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListNamespaces
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|listAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|unmanagedConnection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|unmanagedConnection
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|unmanagedConnection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
comment|// listNamespaces         : All access*
comment|// * Returned list will only show what you can call getNamespaceDescriptor()
name|verifyAllowed
argument_list|(
name|listAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_NS_ADMIN
argument_list|,
name|USER_GROUP_ADMIN
argument_list|)
expr_stmt|;
comment|// we have 3 namespaces: [default, hbase, TEST_NAMESPACE, TEST_NAMESPACE2]
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|List
operator|)
name|SUPERUSER
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_GLOBAL_ADMIN
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_GROUP_ADMIN
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_NS_ADMIN
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_GLOBAL_CREATE
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_GLOBAL_WRITE
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_GLOBAL_READ
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_GLOBAL_EXEC
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_NS_CREATE
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_NS_WRITE
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_NS_READ
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_NS_EXEC
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_TABLE_CREATE
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_TABLE_WRITE
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_GROUP_CREATE
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_GROUP_READ
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|List
operator|)
name|USER_GROUP_WRITE
operator|.
name|runAs
argument_list|(
name|listAction
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGrantRevoke
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|testUser
init|=
literal|"testUser"
decl_stmt|;
comment|// Test if client API actions are authorized
name|AccessTestAction
name|grantAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|acl
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|AccessControlUtil
operator|.
name|grant
argument_list|(
literal|null
argument_list|,
name|protocol
argument_list|,
name|testUser
argument_list|,
name|TEST_NAMESPACE
argument_list|,
literal|false
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|grantNamespaceAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|acl
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|AccessControlUtil
operator|.
name|grant
argument_list|(
literal|null
argument_list|,
name|protocol
argument_list|,
name|USER_GROUP_NS_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_NAMESPACE
argument_list|,
literal|false
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|revokeAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|acl
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|AccessControlUtil
operator|.
name|revoke
argument_list|(
literal|null
argument_list|,
name|protocol
argument_list|,
name|testUser
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|revokeNamespaceAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|acl
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|AccessControlUtil
operator|.
name|revoke
argument_list|(
literal|null
argument_list|,
name|protocol
argument_list|,
name|USER_GROUP_NS_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_NAMESPACE
argument_list|,
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|AccessTestAction
name|getPermissionsAction
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Table
name|acl
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
name|BlockingRpcChannel
name|service
init|=
name|acl
operator|.
name|coprocessorService
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|AccessControlService
operator|.
name|BlockingInterface
name|protocol
init|=
name|AccessControlService
operator|.
name|newBlockingStub
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|AccessControlUtil
operator|.
name|getUserPermissions
argument_list|(
literal|null
argument_list|,
name|protocol
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TEST_NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|acl
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|grantAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_GROUP_ADMIN
argument_list|,
name|USER_NS_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|grantAction
argument_list|,
name|USER_GLOBAL_CREATE
argument_list|,
name|USER_GLOBAL_WRITE
argument_list|,
name|USER_GLOBAL_READ
argument_list|,
name|USER_GLOBAL_EXEC
argument_list|,
name|USER_NS_CREATE
argument_list|,
name|USER_NS_WRITE
argument_list|,
name|USER_NS_READ
argument_list|,
name|USER_NS_EXEC
argument_list|,
name|USER_TABLE_CREATE
argument_list|,
name|USER_TABLE_WRITE
argument_list|,
name|USER_GROUP_READ
argument_list|,
name|USER_GROUP_WRITE
argument_list|,
name|USER_GROUP_CREATE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|grantNamespaceAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_GROUP_ADMIN
argument_list|,
name|USER_NS_ADMIN
argument_list|,
name|USER_GROUP_NS_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|grantNamespaceAction
argument_list|,
name|USER_GLOBAL_CREATE
argument_list|,
name|USER_GLOBAL_WRITE
argument_list|,
name|USER_GLOBAL_READ
argument_list|,
name|USER_GLOBAL_EXEC
argument_list|,
name|USER_NS_CREATE
argument_list|,
name|USER_NS_WRITE
argument_list|,
name|USER_NS_READ
argument_list|,
name|USER_NS_EXEC
argument_list|,
name|USER_TABLE_CREATE
argument_list|,
name|USER_TABLE_WRITE
argument_list|,
name|USER_GROUP_READ
argument_list|,
name|USER_GROUP_WRITE
argument_list|,
name|USER_GROUP_CREATE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|revokeAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_GROUP_ADMIN
argument_list|,
name|USER_NS_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|revokeAction
argument_list|,
name|USER_GLOBAL_CREATE
argument_list|,
name|USER_GLOBAL_WRITE
argument_list|,
name|USER_GLOBAL_READ
argument_list|,
name|USER_GLOBAL_EXEC
argument_list|,
name|USER_NS_CREATE
argument_list|,
name|USER_NS_WRITE
argument_list|,
name|USER_NS_READ
argument_list|,
name|USER_NS_EXEC
argument_list|,
name|USER_TABLE_CREATE
argument_list|,
name|USER_TABLE_WRITE
argument_list|,
name|USER_GROUP_READ
argument_list|,
name|USER_GROUP_WRITE
argument_list|,
name|USER_GROUP_CREATE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|revokeNamespaceAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_GROUP_ADMIN
argument_list|,
name|USER_NS_ADMIN
argument_list|,
name|USER_GROUP_NS_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|revokeNamespaceAction
argument_list|,
name|USER_GLOBAL_CREATE
argument_list|,
name|USER_GLOBAL_WRITE
argument_list|,
name|USER_GLOBAL_READ
argument_list|,
name|USER_GLOBAL_EXEC
argument_list|,
name|USER_NS_CREATE
argument_list|,
name|USER_NS_WRITE
argument_list|,
name|USER_NS_READ
argument_list|,
name|USER_NS_EXEC
argument_list|,
name|USER_TABLE_CREATE
argument_list|,
name|USER_TABLE_WRITE
argument_list|,
name|USER_GROUP_READ
argument_list|,
name|USER_GROUP_WRITE
argument_list|,
name|USER_GROUP_CREATE
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|getPermissionsAction
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_NS_ADMIN
argument_list|,
name|USER_GROUP_ADMIN
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|getPermissionsAction
argument_list|,
name|USER_GLOBAL_CREATE
argument_list|,
name|USER_GLOBAL_WRITE
argument_list|,
name|USER_GLOBAL_READ
argument_list|,
name|USER_GLOBAL_EXEC
argument_list|,
name|USER_NS_CREATE
argument_list|,
name|USER_NS_WRITE
argument_list|,
name|USER_NS_READ
argument_list|,
name|USER_NS_EXEC
argument_list|,
name|USER_TABLE_CREATE
argument_list|,
name|USER_TABLE_WRITE
argument_list|,
name|USER_GROUP_READ
argument_list|,
name|USER_GROUP_WRITE
argument_list|,
name|USER_GROUP_CREATE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessTestAction
name|createTable
init|=
operator|new
name|AccessTestAction
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TEST_TABLE
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|ACCESS_CONTROLLER
operator|.
name|preCreateTable
argument_list|(
name|ObserverContext
operator|.
name|createAndPrepare
argument_list|(
name|CP_ENV
argument_list|,
literal|null
argument_list|)
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|//createTable            : superuser | global(C) | NS(C)
name|verifyAllowed
argument_list|(
name|createTable
argument_list|,
name|SUPERUSER
argument_list|,
name|USER_GLOBAL_CREATE
argument_list|,
name|USER_NS_CREATE
argument_list|,
name|USER_GROUP_CREATE
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|createTable
argument_list|,
name|USER_GLOBAL_ADMIN
argument_list|,
name|USER_GLOBAL_WRITE
argument_list|,
name|USER_GLOBAL_READ
argument_list|,
name|USER_GLOBAL_EXEC
argument_list|,
name|USER_NS_ADMIN
argument_list|,
name|USER_NS_WRITE
argument_list|,
name|USER_NS_READ
argument_list|,
name|USER_NS_EXEC
argument_list|,
name|USER_TABLE_CREATE
argument_list|,
name|USER_TABLE_WRITE
argument_list|,
name|USER_GROUP_READ
argument_list|,
name|USER_GROUP_WRITE
argument_list|,
name|USER_GROUP_ADMIN
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

