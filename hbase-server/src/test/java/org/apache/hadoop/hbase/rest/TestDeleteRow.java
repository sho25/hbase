begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestDeleteRow
extends|extends
name|RowResourceBase
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDeleteNonExistentColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|Response
name|response
init|=
name|putValueJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndDeleteJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|304
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|getValueJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndDeleteJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_2
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|304
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|getValueJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndDeleteJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
literal|"dummy"
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|getValueJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndDeleteJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
literal|"dummy:test"
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|404
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|getValueJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndDeleteJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
literal|"a:test"
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|304
argument_list|,
name|response
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|200
argument_list|,
name|getValueJson
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteXML
parameter_list|()
throws|throws
name|IOException
throws|,
name|JAXBException
block|{
name|Response
name|response
init|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteValue
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|getValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
name|checkValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|,
name|VALUE_2
argument_list|)
expr_stmt|;
name|response
operator|=
name|putValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|checkAndDeletePB
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|,
name|VALUE_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|getValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
name|response
operator|=
name|deleteRow
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|response
operator|=
name|getValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
name|response
operator|=
name|getValueXML
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|//Delete a row in non existent table
name|response
operator|=
name|deleteValue
argument_list|(
literal|"dummy"
argument_list|,
name|ROW_1
argument_list|,
name|COLUMN_1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
comment|//Delete non existent column
name|response
operator|=
name|deleteValue
argument_list|(
name|TABLE
argument_list|,
name|ROW_1
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|404
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

