begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|region
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|startsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|mutable
operator|.
name|MutableLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ChoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|AssignProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|cleaner
operator|.
name|DirScanPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|LoadCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|LeaseRecovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
operator|.
name|ProcedureIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|ProcedureStore
operator|.
name|ProcedureLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|wal
operator|.
name|WALProcedureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MemStoreLAB
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|CommonFSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionProcedureStoreMigration
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionProcedureStoreMigration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HBaseCommonTestingUtility
name|htu
decl_stmt|;
specifier|private
name|RegionProcedureStore
name|store
decl_stmt|;
specifier|private
name|WALProcedureStore
name|walStore
decl_stmt|;
specifier|private
name|ChoreService
name|choreService
decl_stmt|;
specifier|private
name|DirScanPool
name|cleanerPool
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|htu
operator|=
operator|new
name|HBaseCommonTestingUtility
argument_list|()
expr_stmt|;
name|Configuration
name|conf
init|=
name|htu
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|MemStoreLAB
operator|.
name|USEMSLAB_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Runs on local filesystem. Test does not need sync. Turn off checks.
name|htu
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|CommonFSUtils
operator|.
name|UNSAFE_STREAM_CAPABILITY_ENFORCE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Path
name|testDir
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|CommonFSUtils
operator|.
name|setWALRootDir
argument_list|(
name|conf
argument_list|,
name|testDir
argument_list|)
expr_stmt|;
name|walStore
operator|=
operator|new
name|WALProcedureStore
argument_list|(
name|conf
argument_list|,
operator|new
name|LeaseRecovery
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|recoverFileLease
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{       }
block|}
argument_list|)
expr_stmt|;
name|walStore
operator|.
name|start
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|walStore
operator|.
name|recoverLease
argument_list|()
expr_stmt|;
name|walStore
operator|.
name|load
argument_list|(
operator|new
name|LoadCounter
argument_list|()
argument_list|)
expr_stmt|;
name|choreService
operator|=
operator|new
name|ChoreService
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|cleanerPool
operator|=
operator|new
name|DirScanPool
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|stop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|walStore
operator|.
name|stop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cleanerPool
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|choreService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|htu
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|RegionProcedureStoreTestProcedure
argument_list|>
name|procs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|RegionProcedureStoreTestProcedure
name|proc
init|=
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
decl_stmt|;
name|walStore
operator|.
name|insert
argument_list|(
name|proc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|procs
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|walStore
operator|.
name|delete
argument_list|(
name|procs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|walStore
operator|.
name|stop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|RegionProcedureStoreTestProcedure
argument_list|>
name|loadedProcs
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
parameter_list|(
name|p1
parameter_list|,
name|p2
parameter_list|)
lambda|->
name|Long
operator|.
name|compare
argument_list|(
name|p1
operator|.
name|getProcId
argument_list|()
argument_list|,
name|p2
operator|.
name|getProcId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|MutableLong
name|maxProcIdSet
init|=
operator|new
name|MutableLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|store
operator|=
name|RegionProcedureStoreTestHelper
operator|.
name|createStore
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|choreService
argument_list|,
name|cleanerPool
argument_list|,
operator|new
name|ProcedureLoader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setMaxProcId
parameter_list|(
name|long
name|maxProcId
parameter_list|)
block|{
name|maxProcIdSet
operator|.
name|setValue
argument_list|(
name|maxProcId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|RegionProcedureStoreTestProcedure
name|proc
init|=
operator|(
name|RegionProcedureStoreTestProcedure
operator|)
name|procIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|loadedProcs
operator|.
name|add
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleCorrupted
parameter_list|(
name|ProcedureIterator
name|procIter
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|procIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Found corrupted procedures"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|maxProcIdSet
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|loadedProcs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|procId
init|=
literal|1
decl_stmt|;
for|for
control|(
name|RegionProcedureStoreTestProcedure
name|proc
range|:
name|loadedProcs
control|)
block|{
name|assertEquals
argument_list|(
name|procId
argument_list|,
name|proc
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procId
operator|++
expr_stmt|;
block|}
name|Path
name|testDir
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|testDir
operator|.
name|getFileSystem
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|oldProcWALDir
init|=
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|WALProcedureStore
operator|.
name|MASTER_PROCEDURE_LOGDIR
argument_list|)
decl_stmt|;
comment|// make sure the old proc wal directory has been deleted.
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|oldProcWALDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMigrateWithUnsupportedProcedures
parameter_list|()
throws|throws
name|IOException
block|{
name|AssignProcedure
name|assignProc
init|=
operator|new
name|AssignProcedure
argument_list|()
decl_stmt|;
name|assignProc
operator|.
name|setProcId
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|assignProc
operator|.
name|setRegionInfo
argument_list|(
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|walStore
operator|.
name|insert
argument_list|(
name|assignProc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|walStore
operator|.
name|stop
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|store
operator|=
name|RegionProcedureStoreTestHelper
operator|.
name|createStore
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|choreService
argument_list|,
name|cleanerPool
argument_list|,
operator|new
name|LoadCounter
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail since AssignProcedure is not supported"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HBaseIOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|startsWith
argument_list|(
literal|"Unsupported"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

