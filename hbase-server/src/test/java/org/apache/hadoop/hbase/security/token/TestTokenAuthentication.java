begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|CommonConfigurationKeysPublic
operator|.
name|HADOOP_SECURITY_AUTHORIZATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ChoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|FifoRpcScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|NettyRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|BlockingServiceAndInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServerInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|ServerRpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|SimpleRpcServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AuthenticationProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|OnlineRegions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|SecurityInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|ServiceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Sleeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Writables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKClusterId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|PolicyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authorize
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|SecretManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|TokenIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Tests for authentication token creation and usage  */
end_comment

begin_comment
comment|// This test does a fancy trick where it uses RpcServer and plugs in the Token Service for RpcServer
end_comment

begin_comment
comment|// to offer up. It worked find pre-hbase-2.0.0 but post the shading project, it fails because
end_comment

begin_comment
comment|// RpcServer is all about shaded protobuf whereas the Token Service is a CPEP which does non-shaded
end_comment

begin_comment
comment|// protobufs. Since hbase-2.0.0, we added convertion from shaded to  non-shaded so this test keeps
end_comment

begin_comment
comment|// working.
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestTokenAuthentication
block|{
static|static
block|{
comment|// Setting whatever system properties after recommendation from
comment|// http://docs.oracle.com/javase/6/docs/technotes/guides/security/jgss/tutorials/KerberosReq.html
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.realm"
argument_list|,
literal|"hbase"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"java.security.krb5.kdc"
argument_list|,
literal|"blah"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTokenAuthentication
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
interface|interface
name|AuthenticationServiceSecurityInfo
block|{}
comment|/**    * Basic server process for RPC authentication testing    */
specifier|private
specifier|static
class|class
name|TokenServer
extends|extends
name|TokenProvider
implements|implements
name|AuthenticationProtos
operator|.
name|AuthenticationService
operator|.
name|BlockingInterface
implements|,
name|Runnable
implements|,
name|Server
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TokenServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|private
name|RpcServerInterface
name|rpcServer
decl_stmt|;
specifier|private
name|InetSocketAddress
name|isa
decl_stmt|;
specifier|private
name|ZooKeeperWatcher
name|zookeeper
decl_stmt|;
specifier|private
name|Sleeper
name|sleeper
decl_stmt|;
specifier|private
name|boolean
name|started
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|stopped
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|startcode
decl_stmt|;
specifier|public
name|TokenServer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HBaseTestingUtility
name|TEST_UTIL
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|TEST_UTIL
operator|=
name|TEST_UTIL
expr_stmt|;
name|this
operator|.
name|startcode
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
comment|// Server to handle client requests.
name|String
name|hostname
init|=
name|Strings
operator|.
name|domainNamePointerToHostName
argument_list|(
name|DNS
operator|.
name|getDefaultHost
argument_list|(
literal|"default"
argument_list|,
literal|"default"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|port
init|=
literal|0
decl_stmt|;
comment|// Creation of an ISA will force a resolve.
name|InetSocketAddress
name|initialIsa
init|=
operator|new
name|InetSocketAddress
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
if|if
condition|(
name|initialIsa
operator|.
name|getAddress
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Failed resolve of "
operator|+
name|initialIsa
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|BlockingServiceAndInterface
argument_list|>
name|sai
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Make a proxy to go between the shaded Service that rpc expects and the
comment|// non-shaded Service this CPEP is providing. This is because this test does a neat
comment|// little trick of testing the CPEP Service by inserting it as RpcServer Service. This
comment|// worked fine before we shaded PB. Now we need these proxies.
specifier|final
name|BlockingService
name|service
init|=
name|AuthenticationProtos
operator|.
name|AuthenticationService
operator|.
name|newReflectiveBlockingService
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|final
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
name|proxy
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|BlockingService
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Message
name|callBlockingMethod
parameter_list|(
name|MethodDescriptor
name|md
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
name|controller
parameter_list|,
name|Message
name|param
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
block|{
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Descriptors
operator|.
name|MethodDescriptor
name|methodDescriptor
init|=
name|service
operator|.
name|getDescriptorForType
argument_list|()
operator|.
name|findMethodByName
argument_list|(
name|md
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|request
init|=
name|service
operator|.
name|getRequestPrototype
argument_list|(
name|methodDescriptor
argument_list|)
decl_stmt|;
comment|// TODO: Convert rpcController
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
name|service
operator|.
name|callBlockingMethod
argument_list|(
name|methodDescriptor
argument_list|,
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
comment|// Convert 'response'.
block|}
annotation|@
name|Override
specifier|public
name|ServiceDescriptor
name|getDescriptorForType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|getRequestPrototype
parameter_list|(
name|MethodDescriptor
name|arg0
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Message
name|getResponsePrototype
parameter_list|(
name|MethodDescriptor
name|arg0
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|sai
operator|.
name|add
argument_list|(
operator|new
name|BlockingServiceAndInterface
argument_list|(
name|proxy
argument_list|,
name|AuthenticationProtos
operator|.
name|AuthenticationService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|=
name|RpcServerFactory
operator|.
name|createRpcServer
argument_list|(
name|this
argument_list|,
literal|"tokenServer"
argument_list|,
name|sai
argument_list|,
name|initialIsa
argument_list|,
name|conf
argument_list|,
operator|new
name|FifoRpcScheduler
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|address
init|=
name|rpcServer
operator|.
name|getListenerAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Listener channel is closed"
argument_list|)
throw|;
block|}
name|this
operator|.
name|isa
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|sleeper
operator|=
operator|new
name|Sleeper
argument_list|(
literal|1000
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterConnection
name|getConnection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaTableLocator
name|getMetaTableLocator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ZooKeeperWatcher
name|getZooKeeper
parameter_list|()
block|{
return|return
name|zookeeper
return|;
block|}
annotation|@
name|Override
specifier|public
name|CoordinatedStateManager
name|getCoordinatedStateManager
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|aborted
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|isa
operator|.
name|getHostName
argument_list|()
argument_list|,
name|isa
operator|.
name|getPort
argument_list|()
argument_list|,
name|startcode
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileSystem
name|getFileSystem
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopping
parameter_list|()
block|{
return|return
name|this
operator|.
name|stopped
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|reason
parameter_list|,
name|Throwable
name|error
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Aborting on: "
operator|+
name|reason
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|this
operator|.
name|aborted
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
name|sleeper
operator|.
name|skipSleepCycle
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
comment|// ZK configuration must _not_ have hbase.security.authentication or it will require SASL auth
name|Configuration
name|zkConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|zkConf
operator|.
name|set
argument_list|(
name|User
operator|.
name|HBASE_SECURITY_CONF_KEY
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|this
operator|.
name|zookeeper
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|zkConf
argument_list|,
name|TokenServer
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|rpcServer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// mock RegionServerServices to provide to coprocessor environment
specifier|final
name|RegionServerServices
name|mockServices
init|=
name|TEST_UTIL
operator|.
name|createMockRegionServerService
argument_list|(
name|rpcServer
argument_list|)
decl_stmt|;
comment|// mock up coprocessor environment
name|super
operator|.
name|start
argument_list|(
operator|new
name|RegionCoprocessorEnvironment
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HRegion
name|getRegion
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|OnlineRegions
name|getOnlineRegions
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getSharedData
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetricRegistry
name|getMetricRegistryForRegionServer
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getVersion
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHBaseVersion
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|RegionCoprocessor
name|getInstance
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLoadSequence
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|HRegionInfo
name|getRegionInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Connection
name|getConnection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|started
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|initialize
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|stopped
condition|)
block|{
name|this
operator|.
name|sleeper
operator|.
name|sleep
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|abort
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rpcServer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStarted
parameter_list|()
block|{
return|return
name|started
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Stopping due to: "
operator|+
name|reason
argument_list|)
expr_stmt|;
name|this
operator|.
name|stopped
operator|=
literal|true
expr_stmt|;
name|sleeper
operator|.
name|skipSleepCycle
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|stopped
return|;
block|}
specifier|public
name|InetSocketAddress
name|getAddress
parameter_list|()
block|{
return|return
name|isa
return|;
block|}
specifier|public
name|SecretManager
argument_list|<
name|?
extends|extends
name|TokenIdentifier
argument_list|>
name|getSecretManager
parameter_list|()
block|{
return|return
operator|(
operator|(
name|RpcServer
operator|)
name|rpcServer
operator|)
operator|.
name|getSecretManager
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AuthenticationProtos
operator|.
name|GetAuthenticationTokenResponse
name|getAuthenticationToken
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AuthenticationProtos
operator|.
name|GetAuthenticationTokenRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Authentication token request from "
operator|+
name|RpcServer
operator|.
name|getRequestUserName
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ignore above passed in controller -- it is always null
name|ServerRpcController
name|serverController
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
specifier|final
name|NonShadedBlockingRpcCallback
argument_list|<
name|AuthenticationProtos
operator|.
name|GetAuthenticationTokenResponse
argument_list|>
name|callback
init|=
operator|new
name|NonShadedBlockingRpcCallback
argument_list|<>
argument_list|()
decl_stmt|;
name|getAuthenticationToken
argument_list|(
operator|(
name|RpcController
operator|)
literal|null
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
expr_stmt|;
try|try
block|{
name|serverController
operator|.
name|checkFailed
argument_list|()
expr_stmt|;
return|return
name|callback
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AuthenticationProtos
operator|.
name|WhoAmIResponse
name|whoAmI
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|AuthenticationProtos
operator|.
name|WhoAmIRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"whoAmI() request from "
operator|+
name|RpcServer
operator|.
name|getRequestUserName
argument_list|()
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Ignore above passed in controller -- it is always null
name|ServerRpcController
name|serverController
init|=
operator|new
name|ServerRpcController
argument_list|()
decl_stmt|;
name|NonShadedBlockingRpcCallback
argument_list|<
name|AuthenticationProtos
operator|.
name|WhoAmIResponse
argument_list|>
name|callback
init|=
operator|new
name|NonShadedBlockingRpcCallback
argument_list|<>
argument_list|()
decl_stmt|;
name|whoAmI
argument_list|(
literal|null
argument_list|,
name|request
argument_list|,
name|callback
argument_list|)
expr_stmt|;
try|try
block|{
name|serverController
operator|.
name|checkFailed
argument_list|()
expr_stmt|;
return|return
name|callback
operator|.
name|get
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ChoreService
name|getChoreService
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterConnection
name|getClusterConnection
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: rpcServerImpl={0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
name|SimpleRpcServer
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|NettyRpcServer
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameter
argument_list|(
literal|0
argument_list|)
specifier|public
name|String
name|rpcServerImpl
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|private
name|TokenServer
name|server
decl_stmt|;
specifier|private
name|Thread
name|serverThread
decl_stmt|;
specifier|private
name|AuthenticationTokenSecretManager
name|secretManager
decl_stmt|;
specifier|private
name|ClusterId
name|clusterId
init|=
operator|new
name|ClusterId
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
comment|// register token type for protocol
name|SecurityInfo
operator|.
name|addInfo
argument_list|(
name|AuthenticationProtos
operator|.
name|AuthenticationService
operator|.
name|getDescriptor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|SecurityInfo
argument_list|(
literal|"hbase.test.kerberos.principal"
argument_list|,
name|AuthenticationProtos
operator|.
name|TokenIdentifier
operator|.
name|Kind
operator|.
name|HBASE_AUTH_TOKEN
argument_list|)
argument_list|)
expr_stmt|;
comment|// security settings only added after startup so that ZK does not require SASL
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.security.authentication"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HADOOP_SECURITY_AUTHORIZATION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|RpcServerFactory
operator|.
name|CUSTOM_RPC_SERVER_IMPL_CONF_KEY
argument_list|,
name|rpcServerImpl
argument_list|)
expr_stmt|;
name|server
operator|=
operator|new
name|TokenServer
argument_list|(
name|conf
argument_list|,
name|TEST_UTIL
argument_list|)
expr_stmt|;
name|serverThread
operator|=
operator|new
name|Thread
argument_list|(
name|server
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|setDaemonThreadRunning
argument_list|(
name|serverThread
argument_list|,
literal|"TokenServer:"
operator|+
name|server
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// wait for startup
while|while
condition|(
operator|!
name|server
operator|.
name|isStarted
argument_list|()
operator|&&
operator|!
name|server
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|rpcServer
operator|.
name|refreshAuthManager
argument_list|(
operator|new
name|PolicyProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Service
index|[]
name|getServices
parameter_list|()
block|{
return|return
operator|new
name|Service
index|[]
block|{
operator|new
name|Service
argument_list|(
literal|"security.client.protocol.acl"
argument_list|,
name|AuthenticationProtos
operator|.
name|AuthenticationService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
block|}
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ZKClusterId
operator|.
name|setClusterId
argument_list|(
name|server
operator|.
name|getZooKeeper
argument_list|()
argument_list|,
name|clusterId
argument_list|)
expr_stmt|;
name|secretManager
operator|=
operator|(
name|AuthenticationTokenSecretManager
operator|)
name|server
operator|.
name|getSecretManager
argument_list|()
expr_stmt|;
while|while
condition|(
name|secretManager
operator|.
name|getCurrentKey
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|stop
argument_list|(
literal|"Test complete"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|shutdown
argument_list|(
name|serverThread
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTokenCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|generateToken
argument_list|(
literal|"testuser"
argument_list|)
decl_stmt|;
name|AuthenticationTokenIdentifier
name|ident
init|=
operator|new
name|AuthenticationTokenIdentifier
argument_list|()
decl_stmt|;
name|Writables
operator|.
name|getWritable
argument_list|(
name|token
operator|.
name|getIdentifier
argument_list|()
argument_list|,
name|ident
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Token username should match"
argument_list|,
literal|"testuser"
argument_list|,
name|ident
operator|.
name|getUsername
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|passwd
init|=
name|secretManager
operator|.
name|retrievePassword
argument_list|(
name|ident
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Token password and password from secret manager should match"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|token
operator|.
name|getPassword
argument_list|()
argument_list|,
name|passwd
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// This won't work any more now RpcServer takes Shaded Service. It depends on RPCServer being able to provide a
comment|// non-shaded service. TODO: FIX. Tried to make RPC generic but then it ripples; have to make Connection generic.
comment|// And Call generic, etc.
comment|//
comment|//  @Test
comment|//  public void testTokenAuthentication() throws Exception {
comment|//    UserGroupInformation testuser =
comment|//        UserGroupInformation.createUserForTesting("testuser", new String[]{"testgroup"});
comment|//    testuser.setAuthenticationMethod(
comment|//        UserGroupInformation.AuthenticationMethod.TOKEN);
comment|//    final Configuration conf = TEST_UTIL.getConfiguration();
comment|//    UserGroupInformation.setConfiguration(conf);
comment|//    Token<AuthenticationTokenIdentifier> token = secretManager.generateToken("testuser");
comment|//    LOG.debug("Got token: " + token.toString());
comment|//    testuser.addToken(token);
comment|//    // Verify the server authenticates us as this token user
comment|//    testuser.doAs(new PrivilegedExceptionAction<Object>() {
comment|//      public Object run() throws Exception {
comment|//        Configuration c = server.getConfiguration();
comment|//        final RpcClient rpcClient = RpcClientFactory.createClient(c, clusterId.toString());
comment|//        ServerName sn =
comment|//            ServerName.valueOf(server.getAddress().getHostName(), server.getAddress().getPort(),
comment|//                System.currentTimeMillis());
comment|//        try {
comment|//          // Make a proxy to go between the shaded RpcController that rpc expects and the
comment|//          // non-shaded controller this CPEP is providing. This is because this test does a neat
comment|//          // little trick of testing the CPEP Service by inserting it as RpcServer Service. This
comment|//          // worked fine before we shaded PB. Now we need these proxies.
comment|//          final org.apache.hadoop.hbase.shaded.com.google.protobuf.BlockingRpcChannel channel =
comment|//              rpcClient.createBlockingRpcChannel(sn, User.getCurrent(), HConstants.DEFAULT_HBASE_RPC_TIMEOUT);
comment|//          AuthenticationProtos.AuthenticationService.BlockingInterface stub =
comment|//              AuthenticationProtos.AuthenticationService.newBlockingStub(channel);
comment|//          AuthenticationProtos.WhoAmIResponse response =
comment|//              stub.whoAmI(null, AuthenticationProtos.WhoAmIRequest.getDefaultInstance());
comment|//          String myname = response.getUsername();
comment|//          assertEquals("testuser", myname);
comment|//          String authMethod = response.getAuthMethod();
comment|//          assertEquals("TOKEN", authMethod);
comment|//        } finally {
comment|//          rpcClient.close();
comment|//        }
comment|//        return null;
comment|//      }
comment|//    });
comment|//  }
annotation|@
name|Test
specifier|public
name|void
name|testUseExistingToken
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"testuser2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"testgroup"
block|}
argument_list|)
decl_stmt|;
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|token
init|=
name|secretManager
operator|.
name|generateToken
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|user
operator|.
name|addToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// make sure we got a token
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|firstToken
init|=
operator|new
name|AuthenticationTokenSelector
argument_list|()
operator|.
name|selectToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|,
name|user
operator|.
name|getTokens
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|firstToken
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
argument_list|,
name|firstToken
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|assertFalse
argument_list|(
name|TokenUtil
operator|.
name|addTokenIfMissing
argument_list|(
name|conn
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure we still have the same token
name|Token
argument_list|<
name|AuthenticationTokenIdentifier
argument_list|>
name|secondToken
init|=
operator|new
name|AuthenticationTokenSelector
argument_list|()
operator|.
name|selectToken
argument_list|(
name|token
operator|.
name|getService
argument_list|()
argument_list|,
name|user
operator|.
name|getTokens
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|firstToken
argument_list|,
name|secondToken
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * A copy of the BlockingRpcCallback class for use locally. Only difference is that it makes    * use of non-shaded protobufs; i.e. refers to com.google.protobuf.* rather than to    * org.apache.hadoop.hbase.shaded.com.google.protobuf.*    */
specifier|private
specifier|static
class|class
name|NonShadedBlockingRpcCallback
parameter_list|<
name|R
parameter_list|>
implements|implements
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
argument_list|<
name|R
argument_list|>
block|{
specifier|private
name|R
name|result
decl_stmt|;
specifier|private
name|boolean
name|resultSet
init|=
literal|false
decl_stmt|;
comment|/**      * Called on completion of the RPC call with the response object, or {@code null} in the case of      * an error.      * @param parameter the response object or {@code null} if an error occurred      */
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|R
name|parameter
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|result
operator|=
name|parameter
expr_stmt|;
name|resultSet
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the parameter passed to {@link #run(Object)} or {@code null} if a null value was      * passed.  When used asynchronously, this method will block until the {@link #run(Object)}      * method has been called.      * @return the response object or {@code null} if no response was passed      */
specifier|public
specifier|synchronized
name|R
name|get
parameter_list|()
throws|throws
name|IOException
block|{
while|while
condition|(
operator|!
name|resultSet
condition|)
block|{
try|try
block|{
name|this
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|InterruptedIOException
name|exception
init|=
operator|new
name|InterruptedIOException
argument_list|(
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|exception
operator|.
name|initCause
argument_list|(
name|ie
argument_list|)
expr_stmt|;
throw|throw
name|exception
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

