begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_comment
comment|/**  * Unit test suite covering HFileBlock positional read logic.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHFileBlockPositionalRead
block|{
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadNoExtra
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|0
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|totalLen
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|HFileBlock
operator|.
name|positionalReadWithExtra
argument_list|(
name|in
argument_list|,
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expect false return when no extra bytes requested"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadShortReadOfNecessaryBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|0
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
literal|5
argument_list|,
name|buf
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|HFileBlock
operator|.
name|positionalReadWithExtra
argument_list|(
name|in
argument_list|,
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expect false return when no extra bytes requested"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
literal|5
argument_list|,
name|buf
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadExtraSucceeded
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|5
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|totalLen
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|HFileBlock
operator|.
name|positionalReadWithExtra
argument_list|(
name|in
argument_list|,
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expect true return when reading extra bytes succeeds"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadExtraFailed
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|5
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|necessaryLen
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|HFileBlock
operator|.
name|positionalReadWithExtra
argument_list|(
name|in
argument_list|,
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Expect false return when reading extra bytes fails"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadShortReadCompletesNecessaryAndExtraBytes
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|5
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
literal|5
argument_list|,
name|buf
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|HFileBlock
operator|.
name|positionalReadWithExtra
argument_list|(
name|in
argument_list|,
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expect true return when reading extra bytes succeeds"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|in
argument_list|)
operator|.
name|read
argument_list|(
literal|5
argument_list|,
name|buf
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|verifyNoMoreInteractions
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPositionalReadPrematureEOF
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|position
init|=
literal|0
decl_stmt|;
name|int
name|bufOffset
init|=
literal|0
decl_stmt|;
name|int
name|necessaryLen
init|=
literal|10
decl_stmt|;
name|int
name|extraLen
init|=
literal|0
decl_stmt|;
name|int
name|totalLen
init|=
name|necessaryLen
operator|+
name|extraLen
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|totalLen
index|]
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|mock
argument_list|(
name|FSDataInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|in
operator|.
name|read
argument_list|(
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|totalLen
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expect
argument_list|(
name|IOException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"EOF"
argument_list|)
expr_stmt|;
name|HFileBlock
operator|.
name|positionalReadWithExtra
argument_list|(
name|in
argument_list|,
name|position
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|,
name|necessaryLen
argument_list|,
name|extraLen
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

