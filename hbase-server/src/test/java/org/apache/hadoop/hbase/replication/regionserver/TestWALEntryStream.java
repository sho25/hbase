begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|PriorityBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MultiVersionConcurrencyControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALActionsListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|WALEntryFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|ReplicationSourceWALReaderThread
operator|.
name|WALEntryBatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|runners
operator|.
name|MockitoJUnitRunner
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|MockitoJUnitRunner
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestWALEntryStream
block|{
specifier|private
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|LAST_ROW
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
decl_stmt|;
specifier|private
name|WAL
name|log
decl_stmt|;
name|PriorityBlockingQueue
argument_list|<
name|Path
argument_list|>
name|walQueue
decl_stmt|;
specifier|private
name|PathWatcher
name|pathWatcher
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|tn
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MultiVersionConcurrencyControl
name|mvcc
init|=
operator|new
name|MultiVersionConcurrencyControl
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cluster
operator|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|scopes
operator|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|fam
range|:
name|htd
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|fam
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|walQueue
operator|=
operator|new
name|PriorityBlockingQueue
argument_list|<>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|WALActionsListener
argument_list|>
name|listeners
init|=
operator|new
name|ArrayList
argument_list|<
name|WALActionsListener
argument_list|>
argument_list|()
decl_stmt|;
name|pathWatcher
operator|=
operator|new
name|PathWatcher
argument_list|()
expr_stmt|;
name|listeners
operator|.
name|add
argument_list|(
name|pathWatcher
argument_list|)
expr_stmt|;
specifier|final
name|WALFactory
name|wals
init|=
operator|new
name|WALFactory
argument_list|(
name|conf
argument_list|,
name|listeners
argument_list|,
name|tn
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|=
name|wals
operator|.
name|getWAL
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|info
operator|.
name|getTable
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Try out different combinations of row count and KeyValue count
annotation|@
name|Test
specifier|public
name|void
name|testDifferentCounts
parameter_list|()
throws|throws
name|Exception
block|{
name|int
index|[]
name|NB_ROWS
init|=
block|{
literal|1500
block|,
literal|60000
block|}
decl_stmt|;
name|int
index|[]
name|NB_KVS
init|=
block|{
literal|1
block|,
literal|100
block|}
decl_stmt|;
comment|// whether compression is used
name|Boolean
index|[]
name|BOOL_VALS
init|=
block|{
literal|false
block|,
literal|true
block|}
decl_stmt|;
comment|// long lastPosition = 0;
for|for
control|(
name|int
name|nbRows
range|:
name|NB_ROWS
control|)
block|{
for|for
control|(
name|int
name|walEditKVs
range|:
name|NB_KVS
control|)
block|{
for|for
control|(
name|boolean
name|isCompressionEnabled
range|:
name|BOOL_VALS
control|)
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|ENABLE_WAL_COMPRESSION
argument_list|,
name|isCompressionEnabled
argument_list|)
expr_stmt|;
name|mvcc
operator|.
name|advanceTo
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbRows
condition|;
name|i
operator|++
control|)
block|{
name|appendToLogPlus
argument_list|(
name|walEditKVs
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WAL
operator|.
name|Entry
name|e
range|:
name|entryStream
control|)
block|{
name|assertNotNull
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|nbRows
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// should've read all entries
name|assertFalse
argument_list|(
name|entryStream
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// reset everything for next loop
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|setUp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Tests basic reading of log appends    */
annotation|@
name|Test
specifier|public
name|void
name|testAppendsWithRolls
parameter_list|()
throws|throws
name|Exception
block|{
name|appendToLog
argument_list|()
expr_stmt|;
name|long
name|oldPos
decl_stmt|;
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
comment|// There's one edit in the log, read it. Reading past it needs to throw exception
name|assertTrue
argument_list|(
name|entryStream
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|WAL
operator|.
name|Entry
name|entry
init|=
name|entryStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryStream
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|entry
operator|=
name|entryStream
operator|.
name|next
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|oldPos
operator|=
name|entryStream
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
name|appendToLog
argument_list|()
expr_stmt|;
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|oldPos
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
comment|// Read the newly added entry, make sure we made progress
name|WAL
operator|.
name|Entry
name|entry
init|=
name|entryStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|oldPos
argument_list|,
name|entryStream
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|oldPos
operator|=
name|entryStream
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
comment|// We rolled but we still should see the end of the first log and get that item
name|appendToLog
argument_list|()
expr_stmt|;
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|appendToLog
argument_list|()
expr_stmt|;
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|oldPos
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
name|WAL
operator|.
name|Entry
name|entry
init|=
name|entryStream
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|oldPos
argument_list|,
name|entryStream
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// next item should come from the new log
name|entry
operator|=
name|entryStream
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
name|oldPos
argument_list|,
name|entryStream
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
comment|// no more entries to read
name|assertFalse
argument_list|(
name|entryStream
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|oldPos
operator|=
name|entryStream
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests that if after a stream is opened, more entries come in and then the log is rolled, we    * don't mistakenly dequeue the current log thinking we're done with it    */
annotation|@
name|Test
specifier|public
name|void
name|testLogrollWhileStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|appendToLog
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|appendToLog
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
comment|// 2
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|getRow
argument_list|(
name|entryStream
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|appendToLog
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
comment|// 3 - comes in after reader opened
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// log roll happening while we're reading
name|appendToLog
argument_list|(
literal|"4"
argument_list|)
expr_stmt|;
comment|// 4 - this append is in the rolled log
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|getRow
argument_list|(
name|entryStream
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|walQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// we should not have dequeued yet since there's still an
comment|// entry in first log
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|getRow
argument_list|(
name|entryStream
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// if implemented improperly, this would be 4
comment|// and 3 would be skipped
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|getRow
argument_list|(
name|entryStream
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|walQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// now we've dequeued and moved on to next log properly
name|assertFalse
argument_list|(
name|entryStream
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests that if writes come in while we have a stream open, we shouldn't miss them    */
annotation|@
name|Test
specifier|public
name|void
name|testNewEntriesWhileStreaming
parameter_list|()
throws|throws
name|Exception
block|{
name|appendToLog
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
name|entryStream
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// we've hit the end of the stream at this point
comment|// some new entries come in while we're streaming
name|appendToLog
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|appendToLog
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
comment|// don't see them
name|assertFalse
argument_list|(
name|entryStream
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// But we do if we reset
name|entryStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|getRow
argument_list|(
name|entryStream
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|getRow
argument_list|(
name|entryStream
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryStream
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResumeStreamingFromPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|lastPosition
init|=
literal|0
decl_stmt|;
name|appendToLog
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
name|entryStream
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// we've hit the end of the stream at this point
name|appendToLog
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|appendToLog
argument_list|(
literal|"3"
argument_list|)
expr_stmt|;
name|lastPosition
operator|=
name|entryStream
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
comment|// next stream should picks up where we left off
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|lastPosition
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|getRow
argument_list|(
name|entryStream
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|getRow
argument_list|(
name|entryStream
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryStream
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
comment|// done
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|walQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests that if we stop before hitting the end of a stream, we can continue where we left off    * using the last position    */
annotation|@
name|Test
specifier|public
name|void
name|testPosition
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|lastPosition
init|=
literal|0
decl_stmt|;
name|appendEntriesToLog
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// read only one element
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|lastPosition
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
name|entryStream
operator|.
name|next
argument_list|()
expr_stmt|;
name|lastPosition
operator|=
name|entryStream
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
comment|// there should still be two more entries from where we left off
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|lastPosition
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
name|assertNotNull
argument_list|(
name|entryStream
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|entryStream
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entryStream
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyStream
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
literal|0
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
name|assertFalse
argument_list|(
name|entryStream
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicationSourceWALReaderThread
parameter_list|()
throws|throws
name|Exception
block|{
name|appendEntriesToLog
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// get ending position
name|long
name|position
decl_stmt|;
try|try
init|(
name|WALEntryStream
name|entryStream
init|=
operator|new
name|WALEntryStream
argument_list|(
name|walQueue
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
init|)
block|{
name|entryStream
operator|.
name|next
argument_list|()
expr_stmt|;
name|entryStream
operator|.
name|next
argument_list|()
expr_stmt|;
name|entryStream
operator|.
name|next
argument_list|()
expr_stmt|;
name|position
operator|=
name|entryStream
operator|.
name|getPosition
argument_list|()
expr_stmt|;
block|}
comment|// start up a batcher
name|ReplicationSourceManager
name|mockSourceManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ReplicationSourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockSourceManager
operator|.
name|getTotalBufferUsed
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ReplicationSourceWALReaderThread
name|batcher
init|=
operator|new
name|ReplicationSourceWALReaderThread
argument_list|(
name|mockSourceManager
argument_list|,
name|getQueueInfo
argument_list|()
argument_list|,
name|walQueue
argument_list|,
literal|0
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|getDummyFilter
argument_list|()
argument_list|,
operator|new
name|MetricsSource
argument_list|(
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|walPath
init|=
name|walQueue
operator|.
name|peek
argument_list|()
decl_stmt|;
name|batcher
operator|.
name|start
argument_list|()
expr_stmt|;
name|WALEntryBatch
name|entryBatch
init|=
name|batcher
operator|.
name|take
argument_list|()
decl_stmt|;
comment|// should've batched up our entries
name|assertNotNull
argument_list|(
name|entryBatch
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entryBatch
operator|.
name|getWalEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|position
argument_list|,
name|entryBatch
operator|.
name|getLastWalPosition
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|walPath
argument_list|,
name|entryBatch
operator|.
name|getLastWalPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entryBatch
operator|.
name|getNbRowKeys
argument_list|()
argument_list|)
expr_stmt|;
name|appendToLog
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|entryBatch
operator|=
name|batcher
operator|.
name|take
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entryBatch
operator|.
name|getNbEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getRow
argument_list|(
name|entryBatch
operator|.
name|getWalEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getRow
parameter_list|(
name|WAL
operator|.
name|Entry
name|entry
parameter_list|)
block|{
name|Cell
name|cell
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|appendToLog
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|txid
init|=
name|log
operator|.
name|append
argument_list|(
name|info
argument_list|,
operator|new
name|WALKey
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
argument_list|,
name|getWALEdit
argument_list|(
name|key
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|log
operator|.
name|sync
argument_list|(
name|txid
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendEntriesToLog
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|appendToLog
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|appendToLog
parameter_list|()
throws|throws
name|IOException
block|{
name|appendToLogPlus
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|appendToLogPlus
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|txid
init|=
name|log
operator|.
name|append
argument_list|(
name|info
argument_list|,
operator|new
name|WALKey
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
argument_list|,
name|getWALEdits
argument_list|(
name|count
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|log
operator|.
name|sync
argument_list|(
name|txid
argument_list|)
expr_stmt|;
block|}
specifier|private
name|WALEdit
name|getWALEdits
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|edit
return|;
block|}
specifier|private
name|WALEdit
name|getWALEdit
parameter_list|(
name|String
name|row
parameter_list|)
block|{
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|edit
return|;
block|}
specifier|private
name|WALEntryFilter
name|getDummyFilter
parameter_list|()
block|{
return|return
operator|new
name|WALEntryFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
return|return
name|entry
return|;
block|}
block|}
return|;
block|}
specifier|private
name|ReplicationQueueInfo
name|getQueueInfo
parameter_list|()
block|{
return|return
operator|new
name|ReplicationQueueInfo
argument_list|(
literal|"1"
argument_list|)
return|;
block|}
class|class
name|PathWatcher
extends|extends
name|WALActionsListener
operator|.
name|Base
block|{
name|Path
name|currentPath
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|preLogRoll
parameter_list|(
name|Path
name|oldPath
parameter_list|,
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
name|walQueue
operator|.
name|add
argument_list|(
name|newPath
argument_list|)
expr_stmt|;
name|currentPath
operator|=
name|newPath
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

