begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStoreFile
import|;
end_import

begin_class
class|class
name|SpikyFileListGenerator
extends|extends
name|StoreFileListGenerator
block|{
name|SpikyFileListGenerator
parameter_list|()
block|{
name|super
argument_list|(
name|SpikyFileListGenerator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|List
argument_list|<
name|HStoreFile
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|List
argument_list|<
name|HStoreFile
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|count
operator|<
operator|(
name|MAX_FILE_GEN_ITERS
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HStoreFile
argument_list|>
name|next
parameter_list|()
block|{
name|count
operator|+=
literal|1
expr_stmt|;
name|ArrayList
argument_list|<
name|HStoreFile
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|NUM_FILES_GEN
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|NUM_FILES_GEN
condition|;
name|x
operator|++
control|)
block|{
name|int
name|fileSize
init|=
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|x
operator|%
literal|10
operator|==
literal|0
condition|)
block|{
name|fileSize
operator|=
name|random
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|+
literal|50
expr_stmt|;
block|}
name|files
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|fileSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|files
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{       }
block|}
return|;
block|}
block|}
end_class

end_unit

