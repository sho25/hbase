begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
operator|.
name|MetaScannerVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|FavoredNodeAssignmentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|FavoredNodeLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|FavoredNodesPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|FavoredNodesPlan
operator|.
name|Position
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|LoadBalancerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRegionPlacement
block|{
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRegionPlacement
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|SLAVES
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
name|HBaseAdmin
name|admin
decl_stmt|;
specifier|private
specifier|static
name|RegionPlacementMaintainer
name|rp
decl_stmt|;
specifier|private
specifier|static
name|Position
index|[]
name|positions
init|=
name|Position
operator|.
name|values
argument_list|()
decl_stmt|;
specifier|private
name|int
name|lastRegionOnPrimaryRSCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|REGION_NUM
init|=
literal|10
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|favoredNodesAssignmentPlan
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|PRIMARY
init|=
name|Position
operator|.
name|PRIMARY
operator|.
name|ordinal
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|SECONDARY
init|=
name|Position
operator|.
name|SECONDARY
operator|.
name|ordinal
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|TERTIARY
init|=
name|Position
operator|.
name|TERTIARY
operator|.
name|ordinal
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Enable the favored nodes based load balancer
name|conf
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|FavoredNodeLoadBalancer
operator|.
name|class
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.tests.use.shortcircuit.reads"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|rp
operator|=
operator|new
name|RegionPlacementMaintainer
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFavoredNodesPresentForRoundRobinAssignment
parameter_list|()
throws|throws
name|HBaseIOException
block|{
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|balancer
operator|.
name|setMasterServices
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SLAVES
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|server
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignmentMap
init|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverBefore
init|=
name|assignmentMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesBefore
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesBefore
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// the primary RS should be the one that the balancer's assignment returns
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverBefore
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// now remove the primary from the list of available servers
name|List
argument_list|<
name|ServerName
argument_list|>
name|removedServers
init|=
name|removeMatchingServers
argument_list|(
name|serverBefore
argument_list|,
name|servers
argument_list|)
decl_stmt|;
comment|// call roundRobinAssignment with the modified servers list
name|assignmentMap
operator|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesAfter
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// We don't expect the favored nodes assignments to change in multiple calls
comment|// to the roundRobinAssignment method in the balancer (relevant for AssignmentManager.assign
comment|// failures)
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|containsAll
argument_list|(
name|favoredNodesBefore
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverAfter
init|=
name|assignmentMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
comment|// We expect the new RegionServer assignee to be one of the favored nodes
comment|// chosen earlier.
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|||
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// put back the primary in the list of available servers
name|servers
operator|.
name|addAll
argument_list|(
name|removedServers
argument_list|)
expr_stmt|;
comment|// now roundRobinAssignment with the modified servers list should return the primary
comment|// as the regionserver assignee
name|assignmentMap
operator|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverWithPrimary
init|=
name|assignmentMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|serverBefore
operator|.
name|containsAll
argument_list|(
name|serverWithPrimary
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make all the favored nodes unavailable for assignment
name|removeMatchingServers
argument_list|(
name|favoredNodesAfter
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// call roundRobinAssignment with the modified servers list
name|assignmentMap
operator|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesNow
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesNow
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFavoredNodesPresentForRandomAssignment
parameter_list|()
throws|throws
name|HBaseIOException
block|{
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|balancer
operator|.
name|setMasterServices
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SLAVES
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|server
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ServerName
name|serverBefore
init|=
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesBefore
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesBefore
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// the primary RS should be the one that the balancer's assignment returns
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverBefore
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// now remove the primary from the list of servers
name|removeMatchingServers
argument_list|(
name|serverBefore
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// call randomAssignment with the modified servers list
name|ServerName
name|serverAfter
init|=
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesAfter
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// We don't expect the favored nodes assignments to change in multiple calls
comment|// to the randomAssignment method in the balancer (relevant for AssignmentManager.assign
comment|// failures)
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|containsAll
argument_list|(
name|favoredNodesBefore
argument_list|)
argument_list|)
expr_stmt|;
comment|// We expect the new RegionServer assignee to be one of the favored nodes
comment|// chosen earlier.
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|||
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make all the favored nodes unavailable for assignment
name|removeMatchingServers
argument_list|(
name|favoredNodesAfter
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// call randomAssignment with the modified servers list
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesNow
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesNow
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionPlacement
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableStr
init|=
literal|"testRegionAssignment"
decl_stmt|;
name|byte
index|[]
name|table
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|tableStr
argument_list|)
decl_stmt|;
comment|// Create a table with REGION_NUM regions.
name|createTable
argument_list|(
name|table
argument_list|,
name|REGION_NUM
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Verify all the user regions are assigned to the primary region server
comment|// based on the plan
name|verifyRegionOnPrimaryRS
argument_list|(
name|REGION_NUM
argument_list|)
expr_stmt|;
name|FavoredNodesPlan
name|currentPlan
init|=
name|rp
operator|.
name|getRegionAssignmentSnapshot
argument_list|()
operator|.
name|getExistingAssignmentPlan
argument_list|()
decl_stmt|;
comment|// Verify all the region server are update with the latest favored nodes
name|verifyRegionServerUpdated
argument_list|(
name|currentPlan
argument_list|)
expr_stmt|;
comment|// Test Case 2: To verify whether the region placement tools can
comment|// correctly update the new assignment plan to hbase:meta and Region Server.
comment|// The new assignment plan is generated by shuffle the existing assignment
comment|// plan by switching PRIMARY, SECONDARY and TERTIARY nodes.
comment|// Shuffle the plan by switching the secondary region server with
comment|// the tertiary.
comment|// Shuffle the secondary with tertiary favored nodes
name|FavoredNodesPlan
name|shuffledPlan
init|=
name|this
operator|.
name|shuffleAssignmentPlan
argument_list|(
name|currentPlan
argument_list|,
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|SECONDARY
argument_list|,
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|TERTIARY
argument_list|)
decl_stmt|;
comment|// Let the region placement update the hbase:meta and Region Servers
name|rp
operator|.
name|updateAssignmentPlan
argument_list|(
name|shuffledPlan
argument_list|)
expr_stmt|;
comment|// Verify the region assignment. There are supposed to no region reassignment
comment|// All the regions are still on the primary region server
name|verifyRegionAssignment
argument_list|(
name|shuffledPlan
argument_list|,
literal|0
argument_list|,
name|REGION_NUM
argument_list|)
expr_stmt|;
comment|// Shuffle the plan by switching the primary with secondary and
comment|// verify the region reassignment is consistent with the plan.
name|shuffledPlan
operator|=
name|this
operator|.
name|shuffleAssignmentPlan
argument_list|(
name|currentPlan
argument_list|,
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|PRIMARY
argument_list|,
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|SECONDARY
argument_list|)
expr_stmt|;
comment|// Let the region placement update the hbase:meta and Region Servers
name|rp
operator|.
name|updateAssignmentPlan
argument_list|(
name|shuffledPlan
argument_list|)
expr_stmt|;
name|verifyRegionAssignment
argument_list|(
name|shuffledPlan
argument_list|,
name|REGION_NUM
argument_list|,
name|REGION_NUM
argument_list|)
expr_stmt|;
comment|// also verify that the AssignmentVerificationReport has the correct information
name|RegionPlacementMaintainer
name|rp
init|=
operator|new
name|RegionPlacementMaintainer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// we are interested in only one table (and hence one report)
name|rp
operator|.
name|setTargetTableName
argument_list|(
operator|new
name|String
index|[]
block|{
name|tableStr
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AssignmentVerificationReport
argument_list|>
name|reports
init|=
name|rp
operator|.
name|verifyRegionPlacement
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|AssignmentVerificationReport
name|report
init|=
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getRegionsWithoutValidFavoredNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getNonFavoredAssignedRegions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getTotalFavoredAssignments
argument_list|()
operator|>=
name|REGION_NUM
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|PRIMARY
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|SECONDARY
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|TERTIARY
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getUnassignedRegions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Check when a RS stops, the regions get assigned to their secondary/tertiary
name|killRandomServerAndVerifyAssignment
argument_list|()
expr_stmt|;
comment|// also verify that the AssignmentVerificationReport has the correct information
name|reports
operator|=
name|rp
operator|.
name|verifyRegionPlacement
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|report
operator|=
name|reports
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getRegionsWithoutValidFavoredNodes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getNonFavoredAssignedRegions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getTotalFavoredAssignments
argument_list|()
operator|>=
name|REGION_NUM
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|PRIMARY
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"secondary "
operator|+
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|SECONDARY
argument_list|)
operator|+
literal|" tertiary "
operator|+
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|TERTIARY
argument_list|)
argument_list|,
operator|(
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|SECONDARY
argument_list|)
operator|>
literal|0
operator|||
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|TERTIARY
argument_list|)
operator|>
literal|0
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|PRIMARY
argument_list|)
operator|+
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|SECONDARY
argument_list|)
operator|+
name|report
operator|.
name|getNumRegionsOnFavoredNodeByPosition
argument_list|(
name|FavoredNodesPlan
operator|.
name|Position
operator|.
name|TERTIARY
argument_list|)
operator|)
operator|==
name|REGION_NUM
argument_list|)
expr_stmt|;
name|RegionPlacementMaintainer
operator|.
name|printAssignmentPlan
argument_list|(
name|currentPlan
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|killRandomServerAndVerifyAssignment
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|KeeperException
block|{
name|ServerName
name|serverToKill
init|=
literal|null
decl_stmt|;
name|int
name|killIndex
init|=
literal|0
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
name|metaServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getServerHoldingMeta
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Server holding meta "
operator|+
name|metaServer
argument_list|)
expr_stmt|;
name|boolean
name|isNamespaceServer
init|=
literal|false
decl_stmt|;
do|do
block|{
comment|// kill a random non-meta server carrying at least one region
name|killIndex
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
name|serverToKill
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|killIndex
argument_list|)
operator|.
name|getServerName
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|HRegion
argument_list|>
name|regs
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|killIndex
argument_list|)
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
decl_stmt|;
name|isNamespaceServer
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|regs
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|)
condition|)
block|{
name|isNamespaceServer
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
do|while
condition|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|metaServer
argument_list|,
name|serverToKill
argument_list|)
operator|||
name|isNamespaceServer
operator|||
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|killIndex
argument_list|)
operator|.
name|getNumberOfOnlineRegions
argument_list|()
operator|==
literal|0
condition|)
do|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stopping RS "
operator|+
name|serverToKill
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|regionsToVerify
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|ServerName
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// mark the regions to track
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|entry
range|:
name|favoredNodesAssignmentPlan
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|s
init|=
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|s
argument_list|,
name|serverToKill
argument_list|)
condition|)
block|{
name|regionsToVerify
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|ServerName
argument_list|>
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" with sedcondary/tertiary "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|orig
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignmentManager
operator|.
name|getNumRegionsOpened
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|stopRegionServer
argument_list|(
name|serverToKill
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|waitForRegionServerToStop
argument_list|(
name|serverToKill
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|int
name|curr
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignmentManager
operator|.
name|getNumRegionsOpened
argument_list|()
decl_stmt|;
while|while
condition|(
name|curr
operator|-
name|orig
operator|<
name|regionsToVerify
operator|.
name|size
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for "
operator|+
name|regionsToVerify
operator|.
name|size
argument_list|()
operator|+
literal|" to come online "
operator|+
literal|" Current #regions "
operator|+
name|curr
operator|+
literal|" Original #regions "
operator|+
name|orig
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|curr
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|assignmentManager
operator|.
name|getNumRegionsOpened
argument_list|()
expr_stmt|;
block|}
comment|// now verify
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|entry
range|:
name|regionsToVerify
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|newDestination
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|ServerName
argument_list|,
name|ServerName
argument_list|>
name|secondaryTertiaryServers
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"New destination for region "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|+
literal|" "
operator|+
name|newDestination
operator|+
literal|". Secondary/Tertiary are "
operator|+
name|secondaryTertiaryServers
operator|.
name|getFirst
argument_list|()
operator|+
literal|"/"
operator|+
name|secondaryTertiaryServers
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|newDestination
argument_list|,
name|secondaryTertiaryServers
operator|.
name|getFirst
argument_list|()
argument_list|)
operator|||
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|newDestination
argument_list|,
name|secondaryTertiaryServers
operator|.
name|getSecond
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|fail
argument_list|(
literal|"Region "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" not present on any of the expected servers"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// start(reinstate) region server since we killed one before
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|startRegionServer
argument_list|()
expr_stmt|;
block|}
comment|/**    * Used to test the correctness of this class.    */
annotation|@
name|Test
specifier|public
name|void
name|testRandomizedMatrix
parameter_list|()
block|{
name|int
name|rows
init|=
literal|100
decl_stmt|;
name|int
name|cols
init|=
literal|100
decl_stmt|;
name|float
index|[]
index|[]
name|matrix
init|=
operator|new
name|float
index|[
name|rows
index|]
index|[
name|cols
index|]
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
condition|;
name|j
operator|++
control|)
block|{
name|matrix
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|random
operator|.
name|nextFloat
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Test that inverting a transformed matrix gives the original matrix.
name|RegionPlacementMaintainer
operator|.
name|RandomizedMatrix
name|rm
init|=
operator|new
name|RegionPlacementMaintainer
operator|.
name|RandomizedMatrix
argument_list|(
name|rows
argument_list|,
name|cols
argument_list|)
decl_stmt|;
name|float
index|[]
index|[]
name|transformed
init|=
name|rm
operator|.
name|transform
argument_list|(
name|matrix
argument_list|)
decl_stmt|;
name|float
index|[]
index|[]
name|invertedTransformed
init|=
name|rm
operator|.
name|invert
argument_list|(
name|transformed
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cols
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|matrix
index|[
name|i
index|]
index|[
name|j
index|]
operator|!=
name|invertedTransformed
index|[
name|i
index|]
index|[
name|j
index|]
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
block|}
comment|// Test that the indices on a transformed matrix can be inverted to give
comment|// the same values on the original matrix.
name|int
index|[]
name|transformedIndices
init|=
operator|new
name|int
index|[
name|rows
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
name|i
operator|++
control|)
block|{
name|transformedIndices
index|[
name|i
index|]
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|cols
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|invertedTransformedIndices
init|=
name|rm
operator|.
name|invertIndices
argument_list|(
name|transformedIndices
argument_list|)
decl_stmt|;
name|float
index|[]
name|transformedValues
init|=
operator|new
name|float
index|[
name|rows
index|]
decl_stmt|;
name|float
index|[]
name|invertedTransformedValues
init|=
operator|new
name|float
index|[
name|rows
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
condition|;
name|i
operator|++
control|)
block|{
name|transformedValues
index|[
name|i
index|]
operator|=
name|transformed
index|[
name|i
index|]
index|[
name|transformedIndices
index|[
name|i
index|]
index|]
expr_stmt|;
name|invertedTransformedValues
index|[
name|i
index|]
operator|=
name|matrix
index|[
name|i
index|]
index|[
name|invertedTransformedIndices
index|[
name|i
index|]
index|]
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|transformedValues
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|invertedTransformedValues
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|transformedValues
argument_list|,
name|invertedTransformedValues
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
comment|/**    * Shuffle the assignment plan by switching two favored node positions.    * @param plan The assignment plan    * @param p1 The first switch position    * @param p2 The second switch position    * @return    */
specifier|private
name|FavoredNodesPlan
name|shuffleAssignmentPlan
parameter_list|(
name|FavoredNodesPlan
name|plan
parameter_list|,
name|FavoredNodesPlan
operator|.
name|Position
name|p1
parameter_list|,
name|FavoredNodesPlan
operator|.
name|Position
name|p2
parameter_list|)
block|{
name|FavoredNodesPlan
name|shuffledPlan
init|=
operator|new
name|FavoredNodesPlan
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|entry
range|:
name|plan
operator|.
name|getAssignmentMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HRegionInfo
name|region
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// copy the server list from the original plan
name|List
argument_list|<
name|ServerName
argument_list|>
name|shuffledServerList
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|shuffledServerList
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// start to shuffle
name|shuffledServerList
operator|.
name|set
argument_list|(
name|p1
operator|.
name|ordinal
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|p2
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|shuffledServerList
operator|.
name|set
argument_list|(
name|p2
operator|.
name|ordinal
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|p1
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// update the plan
name|shuffledPlan
operator|.
name|updateAssignmentPlan
argument_list|(
name|region
argument_list|,
name|shuffledServerList
argument_list|)
expr_stmt|;
block|}
return|return
name|shuffledPlan
return|;
block|}
comment|/**    * To verify the region assignment status.    * It will check the assignment plan consistency between hbase:meta and    * region servers.    * Also it will verify weather the number of region movement and    * the number regions on the primary region server are expected    *    * @param plan    * @param regionMovementNum    * @param numRegionsOnPrimaryRS    * @throws InterruptedException    * @throws IOException    */
specifier|private
name|void
name|verifyRegionAssignment
parameter_list|(
name|FavoredNodesPlan
name|plan
parameter_list|,
name|int
name|regionMovementNum
parameter_list|,
name|int
name|numRegionsOnPrimaryRS
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
comment|// Verify the assignment plan in hbase:meta is consistent with the expected plan.
name|verifyMETAUpdated
argument_list|(
name|plan
argument_list|)
expr_stmt|;
comment|// Verify the number of region movement is expected
name|verifyRegionMovementNum
argument_list|(
name|regionMovementNum
argument_list|)
expr_stmt|;
comment|// Verify the number of regions is assigned to the primary region server
comment|// based on the plan is expected
name|verifyRegionOnPrimaryRS
argument_list|(
name|numRegionsOnPrimaryRS
argument_list|)
expr_stmt|;
comment|// Verify all the online region server are updated with the assignment plan
name|verifyRegionServerUpdated
argument_list|(
name|plan
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the meta has updated to the latest assignment plan    * @param plan    * @throws IOException    */
specifier|private
name|void
name|verifyMETAUpdated
parameter_list|(
name|FavoredNodesPlan
name|expectedPlan
parameter_list|)
throws|throws
name|IOException
block|{
name|FavoredNodesPlan
name|planFromMETA
init|=
name|rp
operator|.
name|getRegionAssignmentSnapshot
argument_list|()
operator|.
name|getExistingAssignmentPlan
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The assignment plan is NOT consistent with the expected plan "
argument_list|,
name|planFromMETA
operator|.
name|equals
argument_list|(
name|expectedPlan
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the number of region movement is expected    */
specifier|private
name|void
name|verifyRegionMovementNum
parameter_list|(
name|int
name|expected
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|m
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|int
name|lastRegionOpenedCount
init|=
name|m
operator|.
name|assignmentManager
operator|.
name|getNumRegionsOpened
argument_list|()
decl_stmt|;
comment|// get the assignments start to execute
name|m
operator|.
name|balance
argument_list|()
expr_stmt|;
name|int
name|retry
init|=
literal|10
decl_stmt|;
name|long
name|sleep
init|=
literal|3000
decl_stmt|;
name|int
name|attempt
init|=
literal|0
decl_stmt|;
name|int
name|currentRegionOpened
decl_stmt|,
name|regionMovement
decl_stmt|;
do|do
block|{
name|currentRegionOpened
operator|=
name|m
operator|.
name|assignmentManager
operator|.
name|getNumRegionsOpened
argument_list|()
expr_stmt|;
name|regionMovement
operator|=
name|currentRegionOpened
operator|-
name|lastRegionOpenedCount
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"There are "
operator|+
name|regionMovement
operator|+
literal|"/"
operator|+
name|expected
operator|+
literal|" regions moved after "
operator|+
name|attempt
operator|+
literal|" attempts"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
operator|++
name|attempt
operator|)
operator|*
name|sleep
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|regionMovement
operator|!=
name|expected
operator|&&
name|attempt
operator|<=
name|retry
condition|)
do|;
comment|// update the lastRegionOpenedCount
name|lastRegionOpenedCount
operator|=
name|currentRegionOpened
expr_stmt|;
name|assertEquals
argument_list|(
literal|"There are only "
operator|+
name|regionMovement
operator|+
literal|" instead of "
operator|+
name|expected
operator|+
literal|" region movement for "
operator|+
name|attempt
operator|+
literal|" attempts"
argument_list|,
name|regionMovement
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|removeMatchingServers
parameter_list|(
name|ServerName
name|serverWithoutStartCode
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|serversToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|servers
control|)
block|{
if|if
condition|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|s
argument_list|,
name|serverWithoutStartCode
argument_list|)
condition|)
block|{
name|serversToRemove
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|servers
operator|.
name|removeAll
argument_list|(
name|serversToRemove
argument_list|)
expr_stmt|;
return|return
name|serversToRemove
return|;
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|removeMatchingServers
parameter_list|(
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|serversWithoutStartCode
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|serversToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|serversWithoutStartCode
control|)
block|{
name|serversToRemove
operator|.
name|addAll
argument_list|(
name|removeMatchingServers
argument_list|(
name|s
argument_list|,
name|servers
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|serversToRemove
return|;
block|}
comment|/**    * Verify the number of user regions is assigned to the primary    * region server based on the plan is expected    * @param expectedNum.    * @throws IOException    */
specifier|private
name|void
name|verifyRegionOnPrimaryRS
parameter_list|(
name|int
name|expectedNum
parameter_list|)
throws|throws
name|IOException
block|{
name|lastRegionOnPrimaryRSCount
operator|=
name|getNumRegionisOnPrimaryRS
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Only "
operator|+
name|expectedNum
operator|+
literal|" of user regions running "
operator|+
literal|"on the primary region server"
argument_list|,
name|expectedNum
argument_list|,
name|lastRegionOnPrimaryRSCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify all the online region servers has been updated to the    * latest assignment plan    * @param plan    * @throws IOException    */
specifier|private
name|void
name|verifyRegionServerUpdated
parameter_list|(
name|FavoredNodesPlan
name|plan
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Verify all region servers contain the correct favored nodes information
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SLAVES
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|rs
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|rs
operator|.
name|getOnlineRegions
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testRegionAssignment"
argument_list|)
argument_list|)
control|)
block|{
name|InetSocketAddress
index|[]
name|favoredSocketAddress
init|=
name|rs
operator|.
name|getFavoredNodesForRegion
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredServerList
init|=
name|plan
operator|.
name|getAssignmentMap
argument_list|()
operator|.
name|get
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
comment|// All regions are supposed to have favored nodes,
comment|// except for hbase:meta and ROOT
if|if
condition|(
name|favoredServerList
operator|==
literal|null
condition|)
block|{
name|HTableDescriptor
name|desc
init|=
name|region
operator|.
name|getTableDesc
argument_list|()
decl_stmt|;
comment|// Verify they are ROOT and hbase:meta regions since no favored nodes
name|assertNull
argument_list|(
name|favoredSocketAddress
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"User region "
operator|+
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|+
literal|" should have favored nodes"
argument_list|,
operator|(
name|desc
operator|.
name|isRootRegion
argument_list|()
operator|||
name|desc
operator|.
name|isMetaRegion
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For user region, the favored nodes in the region server should be
comment|// identical to favored nodes in the assignmentPlan
name|assertTrue
argument_list|(
name|favoredSocketAddress
operator|.
name|length
operator|==
name|favoredServerList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|favoredServerList
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|favoredServerList
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|InetSocketAddress
name|addrFromRS
init|=
name|favoredSocketAddress
index|[
name|j
index|]
decl_stmt|;
name|InetSocketAddress
name|addrFromPlan
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
name|favoredServerList
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getHostname
argument_list|()
argument_list|,
name|favoredServerList
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|addrFromRS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|addrFromPlan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Region server "
operator|+
name|rs
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
operator|+
literal|" has the "
operator|+
name|positions
index|[
name|j
index|]
operator|+
literal|" for region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is "
operator|+
name|addrFromRS
operator|+
literal|" which is inconsistent with the plan "
operator|+
name|addrFromPlan
argument_list|,
name|addrFromRS
operator|.
name|equals
argument_list|(
name|addrFromPlan
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Check whether regions are assigned to servers consistent with the explicit    * hints that are persisted in the hbase:meta table.    * Also keep track of the number of the regions are assigned to the    * primary region server.    * @return the number of regions are assigned to the primary region server    * @throws IOException    */
specifier|private
name|int
name|getNumRegionisOnPrimaryRS
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|AtomicInteger
name|regionOnPrimaryNum
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|totalRegionNum
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The start of region placement verification"
argument_list|)
expr_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|HRegionInfo
name|info
init|=
name|MetaScanner
operator|.
name|getHRegionInfo
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getTable
argument_list|()
operator|.
name|getNamespaceAsString
argument_list|()
operator|.
name|equals
argument_list|(
name|NamespaceDescriptor
operator|.
name|SYSTEM_NAMESPACE_NAME_STR
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|byte
index|[]
name|server
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
name|byte
index|[]
name|favoredNodes
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|FavoredNodeAssignmentHelper
operator|.
name|FAVOREDNODES_QUALIFIER
argument_list|)
decl_stmt|;
comment|// Add the favored nodes into assignment plan
name|ServerName
index|[]
name|favoredServerList
init|=
name|FavoredNodeAssignmentHelper
operator|.
name|getFavoredNodesList
argument_list|(
name|favoredNodes
argument_list|)
decl_stmt|;
name|favoredNodesAssignmentPlan
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|favoredServerList
argument_list|)
expr_stmt|;
name|Position
index|[]
name|positions
init|=
name|Position
operator|.
name|values
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|totalRegionNum
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|ServerName
name|serverName
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|server
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|favoredNodes
operator|!=
literal|null
condition|)
block|{
name|String
name|placement
init|=
literal|"[NOT FAVORED NODE]"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|favoredServerList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|favoredServerList
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|placement
operator|=
name|positions
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|Position
operator|.
name|PRIMARY
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|regionOnPrimaryNum
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" on "
operator|+
name|serverName
operator|+
literal|" "
operator|+
name|placement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" running on "
operator|+
name|serverName
operator|+
literal|" but there is no favored region server"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" not assigned to any server"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Result="
operator|+
name|result
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"There are "
operator|+
name|regionOnPrimaryNum
operator|.
name|intValue
argument_list|()
operator|+
literal|" out of "
operator|+
name|totalRegionNum
operator|.
name|intValue
argument_list|()
operator|+
literal|" regions running on the primary"
operator|+
literal|" region servers"
argument_list|)
expr_stmt|;
return|return
name|regionOnPrimaryNum
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**    * Create a table with specified table name and region number.    * @param tablename    * @param regionNum    * @return    * @throws IOException    */
specifier|private
specifier|static
name|void
name|createTable
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|,
name|int
name|regionNum
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|expectedRegions
init|=
name|regionNum
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
name|expectedRegions
operator|-
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expectedRegions
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|splitKey
init|=
operator|(
name|byte
operator|)
name|i
decl_stmt|;
name|splitKeys
index|[
name|i
operator|-
literal|1
index|]
operator|=
operator|new
name|byte
index|[]
block|{
name|splitKey
block|,
name|splitKey
block|,
name|splitKey
block|}
expr_stmt|;
block|}
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
init|=
name|ht
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

