begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MetaScanner
operator|.
name|MetaScannerVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|FavoredNodeAssignmentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|FavoredNodeLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|FavoredNodes
operator|.
name|Position
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|LoadBalancerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRegionPlacement
block|{
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestRegionPlacement
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|SLAVES
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
name|HBaseAdmin
name|admin
decl_stmt|;
specifier|private
specifier|static
name|Position
index|[]
name|positions
init|=
name|Position
operator|.
name|values
argument_list|()
decl_stmt|;
specifier|private
name|int
name|REGION_NUM
init|=
literal|10
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|favoredNodesAssignmentPlan
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|PRIMARY
init|=
name|Position
operator|.
name|PRIMARY
operator|.
name|ordinal
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|SECONDARY
init|=
name|Position
operator|.
name|SECONDARY
operator|.
name|ordinal
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|TERTIARY
init|=
name|Position
operator|.
name|TERTIARY
operator|.
name|ordinal
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Enable the favored nodes based load balancer
name|conf
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|FavoredNodeLoadBalancer
operator|.
name|class
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.tests.use.shortcircuit.reads"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
name|admin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFavoredNodesPresentForRoundRobinAssignment
parameter_list|()
block|{
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|balancer
operator|.
name|setMasterServices
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SLAVES
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|server
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
operator|(
literal|"foobar"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignmentMap
init|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverBefore
init|=
name|assignmentMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesBefore
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesBefore
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// the primary RS should be the one that the balancer's assignment returns
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverBefore
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// now remove the primary from the list of available servers
name|List
argument_list|<
name|ServerName
argument_list|>
name|removedServers
init|=
name|removeMatchingServers
argument_list|(
name|serverBefore
argument_list|,
name|servers
argument_list|)
decl_stmt|;
comment|// call roundRobinAssignment with the modified servers list
name|assignmentMap
operator|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesAfter
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// We don't expect the favored nodes assignments to change in multiple calls
comment|// to the roundRobinAssignment method in the balancer (relevant for AssignmentManager.assign
comment|// failures)
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|containsAll
argument_list|(
name|favoredNodesBefore
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverAfter
init|=
name|assignmentMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
comment|// We expect the new RegionServer assignee to be one of the favored nodes
comment|// chosen earlier.
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|||
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// put back the primary in the list of available servers
name|servers
operator|.
name|addAll
argument_list|(
name|removedServers
argument_list|)
expr_stmt|;
comment|// now roundRobinAssignment with the modified servers list should return the primary
comment|// as the regionserver assignee
name|assignmentMap
operator|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|serverWithPrimary
init|=
name|assignmentMap
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|serverBefore
operator|.
name|containsAll
argument_list|(
name|serverWithPrimary
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make all the favored nodes unavailable for assignment
name|removeMatchingServers
argument_list|(
name|favoredNodesAfter
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// call roundRobinAssignment with the modified servers list
name|assignmentMap
operator|=
name|balancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesNow
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesNow
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFavoredNodesPresentForRandomAssignment
parameter_list|()
block|{
name|LoadBalancer
name|balancer
init|=
name|LoadBalancerFactory
operator|.
name|getLoadBalancer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|balancer
operator|.
name|setMasterServices
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SLAVES
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|server
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
operator|(
literal|"foobar"
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|ServerName
name|serverBefore
init|=
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesBefore
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesBefore
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// the primary RS should be the one that the balancer's assignment returns
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverBefore
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// now remove the primary from the list of servers
name|removeMatchingServers
argument_list|(
name|serverBefore
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// call randomAssignment with the modified servers list
name|ServerName
name|serverAfter
init|=
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesAfter
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// We don't expect the favored nodes assignments to change in multiple calls
comment|// to the randomAssignment method in the balancer (relevant for AssignmentManager.assign
comment|// failures)
name|assertTrue
argument_list|(
name|favoredNodesAfter
operator|.
name|containsAll
argument_list|(
name|favoredNodesBefore
argument_list|)
argument_list|)
expr_stmt|;
comment|// We expect the new RegionServer assignee to be one of the favored nodes
comment|// chosen earlier.
name|assertTrue
argument_list|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|||
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|serverAfter
argument_list|,
name|favoredNodesBefore
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make all the favored nodes unavailable for assignment
name|removeMatchingServers
argument_list|(
name|favoredNodesAfter
argument_list|,
name|servers
argument_list|)
expr_stmt|;
comment|// call randomAssignment with the modified servers list
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|region
argument_list|,
name|servers
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|favoredNodesNow
init|=
operator|(
operator|(
name|FavoredNodeLoadBalancer
operator|)
name|balancer
operator|)
operator|.
name|getFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|favoredNodesNow
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|PRIMARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|SECONDARY
argument_list|)
argument_list|)
operator|&&
operator|!
name|favoredNodesNow
operator|.
name|contains
argument_list|(
name|favoredNodesAfter
operator|.
name|get
argument_list|(
name|TERTIARY
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRegionPlacement
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table with REGION_NUM regions.
name|createTable
argument_list|(
literal|"testRegionAssignment"
argument_list|,
name|REGION_NUM
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRegionAssignment"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify all the user regions are assigned to the primary region server
comment|// based on the plan
name|countRegionOnPrimaryRS
argument_list|(
name|REGION_NUM
argument_list|)
expr_stmt|;
comment|// Verify all the region server are update with the latest favored nodes
name|verifyRegionServerUpdated
argument_list|()
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|removeMatchingServers
parameter_list|(
name|ServerName
name|serverWithoutStartCode
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|serversToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|servers
control|)
block|{
if|if
condition|(
name|ServerName
operator|.
name|isSameHostnameAndPort
argument_list|(
name|s
argument_list|,
name|serverWithoutStartCode
argument_list|)
condition|)
block|{
name|serversToRemove
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|servers
operator|.
name|removeAll
argument_list|(
name|serversToRemove
argument_list|)
expr_stmt|;
return|return
name|serversToRemove
return|;
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|removeMatchingServers
parameter_list|(
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|serversWithoutStartCode
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|serversToRemove
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|serversWithoutStartCode
control|)
block|{
name|serversToRemove
operator|.
name|addAll
argument_list|(
name|removeMatchingServers
argument_list|(
name|s
argument_list|,
name|servers
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|serversToRemove
return|;
block|}
comment|/**    * Verify the number of user regions is assigned to the primary    * region server based on the plan is expected    * @param expectedNum.    * @throws IOException    */
specifier|private
name|void
name|countRegionOnPrimaryRS
parameter_list|(
name|int
name|expectedNum
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|lastRegionOnPrimaryRSCount
init|=
name|getNumRegionisOnPrimaryRS
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Only "
operator|+
name|expectedNum
operator|+
literal|" of user regions running "
operator|+
literal|"on the primary region server"
argument_list|,
name|expectedNum
argument_list|,
name|lastRegionOnPrimaryRSCount
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify all the online region servers has been updated to the    * latest assignment plan    * @param plan    * @throws IOException    */
specifier|private
name|void
name|verifyRegionServerUpdated
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Verify all region servers contain the correct favored nodes information
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SLAVES
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|rs
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|region
range|:
name|rs
operator|.
name|getOnlineRegions
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRegionAssignment"
argument_list|)
argument_list|)
control|)
block|{
name|InetSocketAddress
index|[]
name|favoredSocketAddress
init|=
name|rs
operator|.
name|getFavoredNodesForRegion
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|ServerName
index|[]
name|favoredServerList
init|=
name|favoredNodesAssignmentPlan
operator|.
name|get
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
comment|// All regions are supposed to have favored nodes,
comment|// except for META and ROOT
if|if
condition|(
name|favoredServerList
operator|==
literal|null
condition|)
block|{
name|HTableDescriptor
name|desc
init|=
name|region
operator|.
name|getTableDesc
argument_list|()
decl_stmt|;
comment|// Verify they are ROOT and META regions since no favored nodes
name|assertNull
argument_list|(
name|favoredSocketAddress
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"User region "
operator|+
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|" should have favored nodes"
argument_list|,
operator|(
name|desc
operator|.
name|isRootRegion
argument_list|()
operator|||
name|desc
operator|.
name|isMetaRegion
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For user region, the favored nodes in the region server should be
comment|// identical to favored nodes in the assignmentPlan
name|assertTrue
argument_list|(
name|favoredSocketAddress
operator|.
name|length
operator|==
name|favoredServerList
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|favoredServerList
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|favoredServerList
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|InetSocketAddress
name|addrFromRS
init|=
name|favoredSocketAddress
index|[
name|j
index|]
decl_stmt|;
name|InetSocketAddress
name|addrFromPlan
init|=
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
name|favoredServerList
index|[
name|j
index|]
operator|.
name|getHostname
argument_list|()
argument_list|,
name|favoredServerList
index|[
name|j
index|]
operator|.
name|getPort
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|addrFromRS
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|addrFromPlan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Region server "
operator|+
name|rs
operator|.
name|getServerName
argument_list|()
operator|.
name|getHostAndPort
argument_list|()
operator|+
literal|" has the "
operator|+
name|positions
index|[
name|j
index|]
operator|+
literal|" for region "
operator|+
name|region
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" is "
operator|+
name|addrFromRS
operator|+
literal|" which is inconsistent with the plan "
operator|+
name|addrFromPlan
argument_list|,
name|addrFromRS
operator|.
name|equals
argument_list|(
name|addrFromPlan
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**    * Check whether regions are assigned to servers consistent with the explicit    * hints that are persisted in the META table.    * Also keep track of the number of the regions are assigned to the    * primary region server.    * @return the number of regions are assigned to the primary region server    * @throws IOException    */
specifier|private
name|int
name|getNumRegionisOnPrimaryRS
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|AtomicInteger
name|regionOnPrimaryNum
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|totalRegionNum
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"The start of region placement verification"
argument_list|)
expr_stmt|;
name|MetaScannerVisitor
name|visitor
init|=
operator|new
name|MetaScannerVisitor
argument_list|()
block|{
specifier|public
name|boolean
name|processRow
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|HRegionInfo
name|info
init|=
name|MetaScanner
operator|.
name|getHRegionInfo
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|byte
index|[]
name|server
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SERVER_QUALIFIER
argument_list|)
decl_stmt|;
name|byte
index|[]
name|favoredNodes
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|FavoredNodeAssignmentHelper
operator|.
name|FAVOREDNODES_QUALIFIER
argument_list|)
decl_stmt|;
comment|// Add the favored nodes into assignment plan
name|ServerName
index|[]
name|favoredServerList
init|=
name|FavoredNodeAssignmentHelper
operator|.
name|getFavoredNodesList
argument_list|(
name|favoredNodes
argument_list|)
decl_stmt|;
name|favoredNodesAssignmentPlan
operator|.
name|put
argument_list|(
name|info
argument_list|,
name|favoredServerList
argument_list|)
expr_stmt|;
name|Position
index|[]
name|positions
init|=
name|Position
operator|.
name|values
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|totalRegionNum
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|ServerName
name|serverName
init|=
operator|new
name|ServerName
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|server
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|favoredNodes
operator|!=
literal|null
condition|)
block|{
name|String
name|placement
init|=
literal|"[NOT FAVORED NODE]"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|favoredServerList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|favoredServerList
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
name|placement
operator|=
name|positions
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|Position
operator|.
name|PRIMARY
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|regionOnPrimaryNum
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" on "
operator|+
name|serverName
operator|+
literal|" "
operator|+
name|placement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" running on "
operator|+
name|serverName
operator|+
literal|" but there is no favored region server"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" not assigned to any server"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Result="
operator|+
name|result
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{}
block|}
decl_stmt|;
name|MetaScanner
operator|.
name|metaScan
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"There are "
operator|+
name|regionOnPrimaryNum
operator|.
name|intValue
argument_list|()
operator|+
literal|" out of "
operator|+
name|totalRegionNum
operator|.
name|intValue
argument_list|()
operator|+
literal|" regions running on the primary"
operator|+
literal|" region servers"
argument_list|)
expr_stmt|;
return|return
name|regionOnPrimaryNum
operator|.
name|intValue
argument_list|()
return|;
block|}
comment|/**    * Create a table with specified table name and region number.    * @param table    * @param regionNum    * @return    * @throws IOException    */
specifier|private
specifier|static
name|void
name|createTable
parameter_list|(
name|String
name|table
parameter_list|,
name|int
name|regionNum
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|int
name|expectedRegions
init|=
name|regionNum
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
name|expectedRegions
operator|-
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|expectedRegions
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|splitKey
init|=
operator|(
name|byte
operator|)
name|i
decl_stmt|;
name|splitKeys
index|[
name|i
operator|-
literal|1
index|]
operator|=
operator|new
name|byte
index|[]
block|{
name|splitKey
block|,
name|splitKey
block|,
name|splitKey
block|}
expr_stmt|;
block|}
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|HTable
name|ht
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
init|=
name|ht
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

