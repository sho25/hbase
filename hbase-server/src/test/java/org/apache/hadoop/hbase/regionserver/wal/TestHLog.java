begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|BindException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|mutable
operator|.
name|MutableBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|SampleRegionWALObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|HLog
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DFSClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|DistributedFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|protocol
operator|.
name|FSConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|datanode
operator|.
name|DataNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|server
operator|.
name|namenode
operator|.
name|LeaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/** JUnit test case for HLog */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|TestHLog
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHLog
operator|.
name|class
argument_list|)
decl_stmt|;
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|DataNode
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LeaseManager
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hdfs.server.namenode.FSNamesystem"
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|DFSClient
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Log4JLogger
operator|)
name|HLog
operator|.
name|LOG
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
name|Path
name|dir
decl_stmt|;
specifier|private
specifier|static
name|MiniDFSCluster
name|cluster
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Path
name|hbaseDir
decl_stmt|;
specifier|private
specifier|static
name|Path
name|oldLogDir
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStatus
index|[]
name|entries
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|dir
range|:
name|entries
control|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make block sizes small.
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.blocksize"
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// needed for testAppendClose()
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.broken.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// quicker heartbeat interval for faster DN death notification
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.namenode.heartbeat.recheck-interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.heartbeat.interval"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.client.socket-timeout"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// faster failover with cluster.shutdown();fs.close() idiom
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.ipc.client.connect.max.retries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.client.block.recovery.retries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.ipc.client.connection.maxidletime"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|WAL_COPROCESSOR_CONF_KEY
argument_list|,
name|SampleRegionWALObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|cluster
operator|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|hbaseDir
operator|=
name|TEST_UTIL
operator|.
name|createRootDir
argument_list|()
expr_stmt|;
name|oldLogDir
operator|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|)
expr_stmt|;
name|dir
operator|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|getName
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|"TestHLog"
return|;
block|}
comment|/**    * Test flush for sure has a sequence id that is beyond the last edit appended.  We do this    * by slowing appends in the background ring buffer thread while in foreground we call    * flush.  The addition of the sync over HRegion in flush should fix an issue where flush was    * returning before all of its appends had made it out to the WAL (HBASE-11109).    * @throws IOException     * @see HBASE-11109    */
annotation|@
name|Test
specifier|public
name|void
name|testFlushSequenceIdIsGreaterThanAllEditsInHFile
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
literal|"testFlushSequenceIdIsGreaterThanAllEditsInHFile"
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testName
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
name|r
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|hri
argument_list|,
name|TEST_UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|r
argument_list|)
expr_stmt|;
specifier|final
name|int
name|countPerFamily
init|=
literal|10
decl_stmt|;
specifier|final
name|MutableBoolean
name|goslow
init|=
operator|new
name|MutableBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// Bypass factory so I can subclass and doctor a method.
name|FSHLog
name|wal
init|=
operator|new
name|FSHLog
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
argument_list|,
name|TEST_UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
argument_list|,
name|testName
argument_list|,
name|conf
argument_list|)
block|{
annotation|@
name|Override
name|void
name|atHeadOfRingBufferEventHandlerAppend
parameter_list|()
block|{
if|if
condition|(
name|goslow
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sleeping before appending 100ms"
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|atHeadOfRingBufferEventHandlerAppend
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|)
decl_stmt|;
name|EnvironmentEdge
name|ee
init|=
name|EnvironmentEdgeManager
operator|.
name|getDelegate
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
literal|null
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|puts
operator|=
name|TestWALReplay
operator|.
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|ee
argument_list|,
name|region
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
block|}
comment|// Now assert edits made it in.
specifier|final
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|countPerFamily
operator|*
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Construct a WALEdit and add it a few times to the WAL.
name|WALEdit
name|edits
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|Put
name|p
range|:
name|puts
control|)
block|{
name|CellScanner
name|cs
init|=
name|p
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
while|while
condition|(
name|cs
operator|.
name|advance
argument_list|()
condition|)
block|{
name|edits
operator|.
name|add
argument_list|(
name|cs
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add any old cluster id.
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
init|=
operator|new
name|ArrayList
argument_list|<
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
name|clusterIds
operator|.
name|add
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now make appends run slow.
name|goslow
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countPerFamily
condition|;
name|i
operator|++
control|)
block|{
name|wal
operator|.
name|appendNoSync
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|edits
argument_list|,
name|clusterIds
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|region
operator|.
name|getSequenceId
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|flushcache
argument_list|()
expr_stmt|;
comment|// FlushResult.flushSequenceId is not visible here so go get the current sequence id.
name|long
name|currentSequenceId
init|=
name|region
operator|.
name|getSequenceId
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// Now release the appends
name|goslow
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|goslow
init|)
block|{
name|goslow
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|currentSequenceId
operator|>=
name|region
operator|.
name|getSequenceId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|region
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Write to a log file with three concurrent threads and verifying all data is written.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentWrites
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Run the HPE tool with three threads writing 3000 edits each concurrently.
comment|// When done, verify that all edits were written.
name|int
name|errCode
init|=
name|HLogPerformanceEvaluation
operator|.
name|innerMain
argument_list|(
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-threads"
block|,
literal|"3"
block|,
literal|"-verify"
block|,
literal|"-noclosefs"
block|,
literal|"-iterations"
block|,
literal|"3000"
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|errCode
argument_list|)
expr_stmt|;
block|}
comment|/**    * Just write multiple logs then split.  Before fix for HADOOP-2283, this    * would fail.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testSplit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|logdir
init|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|)
decl_stmt|;
name|HLog
name|log
init|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|hbaseDir
argument_list|,
name|HConstants
operator|.
name|HREGION_LOGDIR_NAME
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|howmany
init|=
literal|3
decl_stmt|;
name|HRegionInfo
index|[]
name|infos
init|=
operator|new
name|HRegionInfo
index|[
literal|3
index|]
decl_stmt|;
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|hbaseDir
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|tabledir
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|howmany
condition|;
name|i
operator|++
control|)
block|{
name|infos
index|[
name|i
index|]
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|infos
index|[
name|i
index|]
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"allo "
operator|+
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|infos
index|[
name|i
index|]
operator|.
name|getEncodedName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"column"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add edits for three regions.
specifier|final
name|AtomicLong
name|sequenceId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|howmany
condition|;
name|ii
operator|++
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|howmany
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|howmany
condition|;
name|j
operator|++
control|)
block|{
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|column
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column:"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|rowName
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Region "
operator|+
name|i
operator|+
literal|": "
operator|+
name|edit
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|infos
index|[
name|i
index|]
argument_list|,
name|tableName
argument_list|,
name|edit
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|splits
init|=
name|HLogSplitter
operator|.
name|split
argument_list|(
name|hbaseDir
argument_list|,
name|logdir
argument_list|,
name|oldLogDir
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|verifySplits
argument_list|(
name|splits
argument_list|,
name|howmany
argument_list|)
expr_stmt|;
name|log
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test new HDFS-265 sync.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|Broken_testSync
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// First verify that using streams all works.
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|getName
argument_list|()
operator|+
literal|".fsdos"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Method
name|syncMethod
init|=
literal|null
decl_stmt|;
try|try
block|{
name|syncMethod
operator|=
name|out
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"hflush"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
try|try
block|{
name|syncMethod
operator|=
name|out
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"sync"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"This version of Hadoop supports neither Syncable.sync() "
operator|+
literal|"nor Syncable.hflush()."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_expr_stmt
name|syncMethod
operator|.
name|invoke
argument_list|(
name|out
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|p
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|read
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|assertEquals
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|HLog
name|wal
init|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
literal|"hlogdir"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|AtomicLong
name|sequenceId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|int
name|total
init|=
literal|20
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|HLog
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_try
try|try
block|{
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|()
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|kvs
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|info
argument_list|,
name|tableName
argument_list|,
name|kvs
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
comment|// Now call sync and try reading.  Opening a Reader before you sync just
comment|// gives you EOFE.
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
comment|// Open a Reader.
name|Path
name|walPath
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|wal
operator|)
operator|.
name|computeFilename
argument_list|()
decl_stmt|;
name|reader
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry
init|=
operator|new
name|HLog
operator|.
name|Entry
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add test that checks to see that an open of a Reader works on a file
comment|// that has had a sync done on it.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|kvs
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|info
argument_list|,
name|tableName
argument_list|,
name|kvs
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
name|reader
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|>=
name|total
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// If I sync, should see double the edits.
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|reader
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
operator|*
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// Now do a test that ensures stuff works when we go over block boundary,
comment|// especially that we return good length on file.
specifier|final
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|1025
operator|*
literal|1024
index|]
decl_stmt|;
comment|// Make a 1M value.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|kvs
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|info
argument_list|,
name|tableName
argument_list|,
name|kvs
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
comment|// Now I should have written out lots of blocks.  Sync then read.
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|reader
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
operator|*
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Close it and ensure that closed, Reader gets right length also.
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|count
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|total
operator|*
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wal
operator|!=
literal|null
condition|)
name|wal
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_try

begin_function
unit|}    private
name|void
name|verifySplits
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|splits
parameter_list|,
specifier|final
name|int
name|howmany
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|howmany
operator|*
name|howmany
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Verifying="
operator|+
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Reader
name|reader
init|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|splits
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|String
name|previousRegion
init|=
literal|null
decl_stmt|;
name|long
name|seqno
init|=
operator|-
literal|1
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry
init|=
operator|new
name|HLog
operator|.
name|Entry
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|HLogKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|region
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Assert that all edits are for same region.
if|if
condition|(
name|previousRegion
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|previousRegion
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"oldseqno="
operator|+
name|seqno
operator|+
literal|", newseqno="
operator|+
name|key
operator|.
name|getLogSeqNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|seqno
operator|<
name|key
operator|.
name|getLogSeqNum
argument_list|()
argument_list|)
expr_stmt|;
name|seqno
operator|=
name|key
operator|.
name|getLogSeqNum
argument_list|()
expr_stmt|;
name|previousRegion
operator|=
name|region
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|howmany
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/*    * We pass different values to recoverFileLease() so that different code paths are covered    *    * For this test to pass, requires:    * 1. HDFS-200 (append support)    * 2. HDFS-988 (SafeMode should freeze file operations    *              [FSNamesystem.nextGenerationStampForBlock])    * 3. HDFS-142 (on restart, maintain pendingCreates)    */
end_comment

begin_function
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testAppendClose
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionInfo
name|regioninfo
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HLog
name|wal
init|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|dir
argument_list|,
literal|"hlogdir"
argument_list|,
literal|"hlogdir_archive"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|sequenceId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|total
init|=
literal|20
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|()
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|kvs
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|regioninfo
argument_list|,
name|tableName
argument_list|,
name|kvs
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
comment|// Now call sync to send the data to HDFS datanodes
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
name|int
name|namenodePort
init|=
name|cluster
operator|.
name|getNameNodePort
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|walPath
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|wal
operator|)
operator|.
name|computeFilename
argument_list|()
decl_stmt|;
comment|// Stop the cluster.  (ensure restart since we're sharing MiniDFSCluster)
try|try
block|{
name|DistributedFileSystem
name|dfs
init|=
operator|(
name|DistributedFileSystem
operator|)
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|dfs
operator|.
name|setSafeMode
argument_list|(
name|FSConstants
operator|.
name|SafeModeAction
operator|.
name|SAFEMODE_ENTER
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
try|try
block|{
comment|// wal.writer.close() will throw an exception,
comment|// but still call this since it closes the LogSyncer thread first
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|fs
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// closing FS last so DFSOutputStream can't call close
name|LOG
operator|.
name|info
argument_list|(
literal|"STOPPED first instance of the cluster"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Restart the cluster
while|while
condition|(
name|cluster
operator|.
name|isClusterUp
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Waiting for cluster to go down"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|cluster
operator|.
name|isClusterUp
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|cluster
operator|=
name|TEST_UTIL
operator|.
name|startMiniDFSClusterForTestHLog
argument_list|(
name|namenodePort
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|BindException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping.  BindException bringing up new cluster"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
name|cluster
operator|.
name|waitActive
argument_list|()
expr_stmt|;
name|fs
operator|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"STARTED second instance."
argument_list|)
expr_stmt|;
block|}
comment|// set the lease period to be 1 second so that the
comment|// namenode triggers lease recovery upon append request
name|Method
name|setLeasePeriod
init|=
name|cluster
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setLeasePeriod"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Long
operator|.
name|TYPE
block|,
name|Long
operator|.
name|TYPE
block|}
argument_list|)
decl_stmt|;
name|setLeasePeriod
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setLeasePeriod
operator|.
name|invoke
argument_list|(
name|cluster
argument_list|,
literal|1000L
argument_list|,
literal|1000L
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Now try recovering the log, like the HMaster would do
specifier|final
name|FileSystem
name|recoveredFs
init|=
name|fs
decl_stmt|;
specifier|final
name|Configuration
name|rlConf
init|=
name|conf
decl_stmt|;
class|class
name|RecoverLogThread
extends|extends
name|Thread
block|{
specifier|public
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|FSUtils
operator|.
name|getInstance
argument_list|(
name|fs
argument_list|,
name|rlConf
argument_list|)
operator|.
name|recoverFileLease
argument_list|(
name|recoveredFs
argument_list|,
name|walPath
argument_list|,
name|rlConf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
name|RecoverLogThread
name|t
init|=
operator|new
name|RecoverLogThread
argument_list|()
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Timeout after 60 sec. Without correct patches, would be an infinite loop
name|t
operator|.
name|join
argument_list|(
literal|60
operator|*
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|t
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Timed out waiting for HLog.recoverLog()"
argument_list|)
throw|;
block|}
if|if
condition|(
name|t
operator|.
name|exception
operator|!=
literal|null
condition|)
throw|throw
name|t
operator|.
name|exception
throw|;
comment|// Make sure you can read all the content
name|HLog
operator|.
name|Reader
name|reader
init|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|HLog
operator|.
name|Entry
name|entry
init|=
operator|new
name|HLog
operator|.
name|Entry
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|next
argument_list|(
name|entry
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be one KeyValue per WALEdit"
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|total
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Reset the lease period
name|setLeasePeriod
operator|.
name|invoke
argument_list|(
name|cluster
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Long
argument_list|(
literal|60000
argument_list|)
block|,
operator|new
name|Long
argument_list|(
literal|3600000
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Tests that we can write out an edit, close, and then read it back in again.    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testEditAdd
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|COL_COUNT
init|=
literal|10
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|HLog
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
name|HLog
name|log
init|=
literal|null
decl_stmt|;
try|try
block|{
name|log
operator|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|hbaseDir
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
specifier|final
name|AtomicLong
name|sequenceId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Write columns named 1, 2, 3, etc. and then values of single byte
comment|// 1, 2, 3...
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WALEdit
name|cols
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COL_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|timestamp
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|'0'
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"1"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|()
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"column"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|info
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|log
operator|.
name|startCacheFlush
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|completeCacheFlush
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|filename
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|log
operator|)
operator|.
name|computeFilename
argument_list|()
decl_stmt|;
name|log
operator|=
literal|null
expr_stmt|;
comment|// Now open a reader on the log and assert append worked.
name|reader
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|filename
argument_list|,
name|conf
argument_list|)
expr_stmt|;
comment|// Above we added all columns on a single row so we only read one
comment|// entry in the below... thats why we have '1'.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|HLog
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
break|break;
name|HLogKey
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|WALEdit
name|val
init|=
name|entry
operator|.
name|getEdit
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|key
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tableName
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
name|cell
init|=
name|val
operator|.
name|getCells
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|cell
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|'0'
argument_list|)
argument_list|,
name|cell
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|key
operator|+
literal|" "
operator|+
name|val
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|COL_COUNT
init|=
literal|10
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
name|HLog
name|log
init|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|hbaseDir
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|sequenceId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Write columns named 1, 2, 3, etc. and then values of single byte
comment|// 1, 2, 3...
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WALEdit
name|cols
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COL_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|timestamp
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|'0'
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|()
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"column"
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|hri
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|log
operator|.
name|startCacheFlush
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|completeCacheFlush
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
name|Path
name|filename
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|log
operator|)
operator|.
name|computeFilename
argument_list|()
decl_stmt|;
name|log
operator|=
literal|null
expr_stmt|;
comment|// Now open a reader on the log and assert append worked.
name|reader
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|filename
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|COL_COUNT
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|val
range|:
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tableName
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|val
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|idx
operator|+
literal|'0'
argument_list|)
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" "
operator|+
name|val
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Test that we can visit entries before they are appended    * @throws Exception    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testVisitors
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|COL_COUNT
init|=
literal|10
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|HLog
name|log
init|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|hbaseDir
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|sequenceId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|DumbWALActionsListener
name|visitor
init|=
operator|new
name|DumbWALActionsListener
argument_list|()
decl_stmt|;
name|log
operator|.
name|registerWALActionsListener
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|()
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"column"
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COL_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|cols
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|timestamp
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
name|i
operator|+
literal|'0'
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|hri
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|COL_COUNT
argument_list|,
name|visitor
operator|.
name|increments
argument_list|)
expr_stmt|;
name|log
operator|.
name|unregisterWALActionsListener
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|WALEdit
name|cols
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
literal|11
argument_list|)
argument_list|)
argument_list|,
name|timestamp
argument_list|,
operator|new
name|byte
index|[]
block|{
call|(
name|byte
call|)
argument_list|(
literal|11
operator|+
literal|'0'
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|hri
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COL_COUNT
argument_list|,
name|visitor
operator|.
name|increments
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testLogCleaning
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testLogCleaning"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testLogCleaning"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testLogCleaning2"
argument_list|)
decl_stmt|;
name|HLog
name|log
init|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|hbaseDir
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|sequenceId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri2
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName2
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
comment|// Add a single edit and make sure that rolling won't remove the file
comment|// Before HBASE-3198 it used to delete it
name|addEdits
argument_list|(
name|log
argument_list|,
name|hri
argument_list|,
name|tableName
argument_list|,
literal|1
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|log
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// See if there's anything wrong with more than 1 edit
name|addEdits
argument_list|(
name|log
argument_list|,
name|hri
argument_list|,
name|tableName
argument_list|,
literal|2
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|log
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now mix edits from 2 regions, still no flushing
name|addEdits
argument_list|(
name|log
argument_list|,
name|hri
argument_list|,
name|tableName
argument_list|,
literal|1
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|addEdits
argument_list|(
name|log
argument_list|,
name|hri2
argument_list|,
name|tableName2
argument_list|,
literal|1
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|addEdits
argument_list|(
name|log
argument_list|,
name|hri
argument_list|,
name|tableName
argument_list|,
literal|1
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|addEdits
argument_list|(
name|log
argument_list|,
name|hri2
argument_list|,
name|tableName2
argument_list|,
literal|1
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|log
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flush the first region, we expect to see the first two files getting
comment|// archived. We need to append something or writer won't be rolled.
name|addEdits
argument_list|(
name|log
argument_list|,
name|hri2
argument_list|,
name|tableName2
argument_list|,
literal|1
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|log
operator|.
name|startCacheFlush
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|completeCacheFlush
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|log
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Flush the second region, which removes all the remaining output files
comment|// since the oldest was completely flushed and the two others only contain
comment|// flush information
name|addEdits
argument_list|(
name|log
argument_list|,
name|hri2
argument_list|,
name|tableName2
argument_list|,
literal|1
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
name|log
operator|.
name|startCacheFlush
argument_list|(
name|hri2
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|completeCacheFlush
argument_list|(
name|hri2
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|log
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFailedToCreateHLogIfParentRenamed
parameter_list|()
throws|throws
name|IOException
block|{
name|FSHLog
name|log
init|=
operator|(
name|FSHLog
operator|)
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|hbaseDir
argument_list|,
literal|"testFailedToCreateHLogIfParentRenamed"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|long
name|filenum
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|log
operator|.
name|computeFilename
argument_list|(
name|filenum
argument_list|)
decl_stmt|;
name|HLogFactory
operator|.
name|createWALWriter
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|path
operator|=
name|log
operator|.
name|computeFilename
argument_list|(
name|filenum
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Path
name|newPath
init|=
operator|new
name|Path
argument_list|(
name|parent
operator|.
name|getParent
argument_list|()
argument_list|,
name|parent
operator|.
name|getName
argument_list|()
operator|+
literal|"-splitting"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|parent
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|HLogFactory
operator|.
name|createWALWriter
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"It should fail to create the new WAL"
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testGetServerNameFromHLogDirectoryName
parameter_list|()
throws|throws
name|IOException
block|{
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"hn"
argument_list|,
literal|450
argument_list|,
literal|1398
argument_list|)
decl_stmt|;
name|String
name|hl
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
operator|+
literal|"/"
operator|+
name|HLogUtil
operator|.
name|getHLogDirectoryName
argument_list|(
name|sn
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Must not throw exception
name|Assert
operator|.
name|assertNull
argument_list|(
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|conf
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|conf
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|conf
argument_list|,
literal|"                  "
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|conf
argument_list|,
name|hl
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|conf
argument_list|,
name|hl
operator|+
literal|"qdf"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|conf
argument_list|,
literal|"sfqf"
operator|+
name|hl
operator|+
literal|"qdf"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|wals
init|=
literal|"/WALs/"
decl_stmt|;
name|ServerName
name|parsed
init|=
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|conf
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|wals
operator|+
name|sn
operator|+
literal|"/localhost%2C32984%2C1343316388997.1343316390417"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"standard"
argument_list|,
name|sn
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
name|parsed
operator|=
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|conf
argument_list|,
name|hl
operator|+
literal|"/qdf"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"subdir"
argument_list|,
name|sn
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
name|parsed
operator|=
name|HLogUtil
operator|.
name|getServerNameFromHLogDirectoryName
argument_list|(
name|conf
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|wals
operator|+
name|sn
operator|+
literal|"-splitting/localhost%3A57020.1340474893931"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"split"
argument_list|,
name|sn
argument_list|,
name|parsed
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * A loaded WAL coprocessor won't break existing HLog test cases.    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testWALCoprocessorLoaded
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test to see whether the coprocessor is loaded or not.
name|HLog
name|log
init|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|hbaseDir
argument_list|,
name|getName
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|WALCoprocessorHost
name|host
init|=
name|log
operator|.
name|getCoprocessorHost
argument_list|()
decl_stmt|;
name|Coprocessor
name|c
init|=
name|host
operator|.
name|findCoprocessor
argument_list|(
name|SampleRegionWALObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
name|log
operator|.
name|closeAndDelete
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|addEdits
parameter_list|(
name|HLog
name|log
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|int
name|times
parameter_list|,
name|AtomicLong
name|sequenceId
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|()
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"row"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
condition|;
name|i
operator|++
control|)
block|{
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WALEdit
name|cols
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|row
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|append
argument_list|(
name|hri
argument_list|,
name|tableName
argument_list|,
name|cols
argument_list|,
name|timestamp
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testReadLegacyLog
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|columnCount
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|recordCount
init|=
literal|5
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"temphlog"
argument_list|)
decl_stmt|;
name|SequenceFileLogWriter
name|sflw
init|=
literal|null
decl_stmt|;
name|HLog
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// Write log in pre-PB format.
name|sflw
operator|=
operator|new
name|SequenceFileLogWriter
argument_list|()
expr_stmt|;
name|sflw
operator|.
name|init
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recordCount
condition|;
operator|++
name|i
control|)
block|{
name|HLogKey
name|key
init|=
operator|new
name|HLogKey
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|i
argument_list|,
name|timestamp
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnCount
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"column"
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|i
operator|+
literal|""
operator|+
name|j
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|row
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sflw
operator|.
name|append
argument_list|(
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
name|key
argument_list|,
name|edit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sflw
operator|.
name|sync
argument_list|()
expr_stmt|;
name|sflw
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now read the log using standard means.
name|reader
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|instanceof
name|SequenceFileLogReader
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recordCount
condition|;
operator|++
name|i
control|)
block|{
name|HLog
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|columnCount
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|val
range|:
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|val
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|i
operator|+
literal|""
operator|+
name|idx
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|HLog
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|sflw
operator|!=
literal|null
condition|)
block|{
name|sflw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * Reads the WAL with and without WALTrailer.    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testWALTrailer
parameter_list|()
throws|throws
name|IOException
block|{
comment|// read With trailer.
name|doRead
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// read without trailer
name|doRead
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Appends entries in the WAL and reads it.    * @param withTrailer If 'withTrailer' is true, it calls a close on the WALwriter before reading    *          so that a trailer is appended to the WAL. Otherwise, it starts reading after the sync    *          call. This means that reader is not aware of the trailer. In this scenario, if the    *          reader tries to read the trailer in its next() call, it returns false from    *          ProtoBufLogReader.    * @throws IOException    */
end_comment

begin_function
specifier|private
name|void
name|doRead
parameter_list|(
name|boolean
name|withTrailer
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|columnCount
init|=
literal|5
decl_stmt|;
specifier|final
name|int
name|recordCount
init|=
literal|5
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tablename"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"temphlog"
argument_list|)
decl_stmt|;
comment|// delete the log if already exists, for test only
name|fs
operator|.
name|delete
argument_list|(
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HLog
operator|.
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
name|HLog
operator|.
name|Reader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|dir
argument_list|)
expr_stmt|;
comment|// Write log in pb format.
name|writer
operator|=
name|HLogFactory
operator|.
name|createWALWriter
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recordCount
condition|;
operator|++
name|i
control|)
block|{
name|HLogKey
name|key
init|=
operator|new
name|HLogKey
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|i
argument_list|,
name|timestamp
argument_list|,
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
argument_list|)
decl_stmt|;
name|WALEdit
name|edit
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|columnCount
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"column"
operator|+
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|i
operator|+
literal|""
operator|+
name|j
decl_stmt|;
name|edit
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|row
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
operator|new
name|HLog
operator|.
name|Entry
argument_list|(
name|key
argument_list|,
name|edit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|sync
argument_list|()
expr_stmt|;
if|if
condition|(
name|withTrailer
condition|)
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now read the log using standard means.
name|reader
operator|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|path
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reader
operator|instanceof
name|ProtobufLogReader
argument_list|)
expr_stmt|;
if|if
condition|(
name|withTrailer
condition|)
block|{
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getWALTrailer
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|reader
operator|.
name|getWALTrailer
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|recordCount
condition|;
operator|++
name|i
control|)
block|{
name|HLog
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|columnCount
argument_list|,
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|val
range|:
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|row
argument_list|,
name|val
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|i
operator|+
literal|""
operator|+
name|idx
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|,
name|val
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|HLog
operator|.
name|Entry
name|entry
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * tests the log comparator. Ensure that we are not mixing meta logs with non-meta logs (throws    * exception if we do). Comparison is based on the timestamp present in the wal name.    * @throws Exception    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testHLogComparator
parameter_list|()
throws|throws
name|Exception
block|{
name|HLog
name|hlog1
init|=
literal|null
decl_stmt|;
name|HLog
name|hlogMeta
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hlog1
operator|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Log obtained is: "
operator|+
name|hlog1
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|Path
argument_list|>
name|comp
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|hlog1
operator|)
operator|.
name|LOG_NAME_COMPARATOR
decl_stmt|;
name|Path
name|p1
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|hlog1
operator|)
operator|.
name|computeFilename
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|Path
name|p2
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|hlog1
operator|)
operator|.
name|computeFilename
argument_list|(
literal|12
argument_list|)
decl_stmt|;
comment|// comparing with itself returns 0
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|p1
argument_list|,
name|p1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// comparing with different filenum.
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|hlogMeta
operator|=
name|HLogFactory
operator|.
name|createMetaHLog
argument_list|(
name|fs
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|Path
argument_list|>
name|compMeta
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|hlogMeta
operator|)
operator|.
name|LOG_NAME_COMPARATOR
decl_stmt|;
name|Path
name|p1WithMeta
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|hlogMeta
operator|)
operator|.
name|computeFilename
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|Path
name|p2WithMeta
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|hlogMeta
operator|)
operator|.
name|computeFilename
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|compMeta
operator|.
name|compare
argument_list|(
name|p1WithMeta
argument_list|,
name|p1WithMeta
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compMeta
operator|.
name|compare
argument_list|(
name|p1WithMeta
argument_list|,
name|p2WithMeta
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// mixing meta and non-meta logs gives error
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
try|try
block|{
name|comp
operator|.
name|compare
argument_list|(
name|p1WithMeta
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Comparator doesn't complain while checking meta log files"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|boolean
name|exMeta
init|=
literal|false
decl_stmt|;
try|try
block|{
name|compMeta
operator|.
name|compare
argument_list|(
name|p1WithMeta
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exMeta
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Meta comparator doesn't complain while checking log files"
argument_list|,
name|exMeta
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hlog1
operator|!=
literal|null
condition|)
name|hlog1
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|hlogMeta
operator|!=
literal|null
condition|)
name|hlogMeta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Tests wal archiving by adding data, doing flushing/rolling and checking we archive old logs    * and also don't archive "live logs" (that is, a log with un-flushed entries).    *<p>    * This is what it does:    * It creates two regions, and does a series of inserts along with log rolling.    * Whenever a WAL is rolled, FSHLog checks previous wals for archiving. A wal is eligible for    * archiving if for all the regions which have entries in that wal file, have flushed - past    * their maximum sequence id in that wal file.    *<p>    * @throws IOException    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testWALArchiving
parameter_list|()
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"testWALArchiving"
argument_list|)
expr_stmt|;
name|TableName
name|table1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
name|TableName
name|table2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t2"
argument_list|)
decl_stmt|;
name|HLog
name|hlog
init|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
name|hri1
init|=
operator|new
name|HRegionInfo
argument_list|(
name|table1
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri2
init|=
operator|new
name|HRegionInfo
argument_list|(
name|table2
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
comment|// ensure that we don't split the regions.
name|hri1
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hri2
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// variables to mock region sequenceIds.
specifier|final
name|AtomicLong
name|sequenceId1
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|sequenceId2
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// start with the testing logic: insert a waledit, and roll writer
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri1
argument_list|,
name|table1
argument_list|,
literal|1
argument_list|,
name|sequenceId1
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// assert that the wal is rolled
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// add edits in the second wal file, and roll writer.
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri1
argument_list|,
name|table1
argument_list|,
literal|1
argument_list|,
name|sequenceId1
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// assert that the wal is rolled
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a waledit to table1, and flush the region.
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri1
argument_list|,
name|table1
argument_list|,
literal|3
argument_list|,
name|sequenceId1
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hlog
argument_list|,
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// roll log; all old logs should be archived.
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// add an edit to table2, and roll writer
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri2
argument_list|,
name|table2
argument_list|,
literal|1
argument_list|,
name|sequenceId2
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// add edits for table1, and roll writer
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri1
argument_list|,
name|table1
argument_list|,
literal|2
argument_list|,
name|sequenceId1
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// add edits for table2, and flush hri1.
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri2
argument_list|,
name|table2
argument_list|,
literal|2
argument_list|,
name|sequenceId2
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hlog
argument_list|,
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// the log : region-sequenceId map is
comment|// log1: region2 (unflushed)
comment|// log2: region1 (flushed)
comment|// log3: region2 (unflushed)
comment|// roll the writer; log2 should be archived.
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush region2, and all logs should be archived.
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri2
argument_list|,
name|table2
argument_list|,
literal|2
argument_list|,
name|sequenceId2
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hlog
argument_list|,
name|hri2
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hlog
operator|!=
literal|null
condition|)
name|hlog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * On rolling a wal after reaching the threshold, {@link HLog#rollWriter()} returns the list of    * regions which should be flushed in order to archive the oldest wal file.    *<p>    * This method tests this behavior by inserting edits and rolling the wal enough times to reach    * the max number of logs threshold. It checks whether we get the "right regions" for flush on    * rolling the wal.    * @throws Exception    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testFindMemStoresEligibleForFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"testFindMemStoresEligibleForFlush"
argument_list|)
expr_stmt|;
name|Configuration
name|conf1
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf1
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|HLog
name|hlog
init|=
name|HLogFactory
operator|.
name|createHLog
argument_list|(
name|fs
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf1
argument_list|)
argument_list|,
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|conf1
argument_list|)
decl_stmt|;
name|TableName
name|t1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
name|TableName
name|t2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t2"
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri1
init|=
operator|new
name|HRegionInfo
argument_list|(
name|t1
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri2
init|=
operator|new
name|HRegionInfo
argument_list|(
name|t2
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
comment|// variables to mock region sequenceIds
specifier|final
name|AtomicLong
name|sequenceId1
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|sequenceId2
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// add edits and roll the wal
try|try
block|{
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri1
argument_list|,
name|t1
argument_list|,
literal|2
argument_list|,
name|sequenceId1
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// add some more edits and roll the wal. This would reach the log number threshold
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri1
argument_list|,
name|t1
argument_list|,
literal|2
argument_list|,
name|sequenceId1
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// with above rollWriter call, the max logs limit is reached.
name|assertTrue
argument_list|(
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// get the regions to flush; since there is only one region in the oldest wal, it should
comment|// return only one region.
name|byte
index|[]
index|[]
name|regionsToFlush
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|findRegionsToForceFlush
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regionsToFlush
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regionsToFlush
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// insert edits in second region
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri2
argument_list|,
name|t2
argument_list|,
literal|2
argument_list|,
name|sequenceId2
argument_list|)
expr_stmt|;
comment|// get the regions to flush, it should still read region1.
name|regionsToFlush
operator|=
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|findRegionsToForceFlush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|regionsToFlush
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regionsToFlush
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// flush region 1, and roll the wal file. Only last wal which has entries for region1 should
comment|// remain.
name|flushRegion
argument_list|(
name|hlog
argument_list|,
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// only one wal should remain now (that is for the second region).
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush the second region
name|flushRegion
argument_list|(
name|hlog
argument_list|,
name|hri2
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// no wal should remain now.
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// add edits both to region 1 and region 2, and roll.
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri1
argument_list|,
name|t1
argument_list|,
literal|2
argument_list|,
name|sequenceId1
argument_list|)
expr_stmt|;
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri2
argument_list|,
name|t2
argument_list|,
literal|2
argument_list|,
name|sequenceId2
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// add edits and roll the writer, to reach the max logs limit.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri1
argument_list|,
name|t1
argument_list|,
literal|2
argument_list|,
name|sequenceId1
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// it should return two regions to flush, as the oldest wal file has entries
comment|// for both regions.
name|regionsToFlush
operator|=
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|findRegionsToForceFlush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|regionsToFlush
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// flush both regions
name|flushRegion
argument_list|(
name|hlog
argument_list|,
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|hlog
argument_list|,
name|hri2
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add an edit to region1, and roll the wal.
name|addEdits
argument_list|(
name|hlog
argument_list|,
name|hri1
argument_list|,
name|t1
argument_list|,
literal|2
argument_list|,
name|sequenceId1
argument_list|)
expr_stmt|;
comment|// tests partial flush: roll on a partial flush, and ensure that wal is not archived.
name|hlog
operator|.
name|startCacheFlush
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|hlog
operator|.
name|completeCacheFlush
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|FSHLog
operator|)
name|hlog
operator|)
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hlog
operator|!=
literal|null
condition|)
name|hlog
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Simulates HLog append ops for a region and tests    * {@link FSHLog#areAllRegionsFlushed(Map, Map, Map)} API.    * It compares the region sequenceIds with oldestFlushing and oldestUnFlushed entries.    * If a region's entries are larger than min of (oldestFlushing, oldestUnFlushed), then the    * region should be flushed before archiving this WAL.   */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testAllRegionsFlushed
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"testAllRegionsFlushed"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|oldestFlushingSeqNo
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|oldestUnFlushedSeqNo
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|seqNo
init|=
operator|new
name|HashMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// create a table
name|TableName
name|t1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
comment|// create a region
name|HRegionInfo
name|hri1
init|=
operator|new
name|HRegionInfo
argument_list|(
name|t1
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
comment|// variables to mock region sequenceIds
specifier|final
name|AtomicLong
name|sequenceId1
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// test empty map
name|assertTrue
argument_list|(
name|FSHLog
operator|.
name|areAllRegionsFlushed
argument_list|(
name|seqNo
argument_list|,
name|oldestFlushingSeqNo
argument_list|,
name|oldestUnFlushedSeqNo
argument_list|)
argument_list|)
expr_stmt|;
comment|// add entries in the region
name|seqNo
operator|.
name|put
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|sequenceId1
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|oldestUnFlushedSeqNo
operator|.
name|put
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|sequenceId1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// should say region1 is not flushed.
name|assertFalse
argument_list|(
name|FSHLog
operator|.
name|areAllRegionsFlushed
argument_list|(
name|seqNo
argument_list|,
name|oldestFlushingSeqNo
argument_list|,
name|oldestUnFlushedSeqNo
argument_list|)
argument_list|)
expr_stmt|;
comment|// test with entries in oldestFlushing map.
name|oldestUnFlushedSeqNo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|oldestFlushingSeqNo
operator|.
name|put
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|sequenceId1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|FSHLog
operator|.
name|areAllRegionsFlushed
argument_list|(
name|seqNo
argument_list|,
name|oldestFlushingSeqNo
argument_list|,
name|oldestUnFlushedSeqNo
argument_list|)
argument_list|)
expr_stmt|;
comment|// simulate region flush, i.e., clear oldestFlushing and oldestUnflushed maps
name|oldestFlushingSeqNo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|oldestUnFlushedSeqNo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|FSHLog
operator|.
name|areAllRegionsFlushed
argument_list|(
name|seqNo
argument_list|,
name|oldestFlushingSeqNo
argument_list|,
name|oldestUnFlushedSeqNo
argument_list|)
argument_list|)
expr_stmt|;
comment|// insert some large values for region1
name|oldestUnFlushedSeqNo
operator|.
name|put
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|1000l
argument_list|)
expr_stmt|;
name|seqNo
operator|.
name|put
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|1500l
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|FSHLog
operator|.
name|areAllRegionsFlushed
argument_list|(
name|seqNo
argument_list|,
name|oldestFlushingSeqNo
argument_list|,
name|oldestUnFlushedSeqNo
argument_list|)
argument_list|)
expr_stmt|;
comment|// tests when oldestUnFlushed/oldestFlushing contains larger value.
comment|// It means region is flushed.
name|oldestFlushingSeqNo
operator|.
name|put
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|1200l
argument_list|)
expr_stmt|;
name|oldestUnFlushedSeqNo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|seqNo
operator|.
name|put
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|1199l
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|FSHLog
operator|.
name|areAllRegionsFlushed
argument_list|(
name|seqNo
argument_list|,
name|oldestFlushingSeqNo
argument_list|,
name|oldestUnFlushedSeqNo
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * helper method to simulate region flush for a WAL.    * @param hlog    * @param regionEncodedName    */
end_comment

begin_function
specifier|private
name|void
name|flushRegion
parameter_list|(
name|HLog
name|hlog
parameter_list|,
name|byte
index|[]
name|regionEncodedName
parameter_list|)
block|{
name|hlog
operator|.
name|startCacheFlush
argument_list|(
name|regionEncodedName
argument_list|)
expr_stmt|;
name|hlog
operator|.
name|completeCacheFlush
argument_list|(
name|regionEncodedName
argument_list|)
expr_stmt|;
block|}
end_function

begin_class
specifier|static
class|class
name|DumbWALActionsListener
implements|implements
name|WALActionsListener
block|{
name|int
name|increments
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visitLogEntryBeforeWrite
parameter_list|(
name|HRegionInfo
name|info
parameter_list|,
name|HLogKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
block|{
name|increments
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLogEntryBeforeWrite
parameter_list|(
name|HTableDescriptor
name|htd
parameter_list|,
name|HLogKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
block|{
comment|//To change body of implemented methods use File | Settings | File Templates.
name|increments
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preLogRoll
parameter_list|(
name|Path
name|oldFile
parameter_list|,
name|Path
name|newFile
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|void
name|postLogRoll
parameter_list|(
name|Path
name|oldFile
parameter_list|,
name|Path
name|newFile
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|void
name|preLogArchive
parameter_list|(
name|Path
name|oldFile
parameter_list|,
name|Path
name|newFile
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|void
name|postLogArchive
parameter_list|(
name|Path
name|oldFile
parameter_list|,
name|Path
name|newFile
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|void
name|logRollRequested
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|void
name|logCloseRequested
parameter_list|()
block|{
comment|// not interested
block|}
block|}
end_class

unit|}
end_unit

