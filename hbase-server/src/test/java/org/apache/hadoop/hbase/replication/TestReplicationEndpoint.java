begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doNothing
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|HBaseInterClusterReplicationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|MetricsReplicationGlobalSourceSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|MetricsReplicationSourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|MetricsReplicationSourceSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|MetricsReplicationSourceSourceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|MetricsSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DynamicMetricsRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests ReplicationSource and ReplicationEndpoint interactions  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationEndpoint
extends|extends
name|TestReplicationBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestReplicationEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|int
name|numRegionServers
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TestReplicationBase
operator|.
name|setUpBeforeClass
argument_list|()
expr_stmt|;
name|numRegionServers
operator|=
name|UTIL1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TestReplicationBase
operator|.
name|tearDownAfterClass
argument_list|()
expr_stmt|;
comment|// check stop is called
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ReplicationEndpointForTest
operator|.
name|stoppedCount
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationEndpointForTest
operator|.
name|contructedCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ReplicationEndpointForTest
operator|.
name|startedCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ReplicationEndpointForTest
operator|.
name|replicateCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ReplicationEndpointReturningFalse
operator|.
name|replicated
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ReplicationEndpointForTest
operator|.
name|lastEntries
operator|=
literal|null
expr_stmt|;
specifier|final
name|List
argument_list|<
name|RegionServerThread
argument_list|>
name|rsThreads
init|=
name|UTIL1
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|rs
range|:
name|rsThreads
control|)
block|{
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|rollWALWriter
argument_list|(
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Wait for  all log roll to finish
name|UTIL1
operator|.
name|waitFor
argument_list|(
literal|3000
argument_list|,
operator|new
name|Waiter
operator|.
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|RegionServerThread
name|rs
range|:
name|rsThreads
control|)
block|{
if|if
condition|(
operator|!
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|walRollRequestFinished
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|explainFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|logRollInProgressRsList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|rs
range|:
name|rsThreads
control|)
block|{
if|if
condition|(
operator|!
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|walRollRequestFinished
argument_list|()
condition|)
block|{
name|logRollInProgressRsList
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getRegionServer
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|"Still waiting for log roll on regionservers: "
operator|+
name|logRollInProgressRsList
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCustomReplicationEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test installing a custom replication endpoint other than the default one.
name|admin
operator|.
name|addPeer
argument_list|(
literal|"testCustomReplicationEndpoint"
argument_list|,
operator|new
name|ReplicationPeerConfig
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|ZKConfig
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|CONF1
argument_list|)
argument_list|)
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|ReplicationEndpointForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// check whether the class has been constructed and started
name|Waiter
operator|.
name|waitFor
argument_list|(
name|CONF1
argument_list|,
literal|60000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ReplicationEndpointForTest
operator|.
name|contructedCount
operator|.
name|get
argument_list|()
operator|>=
name|numRegionServers
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|CONF1
argument_list|,
literal|60000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ReplicationEndpointForTest
operator|.
name|startedCount
operator|.
name|get
argument_list|()
operator|>=
name|numRegionServers
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ReplicationEndpointForTest
operator|.
name|replicateCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// now replicate some data.
name|doPut
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row42"
argument_list|)
argument_list|)
expr_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|CONF1
argument_list|,
literal|60000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ReplicationEndpointForTest
operator|.
name|replicateCount
operator|.
name|get
argument_list|()
operator|>=
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|doAssert
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row42"
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeer
argument_list|(
literal|"testCustomReplicationEndpoint"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicationEndpointReturnsFalseOnReplicate
parameter_list|()
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ReplicationEndpointForTest
operator|.
name|replicateCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|ReplicationEndpointReturningFalse
operator|.
name|replicated
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|peerCount
init|=
name|admin
operator|.
name|getPeersCount
argument_list|()
decl_stmt|;
specifier|final
name|String
name|id
init|=
literal|"testReplicationEndpointReturnsFalseOnReplicate"
decl_stmt|;
name|admin
operator|.
name|addPeer
argument_list|(
name|id
argument_list|,
operator|new
name|ReplicationPeerConfig
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|ZKConfig
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|CONF1
argument_list|)
argument_list|)
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|ReplicationEndpointReturningFalse
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// This test is flakey and then there is so much stuff flying around in here its, hard to
comment|// debug.  Peer needs to be up for the edit to make it across. This wait on
comment|// peer count seems to be a hack that has us not progress till peer is up.
if|if
condition|(
name|admin
operator|.
name|getPeersCount
argument_list|()
operator|<=
name|peerCount
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting on peercount to go up from "
operator|+
name|peerCount
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|// now replicate some data
name|doPut
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|CONF1
argument_list|,
literal|60000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Looks like replication endpoint returns false unless we put more than 10 edits. We
comment|// only send over one edit.
name|int
name|count
init|=
name|ReplicationEndpointForTest
operator|.
name|replicateCount
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"count="
operator|+
name|count
argument_list|)
expr_stmt|;
return|return
name|ReplicationEndpointReturningFalse
operator|.
name|replicated
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|ReplicationEndpointReturningFalse
operator|.
name|ex
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ReplicationEndpointReturningFalse
operator|.
name|ex
operator|.
name|get
argument_list|()
throw|;
block|}
name|admin
operator|.
name|removePeer
argument_list|(
literal|"testReplicationEndpointReturnsFalseOnReplicate"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterClusterReplication
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|id
init|=
literal|"testInterClusterReplication"
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|UTIL1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|totEdits
init|=
literal|0
decl_stmt|;
comment|// Make sure edits are spread across regions because we do region based batching
comment|// before shipping edits.
for|for
control|(
name|HRegion
name|region
range|:
name|regions
control|)
block|{
name|RegionInfo
name|hri
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|hri
operator|.
name|getStartKey
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|row
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|totEdits
operator|++
expr_stmt|;
block|}
block|}
block|}
name|admin
operator|.
name|addPeer
argument_list|(
name|id
argument_list|,
operator|new
name|ReplicationPeerConfig
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|ZKConfig
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|CONF2
argument_list|)
argument_list|)
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|InterClusterReplicationEndpointForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numEdits
init|=
name|totEdits
decl_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|CONF1
argument_list|,
literal|30000
argument_list|,
operator|new
name|Waiter
operator|.
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|InterClusterReplicationEndpointForTest
operator|.
name|replicateCount
operator|.
name|get
argument_list|()
operator|==
name|numEdits
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|explainFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|failure
init|=
literal|"Failed to replicate all edits, expected = "
operator|+
name|numEdits
operator|+
literal|" replicated = "
operator|+
name|InterClusterReplicationEndpointForTest
operator|.
name|replicateCount
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|failure
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeer
argument_list|(
literal|"testInterClusterReplication"
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|deleteTableData
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWALEntryFilterFromReplicationEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|ZKConfig
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|CONF1
argument_list|)
argument_list|)
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|ReplicationEndpointWithWALEntryFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// test that we can create mutliple WALFilters reflectively
name|rpc
operator|.
name|getConfiguration
argument_list|()
operator|.
name|put
argument_list|(
name|BaseReplicationEndpoint
operator|.
name|REPLICATION_WALENTRYFILTER_CONFIG_KEY
argument_list|,
name|EverythingPassesWALEntryFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|EverythingPassesWALEntryFilterSubclass
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addPeer
argument_list|(
literal|"testWALEntryFilterFromReplicationEndpoint"
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
comment|// now replicate some data.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|CONF1
argument_list|)
init|)
block|{
name|doPut
argument_list|(
name|connection
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
expr_stmt|;
name|doPut
argument_list|(
name|connection
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|doPut
argument_list|(
name|connection
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Waiter
operator|.
name|waitFor
argument_list|(
name|CONF1
argument_list|,
literal|60000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ReplicationEndpointForTest
operator|.
name|replicateCount
operator|.
name|get
argument_list|()
operator|>=
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|ReplicationEndpointWithWALEntryFilter
operator|.
name|ex
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|//make sure our reflectively created filter is in the filter chain
name|Assert
operator|.
name|assertTrue
argument_list|(
name|EverythingPassesWALEntryFilter
operator|.
name|hasPassedAnEntry
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeer
argument_list|(
literal|"testWALEntryFilterFromReplicationEndpoint"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWALEntryFilterAddValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|ZKConfig
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|CONF1
argument_list|)
argument_list|)
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|ReplicationEndpointWithWALEntryFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// test that we can create mutliple WALFilters reflectively
name|rpc
operator|.
name|getConfiguration
argument_list|()
operator|.
name|put
argument_list|(
name|BaseReplicationEndpoint
operator|.
name|REPLICATION_WALENTRYFILTER_CONFIG_KEY
argument_list|,
literal|"IAmNotARealWalEntryFilter"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addPeer
argument_list|(
literal|"testWALEntryFilterAddValidation"
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testWALEntryFilterUpdateValidation
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|ZKConfig
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|CONF1
argument_list|)
argument_list|)
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|ReplicationEndpointWithWALEntryFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// test that we can create mutliple WALFilters reflectively
name|rpc
operator|.
name|getConfiguration
argument_list|()
operator|.
name|put
argument_list|(
name|BaseReplicationEndpoint
operator|.
name|REPLICATION_WALENTRYFILTER_CONFIG_KEY
argument_list|,
literal|"IAmNotARealWalEntryFilter"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updatePeerConfig
argument_list|(
literal|"testWALEntryFilterUpdateValidation"
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetricsSourceBaseSourcePassthrough
parameter_list|()
block|{
comment|/*      * The replication MetricsSource wraps a MetricsReplicationSourceSourceImpl and a      * MetricsReplicationGlobalSourceSource, so that metrics get written to both namespaces. Both of      * those classes wrap a MetricsReplicationSourceImpl that implements BaseSource, which allows      * for custom JMX metrics. This test checks to make sure the BaseSource decorator logic on      * MetricsSource actually calls down through the two layers of wrapping to the actual      * BaseSource.      */
name|String
name|id
init|=
literal|"id"
decl_stmt|;
name|DynamicMetricsRegistry
name|mockRegistry
init|=
name|mock
argument_list|(
name|DynamicMetricsRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|MetricsReplicationSourceImpl
name|singleRms
init|=
name|mock
argument_list|(
name|MetricsReplicationSourceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|singleRms
operator|.
name|getMetricsRegistry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRegistry
argument_list|)
expr_stmt|;
name|MetricsReplicationSourceImpl
name|globalRms
init|=
name|mock
argument_list|(
name|MetricsReplicationSourceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|globalRms
operator|.
name|getMetricsRegistry
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mockRegistry
argument_list|)
expr_stmt|;
name|MetricsReplicationSourceSource
name|singleSourceSource
init|=
operator|new
name|MetricsReplicationSourceSourceImpl
argument_list|(
name|singleRms
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|MetricsReplicationSourceSource
name|globalSourceSource
init|=
operator|new
name|MetricsReplicationGlobalSourceSource
argument_list|(
name|globalRms
argument_list|)
decl_stmt|;
name|MetricsReplicationSourceSource
name|spyglobalSourceSource
init|=
name|spy
argument_list|(
name|globalSourceSource
argument_list|)
decl_stmt|;
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|spyglobalSourceSource
argument_list|)
operator|.
name|incrFailedRecoveryQueue
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|MetricsReplicationSourceSource
argument_list|>
name|singleSourceSourceByTable
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MetricsSource
name|source
init|=
operator|new
name|MetricsSource
argument_list|(
name|id
argument_list|,
name|singleSourceSource
argument_list|,
name|spyglobalSourceSource
argument_list|,
name|singleSourceSourceByTable
argument_list|)
decl_stmt|;
name|String
name|gaugeName
init|=
literal|"gauge"
decl_stmt|;
name|String
name|singleGaugeName
init|=
literal|"source.id."
operator|+
name|gaugeName
decl_stmt|;
name|String
name|globalGaugeName
init|=
literal|"source."
operator|+
name|gaugeName
decl_stmt|;
name|long
name|delta
init|=
literal|1
decl_stmt|;
name|String
name|counterName
init|=
literal|"counter"
decl_stmt|;
name|String
name|singleCounterName
init|=
literal|"source.id."
operator|+
name|counterName
decl_stmt|;
name|String
name|globalCounterName
init|=
literal|"source."
operator|+
name|counterName
decl_stmt|;
name|long
name|count
init|=
literal|2
decl_stmt|;
name|source
operator|.
name|decGauge
argument_list|(
name|gaugeName
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|source
operator|.
name|getMetricsContext
argument_list|()
expr_stmt|;
name|source
operator|.
name|getMetricsDescription
argument_list|()
expr_stmt|;
name|source
operator|.
name|getMetricsJmxContext
argument_list|()
expr_stmt|;
name|source
operator|.
name|getMetricsName
argument_list|()
expr_stmt|;
name|source
operator|.
name|incCounters
argument_list|(
name|counterName
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|source
operator|.
name|incGauge
argument_list|(
name|gaugeName
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|source
operator|.
name|init
argument_list|()
expr_stmt|;
name|source
operator|.
name|removeMetric
argument_list|(
name|gaugeName
argument_list|)
expr_stmt|;
name|source
operator|.
name|setGauge
argument_list|(
name|gaugeName
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|source
operator|.
name|updateHistogram
argument_list|(
name|counterName
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|source
operator|.
name|incrFailedRecoveryQueue
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|singleRms
argument_list|)
operator|.
name|decGauge
argument_list|(
name|singleGaugeName
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|globalRms
argument_list|)
operator|.
name|decGauge
argument_list|(
name|globalGaugeName
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|globalRms
argument_list|)
operator|.
name|getMetricsContext
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|globalRms
argument_list|)
operator|.
name|getMetricsJmxContext
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|globalRms
argument_list|)
operator|.
name|getMetricsName
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|singleRms
argument_list|)
operator|.
name|incCounters
argument_list|(
name|singleCounterName
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|globalRms
argument_list|)
operator|.
name|incCounters
argument_list|(
name|globalCounterName
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|singleRms
argument_list|)
operator|.
name|incGauge
argument_list|(
name|singleGaugeName
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|globalRms
argument_list|)
operator|.
name|incGauge
argument_list|(
name|globalGaugeName
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|globalRms
argument_list|)
operator|.
name|init
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|singleRms
argument_list|)
operator|.
name|removeMetric
argument_list|(
name|singleGaugeName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|globalRms
argument_list|)
operator|.
name|removeMetric
argument_list|(
name|globalGaugeName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|singleRms
argument_list|)
operator|.
name|setGauge
argument_list|(
name|singleGaugeName
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|globalRms
argument_list|)
operator|.
name|setGauge
argument_list|(
name|globalGaugeName
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|singleRms
argument_list|)
operator|.
name|updateHistogram
argument_list|(
name|singleCounterName
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|globalRms
argument_list|)
operator|.
name|updateHistogram
argument_list|(
name|globalCounterName
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|spyglobalSourceSource
argument_list|)
operator|.
name|incrFailedRecoveryQueue
argument_list|()
expr_stmt|;
comment|//check singleSourceSourceByTable metrics.
comment|// singleSourceSourceByTable map entry will be created only
comment|// after calling #setAgeOfLastShippedOpByTable
name|boolean
name|containsRandomNewTable
init|=
name|source
operator|.
name|getSingleSourceSourceByTable
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"RandomNewTable"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|containsRandomNewTable
argument_list|)
expr_stmt|;
name|source
operator|.
name|setAgeOfLastShippedOpByTable
argument_list|(
literal|123L
argument_list|,
literal|"RandomNewTable"
argument_list|)
expr_stmt|;
name|containsRandomNewTable
operator|=
name|source
operator|.
name|getSingleSourceSourceByTable
argument_list|()
operator|.
name|containsKey
argument_list|(
literal|"RandomNewTable"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|containsRandomNewTable
argument_list|)
expr_stmt|;
name|MetricsReplicationSourceSource
name|msr
init|=
name|source
operator|.
name|getSingleSourceSourceByTable
argument_list|()
operator|.
name|get
argument_list|(
literal|"RandomNewTable"
argument_list|)
decl_stmt|;
comment|// cannot put more concreate value here to verify because the age is arbitrary.
comment|// as long as it's greater than 0, we see it as correct answer.
name|Assert
operator|.
name|assertTrue
argument_list|(
name|msr
operator|.
name|getLastShippedAge
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doPut
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|CONF1
argument_list|)
init|)
block|{
name|doPut
argument_list|(
name|connection
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doPut
parameter_list|(
specifier|final
name|Connection
name|connection
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|doAssert
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ReplicationEndpointForTest
operator|.
name|lastEntries
operator|==
literal|null
condition|)
block|{
return|return;
comment|// first call
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ReplicationEndpointForTest
operator|.
name|lastEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|ReplicationEndpointForTest
operator|.
name|lastEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cells
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|ReplicationEndpointForTest
extends|extends
name|BaseReplicationEndpoint
block|{
specifier|static
name|UUID
name|uuid
init|=
name|UTIL1
operator|.
name|getRandomUUID
argument_list|()
decl_stmt|;
specifier|static
name|AtomicInteger
name|contructedCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|static
name|AtomicInteger
name|startedCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|static
name|AtomicInteger
name|stoppedCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|static
name|AtomicInteger
name|replicateCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|static
specifier|volatile
name|List
argument_list|<
name|Entry
argument_list|>
name|lastEntries
init|=
literal|null
decl_stmt|;
specifier|public
name|ReplicationEndpointForTest
parameter_list|()
block|{
name|replicateCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|contructedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|UUID
name|getPeerUUID
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|replicate
parameter_list|(
name|ReplicateContext
name|replicateContext
parameter_list|)
block|{
name|replicateCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|lastEntries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|replicateContext
operator|.
name|entries
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|startAsync
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|stopAsync
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStart
parameter_list|()
block|{
name|startedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|notifyStarted
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doStop
parameter_list|()
block|{
name|stoppedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|notifyStopped
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|InterClusterReplicationEndpointForTest
extends|extends
name|HBaseInterClusterReplicationEndpoint
block|{
specifier|static
name|AtomicInteger
name|replicateCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|static
name|boolean
name|failedOnce
decl_stmt|;
specifier|public
name|InterClusterReplicationEndpointForTest
parameter_list|()
block|{
name|replicateCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|replicate
parameter_list|(
name|ReplicateContext
name|replicateContext
parameter_list|)
block|{
name|boolean
name|success
init|=
name|super
operator|.
name|replicate
argument_list|(
name|replicateContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|replicateCount
operator|.
name|addAndGet
argument_list|(
name|replicateContext
operator|.
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Callable
argument_list|<
name|Integer
argument_list|>
name|createReplicator
parameter_list|(
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
parameter_list|,
name|int
name|ordinal
parameter_list|)
block|{
comment|// Fail only once, we don't want to slow down the test.
if|if
condition|(
name|failedOnce
condition|)
block|{
return|return
parameter_list|()
lambda|->
name|ordinal
return|;
block|}
else|else
block|{
name|failedOnce
operator|=
literal|true
expr_stmt|;
return|return
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Sample Exception: Failed to replicate."
argument_list|)
throw|;
block|}
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ReplicationEndpointReturningFalse
extends|extends
name|ReplicationEndpointForTest
block|{
specifier|static
name|int
name|COUNT
init|=
literal|10
decl_stmt|;
specifier|static
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|ex
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|static
name|AtomicBoolean
name|replicated
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|replicate
parameter_list|(
name|ReplicateContext
name|replicateContext
parameter_list|)
block|{
try|try
block|{
comment|// check row
name|doAssert
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|replicate
argument_list|(
name|replicateContext
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Replicated "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|", count="
operator|+
name|replicateCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|replicated
operator|.
name|set
argument_list|(
name|replicateCount
operator|.
name|get
argument_list|()
operator|>
name|COUNT
argument_list|)
expr_stmt|;
comment|// first 10 times, we return false
return|return
name|replicated
operator|.
name|get
argument_list|()
return|;
block|}
block|}
comment|// return a WALEntry filter which only accepts "row", but not other rows
specifier|public
specifier|static
class|class
name|ReplicationEndpointWithWALEntryFilter
extends|extends
name|ReplicationEndpointForTest
block|{
specifier|static
name|AtomicReference
argument_list|<
name|Exception
argument_list|>
name|ex
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|replicate
parameter_list|(
name|ReplicateContext
name|replicateContext
parameter_list|)
block|{
try|try
block|{
name|super
operator|.
name|replicate
argument_list|(
name|replicateContext
argument_list|)
expr_stmt|;
name|doAssert
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|WALEntryFilter
name|getWALEntryfilter
parameter_list|()
block|{
return|return
operator|new
name|ChainWALEntryFilter
argument_list|(
name|super
operator|.
name|getWALEntryfilter
argument_list|()
argument_list|,
operator|new
name|WALEntryFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|entry
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|cells
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|size
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Cell
name|cell
init|=
name|cells
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|)
condition|)
block|{
name|cells
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|entry
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EverythingPassesWALEntryFilter
implements|implements
name|WALEntryFilter
block|{
specifier|private
specifier|static
name|boolean
name|passedEntry
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
name|passedEntry
operator|=
literal|true
expr_stmt|;
return|return
name|entry
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasPassedAnEntry
parameter_list|()
block|{
return|return
name|passedEntry
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EverythingPassesWALEntryFilterSubclass
extends|extends
name|EverythingPassesWALEntryFilter
block|{   }
block|}
end_class

end_unit

