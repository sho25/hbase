begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test of the HBCK-version of SCP.  * The HBCKSCP is an SCP only it reads hbase:meta for list of Regions that were  * on the server-to-process rather than consult Master in-memory-state.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHBCKSCP
extends|extends
name|TestSCPBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHBCKSCP
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestHBCKSCP
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
comment|// we are about to do one for it?
name|MiniHBaseCluster
name|cluster
init|=
name|this
operator|.
name|util
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
comment|// Assert that we have three RegionServers. Test depends on there being multiple.
name|assertEquals
argument_list|(
name|RS_COUNT
argument_list|,
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
comment|// Load the table with a bit of data so some logs to split and some edits in each region.
name|this
operator|.
name|util
operator|.
name|loadTable
argument_list|(
name|table
argument_list|,
name|HBaseTestingUtility
operator|.
name|COLUMNS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|count
operator|=
name|util
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"expected some rows"
argument_list|,
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Make the test easier by not working on server hosting meta...
comment|// Find another RS. Purge it from Master memory w/o running SCP (if
comment|// SCP runs, it will clear entries from hbase:meta which frustrates
comment|// our attempt at manufacturing 'Unknown Servers' condition).
name|int
name|metaIndex
init|=
name|this
operator|.
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getServerWithMeta
argument_list|()
decl_stmt|;
name|int
name|rsIndex
init|=
operator|(
name|metaIndex
operator|+
literal|1
operator|)
operator|%
name|RS_COUNT
decl_stmt|;
name|ServerName
name|rsServerName
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|rsIndex
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
comment|// Get a Region that is on the server.
name|RegionInfo
name|rsRI
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionsOnServer
argument_list|(
name|rsServerName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|MetaTableAccessor
operator|.
name|getRegionResult
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|rsRI
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Assert region is OPEN.
name|assertEquals
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|OPEN
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STATE_QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|serverName
init|=
name|MetaTableAccessor
operator|.
name|getServerName
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rsServerName
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
comment|// moveFrom adds to dead servers and adds it to processing list only we will
comment|// not be processing this server 'normally'. Remove it from processing by
comment|// calling 'finish' and then remove it from dead servers so rsServerName
comment|// becomes an 'Unknown Server' even though it is still around.
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|moveFromOnlineToDeadServers
argument_list|(
name|rsServerName
argument_list|)
expr_stmt|;
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDeadServers
argument_list|()
operator|.
name|finish
argument_list|(
name|rsServerName
argument_list|)
expr_stmt|;
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDeadServers
argument_list|()
operator|.
name|removeDeadServer
argument_list|(
name|rsServerName
argument_list|)
expr_stmt|;
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|removeServer
argument_list|(
name|rsServerName
argument_list|)
expr_stmt|;
comment|// Kill the server. Nothing should happen since an 'Unknown Server' as far
comment|// as the Master is concerned; i.e. no SCP.
name|LOG
operator|.
name|info
argument_list|(
literal|"Killing {}"
argument_list|,
name|rsServerName
argument_list|)
expr_stmt|;
name|HRegionServer
name|hrs
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|rsServerName
argument_list|)
decl_stmt|;
name|hrs
operator|.
name|abort
argument_list|(
literal|"KILLED"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|hrs
operator|.
name|isStopped
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Dead {}"
argument_list|,
name|rsServerName
argument_list|)
expr_stmt|;
comment|// Now assert still references in hbase:meta to the 'dead' server -- they haven't been
comment|// cleaned up by an SCP or by anything else.
name|assertTrue
argument_list|(
name|searchMeta
argument_list|(
name|master
argument_list|,
name|rsServerName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert region is OPEN on dead server still.
name|r
operator|=
name|MetaTableAccessor
operator|.
name|getRegionResult
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|rsRI
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|OPEN
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STATE_QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|serverName
operator|=
name|MetaTableAccessor
operator|.
name|getServerName
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rsServerName
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
comment|// I now have 'Unknown Server' references in hbase:meta; i.e. Server references
comment|// with no corresponding SCP. Queue one.
name|MasterProtos
operator|.
name|ScheduleServerCrashProcedureResponse
name|response
init|=
name|master
operator|.
name|getMasterRpcServices
argument_list|()
operator|.
name|scheduleServerCrashProcedure
argument_list|(
literal|null
argument_list|,
name|MasterProtos
operator|.
name|ScheduleServerCrashProcedureRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|addServerName
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|rsServerName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|response
operator|.
name|getPidCount
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|pid
init|=
name|response
operator|.
name|getPid
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|Procedure
operator|.
name|NO_PROC_ID
argument_list|,
name|pid
argument_list|)
expr_stmt|;
while|while
condition|(
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
operator|.
name|getActiveProcIds
argument_list|()
operator|.
name|contains
argument_list|(
name|pid
argument_list|)
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// After SCP, assert region is OPEN on new server.
name|r
operator|=
name|MetaTableAccessor
operator|.
name|getRegionResult
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
name|rsRI
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|OPEN
operator|.
name|toString
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STATE_QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|serverName
operator|=
name|MetaTableAccessor
operator|.
name|getServerName
argument_list|(
name|r
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|getRegionServer
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|rsServerName
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
comment|// Make sure no mention of old server post SCP.
name|assertFalse
argument_list|(
name|searchMeta
argument_list|(
name|master
argument_list|,
name|rsServerName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|master
operator|.
name|getServerManager
argument_list|()
operator|.
name|getDeadServers
argument_list|()
operator|.
name|isDeadServer
argument_list|(
name|rsServerName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return True if we find reference to<code>sn</code> in meta table.    */
specifier|private
name|boolean
name|searchMeta
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|ServerName
name|sn
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|>
name|ps
init|=
name|MetaTableAccessor
operator|.
name|getTableRegionsAndLocations
argument_list|(
name|master
operator|.
name|getConnection
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|p
range|:
name|ps
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getSecond
argument_list|()
operator|.
name|equals
argument_list|(
name|sn
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

