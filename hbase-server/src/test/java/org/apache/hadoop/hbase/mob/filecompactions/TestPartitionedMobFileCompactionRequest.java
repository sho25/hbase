begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|filecompactions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|filecompactions
operator|.
name|PartitionedMobFileCompactionRequest
operator|.
name|CompactionPartition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|filecompactions
operator|.
name|PartitionedMobFileCompactionRequest
operator|.
name|CompactionPartitionId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestPartitionedMobFileCompactionRequest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testCompactedPartitionId
parameter_list|()
block|{
name|String
name|startKey1
init|=
literal|"startKey1"
decl_stmt|;
name|String
name|startKey2
init|=
literal|"startKey2"
decl_stmt|;
name|String
name|date1
init|=
literal|"date1"
decl_stmt|;
name|String
name|date2
init|=
literal|"date2"
decl_stmt|;
name|CompactionPartitionId
name|partitionId1
init|=
operator|new
name|CompactionPartitionId
argument_list|(
name|startKey1
argument_list|,
name|date1
argument_list|)
decl_stmt|;
name|CompactionPartitionId
name|partitionId2
init|=
operator|new
name|CompactionPartitionId
argument_list|(
name|startKey2
argument_list|,
name|date2
argument_list|)
decl_stmt|;
name|CompactionPartitionId
name|partitionId3
init|=
operator|new
name|CompactionPartitionId
argument_list|(
name|startKey1
argument_list|,
name|date2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|partitionId1
operator|.
name|equals
argument_list|(
name|partitionId1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|partitionId1
operator|.
name|equals
argument_list|(
name|partitionId2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|partitionId1
operator|.
name|equals
argument_list|(
name|partitionId3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|partitionId2
operator|.
name|equals
argument_list|(
name|partitionId3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|startKey1
argument_list|,
name|partitionId1
operator|.
name|getStartKey
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|date1
argument_list|,
name|partitionId1
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactedPartition
parameter_list|()
block|{
name|CompactionPartitionId
name|partitionId
init|=
operator|new
name|CompactionPartitionId
argument_list|(
literal|"startKey1"
argument_list|,
literal|"date1"
argument_list|)
decl_stmt|;
name|CompactionPartition
name|partition
init|=
operator|new
name|CompactionPartition
argument_list|(
name|partitionId
argument_list|)
decl_stmt|;
name|FileStatus
name|file
init|=
operator|new
name|FileStatus
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
operator|new
name|Path
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
decl_stmt|;
name|partition
operator|.
name|addFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|file
argument_list|,
name|partition
operator|.
name|listFiles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

