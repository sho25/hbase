begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|countRows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAdmin
extends|extends
name|TestAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCreateTable
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tables
init|=
name|ADMIN
operator|.
name|listTableDescriptors
argument_list|()
decl_stmt|;
name|int
name|numTables
init|=
name|tables
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|tables
operator|=
name|ADMIN
operator|.
name|listTableDescriptors
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numTables
operator|+
literal|1
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table must be enabled."
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getTableStateManager
argument_list|()
operator|.
name|isTableState
argument_list|(
name|tableName
argument_list|,
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TableState
operator|.
name|State
operator|.
name|ENABLED
argument_list|,
name|getStateFromMeta
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTable
parameter_list|()
throws|throws
name|IOException
block|{
name|testTruncateTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTruncateTablePreservingSplits
parameter_list|()
throws|throws
name|IOException
block|{
name|testTruncateTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testTruncateTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|splitKeys
index|[
literal|1
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// Create& Fill the table
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|splitKeys
argument_list|)
decl_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|loadNumericRows
argument_list|(
name|table
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|countRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Truncate& Verify
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|,
name|preserveSplits
argument_list|)
expr_stmt|;
name|table
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|preserveSplits
condition|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableNumberOfRegions
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cfd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|table
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
decl_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|table
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have only 1 region"
argument_list|,
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TableName
name|table2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_2"
argument_list|)
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|table2
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|42
block|}
block|}
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|table2
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have only 2 region"
argument_list|,
literal|2
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TableName
name|table3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_3"
argument_list|)
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|table3
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|table3
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have only 3 region"
argument_list|,
literal|3
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TableName
name|table4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_4"
argument_list|)
decl_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|table4
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"z"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should not be able to create a table with only 2 regions using this API."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|eae
parameter_list|)
block|{
comment|// Expected
block|}
name|TableName
name|table5
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_5"
argument_list|)
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|table5
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|127
block|}
argument_list|,
literal|16
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|table5
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Table should have 16 region"
argument_list|,
literal|16
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithRegions
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|cfd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|}
block|, }
decl_stmt|;
name|int
name|expectedRegions
init|=
name|splitKeys
operator|.
name|length
operator|+
literal|1
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|table
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|boolean
name|tableAvailable
init|=
name|ADMIN
operator|.
name|isTableAvailable
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Table should be created with splitKyes + 1 rows in META"
argument_list|,
name|tableAvailable
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
decl_stmt|;
name|Iterator
argument_list|<
name|HRegionLocation
argument_list|>
name|hris
decl_stmt|;
name|RegionInfo
name|hri
decl_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|table
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|hris
operator|=
name|regions
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|7
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|7
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
name|splitKeys
index|[
literal|8
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|verifyRoundRobinDistribution
argument_list|(
name|CONN
argument_list|,
name|l
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
comment|// Now test using start/end with a number of regions
comment|// Use 80 bit numbers to make sure we aren't limited
name|byte
index|[]
name|startKey
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
decl_stmt|;
comment|// Splitting into 10 regions, we expect (null,1) ... (9, null)
comment|// with (1,2) (2,3) (3,4) (4,5) (5,6) (6,7) (7,8) (8,9) in the middle
name|expectedRegions
operator|=
literal|10
expr_stmt|;
name|TableName
name|table2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_2"
argument_list|)
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|table2
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|table2
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|hris
operator|=
name|regions
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getStartKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|,
literal|6
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|,
literal|7
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|,
literal|8
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|hri
operator|=
name|hris
operator|.
name|next
argument_list|()
operator|.
name|getRegion
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hri
operator|.
name|getEndKey
argument_list|()
operator|==
literal|null
operator|||
name|hri
operator|.
name|getEndKey
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|verifyRoundRobinDistribution
argument_list|(
name|CONN
argument_list|,
name|l
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
comment|// Try once more with something that divides into something infinite
name|startKey
operator|=
operator|new
name|byte
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|endKey
operator|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|expectedRegions
operator|=
literal|5
expr_stmt|;
name|TableName
name|table3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_3"
argument_list|)
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|table3
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|table3
argument_list|)
init|)
block|{
name|regions
operator|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|regions
operator|.
name|size
argument_list|()
operator|+
literal|" regions"
argument_list|)
expr_stmt|;
name|verifyRoundRobinDistribution
argument_list|(
name|CONN
argument_list|,
name|l
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
comment|// Try an invalid case where there are duplicate split keys
name|splitKeys
operator|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|}
expr_stmt|;
name|TableName
name|table4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|table
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_4"
argument_list|)
decl_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|table4
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|cfd
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should not be able to create this table because of "
operator|+
literal|"duplicate split keys"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// Expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithOnlyEmptyStartRow
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|1
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"col"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail as empty split key is passed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableWithEmptyRowInTheSplitKeys
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|3
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region1"
argument_list|)
expr_stmt|;
name|splitKeys
index|[
literal|1
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
name|splitKeys
index|[
literal|2
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region2"
argument_list|)
expr_stmt|;
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"col"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test case should fail as empty split key is passed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Expected "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyRoundRobinDistribution
parameter_list|(
name|ConnectionImplementation
name|c
parameter_list|,
name|RegionLocator
name|regionLocator
parameter_list|,
name|int
name|expectedRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numRS
init|=
name|c
operator|.
name|getCurrentNrHRS
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|regionLocator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|server2Regions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|loc
range|:
name|regions
control|)
block|{
name|ServerName
name|server
init|=
name|loc
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regs
init|=
name|server2Regions
operator|.
name|get
argument_list|(
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|regs
operator|==
literal|null
condition|)
block|{
name|regs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|server2Regions
operator|.
name|put
argument_list|(
name|server
argument_list|,
name|regs
argument_list|)
expr_stmt|;
block|}
name|regs
operator|.
name|add
argument_list|(
name|loc
operator|.
name|getRegion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|tablesOnMaster
init|=
name|LoadBalancer
operator|.
name|isTablesOnMaster
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tablesOnMaster
condition|)
block|{
comment|// Ignore the master region server,
comment|// which contains less regions by intention.
name|numRS
operator|--
expr_stmt|;
block|}
name|float
name|average
init|=
operator|(
name|float
operator|)
name|expectedRegions
operator|/
name|numRS
decl_stmt|;
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionList
range|:
name|server2Regions
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"numRS="
operator|+
name|numRS
operator|+
literal|", min="
operator|+
name|min
operator|+
literal|", max="
operator|+
name|max
operator|+
literal|", size="
operator|+
name|regionList
operator|.
name|size
argument_list|()
operator|+
literal|", tablesOnMaster="
operator|+
name|tablesOnMaster
argument_list|,
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|min
operator|||
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|max
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneTableSchema
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|newTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_new"
argument_list|)
decl_stmt|;
name|testCloneTableSchema
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneTableSchemaPreservingSplits
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|newTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_new"
argument_list|)
decl_stmt|;
name|testCloneTableSchema
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testCloneTableSchema
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|TableName
name|newTableName
parameter_list|,
name|boolean
name|preserveSplits
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|FAMILY_0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf0"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY_1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|splitKeys
index|[
literal|0
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|splitKeys
index|[
literal|1
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|int
name|NUM_FAMILYS
init|=
literal|2
decl_stmt|;
name|int
name|NUM_REGIONS
init|=
literal|3
decl_stmt|;
name|int
name|BLOCK_SIZE
init|=
literal|1024
decl_stmt|;
name|int
name|TTL
init|=
literal|86400
decl_stmt|;
name|boolean
name|BLOCK_CACHE
init|=
literal|false
decl_stmt|;
comment|// Create the table
name|TableDescriptor
name|tableDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY_0
argument_list|)
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|FAMILY_1
argument_list|)
operator|.
name|setBlocksize
argument_list|(
name|BLOCK_SIZE
argument_list|)
operator|.
name|setBlockCacheEnabled
argument_list|(
name|BLOCK_CACHE
argument_list|)
operator|.
name|setTimeToLive
argument_list|(
name|TTL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|tableDesc
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_REGIONS
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table should be created with splitKyes + 1 rows in META"
argument_list|,
name|ADMIN
operator|.
name|isTableAvailable
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// clone& Verify
name|ADMIN
operator|.
name|cloneTableSchema
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
name|preserveSplits
argument_list|)
expr_stmt|;
name|TableDescriptor
name|newTableDesc
init|=
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|newTableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_FAMILYS
argument_list|,
name|newTableDesc
operator|.
name|getColumnFamilyCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|newTableDesc
operator|.
name|getColumnFamily
argument_list|(
name|FAMILY_1
argument_list|)
operator|.
name|getBlocksize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|BLOCK_CACHE
argument_list|,
name|newTableDesc
operator|.
name|getColumnFamily
argument_list|(
name|FAMILY_1
argument_list|)
operator|.
name|isBlockCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TTL
argument_list|,
name|newTableDesc
operator|.
name|getColumnFamily
argument_list|(
name|FAMILY_1
argument_list|)
operator|.
name|getTimeToLive
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|verifyTableDescriptorIgnoreTableName
argument_list|(
name|tableDesc
argument_list|,
name|newTableDesc
argument_list|)
expr_stmt|;
if|if
condition|(
name|preserveSplits
condition|)
block|{
name|assertEquals
argument_list|(
name|NUM_REGIONS
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|newTableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"New table should be created with splitKyes + 1 rows in META"
argument_list|,
name|ADMIN
operator|.
name|isTableAvailable
argument_list|(
name|newTableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|newTableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneTableSchemaWithNonExistentSourceTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|newTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_new"
argument_list|)
decl_stmt|;
comment|// test for non-existent source table
try|try
block|{
name|ADMIN
operator|.
name|cloneTableSchema
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to create a new table by cloning non-existent source table."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloneTableSchemaWithExistentDestinationTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|newTableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|"_new"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|FAMILY_0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf0"
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|newTableName
argument_list|,
name|FAMILY_0
argument_list|)
expr_stmt|;
comment|// test for existent destination table
try|try
block|{
name|ADMIN
operator|.
name|cloneTableSchema
argument_list|(
name|tableName
argument_list|,
name|newTableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have failed to create a existent table."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|ex
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyTableOnTableWithRegionReplicas
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setRegionReplication
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|int
name|maxFileSize
init|=
literal|10000000
decl_stmt|;
name|TableDescriptor
name|newDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|desc
argument_list|)
operator|.
name|setMaxFileSize
argument_list|(
name|maxFileSize
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|modifyTable
argument_list|(
name|newDesc
argument_list|)
expr_stmt|;
name|TableDescriptor
name|newTableDesc
init|=
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|maxFileSize
argument_list|,
name|newTableDesc
operator|.
name|getMaxFileSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify schema modification takes.    */
annotation|@
name|Test
specifier|public
name|void
name|testOnlineChangeTableSchema
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tables
init|=
name|ADMIN
operator|.
name|listTableDescriptors
argument_list|()
decl_stmt|;
name|int
name|numTables
init|=
name|tables
operator|.
name|size
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|tables
operator|=
name|ADMIN
operator|.
name|listTableDescriptors
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|numTables
operator|+
literal|1
argument_list|,
name|tables
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// FIRST, do htabledescriptor changes.
name|TableDescriptor
name|htd
init|=
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// Make a copy and assert copy is good.
name|TableDescriptor
name|copy
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|htd
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|htd
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|String
name|key
init|=
literal|"anyoldkey"
decl_stmt|;
name|assertNull
argument_list|(
name|htd
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now amend the copy. Introduce differences.
name|long
name|newFlushSize
init|=
name|htd
operator|.
name|getMemStoreFlushSize
argument_list|()
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|newFlushSize
operator|<=
literal|0
condition|)
block|{
name|newFlushSize
operator|=
name|TableDescriptorBuilder
operator|.
name|DEFAULT_MEMSTORE_FLUSH_SIZE
operator|/
literal|2
expr_stmt|;
block|}
name|copy
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|copy
argument_list|)
operator|.
name|setMemStoreFlushSize
argument_list|(
name|newFlushSize
argument_list|)
operator|.
name|setValue
argument_list|(
name|key
argument_list|,
name|key
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ADMIN
operator|.
name|modifyTable
argument_list|(
name|copy
argument_list|)
expr_stmt|;
name|TableDescriptor
name|modifiedHtd
init|=
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|htd
argument_list|,
name|modifiedHtd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|copy
argument_list|,
name|modifiedHtd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newFlushSize
argument_list|,
name|modifiedHtd
operator|.
name|getMemStoreFlushSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|modifiedHtd
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now work on column family changes.
name|int
name|countOfFamilies
init|=
name|modifiedHtd
operator|.
name|getColumnFamilyCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|countOfFamilies
operator|>
literal|0
argument_list|)
expr_stmt|;
name|ColumnFamilyDescriptor
name|hcd
init|=
name|modifiedHtd
operator|.
name|getColumnFamilies
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|int
name|maxversions
init|=
name|hcd
operator|.
name|getMaxVersions
argument_list|()
decl_stmt|;
name|int
name|newMaxVersions
init|=
name|maxversions
operator|+
literal|1
decl_stmt|;
name|hcd
operator|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|hcd
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|newMaxVersions
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|byte
index|[]
name|hcdName
init|=
name|hcd
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
name|modifiedHtd
operator|=
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ColumnFamilyDescriptor
name|modifiedHcd
init|=
name|modifiedHtd
operator|.
name|getColumnFamily
argument_list|(
name|hcdName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newMaxVersions
argument_list|,
name|modifiedHcd
operator|.
name|getMaxVersions
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try adding a column
name|assertFalse
argument_list|(
name|ADMIN
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|xtracolName
init|=
literal|"xtracol"
decl_stmt|;
name|ColumnFamilyDescriptor
name|xtracol
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|xtracolName
argument_list|)
argument_list|)
operator|.
name|setValue
argument_list|(
name|xtracolName
argument_list|,
name|xtracolName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
name|xtracol
argument_list|)
expr_stmt|;
name|modifiedHtd
operator|=
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|hcd
operator|=
name|modifiedHtd
operator|.
name|getColumnFamily
argument_list|(
name|xtracol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|xtracolName
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|hcd
operator|.
name|getValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|xtracolName
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete the just-added column.
name|ADMIN
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|xtracol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|modifiedHtd
operator|=
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|hcd
operator|=
name|modifiedHtd
operator|.
name|getColumnFamily
argument_list|(
name|xtracol
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// Delete the table
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|listTableDescriptors
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|ADMIN
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

