begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ReplicationPeerNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfigBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationStorageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|TestReplicationEndpoint
operator|.
name|InterClusterReplicationEndpointForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|TestReplicator
operator|.
name|ReplicationEndpointForTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Unit testing of ReplicationAdmin  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationAdmin
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationAdmin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|ID_ONE
init|=
literal|"1"
decl_stmt|;
specifier|private
specifier|final
name|String
name|KEY_ONE
init|=
literal|"127.0.0.1:2181:/hbase"
decl_stmt|;
specifier|private
specifier|final
name|String
name|ID_SECOND
init|=
literal|"2"
decl_stmt|;
specifier|private
specifier|final
name|String
name|KEY_SECOND
init|=
literal|"127.0.0.1:2181:/hbase2"
decl_stmt|;
specifier|private
specifier|static
name|ReplicationAdmin
name|admin
decl_stmt|;
specifier|private
specifier|static
name|Admin
name|hbaseAdmin
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|admin
operator|=
operator|new
name|ReplicationAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|ReplicationPeerDescription
name|desc
range|:
name|hbaseAdmin
operator|.
name|listReplicationPeers
argument_list|()
control|)
block|{
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|desc
operator|.
name|getPeerId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ReplicationQueueStorage
name|queueStorage
init|=
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|queueStorage
operator|.
name|getListOfReplicators
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|queue
range|:
name|queueStorage
operator|.
name|getAllQueues
argument_list|(
name|serverName
argument_list|)
control|)
block|{
name|queueStorage
operator|.
name|removeQueue
argument_list|(
name|serverName
argument_list|,
name|queue
argument_list|)
expr_stmt|;
block|}
name|queueStorage
operator|.
name|removeReplicatorIfQueueIsEmpty
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentPeerOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|threadNum
init|=
literal|5
decl_stmt|;
name|AtomicLong
name|successCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Test concurrent add peer operation
name|Thread
index|[]
name|addPeers
init|=
operator|new
name|Thread
index|[
name|threadNum
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadNum
condition|;
name|i
operator|++
control|)
block|{
name|addPeers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|successCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got exception when add replication peer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addPeers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|addPeer
range|:
name|addPeers
control|)
block|{
name|addPeer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|successCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test concurrent remove peer operation
name|successCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Thread
index|[]
name|removePeers
init|=
operator|new
name|Thread
index|[
name|threadNum
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadNum
condition|;
name|i
operator|++
control|)
block|{
name|removePeers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|successCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got exception when remove replication peer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|removePeers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|removePeer
range|:
name|removePeers
control|)
block|{
name|removePeer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|successCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test concurrent add peer operation again
name|successCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addPeers
operator|=
operator|new
name|Thread
index|[
name|threadNum
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadNum
condition|;
name|i
operator|++
control|)
block|{
name|addPeers
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|successCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got exception when add replication peer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addPeers
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|addPeer
range|:
name|addPeers
control|)
block|{
name|addPeer
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|successCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddInvalidPeer
parameter_list|()
block|{
name|ReplicationPeerConfigBuilder
name|builder
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|invalidPeerId
init|=
literal|"1-2"
decl_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|invalidPeerId
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail as the peer id: "
operator|+
name|invalidPeerId
operator|+
literal|" is invalid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
try|try
block|{
name|String
name|invalidClusterKey
init|=
literal|"2181:/hbase"
decl_stmt|;
name|builder
operator|.
name|setClusterKey
argument_list|(
name|invalidClusterKey
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail as the peer cluster key: "
operator|+
name|invalidClusterKey
operator|+
literal|" is invalid"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
comment|/**    * Simple testing of adding and removing peers, basically shows that    * all interactions with ZK work    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testAddRemovePeer
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfigBuilder
name|rpc1
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|rpc1
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|ReplicationPeerConfigBuilder
name|rpc2
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|rpc2
operator|.
name|setClusterKey
argument_list|(
name|KEY_SECOND
argument_list|)
expr_stmt|;
comment|// Add a valid peer
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// try adding the same (fails)
try|try
block|{
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK!
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hbaseAdmin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to remove an inexisting peer
try|try
block|{
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK!
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hbaseAdmin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a second since multi-slave is supported
try|try
block|{
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc2
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hbaseAdmin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the first peer we added
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hbaseAdmin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hbaseAdmin
operator|.
name|listReplicationPeers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPeerWithState
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc1
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc1
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hbaseAdmin
operator|.
name|listReplicationPeers
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|ReplicationPeerConfig
name|rpc2
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc2
operator|.
name|setClusterKey
argument_list|(
name|KEY_SECOND
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hbaseAdmin
operator|.
name|listReplicationPeers
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|ID_SECOND
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that the peer configuration used by ReplicationAdmin contains all    * the peer's properties.    */
annotation|@
name|Test
specifier|public
name|void
name|testPeerConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|config
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|config
operator|.
name|getConfiguration
argument_list|()
operator|.
name|put
argument_list|(
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|config
operator|.
name|getConfiguration
argument_list|()
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ReplicationPeerDescription
argument_list|>
name|peers
init|=
name|hbaseAdmin
operator|.
name|listReplicationPeers
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|peers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationPeerDescription
name|peerOne
init|=
name|peers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|peerOne
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value1"
argument_list|,
name|peerOne
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"value2"
argument_list|,
name|peerOne
operator|.
name|getPeerConfig
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPeerWithUnDeletedQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc1
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc1
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|ReplicationPeerConfig
name|rpc2
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc2
operator|.
name|setClusterKey
argument_list|(
name|KEY_SECOND
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ReplicationQueueStorage
name|queueStorage
init|=
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ServerName
name|serverName
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"server1"
argument_list|,
literal|8000
argument_list|,
literal|1234
argument_list|)
decl_stmt|;
comment|// add queue for ID_ONE
name|queueStorage
operator|.
name|addWAL
argument_list|(
name|serverName
argument_list|,
name|ID_ONE
argument_list|,
literal|"file1"
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|addPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK!
block|}
name|queueStorage
operator|.
name|removeQueue
argument_list|(
name|serverName
argument_list|,
name|ID_ONE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|queueStorage
operator|.
name|getAllQueues
argument_list|(
name|serverName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// add recovered queue for ID_ONE
name|queueStorage
operator|.
name|addWAL
argument_list|(
name|serverName
argument_list|,
name|ID_ONE
operator|+
literal|"-server2"
argument_list|,
literal|"file1"
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|addPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK!
block|}
block|}
comment|/**    * basic checks that when we add a peer that it is enabled, and that we can disable    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testEnableDisable
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc1
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc1
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|addPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|admin
operator|.
name|getPeersCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|getPeerState
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disablePeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|admin
operator|.
name|getPeerState
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|getPeerState
argument_list|(
name|ID_SECOND
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationPeerNotFoundException
name|e
parameter_list|)
block|{
comment|// OK!
block|}
name|admin
operator|.
name|removePeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPeerTableCFs
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"t1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"t2"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"t3"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"t4"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName5
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"t5"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName6
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"t6"
argument_list|)
decl_stmt|;
comment|// Add a valid peer
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
comment|// Update peer config, not replicate all user tables
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
name|ReplicationPeerConfigUtil
operator|.
name|parseTableCFsFromConfig
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
comment|// append table t2 to replication
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|result
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|parseTableCFsFromConfig
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t1"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t2"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
comment|// append table column family: f1 of t3 to replication
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName3
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName3
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|result
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|parseTableCFsFromConfig
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t1"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t2"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t3"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName3
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName4
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName4
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName4
argument_list|)
operator|.
name|add
argument_list|(
literal|"f2"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|result
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|parseTableCFsFromConfig
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t1"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t2"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t3"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t4"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName4
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName3
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName3
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName4
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName4
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName4
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// append "table5" => [], then append "table5" => ["f1"]
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName5
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName5
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName5
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|result
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|parseTableCFsFromConfig
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t5"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName5
argument_list|)
argument_list|)
expr_stmt|;
comment|// null means replication all cfs of tab5
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName5
argument_list|)
argument_list|)
expr_stmt|;
comment|// append "table6" => ["f1"], then append "table6" => []
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName6
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName6
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName6
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|appendPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|result
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|parseTableCFsFromConfig
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t6"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName6
argument_list|)
argument_list|)
expr_stmt|;
comment|// null means replication all cfs of tab6
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName6
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePeerTableCFs
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"t1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"t2"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"t3"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"t4"
argument_list|)
decl_stmt|;
comment|// Add a valid peer
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
comment|// Update peer config, not replicate all user tables
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{     }
name|assertNull
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
try|try
block|{
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{     }
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
name|ReplicationPeerConfigUtil
operator|.
name|parseTableCFsFromConfig
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t1"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t2"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tableName2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName1
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{     }
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|result
operator|=
name|ReplicationPeerConfigUtil
operator|.
name|parseTableCFsFromConfig
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"cf1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{     }
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tableName2
argument_list|)
operator|.
name|add
argument_list|(
literal|"cf1"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tableName4
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeerTableCFs
argument_list|(
name|ID_ONE
argument_list|,
name|tableCFs
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|admin
operator|.
name|getPeerTableCFs
argument_list|(
name|ID_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPeerNamespaces
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns1
init|=
literal|"ns1"
decl_stmt|;
name|String
name|ns2
init|=
literal|"ns2"
decl_stmt|;
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns2
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|namespaces
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|getNamespaces
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|namespaces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaces
operator|.
name|contains
argument_list|(
name|ns1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaces
operator|.
name|contains
argument_list|(
name|ns2
argument_list|)
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|namespaces
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|getNamespaces
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namespaces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaces
operator|.
name|contains
argument_list|(
name|ns1
argument_list|)
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetReplicateAllUserTables
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rpc
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rpc
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rpc
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPeerExcludeNamespaces
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns1
init|=
literal|"ns1"
decl_stmt|;
name|String
name|ns2
init|=
literal|"ns2"
decl_stmt|;
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rpc
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns2
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setExcludeNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|namespaces
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|getExcludeNamespaces
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|namespaces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaces
operator|.
name|contains
argument_list|(
name|ns1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaces
operator|.
name|contains
argument_list|(
name|ns2
argument_list|)
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setExcludeNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|namespaces
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|getExcludeNamespaces
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namespaces
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|namespaces
operator|.
name|contains
argument_list|(
name|ns1
argument_list|)
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPeerExcludeTableCFs
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|TableName
name|tab1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t1"
argument_list|)
decl_stmt|;
name|TableName
name|tab2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t2"
argument_list|)
decl_stmt|;
name|TableName
name|tab3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t3"
argument_list|)
decl_stmt|;
name|TableName
name|tab4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t4"
argument_list|)
decl_stmt|;
comment|// Add a valid peer
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rpc
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFs
init|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tab1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCFs
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|getExcludeTableCFsMap
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tab2
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCFs
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|result
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|getExcludeTableCFsMap
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t1"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t2"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tab2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tab1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tab2
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tab3
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|put
argument_list|(
name|tab4
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tab4
argument_list|)
operator|.
name|add
argument_list|(
literal|"f1"
argument_list|)
expr_stmt|;
name|tableCFs
operator|.
name|get
argument_list|(
name|tab4
argument_list|)
operator|.
name|add
argument_list|(
literal|"f2"
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCFs
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|result
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|getExcludeTableCFsMap
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t3"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tab3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should contain t4"
argument_list|,
name|result
operator|.
name|containsKey
argument_list|(
name|tab4
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|tab3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tab4
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f1"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tab4
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"f2"
argument_list|,
name|result
operator|.
name|get
argument_list|(
name|tab4
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPeerConfigConflict
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Default replicate_all flag is true
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|String
name|ns1
init|=
literal|"ns1"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
name|TableName
name|tab1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"ns2:tabl"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
init|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|tab1
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|rpc
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw Exception."
operator|+
literal|" When replicate all flag is true, no need to config namespaces"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// OK
name|rpc
operator|.
name|setNamespaces
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw Exception."
operator|+
literal|" When replicate all flag is true, no need to config table-cfs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// OK
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Set replicate_all flag to true
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|rpc
operator|.
name|setExcludeNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw Exception."
operator|+
literal|" When replicate all flag is false, no need to config exclude namespaces"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// OK
name|rpc
operator|.
name|setExcludeNamespaces
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|rpc
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw Exception."
operator|+
literal|" When replicate all flag is false, no need to config exclude table-cfs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// OK
name|rpc
operator|.
name|setExcludeTableCFsMap
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|rpc
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
comment|// OK to add a new peer which replicate_all flag is false and with namespaces, table-cfs config
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
comment|// Default replicate_all flag is true
name|ReplicationPeerConfig
name|rpc2
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc2
operator|.
name|setClusterKey
argument_list|(
name|KEY_SECOND
argument_list|)
expr_stmt|;
name|rpc2
operator|.
name|setExcludeNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|rpc2
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
comment|// OK to add a new peer which replicate_all flag is true and with exclude namespaces, exclude
comment|// table-cfs config
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc2
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespacesAndTableCfsConfigConflict
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ns1
init|=
literal|"ns1"
decl_stmt|;
name|String
name|ns2
init|=
literal|"ns2"
decl_stmt|;
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|ns1
operator|+
literal|":"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|ns2
operator|+
literal|":"
operator|+
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw ReplicationException"
operator|+
literal|" Because table "
operator|+
name|tableName1
operator|+
literal|" conflict with namespace "
operator|+
name|ns1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setTableCFsMap
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
try|try
block|{
name|namespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns2
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw ReplicationException"
operator|+
literal|" Because namespace "
operator|+
name|ns2
operator|+
literal|" conflict with table "
operator|+
name|tableName2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|ReplicationPeerConfig
name|rpc2
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc2
operator|.
name|setClusterKey
argument_list|(
name|KEY_SECOND
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc2
argument_list|)
expr_stmt|;
name|rpc2
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|excludeNamespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|excludeNamespaces
operator|.
name|add
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
name|rpc2
operator|.
name|setExcludeNamespaces
argument_list|(
name|excludeNamespaces
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc2
argument_list|)
expr_stmt|;
name|rpc2
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|excludeTableCfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|excludeTableCfs
operator|.
name|put
argument_list|(
name|tableName1
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|rpc2
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|excludeTableCfs
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw ReplicationException"
operator|+
literal|" Because exclude table "
operator|+
name|tableName1
operator|+
literal|" conflict with exclude namespace "
operator|+
name|ns1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|rpc2
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|excludeTableCfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|excludeTableCfs
operator|.
name|put
argument_list|(
name|tableName2
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|rpc2
operator|.
name|setExcludeTableCFsMap
argument_list|(
name|excludeTableCfs
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc2
argument_list|)
expr_stmt|;
name|rpc2
operator|=
name|hbaseAdmin
operator|.
name|getReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|)
expr_stmt|;
try|try
block|{
name|namespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|ns2
argument_list|)
expr_stmt|;
name|rpc2
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|,
name|rpc2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should throw ReplicationException"
operator|+
literal|" Because exclude namespace "
operator|+
name|ns2
operator|+
literal|" conflict with exclude table "
operator|+
name|tableName2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|removeReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPeerBandwidth
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|rpc
operator|=
name|admin
operator|.
name|getPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rpc
operator|.
name|getBandwidth
argument_list|()
argument_list|)
expr_stmt|;
name|rpc
operator|.
name|setBandwidth
argument_list|(
literal|2097152
argument_list|)
expr_stmt|;
name|admin
operator|.
name|updatePeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2097152
argument_list|,
name|admin
operator|.
name|getPeerConfig
argument_list|(
name|ID_ONE
argument_list|)
operator|.
name|getBandwidth
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|removePeer
argument_list|(
name|ID_ONE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPeerClusterKey
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfigBuilder
name|builder
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|setClusterKey
argument_list|(
name|KEY_SECOND
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Change cluster key on an existing peer is not allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPeerReplicationEndpointImpl
parameter_list|()
throws|throws
name|Exception
block|{
name|ReplicationPeerConfigBuilder
name|builder
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|ReplicationEndpointForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_ONE
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|InterClusterReplicationEndpointForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Change replication endpoint implementation class on an existing peer is not allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
try|try
block|{
name|builder
operator|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setClusterKey
argument_list|(
name|KEY_ONE
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_ONE
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Change replication endpoint implementation class on an existing peer is not allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
name|builder
operator|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setClusterKey
argument_list|(
name|KEY_SECOND
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|addReplicationPeer
argument_list|(
name|ID_SECOND
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|builder
operator|.
name|setReplicationEndpointImpl
argument_list|(
name|ReplicationEndpointForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|updateReplicationPeerConfig
argument_list|(
name|ID_SECOND
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Change replication endpoint implementation class on an existing peer is not allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// OK
block|}
block|}
block|}
end_class

end_unit

