begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PleaseHoldException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StartMiniClusterOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RSRpcServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
operator|.
name|RegionServerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ExecuteProceduresRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|ExecuteProceduresResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|RegionStateTransition
operator|.
name|TransitionCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRegionStateTransitionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|ReportRegionStateTransitionResponse
import|;
end_import

begin_comment
comment|/**  * Testcase for HBASE-21811.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestWakeUpUnexpectedProcedure
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestWakeUpUnexpectedProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestWakeUpUnexpectedProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"Assign"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|ServerName
argument_list|>
name|EXCLUDE_SERVERS
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CF
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|ServerName
name|SERVER_TO_KILL
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|CountDownLatch
name|ARRIVE_EXEC_PROC
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|CountDownLatch
name|RESUME_EXEC_PROC
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|CountDownLatch
name|RESUME_IS_SERVER_ONLINE
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|CountDownLatch
name|ARRIVE_REPORT
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|CountDownLatch
name|RESUME_REPORT
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|RSRpcServicesForTest
extends|extends
name|RSRpcServices
block|{
specifier|public
name|RSRpcServicesForTest
parameter_list|(
name|HRegionServer
name|rs
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|rs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ExecuteProceduresResponse
name|executeProcedures
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|ExecuteProceduresRequest
name|request
parameter_list|)
throws|throws
name|ServiceException
block|{
if|if
condition|(
name|request
operator|.
name|getOpenRegionCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|ARRIVE_EXEC_PROC
operator|!=
literal|null
condition|)
block|{
name|SERVER_TO_KILL
operator|=
name|regionServer
operator|.
name|getServerName
argument_list|()
expr_stmt|;
name|ARRIVE_EXEC_PROC
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|ARRIVE_EXEC_PROC
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|RESUME_EXEC_PROC
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|ServiceException
argument_list|(
operator|new
name|ConnectException
argument_list|(
literal|"Inject error"
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
name|super
operator|.
name|executeProcedures
argument_list|(
name|controller
argument_list|,
name|request
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|RSForTest
extends|extends
name|MiniHBaseClusterRegionServer
block|{
specifier|public
name|RSForTest
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|RSRpcServices
name|createRpcServices
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|RSRpcServicesForTest
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|AMForTest
extends|extends
name|AssignmentManager
block|{
specifier|public
name|AMForTest
parameter_list|(
name|MasterServices
name|master
parameter_list|)
block|{
name|super
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ReportRegionStateTransitionResponse
name|reportRegionStateTransition
parameter_list|(
name|ReportRegionStateTransitionRequest
name|req
parameter_list|)
throws|throws
name|PleaseHoldException
block|{
name|RegionStateTransition
name|rst
init|=
name|req
operator|.
name|getTransition
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|rst
operator|.
name|getTransitionCode
argument_list|()
operator|==
name|TransitionCode
operator|.
name|OPENED
operator|&&
name|ProtobufUtil
operator|.
name|toTableName
argument_list|(
name|rst
operator|.
name|getRegionInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|NAME
argument_list|)
condition|)
block|{
name|CountDownLatch
name|arrive
init|=
name|ARRIVE_REPORT
decl_stmt|;
if|if
condition|(
name|ARRIVE_REPORT
operator|!=
literal|null
condition|)
block|{
name|ARRIVE_REPORT
operator|=
literal|null
expr_stmt|;
name|arrive
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// so we will choose another rs next time
name|EXCLUDE_SERVERS
operator|.
name|add
argument_list|(
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|req
operator|.
name|getServer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|RESUME_REPORT
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
block|}
return|return
name|super
operator|.
name|reportRegionStateTransition
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SMForTest
extends|extends
name|ServerManager
block|{
specifier|public
name|SMForTest
parameter_list|(
name|MasterServices
name|master
parameter_list|)
block|{
name|super
argument_list|(
name|master
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isServerOnline
parameter_list|(
name|ServerName
name|serverName
parameter_list|)
block|{
name|ServerName
name|toKill
init|=
name|SERVER_TO_KILL
decl_stmt|;
if|if
condition|(
name|toKill
operator|!=
literal|null
operator|&&
name|toKill
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
condition|)
block|{
for|for
control|(
name|StackTraceElement
name|ele
range|:
operator|new
name|Exception
argument_list|()
operator|.
name|getStackTrace
argument_list|()
control|)
block|{
comment|// halt it is called from RSProcedureDispatcher, to delay the remoteCallFailed.
if|if
condition|(
literal|"scheduleForRetry"
operator|.
name|equals
argument_list|(
name|ele
operator|.
name|getMethodName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|RESUME_IS_SERVER_ONLINE
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|RESUME_IS_SERVER_ONLINE
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
break|break;
block|}
block|}
block|}
return|return
name|super
operator|.
name|isServerOnline
argument_list|(
name|serverName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|createDestinationServersList
parameter_list|()
block|{
return|return
name|super
operator|.
name|createDestinationServersList
argument_list|(
name|EXCLUDE_SERVERS
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
class|class
name|HMasterForTest
extends|extends
name|HMaster
block|{
specifier|public
name|HMasterForTest
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|AssignmentManager
name|createAssignmentManager
parameter_list|(
name|MasterServices
name|master
parameter_list|)
block|{
return|return
operator|new
name|AMForTest
argument_list|(
name|master
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ServerManager
name|createServerManager
parameter_list|(
name|MasterServices
name|master
parameter_list|)
throws|throws
name|IOException
block|{
name|setupClusterConnection
argument_list|()
expr_stmt|;
return|return
operator|new
name|SMForTest
argument_list|(
name|master
argument_list|)
return|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|numMasters
argument_list|(
literal|1
argument_list|)
operator|.
name|masterClass
argument_list|(
name|HMasterForTest
operator|.
name|class
argument_list|)
operator|.
name|numRegionServers
argument_list|(
literal|3
argument_list|)
operator|.
name|rsClass
argument_list|(
name|RSForTest
operator|.
name|class
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|NAME
argument_list|,
name|CF
argument_list|)
expr_stmt|;
comment|// Here the test region must not be hosted on the same rs with meta region.
comment|// We have 3 RSes and only two regions(meta and the test region), so they will not likely to be
comment|// hosted on the same RS.
name|UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|balancerSwitch
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|RegionInfo
name|region
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|NAME
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|RegionStateNode
name|rsn
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionStateNode
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|ServerName
name|sn
init|=
name|rsn
operator|.
name|getRegionLocation
argument_list|()
decl_stmt|;
name|RESUME_EXEC_PROC
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ARRIVE_EXEC_PROC
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|RESUME_IS_SERVER_ONLINE
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// reopen the region, and halt the executeProcedures method at RS side
name|am
operator|.
name|moveAsync
argument_list|(
operator|new
name|RegionPlan
argument_list|(
name|region
argument_list|,
name|sn
argument_list|,
name|sn
argument_list|)
argument_list|)
expr_stmt|;
name|ARRIVE_EXEC_PROC
operator|.
name|await
argument_list|()
expr_stmt|;
name|RESUME_REPORT
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ARRIVE_REPORT
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// kill the region server
name|ServerName
name|serverToKill
init|=
name|SERVER_TO_KILL
decl_stmt|;
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|stopRegionServer
argument_list|(
name|serverToKill
argument_list|)
expr_stmt|;
name|RESUME_EXEC_PROC
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// wait until we are going to open the region on a new rs
name|ARRIVE_REPORT
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// resume the isServerOnline check, to let the rs procedure
name|RESUME_IS_SERVER_ONLINE
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// before HBASE-20811 the state could become OPEN, and this is why later the region will be
comment|// assigned to two regionservers.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|rsn
operator|.
name|getState
argument_list|()
operator|==
name|RegionState
operator|.
name|State
operator|.
name|OPEN
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
comment|// resume the old report
name|RESUME_REPORT
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// wait a bit to let the region to be online, it is not easy to write a condition for this so
comment|// just sleep a while.
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|// confirm that the region is only on one rs
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RegionServerThread
name|t
range|:
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getRegions
argument_list|(
name|NAME
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"{} is on {}"
argument_list|,
name|region
argument_list|,
name|t
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

