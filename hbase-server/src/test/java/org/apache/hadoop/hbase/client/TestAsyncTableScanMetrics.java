begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ForkJoinPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncTableScanMetrics
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"ScanMetrics"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CF
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CQ
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AsyncConnection
name|CONN
decl_stmt|;
specifier|private
specifier|static
name|int
name|NUM_REGIONS
decl_stmt|;
annotation|@
name|FunctionalInterface
specifier|private
interface|interface
name|ScanWithMetrics
block|{
name|Pair
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|,
name|ScanMetrics
argument_list|>
name|scan
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
annotation|@
name|Parameter
argument_list|(
literal|0
argument_list|)
specifier|public
name|String
name|methodName
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
literal|1
argument_list|)
specifier|public
name|ScanWithMetrics
name|method
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: scan={0}"
argument_list|)
specifier|public
specifier|static
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
parameter_list|()
block|{
name|ScanWithMetrics
name|doScanWithRawAsyncTable
init|=
name|TestAsyncTableScanMetrics
operator|::
name|doScanWithRawAsyncTable
decl_stmt|;
name|ScanWithMetrics
name|doScanWithAsyncTableScan
init|=
name|TestAsyncTableScanMetrics
operator|::
name|doScanWithAsyncTableScan
decl_stmt|;
name|ScanWithMetrics
name|doScanWithAsyncTableScanner
init|=
name|TestAsyncTableScanMetrics
operator|::
name|doScanWithAsyncTableScanner
decl_stmt|;
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"doScanWithRawAsyncTable"
block|,
name|doScanWithRawAsyncTable
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"doScanWithAsyncTableScan"
block|,
name|doScanWithAsyncTableScan
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"doScanWithAsyncTableScanner"
block|,
name|doScanWithAsyncTableScanner
block|}
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Create 3 rows in the table, with rowkeys starting with "zzz*" so that
comment|// scan are forced to hit all the regions.
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|CF
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz1"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|,
name|VALUE
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz2"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|,
name|VALUE
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz3"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|CF
argument_list|,
name|CQ
argument_list|,
name|VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CONN
operator|=
name|ConnectionFactory
operator|.
name|createAsyncConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|NUM_REGIONS
operator|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|CONN
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|Pair
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|,
name|ScanMetrics
argument_list|>
name|doScanWithRawAsyncTable
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|SimpleRawScanResultConsumer
name|consumer
init|=
operator|new
name|SimpleRawScanResultConsumer
argument_list|()
decl_stmt|;
name|CONN
operator|.
name|getRawTable
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|scan
argument_list|(
name|scan
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
init|;
operator|(
name|result
operator|=
name|consumer
operator|.
name|take
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|Pair
operator|.
name|newPair
argument_list|(
name|results
argument_list|,
name|consumer
operator|.
name|getScanMetrics
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Pair
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|,
name|ScanMetrics
argument_list|>
name|doScanWithAsyncTableScan
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|Exception
block|{
name|SimpleScanResultConsumer
name|consumer
init|=
operator|new
name|SimpleScanResultConsumer
argument_list|()
decl_stmt|;
name|CONN
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|ForkJoinPool
operator|.
name|commonPool
argument_list|()
argument_list|)
operator|.
name|scan
argument_list|(
name|scan
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
return|return
name|Pair
operator|.
name|newPair
argument_list|(
name|consumer
operator|.
name|getAll
argument_list|()
argument_list|,
name|consumer
operator|.
name|getScanMetrics
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Pair
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|,
name|ScanMetrics
argument_list|>
name|doScanWithAsyncTableScanner
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|CONN
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|ForkJoinPool
operator|.
name|commonPool
argument_list|()
argument_list|)
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Result
name|result
init|;
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|Pair
operator|.
name|newPair
argument_list|(
name|results
argument_list|,
name|scanner
operator|.
name|getScanMetrics
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoScanMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Pair
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|,
name|ScanMetrics
argument_list|>
name|pair
init|=
name|method
operator|.
name|scan
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|pair
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Pair
argument_list|<
name|List
argument_list|<
name|Result
argument_list|>
argument_list|,
name|ScanMetrics
argument_list|>
name|pair
init|=
name|method
operator|.
name|scan
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
name|pair
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|bytes
init|=
name|results
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|r
lambda|->
name|Arrays
operator|.
name|asList
argument_list|(
name|r
operator|.
name|rawCells
argument_list|()
argument_list|)
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|c
lambda|->
name|PrivateCellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|c
argument_list|)
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
name|ScanMetrics
name|scanMetrics
init|=
name|pair
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_REGIONS
argument_list|,
name|scanMetrics
operator|.
name|countOfRegions
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bytes
argument_list|,
name|scanMetrics
operator|.
name|countOfBytesInResults
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|NUM_REGIONS
argument_list|,
name|scanMetrics
operator|.
name|countOfRPCcalls
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// also assert a server side metric to ensure that we have published them into the client side
comment|// metrics.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|scanMetrics
operator|.
name|countOfRowsScanned
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

