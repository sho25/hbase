begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_comment
comment|/**  * Options for starting up a mini cluster (including an hbase, dfs and zookeeper clusters) in test.  * The options include HDFS options to build mini dfs cluster, Zookeeper options to build mini zk  * cluster, and mostly HBase options to build mini hbase cluster.  *  * To create an object, use a {@link Builder}.  * Example usage:  *<pre>  *    StartMiniClusterOption option = StartMiniClusterOption.builder().  *        .numMasters(3).rsClass(MyRegionServer.class).createWALDir(true).build();  *</pre>  *  * Default values can be found in {@link Builder}.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
specifier|public
specifier|final
class|class
name|StartMiniClusterOption
block|{
comment|/**    * Number of masters to start up.  We'll start this many hbase masters.  If numMasters> 1, you    * can find the active/primary master with {@link MiniHBaseCluster#getMaster()}.    */
specifier|private
specifier|final
name|int
name|numMasters
decl_stmt|;
comment|/**    * Number of masters that always remain standby. These set of masters never transition to active    * even if an active master does not exist. These are needed for testing scenarios where there are    * no active masters in the cluster but the cluster connection (backed by master registry) should    * still work.    */
specifier|private
specifier|final
name|int
name|numAlwaysStandByMasters
decl_stmt|;
comment|/**    * The class to use as HMaster, or null for default.    */
specifier|private
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
decl_stmt|;
comment|/**    * Number of region servers to start up.    * If this value is> 1, then make sure config "hbase.regionserver.info.port" is -1    * (i.e. no ui per regionserver) otherwise bind errors.    */
specifier|private
specifier|final
name|int
name|numRegionServers
decl_stmt|;
comment|/**    * Ports that RegionServer should use. Pass ports if you want to test cluster restart where for    * sure the regionservers come up on same address+port (but just with different startcode); by    * default mini hbase clusters choose new arbitrary ports on each cluster start.    */
specifier|private
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|rsPorts
decl_stmt|;
comment|/**    * The class to use as HRegionServer, or null for default.    */
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
argument_list|>
name|rsClass
decl_stmt|;
comment|/**    * Number of datanodes. Used to create mini DSF cluster. Surpassed by {@link #dataNodeHosts} size.    */
specifier|private
specifier|final
name|int
name|numDataNodes
decl_stmt|;
comment|/**    * The hostnames of DataNodes to run on. This is useful if you want to run datanode on distinct    * hosts for things like HDFS block location verification. If you start MiniDFSCluster without    * host names, all instances of the datanodes will have the same host name.    */
specifier|private
specifier|final
name|String
index|[]
name|dataNodeHosts
decl_stmt|;
comment|/**    * Number of Zookeeper servers.    */
specifier|private
specifier|final
name|int
name|numZkServers
decl_stmt|;
comment|/**    * Whether to create a new root or data directory path.  If true, the newly created data directory    * will be configured as HBase rootdir.  This will overwrite existing root directory config.    */
specifier|private
specifier|final
name|boolean
name|createRootDir
decl_stmt|;
comment|/**    * Whether to create a new WAL directory.  If true, the newly created directory will be configured    * as HBase wal.dir which is separate from HBase rootdir.    */
specifier|private
specifier|final
name|boolean
name|createWALDir
decl_stmt|;
comment|/**    * Private constructor. Use {@link Builder#build()}.    */
specifier|private
name|StartMiniClusterOption
parameter_list|(
name|int
name|numMasters
parameter_list|,
name|int
name|numAlwaysStandByMasters
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
parameter_list|,
name|int
name|numRegionServers
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|rsPorts
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
argument_list|>
name|rsClass
parameter_list|,
name|int
name|numDataNodes
parameter_list|,
name|String
index|[]
name|dataNodeHosts
parameter_list|,
name|int
name|numZkServers
parameter_list|,
name|boolean
name|createRootDir
parameter_list|,
name|boolean
name|createWALDir
parameter_list|)
block|{
name|this
operator|.
name|numMasters
operator|=
name|numMasters
expr_stmt|;
name|this
operator|.
name|numAlwaysStandByMasters
operator|=
name|numAlwaysStandByMasters
expr_stmt|;
name|this
operator|.
name|masterClass
operator|=
name|masterClass
expr_stmt|;
name|this
operator|.
name|numRegionServers
operator|=
name|numRegionServers
expr_stmt|;
name|this
operator|.
name|rsPorts
operator|=
name|rsPorts
expr_stmt|;
name|this
operator|.
name|rsClass
operator|=
name|rsClass
expr_stmt|;
name|this
operator|.
name|numDataNodes
operator|=
name|numDataNodes
expr_stmt|;
name|this
operator|.
name|dataNodeHosts
operator|=
name|dataNodeHosts
expr_stmt|;
name|this
operator|.
name|numZkServers
operator|=
name|numZkServers
expr_stmt|;
name|this
operator|.
name|createRootDir
operator|=
name|createRootDir
expr_stmt|;
name|this
operator|.
name|createWALDir
operator|=
name|createWALDir
expr_stmt|;
block|}
specifier|public
name|int
name|getNumMasters
parameter_list|()
block|{
return|return
name|numMasters
return|;
block|}
specifier|public
name|int
name|getNumAlwaysStandByMasters
parameter_list|()
block|{
return|return
name|numAlwaysStandByMasters
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|getMasterClass
parameter_list|()
block|{
return|return
name|masterClass
return|;
block|}
specifier|public
name|int
name|getNumRegionServers
parameter_list|()
block|{
return|return
name|numRegionServers
return|;
block|}
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|getRsPorts
parameter_list|()
block|{
return|return
name|rsPorts
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
argument_list|>
name|getRsClass
parameter_list|()
block|{
return|return
name|rsClass
return|;
block|}
specifier|public
name|int
name|getNumDataNodes
parameter_list|()
block|{
return|return
name|numDataNodes
return|;
block|}
specifier|public
name|String
index|[]
name|getDataNodeHosts
parameter_list|()
block|{
return|return
name|dataNodeHosts
return|;
block|}
specifier|public
name|int
name|getNumZkServers
parameter_list|()
block|{
return|return
name|numZkServers
return|;
block|}
specifier|public
name|boolean
name|isCreateRootDir
parameter_list|()
block|{
return|return
name|createRootDir
return|;
block|}
specifier|public
name|boolean
name|isCreateWALDir
parameter_list|()
block|{
return|return
name|createWALDir
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"StartMiniClusterOption{"
operator|+
literal|"numMasters="
operator|+
name|numMasters
operator|+
literal|", masterClass="
operator|+
name|masterClass
operator|+
literal|", numRegionServers="
operator|+
name|numRegionServers
operator|+
literal|", rsPorts="
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|rsPorts
argument_list|)
operator|+
literal|", rsClass="
operator|+
name|rsClass
operator|+
literal|", numDataNodes="
operator|+
name|numDataNodes
operator|+
literal|", dataNodeHosts="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|dataNodeHosts
argument_list|)
operator|+
literal|", numZkServers="
operator|+
name|numZkServers
operator|+
literal|", createRootDir="
operator|+
name|createRootDir
operator|+
literal|", createWALDir="
operator|+
name|createWALDir
operator|+
literal|'}'
return|;
block|}
comment|/**    * @return a new builder.    */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**    * Builder pattern for creating an {@link StartMiniClusterOption}.    *    * The default values of its fields should be considered public and constant. Changing the default    * values may cause other tests fail.    */
specifier|public
specifier|static
specifier|final
class|class
name|Builder
block|{
specifier|private
name|int
name|numMasters
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|numAlwaysStandByMasters
init|=
literal|0
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|numRegionServers
init|=
literal|1
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|rsPorts
init|=
literal|null
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
argument_list|>
name|rsClass
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|numDataNodes
init|=
literal|1
decl_stmt|;
specifier|private
name|String
index|[]
name|dataNodeHosts
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|numZkServers
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|createRootDir
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|createWALDir
init|=
literal|false
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{     }
specifier|public
name|StartMiniClusterOption
name|build
parameter_list|()
block|{
if|if
condition|(
name|dataNodeHosts
operator|!=
literal|null
operator|&&
name|dataNodeHosts
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|numDataNodes
operator|=
name|dataNodeHosts
operator|.
name|length
expr_stmt|;
block|}
return|return
operator|new
name|StartMiniClusterOption
argument_list|(
name|numMasters
argument_list|,
name|numAlwaysStandByMasters
argument_list|,
name|masterClass
argument_list|,
name|numRegionServers
argument_list|,
name|rsPorts
argument_list|,
name|rsClass
argument_list|,
name|numDataNodes
argument_list|,
name|dataNodeHosts
argument_list|,
name|numZkServers
argument_list|,
name|createRootDir
argument_list|,
name|createWALDir
argument_list|)
return|;
block|}
specifier|public
name|Builder
name|numMasters
parameter_list|(
name|int
name|numMasters
parameter_list|)
block|{
name|this
operator|.
name|numMasters
operator|=
name|numMasters
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|numAlwaysStandByMasters
parameter_list|(
name|int
name|numAlwaysStandByMasters
parameter_list|)
block|{
name|this
operator|.
name|numAlwaysStandByMasters
operator|=
name|numAlwaysStandByMasters
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|masterClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|HMaster
argument_list|>
name|masterClass
parameter_list|)
block|{
name|this
operator|.
name|masterClass
operator|=
name|masterClass
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|numRegionServers
parameter_list|(
name|int
name|numRegionServers
parameter_list|)
block|{
name|this
operator|.
name|numRegionServers
operator|=
name|numRegionServers
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|rsPorts
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|rsPorts
parameter_list|)
block|{
name|this
operator|.
name|rsPorts
operator|=
name|rsPorts
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|rsClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|MiniHBaseCluster
operator|.
name|MiniHBaseClusterRegionServer
argument_list|>
name|rsClass
parameter_list|)
block|{
name|this
operator|.
name|rsClass
operator|=
name|rsClass
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|numDataNodes
parameter_list|(
name|int
name|numDataNodes
parameter_list|)
block|{
name|this
operator|.
name|numDataNodes
operator|=
name|numDataNodes
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|dataNodeHosts
parameter_list|(
name|String
index|[]
name|dataNodeHosts
parameter_list|)
block|{
name|this
operator|.
name|dataNodeHosts
operator|=
name|dataNodeHosts
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|numZkServers
parameter_list|(
name|int
name|numZkServers
parameter_list|)
block|{
name|this
operator|.
name|numZkServers
operator|=
name|numZkServers
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|createRootDir
parameter_list|(
name|boolean
name|createRootDir
parameter_list|)
block|{
name|this
operator|.
name|createRootDir
operator|=
name|createRootDir
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Builder
name|createWALDir
parameter_list|(
name|boolean
name|createWALDir
parameter_list|)
block|{
name|this
operator|.
name|createWALDir
operator|=
name|createWALDir
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
block|}
end_class

end_unit

