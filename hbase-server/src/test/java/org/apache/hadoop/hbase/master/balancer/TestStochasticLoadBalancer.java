begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MockNoopMasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|StochasticLoadBalancer
operator|.
name|ServerLocalityCostFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStochasticLoadBalancer
extends|extends
name|BalancerTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestStochasticLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|REGION_KEY
init|=
literal|"testRegion"
decl_stmt|;
comment|// Mapping of locality test -> expected locality
specifier|private
name|float
index|[]
name|expectedLocalities
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.50f
block|,
literal|0.25f
block|,
literal|1.0f
block|}
decl_stmt|;
comment|/**    * Data set for testLocalityCost:    * [test][0][0] = mapping of server to number of regions it hosts    * [test][region + 1][0] = server that region is hosted on    * [test][region + 1][server + 1] = locality for region on server    */
specifier|private
name|int
index|[]
index|[]
index|[]
name|clusterRegionLocationMocks
init|=
operator|new
name|int
index|[]
index|[]
index|[]
block|{
comment|// Test 1: each region is entirely on server that hosts it
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|,
literal|0
block|,
literal|100
block|}
block|,
comment|// region 0 is hosted and entirely local on server 2
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|100
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// region 1 is hosted and entirely on server 0
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|100
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// region 2 is hosted and entirely on server 0
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|100
block|,
literal|0
block|}
block|,
comment|// region 1 is hosted and entirely on server 1
block|}
block|,
comment|// Test 2: each region is 0% local on the server that hosts it
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|100
block|}
block|,
comment|// region 0 is hosted and entirely local on server 2
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|100
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// region 1 is hosted and entirely on server 0
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|100
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|// region 2 is hosted and entirely on server 0
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|,
literal|100
block|,
literal|0
block|}
block|,
comment|// region 1 is hosted and entirely on server 1
block|}
block|,
comment|// Test 3: each region is 25% local on the server that hosts it (and 50% locality is possible)
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|25
block|,
literal|0
block|,
literal|50
block|}
block|,
comment|// region 0 is hosted and entirely local on server 2
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|50
block|,
literal|25
block|,
literal|0
block|}
block|,
comment|// region 1 is hosted and entirely on server 0
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|50
block|,
literal|25
block|,
literal|0
block|}
block|,
comment|// region 2 is hosted and entirely on server 0
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|,
literal|50
block|,
literal|25
block|}
block|,
comment|// region 1 is hosted and entirely on server 1
block|}
block|,
comment|// Test 4: each region is 25% local on the server that hosts it (and 100% locality is possible)
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|25
block|,
literal|0
block|,
literal|100
block|}
block|,
comment|// region 0 is hosted and entirely local on server 2
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|100
block|,
literal|25
block|,
literal|0
block|}
block|,
comment|// region 1 is hosted and entirely on server 0
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|100
block|,
literal|25
block|,
literal|0
block|}
block|,
comment|// region 2 is hosted and entirely on server 0
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|0
block|,
literal|100
block|,
literal|25
block|}
block|,
comment|// region 1 is hosted and entirely on server 1
block|}
block|,
comment|// Test 5: each region is 75% local on the server that hosts it (and 75% locality is possible everywhere)
operator|new
name|int
index|[]
index|[]
block|{
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|75
block|,
literal|75
block|,
literal|75
block|}
block|,
comment|// region 0 is hosted and entirely local on server 2
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|75
block|,
literal|75
block|,
literal|75
block|}
block|,
comment|// region 1 is hosted and entirely on server 0
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|75
block|,
literal|75
block|,
literal|75
block|}
block|,
comment|// region 2 is hosted and entirely on server 0
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|75
block|,
literal|75
block|,
literal|75
block|}
block|,
comment|// region 1 is hosted and entirely on server 1
block|}
block|,   }
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testKeepRegionLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|ServerName
name|sn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"test:8080"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|int
name|numClusterStatusToAdd
init|=
literal|20000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClusterStatusToAdd
condition|;
name|i
operator|++
control|)
block|{
name|ServerMetrics
name|sl
init|=
name|mock
argument_list|(
name|ServerMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|RegionMetrics
name|rl
init|=
name|mock
argument_list|(
name|RegionMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rl
operator|.
name|getReadRequestCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rl
operator|.
name|getWriteRequestCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rl
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Size
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rl
operator|.
name|getStoreFileSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Size
argument_list|(
name|i
argument_list|,
name|Size
operator|.
name|Unit
operator|.
name|MEGABYTE
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionMetrics
argument_list|>
name|regionLoadMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|regionLoadMap
operator|.
name|put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|REGION_KEY
argument_list|)
argument_list|,
name|rl
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sl
operator|.
name|getRegionMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|regionLoadMap
argument_list|)
expr_stmt|;
name|ClusterMetrics
name|clusterStatus
init|=
name|mock
argument_list|(
name|ClusterMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerMetrics
argument_list|>
name|serverMetricsMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|serverMetricsMap
operator|.
name|put
argument_list|(
name|sn
argument_list|,
name|sl
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clusterStatus
operator|.
name|getLiveServerMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|serverMetricsMap
argument_list|)
expr_stmt|;
comment|//      when(clusterStatus.getLoad(sn)).thenReturn(sl);
name|loadBalancer
operator|.
name|setClusterMetrics
argument_list|(
name|clusterStatus
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|loadBalancer
operator|.
name|loads
operator|.
name|get
argument_list|(
name|REGION_KEY
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loadBalancer
operator|.
name|loads
operator|.
name|get
argument_list|(
name|REGION_KEY
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|Queue
argument_list|<
name|BalancerRegionLoad
argument_list|>
name|loads
init|=
name|loadBalancer
operator|.
name|loads
operator|.
name|get
argument_list|(
name|REGION_KEY
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|loads
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|BalancerRegionLoad
name|rl
init|=
name|loads
operator|.
name|remove
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
operator|(
name|numClusterStatusToAdd
operator|-
literal|15
operator|)
argument_list|,
name|rl
operator|.
name|getStorefileSizeMB
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNeedBalance
parameter_list|()
block|{
name|float
name|minCost
init|=
name|conf
operator|.
name|getFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.minCostNeedBalance"
argument_list|,
literal|0.05f
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.minCostNeedBalance"
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
index|[]
name|mockCluster
range|:
name|clusterStateMocks
control|)
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|servers
init|=
name|mockClusterServers
argument_list|(
name|mockCluster
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|plans
argument_list|)
expr_stmt|;
block|}
comment|// reset config
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.minCostNeedBalance"
argument_list|,
name|minCost
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocalityCost
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|MockNoopMasterServices
name|master
init|=
operator|new
name|MockNoopMasterServices
argument_list|()
decl_stmt|;
name|StochasticLoadBalancer
operator|.
name|CostFunction
name|costFunction
init|=
operator|new
name|ServerLocalityCostFunction
argument_list|(
name|conf
argument_list|,
name|master
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|test
init|=
literal|0
init|;
name|test
operator|<
name|clusterRegionLocationMocks
operator|.
name|length
condition|;
name|test
operator|++
control|)
block|{
name|int
index|[]
index|[]
name|clusterRegionLocations
init|=
name|clusterRegionLocationMocks
index|[
name|test
index|]
decl_stmt|;
name|MockCluster
name|cluster
init|=
operator|new
name|MockCluster
argument_list|(
name|clusterRegionLocations
argument_list|)
decl_stmt|;
name|costFunction
operator|.
name|init
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|double
name|cost
init|=
name|costFunction
operator|.
name|cost
argument_list|()
decl_stmt|;
name|double
name|expected
init|=
literal|1
operator|-
name|expectedLocalities
index|[
name|test
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|cost
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveCost
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|StochasticLoadBalancer
operator|.
name|CostFunction
name|costFunction
init|=
operator|new
name|StochasticLoadBalancer
operator|.
name|MoveCostFunction
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
index|[]
name|mockCluster
range|:
name|clusterStateMocks
control|)
block|{
name|BaseLoadBalancer
operator|.
name|Cluster
name|cluster
init|=
name|mockCluster
argument_list|(
name|mockCluster
argument_list|)
decl_stmt|;
name|costFunction
operator|.
name|init
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|double
name|cost
init|=
name|costFunction
operator|.
name|cost
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0.0f
argument_list|,
name|cost
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
comment|// cluster region number is smaller than maxMoves=600
name|cluster
operator|.
name|setNumRegions
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setNumMovedRegions
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|cost
operator|=
name|costFunction
operator|.
name|cost
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.05f
argument_list|,
name|cost
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setNumMovedRegions
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|cost
operator|=
name|costFunction
operator|.
name|cost
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|cost
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setNumMovedRegions
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|cost
operator|=
name|costFunction
operator|.
name|cost
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|cost
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
comment|// cluster region number is bigger than maxMoves=2500
name|cluster
operator|.
name|setNumRegions
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setNumMovedRegions
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|cost
operator|=
name|costFunction
operator|.
name|cost
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.1f
argument_list|,
name|cost
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setNumMovedRegions
argument_list|(
literal|1250
argument_list|)
expr_stmt|;
name|cost
operator|=
name|costFunction
operator|.
name|cost
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.5f
argument_list|,
name|cost
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|setNumMovedRegions
argument_list|(
literal|2500
argument_list|)
expr_stmt|;
name|cost
operator|=
name|costFunction
operator|.
name|cost
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0f
argument_list|,
name|cost
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSkewCost
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|StochasticLoadBalancer
operator|.
name|CostFunction
name|costFunction
init|=
operator|new
name|StochasticLoadBalancer
operator|.
name|RegionCountSkewCostFunction
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
index|[]
name|mockCluster
range|:
name|clusterStateMocks
control|)
block|{
name|costFunction
operator|.
name|init
argument_list|(
name|mockCluster
argument_list|(
name|mockCluster
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|cost
init|=
name|costFunction
operator|.
name|cost
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cost
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cost
operator|<=
literal|1.01
argument_list|)
expr_stmt|;
block|}
name|costFunction
operator|.
name|init
argument_list|(
name|mockCluster
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|costFunction
operator|.
name|cost
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|costFunction
operator|.
name|init
argument_list|(
name|mockCluster
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|costFunction
operator|.
name|cost
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|costFunction
operator|.
name|init
argument_list|(
name|mockCluster
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|costFunction
operator|.
name|cost
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|costFunction
operator|.
name|init
argument_list|(
name|mockCluster
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|costFunction
operator|.
name|cost
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|costFunction
operator|.
name|init
argument_list|(
name|mockCluster
argument_list|(
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|costFunction
operator|.
name|cost
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|costFunction
operator|.
name|init
argument_list|(
name|mockCluster
argument_list|(
operator|new
name|int
index|[]
block|{
literal|10000
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|costFunction
operator|.
name|cost
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCostAfterUndoAction
parameter_list|()
block|{
specifier|final
name|int
name|runs
init|=
literal|10
decl_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
for|for
control|(
name|int
index|[]
name|mockCluster
range|:
name|clusterStateMocks
control|)
block|{
name|BaseLoadBalancer
operator|.
name|Cluster
name|cluster
init|=
name|mockCluster
argument_list|(
name|mockCluster
argument_list|)
decl_stmt|;
name|loadBalancer
operator|.
name|initCosts
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|runs
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|double
name|expectedCost
init|=
name|loadBalancer
operator|.
name|computeCost
argument_list|(
name|cluster
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|Cluster
operator|.
name|Action
name|action
init|=
name|loadBalancer
operator|.
name|nextAction
argument_list|(
name|cluster
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|doAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|updateCostsWithAction
argument_list|(
name|cluster
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|Cluster
operator|.
name|Action
name|undoAction
init|=
name|action
operator|.
name|undoAction
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|doAction
argument_list|(
name|undoAction
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|updateCostsWithAction
argument_list|(
name|cluster
argument_list|,
name|undoAction
argument_list|)
expr_stmt|;
specifier|final
name|double
name|actualCost
init|=
name|loadBalancer
operator|.
name|computeCost
argument_list|(
name|cluster
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedCost
argument_list|,
name|actualCost
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableSkewCost
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|StochasticLoadBalancer
operator|.
name|CostFunction
name|costFunction
init|=
operator|new
name|StochasticLoadBalancer
operator|.
name|TableSkewCostFunction
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
index|[]
name|mockCluster
range|:
name|clusterStateMocks
control|)
block|{
name|BaseLoadBalancer
operator|.
name|Cluster
name|cluster
init|=
name|mockCluster
argument_list|(
name|mockCluster
argument_list|)
decl_stmt|;
name|costFunction
operator|.
name|init
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|double
name|cost
init|=
name|costFunction
operator|.
name|cost
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cost
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cost
operator|<=
literal|1.01
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionLoadCost
parameter_list|()
block|{
name|List
argument_list|<
name|BalancerRegionLoad
argument_list|>
name|regionLoads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|BalancerRegionLoad
name|regionLoad
init|=
name|mock
argument_list|(
name|BalancerRegionLoad
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|regionLoad
operator|.
name|getReadRequestsCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Long
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|regionLoad
operator|.
name|getStorefileSizeMB
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|regionLoads
operator|.
name|add
argument_list|(
name|regionLoad
argument_list|)
expr_stmt|;
block|}
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|StochasticLoadBalancer
operator|.
name|ReadRequestCostFunction
name|readCostFunction
init|=
operator|new
name|StochasticLoadBalancer
operator|.
name|ReadRequestCostFunction
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|double
name|rateResult
init|=
name|readCostFunction
operator|.
name|getRegionLoadCost
argument_list|(
name|regionLoads
argument_list|)
decl_stmt|;
comment|// read requests are treated as a rate so the average rate here is simply 1
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rateResult
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|StochasticLoadBalancer
operator|.
name|StoreFileCostFunction
name|storeFileCostFunction
init|=
operator|new
name|StochasticLoadBalancer
operator|.
name|StoreFileCostFunction
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|double
name|result
init|=
name|storeFileCostFunction
operator|.
name|getRegionLoadCost
argument_list|(
name|regionLoads
argument_list|)
decl_stmt|;
comment|// storefile size cost is simply an average of it's value over time
name|assertEquals
argument_list|(
literal|2.5
argument_list|,
name|result
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCostFromArray
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|StochasticLoadBalancer
operator|.
name|CostFromRegionLoadFunction
name|costFunction
init|=
operator|new
name|StochasticLoadBalancer
operator|.
name|MemStoreSizeCostFunction
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|costFunction
operator|.
name|init
argument_list|(
name|mockCluster
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|double
index|[]
name|statOne
init|=
operator|new
name|double
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|statOne
index|[
name|i
index|]
operator|=
literal|10
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|costFunction
operator|.
name|costFromArray
argument_list|(
name|statOne
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|double
index|[]
name|statTwo
init|=
operator|new
name|double
index|[
literal|101
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|statTwo
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|statTwo
index|[
literal|100
index|]
operator|=
literal|100
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|costFunction
operator|.
name|costFromArray
argument_list|(
name|statTwo
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|double
index|[]
name|statThree
init|=
operator|new
name|double
index|[
literal|200
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|statThree
index|[
name|i
index|]
operator|=
operator|(
literal|0
operator|)
expr_stmt|;
name|statThree
index|[
name|i
operator|+
literal|100
index|]
operator|=
literal|100
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0.5
argument_list|,
name|costFunction
operator|.
name|costFromArray
argument_list|(
name|statThree
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLosingRs
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numNodes
init|=
literal|3
decl_stmt|;
name|int
name|numRegions
init|=
literal|20
decl_stmt|;
name|int
name|numRegionsPerServer
init|=
literal|3
decl_stmt|;
comment|//all servers except one
name|int
name|replication
init|=
literal|1
decl_stmt|;
name|int
name|numTables
init|=
literal|2
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|serverMap
init|=
name|createServerMap
argument_list|(
name|numNodes
argument_list|,
name|numRegions
argument_list|,
name|numRegionsPerServer
argument_list|,
name|replication
argument_list|,
name|numTables
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|list
init|=
name|convertToList
argument_list|(
name|serverMap
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|serverMap
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|plans
argument_list|)
expr_stmt|;
comment|// Apply the plan to the mock cluster.
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|balancedCluster
init|=
name|reconcile
argument_list|(
name|list
argument_list|,
name|plans
argument_list|,
name|serverMap
argument_list|)
decl_stmt|;
name|assertClusterAsBalanced
argument_list|(
name|balancedCluster
argument_list|)
expr_stmt|;
name|ServerName
name|sn
init|=
name|serverMap
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|ServerName
index|[
name|serverMap
operator|.
name|size
argument_list|()
index|]
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|ServerName
name|deadSn
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|,
name|sn
operator|.
name|getPort
argument_list|()
argument_list|,
name|sn
operator|.
name|getStartcode
argument_list|()
operator|-
literal|100
argument_list|)
decl_stmt|;
name|serverMap
operator|.
name|put
argument_list|(
name|deadSn
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|plans
operator|=
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|serverMap
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|plans
argument_list|)
expr_stmt|;
block|}
comment|// This mock allows us to test the LocalityCostFunction
specifier|private
class|class
name|MockCluster
extends|extends
name|BaseLoadBalancer
operator|.
name|Cluster
block|{
specifier|private
name|int
index|[]
index|[]
name|localities
init|=
literal|null
decl_stmt|;
comment|// [region][server] = percent of blocks
specifier|public
name|MockCluster
parameter_list|(
name|int
index|[]
index|[]
name|regions
parameter_list|)
block|{
comment|// regions[0] is an array where index = serverIndex an value = number of regions
name|super
argument_list|(
name|mockClusterServers
argument_list|(
name|regions
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|localities
operator|=
operator|new
name|int
index|[
name|regions
operator|.
name|length
operator|-
literal|1
index|]
index|[]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|regionIndex
init|=
name|i
operator|-
literal|1
decl_stmt|;
name|localities
index|[
name|regionIndex
index|]
operator|=
operator|new
name|int
index|[
name|regions
index|[
name|i
index|]
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
name|regionIndexToServerIndex
index|[
name|regionIndex
index|]
operator|=
name|regions
index|[
name|i
index|]
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
name|regions
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|int
name|serverIndex
init|=
name|j
operator|-
literal|1
decl_stmt|;
name|localities
index|[
name|regionIndex
index|]
index|[
name|serverIndex
index|]
operator|=
name|regions
index|[
name|i
index|]
index|[
name|j
index|]
operator|>
literal|100
condition|?
name|regions
index|[
name|i
index|]
index|[
name|j
index|]
operator|%
literal|100
else|:
name|regions
index|[
name|i
index|]
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
name|float
name|getLocalityOfRegion
parameter_list|(
name|int
name|region
parameter_list|,
name|int
name|server
parameter_list|)
block|{
comment|// convert the locality percentage to a fraction
return|return
name|localities
index|[
name|region
index|]
index|[
name|server
index|]
operator|/
literal|100.0f
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRegionSizeMB
parameter_list|(
name|int
name|region
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
block|}
block|}
end_class

end_unit

