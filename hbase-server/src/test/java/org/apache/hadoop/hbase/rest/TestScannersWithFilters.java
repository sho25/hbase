begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|InclusiveStopFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PageFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RegexStringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SkipFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SubstringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|CellSetModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|RowModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rest
operator|.
name|model
operator|.
name|ScannerModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestScannersWithFilters
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestScannersWithFilters
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestScannersWithFilters"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|ROWS_ONE
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|ROWS_TWO
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyOne"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamilyTwo"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|QUALIFIERS_ONE
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|QUALIFIERS_TWO
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierTwo-3"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|VALUES
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseRESTTestingUtility
name|REST_TEST_UTIL
init|=
operator|new
name|HBaseRESTTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Client
name|client
decl_stmt|;
specifier|private
specifier|static
name|JAXBContext
name|context
decl_stmt|;
specifier|private
specifier|static
name|Marshaller
name|marshaller
decl_stmt|;
specifier|private
specifier|static
name|Unmarshaller
name|unmarshaller
decl_stmt|;
specifier|private
specifier|static
name|long
name|numRows
init|=
name|ROWS_ONE
operator|.
name|length
operator|+
name|ROWS_TWO
operator|.
name|length
decl_stmt|;
specifier|private
specifier|static
name|long
name|colsPerRow
init|=
name|FAMILIES
operator|.
name|length
operator|*
name|QUALIFIERS_ONE
operator|.
name|length
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|REST_TEST_UTIL
operator|.
name|startServletContainer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|CellModel
operator|.
name|class
argument_list|,
name|CellSetModel
operator|.
name|class
argument_list|,
name|RowModel
operator|.
name|class
argument_list|,
name|ScannerModel
operator|.
name|class
argument_list|)
expr_stmt|;
name|marshaller
operator|=
name|context
operator|.
name|createMarshaller
argument_list|()
expr_stmt|;
name|unmarshaller
operator|=
name|context
operator|.
name|createUnmarshaller
argument_list|()
expr_stmt|;
name|client
operator|=
operator|new
name|Client
argument_list|(
operator|new
name|Cluster
argument_list|()
operator|.
name|add
argument_list|(
literal|"localhost"
argument_list|,
name|REST_TEST_UTIL
operator|.
name|getServletPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|admin
operator|.
name|tableExists
argument_list|(
name|TABLE
argument_list|)
condition|)
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TABLE
argument_list|)
decl_stmt|;
comment|// Insert first half
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_ONE
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_ONE
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_TWO
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_TWO
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// Insert second half (reverse families)
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_ONE
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_ONE
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_TWO
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_TWO
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// Delete the second qualifier from all rows and families
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_ONE
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|ROW
range|:
name|ROWS_TWO
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|colsPerRow
operator|-=
literal|2
expr_stmt|;
comment|// Delete the second rows from both groups, one column at a time
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_ONE
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROWS_ONE
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|QUALIFIER
range|:
name|QUALIFIERS_TWO
control|)
block|{
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROWS_TWO
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|d
operator|.
name|deleteColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|numRows
operator|-=
literal|2
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|REST_TEST_UTIL
operator|.
name|shutdownServletContainer
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|verifyScan
parameter_list|(
name|Scan
name|s
parameter_list|,
name|long
name|expectedRows
parameter_list|,
name|long
name|expectedKeys
parameter_list|)
throws|throws
name|Exception
block|{
name|ScannerModel
name|model
init|=
name|ScannerModel
operator|.
name|fromScan
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|model
operator|.
name|setBatch
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// fetch it all at once
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|model
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|body
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/scanner"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|String
name|scannerURI
init|=
name|response
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|scannerURI
argument_list|)
expr_stmt|;
comment|// get a cell set
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|scannerURI
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|CellSetModel
name|cells
init|=
operator|(
name|CellSetModel
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|rows
init|=
name|cells
operator|.
name|getRows
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Scanned too many rows! Only expected "
operator|+
name|expectedRows
operator|+
literal|" total but scanned "
operator|+
name|rows
argument_list|,
name|expectedRows
operator|==
name|rows
argument_list|)
expr_stmt|;
for|for
control|(
name|RowModel
name|row
range|:
name|cells
operator|.
name|getRows
argument_list|()
control|)
block|{
name|int
name|count
init|=
name|row
operator|.
name|getCells
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedKeys
operator|+
literal|" keys per row but "
operator|+
literal|"returned "
operator|+
name|count
argument_list|,
name|expectedKeys
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|// delete the scanner
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|scannerURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|verifyScanFull
parameter_list|(
name|Scan
name|s
parameter_list|,
name|KeyValue
index|[]
name|kvs
parameter_list|)
throws|throws
name|Exception
block|{
name|ScannerModel
name|model
init|=
name|ScannerModel
operator|.
name|fromScan
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|model
operator|.
name|setBatch
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// fetch it all at once
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|model
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|body
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/scanner"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|String
name|scannerURI
init|=
name|response
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|scannerURI
argument_list|)
expr_stmt|;
comment|// get a cell set
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|scannerURI
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|CellSetModel
name|cellSet
init|=
operator|(
name|CellSetModel
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// delete the scanner
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|scannerURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|RowModel
argument_list|>
name|i
init|=
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|boolean
name|done
init|=
literal|true
init|;
name|done
condition|;
name|row
operator|++
control|)
block|{
name|done
operator|=
name|i
operator|.
name|hasNext
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|done
condition|)
break|break;
name|RowModel
name|rowModel
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CellModel
argument_list|>
name|cells
init|=
name|rowModel
operator|.
name|getCells
argument_list|()
decl_stmt|;
if|if
condition|(
name|cells
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|assertTrue
argument_list|(
literal|"Scanned too many keys! Only expected "
operator|+
name|kvs
operator|.
name|length
operator|+
literal|" total but already scanned "
operator|+
operator|(
name|cells
operator|.
name|size
argument_list|()
operator|+
name|idx
operator|)
argument_list|,
name|kvs
operator|.
name|length
operator|>=
name|idx
operator|+
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CellModel
name|cell
range|:
name|cells
control|)
block|{
name|assertTrue
argument_list|(
literal|"Row mismatch"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|rowModel
operator|.
name|getKey
argument_list|()
argument_list|,
name|kvs
index|[
name|idx
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|split
init|=
name|KeyValue
operator|.
name|parseColumn
argument_list|(
name|cell
operator|.
name|getColumn
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Family mismatch"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|,
name|kvs
index|[
name|idx
index|]
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Qualifier mismatch"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|,
name|kvs
index|[
name|idx
index|]
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Value mismatch"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|cell
operator|.
name|getValue
argument_list|()
argument_list|,
name|kvs
index|[
name|idx
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|kvs
operator|.
name|length
operator|+
literal|" total keys but scanned "
operator|+
name|idx
argument_list|,
name|kvs
operator|.
name|length
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|verifyScanNoEarlyOut
parameter_list|(
name|Scan
name|s
parameter_list|,
name|long
name|expectedRows
parameter_list|,
name|long
name|expectedKeys
parameter_list|)
throws|throws
name|Exception
block|{
name|ScannerModel
name|model
init|=
name|ScannerModel
operator|.
name|fromScan
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|model
operator|.
name|setBatch
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// fetch it all at once
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|model
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|body
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|response
init|=
name|client
operator|.
name|put
argument_list|(
literal|"/"
operator|+
name|TABLE
operator|+
literal|"/scanner"
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|body
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|201
argument_list|)
expr_stmt|;
name|String
name|scannerURI
init|=
name|response
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|scannerURI
argument_list|)
expr_stmt|;
comment|// get a cell set
name|response
operator|=
name|client
operator|.
name|get
argument_list|(
name|scannerURI
argument_list|,
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|MIMETYPE_XML
argument_list|,
name|response
operator|.
name|getHeader
argument_list|(
literal|"content-type"
argument_list|)
argument_list|)
expr_stmt|;
name|CellSetModel
name|cellSet
init|=
operator|(
name|CellSetModel
operator|)
name|unmarshaller
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|response
operator|.
name|getBody
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// delete the scanner
name|response
operator|=
name|client
operator|.
name|delete
argument_list|(
name|scannerURI
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|response
operator|.
name|getCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|RowModel
argument_list|>
name|i
init|=
name|cellSet
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|boolean
name|done
init|=
literal|true
init|;
name|done
condition|;
name|j
operator|++
control|)
block|{
name|done
operator|=
name|i
operator|.
name|hasNext
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|done
condition|)
break|break;
name|RowModel
name|rowModel
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CellModel
argument_list|>
name|cells
init|=
name|rowModel
operator|.
name|getCells
argument_list|()
decl_stmt|;
if|if
condition|(
name|cells
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|assertTrue
argument_list|(
literal|"Scanned too many rows! Only expected "
operator|+
name|expectedRows
operator|+
literal|" total but already scanned "
operator|+
operator|(
name|j
operator|+
literal|1
operator|)
argument_list|,
name|expectedRows
operator|>
name|j
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedKeys
operator|+
literal|" keys per row but "
operator|+
literal|"returned "
operator|+
name|cells
operator|.
name|size
argument_list|()
argument_list|,
name|expectedKeys
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedRows
operator|+
literal|" rows but scanned "
operator|+
name|j
operator|+
literal|" rows"
argument_list|,
name|expectedRows
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// No filter
name|long
name|expectedRows
init|=
name|numRows
decl_stmt|;
name|long
name|expectedKeys
init|=
name|colsPerRow
decl_stmt|;
comment|// Both families
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// One family
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrefixFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Grab rows from group one (half of total)
name|long
name|expectedRows
init|=
name|numRows
operator|/
literal|2
decl_stmt|;
name|long
name|expectedKeys
init|=
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPageFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// KVs in first 6 rows
name|KeyValue
index|[]
name|expectedKVs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
comment|// Grab all 6 rows
name|long
name|expectedRows
init|=
literal|6
decl_stmt|;
name|long
name|expectedKeys
init|=
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|expectedKVs
argument_list|)
expr_stmt|;
comment|// Grab first 4 rows (6 cols per row)
name|expectedRows
operator|=
literal|4
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expectedKVs
argument_list|,
literal|24
argument_list|)
argument_list|)
expr_stmt|;
comment|// Grab first 2 rows
name|expectedRows
operator|=
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expectedKVs
argument_list|,
literal|12
argument_list|)
argument_list|)
expr_stmt|;
comment|// Grab first row
name|expectedRows
operator|=
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
name|expectedRows
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|Arrays
operator|.
name|copyOf
argument_list|(
name|expectedKVs
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInclusiveStopFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Grab rows from group one
comment|// If we just use start/stop row, we get total/2 - 1 rows
name|long
name|expectedRows
init|=
operator|(
name|numRows
operator|/
literal|2
operator|)
operator|-
literal|1
decl_stmt|;
name|long
name|expectedKeys
init|=
name|colsPerRow
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-3"
argument_list|)
argument_list|)
decl_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Now use start row with inclusive stop filter
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-0"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|InclusiveStopFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Grab rows from group two
comment|// If we just use start/stop row, we get total/2 - 1 rows
name|expectedRows
operator|=
operator|(
name|numRows
operator|/
literal|2
operator|)
operator|-
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-3"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Now use start row with inclusive stop filter
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-0"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|InclusiveStopFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo-3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyScan
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testQualifierFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Match two keys (one from each family) in half the rows
name|long
name|expectedRows
init|=
name|numRows
operator|/
literal|2
decl_stmt|;
name|long
name|expectedKeys
init|=
literal|2
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys less than same qualifier
comment|// Expect only two keys (one from each family) in half the rows
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|2
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys less than or equal
comment|// Expect four keys (two from each family) in half the rows
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|4
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys not equal
comment|// Expect four keys (two from each family)
comment|// Only look in first group of rows
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|4
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater or equal
comment|// Expect four keys (two from each family)
comment|// Only look in first group of rows
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|4
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater
comment|// Expect two keys (one from each family)
comment|// Only look in first group of rows
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
literal|2
expr_stmt|;
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowTwo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys not equal to
comment|// Look across rows and fully validate the keys and ordering
comment|// Expect varied numbers of keys, 4 per row in group one, 6 per row in
comment|// group two
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Test across rows and groups with a regex
comment|// Filter out "test*-2"
comment|// Expect 4 keys per row across both groups
name|f
operator|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"test.+-2"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Match a single row, all keys
name|long
name|expectedRows
init|=
literal|1
decl_stmt|;
name|long
name|expectedKeys
init|=
name|colsPerRow
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match a two rows, one from each group, using regex
name|expectedRows
operator|=
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"testRow.+-2"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows less than
comment|// Expect all keys in one row
name|expectedRows
operator|=
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows less than or equal
comment|// Expect all keys in two rows
name|expectedRows
operator|=
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows not equal
comment|// Expect all keys in all but one row
name|expectedRows
operator|=
name|numRows
operator|-
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater or equal
comment|// Expect all keys in all but one row
name|expectedRows
operator|=
name|numRows
operator|-
literal|1
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match keys greater
comment|// Expect all keys in all but two rows
name|expectedRows
operator|=
name|numRows
operator|-
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match rows not equal to testRowTwo-2
comment|// Look across rows and fully validate the keys and ordering
comment|// Should see all keys in all rows but testRowTwo-2
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRowOne-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowOne-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowOne-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Test across rows and groups with a regex
comment|// Filter out everything that doesn't match "*-2"
comment|// Expect all keys in two rows
name|f
operator|=
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|kvs
operator|=
operator|new
name|KeyValue
index|[]
block|{
comment|// testRowOne-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
expr_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValueFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Match group one rows
name|long
name|expectedRows
init|=
name|numRows
operator|/
literal|2
decl_stmt|;
name|long
name|expectedKeys
init|=
name|colsPerRow
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match group two rows
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match all values using regex
name|expectedRows
operator|=
name|numRows
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"testValue((One)|(Two))"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values less than
comment|// Expect group one rows
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|LESS
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values less than or equal
comment|// Expect all rows
name|expectedRows
operator|=
name|numRows
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueTwo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values less than or equal
comment|// Expect group one rows
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values not equal
comment|// Expect half the rows
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values greater or equal
comment|// Expect all rows
name|expectedRows
operator|=
name|numRows
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values greater
comment|// Expect half rows
name|expectedRows
operator|=
name|numRows
operator|/
literal|2
expr_stmt|;
name|expectedKeys
operator|=
name|colsPerRow
expr_stmt|;
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|expectedRows
argument_list|,
name|expectedKeys
argument_list|)
expr_stmt|;
comment|// Match values not equal to testValueOne
comment|// Look across rows and fully validate the keys and ordering
comment|// Should see all keys in all group two rows
name|f
operator|=
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValueOne"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSkipFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test for qualifier regex: "testQualifierOne-2"
comment|// Should only get rows from second group, and all keys
name|Filter
name|f
init|=
operator|new
name|SkipFilter
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifierOne-2"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
comment|// testRowTwo-0
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-2
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
comment|// testRowTwo-3
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,     }
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test getting a single row, single key using Row, Qualifier, and Value
comment|// regular expression and substring filters
comment|// Use must pass all
name|List
argument_list|<
name|Filter
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<
name|Filter
argument_list|>
argument_list|()
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"One"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Filter
name|f
init|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ALL
argument_list|,
name|filters
argument_list|)
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|KeyValue
index|[]
name|kvs
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|}
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
comment|// Test getting everything with a MUST_PASS_ONE filter including row, qf,
comment|// val, regular expression and substring filters
name|filters
operator|.
name|clear
argument_list|()
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+Two.+"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|".+-2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|filters
operator|.
name|add
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"One"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|=
operator|new
name|FilterList
argument_list|(
name|Operator
operator|.
name|MUST_PASS_ONE
argument_list|,
name|filters
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|verifyScanNoEarlyOut
argument_list|(
name|s
argument_list|,
name|numRows
argument_list|,
name|colsPerRow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFirstKeyOnlyFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|)
expr_stmt|;
comment|// Expected KVs, the first KV from each of the remaining 6 rows
name|KeyValue
index|[]
name|kvs
init|=
block|{
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_ONE
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_ONE
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|,
operator|new
name|KeyValue
argument_list|(
name|ROWS_TWO
index|[
literal|3
index|]
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIERS_TWO
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
block|}
decl_stmt|;
name|verifyScanFull
argument_list|(
name|s
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

