begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Suite
import|;
end_import

begin_comment
comment|/**  * Checks tests are categorized.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCheckTestClasses
block|{
specifier|private
name|FileFilter
name|TEST_CLASS_FILE_FILTER
init|=
operator|new
name|FileFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|isDirectory
argument_list|()
operator|||
name|isTestClassFile
argument_list|(
name|file
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isTestClassFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|String
name|fileName
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
operator|&&
operator|(
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"Test"
argument_list|)
operator|||
name|fileName
operator|.
name|startsWith
argument_list|(
literal|"IntegrationTest"
argument_list|)
operator|)
return|;
block|}
block|}
decl_stmt|;
comment|/**    * Throws an assertion if we find a test class without category (small/medium/large/integration).    * List all the test classes without category in the assertion message.    */
annotation|@
name|Test
specifier|public
name|void
name|checkClasses
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|badClasses
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|findTestClasses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|existCategoryAnnotation
argument_list|(
name|c
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|badClasses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"There are "
operator|+
name|badClasses
operator|.
name|size
argument_list|()
operator|+
literal|" test classes without category: "
operator|+
name|badClasses
argument_list|,
name|badClasses
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Returns whether the class has @Category annotation having the xface value.    */
specifier|private
name|boolean
name|existCategoryAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|xface
parameter_list|)
block|{
name|Category
name|category
init|=
name|c
operator|.
name|getAnnotation
argument_list|(
name|Category
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|category
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|xface
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cc
range|:
name|category
operator|.
name|value
argument_list|()
control|)
block|{
if|if
condition|(
name|cc
operator|.
name|equals
argument_list|(
name|xface
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/*   * A class is considered as a test class if:    *  - it's not Abstract AND    *  - one or more of its methods is annotated with org.junit.Test OR    *  - the class is annotated with Suite.SuiteClasses   * */
specifier|private
name|boolean
name|isTestClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|c
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|c
operator|.
name|getAnnotation
argument_list|(
name|Suite
operator|.
name|SuiteClasses
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
for|for
control|(
name|Method
name|met
range|:
name|c
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|met
operator|.
name|getAnnotation
argument_list|(
name|Test
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Finds test classes which are annotated with @Category having xface value    * @param xface the @Category value    */
specifier|public
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findTestClasses
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|xface
parameter_list|)
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|findTestClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|existCategoryAnnotation
argument_list|(
name|c
argument_list|,
name|xface
argument_list|)
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|classes
return|;
block|}
specifier|private
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findTestClasses
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
specifier|final
name|String
name|packageName
init|=
literal|"org.apache.hadoop.hbase"
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|packageName
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|resources
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResources
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|resources
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|URL
name|resource
init|=
name|resources
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|dirs
operator|.
name|add
argument_list|(
operator|new
name|File
argument_list|(
name|resource
operator|.
name|getFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|File
name|directory
range|:
name|dirs
control|)
block|{
name|classes
operator|.
name|addAll
argument_list|(
name|findTestClasses
argument_list|(
name|directory
argument_list|,
name|packageName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|classes
return|;
block|}
specifier|private
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|findTestClasses
parameter_list|(
name|File
name|baseDirectory
parameter_list|,
name|String
name|packageName
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|baseDirectory
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|classes
return|;
block|}
name|File
index|[]
name|files
init|=
name|baseDirectory
operator|.
name|listFiles
argument_list|(
name|TEST_CLASS_FILE_FILTER
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"hbase-hadoop\\d?-compat"
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|files
control|)
block|{
specifier|final
name|String
name|fileName
init|=
name|file
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|matcher
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|find
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|classes
operator|.
name|addAll
argument_list|(
name|findTestClasses
argument_list|(
name|file
argument_list|,
name|packageName
operator|+
literal|"."
operator|+
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
name|packageName
operator|+
literal|'.'
operator|+
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileName
operator|.
name|length
argument_list|()
operator|-
literal|6
argument_list|)
argument_list|,
literal|false
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isTestClass
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|classes
return|;
block|}
block|}
end_class

end_unit

