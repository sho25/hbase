begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|doGets
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|doPuts
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|triggerExceedThrottleQuotaCacheRefresh
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|triggerNamespaceCacheRefresh
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|triggerRegionServerCacheRefresh
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|triggerTableCacheRefresh
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|triggerUserCacheRefresh
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|ThrottleQuotaTestUtil
operator|.
name|waitMinuteQuota
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Ignore
comment|// Disabled because flakey. Fails ~30% on a resource constrained GCE though not on Apache.
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestQuotaThrottle
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestQuotaThrottle
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestQuotaThrottle
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|REFRESH_TIME
init|=
literal|30
operator|*
literal|60000
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|TableName
index|[]
name|TABLE_NAMES
init|=
operator|new
name|TableName
index|[]
block|{
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestQuotaAdmin0"
argument_list|)
block|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestQuotaAdmin1"
argument_list|)
block|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestQuotaAdmin2"
argument_list|)
block|}
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|NAMESPACES
init|=
operator|new
name|String
index|[]
block|{
literal|"NAMESPACE01"
block|,
literal|"NAMESPACE02"
block|,
literal|"NAMESPACE03"
block|}
decl_stmt|;
specifier|private
specifier|static
name|Table
index|[]
name|tables
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_CONF_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|QuotaCache
operator|.
name|REFRESH_CONF_KEY
argument_list|,
name|REFRESH_TIME
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.msginterval"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.master.enabletable.roundrobin"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
expr_stmt|;
name|QuotaCache
operator|.
name|TEST_FORCE_REFRESH
operator|=
literal|true
expr_stmt|;
name|tables
operator|=
operator|new
name|Table
index|[
name|TABLE_NAMES
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TABLE_NAMES
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tables
index|[
name|i
index|]
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAMES
index|[
name|i
index|]
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|tables
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|tables
index|[
name|i
index|]
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|TABLE_NAMES
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|ThrottleQuotaTestUtil
operator|.
name|clearQuotaCache
argument_list|(
name|TEST_UTIL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserGlobalThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
comment|// Add 6req/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
comment|// should execute at max 6 requests
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait a minute and you should get other 6 requests executed
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserGlobalReadAndWriteThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
comment|// Add 6req/min limit for read request
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
comment|// not limit for write request and should execute at max 6 read requests
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doGets
argument_list|(
literal|100
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
comment|// Add 6req/min limit for write request
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
comment|// should execute at max 6 read requests and at max 6 write write requests
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doGets
argument_list|(
literal|100
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserTableThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
comment|// Add 6req/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 requests on tables[0] and have no limit on tables[1]
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doPuts
argument_list|(
literal|30
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait a minute and you should get other 6 requests executed
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserUnThrottleByType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|String
name|userName01
init|=
literal|"user01"
decl_stmt|;
comment|// Add 6req/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName01
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName01
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUserByThrottleType
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUserByThrottleType
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserTableUnThrottleByType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|String
name|userName01
init|=
literal|"user01"
decl_stmt|;
comment|// Add 6req/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName01
argument_list|,
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName01
argument_list|,
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUserByThrottleType
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUserByThrottleType
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserNameSpaceUnThrottleByType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
name|String
name|userName01
init|=
literal|"user01"
decl_stmt|;
comment|// Add 6req/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|NAMESPACES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|NAMESPACES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName01
argument_list|,
name|NAMESPACES
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName01
argument_list|,
name|NAMESPACES
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUserByThrottleType
argument_list|(
name|userName
argument_list|,
name|NAMESPACES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUserByThrottleType
argument_list|(
name|userName
argument_list|,
name|NAMESPACES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableUnThrottleByType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
comment|// Add 6req/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTableByThrottleType
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTableByThrottleType
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameSpaceUnThrottleByType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
comment|// Add 6req/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|NAMESPACES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|NAMESPACES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|NAMESPACES
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|NAMESPACES
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleNamespaceByThrottleType
argument_list|(
name|NAMESPACES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleNamespaceByThrottleType
argument_list|(
name|NAMESPACES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_SIZE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionServerUnThrottleByType
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|REGIONSERVER
init|=
block|{
literal|"RS01"
block|,
literal|"RS02"
block|}
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleRegionServer
argument_list|(
name|REGIONSERVER
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|4
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleRegionServer
argument_list|(
name|REGIONSERVER
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|4
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleRegionServer
argument_list|(
name|REGIONSERVER
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|4
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleRegionServer
argument_list|(
name|REGIONSERVER
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|4
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleRegionServerByThrottleType
argument_list|(
name|REGIONSERVER
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleRegionServerByThrottleType
argument_list|(
name|REGIONSERVER
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getQuotaSettingCount
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getQuotaSettingCount
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|QuotaSettings
argument_list|>
name|list_quotas
init|=
name|admin
operator|.
name|getQuota
argument_list|(
operator|new
name|QuotaFilter
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|quotaSettingCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|QuotaSettings
name|setting
range|:
name|list_quotas
control|)
block|{
name|quotaSettingCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Quota Setting:"
operator|+
name|setting
argument_list|)
expr_stmt|;
block|}
return|return
name|quotaSettingCount
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserTableReadAndWriteThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
comment|// Add 6req/min limit for write request on tables[0]
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 write requests and have no limit for read request
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// no limit on tables[1]
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait a minute and you should get other 6 write requests executed
name|waitMinuteQuota
argument_list|()
expr_stmt|;
comment|// Add 6req/min limit for read request on tables[0]
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 read requests and at max 6 write requests
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// no limit on tables[1]
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doPuts
argument_list|(
literal|30
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doGets
argument_list|(
literal|30
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserNamespaceThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|NAMESPACE
init|=
literal|"default"
decl_stmt|;
comment|// Add 6req/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|NAMESPACE
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 requests on tables[0] and have no limit on tables[1]
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait a minute and you should get other 6 requests executed
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|,
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserNamespaceReadAndWriteThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|NAMESPACE
init|=
literal|"default"
decl_stmt|;
comment|// Add 6req/min limit for read request
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|NAMESPACE
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 read requests and have no limit for write request
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
comment|// Add 6req/min limit for write request, too
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|NAMESPACE
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 read requests and at max 6 write requests
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|,
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doPuts
argument_list|(
literal|60
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|60
argument_list|,
name|doGets
argument_list|(
literal|60
argument_list|,
name|tables
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableGlobalThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Add 6req/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 requests
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// should have no limits
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doPuts
argument_list|(
literal|30
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait a minute and you should get other 6 requests executed
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|80
argument_list|,
name|doGets
argument_list|(
literal|80
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableGlobalReadAndWriteThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Add 6req/min limit for read request
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 read requests and have no limit for write request
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doGets
argument_list|(
literal|100
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// should have no limits on tables[1]
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doPuts
argument_list|(
literal|30
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doGets
argument_list|(
literal|30
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait a minute and you should get other 6 requests executed
name|waitMinuteQuota
argument_list|()
expr_stmt|;
comment|// Add 6req/min limit for write request, too
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 read requests and at max 6 write requests
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doGets
argument_list|(
literal|100
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// should have no limits on tables[1]
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doPuts
argument_list|(
literal|30
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doGets
argument_list|(
literal|30
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the limits
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|80
argument_list|,
name|doGets
argument_list|(
literal|80
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceGlobalThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|NAMESPACE
init|=
literal|"default"
decl_stmt|;
comment|// Add 6req/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|NAMESPACE
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerNamespaceCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 requests
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait a minute and you should get other 6 requests executed
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleNamespace
argument_list|(
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|triggerNamespaceCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|doPuts
argument_list|(
literal|40
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceGlobalReadAndWriteThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|NAMESPACE
init|=
literal|"default"
decl_stmt|;
comment|// Add 6req/min limit for write request
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|NAMESPACE
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerNamespaceCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 write requests and no limit for read request
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|doGets
argument_list|(
literal|100
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait a minute and you should get other 6 requests executed
name|waitMinuteQuota
argument_list|()
expr_stmt|;
comment|// Add 6req/min limit for read request, too
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|NAMESPACE
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerNamespaceCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 write requests and at max 6 read requests
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doGets
argument_list|(
literal|100
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleNamespace
argument_list|(
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|triggerNamespaceCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|doPuts
argument_list|(
literal|40
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserAndTableThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
comment|// Add 6req/min limit for the user on tables[0]
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Add 12req/min limit for the user
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|12
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|,
name|TABLE_NAMES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Add 8req/min limit for the tables[1]
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|8
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Add a lower table level throttle on tables[0]
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|3
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 12 requests
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|doGets
argument_list|(
literal|100
argument_list|,
name|tables
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// should execute at max 8 requests
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|doGets
argument_list|(
literal|100
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// should execute at max 3 requests
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove all the throttling rules
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|doGets
argument_list|(
literal|40
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|doGets
argument_list|(
literal|40
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserGlobalBypassThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|NAMESPACE
init|=
literal|"default"
decl_stmt|;
comment|// Add 6req/min limit for tables[0]
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Add 13req/min limit for the user
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|NAMESPACE
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|13
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerNamespaceCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 requests on table[0] and (13 - 6) on table[1]
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|doGets
argument_list|(
literal|100
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
comment|// Set the global bypass for the user
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|bypassGlobals
argument_list|(
name|userName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|2
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doGets
argument_list|(
literal|30
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doGets
argument_list|(
literal|30
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
comment|// Remove the global bypass
comment|// should execute at max 6 requests on table[0] and (13 - 6) on table[1]
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|bypassGlobals
argument_list|(
name|userName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleUser
argument_list|(
name|userName
argument_list|,
name|TABLE_NAMES
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerUserCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|100
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|doGets
argument_list|(
literal|100
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// unset throttle
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleNamespace
argument_list|(
name|NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|triggerNamespaceCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doGets
argument_list|(
literal|30
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|30
argument_list|,
name|doGets
argument_list|(
literal|30
argument_list|,
name|tables
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableWriteCapacityUnitThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Add 6CU/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|WRITE_CAPACITY_UNIT
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// should execute at max 6 capacity units because each put size is 1 capacity unit
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doPuts
argument_list|(
literal|20
argument_list|,
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait a minute and you should execute at max 3 capacity units because each put size is 2
comment|// capacity unit
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|doPuts
argument_list|(
literal|20
argument_list|,
literal|1025
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableReadCapacityUnitThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Add 6CU/min limit
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|READ_CAPACITY_UNIT
argument_list|,
literal|6
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|doPuts
argument_list|(
literal|20
argument_list|,
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// should execute at max 6 capacity units because each get size is 1 capacity unit
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|doGets
argument_list|(
literal|20
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|doPuts
argument_list|(
literal|20
argument_list|,
literal|2015
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait a minute and you should execute at max 3 capacity units because each get size is 2
comment|// capacity unit on tables[0]
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|doGets
argument_list|(
literal|20
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableExistsGetThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Add throttle quota
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|REQUEST_NUMBER
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// An exists call when having throttle quota
name|table
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionServerThrottle
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// requests are throttled by table quota
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleRegionServer
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_REGION_SERVER_ROW_KEY
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|7
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|triggerRegionServerCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerRegionServerCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// requests are throttled by region server quota
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleRegionServer
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_REGION_SERVER_ROW_KEY
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|4
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerRegionServerCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerRegionServerCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// unthrottle
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleRegionServer
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_REGION_SERVER_ROW_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|triggerRegionServerCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|triggerRegionServerCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceedThrottleQuota
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleRegionServer
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_REGION_SERVER_ROW_KEY
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleRegionServer
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_REGION_SERVER_ROW_KEY
argument_list|,
name|ThrottleType
operator|.
name|READ_NUMBER
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|triggerRegionServerCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// enable exceed throttle quota
name|admin
operator|.
name|exceedThrottleQuotaSwitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// exceed table limit and allowed by region server limit
name|triggerExceedThrottleQuotaCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// exceed table limit and throttled by region server limit
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|doPuts
argument_list|(
literal|25
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// set region server limiter is lower than table limiter
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleRegionServer
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_REGION_SERVER_ROW_KEY
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|triggerRegionServerCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// throttled by region server limiter
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleRegionServer
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_REGION_SERVER_ROW_KEY
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|20
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|triggerRegionServerCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// disable exceed throttle quota
name|admin
operator|.
name|exceedThrottleQuotaSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|triggerExceedThrottleQuotaCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
comment|// throttled by table limit
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// enable exceed throttle quota and unthrottle region server
name|admin
operator|.
name|exceedThrottleQuotaSwitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|triggerExceedThrottleQuotaCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleRegionServer
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_REGION_SERVER_ROW_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|triggerRegionServerCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|waitMinuteQuota
argument_list|()
expr_stmt|;
comment|// throttled by table limit
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|doPuts
argument_list|(
literal|10
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|tables
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// disable exceed throttle quota
name|admin
operator|.
name|exceedThrottleQuotaSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|triggerExceedThrottleQuotaCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// unthrottle table
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|unthrottleTable
argument_list|(
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|triggerTableCacheRefresh
argument_list|(
name|TEST_UTIL
argument_list|,
literal|true
argument_list|,
name|TABLE_NAMES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

