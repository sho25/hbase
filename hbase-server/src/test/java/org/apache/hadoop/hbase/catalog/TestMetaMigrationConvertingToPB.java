begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|catalog
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|DataOutputBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test migration that changes HRI serialization into PB. Tests by bringing up a cluster from actual  * data from a 0.92 cluster, as well as manually downgrading and then upgrading the META info.  * @deprecated Remove after 0.96  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
annotation|@
name|Deprecated
specifier|public
class|class
name|TestMetaMigrationConvertingToPB
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMetaMigrationConvertingToPB
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TESTTABLE
init|=
literal|"TestTable"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|ROW_COUNT
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|REGION_COUNT
init|=
literal|9
decl_stmt|;
comment|//initial number of regions of the TestTable
specifier|private
specifier|static
specifier|final
name|int
name|META_VERSION_092
init|=
literal|0
decl_stmt|;
comment|/*    * This test uses a tgz file named "TestMetaMigrationConvertingToPB.tgz" under    * hbase-server/src/test/data which contains file data from a 0.92 cluster.    * The cluster has a table named "TestTable", which has 100 rows. 0.94 has same    * META structure, so it should be the same.    *    * hbase(main):001:0> create 'TestTable', 'f1'    * hbase(main):002:0> for i in 1..100    * hbase(main):003:1> put 'TestTable', "row#{i}", "f1:c1", i    * hbase(main):004:1> end    *    * There are 9 regions in the table    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start up our mini cluster on top of an 0.92 root.dir that has data from
comment|// a 0.92 hbase run -- it has a table with 100 rows in it  -- and see if
comment|// we can migrate from 0.92
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Path
name|testdir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestMetaMigrationConvertToPB"
argument_list|)
decl_stmt|;
comment|// Untar our test dir.
name|File
name|untar
init|=
name|untar
argument_list|(
operator|new
name|File
argument_list|(
name|testdir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Now copy the untar up into hdfs so when we start hbase, we'll run from it.
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// find where hbase will root itself, so we can copy filesystem there
name|Path
name|hbaseRootDir
init|=
name|TEST_UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|isDirectory
argument_list|(
name|hbaseRootDir
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
comment|// mkdir at first
name|doFsCommand
argument_list|(
name|shell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-mkdir"
block|,
name|hbaseRootDir
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
name|doFsCommand
argument_list|(
name|shell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-put"
block|,
name|untar
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|hbaseRootDir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
comment|// See whats in minihdfs.
name|doFsCommand
argument_list|(
name|shell
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-lsr"
block|,
literal|"/"
block|}
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniHBaseCluster
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Assert we are running against the copied-up filesystem.  The copied-up
comment|// rootdir should have had a table named 'TestTable' in it.  Assert it
comment|// present.
name|HTable
name|t
init|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TESTTABLE
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
comment|// Assert that we find all 100 rows that are in the data we loaded.  If
comment|// so then we must have migrated it from 0.90 to 0.92.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ROW_COUNT
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|File
name|untar
parameter_list|(
specifier|final
name|File
name|testdir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Find the src data under src/test/data
specifier|final
name|String
name|datafile
init|=
literal|"TestMetaMigrationConvertToPB"
decl_stmt|;
name|String
name|srcTarFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"project.build.testSourceDirectory"
argument_list|,
literal|"src/test"
argument_list|)
operator|+
name|File
operator|.
name|separator
operator|+
literal|"data"
operator|+
name|File
operator|.
name|separator
operator|+
name|datafile
operator|+
literal|".tgz"
decl_stmt|;
name|File
name|homedir
init|=
operator|new
name|File
argument_list|(
name|testdir
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|tgtUntarDir
init|=
operator|new
name|File
argument_list|(
name|homedir
argument_list|,
name|datafile
argument_list|)
decl_stmt|;
if|if
condition|(
name|tgtUntarDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|tgtUntarDir
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed delete of "
operator|+
name|tgtUntarDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Untarring "
operator|+
name|srcTarFile
operator|+
literal|" into "
operator|+
name|homedir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|FileUtil
operator|.
name|unTar
argument_list|(
operator|new
name|File
argument_list|(
name|srcTarFile
argument_list|)
argument_list|,
name|homedir
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tgtUntarDir
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tgtUntarDir
return|;
block|}
specifier|private
specifier|static
name|void
name|doFsCommand
parameter_list|(
specifier|final
name|FsShell
name|shell
parameter_list|,
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Run the 'put' command.
name|int
name|errcode
init|=
name|shell
operator|.
name|run
argument_list|(
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|errcode
operator|!=
literal|0
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed put; errcode="
operator|+
name|errcode
argument_list|)
throw|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaUpdatedFlagInROOT
parameter_list|()
throws|throws
name|Exception
block|{
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|boolean
name|metaUpdated
init|=
name|MetaMigrationConvertingToPB
operator|.
name|isMetaHRIUpdated
argument_list|(
name|master
operator|.
name|getCatalogTracker
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|metaUpdated
argument_list|)
expr_stmt|;
name|verifyMetaRowsAreUpdated
argument_list|(
name|master
operator|.
name|getCatalogTracker
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaMigration
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMetaMigration"
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"testMetaMigration"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|regionNames
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|EMPTY_START_ROW
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region_b"
argument_list|)
block|}
decl_stmt|;
name|createMultiRegionsWithWritableSerialization
argument_list|(
name|conf
argument_list|,
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
name|regionNames
argument_list|)
expr_stmt|;
name|CatalogTracker
name|ct
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getCatalogTracker
argument_list|()
decl_stmt|;
comment|// Erase the current version of root meta for this test.
name|undoVersionInRoot
argument_list|(
name|ct
argument_list|)
expr_stmt|;
name|MetaReader
operator|.
name|fullScanMetaAndPrint
argument_list|(
name|ct
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Meta Print completed.testMetaMigration"
argument_list|)
expr_stmt|;
name|long
name|numMigratedRows
init|=
name|MetaMigrationConvertingToPB
operator|.
name|updateMeta
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
decl_stmt|;
name|MetaReader
operator|.
name|fullScanMetaAndPrint
argument_list|(
name|ct
argument_list|)
expr_stmt|;
comment|// Should be one entry only and it should be for the table we just added.
name|assertEquals
argument_list|(
name|regionNames
operator|.
name|length
argument_list|,
name|numMigratedRows
argument_list|)
expr_stmt|;
comment|// Assert that the flag in ROOT is updated to reflect the correct status
name|boolean
name|metaUpdated
init|=
name|MetaMigrationConvertingToPB
operator|.
name|isMetaHRIUpdated
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getCatalogTracker
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|metaUpdated
argument_list|)
expr_stmt|;
name|verifyMetaRowsAreUpdated
argument_list|(
name|ct
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test assumes a master crash/failure during the meta migration process    * and attempts to continue the meta migration process when a new master takes over.    * When a master dies during the meta migration we will have some rows of    * META.CatalogFamily updated with PB serialization and some    * still hanging with writable serialization. When the backup master/ or    * fresh start of master attempts the migration it will encounter some rows of META    * already updated with new HRI and some still legacy. This test will simulate this    * scenario and validates that the migration process can safely skip the updated    * rows and migrate any pending rows at startup.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMasterCrashDuringMetaMigration
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
literal|"testMasterCrashDuringMetaMigration"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// Create 10 New regions.
name|createMultiRegionsWithPBSerialization
argument_list|(
name|conf
argument_list|,
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Create 10 Legacy regions.
name|createMultiRegionsWithWritableSerialization
argument_list|(
name|conf
argument_list|,
name|htd
operator|.
name|getName
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|CatalogTracker
name|ct
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getCatalogTracker
argument_list|()
decl_stmt|;
comment|// Erase the current version of root meta for this test.
name|undoVersionInRoot
argument_list|(
name|ct
argument_list|)
expr_stmt|;
name|MetaReader
operator|.
name|fullScanMetaAndPrint
argument_list|(
name|ct
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Meta Print completed.testUpdatesOnMetaWithLegacyHRI"
argument_list|)
expr_stmt|;
name|long
name|numMigratedRows
init|=
name|MetaMigrationConvertingToPB
operator|.
name|updateRootAndMetaIfNecessary
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numMigratedRows
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Assert that the flag in ROOT is updated to reflect the correct status
name|boolean
name|metaUpdated
init|=
name|MetaMigrationConvertingToPB
operator|.
name|isMetaHRIUpdated
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getCatalogTracker
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|metaUpdated
argument_list|)
expr_stmt|;
name|verifyMetaRowsAreUpdated
argument_list|(
name|ct
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"END testMasterCrashDuringMetaMigration"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify that every META row is updated    */
name|void
name|verifyMetaRowsAreUpdated
parameter_list|(
name|CatalogTracker
name|catalogTracker
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
name|MetaReader
operator|.
name|fullScan
argument_list|(
name|catalogTracker
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|size
argument_list|()
operator|>=
name|REGION_COUNT
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|results
control|)
block|{
name|byte
index|[]
name|hriBytes
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hriBytes
operator|!=
literal|null
operator|&&
name|hriBytes
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MetaMigrationConvertingToPB
operator|.
name|isMigrated
argument_list|(
name|hriBytes
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|splitA
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitA
operator|!=
literal|null
operator|&&
name|splitA
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|MetaMigrationConvertingToPB
operator|.
name|isMigrated
argument_list|(
name|splitA
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|splitB
init|=
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitB
operator|!=
literal|null
operator|&&
name|splitB
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|MetaMigrationConvertingToPB
operator|.
name|isMigrated
argument_list|(
name|splitB
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Changes the version of META to 0 to simulate 0.92 and 0.94 clusters*/
specifier|private
name|void
name|undoVersionInRoot
parameter_list|(
name|CatalogTracker
name|ct
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|META_VERSION_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|META_VERSION_092
argument_list|)
argument_list|)
expr_stmt|;
name|MetaEditor
operator|.
name|putToRootTable
argument_list|(
name|ct
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Downgraded -ROOT- meta version="
operator|+
name|META_VERSION_092
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts multiple regions into META using Writable serialization instead of PB    */
specifier|public
name|int
name|createMultiRegionsWithWritableSerialization
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numRegions
operator|<
literal|3
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Must create at least 3 regions"
argument_list|)
throw|;
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzzzz"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
operator|-
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|regionStartKeys
init|=
operator|new
name|byte
index|[
name|splitKeys
operator|.
name|length
operator|+
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regionStartKeys
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|splitKeys
index|[
name|i
index|]
expr_stmt|;
block|}
name|regionStartKeys
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
return|return
name|createMultiRegionsWithWritableSerialization
argument_list|(
name|c
argument_list|,
name|tableName
argument_list|,
name|regionStartKeys
argument_list|)
return|;
block|}
comment|/**    * Inserts multiple regions into META using Writable serialization instead of PB    */
specifier|public
name|int
name|createMultiRegionsWithWritableSerialization
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|startKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|startKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|newRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|startKeys
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|startKeys
operator|.
name|length
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|startKeys
index|[
name|i
index|]
argument_list|,
name|startKeys
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|getBytes
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
comment|//this is the old Writable serialization
comment|//also add the region as it's daughters
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITA_QUALIFIER
argument_list|,
name|getBytes
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
comment|//this is the old Writable serialization
name|put
operator|.
name|add
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|SPLITB_QUALIFIER
argument_list|,
name|getBytes
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
comment|//this is the old Writable serialization
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"createMultiRegionsWithWritableSerialization: PUT inserted "
operator|+
name|hri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
annotation|@
name|Deprecated
specifier|private
name|byte
index|[]
name|getBytes
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|DataOutputBuffer
name|out
init|=
operator|new
name|DataOutputBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|hri
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
return|return
name|out
operator|.
name|getData
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Inserts multiple regions into META using PB serialization    */
name|int
name|createMultiRegionsWithPBSerialization
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|numRegions
operator|<
literal|3
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Must create at least 3 regions"
argument_list|)
throw|;
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaaa"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzzzz"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|Bytes
operator|.
name|split
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numRegions
operator|-
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|regionStartKeys
init|=
operator|new
name|byte
index|[
name|splitKeys
operator|.
name|length
operator|+
literal|1
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|regionStartKeys
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|splitKeys
index|[
name|i
index|]
expr_stmt|;
block|}
name|regionStartKeys
index|[
literal|0
index|]
operator|=
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
expr_stmt|;
return|return
name|createMultiRegionsWithPBSerialization
argument_list|(
name|c
argument_list|,
name|tableName
argument_list|,
name|regionStartKeys
argument_list|)
return|;
block|}
comment|/**    * Inserts multiple regions into META using PB serialization    */
name|int
name|createMultiRegionsWithPBSerialization
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
index|[]
name|startKeys
parameter_list|)
throws|throws
name|IOException
block|{
name|Arrays
operator|.
name|sort
argument_list|(
name|startKeys
argument_list|,
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|HTable
name|meta
init|=
operator|new
name|HTable
argument_list|(
name|c
argument_list|,
name|HConstants
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|newRegions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|startKeys
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|startKeys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|startKeys
operator|.
name|length
decl_stmt|;
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|startKeys
index|[
name|i
index|]
argument_list|,
name|startKeys
index|[
name|j
index|]
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
name|MetaEditor
operator|.
name|makePutFromRegionInfo
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|put
operator|.
name|setWriteToWAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"createMultiRegionsWithPBSerialization: PUT inserted "
operator|+
name|hri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newRegions
operator|.
name|add
argument_list|(
name|hri
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|meta
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
block|}
end_class

end_unit

