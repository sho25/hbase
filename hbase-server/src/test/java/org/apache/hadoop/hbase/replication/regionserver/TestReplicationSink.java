begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|WALEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|UnsafeByteOperations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|WALProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationSink
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestReplicationSink
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|ReplicationSink
name|SINK
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|TableName
name|TABLE_NAME1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|TableName
name|TABLE_NAME2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table2"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|FAM_NAME1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info1"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|FAM_NAME2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info2"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Table
name|table1
decl_stmt|;
specifier|protected
specifier|static
name|Stoppable
name|STOPPABLE
init|=
operator|new
name|Stoppable
argument_list|()
block|{
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stop
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"STOPPING BECAUSE: "
operator|+
name|why
argument_list|)
expr_stmt|;
name|this
operator|.
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
specifier|protected
specifier|static
name|Table
name|table2
decl_stmt|;
specifier|protected
specifier|static
name|String
name|baseNamespaceDir
decl_stmt|;
specifier|protected
specifier|static
name|String
name|hfileArchiveDir
decl_stmt|;
specifier|protected
specifier|static
name|String
name|replicationClusterId
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.replication.source.fs.conf.provider"
argument_list|,
name|TestSourceFSConfigurationProvider
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|SINK
operator|=
operator|new
name|ReplicationSink
argument_list|(
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|STOPPABLE
argument_list|)
expr_stmt|;
name|table1
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME1
argument_list|,
name|FAM_NAME1
argument_list|)
expr_stmt|;
name|table2
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME2
argument_list|,
name|FAM_NAME2
argument_list|)
expr_stmt|;
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|baseNamespaceDir
operator|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
operator|new
name|Path
argument_list|(
name|HConstants
operator|.
name|BASE_NAMESPACE_DIR
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|hfileArchiveDir
operator|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
operator|new
name|Path
argument_list|(
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|replicationClusterId
operator|=
literal|"12345"
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|STOPPABLE
operator|.
name|stop
argument_list|(
literal|"Shutting down"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|table1
operator|=
name|TEST_UTIL
operator|.
name|deleteTableData
argument_list|(
name|TABLE_NAME1
argument_list|)
expr_stmt|;
name|table2
operator|=
name|TEST_UTIL
operator|.
name|deleteTableData
argument_list|(
name|TABLE_NAME2
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert a whole batch of entries    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBatchSink
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BATCH_SIZE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|,
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|,
name|replicationClusterId
argument_list|,
name|baseNamespaceDir
argument_list|,
name|hfileArchiveDir
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanRes
init|=
name|table1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BATCH_SIZE
argument_list|,
name|scanRes
operator|.
name|next
argument_list|(
name|BATCH_SIZE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert a mix of puts and deletes    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMixedPutDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BATCH_SIZE
operator|/
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|,
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
argument_list|)
argument_list|,
name|replicationClusterId
argument_list|,
name|baseNamespaceDir
argument_list|,
name|hfileArchiveDir
argument_list|)
expr_stmt|;
name|entries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BATCH_SIZE
argument_list|)
expr_stmt|;
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|i
operator|%
literal|2
operator|!=
literal|0
condition|?
name|KeyValue
operator|.
name|Type
operator|.
name|Put
else|:
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|,
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|,
name|replicationClusterId
argument_list|,
name|baseNamespaceDir
argument_list|,
name|hfileArchiveDir
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanRes
init|=
name|table1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|BATCH_SIZE
operator|/
literal|2
argument_list|,
name|scanRes
operator|.
name|next
argument_list|(
name|BATCH_SIZE
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Insert to 2 different tables    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMixedPutTables
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|BATCH_SIZE
operator|/
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BATCH_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
name|TABLE_NAME2
else|:
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|,
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|,
name|replicationClusterId
argument_list|,
name|baseNamespaceDir
argument_list|,
name|hfileArchiveDir
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanRes
init|=
name|table2
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|scanRes
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|res
operator|.
name|getRow
argument_list|()
argument_list|)
operator|%
literal|2
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Insert then do different types of deletes    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMixedDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|,
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|,
name|replicationClusterId
argument_list|,
name|baseNamespaceDir
argument_list|,
name|hfileArchiveDir
argument_list|)
expr_stmt|;
name|entries
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|cells
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
literal|0
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
literal|2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|,
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|,
name|replicationClusterId
argument_list|,
name|baseNamespaceDir
argument_list|,
name|hfileArchiveDir
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanRes
init|=
name|table1
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scanRes
operator|.
name|next
argument_list|(
literal|3
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Puts are buffered, but this tests when a delete (not-buffered) is applied    * before the actual Put that creates it.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testApplyDeleteBeforePut
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
literal|1
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|createEntry
argument_list|(
name|TABLE_NAME1
argument_list|,
name|i
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|cells
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|,
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|cells
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|,
name|replicationClusterId
argument_list|,
name|baseNamespaceDir
argument_list|,
name|hfileArchiveDir
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Result
name|res
init|=
name|table1
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test replicateEntries with a bulk load entry for 25 HFiles    */
annotation|@
name|Test
specifier|public
name|void
name|testReplicateEntriesForHFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|dir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|(
literal|"testReplicateEntries"
argument_list|)
decl_stmt|;
name|Path
name|familyDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|FAM_NAME1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numRows
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|p
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// 1. Generate 25 hfile ranges
name|Random
name|rng
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|numbers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|numbers
operator|.
name|size
argument_list|()
operator|<
literal|50
condition|)
block|{
name|numbers
operator|.
name|add
argument_list|(
name|rng
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|numberList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numbers
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|numberList
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|storeFilesSize
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// 2. Create 25 hfiles
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|dir
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|numbersItr
init|=
name|numberList
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|hfilePath
init|=
operator|new
name|Path
argument_list|(
name|familyDir
argument_list|,
literal|"hfile_"
operator|+
name|i
argument_list|)
decl_stmt|;
name|HFileTestUtil
operator|.
name|createHFile
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|hfilePath
argument_list|,
name|FAM_NAME1
argument_list|,
name|FAM_NAME1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|numbersItr
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|numbersItr
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|numRows
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|hfilePath
argument_list|)
expr_stmt|;
name|storeFilesSize
operator|.
name|put
argument_list|(
name|hfilePath
operator|.
name|getName
argument_list|()
argument_list|,
name|fs
operator|.
name|getFileStatus
argument_list|(
name|hfilePath
argument_list|)
operator|.
name|getLen
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// 3. Create a BulkLoadDescriptor and a WALEdit
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|storeFiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|storeFiles
operator|.
name|put
argument_list|(
name|FAM_NAME1
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
name|edit
init|=
literal|null
decl_stmt|;
name|WALProtos
operator|.
name|BulkLoadDescriptor
name|loadDescriptor
init|=
literal|null
decl_stmt|;
try|try
init|(
name|Connection
name|c
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|RegionLocator
name|l
operator|=
name|c
operator|.
name|getRegionLocator
argument_list|(
name|TABLE_NAME1
argument_list|)
init|)
block|{
name|HRegionInfo
name|regionInfo
init|=
name|l
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|loadDescriptor
operator|=
name|ProtobufUtil
operator|.
name|toBulkLoadDescriptor
argument_list|(
name|TABLE_NAME1
argument_list|,
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
argument_list|,
name|storeFiles
argument_list|,
name|storeFilesSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|edit
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
operator|.
name|createBulkLoadEvent
argument_list|(
name|regionInfo
argument_list|,
name|loadDescriptor
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|WALEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// 4. Create a WALEntryBuilder
name|WALEntry
operator|.
name|Builder
name|builder
init|=
name|createWALEntryBuilder
argument_list|(
name|TABLE_NAME1
argument_list|)
decl_stmt|;
comment|// 5. Copy the hfile to the path as it is in reality
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|String
name|pathToHfileFromNS
init|=
operator|new
name|StringBuilder
argument_list|(
literal|100
argument_list|)
operator|.
name|append
argument_list|(
name|TABLE_NAME1
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|TABLE_NAME1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|loadDescriptor
operator|.
name|getEncodedRegionName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|FAM_NAME1
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
operator|.
name|append
argument_list|(
literal|"hfile_"
operator|+
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|dst
init|=
name|baseNamespaceDir
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|pathToHfileFromNS
decl_stmt|;
name|FileUtil
operator|.
name|copy
argument_list|(
name|fs
argument_list|,
name|p
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|dst
argument_list|)
argument_list|,
literal|false
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table1
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
init|)
block|{
comment|// 6. Assert no existing data in table
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|numRows
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|// 7. Replicate the bulk loaded entry
name|SINK
operator|.
name|replicateEntries
argument_list|(
name|entries
argument_list|,
name|CellUtil
operator|.
name|createCellScanner
argument_list|(
name|edit
operator|.
name|getCells
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|,
name|replicationClusterId
argument_list|,
name|baseNamespaceDir
argument_list|,
name|hfileArchiveDir
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table1
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
init|)
block|{
comment|// 8. Assert data is replicated
name|assertEquals
argument_list|(
name|numRows
argument_list|,
name|scanner
operator|.
name|next
argument_list|(
name|numRows
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|WALEntry
name|createEntry
parameter_list|(
name|TableName
name|table
parameter_list|,
name|int
name|row
parameter_list|,
name|KeyValue
operator|.
name|Type
name|type
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
parameter_list|)
block|{
name|byte
index|[]
name|fam
init|=
name|table
operator|.
name|equals
argument_list|(
name|TABLE_NAME1
argument_list|)
condition|?
name|FAM_NAME1
else|:
name|FAM_NAME2
decl_stmt|;
name|byte
index|[]
name|rowBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// Just make sure we don't get the same ts for two consecutive rows with
comment|// same key
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Was interrupted while sleep, meh"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|KeyValue
name|kv
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getCode
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|rowBytes
argument_list|,
name|fam
argument_list|,
name|fam
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getCode
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|rowBytes
argument_list|,
name|fam
argument_list|,
name|fam
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getCode
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|rowBytes
argument_list|,
name|fam
argument_list|,
literal|null
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|)
expr_stmt|;
block|}
name|WALEntry
operator|.
name|Builder
name|builder
init|=
name|createWALEntryBuilder
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|WALEntry
operator|.
name|Builder
name|createWALEntryBuilder
parameter_list|(
name|TableName
name|table
parameter_list|)
block|{
name|WALEntry
operator|.
name|Builder
name|builder
init|=
name|WALEntry
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setAssociatedCellCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|WALProtos
operator|.
name|WALEdit
operator|.
name|Builder
name|keyBuilder
init|=
name|WALProtos
operator|.
name|WALEdit
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|UUID
operator|.
name|Builder
name|uuidBuilder
init|=
name|UUID
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|uuidBuilder
operator|.
name|setLeastSigBits
argument_list|(
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|uuidBuilder
operator|.
name|setMostSigBits
argument_list|(
name|HConstants
operator|.
name|DEFAULT_CLUSTER_ID
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|)
expr_stmt|;
name|keyBuilder
operator|.
name|setClusterId
argument_list|(
name|uuidBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|keyBuilder
operator|.
name|setTableName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keyBuilder
operator|.
name|setWriteTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|keyBuilder
operator|.
name|setEncodedRegionName
argument_list|(
name|UnsafeByteOperations
operator|.
name|unsafeWrap
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
argument_list|)
expr_stmt|;
name|keyBuilder
operator|.
name|setLogSequenceNumber
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setEdit
argument_list|(
name|keyBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

