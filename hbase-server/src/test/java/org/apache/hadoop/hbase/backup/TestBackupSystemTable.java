begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupHandler
operator|.
name|BACKUPSTATUS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|backup
operator|.
name|BackupUtil
operator|.
name|BackupCompleteData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test cases for hbase:backup API   *  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestBackupSystemTable
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|MiniHBaseCluster
name|cluster
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|=
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateReadDeleteBackupStatus
parameter_list|()
throws|throws
name|IOException
block|{
name|BackupSystemTable
name|table
init|=
name|BackupSystemTable
operator|.
name|getTable
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|BackupContext
name|ctx
init|=
name|createBackupContext
argument_list|()
decl_stmt|;
name|table
operator|.
name|updateBackupStatus
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|BackupContext
name|readCtx
init|=
name|table
operator|.
name|readBackupStatus
argument_list|(
name|ctx
operator|.
name|getBackupId
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|compare
argument_list|(
name|ctx
argument_list|,
name|readCtx
argument_list|)
argument_list|)
expr_stmt|;
comment|// try fake backup id
name|readCtx
operator|=
name|table
operator|.
name|readBackupStatus
argument_list|(
literal|"fake"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|readCtx
argument_list|)
expr_stmt|;
comment|// delete backup context
name|table
operator|.
name|deleteBackupStatus
argument_list|(
name|ctx
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
name|readCtx
operator|=
name|table
operator|.
name|readBackupStatus
argument_list|(
name|ctx
operator|.
name|getBackupId
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|readCtx
argument_list|)
expr_stmt|;
name|cleanBackupTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteReadBackupStartCode
parameter_list|()
throws|throws
name|IOException
block|{
name|BackupSystemTable
name|table
init|=
name|BackupSystemTable
operator|.
name|getTable
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|code
init|=
literal|"100"
decl_stmt|;
name|table
operator|.
name|writeBackupStartCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|String
name|readCode
init|=
name|table
operator|.
name|readBackupStartCode
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|code
argument_list|,
name|readCode
argument_list|)
expr_stmt|;
name|cleanBackupTable
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|cleanBackupTable
parameter_list|()
throws|throws
name|IOException
block|{
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|BackupSystemTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|truncateTable
argument_list|(
name|BackupSystemTable
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|BackupSystemTable
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|admin
operator|.
name|enableTable
argument_list|(
name|BackupSystemTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBackupHistory
parameter_list|()
throws|throws
name|IOException
block|{
name|BackupSystemTable
name|table
init|=
name|BackupSystemTable
operator|.
name|getTable
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|int
name|n
init|=
literal|10
decl_stmt|;
name|List
argument_list|<
name|BackupContext
argument_list|>
name|list
init|=
name|createBackupContextList
argument_list|(
name|n
argument_list|)
decl_stmt|;
comment|// Load data
for|for
control|(
name|BackupContext
name|bc
range|:
name|list
control|)
block|{
comment|// Make sure we set right status
name|bc
operator|.
name|setFlag
argument_list|(
name|BACKUPSTATUS
operator|.
name|COMPLETE
argument_list|)
expr_stmt|;
name|table
operator|.
name|updateBackupStatus
argument_list|(
name|bc
argument_list|)
expr_stmt|;
block|}
comment|// Reverse list for comparison
name|Collections
operator|.
name|reverse
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|BackupCompleteData
argument_list|>
name|history
init|=
name|table
operator|.
name|getBackupHistory
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|history
operator|.
name|size
argument_list|()
operator|==
name|n
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|BackupContext
name|ctx
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BackupCompleteData
name|data
init|=
name|history
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|compare
argument_list|(
name|ctx
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cleanBackupTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionServerLastLogRollResults
parameter_list|()
throws|throws
name|IOException
block|{
name|BackupSystemTable
name|table
init|=
name|BackupSystemTable
operator|.
name|getTable
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
index|[]
name|servers
init|=
operator|new
name|String
index|[]
block|{
literal|"server1"
block|,
literal|"server2"
block|,
literal|"server3"
block|}
decl_stmt|;
name|String
index|[]
name|timestamps
init|=
operator|new
name|String
index|[]
block|{
literal|"100"
block|,
literal|"102"
block|,
literal|"107"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|servers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|writeRegionServerLastLogRollResult
argument_list|(
name|servers
index|[
name|i
index|]
argument_list|,
name|timestamps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
name|table
operator|.
name|readRegionServerLastLogRollResult
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|servers
operator|.
name|length
operator|==
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|result
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|String
index|[]
name|keysAsArray
init|=
operator|new
name|String
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|keys
operator|.
name|toArray
argument_list|(
name|keysAsArray
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|keysAsArray
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keysAsArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|keysAsArray
index|[
name|i
index|]
argument_list|,
name|servers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|String
name|ts1
init|=
name|timestamps
index|[
name|i
index|]
decl_stmt|;
name|String
name|ts2
init|=
name|result
operator|.
name|get
argument_list|(
name|keysAsArray
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ts1
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
block|}
name|cleanBackupTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIncrementalBackupTableSet
parameter_list|()
throws|throws
name|IOException
block|{
name|BackupSystemTable
name|table
init|=
name|BackupSystemTable
operator|.
name|getTable
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|tables1
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tables1
operator|.
name|add
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|tables1
operator|.
name|add
argument_list|(
literal|"t2"
argument_list|)
expr_stmt|;
name|tables1
operator|.
name|add
argument_list|(
literal|"t3"
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|tables2
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tables2
operator|.
name|add
argument_list|(
literal|"t3"
argument_list|)
expr_stmt|;
name|tables2
operator|.
name|add
argument_list|(
literal|"t4"
argument_list|)
expr_stmt|;
name|tables2
operator|.
name|add
argument_list|(
literal|"t5"
argument_list|)
expr_stmt|;
name|table
operator|.
name|addIncrementalBackupTableSet
argument_list|(
name|tables1
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|res1
init|=
operator|(
name|TreeSet
argument_list|<
name|String
argument_list|>
operator|)
name|table
operator|.
name|getIncrementalBackupTableSet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|tables1
operator|.
name|size
argument_list|()
operator|==
name|res1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|desc1
init|=
name|tables1
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|desc2
init|=
name|res1
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|desc1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|desc1
operator|.
name|next
argument_list|()
argument_list|,
name|desc2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addIncrementalBackupTableSet
argument_list|(
name|tables2
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|res2
init|=
operator|(
name|TreeSet
argument_list|<
name|String
argument_list|>
operator|)
name|table
operator|.
name|getIncrementalBackupTableSet
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|tables2
operator|.
name|size
argument_list|()
operator|+
name|tables1
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|==
name|res2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tables1
operator|.
name|addAll
argument_list|(
name|tables2
argument_list|)
expr_stmt|;
name|desc1
operator|=
name|tables1
operator|.
name|descendingIterator
argument_list|()
expr_stmt|;
name|desc2
operator|=
name|res2
operator|.
name|descendingIterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|desc1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|desc1
operator|.
name|next
argument_list|()
argument_list|,
name|desc2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cleanBackupTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionServerLogTimestampMap
parameter_list|()
throws|throws
name|IOException
block|{
name|BackupSystemTable
name|table
init|=
name|BackupSystemTable
operator|.
name|getTable
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|tables
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tables
operator|.
name|add
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|tables
operator|.
name|add
argument_list|(
literal|"t2"
argument_list|)
expr_stmt|;
name|tables
operator|.
name|add
argument_list|(
literal|"t3"
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rsTimestampMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|rsTimestampMap
operator|.
name|put
argument_list|(
literal|"rs1"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|rsTimestampMap
operator|.
name|put
argument_list|(
literal|"rs2"
argument_list|,
literal|"101"
argument_list|)
expr_stmt|;
name|rsTimestampMap
operator|.
name|put
argument_list|(
literal|"rs3"
argument_list|,
literal|"103"
argument_list|)
expr_stmt|;
name|table
operator|.
name|writeRegionServerLogTimestamp
argument_list|(
name|tables
argument_list|,
name|rsTimestampMap
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|result
init|=
name|table
operator|.
name|readLogTimestampMap
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|tables
operator|.
name|size
argument_list|()
operator|==
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tables
control|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rstm
init|=
name|result
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rstm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs1"
argument_list|)
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs2"
argument_list|)
argument_list|,
literal|"101"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs3"
argument_list|)
argument_list|,
literal|"103"
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|tables1
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tables1
operator|.
name|add
argument_list|(
literal|"t3"
argument_list|)
expr_stmt|;
name|tables1
operator|.
name|add
argument_list|(
literal|"t4"
argument_list|)
expr_stmt|;
name|tables1
operator|.
name|add
argument_list|(
literal|"t5"
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rsTimestampMap1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|rsTimestampMap1
operator|.
name|put
argument_list|(
literal|"rs1"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|rsTimestampMap1
operator|.
name|put
argument_list|(
literal|"rs2"
argument_list|,
literal|"201"
argument_list|)
expr_stmt|;
name|rsTimestampMap1
operator|.
name|put
argument_list|(
literal|"rs3"
argument_list|,
literal|"203"
argument_list|)
expr_stmt|;
name|table
operator|.
name|writeRegionServerLogTimestamp
argument_list|(
name|tables1
argument_list|,
name|rsTimestampMap1
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|readLogTimestampMap
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|5
operator|==
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|t
range|:
name|tables
control|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rstm
init|=
name|result
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rstm
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
literal|"t3"
argument_list|)
operator|==
literal|false
condition|)
block|{
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs1"
argument_list|)
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs2"
argument_list|)
argument_list|,
literal|"101"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs3"
argument_list|)
argument_list|,
literal|"103"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs1"
argument_list|)
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs2"
argument_list|)
argument_list|,
literal|"201"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs3"
argument_list|)
argument_list|,
literal|"203"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|t
range|:
name|tables1
control|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|rstm
init|=
name|result
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|rstm
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs1"
argument_list|)
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs2"
argument_list|)
argument_list|,
literal|"201"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rstm
operator|.
name|get
argument_list|(
literal|"rs3"
argument_list|)
argument_list|,
literal|"203"
argument_list|)
expr_stmt|;
block|}
name|cleanBackupTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddWALFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|BackupSystemTable
name|table
init|=
name|BackupSystemTable
operator|.
name|getTable
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hdfs://server/WALs/srv1,101,15555/srv1,101,15555.default.1"
argument_list|,
literal|"hdfs://server/WALs/srv2,102,16666/srv2,102,16666.default.2"
argument_list|,
literal|"hdfs://server/WALs/srv3,103,17777/srv3,103,17777.default.3"
argument_list|)
decl_stmt|;
name|String
name|newFile
init|=
literal|"hdfs://server/WALs/srv1,101,15555/srv1,101,15555.default.5"
decl_stmt|;
name|table
operator|.
name|addWALFiles
argument_list|(
name|files
argument_list|,
literal|"backup"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|checkWALFile
argument_list|(
name|files
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|checkWALFile
argument_list|(
name|files
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|table
operator|.
name|checkWALFile
argument_list|(
name|files
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|table
operator|.
name|checkWALFile
argument_list|(
name|newFile
argument_list|)
argument_list|)
expr_stmt|;
name|cleanBackupTable
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|compare
parameter_list|(
name|BackupContext
name|ctx
parameter_list|,
name|BackupCompleteData
name|data
parameter_list|)
block|{
return|return
name|ctx
operator|.
name|getBackupId
argument_list|()
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getBackupToken
argument_list|()
argument_list|)
operator|&&
name|ctx
operator|.
name|getTargetRootDir
argument_list|()
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getBackupRootPath
argument_list|()
argument_list|)
operator|&&
name|ctx
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|data
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|ctx
operator|.
name|getStartTs
argument_list|()
operator|==
name|Long
operator|.
name|parseLong
argument_list|(
name|data
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|&&
name|ctx
operator|.
name|getEndTs
argument_list|()
operator|==
name|Long
operator|.
name|parseLong
argument_list|(
name|data
operator|.
name|getEndTime
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|compare
parameter_list|(
name|BackupContext
name|one
parameter_list|,
name|BackupContext
name|two
parameter_list|)
block|{
return|return
name|one
operator|.
name|getBackupId
argument_list|()
operator|.
name|equals
argument_list|(
name|two
operator|.
name|getBackupId
argument_list|()
argument_list|)
operator|&&
name|one
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|two
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|one
operator|.
name|getTargetRootDir
argument_list|()
operator|.
name|equals
argument_list|(
name|two
operator|.
name|getTargetRootDir
argument_list|()
argument_list|)
operator|&&
name|one
operator|.
name|getStartTs
argument_list|()
operator|==
name|two
operator|.
name|getStartTs
argument_list|()
operator|&&
name|one
operator|.
name|getEndTs
argument_list|()
operator|==
name|two
operator|.
name|getEndTs
argument_list|()
return|;
block|}
specifier|private
name|BackupContext
name|createBackupContext
parameter_list|()
block|{
name|BackupContext
name|ctxt
init|=
operator|new
name|BackupContext
argument_list|(
literal|"backup_"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
literal|"full"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"t1"
block|,
literal|"t2"
block|,
literal|"t3"
block|}
argument_list|,
literal|"/hbase/backup"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ctxt
operator|.
name|setStartTs
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|ctxt
operator|.
name|setEndTs
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|ctxt
return|;
block|}
specifier|private
name|List
argument_list|<
name|BackupContext
argument_list|>
name|createBackupContextList
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|List
argument_list|<
name|BackupContext
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|BackupContext
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|createBackupContext
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
operator|!=
literal|null
condition|)
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

