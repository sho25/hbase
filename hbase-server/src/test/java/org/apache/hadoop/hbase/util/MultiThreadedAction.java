begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Common base class for reader and writer parts of multi-thread HBase load  * test ({@link LoadTestTool}).  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MultiThreadedAction
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MultiThreadedAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|byte
index|[]
name|columnFamily
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|int
name|numThreads
init|=
literal|1
decl_stmt|;
comment|/** The start key of the key range, inclusive */
specifier|protected
name|long
name|startKey
init|=
literal|0
decl_stmt|;
comment|/** The end key of the key range, exclusive */
specifier|protected
name|long
name|endKey
init|=
literal|1
decl_stmt|;
specifier|protected
name|AtomicInteger
name|numThreadsWorking
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|protected
name|AtomicLong
name|numKeys
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|protected
name|AtomicLong
name|numCols
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|protected
name|AtomicLong
name|totalOpTimeMs
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|minDataSize
init|=
literal|256
decl_stmt|;
specifier|protected
name|int
name|maxDataSize
init|=
literal|1024
decl_stmt|;
comment|/** "R" or "W" */
specifier|private
name|String
name|actionLetter
decl_stmt|;
comment|/** Whether we need to print out Hadoop Streaming-style counters */
specifier|private
name|boolean
name|streamingCounters
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|REPORTING_INTERVAL_MS
init|=
literal|5000
decl_stmt|;
specifier|public
name|MultiThreadedAction
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|,
name|String
name|actionLetter
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|columnFamily
operator|=
name|columnFamily
expr_stmt|;
name|this
operator|.
name|actionLetter
operator|=
name|actionLetter
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|(
name|long
name|startKey
parameter_list|,
name|long
name|endKey
parameter_list|,
name|int
name|numThreads
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|startKey
operator|=
name|startKey
expr_stmt|;
name|this
operator|.
name|endKey
operator|=
name|endKey
expr_stmt|;
name|this
operator|.
name|numThreads
operator|=
name|numThreads
expr_stmt|;
operator|(
operator|new
name|Thread
argument_list|(
operator|new
name|ProgressReporter
argument_list|(
name|actionLetter
argument_list|)
argument_list|)
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|formatTime
parameter_list|(
name|long
name|elapsedTime
parameter_list|)
block|{
name|String
name|format
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%%0%dd"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|elapsedTime
operator|=
name|elapsedTime
operator|/
literal|1000
expr_stmt|;
name|String
name|seconds
init|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|elapsedTime
operator|%
literal|60
argument_list|)
decl_stmt|;
name|String
name|minutes
init|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
operator|(
name|elapsedTime
operator|%
literal|3600
operator|)
operator|/
literal|60
argument_list|)
decl_stmt|;
name|String
name|hours
init|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|elapsedTime
operator|/
literal|3600
argument_list|)
decl_stmt|;
name|String
name|time
init|=
name|hours
operator|+
literal|":"
operator|+
name|minutes
operator|+
literal|":"
operator|+
name|seconds
decl_stmt|;
return|return
name|time
return|;
block|}
comment|/** Asynchronously reports progress */
specifier|private
class|class
name|ProgressReporter
implements|implements
name|Runnable
block|{
specifier|private
name|String
name|reporterId
init|=
literal|""
decl_stmt|;
specifier|public
name|ProgressReporter
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|reporterId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|priorNumKeys
init|=
literal|0
decl_stmt|;
name|long
name|priorCumulativeOpTime
init|=
literal|0
decl_stmt|;
name|int
name|priorAverageKeysPerSecond
init|=
literal|0
decl_stmt|;
comment|// Give other threads time to start.
name|Threads
operator|.
name|sleep
argument_list|(
name|REPORTING_INTERVAL_MS
argument_list|)
expr_stmt|;
while|while
condition|(
name|numThreadsWorking
operator|.
name|get
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|threadsLeft
init|=
literal|"["
operator|+
name|reporterId
operator|+
literal|":"
operator|+
name|numThreadsWorking
operator|.
name|get
argument_list|()
operator|+
literal|"] "
decl_stmt|;
if|if
condition|(
name|numKeys
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|threadsLeft
operator|+
literal|"Number of keys = 0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|numKeys
init|=
name|MultiThreadedAction
operator|.
name|this
operator|.
name|numKeys
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|long
name|totalOpTime
init|=
name|totalOpTimeMs
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|numKeysDelta
init|=
name|numKeys
operator|-
name|priorNumKeys
decl_stmt|;
name|long
name|totalOpTimeDelta
init|=
name|totalOpTime
operator|-
name|priorCumulativeOpTime
decl_stmt|;
name|double
name|averageKeysPerSecond
init|=
operator|(
name|time
operator|>
literal|0
operator|)
condition|?
operator|(
name|numKeys
operator|*
literal|1000
operator|/
name|time
operator|)
else|:
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|threadsLeft
operator|+
literal|"Keys="
operator|+
name|numKeys
operator|+
literal|", cols="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|numCols
operator|.
name|get
argument_list|()
argument_list|)
operator|+
literal|", time="
operator|+
name|formatTime
argument_list|(
name|time
argument_list|)
operator|+
operator|(
operator|(
name|numKeys
operator|>
literal|0
operator|&&
name|time
operator|>
literal|0
operator|)
condition|?
operator|(
literal|" Overall: ["
operator|+
literal|"keys/s= "
operator|+
name|numKeys
operator|*
literal|1000
operator|/
name|time
operator|+
literal|", latency="
operator|+
name|totalOpTime
operator|/
name|numKeys
operator|+
literal|" ms]"
operator|)
else|:
literal|""
operator|)
operator|+
operator|(
operator|(
name|numKeysDelta
operator|>
literal|0
operator|)
condition|?
operator|(
literal|" Current: ["
operator|+
literal|"keys/s="
operator|+
name|numKeysDelta
operator|*
literal|1000
operator|/
name|REPORTING_INTERVAL_MS
operator|+
literal|", latency="
operator|+
name|totalOpTimeDelta
operator|/
name|numKeysDelta
operator|+
literal|" ms]"
operator|)
else|:
literal|""
operator|)
operator|+
name|progressInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|streamingCounters
condition|)
block|{
name|printStreamingCounters
argument_list|(
name|numKeysDelta
argument_list|,
name|averageKeysPerSecond
operator|-
name|priorAverageKeysPerSecond
argument_list|)
expr_stmt|;
block|}
name|priorNumKeys
operator|=
name|numKeys
expr_stmt|;
name|priorCumulativeOpTime
operator|=
name|totalOpTime
expr_stmt|;
name|priorAverageKeysPerSecond
operator|=
operator|(
name|int
operator|)
name|averageKeysPerSecond
expr_stmt|;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
name|REPORTING_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printStreamingCounters
parameter_list|(
name|long
name|numKeysDelta
parameter_list|,
name|double
name|avgKeysPerSecondDelta
parameter_list|)
block|{
comment|// Write stats in a format that can be interpreted as counters by
comment|// streaming map-reduce jobs.
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"reporter:counter:numKeys,"
operator|+
name|reporterId
operator|+
literal|","
operator|+
name|numKeysDelta
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"reporter:counter:numCols,"
operator|+
name|reporterId
operator|+
literal|","
operator|+
name|numCols
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"reporter:counter:avgKeysPerSecond,"
operator|+
name|reporterId
operator|+
literal|","
operator|+
call|(
name|long
call|)
argument_list|(
name|avgKeysPerSecondDelta
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setDataSize
parameter_list|(
name|int
name|minDataSize
parameter_list|,
name|int
name|maxDataSize
parameter_list|)
block|{
name|this
operator|.
name|minDataSize
operator|=
name|minDataSize
expr_stmt|;
name|this
operator|.
name|maxDataSize
operator|=
name|maxDataSize
expr_stmt|;
block|}
specifier|public
name|void
name|waitForFinish
parameter_list|()
block|{
while|while
condition|(
name|numThreadsWorking
operator|.
name|get
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|startThreads
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Thread
argument_list|>
name|threads
parameter_list|)
block|{
name|numThreadsWorking
operator|.
name|addAndGet
argument_list|(
name|threads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** @return the end key of the key range, exclusive */
specifier|public
name|long
name|getEndKey
parameter_list|()
block|{
return|return
name|endKey
return|;
block|}
comment|/** Returns a task-specific progress string */
specifier|protected
specifier|abstract
name|String
name|progressInfo
parameter_list|()
function_decl|;
specifier|protected
specifier|static
name|void
name|appendToStatus
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|desc
parameter_list|,
name|long
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

