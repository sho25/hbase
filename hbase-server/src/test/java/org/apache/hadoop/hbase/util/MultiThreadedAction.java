begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|test
operator|.
name|LoadTestDataGenerator
operator|.
name|INCREMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|test
operator|.
name|LoadTestDataGenerator
operator|.
name|MUTATE_INFO
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
operator|.
name|Algorithm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|test
operator|.
name|LoadTestDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|test
operator|.
name|LoadTestKVGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * Common base class for reader and writer parts of multi-thread HBase load  * test ({@link LoadTestTool}).  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|MultiThreadedAction
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MultiThreadedAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|TableName
name|tableName
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|final
name|HConnection
name|connection
decl_stmt|;
comment|// all reader / writer threads will share this connection
specifier|protected
name|int
name|numThreads
init|=
literal|1
decl_stmt|;
comment|/** The start key of the key range, inclusive */
specifier|protected
name|long
name|startKey
init|=
literal|0
decl_stmt|;
comment|/** The end key of the key range, exclusive */
specifier|protected
name|long
name|endKey
init|=
literal|1
decl_stmt|;
specifier|protected
name|AtomicInteger
name|numThreadsWorking
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|protected
name|AtomicLong
name|numKeys
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|protected
name|AtomicLong
name|numCols
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|protected
name|AtomicLong
name|totalOpTimeMs
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|verbose
init|=
literal|false
decl_stmt|;
specifier|protected
name|LoadTestDataGenerator
name|dataGenerator
init|=
literal|null
decl_stmt|;
comment|/**    * Default implementation of LoadTestDataGenerator that uses LoadTestKVGenerator, fixed    * set of column families, and random number of columns in range. The table for it can    * be created manually or, for example, via    * {@link HBaseTestingUtility#createPreSplitLoadTestTable(    * org.apache.hadoop.hbase.Configuration, byte[], byte[], Algorithm, DataBlockEncoding)}    */
specifier|public
specifier|static
class|class
name|DefaultDataGenerator
extends|extends
name|LoadTestDataGenerator
block|{
specifier|private
name|byte
index|[]
index|[]
name|columnFamilies
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|minColumnsPerKey
decl_stmt|;
specifier|private
name|int
name|maxColumnsPerKey
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
name|DefaultDataGenerator
parameter_list|(
name|int
name|minValueSize
parameter_list|,
name|int
name|maxValueSize
parameter_list|,
name|int
name|minColumnsPerKey
parameter_list|,
name|int
name|maxColumnsPerKey
parameter_list|,
name|byte
index|[]
modifier|...
name|columnFamilies
parameter_list|)
block|{
name|super
argument_list|(
name|minValueSize
argument_list|,
name|maxValueSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|columnFamilies
operator|=
name|columnFamilies
expr_stmt|;
name|this
operator|.
name|minColumnsPerKey
operator|=
name|minColumnsPerKey
expr_stmt|;
name|this
operator|.
name|maxColumnsPerKey
operator|=
name|maxColumnsPerKey
expr_stmt|;
block|}
specifier|public
name|DefaultDataGenerator
parameter_list|(
name|byte
index|[]
modifier|...
name|columnFamilies
parameter_list|)
block|{
comment|// Default values for tests that didn't care to provide theirs.
name|this
argument_list|(
literal|256
argument_list|,
literal|1024
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
name|columnFamilies
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getDeterministicUniqueKey
parameter_list|(
name|long
name|keyBase
parameter_list|)
block|{
return|return
name|LoadTestKVGenerator
operator|.
name|md5PrefixedKey
argument_list|(
name|keyBase
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
index|[]
name|getColumnFamilies
parameter_list|()
block|{
return|return
name|columnFamilies
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
index|[]
name|generateColumnsForCf
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|)
block|{
name|int
name|numColumns
init|=
name|minColumnsPerKey
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|maxColumnsPerKey
operator|-
name|minColumnsPerKey
operator|+
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|columns
init|=
operator|new
name|byte
index|[
name|numColumns
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColumns
condition|;
operator|++
name|i
control|)
block|{
name|columns
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|columns
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|generateValue
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|byte
index|[]
name|column
parameter_list|)
block|{
return|return
name|kvGenerator
operator|.
name|generateRandomSizeValue
argument_list|(
name|rowKey
argument_list|,
name|cf
argument_list|,
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|verify
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|byte
index|[]
name|column
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
name|LoadTestKVGenerator
operator|.
name|verify
argument_list|(
name|value
argument_list|,
name|rowKey
argument_list|,
name|cf
argument_list|,
name|column
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|verify
parameter_list|(
name|byte
index|[]
name|rowKey
parameter_list|,
name|byte
index|[]
name|cf
parameter_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|columnSet
parameter_list|)
block|{
return|return
operator|(
name|columnSet
operator|.
name|size
argument_list|()
operator|>=
name|minColumnsPerKey
operator|)
operator|&&
operator|(
name|columnSet
operator|.
name|size
argument_list|()
operator|<=
name|maxColumnsPerKey
operator|)
return|;
block|}
block|}
comment|/** "R" or "W" */
specifier|private
name|String
name|actionLetter
decl_stmt|;
comment|/** Whether we need to print out Hadoop Streaming-style counters */
specifier|private
name|boolean
name|streamingCounters
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|REPORTING_INTERVAL_MS
init|=
literal|5000
decl_stmt|;
specifier|public
name|MultiThreadedAction
parameter_list|(
name|LoadTestDataGenerator
name|dataGen
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|actionLetter
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|dataGenerator
operator|=
name|dataGen
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|actionLetter
operator|=
name|actionLetter
expr_stmt|;
name|this
operator|.
name|connection
operator|=
operator|(
name|HConnection
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|start
parameter_list|(
name|long
name|startKey
parameter_list|,
name|long
name|endKey
parameter_list|,
name|int
name|numThreads
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|startKey
operator|=
name|startKey
expr_stmt|;
name|this
operator|.
name|endKey
operator|=
name|endKey
expr_stmt|;
name|this
operator|.
name|numThreads
operator|=
name|numThreads
expr_stmt|;
operator|(
operator|new
name|Thread
argument_list|(
operator|new
name|ProgressReporter
argument_list|(
name|actionLetter
argument_list|)
argument_list|)
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|formatTime
parameter_list|(
name|long
name|elapsedTime
parameter_list|)
block|{
name|String
name|format
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%%0%dd"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|elapsedTime
operator|=
name|elapsedTime
operator|/
literal|1000
expr_stmt|;
name|String
name|seconds
init|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|elapsedTime
operator|%
literal|60
argument_list|)
decl_stmt|;
name|String
name|minutes
init|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
operator|(
name|elapsedTime
operator|%
literal|3600
operator|)
operator|/
literal|60
argument_list|)
decl_stmt|;
name|String
name|hours
init|=
name|String
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|elapsedTime
operator|/
literal|3600
argument_list|)
decl_stmt|;
name|String
name|time
init|=
name|hours
operator|+
literal|":"
operator|+
name|minutes
operator|+
literal|":"
operator|+
name|seconds
decl_stmt|;
return|return
name|time
return|;
block|}
comment|/** Asynchronously reports progress */
specifier|private
class|class
name|ProgressReporter
implements|implements
name|Runnable
block|{
specifier|private
name|String
name|reporterId
init|=
literal|""
decl_stmt|;
specifier|public
name|ProgressReporter
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|reporterId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|priorNumKeys
init|=
literal|0
decl_stmt|;
name|long
name|priorCumulativeOpTime
init|=
literal|0
decl_stmt|;
name|int
name|priorAverageKeysPerSecond
init|=
literal|0
decl_stmt|;
comment|// Give other threads time to start.
name|Threads
operator|.
name|sleep
argument_list|(
name|REPORTING_INTERVAL_MS
argument_list|)
expr_stmt|;
while|while
condition|(
name|numThreadsWorking
operator|.
name|get
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|threadsLeft
init|=
literal|"["
operator|+
name|reporterId
operator|+
literal|":"
operator|+
name|numThreadsWorking
operator|.
name|get
argument_list|()
operator|+
literal|"] "
decl_stmt|;
if|if
condition|(
name|numKeys
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|threadsLeft
operator|+
literal|"Number of keys = 0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|numKeys
init|=
name|MultiThreadedAction
operator|.
name|this
operator|.
name|numKeys
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|long
name|totalOpTime
init|=
name|totalOpTimeMs
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|numKeysDelta
init|=
name|numKeys
operator|-
name|priorNumKeys
decl_stmt|;
name|long
name|totalOpTimeDelta
init|=
name|totalOpTime
operator|-
name|priorCumulativeOpTime
decl_stmt|;
name|double
name|averageKeysPerSecond
init|=
operator|(
name|time
operator|>
literal|0
operator|)
condition|?
operator|(
name|numKeys
operator|*
literal|1000
operator|/
name|time
operator|)
else|:
literal|0
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|threadsLeft
operator|+
literal|"Keys="
operator|+
name|numKeys
operator|+
literal|", cols="
operator|+
name|StringUtils
operator|.
name|humanReadableInt
argument_list|(
name|numCols
operator|.
name|get
argument_list|()
argument_list|)
operator|+
literal|", time="
operator|+
name|formatTime
argument_list|(
name|time
argument_list|)
operator|+
operator|(
operator|(
name|numKeys
operator|>
literal|0
operator|&&
name|time
operator|>
literal|0
operator|)
condition|?
operator|(
literal|" Overall: ["
operator|+
literal|"keys/s= "
operator|+
name|numKeys
operator|*
literal|1000
operator|/
name|time
operator|+
literal|", latency="
operator|+
name|totalOpTime
operator|/
name|numKeys
operator|+
literal|" ms]"
operator|)
else|:
literal|""
operator|)
operator|+
operator|(
operator|(
name|numKeysDelta
operator|>
literal|0
operator|)
condition|?
operator|(
literal|" Current: ["
operator|+
literal|"keys/s="
operator|+
name|numKeysDelta
operator|*
literal|1000
operator|/
name|REPORTING_INTERVAL_MS
operator|+
literal|", latency="
operator|+
name|totalOpTimeDelta
operator|/
name|numKeysDelta
operator|+
literal|" ms]"
operator|)
else|:
literal|""
operator|)
operator|+
name|progressInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|streamingCounters
condition|)
block|{
name|printStreamingCounters
argument_list|(
name|numKeysDelta
argument_list|,
name|averageKeysPerSecond
operator|-
name|priorAverageKeysPerSecond
argument_list|)
expr_stmt|;
block|}
name|priorNumKeys
operator|=
name|numKeys
expr_stmt|;
name|priorCumulativeOpTime
operator|=
name|totalOpTime
expr_stmt|;
name|priorAverageKeysPerSecond
operator|=
operator|(
name|int
operator|)
name|averageKeysPerSecond
expr_stmt|;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
name|REPORTING_INTERVAL_MS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printStreamingCounters
parameter_list|(
name|long
name|numKeysDelta
parameter_list|,
name|double
name|avgKeysPerSecondDelta
parameter_list|)
block|{
comment|// Write stats in a format that can be interpreted as counters by
comment|// streaming map-reduce jobs.
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"reporter:counter:numKeys,"
operator|+
name|reporterId
operator|+
literal|","
operator|+
name|numKeysDelta
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"reporter:counter:numCols,"
operator|+
name|reporterId
operator|+
literal|","
operator|+
name|numCols
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"reporter:counter:avgKeysPerSecond,"
operator|+
name|reporterId
operator|+
literal|","
operator|+
call|(
name|long
call|)
argument_list|(
name|avgKeysPerSecondDelta
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not close the connection: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|waitForFinish
parameter_list|()
block|{
while|while
condition|(
name|numThreadsWorking
operator|.
name|get
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDone
parameter_list|()
block|{
return|return
operator|(
name|numThreadsWorking
operator|.
name|get
argument_list|()
operator|==
literal|0
operator|)
return|;
block|}
specifier|protected
name|void
name|startThreads
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|Thread
argument_list|>
name|threads
parameter_list|)
block|{
name|numThreadsWorking
operator|.
name|addAndGet
argument_list|(
name|threads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** @return the end key of the key range, exclusive */
specifier|public
name|long
name|getEndKey
parameter_list|()
block|{
return|return
name|endKey
return|;
block|}
comment|/** Returns a task-specific progress string */
specifier|protected
specifier|abstract
name|String
name|progressInfo
parameter_list|()
function_decl|;
specifier|protected
specifier|static
name|void
name|appendToStatus
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|desc
parameter_list|,
name|long
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|appendToStatus
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|desc
parameter_list|,
name|String
name|v
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|/**    * See {@link #verifyResultAgainstDataGenerator(Result, boolean, boolean)}.    * Does not verify cf/column integrity.    */
specifier|public
name|boolean
name|verifyResultAgainstDataGenerator
parameter_list|(
name|Result
name|result
parameter_list|,
name|boolean
name|verifyValues
parameter_list|)
block|{
return|return
name|verifyResultAgainstDataGenerator
argument_list|(
name|result
argument_list|,
name|verifyValues
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|/**    * Verifies the result from get or scan using the dataGenerator (that was presumably    * also used to generate said result).    * @param verifyValues verify that values in the result make sense for row/cf/column combination    * @param verifyCfAndColumnIntegrity verify that cf/column set in the result is complete. Note    *                                   that to use this multiPut should be used, or verification    *                                   has to happen after writes, otherwise there can be races.    * @return    */
specifier|public
name|boolean
name|verifyResultAgainstDataGenerator
parameter_list|(
name|Result
name|result
parameter_list|,
name|boolean
name|verifyValues
parameter_list|,
name|boolean
name|verifyCfAndColumnIntegrity
parameter_list|)
block|{
name|String
name|rowKeyStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
comment|// See if we have any data at all.
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], no data returned"
argument_list|)
expr_stmt|;
name|printLocations
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|verifyValues
operator|&&
operator|!
name|verifyCfAndColumnIntegrity
condition|)
block|{
return|return
literal|true
return|;
comment|// as long as we have something, we are good.
block|}
comment|// See if we have all the CFs.
name|byte
index|[]
index|[]
name|expectedCfs
init|=
name|dataGenerator
operator|.
name|getColumnFamilies
argument_list|()
decl_stmt|;
if|if
condition|(
name|verifyCfAndColumnIntegrity
operator|&&
operator|(
name|expectedCfs
operator|.
name|length
operator|!=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], bad family count: "
operator|+
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|printLocations
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// Verify each column family from get in the result.
for|for
control|(
name|byte
index|[]
name|cf
range|:
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|cfStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|columnValues
init|=
name|result
operator|.
name|getFamilyMap
argument_list|(
name|cf
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnValues
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], no data for family ["
operator|+
name|cfStr
operator|+
literal|"]]"
argument_list|)
expr_stmt|;
name|printLocations
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|MutationType
argument_list|>
name|mutateInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|verifyCfAndColumnIntegrity
operator|||
name|verifyValues
condition|)
block|{
if|if
condition|(
operator|!
name|columnValues
operator|.
name|containsKey
argument_list|(
name|MUTATE_INFO
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], column family ["
operator|+
name|cfStr
operator|+
literal|"], column ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|MUTATE_INFO
argument_list|)
operator|+
literal|"]; value is not found"
argument_list|)
expr_stmt|;
name|printLocations
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|long
name|cfHash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|cf
argument_list|)
decl_stmt|;
comment|// Verify deleted columns, and make up column counts if deleted
name|byte
index|[]
name|mutateInfoValue
init|=
name|columnValues
operator|.
name|remove
argument_list|(
name|MUTATE_INFO
argument_list|)
decl_stmt|;
name|mutateInfo
operator|=
name|parseMutateInfo
argument_list|(
name|mutateInfoValue
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|MutationType
argument_list|>
name|mutate
range|:
name|mutateInfo
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|mutate
operator|.
name|getValue
argument_list|()
operator|==
name|MutationType
operator|.
name|DELETE
condition|)
block|{
name|byte
index|[]
name|column
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mutate
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|columnHash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|long
name|hashCode
init|=
name|cfHash
operator|+
name|columnHash
decl_stmt|;
if|if
condition|(
name|hashCode
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|columnValues
operator|.
name|containsKey
argument_list|(
name|column
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], column family ["
operator|+
name|cfStr
operator|+
literal|"], column ["
operator|+
name|mutate
operator|.
name|getKey
argument_list|()
operator|+
literal|"]; should be deleted"
argument_list|)
expr_stmt|;
name|printLocations
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|byte
index|[]
name|hashCodeBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|hashCode
argument_list|)
decl_stmt|;
name|columnValues
operator|.
name|put
argument_list|(
name|column
argument_list|,
name|hashCodeBytes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Verify increment
if|if
condition|(
operator|!
name|columnValues
operator|.
name|containsKey
argument_list|(
name|INCREMENT
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], column family ["
operator|+
name|cfStr
operator|+
literal|"], column ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|INCREMENT
argument_list|)
operator|+
literal|"]; value is not found"
argument_list|)
expr_stmt|;
name|printLocations
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|long
name|currentValue
init|=
name|Bytes
operator|.
name|toLong
argument_list|(
name|columnValues
operator|.
name|remove
argument_list|(
name|INCREMENT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|verifyValues
condition|)
block|{
name|long
name|amount
init|=
name|mutateInfo
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
name|cfHash
decl_stmt|;
name|long
name|originalValue
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|extra
init|=
name|currentValue
operator|-
name|originalValue
decl_stmt|;
if|if
condition|(
name|extra
operator|!=
literal|0
operator|&&
operator|(
name|amount
operator|==
literal|0
operator|||
name|extra
operator|%
name|amount
operator|!=
literal|0
operator|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], column family ["
operator|+
name|cfStr
operator|+
literal|"], column [increment], extra ["
operator|+
name|extra
operator|+
literal|"], amount ["
operator|+
name|amount
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|printLocations
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|amount
operator|!=
literal|0
operator|&&
name|extra
operator|!=
name|amount
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], column family ["
operator|+
name|cfStr
operator|+
literal|"], column [increment], incremented ["
operator|+
operator|(
name|extra
operator|/
name|amount
operator|)
operator|+
literal|"] times"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// See if we have correct columns.
if|if
condition|(
name|verifyCfAndColumnIntegrity
operator|&&
operator|!
name|dataGenerator
operator|.
name|verify
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|cf
argument_list|,
name|columnValues
operator|.
name|keySet
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|colsStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|col
range|:
name|columnValues
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|colsStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|colsStr
operator|+=
literal|", "
expr_stmt|;
block|}
name|colsStr
operator|+=
literal|"["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|col
argument_list|)
operator|+
literal|"]"
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Error checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], bad columns for family ["
operator|+
name|cfStr
operator|+
literal|"]: "
operator|+
name|colsStr
argument_list|)
expr_stmt|;
name|printLocations
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// See if values check out.
if|if
condition|(
name|verifyValues
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|kv
range|:
name|columnValues
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|column
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|MutationType
name|mutation
init|=
name|mutateInfo
operator|.
name|get
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|boolean
name|verificationNeeded
init|=
literal|true
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|kv
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|mutation
operator|!=
literal|null
condition|)
block|{
name|boolean
name|mutationVerified
init|=
literal|true
decl_stmt|;
name|long
name|columnHash
init|=
name|Arrays
operator|.
name|hashCode
argument_list|(
name|kv
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|hashCode
init|=
name|cfHash
operator|+
name|columnHash
decl_stmt|;
name|byte
index|[]
name|hashCodeBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|hashCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|mutation
operator|==
name|MutationType
operator|.
name|APPEND
condition|)
block|{
name|int
name|offset
init|=
name|bytes
operator|.
name|length
operator|-
name|hashCodeBytes
operator|.
name|length
decl_stmt|;
name|mutationVerified
operator|=
name|offset
operator|>
literal|0
operator|&&
name|Bytes
operator|.
name|equals
argument_list|(
name|hashCodeBytes
argument_list|,
literal|0
argument_list|,
name|hashCodeBytes
operator|.
name|length
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|,
name|hashCodeBytes
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|mutationVerified
condition|)
block|{
name|int
name|n
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|newOffset
init|=
name|offset
operator|-
name|hashCodeBytes
operator|.
name|length
decl_stmt|;
if|if
condition|(
name|newOffset
operator|<
literal|0
operator|||
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|hashCodeBytes
argument_list|,
literal|0
argument_list|,
name|hashCodeBytes
operator|.
name|length
argument_list|,
name|bytes
argument_list|,
name|newOffset
argument_list|,
name|hashCodeBytes
operator|.
name|length
argument_list|)
condition|)
block|{
break|break;
block|}
name|offset
operator|=
name|newOffset
expr_stmt|;
name|n
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Warning checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], column family ["
operator|+
name|cfStr
operator|+
literal|"], column ["
operator|+
name|column
operator|+
literal|"], appended ["
operator|+
name|n
operator|+
literal|"] times"
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|dest
init|=
operator|new
name|byte
index|[
name|offset
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|dest
argument_list|,
literal|0
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|dest
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hashCode
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
comment|// checkAndPut
name|mutationVerified
operator|=
name|Bytes
operator|.
name|equals
argument_list|(
name|bytes
argument_list|,
name|hashCodeBytes
argument_list|)
expr_stmt|;
name|verificationNeeded
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|mutationVerified
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], mutation checking failed for column family ["
operator|+
name|cfStr
operator|+
literal|"], column ["
operator|+
name|column
operator|+
literal|"]; mutation ["
operator|+
name|mutation
operator|+
literal|"], hashCode ["
operator|+
name|hashCode
operator|+
literal|"], verificationNeeded ["
operator|+
name|verificationNeeded
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|printLocations
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|// end of mutation checking
if|if
condition|(
name|verificationNeeded
operator|&&
operator|!
name|dataGenerator
operator|.
name|verify
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|cf
argument_list|,
name|kv
operator|.
name|getKey
argument_list|()
argument_list|,
name|bytes
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error checking data for key ["
operator|+
name|rowKeyStr
operator|+
literal|"], column family ["
operator|+
name|cfStr
operator|+
literal|"], column ["
operator|+
name|column
operator|+
literal|"], mutation ["
operator|+
name|mutation
operator|+
literal|"]; value of length "
operator|+
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|printLocations
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|printLocations
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
name|RegionLocations
name|rl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"FAILED FOR null Result"
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"FAILED FOR "
operator|+
name|resultToString
argument_list|(
name|r
argument_list|)
operator|+
literal|" Stale "
operator|+
name|r
operator|.
name|isStale
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getRow
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|rl
operator|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|connection
operator|)
operator|.
name|locateRegion
argument_list|(
name|tableName
argument_list|,
name|r
operator|.
name|getRow
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Couldn't get locations for row "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HRegionLocation
name|locations
index|[]
init|=
name|rl
operator|.
name|getRegionLocations
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|h
range|:
name|locations
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"LOCATION "
operator|+
name|h
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|resultToString
parameter_list|(
name|Result
name|result
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"cells="
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"NONE"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"{"
argument_list|)
expr_stmt|;
name|boolean
name|moreThanOne
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|result
operator|.
name|listCells
argument_list|()
control|)
block|{
if|if
condition|(
name|moreThanOne
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|moreThanOne
operator|=
literal|true
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|CellUtil
operator|.
name|toString
argument_list|(
name|cell
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Parse mutate info into a map of<column name> =><update action>
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|MutationType
argument_list|>
name|parseMutateInfo
parameter_list|(
name|byte
index|[]
name|mutateInfo
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MutationType
argument_list|>
name|mi
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|MutationType
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|mutateInfo
operator|!=
literal|null
condition|)
block|{
name|String
name|mutateInfoStr
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|mutateInfo
argument_list|)
decl_stmt|;
name|String
index|[]
name|mutations
init|=
name|mutateInfoStr
operator|.
name|split
argument_list|(
literal|"#"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|mutation
range|:
name|mutations
control|)
block|{
if|if
condition|(
name|mutation
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|mutation
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
argument_list|,
literal|"Invalid mutation info "
operator|+
name|mutation
argument_list|)
expr_stmt|;
name|int
name|p
init|=
name|mutation
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|String
name|column
init|=
name|mutation
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|MutationType
name|type
init|=
name|MutationType
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|mutation
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|mi
operator|.
name|put
argument_list|(
name|column
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mi
return|;
block|}
block|}
end_class

end_unit

