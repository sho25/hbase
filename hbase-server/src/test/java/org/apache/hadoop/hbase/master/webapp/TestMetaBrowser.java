begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|webapp
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|hamcrest
operator|.
name|BytesMatchers
operator|.
name|bytesAsStringBinary
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClearUserNamespacesAndTablesRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ConnectionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniClusterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|AsyncConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|RuleChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections4
operator|.
name|IterableUtils
import|;
end_import

begin_comment
comment|/**  * Cluster-backed correctness tests for the functionality provided by {@link MetaBrowser}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMetaBrowser
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|testRule
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMetaBrowser
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|MiniClusterRule
name|miniClusterRule
init|=
operator|new
name|MiniClusterRule
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConnectionRule
name|connectionRule
init|=
operator|new
name|ConnectionRule
argument_list|(
name|miniClusterRule
operator|::
name|createConnection
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ClearUserNamespacesAndTablesRule
name|clearUserNamespacesAndTablesRule
init|=
operator|new
name|ClearUserNamespacesAndTablesRule
argument_list|(
name|connectionRule
operator|::
name|getConnection
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestRule
name|rule
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
name|connectionRule
argument_list|)
operator|.
name|around
argument_list|(
name|clearUserNamespacesAndTablesRule
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testNameRule
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|AsyncConnection
name|connection
decl_stmt|;
specifier|private
name|AsyncAdmin
name|admin
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|connection
operator|=
name|connectionRule
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noFilters
parameter_list|()
block|{
specifier|final
name|String
name|namespaceName
init|=
name|testNameRule
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|a
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|b
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespaceName
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|createTable
argument_list|(
name|a
argument_list|)
argument_list|,
name|createNamespace
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|createTable
argument_list|(
name|b
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionReplicaInfo
argument_list|>
name|rows
decl_stmt|;
try|try
init|(
specifier|final
name|MetaBrowser
operator|.
name|Results
name|results
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
operator|.
name|getResults
argument_list|()
init|)
block|{
name|rows
operator|=
name|IterableUtils
operator|.
name|toList
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|rows
argument_list|,
name|contains
argument_list|(
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|a
operator|+
literal|",,"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",,"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",80000000"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|limit
parameter_list|()
block|{
specifier|final
name|String
name|tableName
init|=
name|testNameRule
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|,
literal|8
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|5
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionReplicaInfo
argument_list|>
name|rows
decl_stmt|;
try|try
init|(
specifier|final
name|MetaBrowser
operator|.
name|Results
name|results
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
operator|.
name|getResults
argument_list|()
init|)
block|{
name|rows
operator|=
name|IterableUtils
operator|.
name|toList
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|rows
argument_list|,
name|contains
argument_list|(
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|tableName
operator|+
literal|",,"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|tableName
operator|+
literal|",20000000"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|tableName
operator|+
literal|",40000000"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|tableName
operator|+
literal|",60000000"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|tableName
operator|+
literal|",80000000"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|regionStateFilter
parameter_list|()
block|{
specifier|final
name|String
name|namespaceName
init|=
name|testNameRule
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|foo
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespaceName
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|bar
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespaceName
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|createNamespace
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void1
lambda|->
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|createTable
argument_list|(
name|foo
argument_list|,
literal|2
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void2
lambda|->
name|admin
operator|.
name|disableTable
argument_list|(
name|foo
argument_list|)
argument_list|)
argument_list|,
name|createTable
argument_list|(
name|bar
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|10_000
argument_list|)
operator|.
name|setRegionState
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|setTable
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionReplicaInfo
argument_list|>
name|rows
decl_stmt|;
try|try
init|(
specifier|final
name|MetaBrowser
operator|.
name|Results
name|results
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
operator|.
name|getResults
argument_list|()
init|)
block|{
name|rows
operator|=
name|IterableUtils
operator|.
name|toList
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|rows
argument_list|,
name|contains
argument_list|(
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|bar
operator|.
name|toString
argument_list|()
operator|+
literal|",,"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|bar
operator|.
name|toString
argument_list|()
operator|+
literal|",80000000"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|scanTableFilter
parameter_list|()
block|{
specifier|final
name|String
name|namespaceName
init|=
name|testNameRule
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|a
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|b
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespaceName
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|createTable
argument_list|(
name|a
argument_list|)
argument_list|,
name|createNamespace
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|createTable
argument_list|(
name|b
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|HttpServletRequest
name|request
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setTable
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionReplicaInfo
argument_list|>
name|rows
decl_stmt|;
try|try
init|(
specifier|final
name|MetaBrowser
operator|.
name|Results
name|results
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request
argument_list|)
operator|.
name|getResults
argument_list|()
init|)
block|{
name|rows
operator|=
name|IterableUtils
operator|.
name|toList
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|rows
argument_list|,
name|contains
argument_list|(
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",,"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",80000000"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|paginateWithReplicas
parameter_list|()
block|{
specifier|final
name|String
name|namespaceName
init|=
name|testNameRule
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|a
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|b
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespaceName
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|createTableWithReplicas
argument_list|(
name|a
argument_list|,
literal|2
argument_list|)
argument_list|,
name|createNamespace
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|createTable
argument_list|(
name|b
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|HttpServletRequest
name|request1
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|2
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionReplicaInfo
argument_list|>
name|rows1
decl_stmt|;
try|try
init|(
specifier|final
name|MetaBrowser
operator|.
name|Results
name|results
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request1
argument_list|)
operator|.
name|getResults
argument_list|()
init|)
block|{
name|rows1
operator|=
name|IterableUtils
operator|.
name|toList
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|rows1
argument_list|,
name|contains
argument_list|(
name|allOf
argument_list|(
name|hasProperty
argument_list|(
literal|"regionName"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|a
operator|+
literal|",,"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"replicaId"
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|allOf
argument_list|(
name|hasProperty
argument_list|(
literal|"regionName"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|a
operator|+
literal|",,"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"replicaId"
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HttpServletRequest
name|request2
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|2
argument_list|)
operator|.
name|setStart
argument_list|(
name|MetaBrowser
operator|.
name|buildStartParamFrom
argument_list|(
name|rows1
operator|.
name|get
argument_list|(
name|rows1
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionReplicaInfo
argument_list|>
name|rows2
decl_stmt|;
try|try
init|(
specifier|final
name|MetaBrowser
operator|.
name|Results
name|results
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request2
argument_list|)
operator|.
name|getResults
argument_list|()
init|)
block|{
name|rows2
operator|=
name|IterableUtils
operator|.
name|toList
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|rows2
argument_list|,
name|contains
argument_list|(
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",,"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",80000000"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|paginateWithTableFilter
parameter_list|()
block|{
specifier|final
name|String
name|namespaceName
init|=
name|testNameRule
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|a
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|b
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|namespaceName
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|CompletableFuture
operator|.
name|allOf
argument_list|(
name|createTable
argument_list|(
name|a
argument_list|)
argument_list|,
name|createNamespace
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|thenCompose
argument_list|(
name|_void
lambda|->
name|createTable
argument_list|(
name|b
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
specifier|final
name|HttpServletRequest
name|request1
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|2
argument_list|)
operator|.
name|setTable
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionReplicaInfo
argument_list|>
name|rows1
decl_stmt|;
try|try
init|(
specifier|final
name|MetaBrowser
operator|.
name|Results
name|results
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request1
argument_list|)
operator|.
name|getResults
argument_list|()
init|)
block|{
name|rows1
operator|=
name|IterableUtils
operator|.
name|toList
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|rows1
argument_list|,
name|contains
argument_list|(
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",,"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",33333333"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HttpServletRequest
name|request2
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|2
argument_list|)
operator|.
name|setTable
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|setStart
argument_list|(
name|MetaBrowser
operator|.
name|buildStartParamFrom
argument_list|(
name|rows1
operator|.
name|get
argument_list|(
name|rows1
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionReplicaInfo
argument_list|>
name|rows2
decl_stmt|;
try|try
init|(
specifier|final
name|MetaBrowser
operator|.
name|Results
name|results
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request2
argument_list|)
operator|.
name|getResults
argument_list|()
init|)
block|{
name|rows2
operator|=
name|IterableUtils
operator|.
name|toList
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|rows2
argument_list|,
name|contains
argument_list|(
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",66666666"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",99999999"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HttpServletRequest
name|request3
init|=
operator|new
name|MockRequestBuilder
argument_list|()
operator|.
name|setLimit
argument_list|(
literal|2
argument_list|)
operator|.
name|setTable
argument_list|(
name|namespaceName
argument_list|)
operator|.
name|setStart
argument_list|(
name|MetaBrowser
operator|.
name|buildStartParamFrom
argument_list|(
name|rows2
operator|.
name|get
argument_list|(
name|rows2
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|RegionReplicaInfo
argument_list|>
name|rows3
decl_stmt|;
try|try
init|(
specifier|final
name|MetaBrowser
operator|.
name|Results
name|results
init|=
operator|new
name|MetaBrowser
argument_list|(
name|connection
argument_list|,
name|request3
argument_list|)
operator|.
name|getResults
argument_list|()
init|)
block|{
name|rows3
operator|=
name|IterableUtils
operator|.
name|toList
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|rows3
argument_list|,
name|contains
argument_list|(
name|hasProperty
argument_list|(
literal|"row"
argument_list|,
name|bytesAsStringBinary
argument_list|(
name|startsWith
argument_list|(
name|b
operator|+
literal|",cccccccc"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ColumnFamilyDescriptor
name|columnFamilyDescriptor
parameter_list|()
block|{
return|return
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
literal|"f1"
argument_list|)
return|;
block|}
specifier|private
name|TableDescriptor
name|tableDescriptor
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|columnFamilyDescriptor
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|TableDescriptor
name|tableDescriptor
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|int
name|replicaCount
parameter_list|)
block|{
return|return
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setRegionReplication
argument_list|(
name|replicaCount
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|columnFamilyDescriptor
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
block|{
return|return
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTable
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|int
name|splitCount
parameter_list|)
block|{
return|return
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|,
operator|new
name|RegionSplitter
operator|.
name|HexStringSplit
argument_list|()
operator|.
name|split
argument_list|(
name|splitCount
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createTableWithReplicas
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|int
name|replicaCount
parameter_list|)
block|{
return|return
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|(
name|tableName
argument_list|,
name|replicaCount
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|CompletableFuture
argument_list|<
name|Void
argument_list|>
name|createNamespace
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
specifier|final
name|NamespaceDescriptor
name|descriptor
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|namespace
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|admin
operator|.
name|createNamespace
argument_list|(
name|descriptor
argument_list|)
return|;
block|}
comment|/**    * Helper for mocking an {@link HttpServletRequest} relevant to the test.    */
specifier|static
class|class
name|MockRequestBuilder
block|{
specifier|private
name|String
name|limit
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|regionState
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|start
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|table
init|=
literal|null
decl_stmt|;
specifier|public
name|MockRequestBuilder
name|setLimit
parameter_list|(
specifier|final
name|int
name|value
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MockRequestBuilder
name|setLimit
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|limit
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MockRequestBuilder
name|setRegionState
parameter_list|(
specifier|final
name|RegionState
operator|.
name|State
name|value
parameter_list|)
block|{
name|this
operator|.
name|regionState
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MockRequestBuilder
name|setRegionState
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|regionState
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MockRequestBuilder
name|setStart
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|MockRequestBuilder
name|setTable
parameter_list|(
specifier|final
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|HttpServletRequest
name|build
parameter_list|()
block|{
specifier|final
name|HttpServletRequest
name|request
init|=
name|mock
argument_list|(
name|HttpServletRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"/table.jsp"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"name"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"hbase%3Ameta"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"scan_limit"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"scan_region_state"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|regionState
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"scan_start"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|request
operator|.
name|getParameter
argument_list|(
literal|"scan_table"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
block|}
block|}
end_class

end_unit

