begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|OffPeakCompactions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestOffPeakCompactions
block|{
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDefaultCompactSelection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testOffPeakHours
parameter_list|()
throws|throws
name|IOException
block|{
name|Calendar
name|calendar
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
name|int
name|hourOfDay
init|=
name|calendar
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Hour of day = "
operator|+
name|hourOfDay
argument_list|)
expr_stmt|;
name|int
name|hourPlusOne
init|=
operator|(
operator|(
name|hourOfDay
operator|+
literal|1
operator|)
operator|%
literal|24
operator|)
decl_stmt|;
name|int
name|hourMinusOne
init|=
operator|(
operator|(
name|hourOfDay
operator|-
literal|1
operator|+
literal|24
operator|)
operator|%
literal|24
operator|)
decl_stmt|;
name|int
name|hourMinusTwo
init|=
operator|(
operator|(
name|hourOfDay
operator|-
literal|2
operator|+
literal|24
operator|)
operator|%
literal|24
operator|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|OffPeakCompactions
name|opc
init|=
operator|new
name|OffPeakCompactions
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing without off-peak settings..."
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|opc
operator|.
name|tryStartOffPeakRequest
argument_list|()
argument_list|)
expr_stmt|;
comment|// set peak hour to current time and check compact selection
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.offpeak.start.hour"
argument_list|,
name|hourMinusOne
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.offpeak.end.hour"
argument_list|,
name|hourPlusOne
argument_list|)
expr_stmt|;
name|opc
operator|=
operator|new
name|OffPeakCompactions
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Testing compact selection with off-peak settings ("
operator|+
name|hourMinusOne
operator|+
literal|", "
operator|+
name|hourPlusOne
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|opc
operator|.
name|tryStartOffPeakRequest
argument_list|()
argument_list|)
expr_stmt|;
name|opc
operator|.
name|endOffPeakRequest
argument_list|()
expr_stmt|;
comment|// set peak hour outside current selection and check compact selection
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.offpeak.start.hour"
argument_list|,
name|hourMinusTwo
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.offpeak.end.hour"
argument_list|,
name|hourMinusOne
argument_list|)
expr_stmt|;
name|opc
operator|=
operator|new
name|OffPeakCompactions
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|opc
operator|.
name|tryStartOffPeakRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

