begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
operator|.
name|RSGroupBasedLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|rsgroup
operator|.
name|RSGroupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test RSGroupBasedLoadBalancer with StochasticLoadBalancer as internal balancer  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRSGroupBasedLoadBalancerWithStochasticLoadBalancerAsInternal
extends|extends
name|RSGroupableBalancerTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRSGroupBasedLoadBalancerWithStochasticLoadBalancerAsInternal
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|RSGroupBasedLoadBalancer
name|loadBalancer
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|groups
operator|=
operator|new
name|String
index|[]
block|{
name|RSGroupInfo
operator|.
name|DEFAULT_GROUP
block|}
expr_stmt|;
name|servers
operator|=
name|generateServers
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|groupMap
operator|=
name|constructGroupInfo
argument_list|(
name|servers
argument_list|,
name|groups
argument_list|)
expr_stmt|;
name|tableDescs
operator|=
name|constructTableDesc
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.regions.slop"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.readRequestCost"
argument_list|,
literal|10000f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.rsgroup.grouploadbalancer.class"
argument_list|,
name|StochasticLoadBalancer
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|loadBalancer
operator|=
operator|new
name|RSGroupBasedLoadBalancer
argument_list|()
expr_stmt|;
name|loadBalancer
operator|.
name|setRsGroupInfoManager
argument_list|(
name|getMockedGroupInfoManager
argument_list|()
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setMasterServices
argument_list|(
name|getMockedMaster
argument_list|()
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ServerMetrics
name|mockServerMetricsWithReadRequests
parameter_list|(
name|ServerName
name|server
parameter_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsOnServer
parameter_list|,
name|long
name|readRequestCount
parameter_list|)
block|{
name|ServerMetrics
name|serverMetrics
init|=
name|mock
argument_list|(
name|ServerMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionMetrics
argument_list|>
name|regionLoadMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|info
range|:
name|regionsOnServer
control|)
block|{
name|RegionMetrics
name|rl
init|=
name|mock
argument_list|(
name|RegionMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|rl
operator|.
name|getReadRequestCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|readRequestCount
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rl
operator|.
name|getCpRequestCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rl
operator|.
name|getWriteRequestCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rl
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Size
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rl
operator|.
name|getStoreFileSize
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Size
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|regionLoadMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|rl
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|serverMetrics
operator|.
name|getRegionMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|regionLoadMap
argument_list|)
expr_stmt|;
return|return
name|serverMetrics
return|;
block|}
comment|/**    * Test HBASE-20791    */
annotation|@
name|Test
specifier|public
name|void
name|testBalanceCluster
parameter_list|()
throws|throws
name|IOException
block|{
comment|// mock cluster State
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ServerName
name|serverA
init|=
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ServerName
name|serverB
init|=
name|servers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ServerName
name|serverC
init|=
name|servers
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsOnServerA
init|=
name|randomRegions
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsOnServerB
init|=
name|randomRegions
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsOnServerC
init|=
name|randomRegions
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|clusterState
operator|.
name|put
argument_list|(
name|serverA
argument_list|,
name|regionsOnServerA
argument_list|)
expr_stmt|;
name|clusterState
operator|.
name|put
argument_list|(
name|serverB
argument_list|,
name|regionsOnServerB
argument_list|)
expr_stmt|;
name|clusterState
operator|.
name|put
argument_list|(
name|serverC
argument_list|,
name|regionsOnServerC
argument_list|)
expr_stmt|;
comment|// mock ClusterMetrics
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerMetrics
argument_list|>
name|serverMetricsMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|serverMetricsMap
operator|.
name|put
argument_list|(
name|serverA
argument_list|,
name|mockServerMetricsWithReadRequests
argument_list|(
name|serverA
argument_list|,
name|regionsOnServerA
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|serverMetricsMap
operator|.
name|put
argument_list|(
name|serverB
argument_list|,
name|mockServerMetricsWithReadRequests
argument_list|(
name|serverB
argument_list|,
name|regionsOnServerB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|serverMetricsMap
operator|.
name|put
argument_list|(
name|serverC
argument_list|,
name|mockServerMetricsWithReadRequests
argument_list|(
name|serverC
argument_list|,
name|regionsOnServerC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterMetrics
name|clusterStatus
init|=
name|mock
argument_list|(
name|ClusterMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|clusterStatus
operator|.
name|getLiveServerMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|serverMetricsMap
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setClusterMetrics
argument_list|(
name|clusterStatus
argument_list|)
expr_stmt|;
comment|// ReadRequestCostFunction are Rate based, So doing setClusterMetrics again
comment|// this time, regions on serverA with more readRequestCount load
comment|// serverA : 1000,1000,1000
comment|// serverB : 0,0,0
comment|// serverC : 0,0,0
comment|// so should move two regions from serverA to serverB& serverC
name|serverMetricsMap
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
expr_stmt|;
name|serverMetricsMap
operator|.
name|put
argument_list|(
name|serverA
argument_list|,
name|mockServerMetricsWithReadRequests
argument_list|(
name|serverA
argument_list|,
name|regionsOnServerA
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|serverMetricsMap
operator|.
name|put
argument_list|(
name|serverB
argument_list|,
name|mockServerMetricsWithReadRequests
argument_list|(
name|serverB
argument_list|,
name|regionsOnServerB
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|serverMetricsMap
operator|.
name|put
argument_list|(
name|serverC
argument_list|,
name|mockServerMetricsWithReadRequests
argument_list|(
name|serverC
argument_list|,
name|regionsOnServerC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|clusterStatus
operator|=
name|mock
argument_list|(
name|ClusterMetrics
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|clusterStatus
operator|.
name|getLiveServerMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|serverMetricsMap
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setClusterMetrics
argument_list|(
name|clusterStatus
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
init|=
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|clusterState
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RegionInfo
argument_list|>
name|regionsMoveFromServerA
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|targetServers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionPlan
name|plan
range|:
name|plans
control|)
block|{
if|if
condition|(
name|plan
operator|.
name|getSource
argument_list|()
operator|.
name|equals
argument_list|(
name|serverA
argument_list|)
condition|)
block|{
name|regionsMoveFromServerA
operator|.
name|add
argument_list|(
name|plan
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|targetServers
operator|.
name|add
argument_list|(
name|plan
operator|.
name|getDestination
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// should move 2 regions from serverA, one moves to serverB, the other moves to serverC
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|regionsMoveFromServerA
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|targetServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionsOnServerA
operator|.
name|containsAll
argument_list|(
name|regionsMoveFromServerA
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

