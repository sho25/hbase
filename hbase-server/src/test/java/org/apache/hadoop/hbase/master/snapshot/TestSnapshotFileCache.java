begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotReferenceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotTestingUtils
operator|.
name|SnapshotMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test that we correctly reload the cache, filter directories, etc.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSnapshotFileCache
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSnapshotFileCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSnapshotFileCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// don't refresh the cache unless we tell it to
specifier|private
specifier|static
specifier|final
name|long
name|PERIOD
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
name|Path
name|rootDir
decl_stmt|;
specifier|private
specifier|static
name|Path
name|snapshotDir
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fs
operator|=
name|UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
name|rootDir
operator|=
name|UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
expr_stmt|;
name|snapshotDir
operator|=
name|SnapshotDescriptionUtils
operator|.
name|getSnapshotsDir
argument_list|(
name|rootDir
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|stopCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|cleanupFiles
parameter_list|()
throws|throws
name|Exception
block|{
comment|// cleanup the snapshot directory
name|fs
operator|.
name|delete
argument_list|(
name|snapshotDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadAndDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|SnapshotFileCache
name|cache
init|=
operator|new
name|SnapshotFileCache
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|PERIOD
argument_list|,
literal|10000000
argument_list|,
literal|"test-snapshot-file-cache-refresh"
argument_list|,
operator|new
name|SnapshotFiles
argument_list|()
argument_list|)
decl_stmt|;
name|createAndTestSnapshotV1
argument_list|(
name|cache
argument_list|,
literal|"snapshot1a"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|createAndTestSnapshotV2
argument_list|(
name|cache
argument_list|,
literal|"snapshot2a"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReloadModifiedDirectory
parameter_list|()
throws|throws
name|IOException
block|{
name|SnapshotFileCache
name|cache
init|=
operator|new
name|SnapshotFileCache
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|PERIOD
argument_list|,
literal|10000000
argument_list|,
literal|"test-snapshot-file-cache-refresh"
argument_list|,
operator|new
name|SnapshotFiles
argument_list|()
argument_list|)
decl_stmt|;
name|createAndTestSnapshotV1
argument_list|(
name|cache
argument_list|,
literal|"snapshot1"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// now delete the snapshot and add a file with a different name
name|createAndTestSnapshotV1
argument_list|(
name|cache
argument_list|,
literal|"snapshot1"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|createAndTestSnapshotV2
argument_list|(
name|cache
argument_list|,
literal|"snapshot2"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// now delete the snapshot and add a file with a different name
name|createAndTestSnapshotV2
argument_list|(
name|cache
argument_list|,
literal|"snapshot2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotTempDirReload
parameter_list|()
throws|throws
name|IOException
block|{
name|SnapshotFileCache
name|cache
init|=
operator|new
name|SnapshotFileCache
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|PERIOD
argument_list|,
literal|10000000
argument_list|,
literal|"test-snapshot-file-cache-refresh"
argument_list|,
operator|new
name|SnapshotFiles
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add a new non-tmp snapshot
name|createAndTestSnapshotV1
argument_list|(
name|cache
argument_list|,
literal|"snapshot0v1"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|createAndTestSnapshotV1
argument_list|(
name|cache
argument_list|,
literal|"snapshot0v2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheUpdatedWhenLastModifiedOfSnapDirNotUpdated
parameter_list|()
throws|throws
name|IOException
block|{
name|SnapshotFileCache
name|cache
init|=
operator|new
name|SnapshotFileCache
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|PERIOD
argument_list|,
literal|10000000
argument_list|,
literal|"test-snapshot-file-cache-refresh"
argument_list|,
operator|new
name|SnapshotFiles
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add a new non-tmp snapshot
name|createAndTestSnapshotV1
argument_list|(
name|cache
argument_list|,
literal|"snapshot1v1"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createAndTestSnapshotV1
argument_list|(
name|cache
argument_list|,
literal|"snapshot1v2"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add a new tmp snapshot
name|createAndTestSnapshotV2
argument_list|(
name|cache
argument_list|,
literal|"snapshot2v1"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Add another tmp snapshot
name|createAndTestSnapshotV2
argument_list|(
name|cache
argument_list|,
literal|"snapshot2v2"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
class|class
name|SnapshotFiles
implements|implements
name|SnapshotFileCache
operator|.
name|SnapshotFileInspector
block|{
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|filesUnderSnapshot
parameter_list|(
specifier|final
name|Path
name|snapshotDir
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|files
operator|.
name|addAll
argument_list|(
name|SnapshotReferenceUtil
operator|.
name|getHFileNames
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|files
return|;
block|}
block|}
specifier|private
name|SnapshotMock
operator|.
name|SnapshotBuilder
name|createAndTestSnapshotV1
parameter_list|(
specifier|final
name|SnapshotFileCache
name|cache
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|tmp
parameter_list|,
specifier|final
name|boolean
name|removeOnExit
parameter_list|,
name|boolean
name|setFolderTime
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotMock
name|snapshotMock
init|=
operator|new
name|SnapshotMock
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|SnapshotMock
operator|.
name|SnapshotBuilder
name|builder
init|=
name|snapshotMock
operator|.
name|createSnapshotV1
argument_list|(
name|name
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|createAndTestSnapshot
argument_list|(
name|cache
argument_list|,
name|builder
argument_list|,
name|tmp
argument_list|,
name|removeOnExit
argument_list|,
name|setFolderTime
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
specifier|private
name|void
name|createAndTestSnapshotV2
parameter_list|(
specifier|final
name|SnapshotFileCache
name|cache
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|tmp
parameter_list|,
specifier|final
name|boolean
name|removeOnExit
parameter_list|,
name|boolean
name|setFolderTime
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotMock
name|snapshotMock
init|=
operator|new
name|SnapshotMock
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|SnapshotMock
operator|.
name|SnapshotBuilder
name|builder
init|=
name|snapshotMock
operator|.
name|createSnapshotV2
argument_list|(
name|name
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|createAndTestSnapshot
argument_list|(
name|cache
argument_list|,
name|builder
argument_list|,
name|tmp
argument_list|,
name|removeOnExit
argument_list|,
name|setFolderTime
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createAndTestSnapshot
parameter_list|(
specifier|final
name|SnapshotFileCache
name|cache
parameter_list|,
specifier|final
name|SnapshotMock
operator|.
name|SnapshotBuilder
name|builder
parameter_list|,
specifier|final
name|boolean
name|tmp
parameter_list|,
specifier|final
name|boolean
name|removeOnExit
parameter_list|,
name|boolean
name|setFolderTime
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|Path
name|filePath
range|:
name|builder
operator|.
name|addRegion
argument_list|()
control|)
block|{
name|files
operator|.
name|add
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Finalize the snapshot
name|builder
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|setFolderTime
condition|)
block|{
name|fs
operator|.
name|setTimes
argument_list|(
name|snapshotDir
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Make sure that all files are still present
for|for
control|(
name|Path
name|path
range|:
name|files
control|)
block|{
name|assertFalse
argument_list|(
literal|"Cache didn't find "
operator|+
name|path
argument_list|,
name|contains
argument_list|(
name|getNonSnapshotFiles
argument_list|(
name|cache
argument_list|,
name|path
argument_list|)
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeOnExit
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting snapshot."
argument_list|)
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|builder
operator|.
name|getSnapshotsDir
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|fs
argument_list|,
name|rootDir
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// then trigger a refresh
name|cache
operator|.
name|triggerCacheRefreshForTesting
argument_list|()
expr_stmt|;
comment|// and not it shouldn't find those files
for|for
control|(
name|Path
name|filePath
range|:
name|files
control|)
block|{
name|assertTrue
argument_list|(
literal|"Cache found '"
operator|+
name|filePath
operator|+
literal|"', but it shouldn't have."
argument_list|,
name|contains
argument_list|(
name|getNonSnapshotFiles
argument_list|(
name|cache
argument_list|,
name|filePath
argument_list|)
argument_list|,
name|filePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|boolean
name|contains
parameter_list|(
name|Iterable
argument_list|<
name|FileStatus
argument_list|>
name|files
parameter_list|,
name|Path
name|filePath
parameter_list|)
block|{
for|for
control|(
name|FileStatus
name|status
range|:
name|files
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"debug in contains, 3.1: "
operator|+
name|status
operator|.
name|getPath
argument_list|()
operator|+
literal|" filePath:"
operator|+
name|filePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|filePath
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|Iterable
argument_list|<
name|FileStatus
argument_list|>
name|getNonSnapshotFiles
parameter_list|(
name|SnapshotFileCache
name|cache
parameter_list|,
name|Path
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|cache
operator|.
name|getUnreferencedFiles
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|storeFile
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

