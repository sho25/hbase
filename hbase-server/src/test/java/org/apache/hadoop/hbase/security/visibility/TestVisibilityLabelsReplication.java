begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityConstants
operator|.
name|LABELS_TABLE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ArrayBackedTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TagUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|KeyValueCodecWithTags
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|VisibilityLabelsProtos
operator|.
name|VisibilityLabelsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|visibility
operator|.
name|VisibilityController
operator|.
name|VisibilityReplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestVisibilityLabelsReplication
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestVisibilityLabelsReplication
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|NON_VIS_TAG_TYPE
init|=
literal|100
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|TEMP
init|=
literal|"temp"
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|conf1
decl_stmt|;
specifier|protected
specifier|static
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TABLE_NAME"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|ReplicationAdmin
name|replicationAdmin
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TOPSECRET
init|=
literal|"topsecret"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PUBLIC
init|=
literal|"public"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PRIVATE
init|=
literal|"private"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIDENTIAL
init|=
literal|"confidential"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COPYRIGHT
init|=
literal|"\u00A9ABC"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACCENT
init|=
literal|"\u0941"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SECRET
init|=
literal|"secret"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|UNICODE_VIS_TAG
init|=
name|COPYRIGHT
operator|+
literal|"\""
operator|+
name|ACCENT
operator|+
literal|"\\"
operator|+
name|SECRET
operator|+
literal|"\""
operator|+
literal|"\u0027&\\"
decl_stmt|;
specifier|public
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|public
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|row4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row4"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|ZooKeeperWatcher
name|zkw1
decl_stmt|;
specifier|protected
specifier|static
name|ZooKeeperWatcher
name|zkw2
decl_stmt|;
specifier|protected
specifier|static
name|int
name|expected
index|[]
init|=
block|{
literal|4
block|,
literal|6
block|,
literal|4
block|,
literal|0
block|,
literal|3
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NON_VISIBILITY
init|=
literal|"non-visibility"
decl_stmt|;
specifier|protected
specifier|static
name|String
index|[]
name|expectedVisString
init|=
block|{
literal|"(\"secret\"&\"topsecret\"&\"public\")|(\"topsecret\"&\"confidential\")"
block|,
literal|"(\"public\"&\"private\")|(\"topsecret\"&\"private\")|"
operator|+
literal|"(\"confidential\"&\"public\")|(\"topsecret\"&\"confidential\")"
block|,
literal|"(!\"topsecret\"&\"secret\")|(!\"topsecret\"&\"confidential\")"
block|,
literal|"(\"secret\"&\""
operator|+
name|COPYRIGHT
operator|+
literal|"\\\""
operator|+
name|ACCENT
operator|+
literal|"\\\\"
operator|+
name|SECRET
operator|+
literal|"\\\""
operator|+
literal|"\u0027&\\\\"
operator|+
literal|"\")"
block|}
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|TEST_NAME
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|User
name|SUPERUSER
decl_stmt|,
name|USER1
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup configuration
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/1"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"replication.source.size.capacity"
argument_list|,
literal|10240
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"replication.source.sleepforretries"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.master.logcleaner.ttl"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"zookeeper.recovery.retry"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"zookeeper.recovery.retry.intervalmill"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"replication.stats.thread.period.seconds"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.tests.use.shortcircuit.reads"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setVisibilityLabelServiceImpl
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|HConstants
operator|.
name|REPLICATION_CODEC_CONF_KEY
argument_list|,
name|KeyValueCodecWithTags
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|VisibilityTestUtil
operator|.
name|enableVisiblityLabels
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGIONSERVER_COPROCESSOR_CONF_KEY
argument_list|,
name|VisibilityReplication
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|USER_REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|SimpleCP
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Have to reset conf1 in case zk cluster location different
comment|// than default
name|conf
operator|.
name|setClass
argument_list|(
name|VisibilityUtils
operator|.
name|VISIBILITY_LABEL_GENERATOR_CLASS
argument_list|,
name|SimpleScanLabelGenerator
operator|.
name|class
argument_list|,
name|ScanLabelGenerator
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hbase.superuser"
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|SUPERUSER
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
name|User
operator|.
name|getCurrent
argument_list|()
operator|.
name|getShortName
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"supergroup"
block|}
argument_list|)
expr_stmt|;
comment|// User.createUserForTesting(conf, User.getCurrent().getShortName(), new
comment|// String[] { "supergroup" });
name|USER1
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user1"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|MiniZooKeeperCluster
name|miniZK
init|=
name|TEST_UTIL
operator|.
name|getZkCluster
argument_list|()
decl_stmt|;
name|zkw1
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"cluster1"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|=
operator|new
name|ReplicationAdmin
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Base conf2 on conf1 so it gets the right zk cluster.
name|conf1
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setInt
argument_list|(
literal|"hfile.format.version"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/2"
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setBoolean
argument_list|(
literal|"hbase.tests.use.shortcircuit.reads"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setStrings
argument_list|(
name|HConstants
operator|.
name|REPLICATION_CODEC_CONF_KEY
argument_list|,
name|KeyValueCodecWithTags
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf1
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|USER_REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|TestCoprocessorForTagsAtSink
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// setVisibilityLabelServiceImpl(conf1);
name|USER1
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf1
argument_list|,
literal|"user1"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|TEST_UTIL1
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
name|TEST_UTIL1
operator|.
name|setZkCluster
argument_list|(
name|miniZK
argument_list|)
expr_stmt|;
name|zkw2
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf1
argument_list|,
literal|"cluster2"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ReplicationPeerConfig
name|rpc
init|=
operator|new
name|ReplicationPeerConfig
argument_list|()
decl_stmt|;
name|rpc
operator|.
name|setClusterKey
argument_list|(
name|TEST_UTIL1
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|addPeer
argument_list|(
literal|"2"
argument_list|,
name|rpc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Wait for the labels table to become available
name|TEST_UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|LABELS_TABLE_NAME
operator|.
name|getName
argument_list|()
argument_list|,
literal|50000
argument_list|)
expr_stmt|;
name|TEST_UTIL1
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Admin
name|hBaseAdmin
init|=
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|table
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|desc
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|fam
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|desc
argument_list|)
expr_stmt|;
try|try
block|{
name|hBaseAdmin
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hBaseAdmin
operator|!=
literal|null
condition|)
block|{
name|hBaseAdmin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|Admin
name|hBaseAdmin1
init|=
name|TEST_UTIL1
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
try|try
block|{
name|hBaseAdmin1
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|hBaseAdmin1
operator|!=
literal|null
condition|)
block|{
name|hBaseAdmin1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|addLabels
argument_list|()
expr_stmt|;
name|setAuths
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setAuths
argument_list|(
name|conf1
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|setVisibilityLabelServiceImpl
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setClass
argument_list|(
name|VisibilityLabelServiceManager
operator|.
name|VISIBILITY_LABEL_SERVICE_CLASS
argument_list|,
name|DefaultVisibilityLabelServiceImpl
operator|.
name|class
argument_list|,
name|VisibilityLabelService
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVisibilityReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|retry
init|=
literal|0
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|writeData
argument_list|(
name|TABLE_NAME
argument_list|,
literal|"("
operator|+
name|SECRET
operator|+
literal|"&"
operator|+
name|PUBLIC
operator|+
literal|")"
operator|+
literal|"|("
operator|+
name|CONFIDENTIAL
operator|+
literal|")&("
operator|+
name|TOPSECRET
operator|+
literal|")"
argument_list|,
literal|"("
operator|+
name|PRIVATE
operator|+
literal|"|"
operator|+
name|CONFIDENTIAL
operator|+
literal|")&("
operator|+
name|PUBLIC
operator|+
literal|"|"
operator|+
name|TOPSECRET
operator|+
literal|")"
argument_list|,
literal|"("
operator|+
name|SECRET
operator|+
literal|"|"
operator|+
name|CONFIDENTIAL
operator|+
literal|")"
operator|+
literal|"&"
operator|+
literal|"!"
operator|+
name|TOPSECRET
argument_list|,
name|CellVisibility
operator|.
name|quote
argument_list|(
name|UNICODE_VIS_TAG
argument_list|)
operator|+
literal|"&"
operator|+
name|SECRET
argument_list|)
init|;
init|)
block|{
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setAuthorizations
argument_list|(
operator|new
name|Authorizations
argument_list|(
name|SECRET
argument_list|,
name|CONFIDENTIAL
argument_list|,
name|PRIVATE
argument_list|,
name|TOPSECRET
argument_list|,
name|UNICODE_VIS_TAG
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Result
index|[]
name|next
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|next
operator|.
name|length
operator|==
literal|4
argument_list|)
expr_stmt|;
name|CellScanner
name|cellScanner
init|=
name|next
index|[
literal|0
index|]
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
name|cellScanner
operator|.
name|advance
argument_list|()
expr_stmt|;
name|Cell
name|current
init|=
name|cellScanner
operator|.
name|current
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|current
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|current
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|row1
argument_list|,
literal|0
argument_list|,
name|row1
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|cellScanner
operator|=
name|next
index|[
literal|1
index|]
operator|.
name|cellScanner
argument_list|()
expr_stmt|;
name|cellScanner
operator|.
name|advance
argument_list|()
expr_stmt|;
name|current
operator|=
name|cellScanner
operator|.
name|current
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|current
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|current
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|row2
argument_list|,
literal|0
argument_list|,
name|row2
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|cellScanner
operator|=
name|next
index|[
literal|2
index|]
operator|.
name|cellScanner
argument_list|()
expr_stmt|;
name|cellScanner
operator|.
name|advance
argument_list|()
expr_stmt|;
name|current
operator|=
name|cellScanner
operator|.
name|current
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|current
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|current
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|row3
argument_list|,
literal|0
argument_list|,
name|row3
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|cellScanner
operator|=
name|next
index|[
literal|3
index|]
operator|.
name|cellScanner
argument_list|()
expr_stmt|;
name|cellScanner
operator|.
name|advance
argument_list|()
expr_stmt|;
name|current
operator|=
name|cellScanner
operator|.
name|current
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|current
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|current
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|row4
argument_list|,
literal|0
argument_list|,
name|row4
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table2
init|=
name|TEST_UTIL1
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
init|;
init|)
block|{
name|s
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
comment|// Ensure both rows are replicated
name|scanner
operator|=
name|table2
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|next
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|4
argument_list|)
expr_stmt|;
while|while
condition|(
name|next
operator|.
name|length
operator|==
literal|0
operator|&&
name|retry
operator|<=
literal|10
condition|)
block|{
name|scanner
operator|=
name|table2
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|next
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|retry
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|next
operator|.
name|length
operator|==
literal|4
argument_list|)
expr_stmt|;
name|verifyGet
argument_list|(
name|row1
argument_list|,
name|expectedVisString
index|[
literal|0
index|]
argument_list|,
name|expected
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|,
name|TOPSECRET
argument_list|,
name|CONFIDENTIAL
argument_list|)
expr_stmt|;
name|TestCoprocessorForTagsAtSink
operator|.
name|tags
operator|.
name|clear
argument_list|()
expr_stmt|;
name|verifyGet
argument_list|(
name|row2
argument_list|,
name|expectedVisString
index|[
literal|1
index|]
argument_list|,
name|expected
index|[
literal|1
index|]
argument_list|,
literal|false
argument_list|,
name|CONFIDENTIAL
argument_list|,
name|PUBLIC
argument_list|)
expr_stmt|;
name|TestCoprocessorForTagsAtSink
operator|.
name|tags
operator|.
name|clear
argument_list|()
expr_stmt|;
name|verifyGet
argument_list|(
name|row3
argument_list|,
name|expectedVisString
index|[
literal|2
index|]
argument_list|,
name|expected
index|[
literal|2
index|]
argument_list|,
literal|false
argument_list|,
name|PRIVATE
argument_list|,
name|SECRET
argument_list|)
expr_stmt|;
name|verifyGet
argument_list|(
name|row3
argument_list|,
literal|""
argument_list|,
name|expected
index|[
literal|3
index|]
argument_list|,
literal|true
argument_list|,
name|TOPSECRET
argument_list|,
name|SECRET
argument_list|)
expr_stmt|;
name|verifyGet
argument_list|(
name|row4
argument_list|,
name|expectedVisString
index|[
literal|3
index|]
argument_list|,
name|expected
index|[
literal|4
index|]
argument_list|,
literal|false
argument_list|,
name|UNICODE_VIS_TAG
argument_list|,
name|SECRET
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|static
name|void
name|doAssert
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|String
name|visTag
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|VisibilityReplicationEndPointForTest
operator|.
name|lastEntries
operator|==
literal|null
condition|)
block|{
return|return;
comment|// first call
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|VisibilityReplicationEndPointForTest
operator|.
name|lastEntries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|VisibilityReplicationEndPointForTest
operator|.
name|lastEntries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cells
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|tagFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
if|if
condition|(
operator|(
name|Bytes
operator|.
name|equals
argument_list|(
name|cell
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|)
operator|)
condition|)
block|{
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
name|TagUtil
operator|.
name|asList
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Tag
name|tag
range|:
name|tags
control|)
block|{
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|==
name|TagType
operator|.
name|STRING_VIS_TAG_TYPE
condition|)
block|{
name|assertEquals
argument_list|(
name|visTag
argument_list|,
name|TagUtil
operator|.
name|getValueAsString
argument_list|(
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|tagFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|tagFound
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|verifyGet
parameter_list|(
specifier|final
name|byte
index|[]
name|row
parameter_list|,
specifier|final
name|String
name|visString
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|,
specifier|final
name|boolean
name|nullExpected
parameter_list|,
specifier|final
name|String
modifier|...
name|auths
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|scanAction
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf1
argument_list|)
init|;
name|Table
name|table2
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
init|)
block|{
name|CellScanner
name|cellScanner
decl_stmt|;
name|Cell
name|current
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|setAuthorizations
argument_list|(
operator|new
name|Authorizations
argument_list|(
name|auths
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table2
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|cellScanner
operator|=
name|result
operator|.
name|cellScanner
argument_list|()
expr_stmt|;
name|boolean
name|advance
init|=
name|cellScanner
operator|.
name|advance
argument_list|()
decl_stmt|;
if|if
condition|(
name|nullExpected
condition|)
block|{
name|assertTrue
argument_list|(
operator|!
name|advance
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|current
operator|=
name|cellScanner
operator|.
name|current
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|current
argument_list|)
argument_list|,
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|Tag
name|tag
range|:
name|TestCoprocessorForTagsAtSink
operator|.
name|tags
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"The tag type is "
operator|+
name|tag
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|TestCoprocessorForTagsAtSink
operator|.
name|tags
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tag
name|tag
init|=
name|TestCoprocessorForTagsAtSink
operator|.
name|tags
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|getType
argument_list|()
operator|!=
name|NON_VIS_TAG_TYPE
condition|)
block|{
name|assertEquals
argument_list|(
name|TagType
operator|.
name|VISIBILITY_EXP_SERIALIZATION_FORMAT_TAG_TYPE
argument_list|,
name|tag
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tag
operator|=
name|TestCoprocessorForTagsAtSink
operator|.
name|tags
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|foundNonVisTag
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Tag
name|t
range|:
name|TestCoprocessorForTagsAtSink
operator|.
name|tags
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getType
argument_list|()
operator|==
name|NON_VIS_TAG_TYPE
condition|)
block|{
name|assertEquals
argument_list|(
name|TEMP
argument_list|,
name|TagUtil
operator|.
name|getValueAsString
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|foundNonVisTag
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|doAssert
argument_list|(
name|row
argument_list|,
name|visString
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|foundNonVisTag
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
decl_stmt|;
name|USER1
operator|.
name|runAs
argument_list|(
name|scanAction
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|addLabels
parameter_list|()
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
argument_list|<
name|VisibilityLabelsResponse
argument_list|>
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|VisibilityLabelsResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|VisibilityLabelsResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|labels
init|=
block|{
name|SECRET
block|,
name|TOPSECRET
block|,
name|CONFIDENTIAL
block|,
name|PUBLIC
block|,
name|PRIVATE
block|,
name|UNICODE_VIS_TAG
block|}
decl_stmt|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|VisibilityClient
operator|.
name|addLabels
argument_list|(
name|conn
argument_list|,
name|labels
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|t
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|SUPERUSER
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setAuths
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|PrivilegedExceptionAction
argument_list|<
name|VisibilityLabelsResponse
argument_list|>
name|action
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|VisibilityLabelsResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|VisibilityLabelsResponse
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
return|return
name|VisibilityClient
operator|.
name|setAuths
argument_list|(
name|conn
argument_list|,
operator|new
name|String
index|[]
block|{
name|SECRET
block|,
name|CONFIDENTIAL
block|,
name|PRIVATE
block|,
name|TOPSECRET
block|,
name|UNICODE_VIS_TAG
block|}
argument_list|,
literal|"user1"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|VisibilityLabelsResponse
name|response
init|=
name|SUPERUSER
operator|.
name|runAs
argument_list|(
name|action
argument_list|)
decl_stmt|;
block|}
specifier|static
name|Table
name|writeData
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
modifier|...
name|labelExps
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|labelExp
range|:
name|labelExps
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|qual
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|put
operator|.
name|setCellVisibility
argument_list|(
operator|new
name|CellVisibility
argument_list|(
name|labelExp
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|setAttribute
argument_list|(
name|NON_VISIBILITY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|TEMP
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
comment|// A simple BaseRegionbserver impl that allows to add a non-visibility tag from the
comment|// attributes of the Put mutation.  The existing cells in the put mutation is overwritten
comment|// with a new cell that has the visibility tags and the non visibility tag
specifier|public
specifier|static
class|class
name|SimpleCP
extends|extends
name|BaseRegionObserver
block|{
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Put
name|m
parameter_list|,
name|WALEdit
name|edit
parameter_list|,
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|attribute
init|=
name|m
operator|.
name|getAttribute
argument_list|(
name|NON_VISIBILITY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|updatedCells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|attribute
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|?
extends|extends
name|Cell
argument_list|>
name|edits
range|:
name|m
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|edits
control|)
block|{
name|KeyValue
name|kv
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|cf
operator|==
literal|null
condition|)
block|{
name|cf
operator|=
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|Tag
name|tag
init|=
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
name|NON_VIS_TAG_TYPE
argument_list|,
name|attribute
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tagList
init|=
operator|new
name|ArrayList
argument_list|<
name|Tag
argument_list|>
argument_list|()
decl_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|tagList
operator|.
name|addAll
argument_list|(
name|kv
operator|.
name|getTags
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
name|newcell
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|kv
argument_list|,
name|tagList
argument_list|)
decl_stmt|;
operator|(
operator|(
name|List
argument_list|<
name|Cell
argument_list|>
operator|)
name|updatedCells
operator|)
operator|.
name|add
argument_list|(
name|newcell
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|remove
argument_list|(
name|cf
argument_list|)
expr_stmt|;
comment|// Update the family map
name|m
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|put
argument_list|(
name|cf
argument_list|,
name|updatedCells
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|TestCoprocessorForTagsAtSink
extends|extends
name|BaseRegionObserver
block|{
specifier|public
specifier|static
name|List
argument_list|<
name|Tag
argument_list|>
name|tags
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|postGetOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Get
name|get
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Check tag presence in the 1st cell in 1st Result
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Cell
name|cell
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|tags
operator|=
name|TagUtil
operator|.
name|asList
argument_list|(
name|cell
operator|.
name|getTagsArray
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsOffset
argument_list|()
argument_list|,
name|cell
operator|.
name|getTagsLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * An extn of VisibilityReplicationEndpoint to verify the tags that are replicated    */
specifier|public
specifier|static
class|class
name|VisibilityReplicationEndPointForTest
extends|extends
name|VisibilityReplicationEndpoint
block|{
specifier|static
name|AtomicInteger
name|replicateCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|static
specifier|volatile
name|List
argument_list|<
name|Entry
argument_list|>
name|lastEntries
init|=
literal|null
decl_stmt|;
specifier|public
name|VisibilityReplicationEndPointForTest
parameter_list|(
name|ReplicationEndpoint
name|endpoint
parameter_list|,
name|VisibilityLabelService
name|visibilityLabelsService
parameter_list|)
block|{
name|super
argument_list|(
name|endpoint
argument_list|,
name|visibilityLabelsService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|replicate
parameter_list|(
name|ReplicateContext
name|replicateContext
parameter_list|)
block|{
name|boolean
name|ret
init|=
name|super
operator|.
name|replicate
argument_list|(
name|replicateContext
argument_list|)
decl_stmt|;
name|lastEntries
operator|=
name|replicateContext
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|replicateCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
block|}
end_class

end_unit

