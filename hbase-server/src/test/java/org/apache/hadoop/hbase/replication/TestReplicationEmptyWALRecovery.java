begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|AbstractFSWAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|Replication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|ReplicationSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|ReplicationSourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationEmptyWALRecovery
extends|extends
name|TestReplicationBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestReplicationEmptyWALRecovery
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|cleanUp
argument_list|()
expr_stmt|;
block|}
comment|/**    * Waits until there is only one log(the current writing one) in the replication queue    * @param numRs number of regionservers    */
specifier|private
name|void
name|waitForLogAdvance
parameter_list|(
name|int
name|numRs
parameter_list|)
throws|throws
name|Exception
block|{
name|Waiter
operator|.
name|waitFor
argument_list|(
name|CONF1
argument_list|,
literal|10000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRs
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|UTIL1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RegionInfo
name|regionInfo
init|=
name|UTIL1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|htable1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|WAL
name|wal
init|=
name|hrs
operator|.
name|getWAL
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|Path
name|currentFile
init|=
operator|(
operator|(
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
operator|)
name|wal
operator|)
operator|.
name|getCurrentFileName
argument_list|()
decl_stmt|;
name|Replication
name|replicationService
init|=
operator|(
name|Replication
operator|)
name|UTIL1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getReplicationSourceService
argument_list|()
decl_stmt|;
for|for
control|(
name|ReplicationSourceInterface
name|rsi
range|:
name|replicationService
operator|.
name|getReplicationManager
argument_list|()
operator|.
name|getSources
argument_list|()
control|)
block|{
name|ReplicationSource
name|source
init|=
operator|(
name|ReplicationSource
operator|)
name|rsi
decl_stmt|;
if|if
condition|(
operator|!
name|currentFile
operator|.
name|equals
argument_list|(
name|source
operator|.
name|getCurrentPath
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyWALRecovery
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|numRs
init|=
name|UTIL1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// for each RS, create an empty wal with same walGroupId
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|emptyWalPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRs
condition|;
name|i
operator|++
control|)
block|{
name|RegionInfo
name|regionInfo
init|=
name|UTIL1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|htable1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|WAL
name|wal
init|=
name|UTIL1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
operator|.
name|getWAL
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|Path
name|currentWalPath
init|=
name|AbstractFSWALProvider
operator|.
name|getCurrentFileName
argument_list|(
name|wal
argument_list|)
decl_stmt|;
name|String
name|walGroupId
init|=
name|AbstractFSWALProvider
operator|.
name|getWALPrefixFromWALName
argument_list|(
name|currentWalPath
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|emptyWalPath
init|=
operator|new
name|Path
argument_list|(
name|UTIL1
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
name|walGroupId
operator|+
literal|"."
operator|+
name|ts
argument_list|)
decl_stmt|;
name|UTIL1
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|emptyWalPath
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|emptyWalPaths
operator|.
name|add
argument_list|(
name|emptyWalPath
argument_list|)
expr_stmt|;
block|}
comment|// inject our empty wal into the replication queue, and then roll the original wal, which
comment|// enqueues a new wal behind our empty wal. We must roll the wal here as now we use the WAL to
comment|// determine if the file being replicated currently is still opened for write, so just inject a
comment|// new wal to the replication queue does not mean the previous file is closed.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRs
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|hrs
init|=
name|UTIL1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Replication
name|replicationService
init|=
operator|(
name|Replication
operator|)
name|hrs
operator|.
name|getReplicationSourceService
argument_list|()
decl_stmt|;
name|replicationService
operator|.
name|getReplicationManager
argument_list|()
operator|.
name|preLogRoll
argument_list|(
name|emptyWalPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|replicationService
operator|.
name|getReplicationManager
argument_list|()
operator|.
name|postLogRoll
argument_list|(
name|emptyWalPaths
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|RegionInfo
name|regionInfo
init|=
name|UTIL1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|htable1
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|WAL
name|wal
init|=
name|hrs
operator|.
name|getWAL
argument_list|(
name|regionInfo
argument_list|)
decl_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// ReplicationSource should advance past the empty wal, or else the test will fail
name|waitForLogAdvance
argument_list|(
name|numRs
argument_list|)
expr_stmt|;
comment|// we're now writing to the new wal
comment|// if everything works, the source should've stopped reading from the empty wal, and start
comment|// replicating from the new wal
name|runSimplePutDeleteTest
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

