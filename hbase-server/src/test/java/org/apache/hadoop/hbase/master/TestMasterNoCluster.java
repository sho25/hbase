begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|metrics2
operator|.
name|lib
operator|.
name|DefaultMetricsSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Standup the master and fake it to test various aspects of master function.  * Does NOT spin up a mini hbase nor mini dfs cluster testing master (it does  * put up a zk cluster but this is usually pretty fast compared).  Also, should  * be possible to inject faults at points difficult to get at in cluster context.  * TODO: Speed up the zk connection by Master.  It pauses 5 seconds establishing  * session.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMasterNoCluster
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMasterNoCluster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TESTUTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
name|TESTUTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// We use local filesystem.  Set it so it writes into the testdir.
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|c
argument_list|,
name|TESTUTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultMetricsSystem
operator|.
name|setMiniClusterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Startup a mini zk cluster.
name|TESTUTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TESTUTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|ZooKeeperConnectionException
throws|,
name|IOException
block|{
comment|// Make sure zk is clean before we run the next test.
name|ZKWatcher
name|zkw
init|=
operator|new
name|ZKWatcher
argument_list|(
name|TESTUTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"@Before"
argument_list|,
operator|new
name|Abortable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|why
argument_list|,
name|e
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|baseZNode
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test starting master then stopping it before its fully up.    */
annotation|@
name|Test
specifier|public
name|void
name|testStopDuringStart
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|HMaster
name|master
init|=
operator|new
name|HMaster
argument_list|(
name|TESTUTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Immediately have it stop.  We used hang in assigning meta.
name|master
operator|.
name|stopMaster
argument_list|()
expr_stmt|;
name|master
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMasterInitWithSameClientServerZKQuorum
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|TESTUTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CLIENT_ZOOKEEPER_QUORUM
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|ZOOKEEPER_QUORUM
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|CLIENT_ZOOKEEPER_CLIENT_PORT
argument_list|,
name|TESTUTIL
operator|.
name|getZkCluster
argument_list|()
operator|.
name|getClientPort
argument_list|()
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
operator|new
name|HMaster
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// the master will abort due to IllegalArgumentException so we should finish within 60 seconds
name|master
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMasterInitWithObserverModeClientZKQuorum
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|TESTUTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|CLIENT_ZOOKEEPER_OBSERVER_MODE
argument_list|)
argument_list|)
expr_stmt|;
comment|// set client ZK to some non-existing address and make sure server won't access client ZK
comment|// (server start should not be affected)
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CLIENT_ZOOKEEPER_QUORUM
argument_list|,
name|HConstants
operator|.
name|LOCALHOST
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|CLIENT_ZOOKEEPER_CLIENT_PORT
argument_list|,
name|TESTUTIL
operator|.
name|getZkCluster
argument_list|()
operator|.
name|getClientPort
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// settings to allow us not to start additional RS
name|conf
operator|.
name|setInt
argument_list|(
name|ServerManager
operator|.
name|WAIT_ON_REGIONSERVERS_MINTOSTART
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|LoadBalancer
operator|.
name|TABLES_ON_MASTER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// main setting for this test case
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|CLIENT_ZOOKEEPER_OBSERVER_MODE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
operator|new
name|HMaster
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|master
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|master
operator|.
name|isInitialized
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertNull
argument_list|(
name|master
operator|.
name|metaLocationSyncer
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|master
operator|.
name|masterAddressSyncer
argument_list|)
expr_stmt|;
name|master
operator|.
name|stopMaster
argument_list|()
expr_stmt|;
name|master
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

