begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|NetworkInterface
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StartMiniClusterOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests for the hostname specification by region server  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionServerHostname
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionServerHostname
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRegionServerHostname
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|TEST_UTIL
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MASTERS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RS
init|=
literal|1
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidRegionServerHostnameAbortsServer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|invalidHostname
init|=
literal|"hostAddr.invalid"
decl_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HRegionServer
operator|.
name|RS_HOSTNAME_KEY
argument_list|,
name|invalidHostname
argument_list|)
expr_stmt|;
name|HRegionServer
name|hrs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hrs
operator|=
operator|new
name|HRegionServer
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Failed resolve of "
operator|+
name|invalidHostname
argument_list|)
operator|||
name|iae
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Problem binding to "
operator|+
name|invalidHostname
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
literal|"Failed to validate against invalid hostname"
argument_list|,
name|hrs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionServerHostname
parameter_list|()
throws|throws
name|Exception
block|{
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|netInterfaceList
init|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
while|while
condition|(
name|netInterfaceList
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|ni
init|=
name|netInterfaceList
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|addrList
init|=
name|ni
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
comment|// iterate through host addresses and use each as hostname
while|while
condition|(
name|addrList
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|InetAddress
name|addr
init|=
name|addrList
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|isLoopbackAddress
argument_list|()
operator|||
name|addr
operator|.
name|isLinkLocalAddress
argument_list|()
operator|||
name|addr
operator|.
name|isMulticastAddress
argument_list|()
operator|||
operator|!
name|addr
operator|.
name|isSiteLocalAddress
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|hostName
init|=
name|addr
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|hostName
operator|+
literal|" on "
operator|+
name|ni
operator|+
literal|", addr="
operator|+
name|addr
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HRegionServer
operator|.
name|MASTER_HOSTNAME_KEY
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HRegionServer
operator|.
name|RS_HOSTNAME_KEY
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
name|StartMiniClusterOption
name|option
init|=
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|numMasters
argument_list|(
name|NUM_MASTERS
argument_list|)
operator|.
name|numRegionServers
argument_list|(
name|NUM_RS
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_RS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|option
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKWatcher
name|zkw
init|=
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|rsZNode
argument_list|)
decl_stmt|;
comment|// there would be NUM_RS+1 children - one for the master
name|assertTrue
argument_list|(
name|servers
operator|.
name|size
argument_list|()
operator|==
name|NUM_RS
operator|+
operator|(
name|LoadBalancer
operator|.
name|isTablesOnMaster
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|server
range|:
name|servers
control|)
block|{
name|assertTrue
argument_list|(
literal|"From zookeeper: "
operator|+
name|server
operator|+
literal|" hostname: "
operator|+
name|hostName
argument_list|,
name|server
operator|.
name|startsWith
argument_list|(
name|hostName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|+
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConflictRegionServerHostnameConfigurationsAbortServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Enumeration
argument_list|<
name|NetworkInterface
argument_list|>
name|netInterfaceList
init|=
name|NetworkInterface
operator|.
name|getNetworkInterfaces
argument_list|()
decl_stmt|;
while|while
condition|(
name|netInterfaceList
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|NetworkInterface
name|ni
init|=
name|netInterfaceList
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|InetAddress
argument_list|>
name|addrList
init|=
name|ni
operator|.
name|getInetAddresses
argument_list|()
decl_stmt|;
comment|// iterate through host addresses and use each as hostname
while|while
condition|(
name|addrList
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|InetAddress
name|addr
init|=
name|addrList
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|isLoopbackAddress
argument_list|()
operator|||
name|addr
operator|.
name|isLinkLocalAddress
argument_list|()
operator|||
name|addr
operator|.
name|isMulticastAddress
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|String
name|hostName
init|=
name|addr
operator|.
name|getHostName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|hostName
operator|+
literal|" on "
operator|+
name|ni
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HRegionServer
operator|.
name|MASTER_HOSTNAME_KEY
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
comment|// "hbase.regionserver.hostname" and "hbase.regionserver.hostname.disable.master.reversedns"
comment|// are mutually exclusive. Exception should be thrown if both are used.
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HRegionServer
operator|.
name|RS_HOSTNAME_KEY
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|HRegionServer
operator|.
name|RS_HOSTNAME_DISABLE_MASTER_REVERSEDNS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|StartMiniClusterOption
name|option
init|=
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|numMasters
argument_list|(
name|NUM_MASTERS
argument_list|)
operator|.
name|numRegionServers
argument_list|(
name|NUM_RS
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_RS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Throwable
name|t1
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|Throwable
name|t2
init|=
name|t1
operator|.
name|getCause
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|t1
operator|.
name|getMessage
argument_list|()
operator|+
literal|" - "
operator|+
name|t2
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t2
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|HRegionServer
operator|.
name|RS_HOSTNAME_DISABLE_MASTER_REVERSEDNS_KEY
operator|+
literal|" and "
operator|+
name|HRegionServer
operator|.
name|RS_HOSTNAME_KEY
operator|+
literal|" are mutually exclusive"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Failed to validate against conflict hostname configurations"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionServerHostnameReportedToMaster
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
name|HRegionServer
operator|.
name|RS_HOSTNAME_DISABLE_MASTER_REVERSEDNS_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StartMiniClusterOption
name|option
init|=
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|numMasters
argument_list|(
name|NUM_MASTERS
argument_list|)
operator|.
name|numRegionServers
argument_list|(
name|NUM_RS
argument_list|)
operator|.
name|numDataNodes
argument_list|(
name|NUM_RS
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|boolean
name|tablesOnMaster
init|=
name|LoadBalancer
operator|.
name|isTablesOnMaster
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|expectedRS
init|=
name|NUM_RS
operator|+
operator|(
name|tablesOnMaster
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
try|try
init|(
name|ZKWatcher
name|zkw
init|=
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
init|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|servers
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|rsZNode
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRS
argument_list|,
name|servers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

