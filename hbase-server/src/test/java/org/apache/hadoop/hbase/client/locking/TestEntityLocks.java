begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|locking
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|atLeastOnce
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|PerClientRandomNonceGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockHeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockHeartbeatResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ClientTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestEntityLocks
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestEntityLocks
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LockService
operator|.
name|BlockingInterface
name|master
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|LockService
operator|.
name|BlockingInterface
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|LockServiceClient
name|admin
decl_stmt|;
specifier|private
name|ArgumentCaptor
argument_list|<
name|LockRequest
argument_list|>
name|lockReqArgCaptor
decl_stmt|;
specifier|private
name|ArgumentCaptor
argument_list|<
name|LockHeartbeatRequest
argument_list|>
name|lockHeartbeatReqArgCaptor
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|LockHeartbeatResponse
name|UNLOCKED_RESPONSE
init|=
name|LockHeartbeatResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLockStatus
argument_list|(
name|LockHeartbeatResponse
operator|.
name|LockStatus
operator|.
name|UNLOCKED
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// timeout such that worker thread waits for 500ms for each heartbeat.
specifier|private
specifier|static
specifier|final
name|LockHeartbeatResponse
name|LOCKED_RESPONSE
init|=
name|LockHeartbeatResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLockStatus
argument_list|(
name|LockHeartbeatResponse
operator|.
name|LockStatus
operator|.
name|LOCKED
argument_list|)
operator|.
name|setTimeoutMs
argument_list|(
literal|10000
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
name|long
name|procId
decl_stmt|;
comment|// Setup mock admin.
name|LockServiceClient
name|getAdmin
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.retries.number"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// 1ms. Immediately retry rpc on failure.
return|return
operator|new
name|LockServiceClient
argument_list|(
name|conf
argument_list|,
name|master
argument_list|,
name|PerClientRandomNonceGenerator
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|admin
operator|=
name|getAdmin
argument_list|()
expr_stmt|;
name|lockReqArgCaptor
operator|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|LockRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|lockHeartbeatReqArgCaptor
operator|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|LockHeartbeatRequest
operator|.
name|class
argument_list|)
expr_stmt|;
name|procId
operator|=
operator|new
name|Random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|waitLockTimeOut
parameter_list|(
name|EntityLock
name|lock
parameter_list|,
name|long
name|maxWaitTimeMillis
parameter_list|)
block|{
name|long
name|startMillis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|lock
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Sleeping..."
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lock
operator|.
name|isLocked
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startMillis
operator|>
name|maxWaitTimeMillis
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Timedout..."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
comment|// to make compiler happy.
block|}
comment|/**    * Test basic lock function - requestLock, await, unlock.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testEntityLock
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|procId
init|=
literal|100
decl_stmt|;
specifier|final
name|long
name|workerSleepTime
init|=
literal|200
decl_stmt|;
comment|// in ms
name|EntityLock
name|lock
init|=
name|admin
operator|.
name|namespaceLock
argument_list|(
literal|"namespace"
argument_list|,
literal|"description"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|lock
operator|.
name|setTestingSleepTime
argument_list|(
name|workerSleepTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|master
operator|.
name|requestLock
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LockResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|master
operator|.
name|lockHeartbeat
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|UNLOCKED_RESPONSE
argument_list|,
name|UNLOCKED_RESPONSE
argument_list|,
name|UNLOCKED_RESPONSE
argument_list|,
name|LOCKED_RESPONSE
argument_list|)
expr_stmt|;
name|lock
operator|.
name|requestLock
argument_list|()
expr_stmt|;
comment|// we return unlock response 3 times, so actual wait time should be around 2 * workerSleepTime
name|lock
operator|.
name|await
argument_list|(
literal|4
operator|*
name|workerSleepTime
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|isLocked
argument_list|()
argument_list|)
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|lock
operator|.
name|getWorker
argument_list|()
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lock
operator|.
name|isLocked
argument_list|()
argument_list|)
expr_stmt|;
comment|// check LockRequest in requestLock()
name|verify
argument_list|(
name|master
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|requestLock
argument_list|(
name|any
argument_list|()
argument_list|,
name|lockReqArgCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
name|LockRequest
name|request
init|=
name|lockReqArgCaptor
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"namespace"
argument_list|,
name|request
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"description"
argument_list|,
name|request
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|request
operator|.
name|getLockType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|request
operator|.
name|getRegionInfoCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// check LockHeartbeatRequest in lockHeartbeat()
name|verify
argument_list|(
name|master
argument_list|,
name|atLeastOnce
argument_list|()
argument_list|)
operator|.
name|lockHeartbeat
argument_list|(
name|any
argument_list|()
argument_list|,
name|lockHeartbeatReqArgCaptor
operator|.
name|capture
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LockHeartbeatRequest
name|req
range|:
name|lockHeartbeatReqArgCaptor
operator|.
name|getAllValues
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|procId
argument_list|,
name|req
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that abort is called when lock times out.    */
annotation|@
name|Test
specifier|public
name|void
name|testEntityLockTimeout
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|workerSleepTime
init|=
literal|200
decl_stmt|;
comment|// in ms
name|Abortable
name|abortable
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Abortable
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntityLock
name|lock
init|=
name|admin
operator|.
name|namespaceLock
argument_list|(
literal|"namespace"
argument_list|,
literal|"description"
argument_list|,
name|abortable
argument_list|)
decl_stmt|;
name|lock
operator|.
name|setTestingSleepTime
argument_list|(
name|workerSleepTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|master
operator|.
name|requestLock
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LockResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
comment|// Acquires the lock, but then it times out (since we don't call unlock() on it).
name|when
argument_list|(
name|master
operator|.
name|lockHeartbeat
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LOCKED_RESPONSE
argument_list|,
name|UNLOCKED_RESPONSE
argument_list|)
expr_stmt|;
name|lock
operator|.
name|requestLock
argument_list|()
expr_stmt|;
name|lock
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|lock
operator|.
name|isLocked
argument_list|()
argument_list|)
expr_stmt|;
comment|// Should get unlocked in next heartbeat i.e. after workerSleepTime. Wait 2x time.
name|assertTrue
argument_list|(
name|waitLockTimeOut
argument_list|(
name|lock
argument_list|,
literal|2
operator|*
name|workerSleepTime
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lock
operator|.
name|getWorker
argument_list|()
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|abortable
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|abort
argument_list|(
name|any
argument_list|()
argument_list|,
name|eq
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that abort is called when lockHeartbeat fails with IOException.    */
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeatException
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|workerSleepTime
init|=
literal|100
decl_stmt|;
comment|// in ms
name|Abortable
name|abortable
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Abortable
operator|.
name|class
argument_list|)
decl_stmt|;
name|EntityLock
name|lock
init|=
name|admin
operator|.
name|namespaceLock
argument_list|(
literal|"namespace"
argument_list|,
literal|"description"
argument_list|,
name|abortable
argument_list|)
decl_stmt|;
name|lock
operator|.
name|setTestingSleepTime
argument_list|(
name|workerSleepTime
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|master
operator|.
name|requestLock
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LockResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|setProcId
argument_list|(
name|procId
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|master
operator|.
name|lockHeartbeat
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|LOCKED_RESPONSE
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|ServiceException
argument_list|(
literal|"Failed heartbeat!"
argument_list|)
argument_list|)
expr_stmt|;
name|lock
operator|.
name|requestLock
argument_list|()
expr_stmt|;
name|lock
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|waitLockTimeOut
argument_list|(
name|lock
argument_list|,
literal|100
operator|*
name|workerSleepTime
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|lock
operator|.
name|getWorker
argument_list|()
operator|.
name|isAlive
argument_list|()
condition|)
block|{
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|abortable
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|abort
argument_list|(
name|any
argument_list|()
argument_list|,
name|isA
argument_list|(
name|HBaseIOException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|lock
operator|.
name|getWorker
argument_list|()
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

