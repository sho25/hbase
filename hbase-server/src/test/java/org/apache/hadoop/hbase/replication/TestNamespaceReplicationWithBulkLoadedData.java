begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TestBulkLoadReplication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|RecoverableZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Testcase for HBASE-23098  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
specifier|final
class|class
name|TestNamespaceReplicationWithBulkLoadedData
extends|extends
name|TestBulkLoadReplication
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestNamespaceReplicationWithBulkLoadedData
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestNamespaceReplicationWithBulkLoadedData
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL4
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PEER4_CLUSTER_ID
init|=
literal|"peer4"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PEER4_NS
init|=
literal|"ns_peer1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PEER4_NS_TABLE
init|=
literal|"ns_peer2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Configuration
name|CONF4
init|=
name|UTIL4
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NS1
init|=
literal|"ns1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NS2
init|=
literal|"ns2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|NS1_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|NS1
operator|+
literal|":t1_syncup"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|NS2_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|NS2
operator|+
literal|":t2_syncup"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|setupBulkLoadConfigsForCluster
argument_list|(
name|CONF4
argument_list|,
name|PEER4_CLUSTER_ID
argument_list|)
expr_stmt|;
name|setupConfig
argument_list|(
name|UTIL4
argument_list|,
literal|"/4"
argument_list|)
expr_stmt|;
name|TestBulkLoadReplication
operator|.
name|setUpBeforeClass
argument_list|()
expr_stmt|;
name|startFourthCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startFourthCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Setup Zk to same one from UTIL1 and UTIL2 and UTIL3"
argument_list|)
expr_stmt|;
name|UTIL4
operator|.
name|setZkCluster
argument_list|(
name|UTIL1
operator|.
name|getZkCluster
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL4
operator|.
name|startMiniCluster
argument_list|(
name|NUM_SLAVES1
argument_list|)
expr_stmt|;
name|TableDescriptor
name|table
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|famName
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|100
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|noRepfamName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Connection
name|connection4
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|CONF4
argument_list|)
decl_stmt|;
try|try
init|(
name|Admin
name|admin4
init|=
name|connection4
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin4
operator|.
name|createTable
argument_list|(
name|table
argument_list|,
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
argument_list|)
expr_stmt|;
block|}
name|UTIL4
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUpBase
parameter_list|()
throws|throws
name|Exception
block|{
comment|/** "super.setUpBase()" already sets peer1 from 1<-> 2<-> 3      * and this test add the fourth cluster.      * So we have following topology:      *      1      *     / \      *    2   4      *   /      *  3      *      *  The 1 -> 4 has two peers,      *  ns_peer1:  ns1 -> ns1 (validate this peer hfile-refs)      *             ns_peer1 configuration is NAMESPACES => ["ns1"]      *      *  ns_peer2:  ns2:t2_syncup -> ns2:t2_syncup, this peers is      *             ns_peer2 configuration is NAMESPACES => ["ns2"],      *                       TABLE_CFS => { "ns2:t2_syncup" => []}      *      *  The 1 -> 2 has one peer, this peer configuration is      *             add_peer '2', CLUSTER_KEY => "server1.cie.com:2181:/hbase"      *      */
name|super
operator|.
name|setUpBase
argument_list|()
expr_stmt|;
comment|// Create tables
name|TableDescriptor
name|table1
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|NS1_TABLE
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|famName
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|noRepfamName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TableDescriptor
name|table2
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|NS2_TABLE
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|famName
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|noRepfamName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Admin
name|admin1
init|=
name|UTIL1
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin1
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|NS1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|admin1
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|NS2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|admin1
operator|.
name|createTable
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|admin1
operator|.
name|createTable
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|Admin
name|admin2
init|=
name|UTIL2
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin2
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|NS1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|NS2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|createTable
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|createTable
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|Admin
name|admin3
init|=
name|UTIL3
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin3
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|NS1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|NS2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|createTable
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|createTable
argument_list|(
name|table2
argument_list|)
expr_stmt|;
name|Admin
name|admin4
init|=
name|UTIL4
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin4
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|NS1
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|admin4
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|NS2
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|admin4
operator|.
name|createTable
argument_list|(
name|table1
argument_list|)
expr_stmt|;
name|admin4
operator|.
name|createTable
argument_list|(
name|table2
argument_list|)
expr_stmt|;
comment|/**      *  Set ns_peer1 1: ns1 -> 2: ns1      *      *  add_peer 'ns_peer1', CLUSTER_KEY => "zk1,zk2,zk3:2182:/hbase-prod",      *     NAMESPACES => ["ns1"]      */
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
name|NS1
argument_list|)
expr_stmt|;
name|ReplicationPeerConfig
name|rpc4_ns
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|UTIL4
operator|.
name|getClusterKey
argument_list|()
argument_list|)
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
operator|.
name|setNamespaces
argument_list|(
name|namespaces
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin1
operator|.
name|addReplicationPeer
argument_list|(
name|PEER4_NS
argument_list|,
name|rpc4_ns
argument_list|)
expr_stmt|;
comment|/**      * Set ns_peer2 1: ns2:t2_syncup -> 4: ns2:t2_syncup      *      * add_peer 'ns_peer2', CLUSTER_KEY => "zk1,zk2,zk3:2182:/hbase-prod",      *          NAMESPACES => ["ns2"], TABLE_CFS => { "ns2:t2_syncup" => [] }      */
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCFsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tableCFsMap
operator|.
name|put
argument_list|(
name|NS2_TABLE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ReplicationPeerConfig
name|rpc4_ns_table
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|UTIL4
operator|.
name|getClusterKey
argument_list|()
argument_list|)
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
operator|.
name|setTableCFsMap
argument_list|(
name|tableCFsMap
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin1
operator|.
name|addReplicationPeer
argument_list|(
name|PEER4_NS_TABLE
argument_list|,
name|rpc4_ns_table
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
specifier|public
name|void
name|tearDownBase
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDownBase
argument_list|()
expr_stmt|;
name|TableDescriptor
name|table1
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|NS1_TABLE
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|famName
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|noRepfamName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TableDescriptor
name|table2
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|NS2_TABLE
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|famName
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|noRepfamName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Admin
name|admin1
init|=
name|UTIL1
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin1
operator|.
name|disableTable
argument_list|(
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin1
operator|.
name|deleteTable
argument_list|(
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin1
operator|.
name|disableTable
argument_list|(
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin1
operator|.
name|deleteTable
argument_list|(
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin1
operator|.
name|deleteNamespace
argument_list|(
name|NS1
argument_list|)
expr_stmt|;
name|admin1
operator|.
name|deleteNamespace
argument_list|(
name|NS2
argument_list|)
expr_stmt|;
name|Admin
name|admin2
init|=
name|UTIL2
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin2
operator|.
name|disableTable
argument_list|(
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|deleteTable
argument_list|(
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|disableTable
argument_list|(
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|deleteTable
argument_list|(
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|deleteNamespace
argument_list|(
name|NS1
argument_list|)
expr_stmt|;
name|admin2
operator|.
name|deleteNamespace
argument_list|(
name|NS2
argument_list|)
expr_stmt|;
name|Admin
name|admin3
init|=
name|UTIL3
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin3
operator|.
name|disableTable
argument_list|(
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|deleteTable
argument_list|(
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|disableTable
argument_list|(
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|deleteTable
argument_list|(
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|deleteNamespace
argument_list|(
name|NS1
argument_list|)
expr_stmt|;
name|admin3
operator|.
name|deleteNamespace
argument_list|(
name|NS2
argument_list|)
expr_stmt|;
name|Admin
name|admin4
init|=
name|UTIL4
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin4
operator|.
name|disableTable
argument_list|(
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin4
operator|.
name|deleteTable
argument_list|(
name|table1
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin4
operator|.
name|disableTable
argument_list|(
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin4
operator|.
name|deleteTable
argument_list|(
name|table2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|admin4
operator|.
name|deleteNamespace
argument_list|(
name|NS1
argument_list|)
expr_stmt|;
name|admin4
operator|.
name|deleteNamespace
argument_list|(
name|NS2
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|removeReplicationPeer
argument_list|(
name|PEER4_NS
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|removeReplicationPeer
argument_list|(
name|PEER4_NS_TABLE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Override
specifier|public
name|void
name|testBulkLoadReplicationActiveActive
parameter_list|()
throws|throws
name|Exception
block|{
name|Table
name|peer1TestTable
init|=
name|UTIL1
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TestReplicationBase
operator|.
name|tableName
argument_list|)
decl_stmt|;
name|Table
name|peer2TestTable
init|=
name|UTIL2
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TestReplicationBase
operator|.
name|tableName
argument_list|)
decl_stmt|;
name|Table
name|peer3TestTable
init|=
name|UTIL3
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TestReplicationBase
operator|.
name|tableName
argument_list|)
decl_stmt|;
name|Table
name|notPeerTable
init|=
name|UTIL4
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TestReplicationBase
operator|.
name|tableName
argument_list|)
decl_stmt|;
name|Table
name|ns1Table
init|=
name|UTIL4
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|NS1_TABLE
argument_list|)
decl_stmt|;
name|Table
name|ns2Table
init|=
name|UTIL4
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|NS2_TABLE
argument_list|)
decl_stmt|;
comment|// case1: The ns1 tables will be replicate to cluster4
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"002_ns_peer"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v2"
argument_list|)
decl_stmt|;
name|bulkLoadOnCluster
argument_list|(
name|ns1Table
operator|.
name|getName
argument_list|()
argument_list|,
name|row
argument_list|,
name|value
argument_list|,
name|UTIL1
argument_list|)
expr_stmt|;
name|waitForReplication
argument_list|(
name|ns1Table
argument_list|,
literal|1
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
name|assertTableHasValue
argument_list|(
name|ns1Table
argument_list|,
name|row
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// case2: The ns2:t2_syncup will be replicate to cluster4
comment|// If it's not fix HBASE-23098 the ns_peer1's hfile-refs(zk) will be backlog
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"003_ns_table_peer"
argument_list|)
expr_stmt|;
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v2"
argument_list|)
expr_stmt|;
name|bulkLoadOnCluster
argument_list|(
name|ns2Table
operator|.
name|getName
argument_list|()
argument_list|,
name|row
argument_list|,
name|value
argument_list|,
name|UTIL1
argument_list|)
expr_stmt|;
name|waitForReplication
argument_list|(
name|ns2Table
argument_list|,
literal|1
argument_list|,
name|NB_RETRIES
argument_list|)
expr_stmt|;
name|assertTableHasValue
argument_list|(
name|ns2Table
argument_list|,
name|row
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// case3: The table test will be replicate to cluster1,cluster2,cluster3
comment|//        not replicate to cluster4, because we not set other peer for that tables.
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"001_nopeer"
argument_list|)
expr_stmt|;
name|value
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
expr_stmt|;
name|assertBulkLoadConditions
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|,
name|value
argument_list|,
name|UTIL1
argument_list|,
name|peer1TestTable
argument_list|,
name|peer2TestTable
argument_list|,
name|peer3TestTable
argument_list|)
expr_stmt|;
name|assertTableNoValue
argument_list|(
name|notPeerTable
argument_list|,
name|row
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// 1 -> 4, table is empty
comment|// Verify hfile-refs for 1:ns_peer1, expect is empty
name|MiniZooKeeperCluster
name|zkCluster
init|=
name|UTIL1
operator|.
name|getZkCluster
argument_list|()
decl_stmt|;
name|ZKWatcher
name|watcher
init|=
operator|new
name|ZKWatcher
argument_list|(
name|UTIL1
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"TestZnodeHFiles-refs"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|RecoverableZooKeeper
name|zk
init|=
name|ZKUtil
operator|.
name|connect
argument_list|(
name|UTIL1
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|watcher
argument_list|)
decl_stmt|;
name|ZKReplicationQueueStorage
name|replicationQueueStorage
init|=
operator|new
name|ZKReplicationQueueStorage
argument_list|(
name|watcher
argument_list|,
name|UTIL1
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hfiles
init|=
name|replicationQueueStorage
operator|.
name|getAllHFileRefs
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|hfiles
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

