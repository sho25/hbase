begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelHandlerContext
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelInitializer
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelOutboundHandlerAdapter
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|ChannelPromise
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|SocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RPCTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|RPCTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncIPC
extends|extends
name|AbstractTestIPC
block|{
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|paramList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|paramList
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|false
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|paramList
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|false
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
name|paramList
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|true
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|paramList
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|true
block|,
literal|true
block|}
argument_list|)
expr_stmt|;
return|return
name|paramList
return|;
block|}
specifier|private
specifier|final
name|boolean
name|useNativeTransport
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|useGlobalEventLoopGroup
decl_stmt|;
specifier|public
name|TestAsyncIPC
parameter_list|(
name|boolean
name|useNativeTransport
parameter_list|,
name|boolean
name|useGlobalEventLoopGroup
parameter_list|)
block|{
name|this
operator|.
name|useNativeTransport
operator|=
name|useNativeTransport
expr_stmt|;
name|this
operator|.
name|useGlobalEventLoopGroup
operator|=
name|useGlobalEventLoopGroup
expr_stmt|;
block|}
specifier|private
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|AsyncRpcClient
operator|.
name|USE_NATIVE_TRANSPORT
argument_list|,
name|useNativeTransport
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|AsyncRpcClient
operator|.
name|USE_GLOBAL_EVENT_LOOP_GROUP
argument_list|,
name|useGlobalEventLoopGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|useGlobalEventLoopGroup
operator|&&
name|AsyncRpcClient
operator|.
name|GLOBAL_EVENT_LOOP_GROUP
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|useNativeTransport
operator|&&
operator|!
operator|(
name|AsyncRpcClient
operator|.
name|GLOBAL_EVENT_LOOP_GROUP
operator|.
name|getFirst
argument_list|()
operator|instanceof
name|EpollEventLoopGroup
operator|)
operator|||
operator|(
operator|!
name|useNativeTransport
operator|&&
operator|!
operator|(
name|AsyncRpcClient
operator|.
name|GLOBAL_EVENT_LOOP_GROUP
operator|.
name|getFirst
argument_list|()
operator|instanceof
name|NioEventLoopGroup
operator|)
operator|)
condition|)
block|{
name|AsyncRpcClient
operator|.
name|GLOBAL_EVENT_LOOP_GROUP
operator|.
name|getFirst
argument_list|()
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
name|AsyncRpcClient
operator|.
name|GLOBAL_EVENT_LOOP_GROUP
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|AsyncRpcClient
name|createRpcClientNoCodec
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|AsyncRpcClient
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
name|Codec
name|getCodec
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AsyncRpcClient
name|createRpcClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|AsyncRpcClient
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|AsyncRpcClient
name|createRpcClientRTEDuringConnectionSetup
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|AsyncRpcClient
argument_list|(
name|conf
argument_list|,
operator|new
name|ChannelInitializer
argument_list|<
name|SocketChannel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|initChannel
parameter_list|(
name|SocketChannel
name|ch
parameter_list|)
throws|throws
name|Exception
block|{
name|ch
operator|.
name|pipeline
argument_list|()
operator|.
name|addFirst
argument_list|(
operator|new
name|ChannelOutboundHandlerAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|ChannelHandlerContext
name|ctx
parameter_list|,
name|Object
name|msg
parameter_list|,
name|ChannelPromise
name|promise
parameter_list|)
throws|throws
name|Exception
block|{
name|promise
operator|.
name|setFailure
argument_list|(
operator|new
name|RuntimeException
argument_list|(
literal|"Injected fault"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

