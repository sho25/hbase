begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SplitLogTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
operator|.
name|Ids
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test the master wal manager in a local cluster  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMasterWalManager
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMasterWalManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupTest
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|teardownTest
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveStaleRecoveringRegionsDuringMasterInitialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// this test is for when distributed log replay is enabled
if|if
condition|(
operator|!
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|false
argument_list|)
condition|)
return|return;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testRemoveStaleRecoveringRegionsDuringMasterInitialization"
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterWalManager
name|mwm
init|=
name|master
operator|.
name|getMasterWalManager
argument_list|()
decl_stmt|;
name|String
name|failedRegion
init|=
literal|"failedRegoin1"
decl_stmt|;
name|String
name|staleRegion
init|=
literal|"staleRegion"
decl_stmt|;
name|ServerName
name|inRecoveryServerName
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"mgr,1,1"
argument_list|)
decl_stmt|;
name|ServerName
name|previouselyFaildServerName
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"previous,1,1"
argument_list|)
decl_stmt|;
name|String
name|walPath
init|=
literal|"/hbase/data/.logs/"
operator|+
name|inRecoveryServerName
operator|.
name|getServerName
argument_list|()
operator|+
literal|"-splitting/test"
decl_stmt|;
comment|// Create a ZKW to use in the test
name|ZooKeeperWatcher
name|zkw
init|=
name|HBaseTestingUtility
operator|.
name|getZooKeeperWatcher
argument_list|(
name|UTIL
argument_list|)
decl_stmt|;
name|zkw
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|create
argument_list|(
name|ZKSplitLog
operator|.
name|getEncodedNodeName
argument_list|(
name|zkw
argument_list|,
name|walPath
argument_list|)
argument_list|,
operator|new
name|SplitLogTask
operator|.
name|Owned
argument_list|(
name|inRecoveryServerName
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|Ids
operator|.
name|OPEN_ACL_UNSAFE
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
name|String
name|staleRegionPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|recoveringRegionsZNode
argument_list|,
name|staleRegion
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
name|staleRegionPath
argument_list|)
expr_stmt|;
name|String
name|inRecoveringRegionPath
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|znodePaths
operator|.
name|recoveringRegionsZNode
argument_list|,
name|failedRegion
argument_list|)
decl_stmt|;
name|inRecoveringRegionPath
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|inRecoveringRegionPath
argument_list|,
name|inRecoveryServerName
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
name|inRecoveringRegionPath
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|previouselyFaildServerName
argument_list|)
expr_stmt|;
name|mwm
operator|.
name|removeStaleRecoveringRegionsFromZK
argument_list|(
name|servers
argument_list|)
expr_stmt|;
comment|// verification
name|assertFalse
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|staleRegionPath
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|inRecoveringRegionPath
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteChildrenRecursively
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|recoveringRegionsZNode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteChildrenRecursively
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|splitLogZNode
argument_list|)
expr_stmt|;
name|zkw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

