begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|RegionSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionReplicasWithModifyTable
block|{
specifier|private
specifier|static
specifier|final
name|int
name|NB_SERVERS
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
name|Table
name|table
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row
init|=
literal|"TestRegionReplicasWithModifyTable"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|f
init|=
name|HConstants
operator|.
name|CATALOG_FAMILY
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|HTU
operator|.
name|startMiniCluster
argument_list|(
name|NB_SERVERS
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|enableReplicationByModification
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
name|boolean
name|withReplica
parameter_list|,
name|int
name|initialReplicaCount
parameter_list|,
name|int
name|enableReplicaCount
parameter_list|,
name|int
name|splitCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|withReplica
condition|)
block|{
name|htd
operator|.
name|setRegionReplication
argument_list|(
name|initialReplicaCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|splitCount
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
index|[]
name|splits
init|=
name|getSplits
argument_list|(
name|splitCount
argument_list|)
decl_stmt|;
name|table
operator|=
name|HTU
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
name|splits
argument_list|,
operator|new
name|Configuration
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|=
name|HTU
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|f
block|}
argument_list|,
operator|(
name|byte
index|[]
index|[]
operator|)
literal|null
argument_list|,
operator|new
name|Configuration
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HBaseTestingUtility
operator|.
name|setReplicas
argument_list|(
name|HTU
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|enableReplicaCount
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
index|[]
name|getSplits
parameter_list|(
name|int
name|numRegions
parameter_list|)
block|{
name|RegionSplitter
operator|.
name|UniformSplit
name|split
init|=
operator|new
name|RegionSplitter
operator|.
name|UniformSplit
argument_list|()
decl_stmt|;
name|split
operator|.
name|setFirstRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|split
operator|.
name|setLastRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|split
operator|.
name|split
argument_list|(
name|numRegions
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|HRegionServer
operator|.
name|TEST_SKIP_REPORTING_TRANSITION
operator|=
literal|false
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|HTU
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|HRegionServer
name|getRS
parameter_list|()
block|{
return|return
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
name|HRegionServer
name|getSecondaryRS
parameter_list|()
block|{
return|return
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|private
name|HRegionServer
name|getTertiaryRS
parameter_list|()
block|{
return|return
name|HTU
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|2
argument_list|)
return|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRegionReplicasUsingEnableTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|enableReplicationByModification
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions
init|=
name|getRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions2
init|=
name|getSecondaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions3
init|=
name|getTertiaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|totalRegions
init|=
name|onlineRegions
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions2
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions3
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the number of regions should be more than 1"
argument_list|,
name|totalRegions
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disableAndDeleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|disableAndDeleteTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HTU
operator|.
name|getAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRegionReplicasUsingEnableTableForMultipleRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|enableReplicationByModification
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions
init|=
name|getRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions2
init|=
name|getSecondaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions3
init|=
name|getTertiaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|totalRegions
init|=
name|onlineRegions
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions2
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions3
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the number of regions should be equal to 30"
argument_list|,
name|totalRegions
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disableAndDeleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRegionReplicasByEnableTableWhenReplicaCountIsIncreased
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|enableReplicationByModification
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions
init|=
name|getRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions2
init|=
name|getSecondaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions3
init|=
name|getTertiaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|totalRegions
init|=
name|onlineRegions
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions2
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions3
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the number of regions should be 3"
argument_list|,
name|totalRegions
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disableAndDeleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRegionReplicasByEnableTableWhenReplicaCountIsDecreased
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|enableReplicationByModification
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions
init|=
name|getRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions2
init|=
name|getSecondaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions3
init|=
name|getTertiaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|totalRegions
init|=
name|onlineRegions
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions2
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions3
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the number of regions should be reduced to 2"
argument_list|,
name|totalRegions
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disableAndDeleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRegionReplicasByEnableTableWhenReplicaCountIsDecreasedWithMultipleRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|enableReplicationByModification
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions
init|=
name|getRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions2
init|=
name|getSecondaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions3
init|=
name|getTertiaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|totalRegions
init|=
name|onlineRegions
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions2
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions3
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the number of regions should be reduced to 40"
argument_list|,
name|totalRegions
argument_list|,
literal|40
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disableAndDeleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRegionReplicasByEnableTableWhenReplicaCountIsIncreasedWithmultipleRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|enableReplicationByModification
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions
init|=
name|getRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions2
init|=
name|getSecondaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|onlineRegions3
init|=
name|getTertiaryRS
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|totalRegions
init|=
name|onlineRegions
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions2
operator|.
name|size
argument_list|()
operator|+
name|onlineRegions3
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"the number of regions should be equal to 45"
argument_list|,
name|totalRegions
argument_list|,
literal|3
operator|*
literal|15
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|disableAndDeleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

