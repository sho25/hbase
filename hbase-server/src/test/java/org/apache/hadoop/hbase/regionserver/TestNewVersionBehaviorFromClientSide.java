begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestNewVersionBehaviorFromClientSide
block|{
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ROW2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|col1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|col2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|col3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|setDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Table
name|createTable
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|table
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|fam
operator|.
name|setNewVersionBehavior
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutAndDeleteVersions
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000004
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|2000000
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000000
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000000
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutMasked
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000004
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000004
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000004
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutMasked2
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000004
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000004
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000003
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|2
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000004
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000003
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|2
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutMaskedAndUserMaxVersion
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000004
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000004
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSameTs
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000004
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000004
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000003
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|2
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000004
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000003
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|2
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSameTsAndDelete
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000004
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000004
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000001
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|2
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000004
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000001
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|2
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteFamily
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col2
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col3
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|,
literal|2000000
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col3
argument_list|,
literal|1500002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col2
argument_list|,
literal|1500001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1500001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1500002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500001
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500001
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|2
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|3
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
literal|1500001
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col2
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col3
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000001
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|2
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|3
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1500002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|4
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000001
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|5
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeRange
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000004
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000005
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000006
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000007
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000008
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
literal|1000005
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
literal|1000005
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExplicitColum
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col2
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col2
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col2
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col2
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col3
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col3
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col3
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col3
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col2
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testgetColumnHint
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|setOperationTimeout
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|t
operator|.
name|setRpcTimeout
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|100
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|101
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|102
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|103
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|104
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|104
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRawScanAndMajorCompaction
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Table
name|t
init|=
name|createTable
argument_list|()
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000001
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000002
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000004
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000004
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|delete
argument_list|(
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|col1
argument_list|,
literal|1000003
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scannner
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxVersions
argument_list|()
argument_list|)
init|)
block|{
name|Result
name|r
init|=
name|scannner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|scannner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scannner
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxVersions
argument_list|()
argument_list|)
init|)
block|{
name|Result
name|r
init|=
name|scannner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|scannner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|majorCompact
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scannner
init|=
name|t
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxVersions
argument_list|()
argument_list|)
init|)
block|{
name|Result
name|r
init|=
name|scannner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|scannner
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000002
argument_list|,
name|r
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

