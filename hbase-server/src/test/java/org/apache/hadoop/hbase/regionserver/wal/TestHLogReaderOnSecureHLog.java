begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|impl
operator|.
name|Log4JLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|crypto
operator|.
name|KeyProviderForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|SplitLogTask
operator|.
name|RecoveryMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|TestCustomWALCellCodec
operator|.
name|CustomWALCellCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKSplitLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/*  * Test that verifies WAL written by SecureProtobufLogWriter is not readable by ProtobufLogReader  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHLogReaderOnSecureHLog
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHLogReaderOnSecureHLog
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
operator|(
operator|(
name|Log4JLogger
operator|)
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hbase.regionserver.wal"
argument_list|)
operator|)
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Test value"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CRYPTO_KEYPROVIDER_CONF_KEY
argument_list|,
name|KeyProviderForTesting
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|CRYPTO_MASTERKEY_NAME_CONF_KEY
argument_list|,
literal|"hbase"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.hlog.split.skip.errors"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|ENABLE_WAL_ENCRYPTION
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|writeWAL
parameter_list|(
name|String
name|tblName
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|clsName
init|=
name|conf
operator|.
name|get
argument_list|(
name|WALCellCodec
operator|.
name|WAL_CELL_CODEC_CLASS_KEY
argument_list|,
name|WALCellCodec
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|WALCellCodec
operator|.
name|WAL_CELL_CODEC_CLASS_KEY
argument_list|,
name|CustomWALCellCodec
operator|.
name|class
argument_list|,
name|WALCellCodec
operator|.
name|class
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|tableName
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|regioninfo
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|total
init|=
literal|10
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|logDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
name|tblName
argument_list|)
decl_stmt|;
specifier|final
name|AtomicLong
name|sequenceId
init|=
operator|new
name|AtomicLong
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Write the WAL
name|FSHLog
name|wal
init|=
operator|new
name|FSHLog
argument_list|(
name|fs
argument_list|,
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
name|logDir
operator|.
name|toString
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
condition|;
name|i
operator|++
control|)
block|{
name|WALEdit
name|kvs
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|regioninfo
argument_list|,
name|tableName
argument_list|,
name|kvs
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|htd
argument_list|,
name|sequenceId
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|walPath
init|=
operator|(
operator|(
name|FSHLog
operator|)
name|wal
operator|)
operator|.
name|computeFilename
argument_list|()
decl_stmt|;
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// restore the cell codec class
name|conf
operator|.
name|set
argument_list|(
name|WALCellCodec
operator|.
name|WAL_CELL_CODEC_CLASS_KEY
argument_list|,
name|clsName
argument_list|)
expr_stmt|;
return|return
name|walPath
return|;
block|}
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|testHLogReaderOnSecureHLog
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HLogFactory
operator|.
name|resetLogReaderClass
argument_list|()
expr_stmt|;
name|HLogFactory
operator|.
name|resetLogWriterClass
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|ProtobufLogReader
operator|.
name|class
argument_list|,
name|HLog
operator|.
name|Reader
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.writer.impl"
argument_list|,
name|SecureProtobufLogWriter
operator|.
name|class
argument_list|,
name|HLog
operator|.
name|Writer
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|walPath
init|=
name|writeWAL
argument_list|(
literal|"testHLogReaderOnSecureHLog"
argument_list|)
decl_stmt|;
comment|// Insure edits are not plaintext
name|long
name|length
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|walPath
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|walPath
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileData
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|length
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|fileData
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Cells appear to be plaintext"
argument_list|,
name|Bytes
operator|.
name|contains
argument_list|(
name|fileData
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// Confirm the WAL cannot be read back by ProtobufLogReader
try|try
block|{
name|HLog
operator|.
name|Reader
name|reader
init|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// expected IOE
block|}
name|FileStatus
index|[]
name|listStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|walPath
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|RecoveryMode
name|mode
init|=
operator|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|false
argument_list|)
condition|?
name|RecoveryMode
operator|.
name|LOG_REPLAY
else|:
name|RecoveryMode
operator|.
name|LOG_SPLITTING
operator|)
decl_stmt|;
name|Path
name|rootdir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|HLogSplitter
name|s
init|=
operator|new
name|HLogSplitter
argument_list|(
name|conf
argument_list|,
name|rootdir
argument_list|,
name|fs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|s
operator|.
name|splitLogFile
argument_list|(
name|listStatus
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ZKSplitLog
operator|.
name|getSplitLogDir
argument_list|(
name|rootdir
argument_list|,
name|listStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|"corrupt"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
comment|// assertFalse("log splitting should have failed", true);
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"WAL should have been sidelined"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|testSecureHLogReaderOnHLog
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HLogFactory
operator|.
name|resetLogReaderClass
argument_list|()
expr_stmt|;
name|HLogFactory
operator|.
name|resetLogWriterClass
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.reader.impl"
argument_list|,
name|SecureProtobufLogReader
operator|.
name|class
argument_list|,
name|HLog
operator|.
name|Reader
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.regionserver.hlog.writer.impl"
argument_list|,
name|ProtobufLogWriter
operator|.
name|class
argument_list|,
name|HLog
operator|.
name|Writer
operator|.
name|class
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Path
name|walPath
init|=
name|writeWAL
argument_list|(
literal|"testSecureHLogReaderOnHLog"
argument_list|)
decl_stmt|;
comment|// Ensure edits are plaintext
name|long
name|length
init|=
name|fs
operator|.
name|getFileStatus
argument_list|(
name|walPath
argument_list|)
operator|.
name|getLen
argument_list|()
decl_stmt|;
name|FSDataInputStream
name|in
init|=
name|fs
operator|.
name|open
argument_list|(
name|walPath
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileData
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|length
index|]
decl_stmt|;
name|IOUtils
operator|.
name|readFully
argument_list|(
name|in
argument_list|,
name|fileData
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Cells should be plaintext"
argument_list|,
name|Bytes
operator|.
name|contains
argument_list|(
name|fileData
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
comment|// Confirm the WAL can be read back by SecureProtobufLogReader
try|try
block|{
name|HLog
operator|.
name|Reader
name|reader
init|=
name|HLogFactory
operator|.
name|createReader
argument_list|(
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|walPath
argument_list|,
name|conf
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|FileStatus
index|[]
name|listStatus
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|walPath
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|RecoveryMode
name|mode
init|=
operator|(
name|conf
operator|.
name|getBoolean
argument_list|(
name|HConstants
operator|.
name|DISTRIBUTED_LOG_REPLAY_KEY
argument_list|,
literal|false
argument_list|)
condition|?
name|RecoveryMode
operator|.
name|LOG_REPLAY
else|:
name|RecoveryMode
operator|.
name|LOG_SPLITTING
operator|)
decl_stmt|;
name|Path
name|rootdir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
name|HLogSplitter
name|s
init|=
operator|new
name|HLogSplitter
argument_list|(
name|conf
argument_list|,
name|rootdir
argument_list|,
name|fs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|s
operator|.
name|splitLogFile
argument_list|(
name|listStatus
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
operator|new
name|Path
argument_list|(
name|ZKSplitLog
operator|.
name|getSplitLogDir
argument_list|(
name|rootdir
argument_list|,
name|listStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|"corrupt"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"WAL should have been processed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

