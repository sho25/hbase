begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ChoreService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoordinatedStateManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ClusterConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MetaTableLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationStateHBaseImpl
block|{
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|utility
decl_stmt|;
specifier|private
specifier|static
name|Connection
name|connection
decl_stmt|;
specifier|private
specifier|static
name|ReplicationQueues
name|rqH
decl_stmt|;
specifier|private
specifier|final
name|String
name|server1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"hostname1.example.org"
argument_list|,
literal|1234
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|utility
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|utility
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|conf
operator|=
name|utility
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.region.replica.replication.ReplicationQueuesType"
argument_list|,
name|ReplicationQueuesHBaseImpl
operator|.
name|class
argument_list|,
name|ReplicationQueues
operator|.
name|class
argument_list|)
expr_stmt|;
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkNamingSchema
parameter_list|()
throws|throws
name|Exception
block|{
name|rqH
operator|.
name|init
argument_list|(
name|server1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rqH
operator|.
name|isThisOurRegionServer
argument_list|(
name|server1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|rqH
operator|.
name|isThisOurRegionServer
argument_list|(
name|server1
operator|+
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|rqH
operator|.
name|isThisOurRegionServer
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicationStateHBase
parameter_list|()
block|{
name|DummyServer
name|ds
init|=
operator|new
name|DummyServer
argument_list|(
name|server1
argument_list|)
decl_stmt|;
try|try
block|{
name|rqH
operator|=
name|ReplicationFactory
operator|.
name|getReplicationQueues
argument_list|(
operator|new
name|ReplicationQueuesArguments
argument_list|(
name|conf
argument_list|,
name|ds
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|init
argument_list|(
name|server1
argument_list|)
expr_stmt|;
comment|// Check that the proper System Tables have been generated
name|Table
name|replicationTable
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|ReplicationQueuesHBaseImpl
operator|.
name|REPLICATION_TABLE_NAME
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|replicationTable
operator|.
name|getName
argument_list|()
operator|.
name|isSystemTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"testReplicationStateHBaseConstruction received an Exception"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Test adding in WAL files
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rqH
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|addLog
argument_list|(
literal|"Queue1"
argument_list|,
literal|"WALLogFile1.1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rqH
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|addLog
argument_list|(
literal|"Queue1"
argument_list|,
literal|"WALLogFile1.2"
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|addLog
argument_list|(
literal|"Queue1"
argument_list|,
literal|"WALLogFile1.3"
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|addLog
argument_list|(
literal|"Queue1"
argument_list|,
literal|"WALLogFile1.4"
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|addLog
argument_list|(
literal|"Queue2"
argument_list|,
literal|"WALLogFile2.1"
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|addLog
argument_list|(
literal|"Queue3"
argument_list|,
literal|"WALLogFile3.1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rqH
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|rqH
operator|.
name|getLogsInQueue
argument_list|(
literal|"Queue1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rqH
operator|.
name|getLogsInQueue
argument_list|(
literal|"Queue2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rqH
operator|.
name|getLogsInQueue
argument_list|(
literal|"Queue3"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that abortCount is still 0
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ds
operator|.
name|getAbortCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure that getting a log from a non-existent queue triggers an abort
name|assertNull
argument_list|(
name|rqH
operator|.
name|getLogsInQueue
argument_list|(
literal|"Queue4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ds
operator|.
name|getAbortCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"testAddLog received a ReplicationException"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Test updating the log positions
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|rqH
operator|.
name|getLogPosition
argument_list|(
literal|"Queue1"
argument_list|,
literal|"WALLogFile1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|setLogPosition
argument_list|(
literal|"Queue1"
argument_list|,
literal|"WALLogFile1.1"
argument_list|,
literal|123L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123L
argument_list|,
name|rqH
operator|.
name|getLogPosition
argument_list|(
literal|"Queue1"
argument_list|,
literal|"WALLogFile1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|setLogPosition
argument_list|(
literal|"Queue1"
argument_list|,
literal|"WALLogFile1.1"
argument_list|,
literal|123456789L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123456789L
argument_list|,
name|rqH
operator|.
name|getLogPosition
argument_list|(
literal|"Queue1"
argument_list|,
literal|"WALLogFile1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|setLogPosition
argument_list|(
literal|"Queue2"
argument_list|,
literal|"WALLogFile2.1"
argument_list|,
literal|242L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|242L
argument_list|,
name|rqH
operator|.
name|getLogPosition
argument_list|(
literal|"Queue2"
argument_list|,
literal|"WALLogFile2.1"
argument_list|)
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|setLogPosition
argument_list|(
literal|"Queue3"
argument_list|,
literal|"WALLogFile3.1"
argument_list|,
literal|243L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|243L
argument_list|,
name|rqH
operator|.
name|getLogPosition
argument_list|(
literal|"Queue3"
argument_list|,
literal|"WALLogFile3.1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that setting log positions in non-existing logs will cause an abort
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ds
operator|.
name|getAbortCount
argument_list|()
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|setLogPosition
argument_list|(
literal|"NotHereQueue"
argument_list|,
literal|"WALLogFile3.1"
argument_list|,
literal|243L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ds
operator|.
name|getAbortCount
argument_list|()
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|setLogPosition
argument_list|(
literal|"NotHereQueue"
argument_list|,
literal|"NotHereFile"
argument_list|,
literal|243L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ds
operator|.
name|getAbortCount
argument_list|()
argument_list|)
expr_stmt|;
name|rqH
operator|.
name|setLogPosition
argument_list|(
literal|"Queue1"
argument_list|,
literal|"NotHereFile"
argument_list|,
literal|243l
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|ds
operator|.
name|getAbortCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test reading log positions for non-existent queues and WAL's
try|try
block|{
name|rqH
operator|.
name|getLogPosition
argument_list|(
literal|"Queue1"
argument_list|,
literal|"NotHereWAL"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Replication queue should have thrown a ReplicationException for reading from a "
operator|+
literal|"non-existent WAL"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{       }
try|try
block|{
name|rqH
operator|.
name|getLogPosition
argument_list|(
literal|"NotHereQueue"
argument_list|,
literal|"NotHereWAL"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Replication queue should have thrown a ReplicationException for reading from a "
operator|+
literal|"non-existent queue"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{       }
comment|// Test removing logs
name|rqH
operator|.
name|removeLog
argument_list|(
literal|"Queue1"
argument_list|,
literal|"WALLogFile1.1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rqH
operator|.
name|getLogsInQueue
argument_list|(
literal|"Queue1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test removing queues
name|rqH
operator|.
name|removeQueue
argument_list|(
literal|"Queue2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rqH
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rqH
operator|.
name|getLogsInQueue
argument_list|(
literal|"Queue2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that getting logs from a non-existent queue aborts
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|ds
operator|.
name|getAbortCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test removing all queues for a Region Server
name|rqH
operator|.
name|removeAllQueues
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rqH
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rqH
operator|.
name|getLogsInQueue
argument_list|(
literal|"Queue1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test that getting logs from a non-existent queue aborts
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|ds
operator|.
name|getAbortCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ReplicationException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"testAddLog received a ReplicationException"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|DummyServer
implements|implements
name|Server
block|{
specifier|private
name|String
name|serverName
decl_stmt|;
specifier|private
name|boolean
name|isAborted
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|isStopped
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|abortCount
init|=
literal|0
decl_stmt|;
specifier|public
name|DummyServer
parameter_list|(
name|String
name|serverName
parameter_list|)
block|{
name|this
operator|.
name|serverName
operator|=
name|serverName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
annotation|@
name|Override
specifier|public
name|ZooKeeperWatcher
name|getZooKeeper
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|CoordinatedStateManager
name|getCoordinatedStateManager
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterConnection
name|getConnection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MetaTableLocator
name|getMetaTableLocator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
name|ServerName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|serverName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|abortCount
operator|++
expr_stmt|;
name|this
operator|.
name|isAborted
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|this
operator|.
name|isAborted
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|this
operator|.
name|isStopped
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|isStopped
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChoreService
name|getChoreService
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterConnection
name|getClusterConnection
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getAbortCount
parameter_list|()
block|{
return|return
name|abortCount
return|;
block|}
block|}
block|}
end_class

end_unit

