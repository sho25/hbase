begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**   * Mob file compaction chore in a generational batch mode test.   * 1. Enables batch mode for regular MOB compaction,   *    Sets batch size to 7 regions. Enables generational mode.   * 2. Disables periodic MOB compactions, sets minimum age to archive to 10 sec   * 3. Creates MOB table with 20 regions   * 4. Loads MOB data (randomized keys, 1000 rows), flushes data.   * 5. Repeats 4. two more times   * 6. Verifies that we have 20 *3 = 60 mob files (equals to number of regions x 3)   * 7. Runs major MOB compaction.   * 8. Verifies that number of MOB files in a mob directory is 20 x4 = 80   * 9. Waits for a period of time larger than minimum age to archive   * 10. Runs Mob cleaner chore   * 11 Verifies that number of MOB files in a mob directory is 20.   * 12 Runs scanner and checks all 3 * 1000 rows.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMobCompactionOptRegionBatchMode
extends|extends
name|TestMobCompactionBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMobCompactionOptRegionBatchMode
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMobCompactionOptRegionBatchMode
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|batchSize
init|=
literal|7
decl_stmt|;
specifier|private
name|MobFileCompactionChore
name|compactionChore
decl_stmt|;
specifier|public
name|TestMobCompactionOptRegionBatchMode
parameter_list|()
block|{   }
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|compactionChore
operator|=
operator|new
name|MobFileCompactionChore
argument_list|(
name|conf
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initConf
parameter_list|()
block|{
name|super
operator|.
name|initConf
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|MobConstants
operator|.
name|MOB_MAJOR_COMPACTION_REGION_BATCH_SIZE
argument_list|,
name|batchSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_TYPE_KEY
argument_list|,
name|MobConstants
operator|.
name|OPTIMIZED_MOB_COMPACTION_TYPE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|MobConstants
operator|.
name|MOB_COMPACTION_MAX_FILE_SIZE_KEY
argument_list|,
literal|1000000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMobFileCompactionBatchMode
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MOB compaction chore generational batch mode started"
argument_list|)
expr_stmt|;
name|baseTestMobFileCompaction
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"MOB compaction chore generational batch mode finished OK"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|mobCompact
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|HTableDescriptor
name|hdt
parameter_list|,
name|HColumnDescriptor
name|hcd
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Major compact with batch mode enabled
name|compactionChore
operator|.
name|performMajorCompactionInBatches
argument_list|(
name|admin
argument_list|,
name|hdt
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

