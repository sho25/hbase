begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|SerializationConfig
operator|.
name|Feature
operator|.
name|SORT_PROPERTIES_ALPHABETICALLY
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|MathContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configured
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Append
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Consistency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Increment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RowMutations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterAllFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PageFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|RandomDistribution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mapreduce
operator|.
name|TableMapReduceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|CompactingMemStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|trace
operator|.
name|HBaseHTraceConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|trace
operator|.
name|SpanReceiverHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|input
operator|.
name|NLineInputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|output
operator|.
name|TextOutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|mapreduce
operator|.
name|lib
operator|.
name|reduce
operator|.
name|LongSumReducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|Tool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|jackson
operator|.
name|map
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Sampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|Trace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|TraceScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|htrace
operator|.
name|impl
operator|.
name|ProbabilitySampler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactoryBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|UniformReservoir
import|;
end_import

begin_comment
comment|/**  * Script used evaluating HBase performance and scalability.  Runs a HBase  * client that steps through one of a set of hardcoded tests or 'experiments'  * (e.g. a random reads test, a random writes test, etc.). Pass on the  * command-line which test to run and how many clients are participating in  * this experiment. Run {@code PerformanceEvaluation --help} to obtain usage.  *  *<p>This class sets up and runs the evaluation programs described in  * Section 7,<i>Performance Evaluation</i>, of the<a  * href="http://labs.google.com/papers/bigtable.html">Bigtable</a>  * paper, pages 8-10.  *  *<p>By default, runs as a mapreduce job where each mapper runs a single test  * client. Can also run as a non-mapreduce, multithreaded application by  * specifying {@code --nomapred}. Each client does about 1GB of data, unless  * specified otherwise.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
name|HBaseInterfaceAudience
operator|.
name|TOOLS
argument_list|)
specifier|public
class|class
name|PerformanceEvaluation
extends|extends
name|Configured
implements|implements
name|Tool
block|{
specifier|static
specifier|final
name|String
name|RANDOM_SEEK_SCAN
init|=
literal|"randomSeekScan"
decl_stmt|;
specifier|static
specifier|final
name|String
name|RANDOM_READ
init|=
literal|"randomRead"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PerformanceEvaluation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ObjectMapper
name|MAPPER
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
static|static
block|{
name|MAPPER
operator|.
name|configure
argument_list|(
name|SORT_PROPERTIES_ALPHABETICALLY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|String
name|TABLE_NAME
init|=
literal|"TestTable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_ZERO
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
literal|0
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|QUALIFIER_NAME
init|=
name|COLUMN_ZERO
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_VALUE_LENGTH
init|=
literal|1000
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|ROW_LENGTH
init|=
literal|26
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ONE_GB
init|=
literal|1024
operator|*
literal|1024
operator|*
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_ROWS_PER_GB
init|=
name|ONE_GB
operator|/
name|DEFAULT_VALUE_LENGTH
decl_stmt|;
comment|// TODO : should we make this configurable
specifier|private
specifier|static
specifier|final
name|int
name|TAG_LENGTH
init|=
literal|256
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DecimalFormat
name|FMT
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.##"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MathContext
name|CXT
init|=
name|MathContext
operator|.
name|DECIMAL64
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|MS_PER_SEC
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigDecimal
name|BYTES_PER_MB
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TestOptions
name|DEFAULT_OPTS
init|=
operator|new
name|TestOptions
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|CmdDescriptor
argument_list|>
name|COMMANDS
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Path
name|PERF_EVAL_DIR
init|=
operator|new
name|Path
argument_list|(
literal|"performance_evaluation"
argument_list|)
decl_stmt|;
static|static
block|{
name|addCommandDescriptor
argument_list|(
name|RandomReadTest
operator|.
name|class
argument_list|,
name|RANDOM_READ
argument_list|,
literal|"Run random read test"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|RandomSeekScanTest
operator|.
name|class
argument_list|,
name|RANDOM_SEEK_SCAN
argument_list|,
literal|"Run random seek and scan 100 test"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|RandomScanWithRange10Test
operator|.
name|class
argument_list|,
literal|"scanRange10"
argument_list|,
literal|"Run random seek scan with both start and stop row (max 10 rows)"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|RandomScanWithRange100Test
operator|.
name|class
argument_list|,
literal|"scanRange100"
argument_list|,
literal|"Run random seek scan with both start and stop row (max 100 rows)"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|RandomScanWithRange1000Test
operator|.
name|class
argument_list|,
literal|"scanRange1000"
argument_list|,
literal|"Run random seek scan with both start and stop row (max 1000 rows)"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|RandomScanWithRange10000Test
operator|.
name|class
argument_list|,
literal|"scanRange10000"
argument_list|,
literal|"Run random seek scan with both start and stop row (max 10000 rows)"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|RandomWriteTest
operator|.
name|class
argument_list|,
literal|"randomWrite"
argument_list|,
literal|"Run random write test"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|SequentialReadTest
operator|.
name|class
argument_list|,
literal|"sequentialRead"
argument_list|,
literal|"Run sequential read test"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|SequentialWriteTest
operator|.
name|class
argument_list|,
literal|"sequentialWrite"
argument_list|,
literal|"Run sequential write test"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|ScanTest
operator|.
name|class
argument_list|,
literal|"scan"
argument_list|,
literal|"Run scan test (read every row)"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|FilteredScanTest
operator|.
name|class
argument_list|,
literal|"filterScan"
argument_list|,
literal|"Run scan test using a filter to find a specific row based on it's value "
operator|+
literal|"(make sure to use --rows=20)"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|IncrementTest
operator|.
name|class
argument_list|,
literal|"increment"
argument_list|,
literal|"Increment on each row; clients overlap on keyspace so some concurrent operations"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|AppendTest
operator|.
name|class
argument_list|,
literal|"append"
argument_list|,
literal|"Append on each row; clients overlap on keyspace so some concurrent operations"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|CheckAndMutateTest
operator|.
name|class
argument_list|,
literal|"checkAndMutate"
argument_list|,
literal|"CheckAndMutate on each row; clients overlap on keyspace so some concurrent operations"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|CheckAndPutTest
operator|.
name|class
argument_list|,
literal|"checkAndPut"
argument_list|,
literal|"CheckAndPut on each row; clients overlap on keyspace so some concurrent operations"
argument_list|)
expr_stmt|;
name|addCommandDescriptor
argument_list|(
name|CheckAndDeleteTest
operator|.
name|class
argument_list|,
literal|"checkAndDelete"
argument_list|,
literal|"CheckAndDelete on each row; clients overlap on keyspace so some concurrent operations"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Enum for map metrics.  Keep it out here rather than inside in the Map    * inner-class so we can find associated properties.    */
specifier|protected
specifier|static
enum|enum
name|Counter
block|{
comment|/** elapsed time */
name|ELAPSED_TIME
block|,
comment|/** number of rows */
name|ROWS
block|}
specifier|protected
specifier|static
class|class
name|RunResult
implements|implements
name|Comparable
argument_list|<
name|RunResult
argument_list|>
block|{
specifier|public
name|RunResult
parameter_list|(
name|long
name|duration
parameter_list|,
name|Histogram
name|hist
parameter_list|)
block|{
name|this
operator|.
name|duration
operator|=
name|duration
expr_stmt|;
name|this
operator|.
name|hist
operator|=
name|hist
expr_stmt|;
block|}
specifier|public
specifier|final
name|long
name|duration
decl_stmt|;
specifier|public
specifier|final
name|Histogram
name|hist
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Long
operator|.
name|toString
argument_list|(
name|duration
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RunResult
name|o
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|this
operator|.
name|duration
argument_list|,
name|o
operator|.
name|duration
argument_list|)
return|;
block|}
block|}
comment|/**    * Constructor    * @param conf Configuration object    */
specifier|public
name|PerformanceEvaluation
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|addCommandDescriptor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|cmdClass
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|CmdDescriptor
name|cmdDescriptor
init|=
operator|new
name|CmdDescriptor
argument_list|(
name|cmdClass
argument_list|,
name|name
argument_list|,
name|description
argument_list|)
decl_stmt|;
name|COMMANDS
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|cmdDescriptor
argument_list|)
expr_stmt|;
block|}
comment|/**    * Implementations can have their status set.    */
interface|interface
name|Status
block|{
comment|/**      * Sets status      * @param msg status message      * @throws IOException      */
name|void
name|setStatus
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * MapReduce job that runs a performance evaluation client in each map task.    */
specifier|public
specifier|static
class|class
name|EvaluationMapTask
extends|extends
name|Mapper
argument_list|<
name|LongWritable
argument_list|,
name|Text
argument_list|,
name|LongWritable
argument_list|,
name|LongWritable
argument_list|>
block|{
comment|/** configuration parameter name that contains the command */
specifier|public
specifier|final
specifier|static
name|String
name|CMD_KEY
init|=
literal|"EvaluationMapTask.command"
decl_stmt|;
comment|/** configuration parameter name that contains the PE impl */
specifier|public
specifier|static
specifier|final
name|String
name|PE_KEY
init|=
literal|"EvaluationMapTask.performanceEvalImpl"
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|cmd
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setup
parameter_list|(
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|cmd
operator|=
name|forName
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|CMD_KEY
argument_list|)
argument_list|,
name|Test
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// this is required so that extensions of PE are instantiated within the
comment|// map reduce task...
name|Class
argument_list|<
name|?
extends|extends
name|PerformanceEvaluation
argument_list|>
name|peClass
init|=
name|forName
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|PE_KEY
argument_list|)
argument_list|,
name|PerformanceEvaluation
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|peClass
operator|.
name|getConstructor
argument_list|(
name|Configuration
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not instantiate PE instance"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
parameter_list|<
name|Type
parameter_list|>
name|Class
argument_list|<
name|?
extends|extends
name|Type
argument_list|>
name|forName
parameter_list|(
name|String
name|className
parameter_list|,
name|Class
argument_list|<
name|Type
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Could not find class for name: "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|map
parameter_list|(
name|LongWritable
name|key
parameter_list|,
name|Text
name|value
parameter_list|,
specifier|final
name|Context
name|context
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|Status
name|status
init|=
operator|new
name|Status
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|context
operator|.
name|setStatus
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ObjectMapper
name|mapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|TestOptions
name|opts
init|=
name|mapper
operator|.
name|readValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|,
name|TestOptions
operator|.
name|class
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|context
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Connection
name|con
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Evaluation task
name|RunResult
name|result
init|=
name|PerformanceEvaluation
operator|.
name|runOneClient
argument_list|(
name|this
operator|.
name|cmd
argument_list|,
name|conf
argument_list|,
name|con
argument_list|,
name|opts
argument_list|,
name|status
argument_list|)
decl_stmt|;
comment|// Collect how much time the thing took. Report as map output and
comment|// to the ELAPSED_TIME counter.
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|ELAPSED_TIME
argument_list|)
operator|.
name|increment
argument_list|(
name|result
operator|.
name|duration
argument_list|)
expr_stmt|;
name|context
operator|.
name|getCounter
argument_list|(
name|Counter
operator|.
name|ROWS
argument_list|)
operator|.
name|increment
argument_list|(
name|opts
operator|.
name|perClientRunRows
argument_list|)
expr_stmt|;
name|context
operator|.
name|write
argument_list|(
operator|new
name|LongWritable
argument_list|(
name|opts
operator|.
name|startRow
argument_list|)
argument_list|,
operator|new
name|LongWritable
argument_list|(
name|result
operator|.
name|duration
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|progress
argument_list|()
expr_stmt|;
block|}
block|}
comment|/*    * If table does not already exist, create. Also create a table when    * {@code opts.presplitRegions} is specified or when the existing table's    * region replica count doesn't match {@code opts.replicas}.    */
specifier|static
name|boolean
name|checkTable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TestOptions
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|opts
operator|.
name|tableName
argument_list|)
decl_stmt|;
name|boolean
name|needsDelete
init|=
literal|false
decl_stmt|,
name|exists
init|=
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|boolean
name|isReadCmd
init|=
name|opts
operator|.
name|cmdName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|contains
argument_list|(
literal|"read"
argument_list|)
operator|||
name|opts
operator|.
name|cmdName
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|contains
argument_list|(
literal|"scan"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exists
operator|&&
name|isReadCmd
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Must specify an existing table for read commands. Run a write command first."
argument_list|)
throw|;
block|}
name|HTableDescriptor
name|desc
init|=
name|exists
condition|?
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|opts
operator|.
name|tableName
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
name|getSplits
argument_list|(
name|opts
argument_list|)
decl_stmt|;
comment|// recreate the table when user has requested presplit or when existing
comment|// {RegionSplitPolicy,replica count} does not match requested.
if|if
condition|(
operator|(
name|exists
operator|&&
name|opts
operator|.
name|presplitRegions
operator|!=
name|DEFAULT_OPTS
operator|.
name|presplitRegions
operator|)
operator|||
operator|(
operator|!
name|isReadCmd
operator|&&
name|desc
operator|!=
literal|null
operator|&&
operator|!
name|StringUtils
operator|.
name|equals
argument_list|(
name|desc
operator|.
name|getRegionSplitPolicyClassName
argument_list|()
argument_list|,
name|opts
operator|.
name|splitPolicy
argument_list|)
operator|)
operator|||
operator|(
operator|!
name|isReadCmd
operator|&&
name|desc
operator|!=
literal|null
operator|&&
name|desc
operator|.
name|getRegionReplication
argument_list|()
operator|!=
name|opts
operator|.
name|replicas
operator|)
condition|)
block|{
name|needsDelete
operator|=
literal|true
expr_stmt|;
comment|// wait, why did it delete my table?!?
name|LOG
operator|.
name|debug
argument_list|(
name|MoreObjects
operator|.
name|toStringHelper
argument_list|(
literal|"needsDelete"
argument_list|)
operator|.
name|add
argument_list|(
literal|"needsDelete"
argument_list|,
name|needsDelete
argument_list|)
operator|.
name|add
argument_list|(
literal|"isReadCmd"
argument_list|,
name|isReadCmd
argument_list|)
operator|.
name|add
argument_list|(
literal|"exists"
argument_list|,
name|exists
argument_list|)
operator|.
name|add
argument_list|(
literal|"desc"
argument_list|,
name|desc
argument_list|)
operator|.
name|add
argument_list|(
literal|"presplit"
argument_list|,
name|opts
operator|.
name|presplitRegions
argument_list|)
operator|.
name|add
argument_list|(
literal|"splitPolicy"
argument_list|,
name|opts
operator|.
name|splitPolicy
argument_list|)
operator|.
name|add
argument_list|(
literal|"replicas"
argument_list|,
name|opts
operator|.
name|replicas
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// remove an existing table
if|if
condition|(
name|needsDelete
condition|)
block|{
if|if
condition|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
comment|// table creation is necessary
if|if
condition|(
operator|!
name|exists
operator|||
name|needsDelete
condition|)
block|{
name|desc
operator|=
name|getTableDescriptor
argument_list|(
name|opts
argument_list|)
expr_stmt|;
if|if
condition|(
name|splits
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|" split "
operator|+
name|i
operator|+
literal|": "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|splits
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|splits
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Table "
operator|+
name|desc
operator|+
literal|" created"
argument_list|)
expr_stmt|;
block|}
return|return
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
return|;
block|}
comment|/**    * Create an HTableDescriptor from provided TestOptions.    */
specifier|protected
specifier|static
name|HTableDescriptor
name|getTableDescriptor
parameter_list|(
name|TestOptions
name|opts
parameter_list|)
block|{
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|opts
operator|.
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|family
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY_NAME
argument_list|)
decl_stmt|;
name|family
operator|.
name|setDataBlockEncoding
argument_list|(
name|opts
operator|.
name|blockEncoding
argument_list|)
expr_stmt|;
name|family
operator|.
name|setCompressionType
argument_list|(
name|opts
operator|.
name|compression
argument_list|)
expr_stmt|;
name|family
operator|.
name|setBloomFilterType
argument_list|(
name|opts
operator|.
name|bloomType
argument_list|)
expr_stmt|;
name|family
operator|.
name|setBlocksize
argument_list|(
name|opts
operator|.
name|blockSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|.
name|inMemoryCF
condition|)
block|{
name|family
operator|.
name|setInMemory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|family
operator|.
name|setInMemoryCompaction
argument_list|(
name|opts
operator|.
name|inMemoryCompaction
argument_list|)
expr_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|.
name|replicas
operator|!=
name|DEFAULT_OPTS
operator|.
name|replicas
condition|)
block|{
name|desc
operator|.
name|setRegionReplication
argument_list|(
name|opts
operator|.
name|replicas
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|.
name|splitPolicy
operator|!=
name|DEFAULT_OPTS
operator|.
name|splitPolicy
condition|)
block|{
name|desc
operator|.
name|setRegionSplitPolicyClassName
argument_list|(
name|opts
operator|.
name|splitPolicy
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
comment|/**    * generates splits based on total number of rows and specified split regions    */
specifier|protected
specifier|static
name|byte
index|[]
index|[]
name|getSplits
parameter_list|(
name|TestOptions
name|opts
parameter_list|)
block|{
if|if
condition|(
name|opts
operator|.
name|presplitRegions
operator|==
name|DEFAULT_OPTS
operator|.
name|presplitRegions
condition|)
return|return
literal|null
return|;
name|int
name|numSplitPoints
init|=
name|opts
operator|.
name|presplitRegions
operator|-
literal|1
decl_stmt|;
name|byte
index|[]
index|[]
name|splits
init|=
operator|new
name|byte
index|[
name|numSplitPoints
index|]
index|[]
decl_stmt|;
name|int
name|jump
init|=
name|opts
operator|.
name|totalRows
operator|/
name|opts
operator|.
name|presplitRegions
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numSplitPoints
condition|;
name|i
operator|++
control|)
block|{
name|int
name|rowkey
init|=
name|jump
operator|*
operator|(
literal|1
operator|+
name|i
operator|)
decl_stmt|;
name|splits
index|[
name|i
index|]
operator|=
name|format
argument_list|(
name|rowkey
argument_list|)
expr_stmt|;
block|}
return|return
name|splits
return|;
block|}
comment|/*    * Run all clients in this vm each to its own thread.    */
specifier|static
name|RunResult
index|[]
name|doLocalClients
parameter_list|(
specifier|final
name|TestOptions
name|opts
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|cmd
init|=
name|determineCommandClass
argument_list|(
name|opts
operator|.
name|cmdName
argument_list|)
decl_stmt|;
assert|assert
name|cmd
operator|!=
literal|null
assert|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Future
argument_list|<
name|RunResult
argument_list|>
index|[]
name|threads
init|=
operator|new
name|Future
index|[
name|opts
operator|.
name|numClientThreads
index|]
decl_stmt|;
name|RunResult
index|[]
name|results
init|=
operator|new
name|RunResult
index|[
name|opts
operator|.
name|numClientThreads
index|]
decl_stmt|;
name|ExecutorService
name|pool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|opts
operator|.
name|numClientThreads
argument_list|,
operator|new
name|ThreadFactoryBuilder
argument_list|()
operator|.
name|setNameFormat
argument_list|(
literal|"TestClient-%s"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Connection
name|con
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
name|pool
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|RunResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RunResult
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|TestOptions
name|threadOpts
init|=
operator|new
name|TestOptions
argument_list|(
name|opts
argument_list|)
decl_stmt|;
if|if
condition|(
name|threadOpts
operator|.
name|startRow
operator|==
literal|0
condition|)
name|threadOpts
operator|.
name|startRow
operator|=
name|index
operator|*
name|threadOpts
operator|.
name|perClientRunRows
expr_stmt|;
name|RunResult
name|run
init|=
name|runOneClient
argument_list|(
name|cmd
argument_list|,
name|conf
argument_list|,
name|con
argument_list|,
name|threadOpts
argument_list|,
operator|new
name|Status
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setStatus
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Finished "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" in "
operator|+
name|run
operator|.
name|duration
operator|+
literal|"ms over "
operator|+
name|threadOpts
operator|.
name|perClientRunRows
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
return|return
name|run
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|pool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|results
index|[
name|i
index|]
operator|=
name|threads
index|[
name|i
index|]
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|final
name|String
name|test
init|=
name|cmd
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"["
operator|+
name|test
operator|+
literal|"] Summary of timings (ms): "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|results
argument_list|)
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|long
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RunResult
name|result
range|:
name|results
control|)
block|{
name|total
operator|+=
name|result
operator|.
name|duration
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"["
operator|+
name|test
operator|+
literal|"]"
operator|+
literal|"\tMin: "
operator|+
name|results
index|[
literal|0
index|]
operator|+
literal|"ms"
operator|+
literal|"\tMax: "
operator|+
name|results
index|[
name|results
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|"ms"
operator|+
literal|"\tAvg: "
operator|+
operator|(
name|total
operator|/
name|results
operator|.
name|length
operator|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
name|con
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|results
return|;
block|}
comment|/*    * Run a mapreduce job.  Run as many maps as asked-for clients.    * Before we start up the job, write out an input file with instruction    * per client regards which row they are to start on.    * @param cmd Command to run.    * @throws IOException    */
specifier|static
name|Job
name|doMapReduce
parameter_list|(
name|TestOptions
name|opts
parameter_list|,
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|cmd
init|=
name|determineCommandClass
argument_list|(
name|opts
operator|.
name|cmdName
argument_list|)
decl_stmt|;
assert|assert
name|cmd
operator|!=
literal|null
assert|;
name|Path
name|inputDir
init|=
name|writeInputFile
argument_list|(
name|conf
argument_list|,
name|opts
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|EvaluationMapTask
operator|.
name|CMD_KEY
argument_list|,
name|cmd
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|EvaluationMapTask
operator|.
name|PE_KEY
argument_list|,
name|PerformanceEvaluation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Job
name|job
init|=
name|Job
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|job
operator|.
name|setJarByClass
argument_list|(
name|PerformanceEvaluation
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setJobName
argument_list|(
literal|"HBase Performance Evaluation - "
operator|+
name|opts
operator|.
name|cmdName
argument_list|)
expr_stmt|;
name|job
operator|.
name|setInputFormatClass
argument_list|(
name|NLineInputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|NLineInputFormat
operator|.
name|setInputPaths
argument_list|(
name|job
argument_list|,
name|inputDir
argument_list|)
expr_stmt|;
comment|// this is default, but be explicit about it just in case.
name|NLineInputFormat
operator|.
name|setNumLinesPerSplit
argument_list|(
name|job
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputKeyClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputValueClass
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setMapperClass
argument_list|(
name|EvaluationMapTask
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setReducerClass
argument_list|(
name|LongSumReducer
operator|.
name|class
argument_list|)
expr_stmt|;
name|job
operator|.
name|setNumReduceTasks
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|job
operator|.
name|setOutputFormatClass
argument_list|(
name|TextOutputFormat
operator|.
name|class
argument_list|)
expr_stmt|;
name|TextOutputFormat
operator|.
name|setOutputPath
argument_list|(
name|job
argument_list|,
operator|new
name|Path
argument_list|(
name|inputDir
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"outputs"
argument_list|)
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJars
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|TableMapReduceUtil
operator|.
name|addDependencyJarsForClasses
argument_list|(
name|job
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|Histogram
operator|.
name|class
argument_list|,
comment|// yammer metrics
name|ObjectMapper
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// jackson-mapper-asl
name|TableMapReduceUtil
operator|.
name|initCredentials
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|job
operator|.
name|waitForCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|job
return|;
block|}
comment|/**    * Each client has one mapper to do the work,  and client do the resulting count in a map task.    */
specifier|static
name|String
name|JOB_INPUT_FILENAME
init|=
literal|"input.txt"
decl_stmt|;
comment|/*    * Write input file of offsets-per-client for the mapreduce job.    * @param c Configuration    * @return Directory that contains file written whose name is JOB_INPUT_FILENAME    * @throws IOException    */
specifier|static
name|Path
name|writeInputFile
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|TestOptions
name|opts
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeInputFile
argument_list|(
name|c
argument_list|,
name|opts
argument_list|,
operator|new
name|Path
argument_list|(
literal|"."
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|Path
name|writeInputFile
parameter_list|(
specifier|final
name|Configuration
name|c
parameter_list|,
specifier|final
name|TestOptions
name|opts
parameter_list|,
specifier|final
name|Path
name|basedir
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleDateFormat
name|formatter
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMddHHmmss"
argument_list|)
decl_stmt|;
name|Path
name|jobdir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|PERF_EVAL_DIR
argument_list|)
argument_list|,
name|formatter
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|inputDir
init|=
operator|new
name|Path
argument_list|(
name|jobdir
argument_list|,
literal|"inputs"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|inputDir
argument_list|)
expr_stmt|;
name|Path
name|inputFile
init|=
operator|new
name|Path
argument_list|(
name|inputDir
argument_list|,
name|JOB_INPUT_FILENAME
argument_list|)
decl_stmt|;
name|PrintStream
name|out
init|=
operator|new
name|PrintStream
argument_list|(
name|fs
operator|.
name|create
argument_list|(
name|inputFile
argument_list|)
argument_list|)
decl_stmt|;
comment|// Make input random.
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Hash
name|h
init|=
name|MurmurHash
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|int
name|perClientRows
init|=
operator|(
name|opts
operator|.
name|totalRows
operator|/
name|opts
operator|.
name|numClientThreads
operator|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|opts
operator|.
name|numClientThreads
condition|;
name|j
operator|++
control|)
block|{
name|TestOptions
name|next
init|=
operator|new
name|TestOptions
argument_list|(
name|opts
argument_list|)
decl_stmt|;
name|next
operator|.
name|startRow
operator|=
name|j
operator|*
name|perClientRows
expr_stmt|;
name|next
operator|.
name|perClientRunRows
operator|=
name|perClientRows
expr_stmt|;
name|String
name|s
init|=
name|MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|next
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Client="
operator|+
name|j
operator|+
literal|", input="
operator|+
name|s
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|hash
init|=
name|h
operator|.
name|hash
argument_list|(
operator|new
name|ByteArrayHashKey
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|hash
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|e
range|:
name|m
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|inputDir
return|;
block|}
comment|/**    * Describes a command.    */
specifier|static
class|class
name|CmdDescriptor
block|{
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|cmdClass
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|description
decl_stmt|;
name|CmdDescriptor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|cmdClass
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|cmdClass
operator|=
name|cmdClass
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|getCmdClass
parameter_list|()
block|{
return|return
name|cmdClass
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
block|}
comment|/**    * Wraps up options passed to {@link org.apache.hadoop.hbase.PerformanceEvaluation}.    * This makes tracking all these arguments a little easier.    * NOTE: ADDING AN OPTION, you need to add a data member, a getter/setter (to make JSON    * serialization of this TestOptions class behave), and you need to add to the clone constructor    * below copying your new option from the 'that' to the 'this'.  Look for 'clone' below.    */
specifier|static
class|class
name|TestOptions
block|{
name|String
name|cmdName
init|=
literal|null
decl_stmt|;
name|boolean
name|nomapred
init|=
literal|false
decl_stmt|;
name|boolean
name|filterAll
init|=
literal|false
decl_stmt|;
name|int
name|startRow
init|=
literal|0
decl_stmt|;
name|float
name|size
init|=
literal|1.0f
decl_stmt|;
name|int
name|perClientRunRows
init|=
name|DEFAULT_ROWS_PER_GB
decl_stmt|;
name|int
name|numClientThreads
init|=
literal|1
decl_stmt|;
name|int
name|totalRows
init|=
name|DEFAULT_ROWS_PER_GB
decl_stmt|;
name|int
name|measureAfter
init|=
literal|0
decl_stmt|;
name|float
name|sampleRate
init|=
literal|1.0f
decl_stmt|;
name|double
name|traceRate
init|=
literal|0.0
decl_stmt|;
name|String
name|tableName
init|=
name|TABLE_NAME
decl_stmt|;
name|boolean
name|flushCommits
init|=
literal|true
decl_stmt|;
name|boolean
name|writeToWAL
init|=
literal|true
decl_stmt|;
name|boolean
name|autoFlush
init|=
literal|false
decl_stmt|;
name|boolean
name|oneCon
init|=
literal|false
decl_stmt|;
name|boolean
name|useTags
init|=
literal|false
decl_stmt|;
name|int
name|noOfTags
init|=
literal|1
decl_stmt|;
name|boolean
name|reportLatency
init|=
literal|false
decl_stmt|;
name|int
name|multiGet
init|=
literal|0
decl_stmt|;
name|int
name|randomSleep
init|=
literal|0
decl_stmt|;
name|boolean
name|inMemoryCF
init|=
literal|false
decl_stmt|;
name|int
name|presplitRegions
init|=
literal|0
decl_stmt|;
name|int
name|replicas
init|=
name|HTableDescriptor
operator|.
name|DEFAULT_REGION_REPLICATION
decl_stmt|;
name|String
name|splitPolicy
init|=
literal|null
decl_stmt|;
name|Compression
operator|.
name|Algorithm
name|compression
init|=
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
decl_stmt|;
name|BloomType
name|bloomType
init|=
name|BloomType
operator|.
name|ROW
decl_stmt|;
name|int
name|blockSize
init|=
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
decl_stmt|;
name|DataBlockEncoding
name|blockEncoding
init|=
name|DataBlockEncoding
operator|.
name|NONE
decl_stmt|;
name|boolean
name|valueRandom
init|=
literal|false
decl_stmt|;
name|boolean
name|valueZipf
init|=
literal|false
decl_stmt|;
name|int
name|valueSize
init|=
name|DEFAULT_VALUE_LENGTH
decl_stmt|;
name|int
name|period
init|=
operator|(
name|this
operator|.
name|perClientRunRows
operator|/
literal|10
operator|)
operator|==
literal|0
condition|?
name|perClientRunRows
else|:
name|perClientRunRows
operator|/
literal|10
decl_stmt|;
name|int
name|cycles
init|=
literal|1
decl_stmt|;
name|int
name|columns
init|=
literal|1
decl_stmt|;
name|int
name|caching
init|=
literal|30
decl_stmt|;
name|boolean
name|addColumns
init|=
literal|true
decl_stmt|;
name|MemoryCompactionPolicy
name|inMemoryCompaction
init|=
name|MemoryCompactionPolicy
operator|.
name|valueOf
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_DEFAULT
argument_list|)
decl_stmt|;
name|boolean
name|asyncPrefetch
init|=
literal|false
decl_stmt|;
name|boolean
name|cacheBlocks
init|=
literal|true
decl_stmt|;
name|Scan
operator|.
name|ReadType
name|scanReadType
init|=
name|Scan
operator|.
name|ReadType
operator|.
name|DEFAULT
decl_stmt|;
specifier|public
name|TestOptions
parameter_list|()
block|{}
comment|/**      * Clone constructor.      * @param that Object to copy from.      */
specifier|public
name|TestOptions
parameter_list|(
name|TestOptions
name|that
parameter_list|)
block|{
name|this
operator|.
name|cmdName
operator|=
name|that
operator|.
name|cmdName
expr_stmt|;
name|this
operator|.
name|cycles
operator|=
name|that
operator|.
name|cycles
expr_stmt|;
name|this
operator|.
name|nomapred
operator|=
name|that
operator|.
name|nomapred
expr_stmt|;
name|this
operator|.
name|startRow
operator|=
name|that
operator|.
name|startRow
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|that
operator|.
name|size
expr_stmt|;
name|this
operator|.
name|perClientRunRows
operator|=
name|that
operator|.
name|perClientRunRows
expr_stmt|;
name|this
operator|.
name|numClientThreads
operator|=
name|that
operator|.
name|numClientThreads
expr_stmt|;
name|this
operator|.
name|totalRows
operator|=
name|that
operator|.
name|totalRows
expr_stmt|;
name|this
operator|.
name|sampleRate
operator|=
name|that
operator|.
name|sampleRate
expr_stmt|;
name|this
operator|.
name|traceRate
operator|=
name|that
operator|.
name|traceRate
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|that
operator|.
name|tableName
expr_stmt|;
name|this
operator|.
name|flushCommits
operator|=
name|that
operator|.
name|flushCommits
expr_stmt|;
name|this
operator|.
name|writeToWAL
operator|=
name|that
operator|.
name|writeToWAL
expr_stmt|;
name|this
operator|.
name|autoFlush
operator|=
name|that
operator|.
name|autoFlush
expr_stmt|;
name|this
operator|.
name|oneCon
operator|=
name|that
operator|.
name|oneCon
expr_stmt|;
name|this
operator|.
name|useTags
operator|=
name|that
operator|.
name|useTags
expr_stmt|;
name|this
operator|.
name|noOfTags
operator|=
name|that
operator|.
name|noOfTags
expr_stmt|;
name|this
operator|.
name|reportLatency
operator|=
name|that
operator|.
name|reportLatency
expr_stmt|;
name|this
operator|.
name|multiGet
operator|=
name|that
operator|.
name|multiGet
expr_stmt|;
name|this
operator|.
name|inMemoryCF
operator|=
name|that
operator|.
name|inMemoryCF
expr_stmt|;
name|this
operator|.
name|presplitRegions
operator|=
name|that
operator|.
name|presplitRegions
expr_stmt|;
name|this
operator|.
name|replicas
operator|=
name|that
operator|.
name|replicas
expr_stmt|;
name|this
operator|.
name|splitPolicy
operator|=
name|that
operator|.
name|splitPolicy
expr_stmt|;
name|this
operator|.
name|compression
operator|=
name|that
operator|.
name|compression
expr_stmt|;
name|this
operator|.
name|blockEncoding
operator|=
name|that
operator|.
name|blockEncoding
expr_stmt|;
name|this
operator|.
name|filterAll
operator|=
name|that
operator|.
name|filterAll
expr_stmt|;
name|this
operator|.
name|bloomType
operator|=
name|that
operator|.
name|bloomType
expr_stmt|;
name|this
operator|.
name|blockSize
operator|=
name|that
operator|.
name|blockSize
expr_stmt|;
name|this
operator|.
name|valueRandom
operator|=
name|that
operator|.
name|valueRandom
expr_stmt|;
name|this
operator|.
name|valueZipf
operator|=
name|that
operator|.
name|valueZipf
expr_stmt|;
name|this
operator|.
name|valueSize
operator|=
name|that
operator|.
name|valueSize
expr_stmt|;
name|this
operator|.
name|period
operator|=
name|that
operator|.
name|period
expr_stmt|;
name|this
operator|.
name|randomSleep
operator|=
name|that
operator|.
name|randomSleep
expr_stmt|;
name|this
operator|.
name|measureAfter
operator|=
name|that
operator|.
name|measureAfter
expr_stmt|;
name|this
operator|.
name|addColumns
operator|=
name|that
operator|.
name|addColumns
expr_stmt|;
name|this
operator|.
name|columns
operator|=
name|that
operator|.
name|columns
expr_stmt|;
name|this
operator|.
name|caching
operator|=
name|that
operator|.
name|caching
expr_stmt|;
name|this
operator|.
name|inMemoryCompaction
operator|=
name|that
operator|.
name|inMemoryCompaction
expr_stmt|;
name|this
operator|.
name|asyncPrefetch
operator|=
name|that
operator|.
name|asyncPrefetch
expr_stmt|;
name|this
operator|.
name|cacheBlocks
operator|=
name|that
operator|.
name|cacheBlocks
expr_stmt|;
name|this
operator|.
name|scanReadType
operator|=
name|that
operator|.
name|scanReadType
expr_stmt|;
block|}
specifier|public
name|int
name|getCaching
parameter_list|()
block|{
return|return
name|this
operator|.
name|caching
return|;
block|}
specifier|public
name|void
name|setCaching
parameter_list|(
specifier|final
name|int
name|caching
parameter_list|)
block|{
name|this
operator|.
name|caching
operator|=
name|caching
expr_stmt|;
block|}
specifier|public
name|int
name|getColumns
parameter_list|()
block|{
return|return
name|this
operator|.
name|columns
return|;
block|}
specifier|public
name|void
name|setColumns
parameter_list|(
specifier|final
name|int
name|columns
parameter_list|)
block|{
name|this
operator|.
name|columns
operator|=
name|columns
expr_stmt|;
block|}
specifier|public
name|int
name|getCycles
parameter_list|()
block|{
return|return
name|this
operator|.
name|cycles
return|;
block|}
specifier|public
name|void
name|setCycles
parameter_list|(
specifier|final
name|int
name|cycles
parameter_list|)
block|{
name|this
operator|.
name|cycles
operator|=
name|cycles
expr_stmt|;
block|}
specifier|public
name|boolean
name|isValueZipf
parameter_list|()
block|{
return|return
name|valueZipf
return|;
block|}
specifier|public
name|void
name|setValueZipf
parameter_list|(
name|boolean
name|valueZipf
parameter_list|)
block|{
name|this
operator|.
name|valueZipf
operator|=
name|valueZipf
expr_stmt|;
block|}
specifier|public
name|String
name|getCmdName
parameter_list|()
block|{
return|return
name|cmdName
return|;
block|}
specifier|public
name|void
name|setCmdName
parameter_list|(
name|String
name|cmdName
parameter_list|)
block|{
name|this
operator|.
name|cmdName
operator|=
name|cmdName
expr_stmt|;
block|}
specifier|public
name|int
name|getRandomSleep
parameter_list|()
block|{
return|return
name|randomSleep
return|;
block|}
specifier|public
name|void
name|setRandomSleep
parameter_list|(
name|int
name|randomSleep
parameter_list|)
block|{
name|this
operator|.
name|randomSleep
operator|=
name|randomSleep
expr_stmt|;
block|}
specifier|public
name|int
name|getReplicas
parameter_list|()
block|{
return|return
name|replicas
return|;
block|}
specifier|public
name|void
name|setReplicas
parameter_list|(
name|int
name|replicas
parameter_list|)
block|{
name|this
operator|.
name|replicas
operator|=
name|replicas
expr_stmt|;
block|}
specifier|public
name|String
name|getSplitPolicy
parameter_list|()
block|{
return|return
name|splitPolicy
return|;
block|}
specifier|public
name|void
name|setSplitPolicy
parameter_list|(
name|String
name|splitPolicy
parameter_list|)
block|{
name|this
operator|.
name|splitPolicy
operator|=
name|splitPolicy
expr_stmt|;
block|}
specifier|public
name|void
name|setNomapred
parameter_list|(
name|boolean
name|nomapred
parameter_list|)
block|{
name|this
operator|.
name|nomapred
operator|=
name|nomapred
expr_stmt|;
block|}
specifier|public
name|void
name|setFilterAll
parameter_list|(
name|boolean
name|filterAll
parameter_list|)
block|{
name|this
operator|.
name|filterAll
operator|=
name|filterAll
expr_stmt|;
block|}
specifier|public
name|void
name|setStartRow
parameter_list|(
name|int
name|startRow
parameter_list|)
block|{
name|this
operator|.
name|startRow
operator|=
name|startRow
expr_stmt|;
block|}
specifier|public
name|void
name|setSize
parameter_list|(
name|float
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
block|}
specifier|public
name|void
name|setPerClientRunRows
parameter_list|(
name|int
name|perClientRunRows
parameter_list|)
block|{
name|this
operator|.
name|perClientRunRows
operator|=
name|perClientRunRows
expr_stmt|;
block|}
specifier|public
name|void
name|setNumClientThreads
parameter_list|(
name|int
name|numClientThreads
parameter_list|)
block|{
name|this
operator|.
name|numClientThreads
operator|=
name|numClientThreads
expr_stmt|;
block|}
specifier|public
name|void
name|setTotalRows
parameter_list|(
name|int
name|totalRows
parameter_list|)
block|{
name|this
operator|.
name|totalRows
operator|=
name|totalRows
expr_stmt|;
block|}
specifier|public
name|void
name|setSampleRate
parameter_list|(
name|float
name|sampleRate
parameter_list|)
block|{
name|this
operator|.
name|sampleRate
operator|=
name|sampleRate
expr_stmt|;
block|}
specifier|public
name|void
name|setTraceRate
parameter_list|(
name|double
name|traceRate
parameter_list|)
block|{
name|this
operator|.
name|traceRate
operator|=
name|traceRate
expr_stmt|;
block|}
specifier|public
name|void
name|setTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|setFlushCommits
parameter_list|(
name|boolean
name|flushCommits
parameter_list|)
block|{
name|this
operator|.
name|flushCommits
operator|=
name|flushCommits
expr_stmt|;
block|}
specifier|public
name|void
name|setWriteToWAL
parameter_list|(
name|boolean
name|writeToWAL
parameter_list|)
block|{
name|this
operator|.
name|writeToWAL
operator|=
name|writeToWAL
expr_stmt|;
block|}
specifier|public
name|void
name|setAutoFlush
parameter_list|(
name|boolean
name|autoFlush
parameter_list|)
block|{
name|this
operator|.
name|autoFlush
operator|=
name|autoFlush
expr_stmt|;
block|}
specifier|public
name|void
name|setOneCon
parameter_list|(
name|boolean
name|oneCon
parameter_list|)
block|{
name|this
operator|.
name|oneCon
operator|=
name|oneCon
expr_stmt|;
block|}
specifier|public
name|void
name|setUseTags
parameter_list|(
name|boolean
name|useTags
parameter_list|)
block|{
name|this
operator|.
name|useTags
operator|=
name|useTags
expr_stmt|;
block|}
specifier|public
name|void
name|setNoOfTags
parameter_list|(
name|int
name|noOfTags
parameter_list|)
block|{
name|this
operator|.
name|noOfTags
operator|=
name|noOfTags
expr_stmt|;
block|}
specifier|public
name|void
name|setReportLatency
parameter_list|(
name|boolean
name|reportLatency
parameter_list|)
block|{
name|this
operator|.
name|reportLatency
operator|=
name|reportLatency
expr_stmt|;
block|}
specifier|public
name|void
name|setMultiGet
parameter_list|(
name|int
name|multiGet
parameter_list|)
block|{
name|this
operator|.
name|multiGet
operator|=
name|multiGet
expr_stmt|;
block|}
specifier|public
name|void
name|setInMemoryCF
parameter_list|(
name|boolean
name|inMemoryCF
parameter_list|)
block|{
name|this
operator|.
name|inMemoryCF
operator|=
name|inMemoryCF
expr_stmt|;
block|}
specifier|public
name|void
name|setPresplitRegions
parameter_list|(
name|int
name|presplitRegions
parameter_list|)
block|{
name|this
operator|.
name|presplitRegions
operator|=
name|presplitRegions
expr_stmt|;
block|}
specifier|public
name|void
name|setCompression
parameter_list|(
name|Compression
operator|.
name|Algorithm
name|compression
parameter_list|)
block|{
name|this
operator|.
name|compression
operator|=
name|compression
expr_stmt|;
block|}
specifier|public
name|void
name|setBloomType
parameter_list|(
name|BloomType
name|bloomType
parameter_list|)
block|{
name|this
operator|.
name|bloomType
operator|=
name|bloomType
expr_stmt|;
block|}
specifier|public
name|void
name|setBlockSize
parameter_list|(
name|int
name|blockSize
parameter_list|)
block|{
name|this
operator|.
name|blockSize
operator|=
name|blockSize
expr_stmt|;
block|}
specifier|public
name|void
name|setBlockEncoding
parameter_list|(
name|DataBlockEncoding
name|blockEncoding
parameter_list|)
block|{
name|this
operator|.
name|blockEncoding
operator|=
name|blockEncoding
expr_stmt|;
block|}
specifier|public
name|void
name|setValueRandom
parameter_list|(
name|boolean
name|valueRandom
parameter_list|)
block|{
name|this
operator|.
name|valueRandom
operator|=
name|valueRandom
expr_stmt|;
block|}
specifier|public
name|void
name|setValueSize
parameter_list|(
name|int
name|valueSize
parameter_list|)
block|{
name|this
operator|.
name|valueSize
operator|=
name|valueSize
expr_stmt|;
block|}
specifier|public
name|void
name|setPeriod
parameter_list|(
name|int
name|period
parameter_list|)
block|{
name|this
operator|.
name|period
operator|=
name|period
expr_stmt|;
block|}
specifier|public
name|boolean
name|isNomapred
parameter_list|()
block|{
return|return
name|nomapred
return|;
block|}
specifier|public
name|boolean
name|isFilterAll
parameter_list|()
block|{
return|return
name|filterAll
return|;
block|}
specifier|public
name|int
name|getStartRow
parameter_list|()
block|{
return|return
name|startRow
return|;
block|}
specifier|public
name|float
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|int
name|getPerClientRunRows
parameter_list|()
block|{
return|return
name|perClientRunRows
return|;
block|}
specifier|public
name|int
name|getNumClientThreads
parameter_list|()
block|{
return|return
name|numClientThreads
return|;
block|}
specifier|public
name|int
name|getTotalRows
parameter_list|()
block|{
return|return
name|totalRows
return|;
block|}
specifier|public
name|float
name|getSampleRate
parameter_list|()
block|{
return|return
name|sampleRate
return|;
block|}
specifier|public
name|double
name|getTraceRate
parameter_list|()
block|{
return|return
name|traceRate
return|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|tableName
return|;
block|}
specifier|public
name|boolean
name|isFlushCommits
parameter_list|()
block|{
return|return
name|flushCommits
return|;
block|}
specifier|public
name|boolean
name|isWriteToWAL
parameter_list|()
block|{
return|return
name|writeToWAL
return|;
block|}
specifier|public
name|boolean
name|isAutoFlush
parameter_list|()
block|{
return|return
name|autoFlush
return|;
block|}
specifier|public
name|boolean
name|isUseTags
parameter_list|()
block|{
return|return
name|useTags
return|;
block|}
specifier|public
name|int
name|getNoOfTags
parameter_list|()
block|{
return|return
name|noOfTags
return|;
block|}
specifier|public
name|boolean
name|isReportLatency
parameter_list|()
block|{
return|return
name|reportLatency
return|;
block|}
specifier|public
name|int
name|getMultiGet
parameter_list|()
block|{
return|return
name|multiGet
return|;
block|}
specifier|public
name|boolean
name|isInMemoryCF
parameter_list|()
block|{
return|return
name|inMemoryCF
return|;
block|}
specifier|public
name|int
name|getPresplitRegions
parameter_list|()
block|{
return|return
name|presplitRegions
return|;
block|}
specifier|public
name|Compression
operator|.
name|Algorithm
name|getCompression
parameter_list|()
block|{
return|return
name|compression
return|;
block|}
specifier|public
name|DataBlockEncoding
name|getBlockEncoding
parameter_list|()
block|{
return|return
name|blockEncoding
return|;
block|}
specifier|public
name|boolean
name|isValueRandom
parameter_list|()
block|{
return|return
name|valueRandom
return|;
block|}
specifier|public
name|int
name|getValueSize
parameter_list|()
block|{
return|return
name|valueSize
return|;
block|}
specifier|public
name|int
name|getPeriod
parameter_list|()
block|{
return|return
name|period
return|;
block|}
specifier|public
name|BloomType
name|getBloomType
parameter_list|()
block|{
return|return
name|bloomType
return|;
block|}
specifier|public
name|int
name|getBlockSize
parameter_list|()
block|{
return|return
name|blockSize
return|;
block|}
specifier|public
name|boolean
name|isOneCon
parameter_list|()
block|{
return|return
name|oneCon
return|;
block|}
specifier|public
name|int
name|getMeasureAfter
parameter_list|()
block|{
return|return
name|measureAfter
return|;
block|}
specifier|public
name|void
name|setMeasureAfter
parameter_list|(
name|int
name|measureAfter
parameter_list|)
block|{
name|this
operator|.
name|measureAfter
operator|=
name|measureAfter
expr_stmt|;
block|}
specifier|public
name|boolean
name|getAddColumns
parameter_list|()
block|{
return|return
name|addColumns
return|;
block|}
specifier|public
name|void
name|setAddColumns
parameter_list|(
name|boolean
name|addColumns
parameter_list|)
block|{
name|this
operator|.
name|addColumns
operator|=
name|addColumns
expr_stmt|;
block|}
specifier|public
name|void
name|setInMemoryCompaction
parameter_list|(
name|MemoryCompactionPolicy
name|inMemoryCompaction
parameter_list|)
block|{
name|this
operator|.
name|inMemoryCompaction
operator|=
name|inMemoryCompaction
expr_stmt|;
block|}
specifier|public
name|MemoryCompactionPolicy
name|getInMemoryCompaction
parameter_list|()
block|{
return|return
name|this
operator|.
name|inMemoryCompaction
return|;
block|}
block|}
comment|/*    * A test.    * Subclass to particularize what happens per row.    */
specifier|static
specifier|abstract
class|class
name|Test
block|{
comment|// Below is make it so when Tests are all running in the one
comment|// jvm, that they each have a differently seeded Random.
specifier|private
specifier|static
specifier|final
name|Random
name|randomSeed
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
name|nextRandomSeed
parameter_list|()
block|{
return|return
name|randomSeed
operator|.
name|nextLong
argument_list|()
return|;
block|}
specifier|private
specifier|final
name|int
name|everyN
decl_stmt|;
specifier|protected
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|nextRandomSeed
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|protected
specifier|final
name|TestOptions
name|opts
decl_stmt|;
specifier|private
specifier|final
name|Status
name|status
decl_stmt|;
specifier|private
specifier|final
name|Sampler
argument_list|<
name|?
argument_list|>
name|traceSampler
decl_stmt|;
specifier|private
specifier|final
name|SpanReceiverHost
name|receiverHost
decl_stmt|;
specifier|protected
name|Connection
name|connection
decl_stmt|;
comment|//    protected Table table;
specifier|private
name|String
name|testName
decl_stmt|;
specifier|private
name|Histogram
name|latencyHistogram
decl_stmt|;
specifier|private
name|Histogram
name|valueSizeHistogram
decl_stmt|;
specifier|private
name|RandomDistribution
operator|.
name|Zipf
name|zipf
decl_stmt|;
comment|/**      * Note that all subclasses of this class must provide a public constructor      * that has the exact same list of arguments.      */
name|Test
parameter_list|(
specifier|final
name|Connection
name|con
parameter_list|,
specifier|final
name|TestOptions
name|options
parameter_list|,
specifier|final
name|Status
name|status
parameter_list|)
block|{
name|this
operator|.
name|connection
operator|=
name|con
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|con
operator|==
literal|null
condition|?
name|HBaseConfiguration
operator|.
name|create
argument_list|()
else|:
name|this
operator|.
name|connection
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|receiverHost
operator|=
name|this
operator|.
name|conf
operator|==
literal|null
condition|?
literal|null
else|:
name|SpanReceiverHost
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|this
operator|.
name|opts
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|testName
operator|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|traceRate
operator|>=
literal|1.0
condition|)
block|{
name|this
operator|.
name|traceSampler
operator|=
name|Sampler
operator|.
name|ALWAYS
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|options
operator|.
name|traceRate
operator|>
literal|0.0
condition|)
block|{
name|conf
operator|.
name|setDouble
argument_list|(
literal|"hbase.sampler.fraction"
argument_list|,
name|options
operator|.
name|traceRate
argument_list|)
expr_stmt|;
name|this
operator|.
name|traceSampler
operator|=
operator|new
name|ProbabilitySampler
argument_list|(
operator|new
name|HBaseHTraceConfiguration
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|traceSampler
operator|=
name|Sampler
operator|.
name|NEVER
expr_stmt|;
block|}
name|everyN
operator|=
call|(
name|int
call|)
argument_list|(
name|opts
operator|.
name|totalRows
operator|/
operator|(
name|opts
operator|.
name|totalRows
operator|*
name|opts
operator|.
name|sampleRate
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|isValueZipf
argument_list|()
condition|)
block|{
name|this
operator|.
name|zipf
operator|=
operator|new
name|RandomDistribution
operator|.
name|Zipf
argument_list|(
name|this
operator|.
name|rand
argument_list|,
literal|1
argument_list|,
name|options
operator|.
name|getValueSize
argument_list|()
argument_list|,
literal|1.2
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Sampling 1 every "
operator|+
name|everyN
operator|+
literal|" out of "
operator|+
name|opts
operator|.
name|perClientRunRows
operator|+
literal|" total rows."
argument_list|)
expr_stmt|;
block|}
name|int
name|getValueLength
parameter_list|(
specifier|final
name|Random
name|r
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|opts
operator|.
name|isValueRandom
argument_list|()
condition|)
return|return
name|Math
operator|.
name|abs
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
operator|%
name|opts
operator|.
name|valueSize
argument_list|)
return|;
elseif|else
if|if
condition|(
name|this
operator|.
name|opts
operator|.
name|isValueZipf
argument_list|()
condition|)
return|return
name|Math
operator|.
name|abs
argument_list|(
name|this
operator|.
name|zipf
operator|.
name|nextInt
argument_list|()
argument_list|)
return|;
else|else
return|return
name|opts
operator|.
name|valueSize
return|;
block|}
name|void
name|updateValueSize
parameter_list|(
specifier|final
name|Result
index|[]
name|rs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rs
operator|==
literal|null
operator|||
operator|!
name|isRandomValueSize
argument_list|()
condition|)
return|return;
for|for
control|(
name|Result
name|r
range|:
name|rs
control|)
name|updateValueSize
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|void
name|updateValueSize
parameter_list|(
specifier|final
name|Result
name|r
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|r
operator|==
literal|null
condition|)
return|return;
name|int
name|size
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CellScanner
name|scanner
init|=
name|r
operator|.
name|cellScanner
argument_list|()
init|;
name|scanner
operator|.
name|advance
argument_list|()
condition|;
control|)
block|{
name|size
operator|+=
name|scanner
operator|.
name|current
argument_list|()
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
block|}
name|updateValueSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
name|void
name|updateValueSize
parameter_list|(
specifier|final
name|int
name|valueSize
parameter_list|)
block|{
name|this
operator|.
name|valueSizeHistogram
operator|.
name|update
argument_list|(
name|valueSize
argument_list|)
expr_stmt|;
block|}
name|String
name|generateStatus
parameter_list|(
specifier|final
name|int
name|sr
parameter_list|,
specifier|final
name|int
name|i
parameter_list|,
specifier|final
name|int
name|lr
parameter_list|)
block|{
return|return
name|sr
operator|+
literal|"/"
operator|+
name|i
operator|+
literal|"/"
operator|+
name|lr
operator|+
literal|", latency "
operator|+
name|getShortLatencyReport
argument_list|()
operator|+
operator|(
operator|!
name|isRandomValueSize
argument_list|()
condition|?
literal|""
else|:
literal|", value size "
operator|+
name|getShortValueSizeReport
argument_list|()
operator|)
return|;
block|}
name|boolean
name|isRandomValueSize
parameter_list|()
block|{
return|return
name|opts
operator|.
name|valueRandom
return|;
block|}
specifier|protected
name|int
name|getReportingPeriod
parameter_list|()
block|{
return|return
name|opts
operator|.
name|period
return|;
block|}
comment|/**      * Populated by testTakedown. Only implemented by RandomReadTest at the moment.      */
specifier|public
name|Histogram
name|getLatencyHistogram
parameter_list|()
block|{
return|return
name|latencyHistogram
return|;
block|}
name|void
name|testSetup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|opts
operator|.
name|oneCon
condition|)
block|{
name|this
operator|.
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|onStartup
argument_list|()
expr_stmt|;
name|latencyHistogram
operator|=
name|YammerHistogramUtils
operator|.
name|newHistogram
argument_list|(
operator|new
name|UniformReservoir
argument_list|(
literal|1024
operator|*
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|valueSizeHistogram
operator|=
name|YammerHistogramUtils
operator|.
name|newHistogram
argument_list|(
operator|new
name|UniformReservoir
argument_list|(
literal|1024
operator|*
literal|500
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|abstract
name|void
name|onStartup
parameter_list|()
throws|throws
name|IOException
function_decl|;
name|void
name|testTakedown
parameter_list|()
throws|throws
name|IOException
block|{
name|onTakedown
argument_list|()
expr_stmt|;
comment|// Print all stats for this thread continuously.
comment|// Synchronize on Test.class so different threads don't intermingle the
comment|// output. We can't use 'this' here because each thread has its own instance of Test class.
synchronized|synchronized
init|(
name|Test
operator|.
name|class
init|)
block|{
name|status
operator|.
name|setStatus
argument_list|(
literal|"Test : "
operator|+
name|testName
operator|+
literal|", Thread : "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Latency (us) : "
operator|+
name|YammerHistogramUtils
operator|.
name|getHistogramReport
argument_list|(
name|latencyHistogram
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Num measures (latency) : "
operator|+
name|latencyHistogram
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|YammerHistogramUtils
operator|.
name|getPrettyHistogramReport
argument_list|(
name|latencyHistogram
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"ValueSize (bytes) : "
operator|+
name|YammerHistogramUtils
operator|.
name|getHistogramReport
argument_list|(
name|valueSizeHistogram
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Num measures (ValueSize): "
operator|+
name|valueSizeHistogram
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|YammerHistogramUtils
operator|.
name|getPrettyHistogramReport
argument_list|(
name|valueSizeHistogram
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|opts
operator|.
name|oneCon
condition|)
block|{
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|receiverHost
operator|.
name|closeReceivers
argument_list|()
expr_stmt|;
block|}
specifier|abstract
name|void
name|onTakedown
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/*      * Run test      * @return Elapsed time.      * @throws IOException      */
name|long
name|test
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testSetup
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Timed test starting in thread "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|testTimed
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|testTakedown
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000000
return|;
block|}
name|int
name|getStartRow
parameter_list|()
block|{
return|return
name|opts
operator|.
name|startRow
return|;
block|}
name|int
name|getLastRow
parameter_list|()
block|{
return|return
name|getStartRow
argument_list|()
operator|+
name|opts
operator|.
name|perClientRunRows
return|;
block|}
comment|/**      * Provides an extension point for tests that don't want a per row invocation.      */
name|void
name|testTimed
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|startRow
init|=
name|getStartRow
argument_list|()
decl_stmt|;
name|int
name|lastRow
init|=
name|getLastRow
argument_list|()
decl_stmt|;
comment|// Report on completion of 1/10th of total.
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|opts
operator|.
name|cycles
condition|;
name|ii
operator|++
control|)
block|{
if|if
condition|(
name|opts
operator|.
name|cycles
operator|>
literal|1
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"Cycle="
operator|+
name|ii
operator|+
literal|" of "
operator|+
name|opts
operator|.
name|cycles
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startRow
init|;
name|i
operator|<
name|lastRow
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
name|everyN
operator|!=
literal|0
condition|)
continue|continue;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|TraceScope
name|scope
init|=
name|Trace
operator|.
name|startSpan
argument_list|(
literal|"test row"
argument_list|,
name|traceSampler
argument_list|)
decl_stmt|;
try|try
block|{
name|testRow
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scope
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|i
operator|-
name|startRow
operator|)
operator|>
name|opts
operator|.
name|measureAfter
condition|)
block|{
comment|// If multiget is enabled, say set to 10, testRow() returns immediately first 9 times
comment|// and sends the actual get request in the 10th iteration. We should only set latency
comment|// when actual request is sent because otherwise it turns out to be 0.
if|if
condition|(
name|opts
operator|.
name|multiGet
operator|==
literal|0
operator|||
operator|(
name|i
operator|-
name|startRow
operator|+
literal|1
operator|)
operator|%
name|opts
operator|.
name|multiGet
operator|==
literal|0
condition|)
block|{
name|latencyHistogram
operator|.
name|update
argument_list|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
name|i
operator|>
literal|0
operator|&&
operator|(
name|i
operator|%
name|getReportingPeriod
argument_list|()
operator|)
operator|==
literal|0
condition|)
block|{
name|status
operator|.
name|setStatus
argument_list|(
name|generateStatus
argument_list|(
name|startRow
argument_list|,
name|i
argument_list|,
name|lastRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * @return Subset of the histograms' calculation.      */
specifier|public
name|String
name|getShortLatencyReport
parameter_list|()
block|{
return|return
name|YammerHistogramUtils
operator|.
name|getShortHistogramReport
argument_list|(
name|this
operator|.
name|latencyHistogram
argument_list|)
return|;
block|}
comment|/**      * @return Subset of the histograms' calculation.      */
specifier|public
name|String
name|getShortValueSizeReport
parameter_list|()
block|{
return|return
name|YammerHistogramUtils
operator|.
name|getShortHistogramReport
argument_list|(
name|this
operator|.
name|valueSizeHistogram
argument_list|)
return|;
block|}
comment|/*     * Test for individual row.     * @param i Row index.     */
specifier|abstract
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
function_decl|;
block|}
specifier|static
specifier|abstract
class|class
name|TableTest
extends|extends
name|Test
block|{
specifier|protected
name|Table
name|table
decl_stmt|;
name|TableTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onStartup
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|opts
operator|.
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onTakedown
parameter_list|()
throws|throws
name|IOException
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
specifier|abstract
class|class
name|BufferedMutatorTest
extends|extends
name|Test
block|{
specifier|protected
name|BufferedMutator
name|mutator
decl_stmt|;
name|BufferedMutatorTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onStartup
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|mutator
operator|=
name|connection
operator|.
name|getBufferedMutator
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|opts
operator|.
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|onTakedown
parameter_list|()
throws|throws
name|IOException
block|{
name|mutator
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|RandomSeekScanTest
extends|extends
name|TableTest
block|{
name|RandomSeekScanTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|getRandomRow
argument_list|(
name|this
operator|.
name|rand
argument_list|,
name|opts
operator|.
name|totalRows
argument_list|)
argument_list|)
operator|.
name|setCaching
argument_list|(
name|opts
operator|.
name|caching
argument_list|)
operator|.
name|setCacheBlocks
argument_list|(
name|opts
operator|.
name|cacheBlocks
argument_list|)
operator|.
name|setAsyncPrefetch
argument_list|(
name|opts
operator|.
name|asyncPrefetch
argument_list|)
operator|.
name|setReadType
argument_list|(
name|opts
operator|.
name|scanReadType
argument_list|)
decl_stmt|;
name|FilterList
name|list
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|addColumns
condition|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY_NAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|.
name|filterAll
condition|)
block|{
name|list
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterAllFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|addFilter
argument_list|(
operator|new
name|WhileMatchFilter
argument_list|(
operator|new
name|PageFilter
argument_list|(
literal|120
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|ResultScanner
name|s
init|=
name|this
operator|.
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|rr
init|;
operator|(
name|rr
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|updateValueSize
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getReportingPeriod
parameter_list|()
block|{
name|int
name|period
init|=
name|opts
operator|.
name|perClientRunRows
operator|/
literal|100
decl_stmt|;
return|return
name|period
operator|==
literal|0
condition|?
name|opts
operator|.
name|perClientRunRows
else|:
name|period
return|;
block|}
block|}
specifier|static
specifier|abstract
class|class
name|RandomScanWithRangeTest
extends|extends
name|TableTest
block|{
name|RandomScanWithRangeTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|startAndStopRow
init|=
name|getStartAndStopRow
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|startAndStopRow
operator|.
name|getFirst
argument_list|()
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|startAndStopRow
operator|.
name|getSecond
argument_list|()
argument_list|)
operator|.
name|setCaching
argument_list|(
name|opts
operator|.
name|caching
argument_list|)
operator|.
name|setCacheBlocks
argument_list|(
name|opts
operator|.
name|cacheBlocks
argument_list|)
operator|.
name|setAsyncPrefetch
argument_list|(
name|opts
operator|.
name|asyncPrefetch
argument_list|)
operator|.
name|setReadType
argument_list|(
name|opts
operator|.
name|scanReadType
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|filterAll
condition|)
block|{
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterAllFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|.
name|addColumns
condition|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY_NAME
argument_list|)
expr_stmt|;
block|}
name|Result
name|r
init|=
literal|null
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|ResultScanner
name|s
init|=
name|this
operator|.
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
init|;
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|updateValueSize
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Scan for key range %s - %s returned %s rows"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|startAndStopRow
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|startAndStopRow
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|,
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getStartAndStopRow
parameter_list|()
function_decl|;
specifier|protected
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|generateStartAndStopRows
parameter_list|(
name|int
name|maxRange
parameter_list|)
block|{
name|int
name|start
init|=
name|this
operator|.
name|rand
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|%
name|opts
operator|.
name|totalRows
decl_stmt|;
name|int
name|stop
init|=
name|start
operator|+
name|maxRange
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|format
argument_list|(
name|start
argument_list|)
argument_list|,
name|format
argument_list|(
name|stop
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getReportingPeriod
parameter_list|()
block|{
name|int
name|period
init|=
name|opts
operator|.
name|perClientRunRows
operator|/
literal|100
decl_stmt|;
return|return
name|period
operator|==
literal|0
condition|?
name|opts
operator|.
name|perClientRunRows
else|:
name|period
return|;
block|}
block|}
specifier|static
class|class
name|RandomScanWithRange10Test
extends|extends
name|RandomScanWithRangeTest
block|{
name|RandomScanWithRange10Test
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getStartAndStopRow
parameter_list|()
block|{
return|return
name|generateStartAndStopRows
argument_list|(
literal|10
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|RandomScanWithRange100Test
extends|extends
name|RandomScanWithRangeTest
block|{
name|RandomScanWithRange100Test
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getStartAndStopRow
parameter_list|()
block|{
return|return
name|generateStartAndStopRows
argument_list|(
literal|100
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|RandomScanWithRange1000Test
extends|extends
name|RandomScanWithRangeTest
block|{
name|RandomScanWithRange1000Test
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getStartAndStopRow
parameter_list|()
block|{
return|return
name|generateStartAndStopRows
argument_list|(
literal|1000
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|RandomScanWithRange10000Test
extends|extends
name|RandomScanWithRangeTest
block|{
name|RandomScanWithRange10000Test
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|getStartAndStopRow
parameter_list|()
block|{
return|return
name|generateStartAndStopRows
argument_list|(
literal|10000
argument_list|)
return|;
block|}
block|}
specifier|static
class|class
name|RandomReadTest
extends|extends
name|TableTest
block|{
specifier|private
specifier|final
name|Consistency
name|consistency
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Get
argument_list|>
name|gets
decl_stmt|;
specifier|private
name|Random
name|rd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|RandomReadTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|consistency
operator|=
name|options
operator|.
name|replicas
operator|==
name|DEFAULT_OPTS
operator|.
name|replicas
condition|?
literal|null
else|:
name|Consistency
operator|.
name|TIMELINE
expr_stmt|;
if|if
condition|(
name|opts
operator|.
name|multiGet
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MultiGet enabled. Sending GETs in batches of "
operator|+
name|opts
operator|.
name|multiGet
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|this
operator|.
name|gets
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|opts
operator|.
name|multiGet
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|opts
operator|.
name|randomSleep
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|rd
operator|.
name|nextInt
argument_list|(
name|opts
operator|.
name|randomSleep
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|getRandomRow
argument_list|(
name|this
operator|.
name|rand
argument_list|,
name|opts
operator|.
name|totalRows
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|addColumns
condition|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY_NAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|.
name|filterAll
condition|)
block|{
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterAllFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|get
operator|.
name|setConsistency
argument_list|(
name|consistency
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
name|get
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|.
name|multiGet
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|gets
operator|.
name|add
argument_list|(
name|get
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|gets
operator|.
name|size
argument_list|()
operator|==
name|opts
operator|.
name|multiGet
condition|)
block|{
name|Result
index|[]
name|rs
init|=
name|this
operator|.
name|table
operator|.
name|get
argument_list|(
name|this
operator|.
name|gets
argument_list|)
decl_stmt|;
name|updateValueSize
argument_list|(
name|rs
argument_list|)
expr_stmt|;
name|this
operator|.
name|gets
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|updateValueSize
argument_list|(
name|this
operator|.
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getReportingPeriod
parameter_list|()
block|{
name|int
name|period
init|=
name|opts
operator|.
name|perClientRunRows
operator|/
literal|10
decl_stmt|;
return|return
name|period
operator|==
literal|0
condition|?
name|opts
operator|.
name|perClientRunRows
else|:
name|period
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|testTakedown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|gets
operator|!=
literal|null
operator|&&
name|this
operator|.
name|gets
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|table
operator|.
name|get
argument_list|(
name|gets
argument_list|)
expr_stmt|;
name|this
operator|.
name|gets
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|testTakedown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|RandomWriteTest
extends|extends
name|BufferedMutatorTest
block|{
name|RandomWriteTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|getRandomRow
argument_list|(
name|this
operator|.
name|rand
argument_list|,
name|opts
operator|.
name|totalRows
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|opts
operator|.
name|columns
condition|;
name|column
operator|++
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|column
operator|==
literal|0
condition|?
name|COLUMN_ZERO
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|column
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|generateData
argument_list|(
name|this
operator|.
name|rand
argument_list|,
name|getValueLength
argument_list|(
name|this
operator|.
name|rand
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|useTags
condition|)
block|{
name|byte
index|[]
name|tag
init|=
name|generateData
argument_list|(
name|this
operator|.
name|rand
argument_list|,
name|TAG_LENGTH
argument_list|)
decl_stmt|;
name|Tag
index|[]
name|tags
init|=
operator|new
name|Tag
index|[
name|opts
operator|.
name|noOfTags
index|]
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|opts
operator|.
name|noOfTags
condition|;
name|n
operator|++
control|)
block|{
name|Tag
name|t
init|=
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
name|n
argument_list|,
name|tag
argument_list|)
decl_stmt|;
name|tags
index|[
name|n
index|]
operator|=
name|t
expr_stmt|;
block|}
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|FAMILY_NAME
argument_list|,
name|qualifier
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|updateValueSize
argument_list|(
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|updateValueSize
argument_list|(
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|put
operator|.
name|setDurability
argument_list|(
name|opts
operator|.
name|writeToWAL
condition|?
name|Durability
operator|.
name|SYNC_WAL
else|:
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|mutator
operator|.
name|mutate
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|ScanTest
extends|extends
name|TableTest
block|{
specifier|private
name|ResultScanner
name|testScanner
decl_stmt|;
name|ScanTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testTakedown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|testScanner
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|testScanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|testTakedown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|testScanner
operator|==
literal|null
condition|)
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|format
argument_list|(
name|opts
operator|.
name|startRow
argument_list|)
argument_list|)
operator|.
name|setCaching
argument_list|(
name|opts
operator|.
name|caching
argument_list|)
operator|.
name|setCacheBlocks
argument_list|(
name|opts
operator|.
name|cacheBlocks
argument_list|)
operator|.
name|setAsyncPrefetch
argument_list|(
name|opts
operator|.
name|asyncPrefetch
argument_list|)
operator|.
name|setReadType
argument_list|(
name|opts
operator|.
name|scanReadType
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|addColumns
condition|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY_NAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|.
name|filterAll
condition|)
block|{
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterAllFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|testScanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
block|}
name|Result
name|r
init|=
name|testScanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|updateValueSize
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Base class for operations that are CAS-like; that read a value and then set it based off what    * they read. In this category is increment, append, checkAndPut, etc.    *    *<p>These operations also want some concurrency going on. Usually when these tests run, they    * operate in their own part of the key range. In CASTest, we will have them all overlap on the    * same key space. We do this with our getStartRow and getLastRow overrides.    */
specifier|static
specifier|abstract
class|class
name|CASTableTest
extends|extends
name|TableTest
block|{
specifier|private
specifier|final
name|byte
index|[]
name|qualifier
decl_stmt|;
name|CASTableTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|qualifier
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|getQualifier
parameter_list|()
block|{
return|return
name|this
operator|.
name|qualifier
return|;
block|}
annotation|@
name|Override
name|int
name|getStartRow
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
name|int
name|getLastRow
parameter_list|()
block|{
return|return
name|opts
operator|.
name|perClientRunRows
return|;
block|}
block|}
specifier|static
class|class
name|IncrementTest
extends|extends
name|CASTableTest
block|{
name|IncrementTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|Increment
name|increment
init|=
operator|new
name|Increment
argument_list|(
name|format
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|increment
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|getQualifier
argument_list|()
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|updateValueSize
argument_list|(
name|this
operator|.
name|table
operator|.
name|increment
argument_list|(
name|increment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|AppendTest
extends|extends
name|CASTableTest
block|{
name|AppendTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|format
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|append
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|getQualifier
argument_list|()
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|updateValueSize
argument_list|(
name|this
operator|.
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CheckAndMutateTest
extends|extends
name|CASTableTest
block|{
name|CheckAndMutateTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|format
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Put a known value so when we go to check it, it is there.
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|getQualifier
argument_list|()
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|RowMutations
name|mutations
init|=
operator|new
name|RowMutations
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|mutations
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|.
name|checkAndMutate
argument_list|(
name|bytes
argument_list|,
name|FAMILY_NAME
argument_list|,
name|getQualifier
argument_list|()
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|bytes
argument_list|,
name|mutations
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CheckAndPutTest
extends|extends
name|CASTableTest
block|{
name|CheckAndPutTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|format
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Put a known value so when we go to check it, it is there.
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|getQualifier
argument_list|()
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|.
name|checkAndPut
argument_list|(
name|bytes
argument_list|,
name|FAMILY_NAME
argument_list|,
name|getQualifier
argument_list|()
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|bytes
argument_list|,
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CheckAndDeleteTest
extends|extends
name|CASTableTest
block|{
name|CheckAndDeleteTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|format
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Put a known value so when we go to check it, it is there.
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|getQualifier
argument_list|()
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|getQualifier
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|.
name|checkAndDelete
argument_list|(
name|bytes
argument_list|,
name|FAMILY_NAME
argument_list|,
name|getQualifier
argument_list|()
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|bytes
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|SequentialReadTest
extends|extends
name|TableTest
block|{
name|SequentialReadTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|format
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|addColumns
condition|)
block|{
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|.
name|filterAll
condition|)
block|{
name|get
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterAllFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateValueSize
argument_list|(
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|SequentialWriteTest
extends|extends
name|BufferedMutatorTest
block|{
name|SequentialWriteTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|format
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|opts
operator|.
name|columns
condition|;
name|column
operator|++
control|)
block|{
name|byte
index|[]
name|qualifier
init|=
name|column
operator|==
literal|0
condition|?
name|COLUMN_ZERO
else|:
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
operator|+
name|column
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|generateData
argument_list|(
name|this
operator|.
name|rand
argument_list|,
name|getValueLength
argument_list|(
name|this
operator|.
name|rand
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|useTags
condition|)
block|{
name|byte
index|[]
name|tag
init|=
name|generateData
argument_list|(
name|this
operator|.
name|rand
argument_list|,
name|TAG_LENGTH
argument_list|)
decl_stmt|;
name|Tag
index|[]
name|tags
init|=
operator|new
name|Tag
index|[
name|opts
operator|.
name|noOfTags
index|]
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|opts
operator|.
name|noOfTags
condition|;
name|n
operator|++
control|)
block|{
name|Tag
name|t
init|=
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
name|n
argument_list|,
name|tag
argument_list|)
decl_stmt|;
name|tags
index|[
name|n
index|]
operator|=
name|t
expr_stmt|;
block|}
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|FAMILY_NAME
argument_list|,
name|qualifier
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|value
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|updateValueSize
argument_list|(
name|kv
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|updateValueSize
argument_list|(
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|put
operator|.
name|setDurability
argument_list|(
name|opts
operator|.
name|writeToWAL
condition|?
name|Durability
operator|.
name|SYNC_WAL
else|:
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|mutator
operator|.
name|mutate
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|FilteredScanTest
extends|extends
name|TableTest
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|FilteredScanTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FilteredScanTest
parameter_list|(
name|Connection
name|con
parameter_list|,
name|TestOptions
name|options
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
name|super
argument_list|(
name|con
argument_list|,
name|options
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|testRow
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|value
init|=
name|generateData
argument_list|(
name|this
operator|.
name|rand
argument_list|,
name|getValueLength
argument_list|(
name|this
operator|.
name|rand
argument_list|)
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
name|constructScan
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|scanner
operator|=
name|this
operator|.
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|r
init|=
literal|null
init|;
operator|(
name|r
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|updateValueSize
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|scanner
operator|!=
literal|null
condition|)
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Scan
name|constructScan
parameter_list|(
name|byte
index|[]
name|valuePrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|FilterList
name|list
init|=
operator|new
name|FilterList
argument_list|()
decl_stmt|;
name|Filter
name|filter
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILY_NAME
argument_list|,
name|COLUMN_ZERO
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|valuePrefix
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|addFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|.
name|filterAll
condition|)
block|{
name|list
operator|.
name|addFilter
argument_list|(
operator|new
name|FilterAllFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|setCaching
argument_list|(
name|opts
operator|.
name|caching
argument_list|)
operator|.
name|setCacheBlocks
argument_list|(
name|opts
operator|.
name|cacheBlocks
argument_list|)
operator|.
name|setAsyncPrefetch
argument_list|(
name|opts
operator|.
name|asyncPrefetch
argument_list|)
operator|.
name|setReadType
argument_list|(
name|opts
operator|.
name|scanReadType
argument_list|)
decl_stmt|;
if|if
condition|(
name|opts
operator|.
name|addColumns
condition|)
block|{
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY_NAME
argument_list|,
name|QUALIFIER_NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY_NAME
argument_list|)
expr_stmt|;
block|}
name|scan
operator|.
name|setFilter
argument_list|(
name|list
argument_list|)
expr_stmt|;
return|return
name|scan
return|;
block|}
block|}
comment|/**    * Compute a throughput rate in MB/s.    * @param rows Number of records consumed.    * @param timeMs Time taken in milliseconds.    * @return String value with label, ie '123.76 MB/s'    */
specifier|private
specifier|static
name|String
name|calculateMbps
parameter_list|(
name|int
name|rows
parameter_list|,
name|long
name|timeMs
parameter_list|,
specifier|final
name|int
name|valueSize
parameter_list|,
name|int
name|columns
parameter_list|)
block|{
name|BigDecimal
name|rowSize
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|ROW_LENGTH
operator|+
operator|(
operator|(
name|valueSize
operator|+
name|FAMILY_NAME
operator|.
name|length
operator|+
name|COLUMN_ZERO
operator|.
name|length
operator|)
operator|*
name|columns
operator|)
argument_list|)
decl_stmt|;
name|BigDecimal
name|mbps
init|=
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|rows
argument_list|)
operator|.
name|multiply
argument_list|(
name|rowSize
argument_list|,
name|CXT
argument_list|)
operator|.
name|divide
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
name|timeMs
argument_list|)
argument_list|,
name|CXT
argument_list|)
operator|.
name|multiply
argument_list|(
name|MS_PER_SEC
argument_list|,
name|CXT
argument_list|)
operator|.
name|divide
argument_list|(
name|BYTES_PER_MB
argument_list|,
name|CXT
argument_list|)
decl_stmt|;
return|return
name|FMT
operator|.
name|format
argument_list|(
name|mbps
argument_list|)
operator|+
literal|" MB/s"
return|;
block|}
comment|/*    * Format passed integer.    * @param number    * @return Returns zero-prefixed ROW_LENGTH-byte wide decimal version of passed    * number (Does absolute in case number is negative).    */
specifier|public
specifier|static
name|byte
index|[]
name|format
parameter_list|(
specifier|final
name|int
name|number
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|ROW_LENGTH
index|]
decl_stmt|;
name|int
name|d
init|=
name|Math
operator|.
name|abs
argument_list|(
name|number
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|b
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|d
operator|%
literal|10
operator|)
operator|+
literal|'0'
argument_list|)
expr_stmt|;
name|d
operator|/=
literal|10
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
comment|/*    * This method takes some time and is done inline uploading data.  For    * example, doing the mapfile test, generation of the key and value    * consumes about 30% of CPU time.    * @return Generated random value to insert into a table cell.    */
specifier|public
specifier|static
name|byte
index|[]
name|generateData
parameter_list|(
specifier|final
name|Random
name|r
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
operator|(
name|length
operator|-
literal|8
operator|)
condition|;
name|i
operator|+=
literal|8
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|65
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|2
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|3
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|4
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|5
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|6
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
name|b
index|[
name|i
operator|+
literal|7
index|]
operator|=
name|b
index|[
name|i
index|]
expr_stmt|;
block|}
name|byte
name|a
init|=
call|(
name|byte
call|)
argument_list|(
literal|65
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|26
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|b
index|[
name|i
index|]
operator|=
name|a
expr_stmt|;
block|}
return|return
name|b
return|;
block|}
specifier|static
name|byte
index|[]
name|getRandomRow
parameter_list|(
specifier|final
name|Random
name|random
parameter_list|,
specifier|final
name|int
name|totalRows
parameter_list|)
block|{
return|return
name|format
argument_list|(
name|generateRandomRow
argument_list|(
name|random
argument_list|,
name|totalRows
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|int
name|generateRandomRow
parameter_list|(
specifier|final
name|Random
name|random
parameter_list|,
specifier|final
name|int
name|totalRows
parameter_list|)
block|{
return|return
name|random
operator|.
name|nextInt
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
operator|%
name|totalRows
return|;
block|}
specifier|static
name|RunResult
name|runOneClient
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|cmd
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Connection
name|con
parameter_list|,
name|TestOptions
name|opts
parameter_list|,
specifier|final
name|Status
name|status
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|status
operator|.
name|setStatus
argument_list|(
literal|"Start "
operator|+
name|cmd
operator|+
literal|" at offset "
operator|+
name|opts
operator|.
name|startRow
operator|+
literal|" for "
operator|+
name|opts
operator|.
name|perClientRunRows
operator|+
literal|" rows"
argument_list|)
expr_stmt|;
name|long
name|totalElapsedTime
decl_stmt|;
specifier|final
name|Test
name|t
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|constructor
init|=
name|cmd
operator|.
name|getDeclaredConstructor
argument_list|(
name|Connection
operator|.
name|class
argument_list|,
name|TestOptions
operator|.
name|class
argument_list|,
name|Status
operator|.
name|class
argument_list|)
decl_stmt|;
name|t
operator|=
name|constructor
operator|.
name|newInstance
argument_list|(
name|con
argument_list|,
name|opts
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid command class: "
operator|+
name|cmd
operator|.
name|getName
argument_list|()
operator|+
literal|".  It does not provide a constructor as described by "
operator|+
literal|"the javadoc comment.  Available constructors are: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|cmd
operator|.
name|getConstructors
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to construct command class"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|totalElapsedTime
operator|=
name|t
operator|.
name|test
argument_list|()
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|"Finished "
operator|+
name|cmd
operator|+
literal|" in "
operator|+
name|totalElapsedTime
operator|+
literal|"ms at offset "
operator|+
name|opts
operator|.
name|startRow
operator|+
literal|" for "
operator|+
name|opts
operator|.
name|perClientRunRows
operator|+
literal|" rows"
operator|+
literal|" ("
operator|+
name|calculateMbps
argument_list|(
call|(
name|int
call|)
argument_list|(
name|opts
operator|.
name|perClientRunRows
operator|*
name|opts
operator|.
name|sampleRate
argument_list|)
argument_list|,
name|totalElapsedTime
argument_list|,
name|getAverageValueLength
argument_list|(
name|opts
argument_list|)
argument_list|,
name|opts
operator|.
name|columns
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
operator|new
name|RunResult
argument_list|(
name|totalElapsedTime
argument_list|,
name|t
operator|.
name|getLatencyHistogram
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getAverageValueLength
parameter_list|(
specifier|final
name|TestOptions
name|opts
parameter_list|)
block|{
return|return
name|opts
operator|.
name|valueRandom
condition|?
name|opts
operator|.
name|valueSize
operator|/
literal|2
else|:
name|opts
operator|.
name|valueSize
return|;
block|}
specifier|private
name|void
name|runTest
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|cmd
parameter_list|,
name|TestOptions
name|opts
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ClassNotFoundException
block|{
comment|// Log the configuration we're going to run with. Uses JSON mapper because lazy. It'll do
comment|// the TestOptions introspection for us and dump the output in a readable format.
name|LOG
operator|.
name|info
argument_list|(
name|cmd
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" test run options="
operator|+
name|MAPPER
operator|.
name|writeValueAsString
argument_list|(
name|opts
argument_list|)
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
literal|null
decl_stmt|;
name|Connection
name|connection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connection
operator|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|checkTable
argument_list|(
name|admin
argument_list|,
name|opts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|connection
operator|!=
literal|null
condition|)
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|opts
operator|.
name|nomapred
condition|)
block|{
name|doLocalClients
argument_list|(
name|opts
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doMapReduce
argument_list|(
name|opts
argument_list|,
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|printUsage
parameter_list|()
block|{
name|printUsage
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|printUsage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
name|printUsage
argument_list|(
name|PerformanceEvaluation
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|printUsageAndExit
parameter_list|(
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|int
name|exitCode
parameter_list|)
block|{
name|printUsage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|exitCode
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|void
name|printUsage
parameter_list|(
specifier|final
name|String
name|className
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|!=
literal|null
operator|&&
name|message
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: java "
operator|+
name|className
operator|+
literal|" \\"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"<OPTIONS> [-D<property=value>]*<command><nclients>"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"General Options:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" nomapred        Run multiple clients using threads "
operator|+
literal|"(rather than use mapreduce)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" oneCon          all the threads share the same connection. Default: False"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" sampleRate      Execute test on a sample of total "
operator|+
literal|"rows. Only supported by randomRead. Default: 1.0"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" period          Report every 'period' rows: "
operator|+
literal|"Default: opts.perClientRunRows / 10 = "
operator|+
name|DEFAULT_OPTS
operator|.
name|getPerClientRunRows
argument_list|()
operator|/
literal|10
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" cycles          How many times to cycle the test. Defaults: 1."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" traceRate       Enable HTrace spans. Initiate tracing every N rows. "
operator|+
literal|"Default: 0"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" latency         Set to report operation latencies. Default: False"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" measureAfter    Start to measure the latency once 'measureAfter'"
operator|+
literal|" rows have been treated. Default: 0"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" valueSize       Pass value size to use: Default: "
operator|+
name|DEFAULT_OPTS
operator|.
name|getValueSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" valueRandom     Set if we should vary value size between 0 and "
operator|+
literal|"'valueSize'; set on read for stats on size: Default: Not set."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" blockEncoding   Block encoding to use. Value should be one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|DataBlockEncoding
operator|.
name|values
argument_list|()
argument_list|)
operator|+
literal|". Default: NONE"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Table Creation / Write Tests:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" table           Alternate table name. Default: 'TestTable'"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" rows            Rows each client runs. Default: "
operator|+
name|DEFAULT_OPTS
operator|.
name|getPerClientRunRows
argument_list|()
operator|+
literal|".  In case of randomReads and randomSeekScans this could"
operator|+
literal|" be specified along with --size to specify the number of rows to be scanned within"
operator|+
literal|" the total range specified by the size."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" size            Total size in GiB. Mutually exclusive with --rows for writes and scans"
operator|+
literal|". But for randomReads and randomSeekScans when you use size with --rows you could"
operator|+
literal|" use size to specify the end range and --rows"
operator|+
literal|" specifies the number of rows within that range. "
operator|+
literal|"Default: 1.0."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" compress        Compression type to use (GZ, LZO, ...). Default: 'NONE'"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" flushCommits    Used to determine if the test should flush the table. "
operator|+
literal|"Default: false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" valueZipf       Set if we should vary value size between 0 and "
operator|+
literal|"'valueSize' in zipf form: Default: Not set."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" writeToWAL      Set writeToWAL on puts. Default: True"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" autoFlush       Set autoFlush on htable. Default: False"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" presplit        Create presplit table. If a table with same name exists,"
operator|+
literal|" it'll be deleted and recreated (instead of verifying count of its existing regions). "
operator|+
literal|"Recommended for accurate perf analysis (see guide). Default: disabled"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" usetags         Writes tags along with KVs. Use with HFile V3. "
operator|+
literal|"Default: false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" numoftags       Specify the no of tags that would be needed. "
operator|+
literal|"This works only if usetags is true. Default: "
operator|+
name|DEFAULT_OPTS
operator|.
name|noOfTags
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" splitPolicy     Specify a custom RegionSplitPolicy for the table."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" columns         Columns to write per row. Default: 1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Read Tests:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" filterAll       Helps to filter out all the rows on the server side"
operator|+
literal|" there by not returning any thing back to the client.  Helps to check the server side"
operator|+
literal|" performance.  Uses FilterAllFilter internally. "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" multiGet        Batch gets together into groups of N. Only supported "
operator|+
literal|"by randomRead. Default: disabled"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" inmemory        Tries to keep the HFiles of the CF "
operator|+
literal|"inmemory as far as possible. Not guaranteed that reads are always served "
operator|+
literal|"from memory.  Default: false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" bloomFilter     Bloom filter type, one of "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|BloomType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" blockSize       Blocksize to use when writing out hfiles. "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" inmemoryCompaction  Makes the column family to do inmemory flushes/compactions. "
operator|+
literal|"Uses the CompactingMemstore"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" addColumns      Adds columns to scans/gets explicitly. Default: true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" replicas        Enable region replica testing. Defaults: 1."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" randomSleep     Do a random sleep before each get between 0 and entered value. Defaults: 0"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" caching         Scan caching to use. Default: 30"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" asyncPrefetch   Enable asyncPrefetch for scan"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" cacheBlocks     Set the cacheBlocks option for scan. Default: true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" scanReadType    Set the readType option for scan, stream/pread/default. Default: default"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" Note: -D properties will be applied to the conf used. "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  For example: "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -Dmapreduce.output.fileoutputformat.compress=true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"   -Dmapreduce.task.timeout=60000"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Command:"
argument_list|)
expr_stmt|;
for|for
control|(
name|CmdDescriptor
name|command
range|:
name|COMMANDS
operator|.
name|values
argument_list|()
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|" %-15s %s"
argument_list|,
name|command
operator|.
name|getName
argument_list|()
argument_list|,
name|command
operator|.
name|getDescription
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Args:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" nclients        Integer. Required. Total number of clients "
operator|+
literal|"(and HRegionServers) running. 1<= value<= 500"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Examples:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" To run a single client doing the default 1M sequentialWrites:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" $ hbase "
operator|+
name|className
operator|+
literal|" sequentialWrite 1"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" To run 10 clients doing increments over ten rows:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" $ hbase "
operator|+
name|className
operator|+
literal|" --rows=10 --nomapred increment 10"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Parse options passed in via an arguments array. Assumes that array has been split    * on white-space and placed into a {@code Queue}. Any unknown arguments will remain    * in the queue at the conclusion of this method call. It's up to the caller to deal    * with these unrecognized arguments.    */
specifier|static
name|TestOptions
name|parseOpts
parameter_list|(
name|Queue
argument_list|<
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|TestOptions
name|opts
init|=
operator|new
name|TestOptions
argument_list|()
decl_stmt|;
name|String
name|cmd
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|cmd
operator|=
name|args
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cmd
operator|.
name|equals
argument_list|(
literal|"-h"
argument_list|)
operator|||
name|cmd
operator|.
name|startsWith
argument_list|(
literal|"--h"
argument_list|)
condition|)
block|{
comment|// place item back onto queue so that caller knows parsing was incomplete
name|args
operator|.
name|add
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
block|}
specifier|final
name|String
name|nmr
init|=
literal|"--nomapred"
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|nmr
argument_list|)
condition|)
block|{
name|opts
operator|.
name|nomapred
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|rows
init|=
literal|"--rows="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|rows
argument_list|)
condition|)
block|{
name|opts
operator|.
name|perClientRunRows
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|rows
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|cycles
init|=
literal|"--cycles="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|cycles
argument_list|)
condition|)
block|{
name|opts
operator|.
name|cycles
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|cycles
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|sampleRate
init|=
literal|"--sampleRate="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|sampleRate
argument_list|)
condition|)
block|{
name|opts
operator|.
name|sampleRate
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|sampleRate
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|table
init|=
literal|"--table="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|opts
operator|.
name|tableName
operator|=
name|cmd
operator|.
name|substring
argument_list|(
name|table
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|startRow
init|=
literal|"--startRow="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|startRow
argument_list|)
condition|)
block|{
name|opts
operator|.
name|startRow
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|startRow
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|compress
init|=
literal|"--compress="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|compress
argument_list|)
condition|)
block|{
name|opts
operator|.
name|compression
operator|=
name|Compression
operator|.
name|Algorithm
operator|.
name|valueOf
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|compress
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|traceRate
init|=
literal|"--traceRate="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|traceRate
argument_list|)
condition|)
block|{
name|opts
operator|.
name|traceRate
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|traceRate
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|blockEncoding
init|=
literal|"--blockEncoding="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|blockEncoding
argument_list|)
condition|)
block|{
name|opts
operator|.
name|blockEncoding
operator|=
name|DataBlockEncoding
operator|.
name|valueOf
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|blockEncoding
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|flushCommits
init|=
literal|"--flushCommits="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|flushCommits
argument_list|)
condition|)
block|{
name|opts
operator|.
name|flushCommits
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|flushCommits
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|writeToWAL
init|=
literal|"--writeToWAL="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|writeToWAL
argument_list|)
condition|)
block|{
name|opts
operator|.
name|writeToWAL
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|writeToWAL
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|presplit
init|=
literal|"--presplit="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|presplit
argument_list|)
condition|)
block|{
name|opts
operator|.
name|presplitRegions
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|presplit
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|inMemory
init|=
literal|"--inmemory="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|inMemory
argument_list|)
condition|)
block|{
name|opts
operator|.
name|inMemoryCF
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|inMemory
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|autoFlush
init|=
literal|"--autoFlush="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|autoFlush
argument_list|)
condition|)
block|{
name|opts
operator|.
name|autoFlush
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|autoFlush
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|onceCon
init|=
literal|"--oneCon="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|onceCon
argument_list|)
condition|)
block|{
name|opts
operator|.
name|oneCon
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|onceCon
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|latency
init|=
literal|"--latency"
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|latency
argument_list|)
condition|)
block|{
name|opts
operator|.
name|reportLatency
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|multiGet
init|=
literal|"--multiGet="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|multiGet
argument_list|)
condition|)
block|{
name|opts
operator|.
name|multiGet
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|multiGet
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|useTags
init|=
literal|"--usetags="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|useTags
argument_list|)
condition|)
block|{
name|opts
operator|.
name|useTags
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|useTags
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|noOfTags
init|=
literal|"--numoftags="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|noOfTags
argument_list|)
condition|)
block|{
name|opts
operator|.
name|noOfTags
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|noOfTags
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|replicas
init|=
literal|"--replicas="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|replicas
argument_list|)
condition|)
block|{
name|opts
operator|.
name|replicas
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|replicas
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|filterOutAll
init|=
literal|"--filterAll"
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|filterOutAll
argument_list|)
condition|)
block|{
name|opts
operator|.
name|filterAll
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|size
init|=
literal|"--size="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|size
argument_list|)
condition|)
block|{
name|opts
operator|.
name|size
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|size
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|opts
operator|.
name|size
operator|<=
literal|1.0f
condition|)
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Size must be> 1; i.e. 1GB"
argument_list|)
throw|;
continue|continue;
block|}
specifier|final
name|String
name|splitPolicy
init|=
literal|"--splitPolicy="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|splitPolicy
argument_list|)
condition|)
block|{
name|opts
operator|.
name|splitPolicy
operator|=
name|cmd
operator|.
name|substring
argument_list|(
name|splitPolicy
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|randomSleep
init|=
literal|"--randomSleep="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|randomSleep
argument_list|)
condition|)
block|{
name|opts
operator|.
name|randomSleep
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|randomSleep
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|measureAfter
init|=
literal|"--measureAfter="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|measureAfter
argument_list|)
condition|)
block|{
name|opts
operator|.
name|measureAfter
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|measureAfter
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|bloomFilter
init|=
literal|"--bloomFilter="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|bloomFilter
argument_list|)
condition|)
block|{
name|opts
operator|.
name|bloomType
operator|=
name|BloomType
operator|.
name|valueOf
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|bloomFilter
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|blockSize
init|=
literal|"--blockSize="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|blockSize
argument_list|)
condition|)
block|{
name|opts
operator|.
name|blockSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|blockSize
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|valueSize
init|=
literal|"--valueSize="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|valueSize
argument_list|)
condition|)
block|{
name|opts
operator|.
name|valueSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|valueSize
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|valueRandom
init|=
literal|"--valueRandom"
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|valueRandom
argument_list|)
condition|)
block|{
name|opts
operator|.
name|valueRandom
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|opts
operator|.
name|valueZipf
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Either valueZipf or valueRandom but not both"
argument_list|)
throw|;
block|}
continue|continue;
block|}
specifier|final
name|String
name|valueZipf
init|=
literal|"--valueZipf"
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|valueZipf
argument_list|)
condition|)
block|{
name|opts
operator|.
name|valueZipf
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|opts
operator|.
name|valueRandom
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Either valueZipf or valueRandom but not both"
argument_list|)
throw|;
block|}
continue|continue;
block|}
specifier|final
name|String
name|period
init|=
literal|"--period="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|period
argument_list|)
condition|)
block|{
name|opts
operator|.
name|period
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|period
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|addColumns
init|=
literal|"--addColumns="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|addColumns
argument_list|)
condition|)
block|{
name|opts
operator|.
name|addColumns
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|addColumns
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|inMemoryCompaction
init|=
literal|"--inmemoryCompaction="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|inMemoryCompaction
argument_list|)
condition|)
block|{
name|opts
operator|.
name|inMemoryCompaction
operator|=
name|MemoryCompactionPolicy
operator|.
name|valueOf
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|inMemoryCompaction
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|columns
init|=
literal|"--columns="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|columns
argument_list|)
condition|)
block|{
name|opts
operator|.
name|columns
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|columns
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|caching
init|=
literal|"--caching="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|caching
argument_list|)
condition|)
block|{
name|opts
operator|.
name|caching
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|caching
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|asyncPrefetch
init|=
literal|"--asyncPrefetch"
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|asyncPrefetch
argument_list|)
condition|)
block|{
name|opts
operator|.
name|asyncPrefetch
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|cacheBlocks
init|=
literal|"--cacheBlocks="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|cacheBlocks
argument_list|)
condition|)
block|{
name|opts
operator|.
name|cacheBlocks
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|cacheBlocks
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|scanReadType
init|=
literal|"--scanReadType="
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|startsWith
argument_list|(
name|scanReadType
argument_list|)
condition|)
block|{
name|opts
operator|.
name|scanReadType
operator|=
name|Scan
operator|.
name|ReadType
operator|.
name|valueOf
argument_list|(
name|cmd
operator|.
name|substring
argument_list|(
name|scanReadType
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|isCommandClass
argument_list|(
name|cmd
argument_list|)
condition|)
block|{
name|opts
operator|.
name|cmdName
operator|=
name|cmd
expr_stmt|;
try|try
block|{
name|opts
operator|.
name|numClientThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchElementException
decl||
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Command "
operator|+
name|cmd
operator|+
literal|" does not have threads number"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|opts
operator|=
name|calculateRowsAndSize
argument_list|(
name|opts
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|printUsageAndExit
argument_list|(
literal|"ERROR: Unrecognized option/command: "
operator|+
name|cmd
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Not matching any option or command.
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error: Wrong option or command: "
operator|+
name|cmd
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|opts
return|;
block|}
specifier|static
name|TestOptions
name|calculateRowsAndSize
parameter_list|(
specifier|final
name|TestOptions
name|opts
parameter_list|)
block|{
name|int
name|rowsPerGB
init|=
name|getRowsPerGB
argument_list|(
name|opts
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|opts
operator|.
name|getCmdName
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|opts
operator|.
name|getCmdName
argument_list|()
operator|.
name|equals
argument_list|(
name|RANDOM_READ
argument_list|)
operator|||
name|opts
operator|.
name|getCmdName
argument_list|()
operator|.
name|equals
argument_list|(
name|RANDOM_SEEK_SCAN
argument_list|)
operator|)
operator|)
operator|&&
name|opts
operator|.
name|size
operator|!=
name|DEFAULT_OPTS
operator|.
name|size
operator|&&
name|opts
operator|.
name|perClientRunRows
operator|!=
name|DEFAULT_OPTS
operator|.
name|perClientRunRows
condition|)
block|{
name|opts
operator|.
name|totalRows
operator|=
operator|(
name|int
operator|)
name|opts
operator|.
name|size
operator|*
name|rowsPerGB
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opts
operator|.
name|size
operator|!=
name|DEFAULT_OPTS
operator|.
name|size
condition|)
block|{
comment|// total size in GB specified
name|opts
operator|.
name|totalRows
operator|=
operator|(
name|int
operator|)
name|opts
operator|.
name|size
operator|*
name|rowsPerGB
expr_stmt|;
name|opts
operator|.
name|perClientRunRows
operator|=
name|opts
operator|.
name|totalRows
operator|/
name|opts
operator|.
name|numClientThreads
expr_stmt|;
block|}
else|else
block|{
name|opts
operator|.
name|totalRows
operator|=
name|opts
operator|.
name|perClientRunRows
operator|*
name|opts
operator|.
name|numClientThreads
expr_stmt|;
name|opts
operator|.
name|size
operator|=
name|opts
operator|.
name|totalRows
operator|/
name|rowsPerGB
expr_stmt|;
block|}
return|return
name|opts
return|;
block|}
specifier|static
name|int
name|getRowsPerGB
parameter_list|(
specifier|final
name|TestOptions
name|opts
parameter_list|)
block|{
return|return
name|ONE_GB
operator|/
operator|(
operator|(
name|opts
operator|.
name|valueRandom
condition|?
name|opts
operator|.
name|valueSize
operator|/
literal|2
else|:
name|opts
operator|.
name|valueSize
operator|)
operator|*
name|opts
operator|.
name|getColumns
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|run
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Process command-line args. TODO: Better cmd-line processing
comment|// (but hopefully something not as painful as cli options).
name|int
name|errCode
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|1
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
name|errCode
return|;
block|}
try|try
block|{
name|LinkedList
argument_list|<
name|String
argument_list|>
name|argv
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|argv
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|TestOptions
name|opts
init|=
name|parseOpts
argument_list|(
name|argv
argument_list|)
decl_stmt|;
comment|// args remaining, print help and exit
if|if
condition|(
operator|!
name|argv
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errCode
operator|=
literal|0
expr_stmt|;
name|printUsage
argument_list|()
expr_stmt|;
return|return
name|errCode
return|;
block|}
comment|// must run at least 1 client
if|if
condition|(
name|opts
operator|.
name|numClientThreads
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Number of clients must be> 0"
argument_list|)
throw|;
block|}
comment|// cmdName should not be null, print help and exit
if|if
condition|(
name|opts
operator|.
name|cmdName
operator|==
literal|null
condition|)
block|{
name|printUsage
argument_list|()
expr_stmt|;
return|return
name|errCode
return|;
block|}
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|cmdClass
init|=
name|determineCommandClass
argument_list|(
name|opts
operator|.
name|cmdName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmdClass
operator|!=
literal|null
condition|)
block|{
name|runTest
argument_list|(
name|cmdClass
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|errCode
operator|=
literal|0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|errCode
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isCommandClass
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
return|return
name|COMMANDS
operator|.
name|containsKey
argument_list|(
name|cmd
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|Test
argument_list|>
name|determineCommandClass
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
name|CmdDescriptor
name|descriptor
init|=
name|COMMANDS
operator|.
name|get
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
return|return
name|descriptor
operator|!=
literal|null
condition|?
name|descriptor
operator|.
name|getCmdClass
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|res
init|=
name|ToolRunner
operator|.
name|run
argument_list|(
operator|new
name|PerformanceEvaluation
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

