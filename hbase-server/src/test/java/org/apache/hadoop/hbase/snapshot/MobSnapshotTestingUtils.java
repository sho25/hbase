begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_class
specifier|public
class|class
name|MobSnapshotTestingUtils
block|{
comment|/**    * Create the Mob Table.    */
specifier|public
specifier|static
name|void
name|createMobTable
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|int
name|regionReplication
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setRegionReplication
argument_list|(
name|regionReplication
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|SnapshotTestingUtils
operator|.
name|getSplitKeys
argument_list|()
decl_stmt|;
name|util
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|waitForTableToBeOnline
argument_list|(
name|util
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|splitKeys
operator|.
name|length
operator|+
literal|1
operator|)
operator|*
name|regionReplication
argument_list|,
name|util
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a Mob table.    *    * @param util    * @param tableName    * @param families    * @return An HTable instance for the created table.    * @throws IOException    */
specifier|public
specifier|static
name|HTable
name|createMobTable
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
comment|// Disable blooms (they are on by default as of 0.95) but we disable them
comment|// here because
comment|// tests have hard coded counts of what to expect in block cache, etc.,
comment|// and blooms being
comment|// on is interfering.
name|hcd
operator|.
name|setBloomFilterType
argument_list|(
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|util
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
comment|// HBaseAdmin only waits for regions to appear in hbase:meta we should wait
comment|// until they are assigned
name|util
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return the number of rows in the given table.    */
specifier|public
specifier|static
name|int
name|countMobRows
parameter_list|(
specifier|final
name|HTable
name|table
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|results
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|results
control|)
block|{
name|count
operator|++
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|res
operator|.
name|listCells
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
comment|// Verify the value
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
comment|/**    * Return the number of rows in the given table.    */
specifier|public
specifier|static
name|int
name|countMobRows
parameter_list|(
specifier|final
name|HTable
name|table
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
block|}
name|ResultScanner
name|results
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|res
range|:
name|results
control|)
block|{
name|count
operator|++
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
name|res
operator|.
name|listCells
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|cells
control|)
block|{
comment|// Verify the value
name|Assert
operator|.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|results
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
specifier|public
specifier|static
name|void
name|verifyMobRowCount
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|long
name|expectedRows
parameter_list|)
throws|throws
name|IOException
block|{
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|expectedRows
argument_list|,
name|countMobRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// ==========================================================================
comment|// Snapshot Mock
comment|// ==========================================================================
specifier|public
specifier|static
class|class
name|SnapshotMock
block|{
specifier|private
specifier|final
specifier|static
name|String
name|TEST_FAMILY
init|=
literal|"cf"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TEST_NUM_REGIONS
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|static
class|class
name|RegionData
block|{
specifier|public
name|HRegionInfo
name|hri
decl_stmt|;
specifier|public
name|Path
name|tableDir
decl_stmt|;
specifier|public
name|Path
index|[]
name|files
decl_stmt|;
specifier|public
name|RegionData
parameter_list|(
specifier|final
name|Path
name|tableDir
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|int
name|nfiles
parameter_list|)
block|{
name|this
operator|.
name|tableDir
operator|=
name|tableDir
expr_stmt|;
name|this
operator|.
name|hri
operator|=
name|hri
expr_stmt|;
name|this
operator|.
name|files
operator|=
operator|new
name|Path
index|[
name|nfiles
index|]
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SnapshotBuilder
block|{
specifier|private
specifier|final
name|RegionData
index|[]
name|tableRegions
decl_stmt|;
specifier|private
specifier|final
name|SnapshotDescription
name|desc
decl_stmt|;
specifier|private
specifier|final
name|HTableDescriptor
name|htd
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|private
name|Path
name|snapshotDir
decl_stmt|;
specifier|private
name|int
name|snapshotted
init|=
literal|0
decl_stmt|;
specifier|public
name|SnapshotBuilder
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|SnapshotDescription
name|desc
parameter_list|,
specifier|final
name|RegionData
index|[]
name|tableRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
name|this
operator|.
name|htd
operator|=
name|htd
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
name|this
operator|.
name|tableRegions
operator|=
name|tableRegions
expr_stmt|;
name|this
operator|.
name|snapshotDir
operator|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|desc
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
operator|new
name|FSTableDescriptors
argument_list|(
name|conf
argument_list|)
operator|.
name|createTableDescriptorForTableDirectory
argument_list|(
name|snapshotDir
argument_list|,
operator|new
name|TableDescriptor
argument_list|(
name|htd
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|()
block|{
return|return
name|this
operator|.
name|htd
return|;
block|}
specifier|public
name|SnapshotDescription
name|getSnapshotDescription
parameter_list|()
block|{
return|return
name|this
operator|.
name|desc
return|;
block|}
specifier|public
name|Path
name|getSnapshotsDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshotDir
return|;
block|}
specifier|public
name|Path
index|[]
name|addRegion
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|addRegion
argument_list|(
name|desc
argument_list|)
return|;
block|}
specifier|public
name|Path
index|[]
name|addRegionV1
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|addRegion
argument_list|(
name|desc
operator|.
name|toBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|SnapshotManifestV1
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Path
index|[]
name|addRegionV2
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|addRegion
argument_list|(
name|desc
operator|.
name|toBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|SnapshotManifestV2
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Path
index|[]
name|addRegion
parameter_list|(
specifier|final
name|SnapshotDescription
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|snapshotted
operator|==
name|tableRegions
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No more regions in the table"
argument_list|)
throw|;
block|}
name|RegionData
name|regionData
init|=
name|tableRegions
index|[
name|this
operator|.
name|snapshotted
operator|++
index|]
decl_stmt|;
name|ForeignExceptionDispatcher
name|monitor
init|=
operator|new
name|ForeignExceptionDispatcher
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|desc
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|manifest
operator|.
name|addRegion
argument_list|(
name|regionData
operator|.
name|tableDir
argument_list|,
name|regionData
operator|.
name|hri
argument_list|)
expr_stmt|;
return|return
name|regionData
operator|.
name|files
return|;
block|}
specifier|public
name|Path
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
name|ForeignExceptionDispatcher
name|monitor
init|=
operator|new
name|ForeignExceptionDispatcher
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|desc
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|manifest
operator|.
name|addTableDescriptor
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|consolidate
argument_list|()
expr_stmt|;
name|SnapshotDescriptionUtils
operator|.
name|completeSnapshot
argument_list|(
name|desc
argument_list|,
name|rootDir
argument_list|,
name|snapshotDir
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|snapshotDir
operator|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|desc
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
return|return
name|snapshotDir
return|;
block|}
block|}
specifier|public
name|SnapshotMock
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
block|}
specifier|public
name|SnapshotBuilder
name|createSnapshotV1
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|SnapshotManifestV1
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
return|;
block|}
specifier|public
name|SnapshotBuilder
name|createSnapshotV2
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|SnapshotManifestV2
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
return|;
block|}
specifier|private
name|SnapshotBuilder
name|createSnapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|int
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
name|createHtd
argument_list|(
name|snapshotName
argument_list|)
decl_stmt|;
name|RegionData
index|[]
name|regions
init|=
name|createTable
argument_list|(
name|htd
argument_list|,
name|TEST_NUM_REGIONS
argument_list|)
decl_stmt|;
name|SnapshotDescription
name|desc
init|=
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTable
argument_list|(
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|snapshotName
argument_list|)
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Path
name|workingDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|desc
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|SnapshotDescriptionUtils
operator|.
name|writeSnapshotInfo
argument_list|(
name|desc
argument_list|,
name|workingDir
argument_list|,
name|fs
argument_list|)
expr_stmt|;
return|return
operator|new
name|SnapshotBuilder
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|,
name|htd
argument_list|,
name|desc
argument_list|,
name|regions
argument_list|)
return|;
block|}
specifier|public
name|HTableDescriptor
name|createHtd
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMobThreshold
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
return|return
name|htd
return|;
block|}
specifier|private
name|RegionData
index|[]
name|createTable
parameter_list|(
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|int
name|nregions
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|FSTableDescriptors
argument_list|(
name|conf
argument_list|)
operator|.
name|createTableDescriptorForTableDirectory
argument_list|(
name|tableDir
argument_list|,
operator|new
name|TableDescriptor
argument_list|(
name|htd
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nregions
operator|%
literal|2
operator|==
literal|0
argument_list|)
expr_stmt|;
name|RegionData
index|[]
name|regions
init|=
operator|new
name|RegionData
index|[
name|nregions
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
operator|+
name|i
operator|*
literal|2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
operator|+
name|i
operator|*
literal|2
argument_list|)
decl_stmt|;
comment|// First region, simple with one plain hfile.
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|rfs
init|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|hri
argument_list|)
decl_stmt|;
name|regions
index|[
name|i
index|]
operator|=
operator|new
name|RegionData
argument_list|(
name|tableDir
argument_list|,
name|hri
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|regions
index|[
name|i
index|]
operator|.
name|files
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|Path
name|storeFile
init|=
name|createStoreFile
argument_list|(
name|rfs
operator|.
name|createTempName
argument_list|()
argument_list|)
decl_stmt|;
name|regions
index|[
name|i
index|]
operator|.
name|files
index|[
name|j
index|]
operator|=
name|rfs
operator|.
name|commitStoreFile
argument_list|(
name|TEST_FAMILY
argument_list|,
name|storeFile
argument_list|)
expr_stmt|;
block|}
comment|// Second region, used to test the split case.
comment|// This region contains a reference to the hfile in the first region.
name|startKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
operator|+
name|i
operator|*
literal|2
argument_list|)
expr_stmt|;
name|endKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
operator|+
name|i
operator|*
literal|2
argument_list|)
expr_stmt|;
name|hri
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rfs
operator|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|regions
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|new
name|RegionData
argument_list|(
name|tableDir
argument_list|,
name|hri
argument_list|,
name|regions
index|[
name|i
index|]
operator|.
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|regions
index|[
name|i
index|]
operator|.
name|files
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|String
name|refName
init|=
name|regions
index|[
name|i
index|]
operator|.
name|files
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|'.'
operator|+
name|regions
index|[
name|i
index|]
operator|.
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Path
name|refFile
init|=
name|createStoreFile
argument_list|(
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|refName
argument_list|)
argument_list|)
decl_stmt|;
name|regions
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|files
index|[
name|j
index|]
operator|=
name|rfs
operator|.
name|commitStoreFile
argument_list|(
name|TEST_FAMILY
argument_list|,
name|refFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regions
return|;
block|}
specifier|private
name|Path
name|createStoreFile
parameter_list|(
specifier|final
name|Path
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|storeFile
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|storeFile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|storeFile
return|;
block|}
block|}
block|}
end_class

end_unit

