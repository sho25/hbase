begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Validate requestsPerSecond metric.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRequestsPerSecondMetric
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRequestsPerSecondMetric
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|METRICS_PERIOD
init|=
literal|2000L
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|REGIONSERVER_METRICS_PERIOD
argument_list|,
name|METRICS_PERIOD
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|teardown
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * This test will confirm no negative value in requestsPerSecond metric during any region    * transition(close region/remove region/move region).    * Firstly, load 2000 random rows for 25 regions and will trigger a metric.    * Now, metricCache will have a current read and write requests count.    * Next, we disable a table and all of its 25 regions will be closed.    * As part of region close, his metric will also be removed from metricCache.    * prior to HBASE-23237, we do not remove/reset his metric so we incorrectly compute    * (currentRequestCount - lastRequestCount) which result into negative value.    *    * @throws IOException    * @throws InterruptedException    */
specifier|public
name|void
name|testNoNegativeSignAtRequestsPerSecond
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|FAMILY
init|=
literal|"f"
decl_stmt|;
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|ServerName
name|serverName
init|=
name|admin
operator|.
name|getRegionServers
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|HRegionServer
name|regionServer
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|MetricsRegionServerWrapperImpl
name|metricsWrapper
init|=
operator|new
name|MetricsRegionServerWrapperImpl
argument_list|(
name|regionServer
argument_list|)
decl_stmt|;
name|MetricsRegionServerWrapperImpl
operator|.
name|RegionServerMetricsWrapperRunnable
name|metricsServer
init|=
name|metricsWrapper
operator|.
expr|new
name|RegionServerMetricsWrapperRunnable
argument_list|()
decl_stmt|;
name|metricsServer
operator|.
name|run
argument_list|()
expr_stmt|;
name|UTIL
operator|.
name|loadRandomRows
argument_list|(
name|table
argument_list|,
name|FAMILY
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|2000
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|METRICS_PERIOD
argument_list|)
expr_stmt|;
name|metricsServer
operator|.
name|run
argument_list|()
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|METRICS_PERIOD
argument_list|)
expr_stmt|;
name|metricsServer
operator|.
name|run
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|metricsWrapper
operator|.
name|getRequestsPerSecond
argument_list|()
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

