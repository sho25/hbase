begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
operator|.
name|assertErrors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
operator|.
name|doFsck
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CategoryBasedTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|NoSuchProcedureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StorefileRefresherChore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsck
operator|.
name|ErrorReporter
operator|.
name|ERROR_CODE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HBaseFsckRepair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|LoadBalancerTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Tests the scenarios where replicas are enabled for the meta table  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMetaWithReplicas
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestRule
name|timeout
init|=
name|CategoryBasedTimeout
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withLookingForStuckThread
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMetaWithReplicas
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"zookeeper.session.timeout"
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|META_REPLICAS_NUM
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|StorefileRefresherChore
operator|.
name|REGIONSERVER_STOREFILE_REFRESH_PERIOD
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// disable the balancer
name|LoadBalancerTracker
name|l
init|=
operator|new
name|LoadBalancerTracker
argument_list|(
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
operator|new
name|Abortable
argument_list|()
block|{
name|boolean
name|aborted
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|aborted
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|aborted
operator|=
literal|true
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|l
operator|.
name|setBalancerOn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|replicaId
init|=
literal|1
init|;
name|replicaId
operator|<
literal|3
condition|;
name|replicaId
operator|++
control|)
block|{
name|HRegionInfo
name|h
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|replicaId
argument_list|)
decl_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|waitForAssignment
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProcedureException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Presume the procedure has been cleaned up so just proceed: "
operator|+
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"All meta replicas assigned"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaHTDReplicaCount
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getTableDescriptor
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|getRegionReplication
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testZookeeperNodesForReplicas
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Checks all the znodes exist when meta's replicas are enabled
name|ZooKeeperWatcher
name|zkw
init|=
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|baseZNode
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEEPER_ZNODE_PARENT
argument_list|)
decl_stmt|;
name|String
name|primaryMetaZnode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.metaserver"
argument_list|,
literal|"meta-region-server"
argument_list|)
argument_list|)
decl_stmt|;
comment|// check that the data in the znode is parseable (this would also mean the znode exists)
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|primaryMetaZnode
argument_list|)
decl_stmt|;
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|String
name|secZnode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.metaserver"
argument_list|,
literal|"meta-region-server"
argument_list|)
operator|+
literal|"-"
operator|+
name|i
argument_list|)
decl_stmt|;
name|String
name|str
init|=
name|zkw
operator|.
name|znodePaths
operator|.
name|getZNodeForReplica
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|str
operator|.
name|equals
argument_list|(
name|secZnode
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that the data in the znode is parseable (this would also mean the znode exists)
name|data
operator|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|secZnode
argument_list|)
expr_stmt|;
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdownHandling
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This test creates a table, flushes the meta (with 3 replicas), kills the
comment|// server holding the primary meta replica. Then it does a put/get into/from
comment|// the test table. The put/get operations would use the replicas to locate the
comment|// location of the test table's region
name|shutdownMetaAndDoValidations
argument_list|(
name|TEST_UTIL
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|shutdownMetaAndDoValidations
parameter_list|(
name|HBaseTestingUtility
name|util
parameter_list|)
throws|throws
name|Exception
block|{
comment|// This test creates a table, flushes the meta (with 3 replicas), kills the
comment|// server holding the primary meta replica. Then it does a put/get into/from
comment|// the test table. The put/get operations would use the replicas to locate the
comment|// location of the test table's region
name|ZooKeeperWatcher
name|zkw
init|=
name|util
operator|.
name|getZooKeeperWatcher
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|USE_META_REPLICAS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|baseZNode
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEEPER_ZNODE_PARENT
argument_list|)
decl_stmt|;
name|String
name|primaryMetaZnode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.metaserver"
argument_list|,
literal|"meta-region-server"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|primaryMetaZnode
argument_list|)
decl_stmt|;
name|ServerName
name|primary
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|TableName
name|TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testShutdownHandling"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
block|}
decl_stmt|;
if|if
condition|(
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|TABLE
argument_list|)
condition|)
block|{
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|TABLE
argument_list|)
expr_stmt|;
block|}
name|ServerName
name|master
init|=
literal|null
decl_stmt|;
try|try
init|(
name|Connection
name|c
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
init|)
block|{
try|try
init|(
name|Table
name|htable
init|=
name|util
operator|.
name|createTable
argument_list|(
name|TABLE
argument_list|,
name|FAMILIES
argument_list|)
init|;
init|)
block|{
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|StorefileRefresherChore
operator|.
name|REGIONSERVER_STOREFILE_REFRESH_PERIOD
argument_list|,
literal|30000
argument_list|)
operator|*
literal|6
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|MetaTableAccessor
operator|.
name|getTableRegions
argument_list|(
name|c
argument_list|,
name|TABLE
argument_list|)
decl_stmt|;
name|HRegionLocation
name|hrl
init|=
name|MetaTableAccessor
operator|.
name|getRegionLocation
argument_list|(
name|c
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// Ensure that the primary server for test table is not the same one as the primary
comment|// of the meta region since we will be killing the srv holding the meta's primary...
comment|// We want to be able to write to the test table even when the meta is not present ..
comment|// If the servers are the same, then move the test table's region out of the server
comment|// to another random server
if|if
condition|(
name|hrl
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|primary
argument_list|)
condition|)
block|{
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|hrl
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// wait for the move to complete
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|hrl
operator|=
name|MetaTableAccessor
operator|.
name|getRegionLocation
argument_list|(
name|c
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|primary
operator|.
name|equals
argument_list|(
name|hrl
operator|.
name|getServerName
argument_list|()
argument_list|)
condition|)
do|;
name|util
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|conf
operator|.
name|getInt
argument_list|(
name|StorefileRefresherChore
operator|.
name|REGIONSERVER_STOREFILE_REFRESH_PERIOD
argument_list|,
literal|30000
argument_list|)
operator|*
literal|3
argument_list|)
expr_stmt|;
block|}
name|master
operator|=
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
comment|// kill the master so that regionserver recovery is not triggered at all
comment|// for the meta server
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|stopMaster
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|waitForMasterToStop
argument_list|(
name|master
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|master
operator|.
name|equals
argument_list|(
name|primary
argument_list|)
condition|)
block|{
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|killRegionServer
argument_list|(
name|primary
argument_list|)
expr_stmt|;
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|waitForRegionServerToStop
argument_list|(
name|primary
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|ClusterConnection
operator|)
name|c
operator|)
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
block|}
name|Get
name|get
init|=
literal|null
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|row
init|=
literal|"test"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|htable
init|=
name|c
operator|.
name|getTable
argument_list|(
name|TABLE
argument_list|)
init|;
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|BufferedMutator
name|m
init|=
name|c
operator|.
name|getBufferedMutator
argument_list|(
name|TABLE
argument_list|)
decl_stmt|;
name|m
operator|.
name|mutate
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|m
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Try to do a get of the row that was just put
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|r
operator|=
name|htable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
comment|// now start back the killed servers and disable use of replicas. That would mean
comment|// calls go to the primary
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|startMaster
argument_list|(
name|master
operator|.
name|getHostname
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|startRegionServer
argument_list|(
name|primary
operator|.
name|getHostname
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|util
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ClusterConnection
operator|)
name|c
operator|)
operator|.
name|clearRegionCache
argument_list|()
expr_stmt|;
block|}
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|USE_META_REPLICAS
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|htable
init|=
name|c
operator|.
name|getTable
argument_list|(
name|TABLE
argument_list|)
init|;
init|)
block|{
name|r
operator|=
name|htable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMetaLookupThreadPoolCreated
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
block|}
decl_stmt|;
if|if
condition|(
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
condition|)
block|{
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|htable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|)
init|;
init|)
block|{
name|byte
index|[]
name|row
init|=
literal|"test"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ConnectionImplementation
name|c
init|=
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|)
decl_stmt|;
comment|// check that metalookup pool would get created
name|c
operator|.
name|relocateRegion
argument_list|(
name|tableName
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|ExecutorService
name|ex
init|=
name|c
operator|.
name|getCurrentMetaLookupPool
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|ex
operator|!=
literal|null
operator|)
assert|;
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Test
comment|// Uses FSCK. Needs fixing after HBASE-14614.
specifier|public
name|void
name|testChangingReplicaCount
parameter_list|()
throws|throws
name|Exception
block|{
comment|// tests changing the replica count across master restarts
comment|// reduce the replica count from 3 to 2
name|stopMasterAndValidateReplicaCount
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// increase the replica count from 2 to 3
name|stopMasterAndValidateReplicaCount
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|stopMasterAndValidateReplicaCount
parameter_list|(
specifier|final
name|int
name|originalReplicaCount
parameter_list|,
specifier|final
name|int
name|newReplicaCount
parameter_list|)
throws|throws
name|Exception
block|{
name|ServerName
name|sn
init|=
name|TEST_UTIL
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|stopMaster
argument_list|(
name|sn
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|waitForMasterToStop
argument_list|(
name|sn
argument_list|,
literal|60000
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|metaZnodes
init|=
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
operator|.
name|getMetaReplicaNodes
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|metaZnodes
operator|.
name|size
argument_list|()
operator|==
name|originalReplicaCount
operator|)
assert|;
comment|//we should have what was configured before
name|TEST_UTIL
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|getConf
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|META_REPLICAS_NUM
argument_list|,
name|newReplicaCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|countServedRegions
argument_list|()
operator|<
name|newReplicaCount
condition|)
block|{
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|startRegionServer
argument_list|()
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|startMaster
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
name|predicateMetaHasReplicas
argument_list|(
name|newReplicaCount
argument_list|)
argument_list|)
expr_stmt|;
comment|// also check if hbck returns without errors
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|META_REPLICAS_NUM
argument_list|,
name|newReplicaCount
argument_list|)
expr_stmt|;
name|HBaseFsck
name|hbck
init|=
name|HbckTestingUtil
operator|.
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HbckTestingUtil
operator|.
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Waiter
operator|.
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
name|predicateMetaHasReplicas
parameter_list|(
specifier|final
name|int
name|newReplicaCount
parameter_list|)
block|{
return|return
operator|new
name|Waiter
operator|.
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|explainFailure
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|checkMetaLocationAndExplain
argument_list|(
name|newReplicaCount
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|checkMetaLocationAndExplain
argument_list|(
name|newReplicaCount
argument_list|)
operator|==
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|String
name|checkMetaLocationAndExplain
parameter_list|(
name|int
name|originalReplicaCount
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|metaZnodes
init|=
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
operator|.
name|getMetaReplicaNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaZnodes
operator|.
name|size
argument_list|()
operator|==
name|originalReplicaCount
condition|)
block|{
name|RegionLocations
name|rl
init|=
operator|(
operator|(
name|ClusterConnection
operator|)
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|locateRegion
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|location
range|:
name|rl
operator|.
name|getRegionLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
return|return
literal|"Null location found in "
operator|+
name|rl
operator|.
name|toString
argument_list|()
return|;
block|}
if|if
condition|(
name|location
operator|.
name|getRegionInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|"Null regionInfo for location "
operator|+
name|location
return|;
block|}
if|if
condition|(
name|location
operator|.
name|getHostname
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|"Null hostName for location "
operator|+
name|location
return|;
block|}
block|}
return|return
literal|null
return|;
comment|// OK
block|}
return|return
literal|"Replica count is not as expected "
operator|+
name|originalReplicaCount
operator|+
literal|"<> "
operator|+
name|metaZnodes
operator|.
name|size
argument_list|()
operator|+
literal|"("
operator|+
name|metaZnodes
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHBaseFsckWithMetaReplicas
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseFsck
name|hbck
init|=
name|HbckTestingUtil
operator|.
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HbckTestingUtil
operator|.
name|assertNoErrors
argument_list|(
name|hbck
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
comment|// Disabled. Relies on FSCK which needs work for AMv2.
specifier|public
name|void
name|testHBaseFsckWithFewerMetaReplicas
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterConnection
name|c
init|=
operator|(
name|ClusterConnection
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|RegionLocations
name|rl
init|=
name|c
operator|.
name|locateRegion
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HBaseFsckRepair
operator|.
name|closeRegionSilentlyAndWait
argument_list|(
name|c
argument_list|,
name|rl
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|rl
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that problem exists
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|UNKNOWN
block|,
name|ERROR_CODE
operator|.
name|NO_META_REGION
block|}
argument_list|)
expr_stmt|;
comment|// fix the problem
name|hbck
operator|=
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// run hbck again to make sure we don't see any errors
name|hbck
operator|=
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
comment|// The close silently doesn't work any more since HBASE-14614. Fix.
specifier|public
name|void
name|testHBaseFsckWithFewerMetaReplicaZnodes
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterConnection
name|c
init|=
operator|(
name|ClusterConnection
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|RegionLocations
name|rl
init|=
name|c
operator|.
name|locateRegion
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HBaseFsckRepair
operator|.
name|closeRegionSilentlyAndWait
argument_list|(
name|c
argument_list|,
name|rl
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|rl
operator|.
name|getRegionLocation
argument_list|(
literal|2
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
decl_stmt|;
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|znodePaths
operator|.
name|getZNodeForReplica
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that problem exists
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|UNKNOWN
block|,
name|ERROR_CODE
operator|.
name|NO_META_REGION
block|}
argument_list|)
expr_stmt|;
comment|// fix the problem
name|hbck
operator|=
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// run hbck again to make sure we don't see any errors
name|hbck
operator|=
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessingUnknownTables
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|USE_META_REPLICAS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotFoundException
name|t
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Expected TableNotFoundException"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
comment|// Disabled. Currently can't move hbase:meta in AMv2.
specifier|public
name|void
name|testMetaAddressChange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// checks that even when the meta's location changes, the various
comment|// caches update themselves. Uses the master operations to test
comment|// this
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
decl_stmt|;
name|String
name|baseZNode
init|=
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
name|HConstants
operator|.
name|DEFAULT_ZOOKEEPER_ZNODE_PARENT
argument_list|)
decl_stmt|;
name|String
name|primaryMetaZnode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|baseZNode
argument_list|,
name|conf
operator|.
name|get
argument_list|(
literal|"zookeeper.znode.metaserver"
argument_list|,
literal|"meta-region-server"
argument_list|)
argument_list|)
decl_stmt|;
comment|// check that the data in the znode is parseable (this would also mean the znode exists)
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|primaryMetaZnode
argument_list|)
decl_stmt|;
name|ServerName
name|currentServer
init|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|liveServers
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|ServerName
name|moveToServer
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|liveServers
control|)
block|{
if|if
condition|(
operator|!
name|currentServer
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|moveToServer
operator|=
name|s
expr_stmt|;
block|}
block|}
assert|assert
operator|(
name|moveToServer
operator|!=
literal|null
operator|)
assert|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
literal|"f"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|move
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|moveToServer
operator|.
name|getServerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
assert|assert
operator|!
name|moveToServer
operator|.
name|equals
argument_list|(
name|currentServer
argument_list|)
assert|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CurrentServer="
operator|+
name|currentServer
operator|+
literal|", moveToServer="
operator|+
name|moveToServer
argument_list|)
expr_stmt|;
specifier|final
name|int
name|max
init|=
literal|10000
decl_stmt|;
do|do
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|data
operator|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|primaryMetaZnode
argument_list|)
expr_stmt|;
name|currentServer
operator|=
name|ProtobufUtil
operator|.
name|toServerName
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|moveToServer
operator|.
name|equals
argument_list|(
name|currentServer
argument_list|)
operator|&&
name|i
operator|<
name|max
condition|)
do|;
comment|//wait for 10 seconds overall
assert|assert
operator|(
name|i
operator|!=
name|max
operator|)
assert|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdownOfReplicaHolder
parameter_list|()
throws|throws
name|Exception
block|{
comment|// checks that the when the server holding meta replica is shut down, the meta replica
comment|// can be recovered
try|try
init|(
name|ClusterConnection
name|conn
init|=
operator|(
name|ClusterConnection
operator|)
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
init|)
block|{
name|RegionLocations
name|rl
init|=
name|conn
operator|.
name|locateRegion
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegionLocation
name|hrl
init|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ServerName
name|oldServer
init|=
name|hrl
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseClusterInterface
argument_list|()
operator|.
name|killRegionServer
argument_list|(
name|oldServer
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Waiting for the replica "
operator|+
name|hrl
operator|.
name|getRegionInfo
argument_list|()
operator|+
literal|" to come up"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|//wait for the detection/recovery
name|rl
operator|=
name|conn
operator|.
name|locateRegion
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hrl
operator|=
name|rl
operator|.
name|getRegionLocation
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
do|while
condition|(
operator|(
name|hrl
operator|==
literal|null
operator|||
name|hrl
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|oldServer
argument_list|)
operator|)
operator|&&
name|i
operator|<
literal|3
condition|)
do|;
name|assertTrue
argument_list|(
name|i
operator|!=
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Test
comment|// Disabled because fsck and this needs work for AMv2
specifier|public
name|void
name|testHBaseFsckWithExcessMetaReplicas
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a meta replica (this will be the 4th one) and assign it
name|HRegionInfo
name|h
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assignRegion
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|HBaseFsckRepair
operator|.
name|waitUntilAssigned
argument_list|(
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
argument_list|,
name|h
argument_list|)
expr_stmt|;
comment|// check that problem exists
name|HBaseFsck
name|hbck
init|=
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{
name|ERROR_CODE
operator|.
name|UNKNOWN
block|,
name|ERROR_CODE
operator|.
name|SHOULD_NOT_BE_DEPLOYED
block|}
argument_list|)
expr_stmt|;
comment|// fix the problem
name|hbck
operator|=
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// run hbck again to make sure we don't see any errors
name|hbck
operator|=
name|doFsck
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertErrors
argument_list|(
name|hbck
argument_list|,
operator|new
name|ERROR_CODE
index|[]
block|{}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

