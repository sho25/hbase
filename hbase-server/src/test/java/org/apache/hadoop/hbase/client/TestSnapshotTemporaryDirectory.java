begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
operator|.
name|SnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ConstantSizeRegionSplitPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDescriptionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotDoesNotExistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotManifestV1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotManifestV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
operator|.
name|SnapshotTestingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_comment
comment|/**  * This class tests that the use of a temporary snapshot directory supports snapshot functionality  * while the temporary directory is on a different file system than the root directory  *<p>  * This is an end-to-end test for the snapshot utility  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSnapshotTemporaryDirectory
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSnapshotTemporaryDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|SnapshotManifestV1
operator|.
name|DESCRIPTOR_VERSION
argument_list|,
name|SnapshotManifestV2
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
specifier|public
name|int
name|manifestVersion
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSnapshotTemporaryDirectory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|NUM_RS
init|=
literal|2
decl_stmt|;
specifier|protected
specifier|static
name|String
name|TEMP_DIR
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|""
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|Admin
name|admin
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|STRING_TABLE_NAME
init|=
literal|"test"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|TEST_FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|STRING_TABLE_NAME
argument_list|)
decl_stmt|;
comment|/**    * Setup the config for the cluster    *    * @throws Exception on failure    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConf
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_RS
argument_list|)
expr_stmt|;
name|admin
operator|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setupConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
comment|// disable the ui
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.regionsever.info.port"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// change the flush size to a small amount, regulating number of store files
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.memstore.flush.size"
argument_list|,
literal|25000
argument_list|)
expr_stmt|;
comment|// so make sure we get a compaction when doing a load, but keep around some
comment|// files in the store
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// block writes if we get to 12 store files
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.blockingStoreFiles"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// Enable snapshot
name|conf
operator|.
name|setBoolean
argument_list|(
name|SnapshotManager
operator|.
name|HBASE_SNAPSHOT_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_REGION_SPLIT_POLICY_KEY
argument_list|,
name|ConstantSizeRegionSplitPolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|SnapshotDescriptionUtils
operator|.
name|SNAPSHOT_WORKING_DIR
argument_list|,
literal|"file://"
operator|+
name|TEMP_DIR
operator|+
literal|"/.tmpdir/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setRegionReplication
argument_list|(
name|getNumReplicas
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|TEST_FAM
block|}
argument_list|,
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|getNumReplicas
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|deleteAllSnapshots
argument_list|(
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|deleteArchiveDirectory
argument_list|(
name|UTIL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupTest
parameter_list|()
block|{
try|try
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|TEMP_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failure shutting down cluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRestoreDisabledSnapshot
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|tid
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtb-"
operator|+
name|tid
argument_list|)
decl_stmt|;
name|String
name|emptySnapshot
init|=
literal|"emptySnaptb-"
operator|+
name|tid
decl_stmt|;
name|String
name|snapshotName0
init|=
literal|"snaptb0-"
operator|+
name|tid
decl_stmt|;
name|String
name|snapshotName1
init|=
literal|"snaptb1-"
operator|+
name|tid
decl_stmt|;
name|int
name|snapshot0Rows
decl_stmt|;
name|int
name|snapshot1Rows
decl_stmt|;
comment|// create Table and disable it
name|SnapshotTestingUtils
operator|.
name|createTable
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// take an empty snapshot
name|takeSnapshot
argument_list|(
name|tableName
argument_list|,
name|emptySnapshot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// enable table and insert data
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
literal|500
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|snapshot0Rows
operator|=
name|UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// take a snapshot
name|takeSnapshot
argument_list|(
name|tableName
argument_list|,
name|snapshotName0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// enable table and insert more data
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
literal|500
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|snapshot1Rows
operator|=
name|UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
name|snapshot1Rows
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|takeSnapshot
argument_list|(
name|tableName
argument_list|,
name|snapshotName1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Restore from snapshot-0
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|snapshotName0
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
name|snapshot0Rows
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyReplicasCameOnline
argument_list|(
name|tableName
argument_list|,
name|admin
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restore from emptySnapshot
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|emptySnapshot
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyReplicasCameOnline
argument_list|(
name|tableName
argument_list|,
name|admin
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restore from snapshot-1
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|snapshotName1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
name|snapshot1Rows
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyReplicasCameOnline
argument_list|(
name|tableName
argument_list|,
name|admin
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restore from snapshot-1
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|snapshotName1
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
name|snapshot1Rows
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyReplicasCameOnline
argument_list|(
name|tableName
argument_list|,
name|admin
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRestoreEnabledSnapshot
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|tid
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testtb-"
operator|+
name|tid
argument_list|)
decl_stmt|;
name|String
name|emptySnapshot
init|=
literal|"emptySnaptb-"
operator|+
name|tid
decl_stmt|;
name|String
name|snapshotName0
init|=
literal|"snaptb0-"
operator|+
name|tid
decl_stmt|;
name|String
name|snapshotName1
init|=
literal|"snaptb1-"
operator|+
name|tid
decl_stmt|;
name|int
name|snapshot0Rows
decl_stmt|;
name|int
name|snapshot1Rows
decl_stmt|;
comment|// create Table
name|SnapshotTestingUtils
operator|.
name|createTable
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
comment|// take an empty snapshot
name|takeSnapshot
argument_list|(
name|tableName
argument_list|,
name|emptySnapshot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Insert data
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
literal|500
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|snapshot0Rows
operator|=
name|UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
comment|// take a snapshot
name|takeSnapshot
argument_list|(
name|tableName
argument_list|,
name|snapshotName0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Insert more data
name|SnapshotTestingUtils
operator|.
name|loadData
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
literal|500
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|snapshot1Rows
operator|=
name|UTIL
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
name|snapshot1Rows
argument_list|)
expr_stmt|;
name|takeSnapshot
argument_list|(
name|tableName
argument_list|,
name|snapshotName1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Restore from snapshot-0
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|snapshotName0
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
name|snapshot0Rows
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyReplicasCameOnline
argument_list|(
name|tableName
argument_list|,
name|admin
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restore from emptySnapshot
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|emptySnapshot
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyReplicasCameOnline
argument_list|(
name|tableName
argument_list|,
name|admin
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restore from snapshot-1
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|snapshotName1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
name|snapshot1Rows
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyReplicasCameOnline
argument_list|(
name|tableName
argument_list|,
name|admin
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|)
expr_stmt|;
comment|// Restore from snapshot-1
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|snapshotName1
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyRowCount
argument_list|(
name|UTIL
argument_list|,
name|tableName
argument_list|,
name|snapshot1Rows
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|verifyReplicasCameOnline
argument_list|(
name|tableName
argument_list|,
name|admin
argument_list|,
name|getNumReplicas
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test snapshotting a table that is offline    *    * @throws Exception if snapshot does not complete successfully    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testOfflineTableSnapshot
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
comment|// make sure we don't fail on listing snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// put some stuff in the table
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|UTIL
operator|.
name|loadTable
argument_list|(
name|table
argument_list|,
name|TEST_FAM
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"FS state before disable:"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// XXX if this is flakey, might want to consider using the async version and looping as
comment|// disableTable can succeed and still timeout.
name|admin
operator|.
name|disableTable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"FS state before snapshot:"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// take a snapshot of the disabled table
specifier|final
name|String
name|SNAPSHOT_NAME
init|=
literal|"offlineTableSnapshot"
decl_stmt|;
name|String
name|snapshot
init|=
name|SNAPSHOT_NAME
decl_stmt|;
name|takeSnapshot
argument_list|(
name|TABLE_NAME
argument_list|,
name|SNAPSHOT_NAME
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshot completed."
argument_list|)
expr_stmt|;
comment|// make sure we have the snapshot
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|SnapshotTestingUtils
operator|.
name|assertOneSnapshotThatMatches
argument_list|(
name|admin
argument_list|,
name|snapshot
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
comment|// make sure its a valid snapshot
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|rootDir
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"FS state after snapshot:"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|confirmSnapshotValid
argument_list|(
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|TABLE_NAME
argument_list|,
name|TEST_FAM
argument_list|,
name|rootDir
argument_list|,
name|admin
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that snapshot has correct contents by taking snapshot, cloning it, then affirming    * the contents of the original and cloned table match    *    * @throws Exception if snapshot does not complete successfully    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testSnapshotCloneContents
parameter_list|()
throws|throws
name|Exception
block|{
comment|// make sure we don't fail on listing snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
comment|// put some stuff in the table
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|UTIL
operator|.
name|loadTable
argument_list|(
name|table
argument_list|,
name|TEST_FAM
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|snapshot1
init|=
literal|"TableSnapshot1"
decl_stmt|;
name|takeSnapshot
argument_list|(
name|TABLE_NAME
argument_list|,
name|snapshot1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshot1 completed."
argument_list|)
expr_stmt|;
name|TableName
name|clone
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"Table1Clone"
argument_list|)
decl_stmt|;
name|admin
operator|.
name|cloneSnapshot
argument_list|(
name|snapshot1
argument_list|,
name|clone
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Scan
name|original
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|Scan
name|cloned
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|originalScan
init|=
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TABLE_NAME
argument_list|)
operator|.
name|getScanner
argument_list|(
name|original
argument_list|)
decl_stmt|;
name|ResultScanner
name|clonedScan
init|=
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"Table1Clone"
argument_list|)
argument_list|)
operator|.
name|getScanner
argument_list|(
name|cloned
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|i
init|=
name|originalScan
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|i2
init|=
name|clonedScan
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|i2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|(
name|TEST_FAM
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|i2
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|(
name|TEST_FAM
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|i2
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshot1
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|clone
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testOfflineTableSnapshotWithEmptyRegion
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test with an empty table with one region
comment|// make sure we don't fail on listing snapshots
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"FS state before disable:"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|TABLE_NAME
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"FS state before snapshot:"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// take a snapshot of the disabled table
name|String
name|snapshot
init|=
literal|"testOfflineTableSnapshotWithEmptyRegion"
decl_stmt|;
name|takeSnapshot
argument_list|(
name|TABLE_NAME
argument_list|,
name|snapshot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshot completed."
argument_list|)
expr_stmt|;
comment|// make sure we have the snapshot
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|SnapshotTestingUtils
operator|.
name|assertOneSnapshotThatMatches
argument_list|(
name|admin
argument_list|,
name|snapshot
argument_list|,
name|TABLE_NAME
argument_list|)
decl_stmt|;
comment|// make sure its a valid snapshot
name|FileSystem
name|fs
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|rootDir
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"FS state after snapshot:"
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|emptyCfs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|TEST_FAM
argument_list|)
decl_stmt|;
comment|// no file in the region
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|nonEmptyCfs
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|SnapshotTestingUtils
operator|.
name|confirmSnapshotValid
argument_list|(
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|TABLE_NAME
argument_list|,
name|nonEmptyCfs
argument_list|,
name|emptyCfs
argument_list|,
name|rootDir
argument_list|,
name|admin
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshot
argument_list|)
expr_stmt|;
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
comment|// Ensures that the snapshot is transferred to the proper completed snapshot directory
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testEnsureTemporaryDirectoryTransfer
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testListTableSnapshots"
argument_list|)
decl_stmt|;
try|try
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName2
argument_list|)
decl_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|TEST_FAM
block|}
argument_list|,
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|table1Snapshot1
init|=
literal|"Table1Snapshot1"
decl_stmt|;
name|takeSnapshot
argument_list|(
name|TABLE_NAME
argument_list|,
name|table1Snapshot1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshot1 completed."
argument_list|)
expr_stmt|;
name|String
name|table1Snapshot2
init|=
literal|"Table1Snapshot2"
decl_stmt|;
name|takeSnapshot
argument_list|(
name|TABLE_NAME
argument_list|,
name|table1Snapshot2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Snapshot2 completed."
argument_list|)
expr_stmt|;
name|String
name|table2Snapshot1
init|=
literal|"Table2Snapshot1"
decl_stmt|;
name|takeSnapshot
argument_list|(
name|TABLE_NAME
argument_list|,
name|table2Snapshot1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table2Snapshot1 completed."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|listTableSnapshots
init|=
name|admin
operator|.
name|listTableSnapshots
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"test.*"
argument_list|)
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listTableSnapshotNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|listTableSnapshots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SnapshotDescription
name|s
range|:
name|listTableSnapshots
control|)
block|{
name|listTableSnapshotNames
operator|.
name|add
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|listTableSnapshotNames
operator|.
name|contains
argument_list|(
name|table1Snapshot1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listTableSnapshotNames
operator|.
name|contains
argument_list|(
name|table1Snapshot2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listTableSnapshotNames
operator|.
name|contains
argument_list|(
name|table2Snapshot1
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|admin
operator|.
name|deleteSnapshots
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
literal|"Table.*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SnapshotDoesNotExistException
name|ignore
parameter_list|)
block|{       }
if|if
condition|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName2
argument_list|)
condition|)
block|{
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName2
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|takeSnapshot
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|boolean
name|disabled
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotType
name|type
init|=
name|disabled
condition|?
name|SnapshotType
operator|.
name|DISABLED
else|:
name|SnapshotType
operator|.
name|FLUSH
decl_stmt|;
name|SnapshotDescription
name|desc
init|=
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
argument_list|,
name|type
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|manifestVersion
argument_list|)
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

