begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests class that validates that "post" observer hook methods are only invoked when the operation was successful.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMasterObserverPostCalls
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMasterObserverPostCalls
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestMasterObserverPostCalls
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|setupConf
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|setupConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|conf
operator|.
name|setInt
argument_list|(
name|MasterProcedureConstants
operator|.
name|MASTER_PROCEDURE_THREADS
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|MasterCoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|MasterObserverForTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupTest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failure shutting down cluster"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MasterObserverForTest
implements|implements
name|MasterCoprocessor
implements|,
name|MasterObserver
block|{
specifier|private
name|AtomicInteger
name|postHookCalls
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|MasterObserver
argument_list|>
name|getMasterObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|CoprocessorEnvironment
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|postHookCalls
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|postHookCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postModifyNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|desc
parameter_list|)
block|{
name|postHookCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCreateNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|desc
parameter_list|)
block|{
name|postHookCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableDescriptor
name|td
parameter_list|,
name|RegionInfo
index|[]
name|regions
parameter_list|)
block|{
name|postHookCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tn
parameter_list|,
name|TableDescriptor
name|td
parameter_list|)
block|{
name|postHookCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDisableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tn
parameter_list|)
block|{
name|postHookCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tn
parameter_list|)
block|{
name|postHookCalls
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostDeleteNamespace
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|ns
init|=
literal|"postdeletens"
decl_stmt|;
specifier|final
name|TableName
name|tn1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|ns
argument_list|,
literal|"table1"
argument_list|)
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|ns
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tn1
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterObserverForTest
name|observer
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|MasterObserverForTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|preCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Deleting a non-empty namespace should be disallowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Pass
block|}
name|int
name|postCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected no invocations of postDeleteNamespace when the operation fails"
argument_list|,
name|preCount
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
comment|// Disable and delete the table so that we can delete the NS.
name|admin
operator|.
name|disableTable
argument_list|(
name|tn1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tn1
argument_list|)
expr_stmt|;
comment|// Validate that the postDeletNS hook is invoked
name|preCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|postCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 invocation of postDeleteNamespace"
argument_list|,
name|preCount
operator|+
literal|1
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostModifyNamespace
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|ns
init|=
literal|"postmodifyns"
decl_stmt|;
name|NamespaceDescriptor
name|nsDesc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|ns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|nsDesc
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterObserverForTest
name|observer
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|MasterObserverForTest
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|preCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|modifyNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
literal|"nonexistent"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Modifying a missing namespace should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Pass
block|}
name|int
name|postCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected no invocations of postModifyNamespace when the operation fails"
argument_list|,
name|preCount
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
comment|// Validate that the postDeletNS hook is invoked
name|preCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
name|admin
operator|.
name|modifyNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|nsDesc
argument_list|)
operator|.
name|addConfiguration
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|postCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 invocation of postModifyNamespace"
argument_list|,
name|preCount
operator|+
literal|1
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostCreateNamespace
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|String
name|ns
init|=
literal|"postcreatens"
decl_stmt|;
name|HMaster
name|master
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterObserverForTest
name|observer
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|MasterObserverForTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Validate that the post hook is called
name|int
name|preCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|NamespaceDescriptor
name|nsDesc
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|ns
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|nsDesc
argument_list|)
expr_stmt|;
name|int
name|postCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 invocation of postModifyNamespace"
argument_list|,
name|preCount
operator|+
literal|1
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
comment|// Then, validate that it's not called when the call fails
name|preCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createNamespace
argument_list|(
name|nsDesc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creating an already present namespace should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Pass
block|}
name|postCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected no invocations of postModifyNamespace when the operation fails"
argument_list|,
name|preCount
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostCreateTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"postcreatetable"
argument_list|)
decl_stmt|;
specifier|final
name|TableDescriptor
name|td
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tn
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterObserverForTest
name|observer
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|MasterObserverForTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Validate that the post hook is called
name|int
name|preCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|int
name|postCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 invocation of postCreateTable"
argument_list|,
name|preCount
operator|+
literal|1
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
comment|// Then, validate that it's not called when the call fails
name|preCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creating an already present table should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Pass
block|}
name|postCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected no invocations of postCreateTable when the operation fails"
argument_list|,
name|preCount
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostModifyTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"postmodifytable"
argument_list|)
decl_stmt|;
specifier|final
name|TableDescriptor
name|td
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tn
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterObserverForTest
name|observer
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|MasterObserverForTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create the table
name|admin
operator|.
name|createTable
argument_list|(
name|td
argument_list|)
expr_stmt|;
comment|// Validate that the post hook is called
name|int
name|preCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|admin
operator|.
name|modifyTable
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|int
name|postCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 invocation of postModifyTable"
argument_list|,
name|preCount
operator|+
literal|1
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
comment|// Then, validate that it's not called when the call fails
name|preCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|modifyTable
argument_list|(
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"missing"
argument_list|)
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|td
operator|.
name|getColumnFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Modifying a missing table should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Pass
block|}
name|postCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected no invocations of postModifyTable when the operation fails"
argument_list|,
name|preCount
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostDisableTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"postdisabletable"
argument_list|)
decl_stmt|;
specifier|final
name|TableDescriptor
name|td
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tn
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterObserverForTest
name|observer
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|MasterObserverForTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create the table and disable it
name|admin
operator|.
name|createTable
argument_list|(
name|td
argument_list|)
expr_stmt|;
comment|// Validate that the post hook is called
name|int
name|preCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|postCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 invocation of postDisableTable"
argument_list|,
name|preCount
operator|+
literal|1
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
comment|// Then, validate that it's not called when the call fails
name|preCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"Missing"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Disabling a missing table should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Pass
block|}
name|postCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected no invocations of postDisableTable when the operation fails"
argument_list|,
name|preCount
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostDeleteTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"postdeletetable"
argument_list|)
decl_stmt|;
specifier|final
name|TableDescriptor
name|td
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tn
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterObserverForTest
name|observer
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
operator|.
name|findCoprocessor
argument_list|(
name|MasterObserverForTest
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Create the table and disable it
name|admin
operator|.
name|createTable
argument_list|(
name|td
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Validate that the post hook is called
name|int
name|preCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|postCount
init|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 invocation of postDeleteTable"
argument_list|,
name|preCount
operator|+
literal|1
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
comment|// Then, validate that it's not called when the call fails
name|preCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|deleteTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"missing"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Deleting a missing table should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Pass
block|}
name|postCount
operator|=
name|observer
operator|.
name|postHookCalls
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected no invocations of postDeleteTable when the operation fails"
argument_list|,
name|preCount
argument_list|,
name|postCount
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

