begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|ExponentialCompactionWindowFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestDateTieredCompactionPolicyOverflow
extends|extends
name|AbstractTestDateTieredCompactionPolicy
block|{
annotation|@
name|Override
specifier|protected
name|void
name|config
parameter_list|()
block|{
name|super
operator|.
name|config
argument_list|()
expr_stmt|;
comment|// Set up policy
name|conf
operator|.
name|set
argument_list|(
name|StoreEngine
operator|.
name|STORE_ENGINE_CLASS_KEY
argument_list|,
literal|"org.apache.hadoop.hbase.regionserver.DateTieredStoreEngine"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CompactionConfiguration
operator|.
name|DATE_TIERED_MAX_AGE_MILLIS_KEY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CompactionConfiguration
operator|.
name|DATE_TIERED_INCOMING_WINDOW_MIN_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|ExponentialCompactionWindowFactory
operator|.
name|BASE_WINDOW_MILLIS_KEY
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|/
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|ExponentialCompactionWindowFactory
operator|.
name|WINDOWS_PER_TIER_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CompactionConfiguration
operator|.
name|DATE_TIERED_SINGLE_OUTPUT_FOR_MINOR_COMPACTION_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Special settings for compaction policy per window
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|CompactionConfiguration
operator|.
name|HBASE_HSTORE_COMPACTION_MIN_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
name|CompactionConfiguration
operator|.
name|HBASE_HSTORE_COMPACTION_MAX_KEY
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
name|CompactionConfiguration
operator|.
name|HBASE_HSTORE_COMPACTION_RATIO_KEY
argument_list|,
literal|1.2F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HStore
operator|.
name|BLOCKING_STOREFILES_KEY
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|MAJOR_COMPACTION_PERIOD
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
comment|/**    * Major compaction with maximum values    * @throws IOException with error    */
annotation|@
name|Test
specifier|public
name|void
name|maxValuesForMajor
parameter_list|()
throws|throws
name|IOException
block|{
name|long
index|[]
name|minTimestamps
init|=
operator|new
name|long
index|[]
block|{
name|Long
operator|.
name|MIN_VALUE
block|,
operator|-
literal|100
block|}
decl_stmt|;
name|long
index|[]
name|maxTimestamps
init|=
operator|new
name|long
index|[]
block|{
operator|-
literal|8
block|,
name|Long
operator|.
name|MAX_VALUE
block|}
decl_stmt|;
name|long
index|[]
name|sizes
init|=
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|1
block|}
decl_stmt|;
name|compactEquals
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|sfCreate
argument_list|(
name|minTimestamps
argument_list|,
name|maxTimestamps
argument_list|,
name|sizes
argument_list|)
argument_list|,
operator|new
name|long
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|,
operator|new
name|long
index|[]
block|{
name|Long
operator|.
name|MIN_VALUE
block|,
operator|-
literal|4611686018427387903L
block|,
literal|0
block|,
literal|4611686018427387903L
block|,
literal|9223372036854775806L
block|}
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

