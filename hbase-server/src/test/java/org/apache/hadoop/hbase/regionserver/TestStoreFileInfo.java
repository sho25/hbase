begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|ReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|ReaderContext
operator|.
name|ReaderType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test HStoreFile  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStoreFileInfo
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestStoreFileInfo
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|/**    * Validate that we can handle valid tables with '.', '_', and '-' chars.    */
annotation|@
name|Test
specifier|public
name|void
name|testStoreFileNames
parameter_list|()
block|{
name|String
index|[]
name|legalHFileLink
init|=
block|{
literal|"MyTable_02=abc012-def345"
block|,
literal|"MyTable_02.300=abc012-def345"
block|,
literal|"MyTable_02-400=abc012-def345"
block|,
literal|"MyTable_02-400.200=abc012-def345"
block|,
literal|"MyTable_02=abc012-def345_SeqId_1_"
block|,
literal|"MyTable_02=abc012-def345_SeqId_20_"
block|}
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|legalHFileLink
control|)
block|{
name|assertTrue
argument_list|(
literal|"should be a valid link: "
operator|+
name|name
argument_list|,
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should be a valid StoreFile"
operator|+
name|name
argument_list|,
name|StoreFileInfo
operator|.
name|validateStoreFileName
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"should not be a valid reference: "
operator|+
name|name
argument_list|,
name|StoreFileInfo
operator|.
name|isReference
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|refName
init|=
name|name
operator|+
literal|".6789"
decl_stmt|;
name|assertTrue
argument_list|(
literal|"should be a valid link reference: "
operator|+
name|refName
argument_list|,
name|StoreFileInfo
operator|.
name|isReference
argument_list|(
name|refName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"should be a valid StoreFile"
operator|+
name|refName
argument_list|,
name|StoreFileInfo
operator|.
name|validateStoreFileName
argument_list|(
name|refName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|illegalHFileLink
init|=
block|{
literal|".MyTable_02=abc012-def345"
block|,
literal|"-MyTable_02.300=abc012-def345"
block|,
literal|"MyTable_02-400=abc0_12-def345"
block|,
literal|"MyTable_02-400.200=abc012-def345...."
block|}
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|illegalHFileLink
control|)
block|{
name|assertFalse
argument_list|(
literal|"should not be a valid link: "
operator|+
name|name
argument_list|,
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEqualsWithLink
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|origin
init|=
operator|new
name|Path
argument_list|(
literal|"/origin"
argument_list|)
decl_stmt|;
name|Path
name|tmp
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|Path
name|mob
init|=
operator|new
name|Path
argument_list|(
literal|"/mob"
argument_list|)
decl_stmt|;
name|Path
name|archive
init|=
operator|new
name|Path
argument_list|(
literal|"/archive"
argument_list|)
decl_stmt|;
name|HFileLink
name|link1
init|=
operator|new
name|HFileLink
argument_list|(
operator|new
name|Path
argument_list|(
name|origin
argument_list|,
literal|"f1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tmp
argument_list|,
literal|"f1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|mob
argument_list|,
literal|"f1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|archive
argument_list|,
literal|"f1"
argument_list|)
argument_list|)
decl_stmt|;
name|HFileLink
name|link2
init|=
operator|new
name|HFileLink
argument_list|(
operator|new
name|Path
argument_list|(
name|origin
argument_list|,
literal|"f1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|tmp
argument_list|,
literal|"f1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|mob
argument_list|,
literal|"f1"
argument_list|)
argument_list|,
operator|new
name|Path
argument_list|(
name|archive
argument_list|,
literal|"f1"
argument_list|)
argument_list|)
decl_stmt|;
name|StoreFileInfo
name|info1
init|=
operator|new
name|StoreFileInfo
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
literal|null
argument_list|,
name|link1
argument_list|)
decl_stmt|;
name|StoreFileInfo
name|info2
init|=
operator|new
name|StoreFileInfo
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
literal|null
argument_list|,
name|link2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|info1
argument_list|,
name|info2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|info1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|info2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenErrorMessageHFileLink
parameter_list|()
throws|throws
name|IOException
throws|,
name|IllegalStateException
block|{
comment|// Test file link exception
comment|// Try to open nonsense hfilelink. Make sure exception is from HFileLink.
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
literal|"/hbase/test/0123/cf/testtb=4567-abcd"
argument_list|)
decl_stmt|;
try|try
init|(
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
name|StoreFileInfo
name|sfi
init|=
operator|new
name|StoreFileInfo
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|ReaderContext
name|context
init|=
name|sfi
operator|.
name|createReaderContext
argument_list|(
literal|false
argument_list|,
literal|1000
argument_list|,
name|ReaderType
operator|.
name|PREAD
argument_list|)
decl_stmt|;
name|sfi
operator|.
name|createReader
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|fnfe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|HFileLink
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenErrorMessageReference
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Test file link exception
comment|// Try to open nonsense hfilelink. Make sure exception is from HFileLink.
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDirOnTestFS
argument_list|()
argument_list|,
literal|"4567.abcd"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|p
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|Reference
name|r
init|=
name|Reference
operator|.
name|createBottomReference
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
decl_stmt|;
name|r
operator|.
name|write
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|StoreFileInfo
name|sfi
init|=
operator|new
name|StoreFileInfo
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|ReaderContext
name|context
init|=
name|sfi
operator|.
name|createReaderContext
argument_list|(
literal|false
argument_list|,
literal|1000
argument_list|,
name|ReaderType
operator|.
name|PREAD
argument_list|)
decl_stmt|;
name|sfi
operator|.
name|createReader
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|fnfe
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"->"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

