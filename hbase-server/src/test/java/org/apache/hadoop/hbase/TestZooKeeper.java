begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|SimpleLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|EmptyWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKAssign
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooDefs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|ZooKeeper
operator|.
name|States
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestZooKeeper
block|{
specifier|private
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test we can first start the ZK cluster by itself
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|ZK_SESSION_TIMEOUT
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCER_CLASS
argument_list|,
name|MockLoadBalancer
operator|.
name|class
argument_list|,
name|LoadBalancer
operator|.
name|class
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|ensureSomeRegionServersAvailable
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ZooKeeperWatcher
name|getZooKeeperWatcher
parameter_list|(
name|HConnection
name|c
parameter_list|)
throws|throws
name|NoSuchMethodException
throws|,
name|InvocationTargetException
throws|,
name|IllegalAccessException
block|{
name|Method
name|getterZK
init|=
name|c
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getKeepAliveZooKeeperWatcher"
argument_list|)
decl_stmt|;
name|getterZK
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|ZooKeeperWatcher
operator|)
name|getterZK
operator|.
name|invoke
argument_list|(
name|c
argument_list|)
return|;
block|}
comment|/**    * See HBASE-1232 and http://wiki.apache.org/hadoop/ZooKeeper/FAQ#4.    * @throws IOException    * @throws InterruptedException    */
comment|// fails frequently, disabled for now, see HBASE-6406
comment|//@Test
specifier|public
name|void
name|testClientSessionExpired
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// We don't want to share the connection as we will check its state
name|c
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_INSTANCE_ID
argument_list|,
literal|"1111"
argument_list|)
expr_stmt|;
name|HConnection
name|connection
init|=
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ZooKeeperWatcher
name|connectionZK
init|=
name|getZooKeeperWatcher
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ZooKeeperWatcher= 0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|connectionZK
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"getRecoverableZooKeeper= 0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|connectionZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"session="
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|connectionZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|expireSession
argument_list|(
name|connectionZK
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Before using zkw state="
operator|+
name|connectionZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// provoke session expiration by doing something with ZK
try|try
block|{
name|connectionZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getZooKeeper
argument_list|()
operator|.
name|exists
argument_list|(
literal|"/1/1"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ignored
parameter_list|)
block|{     }
comment|// Check that the old ZK connection is closed, means we did expire
name|States
name|state
init|=
name|connectionZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After using zkw state="
operator|+
name|state
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"session="
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|connectionZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// It's asynchronous, so we may have to wait a little...
specifier|final
name|long
name|limit1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3000
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|limit1
operator|&&
name|state
operator|!=
name|States
operator|.
name|CLOSED
condition|)
block|{
name|state
operator|=
name|connectionZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"After using zkw loop="
operator|+
name|state
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"ZooKeeper should have timed out"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"session="
operator|+
name|Long
operator|.
name|toHexString
argument_list|(
name|connectionZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// It's surprising but sometimes we can still be in connected state.
comment|// As it's known (even if not understood) we don't make the the test fail
comment|// for this reason.)
comment|// Assert.assertTrue("state=" + state, state == States.CLOSED);
comment|// Check that the client recovered
name|ZooKeeperWatcher
name|newConnectionZK
init|=
name|getZooKeeperWatcher
argument_list|(
name|connection
argument_list|)
decl_stmt|;
name|States
name|state2
init|=
name|newConnectionZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"After new get state="
operator|+
name|state2
argument_list|)
expr_stmt|;
comment|// As it's an asynchronous event we may got the same ZKW, if it's not
comment|//  yet invalidated. Hence this loop.
specifier|final
name|long
name|limit2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3000
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|limit2
operator|&&
name|state2
operator|!=
name|States
operator|.
name|CONNECTED
operator|&&
name|state2
operator|!=
name|States
operator|.
name|CONNECTING
condition|)
block|{
name|newConnectionZK
operator|=
name|getZooKeeperWatcher
argument_list|(
name|connection
argument_list|)
expr_stmt|;
name|state2
operator|=
name|newConnectionZK
operator|.
name|getRecoverableZooKeeper
argument_list|()
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"After new get state loop="
operator|+
name|state2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|state2
operator|==
name|States
operator|.
name|CONNECTED
operator|||
name|state2
operator|==
name|States
operator|.
name|CONNECTING
argument_list|)
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testRegionServerSessionExpired
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testRegionServerSessionExpired"
argument_list|)
expr_stmt|;
name|int
name|metaIndex
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getServerWithMeta
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|expireRegionServerSession
argument_list|(
name|metaIndex
argument_list|)
expr_stmt|;
name|testSanity
argument_list|(
literal|"testRegionServerSessionExpired"
argument_list|)
expr_stmt|;
block|}
comment|// @Test Disabled because seems to make no sense expiring master session
comment|// and then trying to create table (down in testSanity); on master side
comment|// it will fail because the master's session has expired -- St.Ack 07/24/2012
specifier|public
name|void
name|testMasterSessionExpired
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMasterSessionExpired"
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|expireMasterSession
argument_list|()
expr_stmt|;
name|testSanity
argument_list|(
literal|"testMasterSessionExpired"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Master recovery when the znode already exists. Internally, this    *  test differs from {@link #testMasterSessionExpired} because here    *  the master znode will exist in ZK.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testMasterZKSessionRecoveryFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMasterZKSessionRecoveryFailure"
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|m
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|m
operator|.
name|abort
argument_list|(
literal|"Test recovery from zk session expired"
argument_list|,
operator|new
name|KeeperException
operator|.
name|SessionExpiredException
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|m
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|testSanity
argument_list|(
literal|"testMasterZKSessionRecoveryFailure"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure we can use the cluster    * @throws Exception    */
specifier|private
name|void
name|testSanity
parameter_list|(
specifier|final
name|String
name|testName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
name|testName
operator|+
literal|"_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|family
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|HTable
name|table
init|=
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testdata"
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Putting table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleZK
parameter_list|()
throws|throws
name|IOException
throws|,
name|NoSuchMethodException
throws|,
name|InvocationTargetException
throws|,
name|IllegalAccessException
block|{
name|HTable
name|localMeta
init|=
operator|new
name|HTable
argument_list|(
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
name|Configuration
name|otherConf
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|otherConf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|,
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|HTable
name|ipMeta
init|=
operator|new
name|HTable
argument_list|(
name|otherConf
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
decl_stmt|;
comment|// dummy, just to open the connection
specifier|final
name|byte
index|[]
name|row
init|=
operator|new
name|byte
index|[]
block|{
literal|'r'
block|}
decl_stmt|;
name|localMeta
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|ipMeta
operator|.
name|exists
argument_list|(
operator|new
name|Get
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure they aren't the same
name|ZooKeeperWatcher
name|z1
init|=
name|getZooKeeperWatcher
argument_list|(
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|localMeta
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ZooKeeperWatcher
name|z2
init|=
name|getZooKeeperWatcher
argument_list|(
name|HConnectionManager
operator|.
name|getConnection
argument_list|(
name|otherConf
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|z1
operator|==
name|z2
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|z1
operator|.
name|getQuorum
argument_list|()
operator|.
name|equals
argument_list|(
name|z2
operator|.
name|getQuorum
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|localMeta
operator|.
name|close
argument_list|()
expr_stmt|;
name|ipMeta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a znode with data    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateWithParents
parameter_list|()
throws|throws
name|Exception
block|{
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|TestZooKeeper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
literal|"/l1/l2/l3/l4/testCreateWithParents"
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
literal|"/l1/l2/l3/l4/testCreateWithParents"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|expectedData
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|zkw
argument_list|,
literal|"/l1"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
literal|"/testCreateWithParents"
argument_list|,
name|expectedData
argument_list|)
expr_stmt|;
name|data
operator|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
literal|"/testCreateWithParents"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|expectedData
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|zkw
argument_list|,
literal|"/testCreateWithParents"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a bunch of znodes in a hierarchy, try deleting one that has childs (it will fail), then    * delete it recursively, then delete the last znode    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testZNodeDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
argument_list|,
name|TestZooKeeper
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
literal|"/l1/l2/l3/l4"
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zkw
argument_list|,
literal|"/l1/l2"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"We should not be able to delete if znode has childs"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|ZKUtil
operator|.
name|getDataNoWatch
argument_list|(
name|zkw
argument_list|,
literal|"/l1/l2/l3/l4"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|zkw
argument_list|,
literal|"/l1/l2"
argument_list|)
expr_stmt|;
comment|// make sure it really is deleted
name|assertNull
argument_list|(
name|ZKUtil
operator|.
name|getDataNoWatch
argument_list|(
name|zkw
argument_list|,
literal|"/l1/l2/l3/l4"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// do the same delete again and make sure it doesn't crash
name|ZKUtil
operator|.
name|deleteNodeRecursively
argument_list|(
name|zkw
argument_list|,
literal|"/l1/l2"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|deleteNode
argument_list|(
name|zkw
argument_list|,
literal|"/l1"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ZKUtil
operator|.
name|getDataNoWatch
argument_list|(
name|zkw
argument_list|,
literal|"/l1/l2"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClusterKey
parameter_list|()
throws|throws
name|Exception
block|{
name|testKey
argument_list|(
literal|"server"
argument_list|,
literal|"2181"
argument_list|,
literal|"hbase"
argument_list|)
expr_stmt|;
name|testKey
argument_list|(
literal|"server1,server2,server3"
argument_list|,
literal|"2181"
argument_list|,
literal|"hbase"
argument_list|)
expr_stmt|;
try|try
block|{
name|ZKUtil
operator|.
name|transformClusterKey
argument_list|(
literal|"2181:hbase"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// OK
block|}
block|}
specifier|private
name|void
name|testKey
parameter_list|(
name|String
name|ensemble
parameter_list|,
name|String
name|port
parameter_list|,
name|String
name|znode
parameter_list|)
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|ensemble
operator|+
literal|":"
operator|+
name|port
operator|+
literal|":"
operator|+
name|znode
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|ZKUtil
operator|.
name|transformClusterKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ensemble
argument_list|,
name|parts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|port
argument_list|,
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|znode
argument_list|,
name|parts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|applyClusterKeyToConf
argument_list|(
name|conf
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_QUORUM
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|parts
index|[
literal|2
index|]
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|reconstructedKey
init|=
name|ZKUtil
operator|.
name|getZooKeeperClusterKey
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|key
argument_list|,
name|reconstructedKey
argument_list|)
expr_stmt|;
block|}
comment|/**    * A test for HBASE-3238    * @throws IOException A connection attempt to zk failed    * @throws InterruptedException One of the non ZKUtil actions was interrupted    * @throws KeeperException Any of the zookeeper connections had a    * KeeperException    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateSilentIsReallySilent
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|KeeperException
throws|,
name|IOException
block|{
name|Configuration
name|c
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|aclZnode
init|=
literal|"/aclRoot"
decl_stmt|;
name|String
name|quorumServers
init|=
name|ZKConfig
operator|.
name|getZKQuorumServersString
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|int
name|sessionTimeout
init|=
literal|5
operator|*
literal|1000
decl_stmt|;
comment|// 5 seconds
name|ZooKeeper
name|zk
init|=
operator|new
name|ZooKeeper
argument_list|(
name|quorumServers
argument_list|,
name|sessionTimeout
argument_list|,
name|EmptyWatcher
operator|.
name|instance
argument_list|)
decl_stmt|;
name|zk
operator|.
name|addAuthInfo
argument_list|(
literal|"digest"
argument_list|,
literal|"hbase:rox"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assumes the  root of the ZooKeeper space is writable as it creates a node
comment|// wherever the cluster home is defined.
name|ZooKeeperWatcher
name|zk2
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"testMasterAddressManagerFromZK"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Save the previous ACL
name|Stat
name|s
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|ACL
argument_list|>
name|oldACL
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|s
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|oldACL
operator|=
name|zk
operator|.
name|getACL
argument_list|(
literal|"/"
argument_list|,
name|s
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|code
argument_list|()
condition|)
block|{
case|case
name|CONNECTIONLOSS
case|:
case|case
name|SESSIONEXPIRED
case|:
case|case
name|OPERATIONTIMEOUT
case|:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Possibly transient ZooKeeper exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|// I set this acl after the attempted creation of the cluster home node.
comment|// Add retries in case of retryable zk exceptions.
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|zk
operator|.
name|setACL
argument_list|(
literal|"/"
argument_list|,
name|ZooDefs
operator|.
name|Ids
operator|.
name|CREATOR_ALL_ACL
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|code
argument_list|()
condition|)
block|{
case|case
name|CONNECTIONLOSS
case|:
case|case
name|SESSIONEXPIRED
case|:
case|case
name|OPERATIONTIMEOUT
case|:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Possibly transient ZooKeeper exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
name|e
throw|;
block|}
block|}
block|}
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|zk
operator|.
name|create
argument_list|(
name|aclZnode
argument_list|,
literal|null
argument_list|,
name|ZooDefs
operator|.
name|Ids
operator|.
name|CREATOR_ALL_ACL
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|.
name|code
argument_list|()
condition|)
block|{
case|case
name|CONNECTIONLOSS
case|:
case|case
name|SESSIONEXPIRED
case|:
case|case
name|OPERATIONTIMEOUT
case|:
name|LOG
operator|.
name|warn
argument_list|(
literal|"Possibly transient ZooKeeper exception: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
name|e
throw|;
block|}
block|}
block|}
name|zk
operator|.
name|close
argument_list|()
expr_stmt|;
name|ZKUtil
operator|.
name|createAndFailSilent
argument_list|(
name|zk2
argument_list|,
name|aclZnode
argument_list|)
expr_stmt|;
comment|// Restore the ACL
name|ZooKeeper
name|zk3
init|=
operator|new
name|ZooKeeper
argument_list|(
name|quorumServers
argument_list|,
name|sessionTimeout
argument_list|,
name|EmptyWatcher
operator|.
name|instance
argument_list|)
decl_stmt|;
name|zk3
operator|.
name|addAuthInfo
argument_list|(
literal|"digest"
argument_list|,
literal|"hbase:rox"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|zk3
operator|.
name|setACL
argument_list|(
literal|"/"
argument_list|,
name|oldACL
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zk3
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test should not fail with NPE when getChildDataAndWatchForNewChildren    * invoked with wrongNode    */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
name|void
name|testGetChildDataAndWatchForNewChildrenShouldNotThrowNPE
parameter_list|()
throws|throws
name|Exception
block|{
name|ZooKeeperWatcher
name|zkw
init|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"testGetChildDataAndWatchForNewChildrenShouldNotThrowNPE"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|getChildDataAndWatchForNewChildren
argument_list|(
name|zkw
argument_list|,
literal|"/wrongNode"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests that the master does not call retainAssignment after recovery from expired zookeeper    * session. Without the HBASE-6046 fix master always tries to assign all the user regions by    * calling retainAssignment.    */
annotation|@
name|Test
specifier|public
name|void
name|testRegionAssignmentAfterMasterRecoveryDueToZKExpiry
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|startRegionServer
argument_list|()
expr_stmt|;
name|HMaster
name|m
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|ZooKeeperWatcher
name|zkw
init|=
name|m
operator|.
name|getZooKeeperWatcher
argument_list|()
decl_stmt|;
name|int
name|expectedNumOfListeners
init|=
name|zkw
operator|.
name|getNumberOfListeners
argument_list|()
decl_stmt|;
comment|// now the cluster is up. So assign some regions.
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
index|[]
name|SPLIT_KEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"d"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"h"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"j"
argument_list|)
block|}
decl_stmt|;
name|String
name|tableName
init|=
literal|"testRegionAssignmentAfterMasterRecoveryDueToZKExpiry"
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|,
name|SPLIT_KEYS
argument_list|)
expr_stmt|;
name|ZooKeeperWatcher
name|zooKeeperWatcher
init|=
name|HBaseTestingUtility
operator|.
name|getZooKeeperWatcher
argument_list|(
name|TEST_UTIL
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|zooKeeperWatcher
argument_list|)
expr_stmt|;
name|m
operator|.
name|getZooKeeperWatcher
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|MockLoadBalancer
operator|.
name|retainAssignCalled
operator|=
literal|false
expr_stmt|;
name|m
operator|.
name|abort
argument_list|(
literal|"Test recovery from zk session expired"
argument_list|,
operator|new
name|KeeperException
operator|.
name|SessionExpiredException
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|m
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
comment|// The recovered master should not call retainAssignment, as it is not a
comment|// clean startup.
name|assertFalse
argument_list|(
literal|"Retain assignment should not be called"
argument_list|,
name|MockLoadBalancer
operator|.
name|retainAssignCalled
argument_list|)
expr_stmt|;
comment|// number of listeners should be same as the value before master aborted
name|assertEquals
argument_list|(
name|expectedNumOfListeners
argument_list|,
name|zkw
operator|.
name|getNumberOfListeners
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests whether the logs are split when master recovers from a expired zookeeper session and an    * RS goes down.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|240000
argument_list|)
specifier|public
name|void
name|testLogSplittingAfterMasterRecoveryDueToZKExpiry
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|startRegionServer
argument_list|()
expr_stmt|;
name|HMaster
name|m
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
comment|// now the cluster is up. So assign some regions.
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|HTable
name|table
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byte
index|[]
index|[]
name|SPLIT_KEYS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"4"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"5"
argument_list|)
block|}
decl_stmt|;
name|String
name|tableName
init|=
literal|"testLogSplittingAfterMasterRecoveryDueToZKExpiry"
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"col"
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|SPLIT_KEYS
argument_list|)
expr_stmt|;
name|ZooKeeperWatcher
name|zooKeeperWatcher
init|=
name|HBaseTestingUtility
operator|.
name|getZooKeeperWatcher
argument_list|(
name|TEST_UTIL
argument_list|)
decl_stmt|;
name|ZKAssign
operator|.
name|blockUntilNoRIT
argument_list|(
name|zooKeeperWatcher
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Put
name|p
decl_stmt|;
name|int
name|numberOfPuts
decl_stmt|;
for|for
control|(
name|numberOfPuts
operator|=
literal|0
init|;
name|numberOfPuts
operator|<
literal|6
condition|;
name|numberOfPuts
operator|++
control|)
block|{
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|numberOfPuts
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ql"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
operator|+
name|numberOfPuts
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|getZooKeeperWatcher
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|m
operator|.
name|abort
argument_list|(
literal|"Test recovery from zk session expired"
argument_list|,
operator|new
name|KeeperException
operator|.
name|SessionExpiredException
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|m
operator|.
name|isStopped
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|abort
argument_list|(
literal|"Aborting"
argument_list|)
expr_stmt|;
comment|// Without patch for HBASE-6046 this test case will always timeout
comment|// with patch the test case should pass.
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|int
name|numberOfRows
init|=
literal|0
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|result
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|numberOfRows
operator|++
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Number of rows should be equal to number of puts."
argument_list|,
name|numberOfPuts
argument_list|,
name|numberOfRows
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|MockLoadBalancer
extends|extends
name|SimpleLoadBalancer
block|{
specifier|static
name|boolean
name|retainAssignCalled
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|retainAssignment
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|)
block|{
name|retainAssignCalled
operator|=
literal|true
expr_stmt|;
return|return
name|super
operator|.
name|retainAssignment
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

