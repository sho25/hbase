begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniClusterRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|StartMiniClusterOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|MasterTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAlwaysStandByHMaster
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAlwaysStandByHMaster
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StartMiniClusterOption
name|OPTION
init|=
name|StartMiniClusterOption
operator|.
name|builder
argument_list|()
operator|.
name|numAlwaysStandByMasters
argument_list|(
literal|1
argument_list|)
operator|.
name|numMasters
argument_list|(
literal|1
argument_list|)
operator|.
name|numRegionServers
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|MiniClusterRule
name|miniClusterRule
init|=
operator|new
name|MiniClusterRule
argument_list|(
name|OPTION
argument_list|)
decl_stmt|;
comment|/**    * Tests that the AlwaysStandByHMaster does not transition to active state even if no active    * master exists.    */
annotation|@
name|Test
specifier|public
name|void
name|testAlwaysStandBy
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|testUtil
init|=
name|miniClusterRule
operator|.
name|getTestingUtility
argument_list|()
decl_stmt|;
comment|// Make sure there is an active master.
name|assertNotNull
argument_list|(
name|testUtil
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|testUtil
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMasterThreads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Kill the only active master.
name|testUtil
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|stopMaster
argument_list|(
literal|0
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// Wait for 5s to make sure the always standby doesn't transition to active state.
name|assertFalse
argument_list|(
name|testUtil
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|waitForActiveAndReadyMaster
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add a new master.
name|HMaster
name|newActive
init|=
name|testUtil
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|startMaster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testUtil
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|waitForActiveAndReadyMaster
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Newly added master should be the active.
name|assertEquals
argument_list|(
name|newActive
operator|.
name|getServerName
argument_list|()
argument_list|,
name|testUtil
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

