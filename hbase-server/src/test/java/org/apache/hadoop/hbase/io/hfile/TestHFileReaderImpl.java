begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Test  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHFileReaderImpl
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestHFileReaderImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|static
name|KeyValue
name|toKV
parameter_list|(
name|String
name|row
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|String
name|toRowStr
parameter_list|(
name|Cell
name|c
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toString
argument_list|(
name|c
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|c
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getRowLength
argument_list|()
argument_list|)
return|;
block|}
name|Path
name|makeNewFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|ncTFile
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"basic.hfile"
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|fout
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|ncTFile
argument_list|)
decl_stmt|;
name|int
name|blocksize
init|=
name|toKV
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getLength
argument_list|()
operator|*
literal|3
decl_stmt|;
name|HFileContext
name|context
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|blocksize
argument_list|)
operator|.
name|withIncludesTags
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|HFile
operator|.
name|Writer
name|writer
init|=
name|HFile
operator|.
name|getWriterFactoryNoCache
argument_list|(
name|conf
argument_list|)
operator|.
name|withOutputStream
argument_list|(
name|fout
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|context
argument_list|)
operator|.
name|withComparator
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// 4 bytes * 3 * 2 for each key/value +
comment|// 3 for keys, 15 for values = 42 (woot)
name|writer
operator|.
name|append
argument_list|(
name|toKV
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|toKV
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|toKV
argument_list|(
literal|"g"
argument_list|)
argument_list|)
expr_stmt|;
comment|// block transition
name|writer
operator|.
name|append
argument_list|(
name|toKV
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|toKV
argument_list|(
literal|"k"
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|fout
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ncTFile
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSeekBefore
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|p
init|=
name|makeNewFile
argument_list|()
decl_stmt|;
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|int
index|[]
name|bucketSizes
init|=
block|{
literal|512
block|,
literal|2048
block|,
literal|4096
block|,
literal|64
operator|*
literal|1024
block|,
literal|128
operator|*
literal|1024
block|}
decl_stmt|;
name|BucketCache
name|bucketcache
init|=
operator|new
name|BucketCache
argument_list|(
literal|"offheap"
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|64
operator|*
literal|1024
argument_list|,
name|bucketSizes
argument_list|,
literal|5
argument_list|,
literal|64
operator|*
literal|100
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|p
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|,
name|bucketcache
argument_list|)
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
comment|// warm cache
name|HFileScanner
name|scanner
init|=
name|reader
operator|.
name|getScanner
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|toKV
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"i"
argument_list|,
name|toRowStr
argument_list|(
name|scanner
operator|.
name|getCell
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
while|while
condition|(
name|bucketcache
operator|.
name|getBlockCount
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// reopen again.
name|scanner
operator|=
name|reader
operator|.
name|getScanner
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|toKV
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"i"
argument_list|,
name|toRowStr
argument_list|(
name|scanner
operator|.
name|getCell
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|seekBefore
argument_list|(
name|toKV
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"g"
argument_list|,
name|toRowStr
argument_list|(
name|scanner
operator|.
name|getCell
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|CachedBlock
name|cachedBlock
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|bucketcache
argument_list|)
control|)
block|{
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|cachedBlock
operator|.
name|getFilename
argument_list|()
argument_list|,
name|cachedBlock
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|refCount
init|=
name|bucketcache
operator|.
name|getRpcRefCount
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
block|}
comment|// case 2
name|scanner
operator|=
name|reader
operator|.
name|getScanner
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|seekTo
argument_list|(
name|toKV
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"i"
argument_list|,
name|toRowStr
argument_list|(
name|scanner
operator|.
name|getCell
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|seekBefore
argument_list|(
name|toKV
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|CachedBlock
name|cachedBlock
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|bucketcache
argument_list|)
control|)
block|{
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|cachedBlock
operator|.
name|getFilename
argument_list|()
argument_list|,
name|cachedBlock
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|refCount
init|=
name|bucketcache
operator|.
name|getRpcRefCount
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|refCount
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// clear bucketcache
for|for
control|(
name|CachedBlock
name|cachedBlock
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|bucketcache
argument_list|)
control|)
block|{
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|cachedBlock
operator|.
name|getFilename
argument_list|()
argument_list|,
name|cachedBlock
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|bucketcache
operator|.
name|evictBlock
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
block|}
name|bucketcache
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|deleteTestDir
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|deleteTestDir
parameter_list|(
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|dataTestDir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|dataTestDir
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|dataTestDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

