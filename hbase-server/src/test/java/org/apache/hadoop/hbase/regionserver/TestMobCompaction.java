begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|START_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|fam1
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
operator|.
name|HRegionIncommon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Test mob compaction  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMobCompaction
block|{
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMobCompaction
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
specifier|private
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
specifier|private
name|HTableDescriptor
name|htd
init|=
literal|null
decl_stmt|;
specifier|private
name|HColumnDescriptor
name|hcd
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|mobCellThreshold
init|=
literal|1000
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|COLUMN_FAMILY
init|=
name|fam1
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|STARTROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|START_KEY
argument_list|)
decl_stmt|;
specifier|private
name|int
name|compactionThreshold
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.master.info.port"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.regionserver.info.port.auto"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|mobThreshold
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|mobCellThreshold
operator|=
name|mobThreshold
expr_stmt|;
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|compactionThreshold
operator|=
name|conf
operator|.
name|getInt
argument_list|(
literal|"hbase.hstore.compactionThreshold"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|htd
operator|=
name|UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|hcd
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|COLUMN_FAMILY
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setValue
argument_list|(
name|MobConstants
operator|.
name|IS_MOB
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setValue
argument_list|(
name|MobConstants
operator|.
name|MOB_THRESHOLD
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobThreshold
argument_list|)
argument_list|)
expr_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|region
operator|=
name|UTIL
operator|.
name|createLocalHRegion
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * During compaction, cells smaller than the threshold won't be affected.    */
annotation|@
name|Test
specifier|public
name|void
name|testSmallerValue
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dummyData
init|=
name|makeDummyData
argument_list|(
literal|300
argument_list|)
decl_stmt|;
comment|// smaller than mob threshold
name|HRegionIncommon
name|loader
init|=
operator|new
name|HRegionIncommon
argument_list|(
name|region
argument_list|)
decl_stmt|;
comment|// one hfile per row
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
name|createPut
argument_list|(
name|i
argument_list|,
name|dummyData
argument_list|)
decl_stmt|;
name|loader
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|loader
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Before compaction: store files"
argument_list|,
name|compactionThreshold
argument_list|,
name|countStoreFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob file count"
argument_list|,
literal|0
argument_list|,
name|countMobFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: rows"
argument_list|,
name|compactionThreshold
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob rows"
argument_list|,
literal|0
argument_list|,
name|countMobRows
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: store files"
argument_list|,
literal|1
argument_list|,
name|countStoreFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob file count"
argument_list|,
literal|0
argument_list|,
name|countMobFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: referenced mob file count"
argument_list|,
literal|0
argument_list|,
name|countReferencedMobFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: rows"
argument_list|,
name|compactionThreshold
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob rows"
argument_list|,
literal|0
argument_list|,
name|countMobRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * During compaction, the mob threshold size is changed.    */
annotation|@
name|Test
specifier|public
name|void
name|testLargerValue
parameter_list|()
throws|throws
name|Exception
block|{
name|init
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dummyData
init|=
name|makeDummyData
argument_list|(
literal|300
argument_list|)
decl_stmt|;
comment|// larger than mob threshold
name|HRegionIncommon
name|loader
init|=
operator|new
name|HRegionIncommon
argument_list|(
name|region
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
name|createPut
argument_list|(
name|i
argument_list|,
name|dummyData
argument_list|)
decl_stmt|;
name|loader
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|loader
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Before compaction: store files"
argument_list|,
name|compactionThreshold
argument_list|,
name|countStoreFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob file count"
argument_list|,
name|compactionThreshold
argument_list|,
name|countMobFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: rows"
argument_list|,
name|compactionThreshold
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob rows"
argument_list|,
name|compactionThreshold
argument_list|,
name|countMobRows
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the threshold larger than the data size
name|region
operator|.
name|getTableDesc
argument_list|()
operator|.
name|getFamily
argument_list|(
name|COLUMN_FAMILY
argument_list|)
operator|.
name|setValue
argument_list|(
name|MobConstants
operator|.
name|MOB_THRESHOLD
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|500L
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: store files"
argument_list|,
literal|1
argument_list|,
name|countStoreFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob file count"
argument_list|,
name|compactionThreshold
argument_list|,
name|countMobFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: referenced mob file count"
argument_list|,
literal|0
argument_list|,
name|countReferencedMobFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: rows"
argument_list|,
name|compactionThreshold
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob rows"
argument_list|,
literal|0
argument_list|,
name|countMobRows
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test will first generate store files, then bulk load them and trigger the compaction. When    * compaction, the cell value will be larger than the threshold.    */
annotation|@
name|Test
specifier|public
name|void
name|testMobCompactionWithBulkload
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The following will produce store files of 600.
name|init
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dummyData
init|=
name|makeDummyData
argument_list|(
literal|600
argument_list|)
decl_stmt|;
name|Path
name|hbaseRootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
name|hbaseRootDir
argument_list|,
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
name|hfiles
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|hpath
init|=
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
literal|"hfile"
operator|+
name|i
argument_list|)
decl_stmt|;
name|hfiles
operator|.
name|add
argument_list|(
name|Pair
operator|.
name|newPair
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|hpath
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|createHFile
argument_list|(
name|hpath
argument_list|,
name|i
argument_list|,
name|dummyData
argument_list|)
expr_stmt|;
block|}
comment|// The following will bulk load the above generated store files and compact, with 600(fileSize)
comment|//> 300(threshold)
name|boolean
name|result
init|=
name|region
operator|.
name|bulkLoadHFiles
argument_list|(
name|hfiles
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Bulkload result:"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: store files"
argument_list|,
name|compactionThreshold
argument_list|,
name|countStoreFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob file count"
argument_list|,
literal|0
argument_list|,
name|countMobFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: rows"
argument_list|,
name|compactionThreshold
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: mob rows"
argument_list|,
literal|0
argument_list|,
name|countMobRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: referenced mob file count"
argument_list|,
literal|0
argument_list|,
name|countReferencedMobFiles
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: store files"
argument_list|,
literal|1
argument_list|,
name|countStoreFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob file count:"
argument_list|,
literal|1
argument_list|,
name|countMobFiles
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: rows"
argument_list|,
name|compactionThreshold
argument_list|,
name|countRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: mob rows"
argument_list|,
name|compactionThreshold
argument_list|,
name|countMobRows
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: referenced mob file count"
argument_list|,
literal|1
argument_list|,
name|countReferencedMobFiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the major compaction when the zk is not connected.    * After that the major compaction will be marked as retainDeleteMarkers, the delete marks    * will be retained.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompactionWithZKError
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// use the wrong zk settings
name|conf
operator|.
name|setInt
argument_list|(
literal|"zookeeper.recovery.retry"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|ZK_SESSION_TIMEOUT
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
literal|2181
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|conf
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|byte
index|[]
name|dummyData
init|=
name|makeDummyData
argument_list|(
literal|300
argument_list|)
decl_stmt|;
comment|// larger than mob threshold
name|HRegionIncommon
name|loader
init|=
operator|new
name|HRegionIncommon
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|byte
index|[]
name|deleteRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|compactionThreshold
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"colX"
argument_list|)
argument_list|,
name|dummyData
argument_list|)
expr_stmt|;
name|loader
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|loader
operator|.
name|flushcache
argument_list|()
expr_stmt|;
block|}
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|deleteRow
argument_list|)
decl_stmt|;
name|delete
operator|.
name|deleteFamily
argument_list|(
name|COLUMN_FAMILY
argument_list|)
expr_stmt|;
name|region
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|loader
operator|.
name|flushcache
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Before compaction: store files"
argument_list|,
name|compactionThreshold
argument_list|,
name|countStoreFiles
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|compactStores
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After compaction: store files"
argument_list|,
literal|1
argument_list|,
name|countStoreFiles
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|int
name|deleteCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Cell
name|c
range|:
name|results
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getTypeByte
argument_list|()
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
operator|.
name|getCode
argument_list|()
condition|)
block|{
name|deleteCount
operator|++
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|c
argument_list|)
argument_list|,
name|deleteRow
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
comment|// assert the delete mark is retained, the major compaction is marked as
comment|// retainDeleteMarkers.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|deleteCount
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|int
name|countStoreFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Store
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|COLUMN_FAMILY
argument_list|)
decl_stmt|;
return|return
name|store
operator|.
name|getStorefilesCount
argument_list|()
return|;
block|}
specifier|private
name|int
name|countMobFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|mobDirPath
init|=
operator|new
name|Path
argument_list|(
name|MobUtils
operator|.
name|getMobRegionPath
argument_list|(
name|conf
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|hcd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|mobDirPath
argument_list|)
condition|)
block|{
name|FileStatus
index|[]
name|files
init|=
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|mobDirPath
argument_list|)
decl_stmt|;
return|return
name|files
operator|.
name|length
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|private
name|Put
name|createPut
parameter_list|(
name|int
name|rowIdx
parameter_list|,
name|byte
index|[]
name|dummyData
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|STARTROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|COLUMN_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"colX"
argument_list|)
argument_list|,
name|dummyData
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/**    * Create an HFile with the given number of bytes    */
specifier|private
name|void
name|createHFile
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|rowIdx
parameter_list|,
name|byte
index|[]
name|dummyData
parameter_list|)
throws|throws
name|IOException
block|{
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|HFile
operator|.
name|Writer
name|writer
init|=
name|HFile
operator|.
name|getWriterFactory
argument_list|(
name|conf
argument_list|,
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|withPath
argument_list|(
name|fs
argument_list|,
name|path
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|STARTROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowIdx
argument_list|)
argument_list|)
argument_list|,
name|COLUMN_FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"colX"
argument_list|)
argument_list|,
name|now
argument_list|,
name|dummyData
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|appendFileInfo
argument_list|(
name|StoreFile
operator|.
name|BULKLOAD_TIME_KEY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|countMobRows
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// Do not retrieve the mob data when scanning
name|scan
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_RAW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|scannedCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasMore
init|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
decl_stmt|;
while|while
condition|(
name|hasMore
condition|)
block|{
for|for
control|(
name|Cell
name|c
range|:
name|results
control|)
block|{
if|if
condition|(
name|MobUtils
operator|.
name|isMobReferenceCell
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|scannedCount
operator|++
expr_stmt|;
block|}
block|}
name|hasMore
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|scannedCount
return|;
block|}
specifier|private
name|int
name|countRows
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// Do not retrieve the mob data when scanning
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|scannedCount
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasMore
init|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
decl_stmt|;
while|while
condition|(
name|hasMore
condition|)
block|{
name|scannedCount
operator|+=
name|results
operator|.
name|size
argument_list|()
expr_stmt|;
name|hasMore
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|scannedCount
return|;
block|}
specifier|private
name|byte
index|[]
name|makeDummyData
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|byte
index|[]
name|dummyData
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|dummyData
argument_list|)
expr_stmt|;
return|return
name|dummyData
return|;
block|}
specifier|private
name|int
name|countReferencedMobFiles
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// Do not retrieve the mob data when scanning
name|scan
operator|.
name|setAttribute
argument_list|(
name|MobConstants
operator|.
name|MOB_SCAN_RAW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|InternalScanner
name|scanner
init|=
name|region
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasMore
init|=
literal|true
decl_stmt|;
name|String
name|fileName
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|files
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
do|do
block|{
name|kvs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hasMore
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|c
range|:
name|kvs
control|)
block|{
name|KeyValue
name|kv
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|MobUtils
operator|.
name|isMobReferenceCell
argument_list|(
name|kv
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|MobUtils
operator|.
name|hasValidMobRefCellValue
argument_list|(
name|kv
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|int
name|size
init|=
name|MobUtils
operator|.
name|getMobValueLength
argument_list|(
name|kv
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|<=
name|mobCellThreshold
condition|)
block|{
continue|continue;
block|}
name|fileName
operator|=
name|MobUtils
operator|.
name|getMobFileName
argument_list|(
name|kv
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|files
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|Path
name|familyPath
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|hcd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|familyPath
argument_list|,
name|fileName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|files
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_class

end_unit

