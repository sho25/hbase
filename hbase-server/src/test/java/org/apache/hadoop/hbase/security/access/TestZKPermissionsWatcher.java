begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test the reading and writing of access permissions to and from zookeeper.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestZKPermissionsWatcher
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestZKPermissionsWatcher
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|TableAuthManager
name|AUTH_A
decl_stmt|;
specifier|private
specifier|static
name|TableAuthManager
name|AUTH_B
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Abortable
name|ABORTABLE
init|=
operator|new
name|Abortable
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicBoolean
name|abort
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|why
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|abort
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|abort
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|TEST_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"perms_test"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup configuration
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|SecureTestUtil
operator|.
name|enableSecurity
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// start minicluster
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|AUTH_A
operator|=
name|TableAuthManager
operator|.
name|get
argument_list|(
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"TestZKPermissionsWatcher_1"
argument_list|,
name|ABORTABLE
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|AUTH_B
operator|=
name|TableAuthManager
operator|.
name|get
argument_list|(
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"TestZKPermissionsWatcher_2"
argument_list|,
name|ABORTABLE
argument_list|)
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPermissionsWatcher
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|User
name|george
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"george"
argument_list|,
operator|new
name|String
index|[]
block|{ }
argument_list|)
decl_stmt|;
name|User
name|hubert
init|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"hubert"
argument_list|,
operator|new
name|String
index|[]
block|{ }
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
comment|// update ACL: george RW
name|List
argument_list|<
name|TablePermission
argument_list|>
name|acl
init|=
operator|new
name|ArrayList
argument_list|<
name|TablePermission
argument_list|>
argument_list|()
decl_stmt|;
name|acl
operator|.
name|add
argument_list|(
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|mtimeB
init|=
name|AUTH_B
operator|.
name|getMTime
argument_list|()
decl_stmt|;
name|AUTH_A
operator|.
name|setTableUserPermissions
argument_list|(
name|george
operator|.
name|getShortName
argument_list|()
argument_list|,
name|TEST_TABLE
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// Wait for the update to propagate
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
literal|100
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AUTH_B
operator|.
name|getMTime
argument_list|()
operator|>
name|mtimeB
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// check it
name|assertTrue
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
comment|// update ACL: hubert R
name|acl
operator|=
operator|new
name|ArrayList
argument_list|<
name|TablePermission
argument_list|>
argument_list|()
expr_stmt|;
name|acl
operator|.
name|add
argument_list|(
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|mtimeA
init|=
name|AUTH_A
operator|.
name|getMTime
argument_list|()
decl_stmt|;
name|AUTH_B
operator|.
name|setTableUserPermissions
argument_list|(
literal|"hubert"
argument_list|,
name|TEST_TABLE
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// Wait for the update to propagate
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|10000
argument_list|,
literal|100
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|AUTH_A
operator|.
name|getMTime
argument_list|()
operator|>
name|mtimeA
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// check it
name|assertTrue
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|george
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_A
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|AUTH_B
operator|.
name|authorizeUser
argument_list|(
name|hubert
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

