begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|MasterSwitchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterCoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableDescriptorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|GetTableNamesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
operator|.
name|Quotas
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|CoprocessorTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|net
operator|.
name|HostAndPort
import|;
end_import

begin_comment
comment|/**  * Tests invocation of the {@link org.apache.hadoop.hbase.coprocessor.MasterObserver}  * interface hooks at all appropriate times during normal HMaster operations.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|CoprocessorTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMasterObserver
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestMasterObserver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|CountDownLatch
name|tableCreationLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|CountDownLatch
name|tableDeletionLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
class|class
name|CPMasterObserver
implements|implements
name|MasterObserver
block|{
specifier|private
name|boolean
name|bypass
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|preCreateTableCalled
decl_stmt|;
specifier|private
name|boolean
name|postCreateTableCalled
decl_stmt|;
specifier|private
name|boolean
name|preDeleteTableCalled
decl_stmt|;
specifier|private
name|boolean
name|postDeleteTableCalled
decl_stmt|;
specifier|private
name|boolean
name|preTruncateTableCalled
decl_stmt|;
specifier|private
name|boolean
name|postTruncateTableCalled
decl_stmt|;
specifier|private
name|boolean
name|preModifyTableCalled
decl_stmt|;
specifier|private
name|boolean
name|postModifyTableCalled
decl_stmt|;
specifier|private
name|boolean
name|preCreateNamespaceCalled
decl_stmt|;
specifier|private
name|boolean
name|postCreateNamespaceCalled
decl_stmt|;
specifier|private
name|boolean
name|preDeleteNamespaceCalled
decl_stmt|;
specifier|private
name|boolean
name|postDeleteNamespaceCalled
decl_stmt|;
specifier|private
name|boolean
name|preModifyNamespaceCalled
decl_stmt|;
specifier|private
name|boolean
name|postModifyNamespaceCalled
decl_stmt|;
specifier|private
name|boolean
name|preGetNamespaceDescriptorCalled
decl_stmt|;
specifier|private
name|boolean
name|postGetNamespaceDescriptorCalled
decl_stmt|;
specifier|private
name|boolean
name|preListNamespaceDescriptorsCalled
decl_stmt|;
specifier|private
name|boolean
name|postListNamespaceDescriptorsCalled
decl_stmt|;
specifier|private
name|boolean
name|preAddColumnCalled
decl_stmt|;
specifier|private
name|boolean
name|postAddColumnCalled
decl_stmt|;
specifier|private
name|boolean
name|preModifyColumnCalled
decl_stmt|;
specifier|private
name|boolean
name|postModifyColumnCalled
decl_stmt|;
specifier|private
name|boolean
name|preDeleteColumnCalled
decl_stmt|;
specifier|private
name|boolean
name|postDeleteColumnCalled
decl_stmt|;
specifier|private
name|boolean
name|preEnableTableCalled
decl_stmt|;
specifier|private
name|boolean
name|postEnableTableCalled
decl_stmt|;
specifier|private
name|boolean
name|preDisableTableCalled
decl_stmt|;
specifier|private
name|boolean
name|postDisableTableCalled
decl_stmt|;
specifier|private
name|boolean
name|preAbortProcedureCalled
decl_stmt|;
specifier|private
name|boolean
name|postAbortProcedureCalled
decl_stmt|;
specifier|private
name|boolean
name|preListProceduresCalled
decl_stmt|;
specifier|private
name|boolean
name|postListProceduresCalled
decl_stmt|;
specifier|private
name|boolean
name|preMoveCalled
decl_stmt|;
specifier|private
name|boolean
name|postMoveCalled
decl_stmt|;
specifier|private
name|boolean
name|preAssignCalled
decl_stmt|;
specifier|private
name|boolean
name|postAssignCalled
decl_stmt|;
specifier|private
name|boolean
name|preUnassignCalled
decl_stmt|;
specifier|private
name|boolean
name|postUnassignCalled
decl_stmt|;
specifier|private
name|boolean
name|preRegionOfflineCalled
decl_stmt|;
specifier|private
name|boolean
name|postRegionOfflineCalled
decl_stmt|;
specifier|private
name|boolean
name|preBalanceCalled
decl_stmt|;
specifier|private
name|boolean
name|postBalanceCalled
decl_stmt|;
specifier|private
name|boolean
name|preBalanceSwitchCalled
decl_stmt|;
specifier|private
name|boolean
name|postBalanceSwitchCalled
decl_stmt|;
specifier|private
name|boolean
name|preShutdownCalled
decl_stmt|;
specifier|private
name|boolean
name|preStopMasterCalled
decl_stmt|;
specifier|private
name|boolean
name|preMasterInitializationCalled
decl_stmt|;
specifier|private
name|boolean
name|postStartMasterCalled
decl_stmt|;
specifier|private
name|boolean
name|startCalled
decl_stmt|;
specifier|private
name|boolean
name|stopCalled
decl_stmt|;
specifier|private
name|boolean
name|preSnapshotCalled
decl_stmt|;
specifier|private
name|boolean
name|postSnapshotCalled
decl_stmt|;
specifier|private
name|boolean
name|preListSnapshotCalled
decl_stmt|;
specifier|private
name|boolean
name|postListSnapshotCalled
decl_stmt|;
specifier|private
name|boolean
name|preCloneSnapshotCalled
decl_stmt|;
specifier|private
name|boolean
name|postCloneSnapshotCalled
decl_stmt|;
specifier|private
name|boolean
name|preRestoreSnapshotCalled
decl_stmt|;
specifier|private
name|boolean
name|postRestoreSnapshotCalled
decl_stmt|;
specifier|private
name|boolean
name|preDeleteSnapshotCalled
decl_stmt|;
specifier|private
name|boolean
name|postDeleteSnapshotCalled
decl_stmt|;
specifier|private
name|boolean
name|preCreateTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|postCompletedCreateTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|preDeleteTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|postCompletedDeleteTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|preTruncateTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|postCompletedTruncateTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|preAddColumnFamilyActionCalled
decl_stmt|;
specifier|private
name|boolean
name|postCompletedAddColumnFamilyActionCalled
decl_stmt|;
specifier|private
name|boolean
name|preModifyColumnFamilyActionCalled
decl_stmt|;
specifier|private
name|boolean
name|postCompletedModifyColumnFamilyActionCalled
decl_stmt|;
specifier|private
name|boolean
name|preDeleteColumnFamilyActionCalled
decl_stmt|;
specifier|private
name|boolean
name|postCompletedDeleteColumnFamilyActionCalled
decl_stmt|;
specifier|private
name|boolean
name|preEnableTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|postCompletedEnableTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|preDisableTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|postCompletedDisableTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|preModifyTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|postCompletedModifyTableActionCalled
decl_stmt|;
specifier|private
name|boolean
name|preGetTableDescriptorsCalled
decl_stmt|;
specifier|private
name|boolean
name|postGetTableDescriptorsCalled
decl_stmt|;
specifier|private
name|boolean
name|postGetTableNamesCalled
decl_stmt|;
specifier|private
name|boolean
name|preGetTableNamesCalled
decl_stmt|;
specifier|private
name|boolean
name|preDispatchMergeCalled
decl_stmt|;
specifier|private
name|boolean
name|postDispatchMergeCalled
decl_stmt|;
specifier|public
name|void
name|enableBypass
parameter_list|(
name|boolean
name|bypass
parameter_list|)
block|{
name|this
operator|.
name|bypass
operator|=
name|bypass
expr_stmt|;
block|}
specifier|public
name|void
name|resetStates
parameter_list|()
block|{
name|preCreateTableCalled
operator|=
literal|false
expr_stmt|;
name|postCreateTableCalled
operator|=
literal|false
expr_stmt|;
name|preDeleteTableCalled
operator|=
literal|false
expr_stmt|;
name|postDeleteTableCalled
operator|=
literal|false
expr_stmt|;
name|preTruncateTableCalled
operator|=
literal|false
expr_stmt|;
name|postTruncateTableCalled
operator|=
literal|false
expr_stmt|;
name|preModifyTableCalled
operator|=
literal|false
expr_stmt|;
name|postModifyTableCalled
operator|=
literal|false
expr_stmt|;
name|preCreateNamespaceCalled
operator|=
literal|false
expr_stmt|;
name|postCreateNamespaceCalled
operator|=
literal|false
expr_stmt|;
name|preDeleteNamespaceCalled
operator|=
literal|false
expr_stmt|;
name|postDeleteNamespaceCalled
operator|=
literal|false
expr_stmt|;
name|preModifyNamespaceCalled
operator|=
literal|false
expr_stmt|;
name|postModifyNamespaceCalled
operator|=
literal|false
expr_stmt|;
name|preGetNamespaceDescriptorCalled
operator|=
literal|false
expr_stmt|;
name|postGetNamespaceDescriptorCalled
operator|=
literal|false
expr_stmt|;
name|preListNamespaceDescriptorsCalled
operator|=
literal|false
expr_stmt|;
name|postListNamespaceDescriptorsCalled
operator|=
literal|false
expr_stmt|;
name|preAddColumnCalled
operator|=
literal|false
expr_stmt|;
name|postAddColumnCalled
operator|=
literal|false
expr_stmt|;
name|preModifyColumnCalled
operator|=
literal|false
expr_stmt|;
name|postModifyColumnCalled
operator|=
literal|false
expr_stmt|;
name|preDeleteColumnCalled
operator|=
literal|false
expr_stmt|;
name|postDeleteColumnCalled
operator|=
literal|false
expr_stmt|;
name|preEnableTableCalled
operator|=
literal|false
expr_stmt|;
name|postEnableTableCalled
operator|=
literal|false
expr_stmt|;
name|preDisableTableCalled
operator|=
literal|false
expr_stmt|;
name|postDisableTableCalled
operator|=
literal|false
expr_stmt|;
name|preAbortProcedureCalled
operator|=
literal|false
expr_stmt|;
name|postAbortProcedureCalled
operator|=
literal|false
expr_stmt|;
name|preListProceduresCalled
operator|=
literal|false
expr_stmt|;
name|postListProceduresCalled
operator|=
literal|false
expr_stmt|;
name|preMoveCalled
operator|=
literal|false
expr_stmt|;
name|postMoveCalled
operator|=
literal|false
expr_stmt|;
name|preAssignCalled
operator|=
literal|false
expr_stmt|;
name|postAssignCalled
operator|=
literal|false
expr_stmt|;
name|preUnassignCalled
operator|=
literal|false
expr_stmt|;
name|postUnassignCalled
operator|=
literal|false
expr_stmt|;
name|preRegionOfflineCalled
operator|=
literal|false
expr_stmt|;
name|postRegionOfflineCalled
operator|=
literal|false
expr_stmt|;
name|preBalanceCalled
operator|=
literal|false
expr_stmt|;
name|postBalanceCalled
operator|=
literal|false
expr_stmt|;
name|preBalanceSwitchCalled
operator|=
literal|false
expr_stmt|;
name|postBalanceSwitchCalled
operator|=
literal|false
expr_stmt|;
name|preSnapshotCalled
operator|=
literal|false
expr_stmt|;
name|postSnapshotCalled
operator|=
literal|false
expr_stmt|;
name|preListSnapshotCalled
operator|=
literal|false
expr_stmt|;
name|postListSnapshotCalled
operator|=
literal|false
expr_stmt|;
name|preCloneSnapshotCalled
operator|=
literal|false
expr_stmt|;
name|postCloneSnapshotCalled
operator|=
literal|false
expr_stmt|;
name|preRestoreSnapshotCalled
operator|=
literal|false
expr_stmt|;
name|postRestoreSnapshotCalled
operator|=
literal|false
expr_stmt|;
name|preDeleteSnapshotCalled
operator|=
literal|false
expr_stmt|;
name|postDeleteSnapshotCalled
operator|=
literal|false
expr_stmt|;
name|preCreateTableActionCalled
operator|=
literal|false
expr_stmt|;
name|postCompletedCreateTableActionCalled
operator|=
literal|false
expr_stmt|;
name|preDeleteTableActionCalled
operator|=
literal|false
expr_stmt|;
name|postCompletedDeleteTableActionCalled
operator|=
literal|false
expr_stmt|;
name|preTruncateTableActionCalled
operator|=
literal|false
expr_stmt|;
name|postCompletedTruncateTableActionCalled
operator|=
literal|false
expr_stmt|;
name|preModifyTableActionCalled
operator|=
literal|false
expr_stmt|;
name|postCompletedModifyTableActionCalled
operator|=
literal|false
expr_stmt|;
name|preAddColumnFamilyActionCalled
operator|=
literal|false
expr_stmt|;
name|postCompletedAddColumnFamilyActionCalled
operator|=
literal|false
expr_stmt|;
name|preModifyColumnFamilyActionCalled
operator|=
literal|false
expr_stmt|;
name|postCompletedModifyColumnFamilyActionCalled
operator|=
literal|false
expr_stmt|;
name|preDeleteColumnFamilyActionCalled
operator|=
literal|false
expr_stmt|;
name|postCompletedDeleteColumnFamilyActionCalled
operator|=
literal|false
expr_stmt|;
name|preEnableTableActionCalled
operator|=
literal|false
expr_stmt|;
name|postCompletedEnableTableActionCalled
operator|=
literal|false
expr_stmt|;
name|preDisableTableActionCalled
operator|=
literal|false
expr_stmt|;
name|postCompletedDisableTableActionCalled
operator|=
literal|false
expr_stmt|;
name|preGetTableDescriptorsCalled
operator|=
literal|false
expr_stmt|;
name|postGetTableDescriptorsCalled
operator|=
literal|false
expr_stmt|;
name|postGetTableNamesCalled
operator|=
literal|false
expr_stmt|;
name|preGetTableNamesCalled
operator|=
literal|false
expr_stmt|;
name|preDispatchMergeCalled
operator|=
literal|false
expr_stmt|;
name|postDispatchMergeCalled
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDispatchMerge
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|regionA
parameter_list|,
name|HRegionInfo
name|regionB
parameter_list|)
throws|throws
name|IOException
block|{
name|preDispatchMergeCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDispatchMerge
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HRegionInfo
name|regionA
parameter_list|,
name|HRegionInfo
name|regionB
parameter_list|)
throws|throws
name|IOException
block|{
name|postDispatchMergeCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasDispatchMergeCalled
parameter_list|()
block|{
return|return
name|preDispatchMergeCalled
operator|&&
name|postDispatchMergeCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preCreateTableCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
name|postCreateTableCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasCreateTableCalled
parameter_list|()
block|{
return|return
name|preCreateTableCalled
operator|&&
name|postCreateTableCalled
return|;
block|}
specifier|public
name|boolean
name|preCreateTableCalledOnly
parameter_list|()
block|{
return|return
name|preCreateTableCalled
operator|&&
operator|!
name|postCreateTableCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preDeleteTableCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|postDeleteTableCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasDeleteTableCalled
parameter_list|()
block|{
return|return
name|preDeleteTableCalled
operator|&&
name|postDeleteTableCalled
return|;
block|}
specifier|public
name|boolean
name|preDeleteTableCalledOnly
parameter_list|()
block|{
return|return
name|preDeleteTableCalled
operator|&&
operator|!
name|postDeleteTableCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preTruncateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preTruncateTableCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postTruncateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|postTruncateTableCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasTruncateTableCalled
parameter_list|()
block|{
return|return
name|preTruncateTableCalled
operator|&&
name|postTruncateTableCalled
return|;
block|}
specifier|public
name|boolean
name|preTruncateTableCalledOnly
parameter_list|()
block|{
return|return
name|preTruncateTableCalled
operator|&&
operator|!
name|postTruncateTableCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preSetSplitOrMergeEnabled
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|boolean
name|newValue
parameter_list|,
specifier|final
name|MasterSwitchType
name|switchType
parameter_list|)
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postSetSplitOrMergeEnabled
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|boolean
name|newValue
parameter_list|,
specifier|final
name|MasterSwitchType
name|switchType
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|env
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
block|}
name|preModifyTableCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postModifyTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|postModifyTableCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasModifyTableCalled
parameter_list|()
block|{
return|return
name|preModifyTableCalled
operator|&&
name|postModifyTableCalled
return|;
block|}
specifier|public
name|boolean
name|preModifyTableCalledOnly
parameter_list|()
block|{
return|return
name|preModifyTableCalled
operator|&&
operator|!
name|postModifyTableCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCreateNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preCreateNamespaceCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCreateNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
name|postCreateNamespaceCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasCreateNamespaceCalled
parameter_list|()
block|{
return|return
name|preCreateNamespaceCalled
operator|&&
name|postCreateNamespaceCalled
return|;
block|}
specifier|public
name|boolean
name|preCreateNamespaceCalledOnly
parameter_list|()
block|{
return|return
name|preCreateNamespaceCalled
operator|&&
operator|!
name|postCreateNamespaceCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preDeleteNamespaceCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|postDeleteNamespaceCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasDeleteNamespaceCalled
parameter_list|()
block|{
return|return
name|preDeleteNamespaceCalled
operator|&&
name|postDeleteNamespaceCalled
return|;
block|}
specifier|public
name|boolean
name|preDeleteNamespaceCalledOnly
parameter_list|()
block|{
return|return
name|preDeleteNamespaceCalled
operator|&&
operator|!
name|postDeleteNamespaceCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preModifyNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preModifyNamespaceCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postModifyNamespace
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
name|postModifyNamespaceCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasModifyNamespaceCalled
parameter_list|()
block|{
return|return
name|preModifyNamespaceCalled
operator|&&
name|postModifyNamespaceCalled
return|;
block|}
specifier|public
name|boolean
name|preModifyNamespaceCalledOnly
parameter_list|()
block|{
return|return
name|preModifyNamespaceCalled
operator|&&
operator|!
name|postModifyNamespaceCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetNamespaceDescriptor
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|IOException
block|{
name|preGetNamespaceDescriptorCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postGetNamespaceDescriptor
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|NamespaceDescriptor
name|ns
parameter_list|)
throws|throws
name|IOException
block|{
name|postGetNamespaceDescriptorCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasGetNamespaceDescriptorCalled
parameter_list|()
block|{
return|return
name|preGetNamespaceDescriptorCalled
operator|&&
name|postGetNamespaceDescriptorCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preListNamespaceDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|descriptors
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preListNamespaceDescriptorsCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postListNamespaceDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|List
argument_list|<
name|NamespaceDescriptor
argument_list|>
name|descriptors
parameter_list|)
throws|throws
name|IOException
block|{
name|postListNamespaceDescriptorsCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasListNamespaceDescriptorsCalled
parameter_list|()
block|{
return|return
name|preListNamespaceDescriptorsCalled
operator|&&
name|postListNamespaceDescriptorsCalled
return|;
block|}
specifier|public
name|boolean
name|preListNamespaceDescriptorsCalledOnly
parameter_list|()
block|{
return|return
name|preListNamespaceDescriptorsCalled
operator|&&
operator|!
name|postListNamespaceDescriptorsCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preAddColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preAddColumnFamily
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|ctx
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ctx
operator|.
name|shouldBypass
argument_list|()
expr_stmt|;
block|}
name|preAddColumnCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postAddColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postAddColumnFamily
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|postAddColumnCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasAddColumnCalled
parameter_list|()
block|{
return|return
name|preAddColumnCalled
operator|&&
name|postAddColumnCalled
return|;
block|}
specifier|public
name|boolean
name|preAddColumnCalledOnly
parameter_list|()
block|{
return|return
name|preAddColumnCalled
operator|&&
operator|!
name|postAddColumnCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preModifyColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preModifyColumnFamily
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|ctx
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preModifyColumnCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postModifyColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postModifyColumnFamily
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|postModifyColumnCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasModifyColumnCalled
parameter_list|()
block|{
return|return
name|preModifyColumnCalled
operator|&&
name|postModifyColumnCalled
return|;
block|}
specifier|public
name|boolean
name|preModifyColumnCalledOnly
parameter_list|()
block|{
return|return
name|preModifyColumnCalled
operator|&&
operator|!
name|postModifyColumnCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preDeleteColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preDeleteColumnFamily
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|ctx
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preDeleteColumnCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postDeleteColumn
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postDeleteColumnFamily
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|postDeleteColumnCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasDeleteColumnCalled
parameter_list|()
block|{
return|return
name|preDeleteColumnCalled
operator|&&
name|postDeleteColumnCalled
return|;
block|}
specifier|public
name|boolean
name|preDeleteColumnCalledOnly
parameter_list|()
block|{
return|return
name|preDeleteColumnCalled
operator|&&
operator|!
name|postDeleteColumnCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preEnableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preEnableTableCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postEnableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|postEnableTableCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasEnableTableCalled
parameter_list|()
block|{
return|return
name|preEnableTableCalled
operator|&&
name|postEnableTableCalled
return|;
block|}
specifier|public
name|boolean
name|preEnableTableCalledOnly
parameter_list|()
block|{
return|return
name|preEnableTableCalled
operator|&&
operator|!
name|postEnableTableCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDisableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preDisableTableCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDisableTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|postDisableTableCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasDisableTableCalled
parameter_list|()
block|{
return|return
name|preDisableTableCalled
operator|&&
name|postDisableTableCalled
return|;
block|}
specifier|public
name|boolean
name|preDisableTableCalledOnly
parameter_list|()
block|{
return|return
name|preDisableTableCalled
operator|&&
operator|!
name|postDisableTableCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preAbortProcedure
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procEnv
parameter_list|,
specifier|final
name|long
name|procId
parameter_list|)
throws|throws
name|IOException
block|{
name|preAbortProcedureCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postAbortProcedure
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|postAbortProcedureCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasAbortProcedureCalled
parameter_list|()
block|{
return|return
name|preAbortProcedureCalled
operator|&&
name|postAbortProcedureCalled
return|;
block|}
specifier|public
name|boolean
name|wasPreAbortProcedureCalledOnly
parameter_list|()
block|{
return|return
name|preAbortProcedureCalled
operator|&&
operator|!
name|postAbortProcedureCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preListProcedures
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|preListProceduresCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postListProcedures
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|ProcedureInfo
argument_list|>
name|procInfoList
parameter_list|)
throws|throws
name|IOException
block|{
name|postListProceduresCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasListProceduresCalled
parameter_list|()
block|{
return|return
name|preListProceduresCalled
operator|&&
name|postListProceduresCalled
return|;
block|}
specifier|public
name|boolean
name|wasPreListProceduresCalledOnly
parameter_list|()
block|{
return|return
name|preListProceduresCalled
operator|&&
operator|!
name|postListProceduresCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preMove
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|ServerName
name|srcServer
parameter_list|,
name|ServerName
name|destServer
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preMoveCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postMove
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|HRegionInfo
name|region
parameter_list|,
name|ServerName
name|srcServer
parameter_list|,
name|ServerName
name|destServer
parameter_list|)
throws|throws
name|IOException
block|{
name|postMoveCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasMoveCalled
parameter_list|()
block|{
return|return
name|preMoveCalled
operator|&&
name|postMoveCalled
return|;
block|}
specifier|public
name|boolean
name|preMoveCalledOnly
parameter_list|()
block|{
return|return
name|preMoveCalled
operator|&&
operator|!
name|postMoveCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preAssign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preAssignCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postAssign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|postAssignCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasAssignCalled
parameter_list|()
block|{
return|return
name|preAssignCalled
operator|&&
name|postAssignCalled
return|;
block|}
specifier|public
name|boolean
name|preAssignCalledOnly
parameter_list|()
block|{
return|return
name|preAssignCalled
operator|&&
operator|!
name|postAssignCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preUnassign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preUnassignCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postUnassign
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|postUnassignCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasUnassignCalled
parameter_list|()
block|{
return|return
name|preUnassignCalled
operator|&&
name|postUnassignCalled
return|;
block|}
specifier|public
name|boolean
name|preUnassignCalledOnly
parameter_list|()
block|{
return|return
name|preUnassignCalled
operator|&&
operator|!
name|postUnassignCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preRegionOffline
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|preRegionOfflineCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postRegionOffline
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|postRegionOfflineCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasRegionOfflineCalled
parameter_list|()
block|{
return|return
name|preRegionOfflineCalled
operator|&&
name|postRegionOfflineCalled
return|;
block|}
specifier|public
name|boolean
name|preRegionOfflineCalledOnly
parameter_list|()
block|{
return|return
name|preRegionOfflineCalled
operator|&&
operator|!
name|postRegionOfflineCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preBalance
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preBalanceCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postBalance
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|plans
parameter_list|)
throws|throws
name|IOException
block|{
name|postBalanceCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasBalanceCalled
parameter_list|()
block|{
return|return
name|preBalanceCalled
operator|&&
name|postBalanceCalled
return|;
block|}
specifier|public
name|boolean
name|preBalanceCalledOnly
parameter_list|()
block|{
return|return
name|preBalanceCalled
operator|&&
operator|!
name|postBalanceCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|preBalanceSwitch
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|boolean
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preBalanceSwitchCalled
operator|=
literal|true
expr_stmt|;
return|return
name|b
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postBalanceSwitch
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|boolean
name|oldValue
parameter_list|,
name|boolean
name|newValue
parameter_list|)
throws|throws
name|IOException
block|{
name|postBalanceSwitchCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasBalanceSwitchCalled
parameter_list|()
block|{
return|return
name|preBalanceSwitchCalled
operator|&&
name|postBalanceSwitchCalled
return|;
block|}
specifier|public
name|boolean
name|preBalanceSwitchCalledOnly
parameter_list|()
block|{
return|return
name|preBalanceSwitchCalled
operator|&&
operator|!
name|postBalanceSwitchCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preShutdown
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|preShutdownCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preStopMaster
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|preStopMasterCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preMasterInitialization
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|preMasterInitializationCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasMasterInitializationCalled
parameter_list|()
block|{
return|return
name|preMasterInitializationCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postStartMaster
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|postStartMasterCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasStartMasterCalled
parameter_list|()
block|{
return|return
name|postStartMasterCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|startCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|stopCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasStarted
parameter_list|()
block|{
return|return
name|startCalled
return|;
block|}
specifier|public
name|boolean
name|wasStopped
parameter_list|()
block|{
return|return
name|stopCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|preSnapshotCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|postSnapshotCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasSnapshotCalled
parameter_list|()
block|{
return|return
name|preSnapshotCalled
operator|&&
name|postSnapshotCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preListSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|preListSnapshotCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postListSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|postListSnapshotCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasListSnapshotCalled
parameter_list|()
block|{
return|return
name|preListSnapshotCalled
operator|&&
name|postListSnapshotCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preCloneSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|preCloneSnapshotCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCloneSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|postCloneSnapshotCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasCloneSnapshotCalled
parameter_list|()
block|{
return|return
name|preCloneSnapshotCalled
operator|&&
name|postCloneSnapshotCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preRestoreSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|preRestoreSnapshotCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postRestoreSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|,
specifier|final
name|HTableDescriptor
name|hTableDescriptor
parameter_list|)
throws|throws
name|IOException
block|{
name|postRestoreSnapshotCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasRestoreSnapshotCalled
parameter_list|()
block|{
return|return
name|preRestoreSnapshotCalled
operator|&&
name|postRestoreSnapshotCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDeleteSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|preDeleteSnapshotCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDeleteSnapshot
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|postDeleteSnapshotCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasDeleteSnapshotCalled
parameter_list|()
block|{
return|return
name|preDeleteSnapshotCalled
operator|&&
name|postDeleteSnapshotCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preCreateTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preCreateTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|HTableDescriptor
name|desc
parameter_list|,
specifier|final
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preCreateTableActionCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postCreateTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postCompletedCreateTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|HTableDescriptor
name|desc
parameter_list|,
specifier|final
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
name|postCompletedCreateTableActionCalled
operator|=
literal|true
expr_stmt|;
name|tableCreationLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasPreCreateTableActionCalled
parameter_list|()
block|{
return|return
name|preCreateTableActionCalled
return|;
block|}
specifier|public
name|boolean
name|wasCreateTableActionCalled
parameter_list|()
block|{
return|return
name|preCreateTableActionCalled
operator|&&
name|postCompletedCreateTableActionCalled
return|;
block|}
specifier|public
name|boolean
name|wasCreateTableActionCalledOnly
parameter_list|()
block|{
return|return
name|preCreateTableActionCalled
operator|&&
operator|!
name|postCompletedCreateTableActionCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preDeleteTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postDeleteTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preDeleteTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preDeleteTableActionCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCompletedDeleteTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|postCompletedDeleteTableActionCalled
operator|=
literal|true
expr_stmt|;
name|tableDeletionLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasDeleteTableActionCalled
parameter_list|()
block|{
return|return
name|preDeleteTableActionCalled
operator|&&
name|postCompletedDeleteTableActionCalled
return|;
block|}
specifier|public
name|boolean
name|wasDeleteTableActionCalledOnly
parameter_list|()
block|{
return|return
name|preDeleteTableActionCalled
operator|&&
operator|!
name|postCompletedDeleteTableActionCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preTruncateTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postTruncateTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preTruncateTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preTruncateTableActionCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCompletedTruncateTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|postCompletedTruncateTableActionCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasTruncateTableActionCalled
parameter_list|()
block|{
return|return
name|preTruncateTableActionCalled
operator|&&
name|postCompletedTruncateTableActionCalled
return|;
block|}
specifier|public
name|boolean
name|wasTruncateTableActionCalledOnly
parameter_list|()
block|{
return|return
name|preTruncateTableActionCalled
operator|&&
operator|!
name|postCompletedTruncateTableActionCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preModifyTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postModifyTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preModifyTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|env
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preModifyTableActionCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCompletedModifyTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|postCompletedModifyTableActionCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasModifyTableActionCalled
parameter_list|()
block|{
return|return
name|preModifyColumnFamilyActionCalled
operator|&&
name|postCompletedModifyColumnFamilyActionCalled
return|;
block|}
specifier|public
name|boolean
name|wasModifyTableActionCalledOnly
parameter_list|()
block|{
return|return
name|preModifyColumnFamilyActionCalled
operator|&&
operator|!
name|postCompletedModifyColumnFamilyActionCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preAddColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preAddColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|ctx
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preAddColumnFamilyActionCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postAddColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postCompletedAddColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|postCompletedAddColumnFamilyActionCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasAddColumnFamilyActionCalled
parameter_list|()
block|{
return|return
name|preAddColumnFamilyActionCalled
operator|&&
name|postCompletedAddColumnFamilyActionCalled
return|;
block|}
specifier|public
name|boolean
name|preAddColumnFamilyActionCalledOnly
parameter_list|()
block|{
return|return
name|preAddColumnFamilyActionCalled
operator|&&
operator|!
name|postCompletedAddColumnFamilyActionCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preModifyColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preModifyColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|ctx
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preModifyColumnFamilyActionCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postModifyColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postCompletedModifyColumnFamilyAction
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HColumnDescriptor
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|postCompletedModifyColumnFamilyActionCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasModifyColumnFamilyActionCalled
parameter_list|()
block|{
return|return
name|preModifyColumnFamilyActionCalled
operator|&&
name|postCompletedModifyColumnFamilyActionCalled
return|;
block|}
specifier|public
name|boolean
name|preModifyColumnFamilyActionCalledOnly
parameter_list|()
block|{
return|return
name|preModifyColumnFamilyActionCalled
operator|&&
operator|!
name|postCompletedModifyColumnFamilyActionCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preDeleteColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preDeleteColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|ctx
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preDeleteColumnFamilyActionCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postDeleteColumnHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postCompletedDeleteColumnFamilyAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
name|columnFamily
parameter_list|)
throws|throws
name|IOException
block|{
name|postCompletedDeleteColumnFamilyActionCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasDeleteColumnFamilyActionCalled
parameter_list|()
block|{
return|return
name|preDeleteColumnFamilyActionCalled
operator|&&
name|postCompletedDeleteColumnFamilyActionCalled
return|;
block|}
specifier|public
name|boolean
name|preDeleteColumnFamilyActionCalledOnly
parameter_list|()
block|{
return|return
name|preDeleteColumnFamilyActionCalled
operator|&&
operator|!
name|postCompletedDeleteColumnFamilyActionCalled
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|preEnableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|postEnableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preEnableTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|ctx
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preEnableTableActionCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCompletedEnableTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|postCompletedEnableTableActionCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasEnableTableActionCalled
parameter_list|()
block|{
return|return
name|preEnableTableActionCalled
operator|&&
name|postCompletedEnableTableActionCalled
return|;
block|}
specifier|public
name|boolean
name|preEnableTableActionCalledOnly
parameter_list|()
block|{
return|return
name|preEnableTableActionCalled
operator|&&
operator|!
name|postCompletedEnableTableActionCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preDisableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|env
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postDisableTableHandler
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preDisableTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|bypass
condition|)
block|{
name|ctx
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
name|preDisableTableActionCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCompletedDisableTableAction
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|postCompletedDisableTableActionCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasDisableTableActionCalled
parameter_list|()
block|{
return|return
name|preDisableTableActionCalled
operator|&&
name|postCompletedDisableTableActionCalled
return|;
block|}
specifier|public
name|boolean
name|preDisableTableActionCalledOnly
parameter_list|()
block|{
return|return
name|preDisableTableActionCalled
operator|&&
operator|!
name|postCompletedDisableTableActionCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetTableDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNamesList
parameter_list|,
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
name|preGetTableDescriptorsCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postGetTableDescriptors
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|TableName
argument_list|>
name|tableNamesList
parameter_list|,
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
name|postGetTableDescriptorsCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasGetTableDescriptorsCalled
parameter_list|()
block|{
return|return
name|preGetTableDescriptorsCalled
operator|&&
name|postGetTableDescriptorsCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetTableNames
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
name|preGetTableNamesCalled
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postGetTableNames
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|List
argument_list|<
name|HTableDescriptor
argument_list|>
name|descriptors
parameter_list|,
name|String
name|regex
parameter_list|)
throws|throws
name|IOException
block|{
name|postGetTableNamesCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|wasGetTableNamesCalled
parameter_list|()
block|{
return|return
name|preGetTableNamesCalled
operator|&&
name|postGetTableNamesCalled
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preTableFlush
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postTableFlush
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postSetUserQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preSetTableQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postSetTableQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preSetNamespaceQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postSetNamespaceQuota
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|Quotas
name|quotas
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preMoveServers
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|HostAndPort
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postMoveServers
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|HostAndPort
argument_list|>
name|servers
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preMoveTables
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroupGroup
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postMoveTables
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|Set
argument_list|<
name|TableName
argument_list|>
name|tables
parameter_list|,
name|String
name|targetGroup
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preAddRSGroup
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postAddRSGroup
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preRemoveRSGroup
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postRemoveRSGroup
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|preBalanceRSGroup
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|groupName
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postBalanceRSGroup
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|String
name|groupName
parameter_list|,
name|boolean
name|balancerRan
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
specifier|private
specifier|static
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_SNAPSHOT
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"observed_snapshot"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|TEST_CLONE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"observed_clone"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_FAMILY2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// We need more than one data server on this test
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testStarted
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Master should be active"
argument_list|,
name|master
operator|.
name|isActiveMaster
argument_list|()
argument_list|)
expr_stmt|;
name|MasterCoprocessorHost
name|host
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"CoprocessorHost should not be null"
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|CPMasterObserver
name|cp
init|=
operator|(
name|CPMasterObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"CPMasterObserver coprocessor not found or not installed!"
argument_list|,
name|cp
argument_list|)
expr_stmt|;
comment|// check basic lifecycle
name|assertTrue
argument_list|(
literal|"MasterObserver should have been started"
argument_list|,
name|cp
operator|.
name|wasStarted
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"preMasterInitialization() hook should have been called"
argument_list|,
name|cp
operator|.
name|wasMasterInitializationCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"postStartMaster() hook should have been called"
argument_list|,
name|cp
operator|.
name|wasStartMasterCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testTableOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterCoprocessorHost
name|host
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|CPMasterObserver
name|cp
init|=
operator|(
name|CPMasterObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cp
operator|.
name|enableBypass
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
literal|"No table created yet"
argument_list|,
name|cp
operator|.
name|wasCreateTableCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// create a table
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|tableCreationLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|HBaseTestingUtility
operator|.
name|KEYS
argument_list|,
literal|1
argument_list|,
name|HBaseTestingUtility
operator|.
name|KEYS
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
comment|// preCreateTable can't bypass default action.
name|assertTrue
argument_list|(
literal|"Test table should be created"
argument_list|,
name|cp
operator|.
name|wasCreateTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|tableCreationLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table pre create handler called."
argument_list|,
name|cp
operator|.
name|wasPreCreateTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table create handler should be called."
argument_list|,
name|cp
operator|.
name|wasCreateTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
name|RegionLocator
name|regionLocator
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|regionLocator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|admin
operator|.
name|mergeRegionsAsync
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on region merge"
argument_list|,
name|cp
operator|.
name|wasDispatchMergeCalled
argument_list|()
argument_list|)
expr_stmt|;
name|tableCreationLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// preDisableTable can't bypass default action.
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on table disable"
argument_list|,
name|cp
operator|.
name|wasDisableTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Disable table handler should be called."
argument_list|,
name|cp
operator|.
name|wasDisableTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// enable
name|assertFalse
argument_list|(
name|cp
operator|.
name|wasEnableTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// preEnableTable can't bypass default action.
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on table enable"
argument_list|,
name|cp
operator|.
name|wasEnableTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Enable table handler should be called."
argument_list|,
name|cp
operator|.
name|wasEnableTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify table
name|htd
operator|.
name|setMaxFileSize
argument_list|(
literal|512
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|modifyTableSync
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|// preModifyTable can't bypass default action.
name|assertTrue
argument_list|(
literal|"Test table should have been modified"
argument_list|,
name|cp
operator|.
name|wasModifyTableCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a column family
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"New column family shouldn't have been added to test table"
argument_list|,
name|cp
operator|.
name|preAddColumnCalledOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// modify a column family
name|HColumnDescriptor
name|hcd1
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY2
argument_list|)
decl_stmt|;
name|hcd1
operator|.
name|setMaxVersions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|hcd1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Second column family should be modified"
argument_list|,
name|cp
operator|.
name|preModifyColumnCalledOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// truncate table
name|admin
operator|.
name|truncateTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// delete table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|deleteTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Test table should have been deleted"
argument_list|,
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// preDeleteTable can't bypass default action.
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on table delete"
argument_list|,
name|cp
operator|.
name|wasDeleteTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Delete table handler should be called."
argument_list|,
name|cp
operator|.
name|wasDeleteTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// turn off bypass, run the tests again
name|cp
operator|.
name|enableBypass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test table should be created"
argument_list|,
name|cp
operator|.
name|wasCreateTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|tableCreationLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table pre create handler called."
argument_list|,
name|cp
operator|.
name|wasPreCreateTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Table create handler should be called."
argument_list|,
name|cp
operator|.
name|wasCreateTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable
name|assertFalse
argument_list|(
name|cp
operator|.
name|wasDisableTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|wasDisableTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on table disable"
argument_list|,
name|cp
operator|.
name|wasDisableTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Disable table handler should be called."
argument_list|,
name|cp
operator|.
name|wasDisableTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// modify table
name|htd
operator|.
name|setMaxFileSize
argument_list|(
literal|512
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|modifyTableSync
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test table should have been modified"
argument_list|,
name|cp
operator|.
name|wasModifyTableCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a column family
name|admin
operator|.
name|addColumnFamily
argument_list|(
name|tableName
argument_list|,
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"New column family should have been added to test table"
argument_list|,
name|cp
operator|.
name|wasAddColumnCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Add column handler should be called."
argument_list|,
name|cp
operator|.
name|wasAddColumnFamilyActionCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// modify a column family
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY2
argument_list|)
decl_stmt|;
name|hcd
operator|.
name|setMaxVersions
argument_list|(
literal|25
argument_list|)
expr_stmt|;
name|admin
operator|.
name|modifyColumnFamily
argument_list|(
name|tableName
argument_list|,
name|hcd
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Second column family should be modified"
argument_list|,
name|cp
operator|.
name|wasModifyColumnCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Modify table handler should be called."
argument_list|,
name|cp
operator|.
name|wasModifyColumnFamilyActionCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// enable
name|assertFalse
argument_list|(
name|cp
operator|.
name|wasEnableTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|wasEnableTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|enableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableEnabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on table enable"
argument_list|,
name|cp
operator|.
name|wasEnableTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Enable table handler should be called."
argument_list|,
name|cp
operator|.
name|wasEnableTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable again
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
comment|// delete column
name|assertFalse
argument_list|(
literal|"No column family deleted yet"
argument_list|,
name|cp
operator|.
name|wasDeleteColumnCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Delete table column handler should not be called."
argument_list|,
name|cp
operator|.
name|wasDeleteColumnFamilyActionCalled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteColumnFamily
argument_list|(
name|tableName
argument_list|,
name|TEST_FAMILY2
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|tableDesc
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"'"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|TEST_FAMILY2
argument_list|)
operator|+
literal|"' should have been removed"
argument_list|,
name|tableDesc
operator|.
name|getFamily
argument_list|(
name|TEST_FAMILY2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on column delete"
argument_list|,
name|cp
operator|.
name|wasDeleteColumnCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Delete table column handler should be called."
argument_list|,
name|cp
operator|.
name|wasDeleteColumnFamilyActionCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete table
name|assertFalse
argument_list|(
literal|"No table deleted yet"
argument_list|,
name|cp
operator|.
name|wasDeleteTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Delete table handler should not be called."
argument_list|,
name|cp
operator|.
name|wasDeleteTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
name|deleteTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Test table should have been deleted"
argument_list|,
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on table delete"
argument_list|,
name|cp
operator|.
name|wasDeleteTableCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Delete table handler should be called."
argument_list|,
name|cp
operator|.
name|wasDeleteTableActionCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testSnapshotOperations
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterCoprocessorHost
name|host
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|CPMasterObserver
name|cp
init|=
operator|(
name|CPMasterObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
comment|// create a table
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|tableCreationLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|tableCreationLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|tableCreationLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Test snapshot operation
name|assertFalse
argument_list|(
literal|"Coprocessor should not have been called yet"
argument_list|,
name|cp
operator|.
name|wasSnapshotCalled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|TEST_SNAPSHOT
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on snapshot"
argument_list|,
name|cp
operator|.
name|wasSnapshotCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test list operation
name|admin
operator|.
name|listSnapshots
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on snapshot list"
argument_list|,
name|cp
operator|.
name|wasListSnapshotCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test clone operation
name|admin
operator|.
name|cloneSnapshot
argument_list|(
name|TEST_SNAPSHOT
argument_list|,
name|TEST_CLONE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on snapshot clone"
argument_list|,
name|cp
operator|.
name|wasCloneSnapshotCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Coprocessor restore should not have been called on snapshot clone"
argument_list|,
name|cp
operator|.
name|wasRestoreSnapshotCalled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|TEST_CLONE
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|isTableDisabled
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|deleteTable
argument_list|(
name|admin
argument_list|,
name|TEST_CLONE
argument_list|)
expr_stmt|;
comment|// Test restore operation
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|admin
operator|.
name|restoreSnapshot
argument_list|(
name|TEST_SNAPSHOT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on snapshot restore"
argument_list|,
name|cp
operator|.
name|wasRestoreSnapshotCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Coprocessor clone should not have been called on snapshot restore"
argument_list|,
name|cp
operator|.
name|wasCloneSnapshotCalled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|TEST_SNAPSHOT
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on snapshot delete"
argument_list|,
name|cp
operator|.
name|wasDeleteSnapshotCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|deleteTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testNamespaceOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|String
name|testNamespace
init|=
literal|"observed_ns"
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterCoprocessorHost
name|host
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|CPMasterObserver
name|cp
init|=
operator|(
name|CPMasterObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cp
operator|.
name|enableBypass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
comment|// create a table
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|testNamespace
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test namespace should be created"
argument_list|,
name|cp
operator|.
name|wasCreateNamespaceCalled
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|admin
operator|.
name|getNamespaceDescriptor
argument_list|(
name|testNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test namespace descriptor should have been called"
argument_list|,
name|cp
operator|.
name|wasGetNamespaceDescriptorCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// turn off bypass, run the tests again
name|cp
operator|.
name|enableBypass
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|boolean
name|expected
init|=
literal|false
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|modifyNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|testNamespace
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BypassCoprocessorException
name|ce
parameter_list|)
block|{
name|expected
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test namespace should not have been modified"
argument_list|,
name|cp
operator|.
name|preModifyNamespaceCalledOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|admin
operator|.
name|getNamespaceDescriptor
argument_list|(
name|testNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test namespace descriptor should have been called"
argument_list|,
name|cp
operator|.
name|wasGetNamespaceDescriptorCalled
argument_list|()
argument_list|)
expr_stmt|;
name|expected
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|testNamespace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BypassCoprocessorException
name|ce
parameter_list|)
block|{
name|expected
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test namespace should not have been deleted"
argument_list|,
name|cp
operator|.
name|preDeleteNamespaceCalledOnly
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|admin
operator|.
name|getNamespaceDescriptor
argument_list|(
name|testNamespace
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test namespace descriptor should have been called"
argument_list|,
name|cp
operator|.
name|wasGetNamespaceDescriptorCalled
argument_list|()
argument_list|)
expr_stmt|;
name|cp
operator|.
name|enableBypass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
comment|// delete table
name|admin
operator|.
name|modifyNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|testNamespace
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test namespace should have been modified"
argument_list|,
name|cp
operator|.
name|wasModifyNamespaceCalled
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteNamespace
argument_list|(
name|testNamespace
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test namespace should have been deleted"
argument_list|,
name|cp
operator|.
name|wasDeleteNamespaceCalled
argument_list|()
argument_list|)
expr_stmt|;
name|cp
operator|.
name|enableBypass
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|expected
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|admin
operator|.
name|createNamespace
argument_list|(
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
name|testNamespace
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BypassCoprocessorException
name|ce
parameter_list|)
block|{
name|expected
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Test namespace should not be created"
argument_list|,
name|cp
operator|.
name|preCreateNamespaceCalledOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// turn on bypass, run the test
name|cp
operator|.
name|enableBypass
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"post listNamespace should not have been called"
argument_list|,
name|cp
operator|.
name|preListNamespaceDescriptorsCalledOnly
argument_list|()
argument_list|)
expr_stmt|;
comment|// turn off bypass, run the tests again
name|cp
operator|.
name|enableBypass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|admin
operator|.
name|listNamespaceDescriptors
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"post listNamespace should have been called"
argument_list|,
name|cp
operator|.
name|wasListNamespaceDescriptorsCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|modifyTableSync
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|)
throws|throws
name|IOException
block|{
name|admin
operator|.
name|modifyTable
argument_list|(
name|tableName
argument_list|,
name|htd
argument_list|)
expr_stmt|;
comment|//wait until modify table finishes
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|100
condition|;
name|t
operator|++
control|)
block|{
comment|//10 sec timeout
name|HTableDescriptor
name|td
init|=
name|admin
operator|.
name|getTableDescriptor
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|.
name|equals
argument_list|(
name|htd
argument_list|)
condition|)
block|{
break|break;
block|}
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRegionTransitionOperations
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterCoprocessorHost
name|host
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|CPMasterObserver
name|cp
init|=
operator|(
name|CPMasterObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cp
operator|.
name|enableBypass
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|TEST_FAMILY
argument_list|)
decl_stmt|;
try|try
init|(
name|RegionLocator
name|r
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|r
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|HRegionLocation
name|firstGoodPair
init|=
literal|null
decl_stmt|;
for|for
control|(
name|HRegionLocation
name|e
range|:
name|regions
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getServerName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|firstGoodPair
operator|=
name|e
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"Found a non-null entry"
argument_list|,
name|firstGoodPair
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|firstGoodPair
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to force a move
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|master
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
name|String
name|destName
init|=
literal|null
decl_stmt|;
name|String
name|serverNameForFirstRegion
init|=
name|firstGoodPair
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"serverNameForFirstRegion="
operator|+
name|serverNameForFirstRegion
argument_list|)
expr_stmt|;
name|ServerName
name|masterServerName
init|=
name|master
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
comment|// Find server that is NOT carrying the first region
for|for
control|(
name|ServerName
name|info
range|:
name|servers
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"ServerName="
operator|+
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|serverNameForFirstRegion
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|&&
operator|!
name|masterServerName
operator|.
name|equals
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|destName
operator|=
name|info
operator|.
name|toString
argument_list|()
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Found server"
argument_list|,
name|found
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Found "
operator|+
name|destName
argument_list|)
expr_stmt|;
name|master
operator|.
name|getMasterRpcServices
argument_list|()
operator|.
name|moveRegion
argument_list|(
literal|null
argument_list|,
name|RequestConverter
operator|.
name|buildMoveRegionRequest
argument_list|(
name|firstGoodPair
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|destName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on region move"
argument_list|,
name|cp
operator|.
name|wasMoveCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure balancer is on
name|master
operator|.
name|balanceSwitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should have been called on balance switch"
argument_list|,
name|cp
operator|.
name|wasBalanceSwitchCalled
argument_list|()
argument_list|)
expr_stmt|;
comment|// turn balancer off
name|master
operator|.
name|balanceSwitch
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// wait for assignments to finish, if any
name|UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|()
expr_stmt|;
comment|// move half the open regions from RS 0 to RS 1
name|HRegionServer
name|rs
init|=
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|destRS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cluster
operator|.
name|getRegionServer
argument_list|(
literal|1
argument_list|)
operator|.
name|getServerName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|//Make sure no regions are in transition now
name|UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|openRegions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|moveCnt
init|=
name|openRegions
operator|.
name|size
argument_list|()
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moveCnt
condition|;
name|i
operator|++
control|)
block|{
name|HRegionInfo
name|info
init|=
name|openRegions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
name|master
operator|.
name|getMasterRpcServices
argument_list|()
operator|.
name|moveRegion
argument_list|(
literal|null
argument_list|,
name|RequestConverter
operator|.
name|buildMoveRegionRequest
argument_list|(
name|openRegions
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|destRS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Make sure no regions are in transition now
name|UTIL
operator|.
name|waitUntilNoRegionsInTransition
argument_list|()
expr_stmt|;
comment|// now trigger a balance
name|master
operator|.
name|balanceSwitch
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|balanceRun
init|=
name|master
operator|.
name|balance
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should be called on region rebalancing"
argument_list|,
name|cp
operator|.
name|wasBalanceCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getHBaseAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|deleteTable
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testTableDescriptorsEnumeration
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterCoprocessorHost
name|host
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|CPMasterObserver
name|cp
init|=
operator|(
name|CPMasterObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|GetTableDescriptorsRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetTableDescriptorsRequest
argument_list|(
operator|(
name|List
argument_list|<
name|TableName
argument_list|>
operator|)
literal|null
argument_list|)
decl_stmt|;
name|master
operator|.
name|getMasterRpcServices
argument_list|()
operator|.
name|getTableDescriptors
argument_list|(
literal|null
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should be called on table descriptors request"
argument_list|,
name|cp
operator|.
name|wasGetTableDescriptorsCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testTableNamesEnumeration
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterCoprocessorHost
name|host
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|CPMasterObserver
name|cp
init|=
operator|(
name|CPMasterObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|master
operator|.
name|getMasterRpcServices
argument_list|()
operator|.
name|getTableNames
argument_list|(
literal|null
argument_list|,
name|GetTableNamesRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should be called on table names request"
argument_list|,
name|cp
operator|.
name|wasGetTableNamesCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testAbortProcedureOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterCoprocessorHost
name|host
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|CPMasterObserver
name|cp
init|=
operator|(
name|CPMasterObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|master
operator|.
name|abortProcedure
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should be called on abort procedure request"
argument_list|,
name|cp
operator|.
name|wasAbortProcedureCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testListProceduresOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|MasterCoprocessorHost
name|host
init|=
name|master
operator|.
name|getMasterCoprocessorHost
argument_list|()
decl_stmt|;
name|CPMasterObserver
name|cp
init|=
operator|(
name|CPMasterObserver
operator|)
name|host
operator|.
name|findCoprocessor
argument_list|(
name|CPMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|cp
operator|.
name|resetStates
argument_list|()
expr_stmt|;
name|master
operator|.
name|listProcedures
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Coprocessor should be called on list procedures request"
argument_list|,
name|cp
operator|.
name|wasListProceduresCalled
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteTable
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
comment|// NOTE: We need a latch because admin is not sync,
comment|// so the postOp coprocessor method may be called after the admin operation returned.
name|tableDeletionLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|admin
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|tableDeletionLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|tableDeletionLatch
operator|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

