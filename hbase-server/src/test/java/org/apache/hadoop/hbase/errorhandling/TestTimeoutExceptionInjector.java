begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test the {@link TimeoutExceptionInjector} to ensure we fulfill contracts  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestTimeoutExceptionInjector
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestTimeoutExceptionInjector
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Test that a manually triggered timer fires an exception.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testTimerTrigger
parameter_list|()
block|{
specifier|final
name|long
name|time
init|=
literal|10000000
decl_stmt|;
comment|// pick a value that is very far in the future
name|ForeignExceptionListener
name|listener
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ForeignExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeoutExceptionInjector
name|timer
init|=
operator|new
name|TimeoutExceptionInjector
argument_list|(
name|listener
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|timer
operator|.
name|trigger
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|listener
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|receive
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that a manually triggered exception with data fires with the data in receiveError.    */
annotation|@
name|Test
specifier|public
name|void
name|testTimerPassesOnErrorInfo
parameter_list|()
block|{
specifier|final
name|long
name|time
init|=
literal|1000000
decl_stmt|;
name|ForeignExceptionListener
name|listener
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ForeignExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeoutExceptionInjector
name|timer
init|=
operator|new
name|TimeoutExceptionInjector
argument_list|(
name|listener
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|timer
operator|.
name|trigger
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|listener
argument_list|)
operator|.
name|receive
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Demonstrate TimeoutExceptionInjector semantics -- completion means no more exceptions passed to    * error listener.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStartAfterComplete
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|long
name|time
init|=
literal|10
decl_stmt|;
name|ForeignExceptionListener
name|listener
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ForeignExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeoutExceptionInjector
name|timer
init|=
operator|new
name|TimeoutExceptionInjector
argument_list|(
name|listener
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|timer
operator|.
name|complete
argument_list|()
expr_stmt|;
try|try
block|{
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Timer should fail to start after complete."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Correctly failed timer: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|time
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verifyZeroInteractions
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Demonstrate TimeoutExceptionInjector semantics -- triggering fires exception and completes    * the timer.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testStartAfterTrigger
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|long
name|time
init|=
literal|10
decl_stmt|;
name|ForeignExceptionListener
name|listener
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ForeignExceptionListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|TimeoutExceptionInjector
name|timer
init|=
operator|new
name|TimeoutExceptionInjector
argument_list|(
name|listener
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|timer
operator|.
name|trigger
argument_list|()
expr_stmt|;
try|try
block|{
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Timer should fail to start after complete."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Correctly failed timer: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|time
operator|*
literal|2
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|listener
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|receive
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verifyNoMoreInteractions
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

