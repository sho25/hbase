begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|RpcController
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|MetricRegistryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MutateRowsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|CoprocessorTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Testing of coprocessor metrics end-to-end.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|CoprocessorTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCoprocessorMetrics
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCoprocessorMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|foo
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|bar
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bar"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|/**    * MasterObserver that has a Timer metric for create table operation.    */
specifier|public
specifier|static
class|class
name|CustomMasterObserver
implements|implements
name|MasterCoprocessor
implements|,
name|MasterObserver
block|{
specifier|private
name|Timer
name|createTableTimer
decl_stmt|;
specifier|private
name|long
name|start
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableDescriptor
name|desc
parameter_list|,
name|RegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
comment|// we rely on the fact that there is only 1 instance of our MasterObserver
name|this
operator|.
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|TableDescriptor
name|desc
parameter_list|,
name|RegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|start
operator|>
literal|0
condition|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Create table took: "
operator|+
name|time
argument_list|)
expr_stmt|;
name|createTableTimer
operator|.
name|updateMillis
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|env
operator|instanceof
name|MasterCoprocessorEnvironment
condition|)
block|{
name|MetricRegistry
name|registry
init|=
operator|(
operator|(
name|MasterCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getMetricRegistryForMaster
argument_list|()
decl_stmt|;
name|createTableTimer
operator|=
name|registry
operator|.
name|timer
argument_list|(
literal|"CreateTable"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|MasterObserver
argument_list|>
name|getMasterObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * RegionServerObserver that has a Counter for rollWAL requests.    */
specifier|public
specifier|static
class|class
name|CustomRegionServerObserver
implements|implements
name|RegionServerCoprocessor
implements|,
name|RegionServerObserver
block|{
comment|/** This is the Counter metric object to keep track of the current count across invocations */
specifier|private
name|Counter
name|rollWALCounter
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionServerObserver
argument_list|>
name|getRegionServerObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postRollWALWriterRequest
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionServerCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Increment the Counter whenever the coprocessor is called
name|rollWALCounter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|env
operator|instanceof
name|RegionServerCoprocessorEnvironment
condition|)
block|{
name|MetricRegistry
name|registry
init|=
operator|(
operator|(
name|RegionServerCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getMetricRegistryForRegionServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|rollWALCounter
operator|==
literal|null
condition|)
block|{
name|rollWALCounter
operator|=
name|registry
operator|.
name|counter
argument_list|(
literal|"rollWALRequests"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * WALObserver that has a Counter for walEdits written.    */
specifier|public
specifier|static
class|class
name|CustomWALObserver
implements|implements
name|WALCoprocessor
implements|,
name|WALObserver
block|{
specifier|private
name|Counter
name|walEditsCount
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|postWALWrite
parameter_list|(
name|ObserverContext
argument_list|<
name|?
extends|extends
name|WALCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|RegionInfo
name|info
parameter_list|,
name|WALKey
name|logKey
parameter_list|,
name|WALEdit
name|logEdit
parameter_list|)
throws|throws
name|IOException
block|{
name|walEditsCount
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|env
operator|instanceof
name|WALCoprocessorEnvironment
condition|)
block|{
name|MetricRegistry
name|registry
init|=
operator|(
operator|(
name|WALCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getMetricRegistryForRegionServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|walEditsCount
operator|==
literal|null
condition|)
block|{
name|walEditsCount
operator|=
name|registry
operator|.
name|counter
argument_list|(
literal|"walEditsCount"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|WALObserver
argument_list|>
name|getWALObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
comment|/**    * RegionObserver that has a Counter for preGet()    */
specifier|public
specifier|static
class|class
name|CustomRegionObserver
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
specifier|private
name|Counter
name|preGetCounter
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
name|Get
name|get
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
name|preGetCounter
operator|.
name|increment
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
name|MetricRegistry
name|registry
init|=
operator|(
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getMetricRegistryForRegionServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|preGetCounter
operator|==
literal|null
condition|)
block|{
name|preGetCounter
operator|=
name|registry
operator|.
name|counter
argument_list|(
literal|"preGetRequests"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|CustomRegionObserver2
extends|extends
name|CustomRegionObserver
block|{   }
comment|/**    * RegionEndpoint to test metrics from endpoint calls    */
specifier|public
specifier|static
class|class
name|CustomRegionEndpoint
extends|extends
name|MultiRowMutationEndpoint
block|{
specifier|private
name|Timer
name|endpointExecution
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|mutateRows
parameter_list|(
name|RpcController
name|controller
parameter_list|,
name|MutateRowsRequest
name|request
parameter_list|,
name|RpcCallback
argument_list|<
name|MutateRowsResponse
argument_list|>
name|done
parameter_list|)
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|super
operator|.
name|mutateRows
argument_list|(
name|controller
argument_list|,
name|request
argument_list|,
name|done
argument_list|)
expr_stmt|;
name|endpointExecution
operator|.
name|updateNanos
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|CoprocessorEnvironment
name|env
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|start
argument_list|(
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|instanceof
name|RegionCoprocessorEnvironment
condition|)
block|{
name|MetricRegistry
name|registry
init|=
operator|(
operator|(
name|RegionCoprocessorEnvironment
operator|)
name|env
operator|)
operator|.
name|getMetricRegistryForRegionServer
argument_list|()
decl_stmt|;
if|if
condition|(
name|endpointExecution
operator|==
literal|null
condition|)
block|{
name|endpointExecution
operator|=
name|registry
operator|.
name|timer
argument_list|(
literal|"EndpointExecution"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// inject master, regionserver and WAL coprocessors
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|CustomMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGIONSERVER_COPROCESSOR_CONF_KEY
argument_list|,
name|CustomRegionServerObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|WAL_COPROCESSOR_CONF_KEY
argument_list|,
name|CustomWALObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CoprocessorHost
operator|.
name|ABORT_ON_ERROR_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|teardownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
for|for
control|(
name|HTableDescriptor
name|htd
range|:
name|admin
operator|.
name|listTables
argument_list|()
control|)
block|{
name|UTIL
operator|.
name|deleteTable
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMasterObserver
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Find out the MetricRegistry used by the CP using the global registries
name|MetricRegistryInfo
name|info
init|=
name|MetricsCoprocessor
operator|.
name|createRegistryInfoForMasterCoprocessor
argument_list|(
name|CustomMasterObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|MetricRegistry
argument_list|>
name|registry
init|=
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Metric
argument_list|>
name|metric
init|=
name|registry
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"CreateTable"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|Timer
name|createTableTimer
init|=
operator|(
name|Timer
operator|)
name|metric
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|prevCount
init|=
name|createTableTimer
operator|.
name|getHistogram
argument_list|()
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating table"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|createTableTimer
operator|.
name|getHistogram
argument_list|()
operator|.
name|getCount
argument_list|()
operator|-
name|prevCount
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionServerObserver
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rolling WALs"
argument_list|)
expr_stmt|;
name|admin
operator|.
name|rollWALWriter
argument_list|(
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getServerHoldingMeta
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Find out the MetricRegistry used by the CP using the global registries
name|MetricRegistryInfo
name|info
init|=
name|MetricsCoprocessor
operator|.
name|createRegistryInfoForRSCoprocessor
argument_list|(
name|CustomRegionServerObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|MetricRegistry
argument_list|>
name|registry
init|=
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Metric
argument_list|>
name|metric
init|=
name|registry
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"rollWALRequests"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|rollWalRequests
init|=
operator|(
name|Counter
operator|)
name|metric
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rollWalRequests
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWALObserver
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Find out the MetricRegistry used by the CP using the global registries
name|MetricRegistryInfo
name|info
init|=
name|MetricsCoprocessor
operator|.
name|createRegistryInfoForWALCoprocessor
argument_list|(
name|CustomWALObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|MetricRegistry
argument_list|>
name|registry
init|=
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Metric
argument_list|>
name|metric
init|=
name|registry
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"walEditsCount"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Counter
name|rollWalRequests
init|=
operator|(
name|Counter
operator|)
name|metric
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|prevCount
init|=
name|rollWalRequests
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|prevCount
operator|>
literal|0
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|foo
argument_list|)
operator|.
name|addColumn
argument_list|(
name|foo
argument_list|,
name|foo
argument_list|,
name|foo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rollWalRequests
operator|.
name|getCount
argument_list|()
operator|-
name|prevCount
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper for below tests    */
specifier|private
name|void
name|assertPreGetRequestsCounter
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|coprocClass
parameter_list|)
block|{
comment|// Find out the MetricRegistry used by the CP using the global registries
name|MetricRegistryInfo
name|info
init|=
name|MetricsCoprocessor
operator|.
name|createRegistryInfoForRegionCoprocessor
argument_list|(
name|coprocClass
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|MetricRegistry
argument_list|>
name|registry
init|=
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Metric
argument_list|>
name|metric
init|=
name|registry
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"preGetRequests"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Counter
name|preGetRequests
init|=
operator|(
name|Counter
operator|)
name|metric
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|preGetRequests
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionObserverSingleRegion
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|foo
argument_list|)
argument_list|)
comment|// add the coprocessor for the region
operator|.
name|addCoprocessor
argument_list|(
name|CustomRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 gets
block|}
block|}
name|assertPreGetRequestsCounter
argument_list|(
name|CustomRegionObserver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionObserverMultiRegion
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|foo
argument_list|)
argument_list|)
comment|// add the coprocessor for the region
operator|.
name|addCoprocessor
argument_list|(
name|CustomRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|foo
block|}
argument_list|)
expr_stmt|;
comment|// create with 2 regions
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 gets to 2 separate regions
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|bar
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|foo
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertPreGetRequestsCounter
argument_list|(
name|CustomRegionObserver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionObserverMultiTable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName1
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|foo
argument_list|)
argument_list|)
comment|// add the coprocessor for the region
operator|.
name|addCoprocessor
argument_list|(
name|CustomRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName2
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|foo
argument_list|)
argument_list|)
comment|// add the coprocessor for the region
operator|.
name|addCoprocessor
argument_list|(
name|CustomRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table1
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName1
argument_list|)
init|;
name|Table
name|table2
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName2
argument_list|)
init|)
block|{
name|table1
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|table2
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 gets to 2 separate tables
block|}
block|}
name|assertPreGetRequestsCounter
argument_list|(
name|CustomRegionObserver
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionObserverMultiCoprocessor
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|foo
argument_list|)
argument_list|)
comment|// add the coprocessor for the region. We add two different coprocessors
operator|.
name|addCoprocessor
argument_list|(
name|CustomRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|addCoprocessor
argument_list|(
name|CustomRegionObserver2
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 gets
block|}
block|}
comment|// we will have two counters coming from two coprocs, in two different MetricRegistries
name|assertPreGetRequestsCounter
argument_list|(
name|CustomRegionObserver
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertPreGetRequestsCounter
argument_list|(
name|CustomRegionObserver2
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionObserverAfterRegionClosed
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|foo
argument_list|)
argument_list|)
comment|// add the coprocessor for the region
operator|.
name|addCoprocessor
argument_list|(
name|CustomRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|foo
block|}
argument_list|)
expr_stmt|;
comment|// create with 2 regions
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2 gets
block|}
name|assertPreGetRequestsCounter
argument_list|(
name|CustomRegionObserver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// close one of the regions
try|try
init|(
name|RegionLocator
name|locator
init|=
name|connection
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|HRegionLocation
name|loc
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|admin
operator|.
name|unassign
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HRegionServer
name|server
init|=
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|loc
operator|.
name|getServerName
argument_list|()
argument_list|)
decl_stmt|;
name|UTIL
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|,
parameter_list|()
lambda|->
name|server
operator|.
name|getOnlineRegion
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|server
operator|.
name|getOnlineRegion
argument_list|(
name|loc
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// with only 1 region remaining, we should still be able to find the Counter
name|assertPreGetRequestsCounter
argument_list|(
name|CustomRegionObserver
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// close the table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|MetricRegistryInfo
name|info
init|=
name|MetricsCoprocessor
operator|.
name|createRegistryInfoForRegionCoprocessor
argument_list|(
name|CustomRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// ensure that MetricRegistry is deleted
name|Optional
argument_list|<
name|MetricRegistry
argument_list|>
name|registry
init|=
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|registry
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionObserverEndpoint
parameter_list|()
throws|throws
name|IOException
throws|,
name|ServiceException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|connection
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|foo
argument_list|)
argument_list|)
comment|// add the coprocessor for the region
operator|.
name|addCoprocessor
argument_list|(
name|CustomRegionEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Mutation
argument_list|>
name|mutations
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|Put
argument_list|(
name|foo
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|bar
argument_list|)
argument_list|)
decl_stmt|;
name|MutateRowsRequest
operator|.
name|Builder
name|mrmBuilder
init|=
name|MutateRowsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Mutation
name|mutation
range|:
name|mutations
control|)
block|{
name|mrmBuilder
operator|.
name|addMutationRequest
argument_list|(
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
operator|.
name|PUT
argument_list|,
name|mutation
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CoprocessorRpcChannel
name|channel
init|=
name|table
operator|.
name|coprocessorService
argument_list|(
name|bar
argument_list|)
decl_stmt|;
name|MultiRowMutationService
operator|.
name|BlockingInterface
name|service
init|=
name|MultiRowMutationService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|MutateRowsRequest
name|mrm
init|=
name|mrmBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|service
operator|.
name|mutateRows
argument_list|(
literal|null
argument_list|,
name|mrm
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Find out the MetricRegistry used by the CP using the global registries
name|MetricRegistryInfo
name|info
init|=
name|MetricsCoprocessor
operator|.
name|createRegistryInfoForRegionCoprocessor
argument_list|(
name|CustomRegionEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|MetricRegistry
argument_list|>
name|registry
init|=
name|MetricRegistries
operator|.
name|global
argument_list|()
operator|.
name|get
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Optional
argument_list|<
name|Metric
argument_list|>
name|metric
init|=
name|registry
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"EndpointExecution"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|metric
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Timer
name|endpointExecutions
init|=
operator|(
name|Timer
operator|)
name|metric
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|endpointExecutions
operator|.
name|getHistogram
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

