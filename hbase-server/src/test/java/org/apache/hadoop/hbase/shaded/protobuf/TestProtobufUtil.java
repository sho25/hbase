begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ProcedureState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|LockInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|LockServiceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestProtobufUtil
block|{
specifier|public
name|TestProtobufUtil
parameter_list|()
block|{   }
specifier|private
specifier|static
name|ProcedureInfo
name|createProcedureInfo
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
return|return
operator|new
name|ProcedureInfo
argument_list|(
name|procId
argument_list|,
literal|"java.lang.Object"
argument_list|,
literal|null
argument_list|,
name|ProcedureState
operator|.
name|RUNNABLE
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertProcedureInfoEquals
parameter_list|(
name|ProcedureInfo
name|expected
parameter_list|,
name|ProcedureInfo
name|result
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
name|result
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|expected
operator|==
literal|null
operator|||
name|result
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
operator|.
name|getProcId
argument_list|()
argument_list|,
name|result
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertLockInfoEquals
parameter_list|(
name|LockInfo
name|expected
parameter_list|,
name|LockInfo
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|result
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|result
operator|.
name|getResourceName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getLockType
argument_list|()
argument_list|,
name|result
operator|.
name|getLockType
argument_list|()
argument_list|)
expr_stmt|;
name|assertProcedureInfoEquals
argument_list|(
name|expected
operator|.
name|getExclusiveLockOwnerProcedure
argument_list|()
argument_list|,
name|result
operator|.
name|getExclusiveLockOwnerProcedure
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getSharedLockCount
argument_list|()
argument_list|,
name|result
operator|.
name|getSharedLockCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|assertWaitingProcedureEquals
parameter_list|(
name|LockInfo
operator|.
name|WaitingProcedure
name|expected
parameter_list|,
name|LockInfo
operator|.
name|WaitingProcedure
name|result
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getLockType
argument_list|()
argument_list|,
name|result
operator|.
name|getLockType
argument_list|()
argument_list|)
expr_stmt|;
name|assertProcedureInfoEquals
argument_list|(
name|expected
operator|.
name|getProcedure
argument_list|()
argument_list|,
name|result
operator|.
name|getProcedure
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testServerLockInfo
parameter_list|()
block|{
name|LockInfo
name|lock
init|=
operator|new
name|LockInfo
argument_list|()
decl_stmt|;
name|lock
operator|.
name|setResourceType
argument_list|(
name|LockInfo
operator|.
name|ResourceType
operator|.
name|SERVER
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setResourceName
argument_list|(
literal|"server"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setLockType
argument_list|(
name|LockInfo
operator|.
name|LockType
operator|.
name|SHARED
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setSharedLockCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|LockServiceProtos
operator|.
name|LockInfo
name|proto
init|=
name|ProtobufUtil
operator|.
name|toProtoLockInfo
argument_list|(
name|lock
argument_list|)
decl_stmt|;
name|LockInfo
name|lock2
init|=
name|ProtobufUtil
operator|.
name|toLockInfo
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|assertLockInfoEquals
argument_list|(
name|lock
argument_list|,
name|lock2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceLockInfo
parameter_list|()
block|{
name|LockInfo
name|lock
init|=
operator|new
name|LockInfo
argument_list|()
decl_stmt|;
name|lock
operator|.
name|setResourceType
argument_list|(
name|LockInfo
operator|.
name|ResourceType
operator|.
name|NAMESPACE
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setResourceName
argument_list|(
literal|"ns"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setLockType
argument_list|(
name|LockInfo
operator|.
name|LockType
operator|.
name|EXCLUSIVE
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setExclusiveLockOwnerProcedure
argument_list|(
name|createProcedureInfo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|LockServiceProtos
operator|.
name|LockInfo
name|proto
init|=
name|ProtobufUtil
operator|.
name|toProtoLockInfo
argument_list|(
name|lock
argument_list|)
decl_stmt|;
name|LockInfo
name|lock2
init|=
name|ProtobufUtil
operator|.
name|toLockInfo
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|assertLockInfoEquals
argument_list|(
name|lock
argument_list|,
name|lock2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableLockInfo
parameter_list|()
block|{
name|LockInfo
name|lock
init|=
operator|new
name|LockInfo
argument_list|()
decl_stmt|;
name|lock
operator|.
name|setResourceType
argument_list|(
name|LockInfo
operator|.
name|ResourceType
operator|.
name|TABLE
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setResourceName
argument_list|(
literal|"table"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setLockType
argument_list|(
name|LockInfo
operator|.
name|LockType
operator|.
name|SHARED
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setSharedLockCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|LockServiceProtos
operator|.
name|LockInfo
name|proto
init|=
name|ProtobufUtil
operator|.
name|toProtoLockInfo
argument_list|(
name|lock
argument_list|)
decl_stmt|;
name|LockInfo
name|lock2
init|=
name|ProtobufUtil
operator|.
name|toLockInfo
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|assertLockInfoEquals
argument_list|(
name|lock
argument_list|,
name|lock2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionLockInfo
parameter_list|()
block|{
name|LockInfo
name|lock
init|=
operator|new
name|LockInfo
argument_list|()
decl_stmt|;
name|lock
operator|.
name|setResourceType
argument_list|(
name|LockInfo
operator|.
name|ResourceType
operator|.
name|REGION
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setResourceName
argument_list|(
literal|"region"
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setLockType
argument_list|(
name|LockInfo
operator|.
name|LockType
operator|.
name|EXCLUSIVE
argument_list|)
expr_stmt|;
name|lock
operator|.
name|setExclusiveLockOwnerProcedure
argument_list|(
name|createProcedureInfo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|LockServiceProtos
operator|.
name|LockInfo
name|proto
init|=
name|ProtobufUtil
operator|.
name|toProtoLockInfo
argument_list|(
name|lock
argument_list|)
decl_stmt|;
name|LockInfo
name|lock2
init|=
name|ProtobufUtil
operator|.
name|toLockInfo
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|assertLockInfoEquals
argument_list|(
name|lock
argument_list|,
name|lock2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExclusiveWaitingLockInfo
parameter_list|()
block|{
name|LockInfo
operator|.
name|WaitingProcedure
name|waitingProcedure
init|=
operator|new
name|LockInfo
operator|.
name|WaitingProcedure
argument_list|()
decl_stmt|;
name|waitingProcedure
operator|.
name|setLockType
argument_list|(
name|LockInfo
operator|.
name|LockType
operator|.
name|EXCLUSIVE
argument_list|)
expr_stmt|;
name|waitingProcedure
operator|.
name|setProcedure
argument_list|(
name|createProcedureInfo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|LockServiceProtos
operator|.
name|WaitingProcedure
name|proto
init|=
name|ProtobufUtil
operator|.
name|toProtoWaitingProcedure
argument_list|(
name|waitingProcedure
argument_list|)
decl_stmt|;
name|LockInfo
operator|.
name|WaitingProcedure
name|waitingProcedure2
init|=
name|ProtobufUtil
operator|.
name|toWaitingProcedure
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|assertWaitingProcedureEquals
argument_list|(
name|waitingProcedure
argument_list|,
name|waitingProcedure2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSharedWaitingLockInfo
parameter_list|()
block|{
name|LockInfo
operator|.
name|WaitingProcedure
name|waitingProcedure
init|=
operator|new
name|LockInfo
operator|.
name|WaitingProcedure
argument_list|()
decl_stmt|;
name|waitingProcedure
operator|.
name|setLockType
argument_list|(
name|LockInfo
operator|.
name|LockType
operator|.
name|SHARED
argument_list|)
expr_stmt|;
name|waitingProcedure
operator|.
name|setProcedure
argument_list|(
name|createProcedureInfo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|LockServiceProtos
operator|.
name|WaitingProcedure
name|proto
init|=
name|ProtobufUtil
operator|.
name|toProtoWaitingProcedure
argument_list|(
name|waitingProcedure
argument_list|)
decl_stmt|;
name|LockInfo
operator|.
name|WaitingProcedure
name|waitingProcedure2
init|=
name|ProtobufUtil
operator|.
name|toWaitingProcedure
argument_list|(
name|proto
argument_list|)
decl_stmt|;
name|assertWaitingProcedureEquals
argument_list|(
name|waitingProcedure
argument_list|,
name|waitingProcedure2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

