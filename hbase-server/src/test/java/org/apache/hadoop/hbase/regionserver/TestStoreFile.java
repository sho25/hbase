begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileDataBlockEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileDataBlockEncoderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BloomFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Test HStoreFile  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStoreFile
extends|extends
name|HBaseTestCase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStoreFile
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|ROOT_DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestStoreFile"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ChecksumType
name|CKTYPE
init|=
name|ChecksumType
operator|.
name|CRC32C
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CKBYTES
init|=
literal|512
decl_stmt|;
specifier|private
specifier|static
name|String
name|TEST_FAMILY
init|=
literal|"cf"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Write a file and then assert that we can read from top and bottom halves    * using two HalfMapFiles.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBasicHalfMapFile
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testBasicHalfMapFileTb"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|regionFs
init|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|,
name|hri
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|2
operator|*
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|regionFs
operator|.
name|createTempName
argument_list|()
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|writeStoreFile
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|Path
name|sfPath
init|=
name|regionFs
operator|.
name|commitStoreFile
argument_list|(
name|TEST_FAMILY
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|StoreFile
name|sf
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|sfPath
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|checkHalfHFile
argument_list|(
name|regionFs
argument_list|,
name|sf
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|writeStoreFile
parameter_list|(
specifier|final
name|StoreFileWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|writeStoreFile
argument_list|(
name|writer
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// pick an split point (roughly halfway)
name|byte
index|[]
name|SPLITKEY
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|LAST_CHAR
operator|+
name|FIRST_CHAR
operator|)
operator|/
literal|2
block|,
name|FIRST_CHAR
block|}
decl_stmt|;
comment|/*    * Writes HStoreKey and ImmutableBytes data to passed writer and    * then closes it.    * @param writer    * @throws IOException    */
specifier|public
specifier|static
name|void
name|writeStoreFile
parameter_list|(
specifier|final
name|StoreFileWriter
name|writer
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|char
name|d
init|=
name|FIRST_CHAR
init|;
name|d
operator|<=
name|LAST_CHAR
condition|;
name|d
operator|++
control|)
block|{
for|for
control|(
name|char
name|e
init|=
name|FIRST_CHAR
init|;
name|e
operator|<=
name|LAST_CHAR
condition|;
name|e
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|d
block|,
operator|(
name|byte
operator|)
name|e
block|}
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|fam
argument_list|,
name|qualifier
argument_list|,
name|now
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Test that our mechanism of writing store files in one region to reference    * store files in other regions works.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testReference
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testReferenceTb"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|regionFs
init|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|,
name|hri
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|regionFs
operator|.
name|createTempName
argument_list|()
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|writeStoreFile
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|Path
name|hsfPath
init|=
name|regionFs
operator|.
name|commitStoreFile
argument_list|(
name|TEST_FAMILY
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|StoreFile
name|hsf
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|hsfPath
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|StoreFileReader
name|reader
init|=
name|hsf
operator|.
name|createReader
argument_list|()
decl_stmt|;
comment|// Split on a row, not in middle of row.  Midkey returned by reader
comment|// may be in middle of row.  Create new one with empty column and
comment|// timestamp.
name|Cell
name|kv
init|=
name|reader
operator|.
name|midkey
argument_list|()
decl_stmt|;
name|byte
index|[]
name|midRow
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|kv
operator|=
name|reader
operator|.
name|getLastKey
argument_list|()
expr_stmt|;
name|byte
index|[]
name|finalRow
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|kv
argument_list|)
decl_stmt|;
name|hsf
operator|.
name|closeReader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Make a reference
name|HRegionInfo
name|splitHri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
name|midRow
argument_list|)
decl_stmt|;
name|Path
name|refPath
init|=
name|splitStoreFile
argument_list|(
name|regionFs
argument_list|,
name|splitHri
argument_list|,
name|TEST_FAMILY
argument_list|,
name|hsf
argument_list|,
name|midRow
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|StoreFile
name|refHsf
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|refPath
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
comment|// Now confirm that I can read from the reference and that it only gets
comment|// keys from top half of the file.
name|HFileScanner
name|s
init|=
name|refHsf
operator|.
name|createReader
argument_list|()
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|boolean
name|first
init|=
literal|true
init|;
operator|(
operator|!
name|s
operator|.
name|isSeeked
argument_list|()
operator|&&
name|s
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
name|s
operator|.
name|next
argument_list|()
condition|;
control|)
block|{
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
operator|(
name|KeyValue
operator|)
name|s
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|kv
operator|=
name|KeyValueUtil
operator|.
name|createKeyValueFromKey
argument_list|(
name|bb
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|midRow
argument_list|,
literal|0
argument_list|,
name|midRow
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|kv
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|kv
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|finalRow
argument_list|,
literal|0
argument_list|,
name|finalRow
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyStoreFileRestrictKeyRanges
parameter_list|()
throws|throws
name|Exception
block|{
name|StoreFileReader
name|reader
init|=
name|mock
argument_list|(
name|StoreFileReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|mock
argument_list|(
name|Store
operator|.
name|class
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
name|mock
argument_list|(
name|HColumnDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ty"
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|cf
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|StoreFileScanner
name|scanner
init|=
operator|new
name|StoreFileScanner
argument_list|(
name|reader
argument_list|,
name|mock
argument_list|(
name|HFileScanner
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setColumnFamilyTimeRange
argument_list|(
name|cf
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHFileLink
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testHFileLinkTb"
argument_list|)
argument_list|)
decl_stmt|;
comment|// force temp data in hbase/target/test-data instead of /tmp/hbase-xxxx/
name|Configuration
name|testConf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|testConf
argument_list|,
name|testDir
argument_list|)
expr_stmt|;
name|HRegionFileSystem
name|regionFs
init|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|testConf
argument_list|,
name|fs
argument_list|,
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|testDir
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|hri
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|regionFs
operator|.
name|createTempName
argument_list|()
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|writeStoreFile
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|Path
name|storeFilePath
init|=
name|regionFs
operator|.
name|commitStoreFile
argument_list|(
name|TEST_FAMILY
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
operator|new
name|Path
argument_list|(
name|regionFs
operator|.
name|getTableDir
argument_list|()
argument_list|,
operator|new
name|Path
argument_list|(
literal|"test-region"
argument_list|,
name|TEST_FAMILY
argument_list|)
argument_list|)
decl_stmt|;
name|HFileLink
operator|.
name|create
argument_list|(
name|testConf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|dstPath
argument_list|,
name|hri
argument_list|,
name|storeFilePath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|linkFilePath
init|=
operator|new
name|Path
argument_list|(
name|dstPath
argument_list|,
name|HFileLink
operator|.
name|createHFileLinkName
argument_list|(
name|hri
argument_list|,
name|storeFilePath
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Try to open store file from link
name|StoreFileInfo
name|storeFileInfo
init|=
operator|new
name|StoreFileInfo
argument_list|(
name|testConf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|linkFilePath
argument_list|)
decl_stmt|;
name|StoreFile
name|hsf
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|storeFileInfo
argument_list|,
name|testConf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|storeFileInfo
operator|.
name|isLink
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now confirm that I can read from the link
name|int
name|count
init|=
literal|1
decl_stmt|;
name|HFileScanner
name|s
init|=
name|hsf
operator|.
name|createReader
argument_list|()
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|s
operator|.
name|seekTo
argument_list|()
expr_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
operator|(
name|LAST_CHAR
operator|-
name|FIRST_CHAR
operator|+
literal|1
operator|)
operator|*
operator|(
name|LAST_CHAR
operator|-
name|FIRST_CHAR
operator|+
literal|1
operator|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test creates an hfile and then the dir structures and files to verify that references    * to hfilelinks (created by snapshot clones) can be properly interpreted.    */
annotation|@
name|Test
specifier|public
name|void
name|testReferenceToHFileLink
parameter_list|()
throws|throws
name|IOException
block|{
comment|// force temp data in hbase/target/test-data instead of /tmp/hbase-xxxx/
name|Configuration
name|testConf
init|=
operator|new
name|Configuration
argument_list|(
name|this
operator|.
name|conf
argument_list|)
decl_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|testConf
argument_list|,
name|testDir
argument_list|)
expr_stmt|;
comment|// adding legal table name chars to verify regex handles it.
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"_original-evil-name"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|regionFs
init|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|testConf
argument_list|,
name|fs
argument_list|,
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|testDir
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|hri
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.<root>/<tablename>/<rgn>/<cf>/<file>
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|testConf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|regionFs
operator|.
name|createTempName
argument_list|()
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|writeStoreFile
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|Path
name|storeFilePath
init|=
name|regionFs
operator|.
name|commitStoreFile
argument_list|(
name|TEST_FAMILY
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// create link to store file.<root>/clone/region/<cf>/<hfile>-<region>-<table>
name|HRegionInfo
name|hriClone
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"clone"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|cloneRegionFs
init|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|testConf
argument_list|,
name|fs
argument_list|,
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|testDir
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|,
name|hriClone
argument_list|)
decl_stmt|;
name|Path
name|dstPath
init|=
name|cloneRegionFs
operator|.
name|getStoreDir
argument_list|(
name|TEST_FAMILY
argument_list|)
decl_stmt|;
name|HFileLink
operator|.
name|create
argument_list|(
name|testConf
argument_list|,
name|this
operator|.
name|fs
argument_list|,
name|dstPath
argument_list|,
name|hri
argument_list|,
name|storeFilePath
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|linkFilePath
init|=
operator|new
name|Path
argument_list|(
name|dstPath
argument_list|,
name|HFileLink
operator|.
name|createHFileLinkName
argument_list|(
name|hri
argument_list|,
name|storeFilePath
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// create splits of the link.
comment|//<root>/clone/splitA/<cf>/<reftohfilelink>,
comment|//<root>/clone/splitB/<cf>/<reftohfilelink>
name|HRegionInfo
name|splitHriA
init|=
operator|new
name|HRegionInfo
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
name|SPLITKEY
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitHriB
init|=
operator|new
name|HRegionInfo
argument_list|(
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|SPLITKEY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StoreFile
name|f
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|linkFilePath
argument_list|,
name|testConf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|f
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|Path
name|pathA
init|=
name|splitStoreFile
argument_list|(
name|cloneRegionFs
argument_list|,
name|splitHriA
argument_list|,
name|TEST_FAMILY
argument_list|,
name|f
argument_list|,
name|SPLITKEY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// top
name|Path
name|pathB
init|=
name|splitStoreFile
argument_list|(
name|cloneRegionFs
argument_list|,
name|splitHriB
argument_list|,
name|TEST_FAMILY
argument_list|,
name|f
argument_list|,
name|SPLITKEY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// bottom
name|f
operator|.
name|closeReader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// OK test the thing
name|FSUtils
operator|.
name|logFileSystemState
argument_list|(
name|fs
argument_list|,
name|testDir
argument_list|,
name|LOG
argument_list|)
expr_stmt|;
comment|// There is a case where a file with the hfilelink pattern is actually a daughter
comment|// reference to a hfile link.  This code in StoreFile that handles this case.
comment|// Try to open store file from link
name|StoreFile
name|hsfA
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|pathA
argument_list|,
name|testConf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
comment|// Now confirm that I can read from the ref to link
name|int
name|count
init|=
literal|1
decl_stmt|;
name|HFileScanner
name|s
init|=
name|hsfA
operator|.
name|createReader
argument_list|()
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|s
operator|.
name|seekTo
argument_list|()
expr_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// read some rows here
comment|// Try to open store file from link
name|StoreFile
name|hsfB
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|pathB
argument_list|,
name|testConf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
comment|// Now confirm that I can read from the ref to link
name|HFileScanner
name|sB
init|=
name|hsfB
operator|.
name|createReader
argument_list|()
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|sB
operator|.
name|seekTo
argument_list|()
expr_stmt|;
comment|//count++ as seekTo() will advance the scanner
name|count
operator|++
expr_stmt|;
while|while
condition|(
name|sB
operator|.
name|next
argument_list|()
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
comment|// read the rest of the rows
name|assertEquals
argument_list|(
operator|(
name|LAST_CHAR
operator|-
name|FIRST_CHAR
operator|+
literal|1
operator|)
operator|*
operator|(
name|LAST_CHAR
operator|-
name|FIRST_CHAR
operator|+
literal|1
operator|)
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkHalfHFile
parameter_list|(
specifier|final
name|HRegionFileSystem
name|regionFs
parameter_list|,
specifier|final
name|StoreFile
name|f
parameter_list|)
throws|throws
name|IOException
block|{
name|Cell
name|midkey
init|=
name|f
operator|.
name|createReader
argument_list|()
operator|.
name|midkey
argument_list|()
decl_stmt|;
name|KeyValue
name|midKV
init|=
operator|(
name|KeyValue
operator|)
name|midkey
decl_stmt|;
name|byte
index|[]
name|midRow
init|=
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|midKV
argument_list|)
decl_stmt|;
comment|// Create top split.
name|HRegionInfo
name|topHri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|regionFs
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|,
name|midRow
argument_list|)
decl_stmt|;
name|Path
name|topPath
init|=
name|splitStoreFile
argument_list|(
name|regionFs
argument_list|,
name|topHri
argument_list|,
name|TEST_FAMILY
argument_list|,
name|f
argument_list|,
name|midRow
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Create bottom split.
name|HRegionInfo
name|bottomHri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|regionFs
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
argument_list|,
name|midRow
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Path
name|bottomPath
init|=
name|splitStoreFile
argument_list|(
name|regionFs
argument_list|,
name|bottomHri
argument_list|,
name|TEST_FAMILY
argument_list|,
name|f
argument_list|,
name|midRow
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Make readers on top and bottom.
name|StoreFileReader
name|top
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|topPath
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|StoreFileReader
name|bottom
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|bottomPath
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|ByteBuffer
name|previous
init|=
literal|null
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Midkey: "
operator|+
name|midKV
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ByteBuffer
name|bbMidkeyBytes
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|midKV
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Now make two HalfMapFiles and assert they can read the full backing
comment|// file, one from the top and the other from the bottom.
comment|// Test bottom half first.
comment|// Now test reading from the top.
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|ByteBuffer
name|key
init|=
literal|null
decl_stmt|;
name|HFileScanner
name|topScanner
init|=
name|top
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
operator|!
name|topScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|topScanner
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
operator|(
name|topScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|topScanner
operator|.
name|next
argument_list|()
operator|)
condition|)
block|{
name|key
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
operator|(
name|KeyValue
operator|)
name|topScanner
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|topScanner
operator|.
name|getReader
argument_list|()
operator|.
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|midKV
argument_list|,
name|key
operator|.
name|array
argument_list|()
argument_list|,
name|key
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|key
operator|.
name|limit
argument_list|()
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"key="
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|key
argument_list|)
operator|+
literal|"< midkey="
operator|+
name|midkey
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First in top: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Last in top: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
name|HFileScanner
name|bottomScanner
init|=
name|bottom
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
operator|!
name|bottomScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|bottomScanner
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
name|bottomScanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|previous
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
operator|(
name|KeyValue
operator|)
name|bottomScanner
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|key
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
operator|(
name|KeyValue
operator|)
name|bottomScanner
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First in bottom: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|previous
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|key
operator|.
name|compareTo
argument_list|(
name|bbMidkeyBytes
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|previous
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Last in bottom: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|previous
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Remove references.
name|regionFs
operator|.
name|cleanupDaughterRegion
argument_list|(
name|topHri
argument_list|)
expr_stmt|;
name|regionFs
operator|.
name|cleanupDaughterRegion
argument_list|(
name|bottomHri
argument_list|)
expr_stmt|;
comment|// Next test using a midkey that does not exist in the file.
comment|// First, do a key that is< than first key. Ensure splits behave
comment|// properly.
name|byte
index|[]
name|badmidkey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"  ."
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|topPath
operator|=
name|splitStoreFile
argument_list|(
name|regionFs
argument_list|,
name|topHri
argument_list|,
name|TEST_FAMILY
argument_list|,
name|f
argument_list|,
name|badmidkey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bottomPath
operator|=
name|splitStoreFile
argument_list|(
name|regionFs
argument_list|,
name|bottomHri
argument_list|,
name|TEST_FAMILY
argument_list|,
name|f
argument_list|,
name|badmidkey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bottomPath
argument_list|)
expr_stmt|;
name|top
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|topPath
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
operator|.
name|createReader
argument_list|()
expr_stmt|;
comment|// Now read from the top.
name|first
operator|=
literal|true
expr_stmt|;
name|topScanner
operator|=
name|top
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|KeyValue
operator|.
name|KeyOnlyKeyValue
name|keyOnlyKV
init|=
operator|new
name|KeyValue
operator|.
name|KeyOnlyKeyValue
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
operator|!
name|topScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|topScanner
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
name|topScanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|key
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
operator|(
name|KeyValue
operator|)
name|topScanner
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|keyOnlyKV
operator|.
name|setKey
argument_list|(
name|key
operator|.
name|array
argument_list|()
argument_list|,
literal|0
operator|+
name|key
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|key
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|topScanner
operator|.
name|getReader
argument_list|()
operator|.
name|getComparator
argument_list|()
operator|.
name|compare
argument_list|(
name|keyOnlyKV
argument_list|,
name|badmidkey
argument_list|,
literal|0
argument_list|,
name|badmidkey
operator|.
name|length
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|KeyValue
name|keyKV
init|=
name|KeyValueUtil
operator|.
name|createKeyValueFromKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First top when key< bottom: "
operator|+
name|keyKV
argument_list|)
expr_stmt|;
name|String
name|tmp
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|keyKV
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|keyKV
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|keyKV
operator|.
name|getRowLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|tmp
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'a'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|KeyValue
name|keyKV
init|=
name|KeyValueUtil
operator|.
name|createKeyValueFromKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Last top when key< bottom: "
operator|+
name|keyKV
argument_list|)
expr_stmt|;
name|String
name|tmp
init|=
name|Bytes
operator|.
name|toString
argument_list|(
name|keyKV
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|keyKV
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|keyKV
operator|.
name|getRowLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|tmp
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'z'
argument_list|)
expr_stmt|;
block|}
comment|// Remove references.
name|regionFs
operator|.
name|cleanupDaughterRegion
argument_list|(
name|topHri
argument_list|)
expr_stmt|;
name|regionFs
operator|.
name|cleanupDaughterRegion
argument_list|(
name|bottomHri
argument_list|)
expr_stmt|;
comment|// Test when badkey is> than last key in file ('||'> 'zz').
name|badmidkey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"|||"
argument_list|)
expr_stmt|;
name|topPath
operator|=
name|splitStoreFile
argument_list|(
name|regionFs
argument_list|,
name|topHri
argument_list|,
name|TEST_FAMILY
argument_list|,
name|f
argument_list|,
name|badmidkey
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|bottomPath
operator|=
name|splitStoreFile
argument_list|(
name|regionFs
argument_list|,
name|bottomHri
argument_list|,
name|TEST_FAMILY
argument_list|,
name|f
argument_list|,
name|badmidkey
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|topPath
argument_list|)
expr_stmt|;
name|bottom
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|bottomPath
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|first
operator|=
literal|true
expr_stmt|;
name|bottomScanner
operator|=
name|bottom
operator|.
name|getScanner
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
operator|!
name|bottomScanner
operator|.
name|isSeeked
argument_list|()
operator|&&
name|bottomScanner
operator|.
name|seekTo
argument_list|()
operator|)
operator|||
name|bottomScanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|key
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
operator|(
operator|(
name|KeyValue
operator|)
name|bottomScanner
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
name|keyKV
operator|=
name|KeyValueUtil
operator|.
name|createKeyValueFromKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First bottom when key> top: "
operator|+
name|keyKV
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|Bytes
operator|.
name|toString
argument_list|(
name|keyKV
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|keyKV
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|keyKV
operator|.
name|getRowLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|tmp
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'a'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|keyKV
operator|=
name|KeyValueUtil
operator|.
name|createKeyValueFromKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Last bottom when key> top: "
operator|+
name|keyKV
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|keyKV
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|keyKV
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|keyKV
operator|.
name|getRowLength
argument_list|()
argument_list|)
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'z'
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|top
operator|!=
literal|null
condition|)
block|{
name|top
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// evict since we are about to delete the file
block|}
if|if
condition|(
name|bottom
operator|!=
literal|null
condition|)
block|{
name|bottom
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// evict since we are about to delete the file
block|}
name|fs
operator|.
name|delete
argument_list|(
name|f
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|StoreFileScanner
name|getStoreFileScanner
parameter_list|(
name|StoreFileReader
name|reader
parameter_list|,
name|boolean
name|cacheBlocks
parameter_list|,
name|boolean
name|pread
parameter_list|)
block|{
return|return
name|reader
operator|.
name|getStoreFileScanner
argument_list|(
name|cacheBlocks
argument_list|,
name|pread
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|localFormatter
init|=
literal|"%010d"
decl_stmt|;
specifier|private
name|void
name|bloomWriteRead
parameter_list|(
name|StoreFileWriter
name|writer
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|Exception
block|{
name|float
name|err
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_ERROR_RATE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Path
name|f
init|=
name|writer
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"family"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"col"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|now
argument_list|,
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|StoreFileReader
name|reader
init|=
operator|new
name|StoreFileReader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
name|StoreFileScanner
name|scanner
init|=
name|getStoreFileScanner
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// check false positives rate
name|int
name|falsePos
init|=
literal|0
decl_stmt|;
name|int
name|falseNeg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
literal|"family:col"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|,
name|row
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
literal|"family"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"family:col"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Store
name|store
init|=
name|mock
argument_list|(
name|Store
operator|.
name|class
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
name|mock
argument_list|(
name|HColumnDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|boolean
name|exists
init|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|exists
condition|)
name|falseNeg
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exists
condition|)
name|falsePos
operator|++
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// evict because we are about to delete the file
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"False negatives: "
operator|+
name|falseNeg
argument_list|,
literal|0
argument_list|,
name|falseNeg
argument_list|)
expr_stmt|;
name|int
name|maxFalsePos
init|=
call|(
name|int
call|)
argument_list|(
literal|2
operator|*
literal|2000
operator|*
name|err
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Too many false positives: "
operator|+
name|falsePos
operator|+
literal|" (err="
operator|+
name|err
operator|+
literal|", expected no more than "
operator|+
name|maxFalsePos
operator|+
literal|")"
argument_list|,
name|falsePos
operator|<=
name|maxFalsePos
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|int
name|BLOCKSIZE_SMALL
init|=
literal|8192
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBloomFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_ERROR_RATE
argument_list|,
operator|(
name|float
operator|)
literal|0.01
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// write the file
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|BLOCKSIZE_SMALL
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|CKTYPE
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|CKBYTES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|f
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|BloomType
operator|.
name|ROW
argument_list|)
operator|.
name|withMaxKeyCount
argument_list|(
literal|2000
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|bloomWriteRead
argument_list|(
name|writer
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteFamilyBloomFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_ERROR_RATE
argument_list|,
operator|(
name|float
operator|)
literal|0.01
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|float
name|err
init|=
name|conf
operator|.
name|getFloat
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_ERROR_RATE
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// write the file
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|BLOCKSIZE_SMALL
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|CKTYPE
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|CKBYTES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|f
argument_list|)
operator|.
name|withMaxKeyCount
argument_list|(
literal|2000
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// add delete family
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"family"
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"col"
operator|.
name|getBytes
argument_list|()
argument_list|,
name|now
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|,
literal|"value"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|StoreFileReader
name|reader
init|=
operator|new
name|StoreFileReader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
comment|// check false positives rate
name|int
name|falsePos
init|=
literal|0
decl_stmt|;
name|int
name|falseNeg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2000
condition|;
name|i
operator|++
control|)
block|{
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rowKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|boolean
name|exists
init|=
name|reader
operator|.
name|passesDeleteFamilyBloomFilter
argument_list|(
name|rowKey
argument_list|,
literal|0
argument_list|,
name|rowKey
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|exists
condition|)
name|falseNeg
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exists
condition|)
name|falsePos
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|reader
operator|.
name|getDeleteFamilyCnt
argument_list|()
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// evict because we are about to delete the file
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"False negatives: "
operator|+
name|falseNeg
argument_list|,
literal|0
argument_list|,
name|falseNeg
argument_list|)
expr_stmt|;
name|int
name|maxFalsePos
init|=
call|(
name|int
call|)
argument_list|(
literal|2
operator|*
literal|2000
operator|*
name|err
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Too many false positives: "
operator|+
name|falsePos
operator|+
literal|" (err="
operator|+
name|err
operator|+
literal|", expected no more than "
operator|+
name|maxFalsePos
argument_list|,
name|falsePos
operator|<=
name|maxFalsePos
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for HBASE-8012    */
annotation|@
name|Test
specifier|public
name|void
name|testReseek
parameter_list|()
throws|throws
name|Exception
block|{
comment|// write the file
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|f
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|writeStoreFile
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|StoreFileReader
name|reader
init|=
operator|new
name|StoreFileReader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// Now do reseek with empty KV to position to the beginning of the file
name|KeyValue
name|k
init|=
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
name|StoreFileScanner
name|s
init|=
name|getStoreFileScanner
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|s
operator|.
name|reseek
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Intial reseek should position at the beginning of the file"
argument_list|,
name|s
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBloomTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|float
name|err
init|=
operator|(
name|float
operator|)
literal|0.01
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|getLocal
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_ERROR_RATE
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_ENABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|rowCount
init|=
literal|50
decl_stmt|;
name|int
name|colCount
init|=
literal|10
decl_stmt|;
name|int
name|versions
init|=
literal|2
decl_stmt|;
comment|// run once using columns and once using rows
name|BloomType
index|[]
name|bt
init|=
block|{
name|BloomType
operator|.
name|ROWCOL
block|,
name|BloomType
operator|.
name|ROW
block|}
decl_stmt|;
name|int
index|[]
name|expKeys
init|=
block|{
name|rowCount
operator|*
name|colCount
block|,
name|rowCount
block|}
decl_stmt|;
comment|// below line deserves commentary.  it is expected bloom false positives
comment|//  column = rowCount*2*colCount inserts
comment|//  row-level = only rowCount*2 inserts, but failures will be magnified by
comment|//              2nd for loop for every column (2*colCount)
name|float
index|[]
name|expErr
init|=
block|{
literal|2
operator|*
name|rowCount
operator|*
name|colCount
operator|*
name|err
block|,
literal|2
operator|*
name|rowCount
operator|*
literal|2
operator|*
name|colCount
operator|*
name|err
block|}
decl_stmt|;
for|for
control|(
name|int
name|x
range|:
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
control|)
block|{
comment|// write the file
name|Path
name|f
init|=
operator|new
name|Path
argument_list|(
name|ROOT_DIR
argument_list|,
name|getName
argument_list|()
operator|+
name|x
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|BLOCKSIZE_SMALL
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|CKTYPE
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|CKBYTES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|f
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|bt
index|[
name|x
index|]
argument_list|)
operator|.
name|withMaxKeyCount
argument_list|(
name|expKeys
index|[
name|x
index|]
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
operator|*
literal|2
condition|;
name|i
operator|+=
literal|2
control|)
block|{
comment|// rows
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|colCount
operator|*
literal|2
condition|;
name|j
operator|+=
literal|2
control|)
block|{
comment|// column qualifiers
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|col
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|j
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|versions
condition|;
operator|++
name|k
control|)
block|{
comment|// versions
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|"family"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
literal|"col"
operator|+
name|col
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|,
name|now
operator|-
name|k
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
operator|(
name|long
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|StoreFileReader
name|reader
init|=
operator|new
name|StoreFileReader
argument_list|(
name|fs
argument_list|,
name|f
argument_list|,
name|cacheConf
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|reader
operator|.
name|loadBloomfilter
argument_list|()
expr_stmt|;
name|StoreFileScanner
name|scanner
init|=
name|getStoreFileScanner
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expKeys
index|[
name|x
index|]
argument_list|,
name|reader
operator|.
name|generalBloomFilter
operator|.
name|getKeyCount
argument_list|()
argument_list|)
expr_stmt|;
name|Store
name|store
init|=
name|mock
argument_list|(
name|Store
operator|.
name|class
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
name|mock
argument_list|(
name|HColumnDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
comment|// check false positives rate
name|int
name|falsePos
init|=
literal|0
decl_stmt|;
name|int
name|falseNeg
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rowCount
operator|*
literal|2
condition|;
operator|++
name|i
control|)
block|{
comment|// rows
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|colCount
operator|*
literal|2
condition|;
operator|++
name|j
control|)
block|{
comment|// column qualifiers
name|String
name|row
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|col
init|=
name|String
operator|.
name|format
argument_list|(
name|localFormatter
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
operator|(
literal|"col"
operator|+
name|col
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|,
name|row
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
literal|"family"
operator|.
name|getBytes
argument_list|()
argument_list|,
operator|(
literal|"col"
operator|+
name|col
operator|)
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|exists
init|=
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
decl_stmt|;
name|boolean
name|shouldRowExist
init|=
name|i
operator|%
literal|2
operator|==
literal|0
decl_stmt|;
name|boolean
name|shouldColExist
init|=
name|j
operator|%
literal|2
operator|==
literal|0
decl_stmt|;
name|shouldColExist
operator|=
name|shouldColExist
operator|||
name|bt
index|[
name|x
index|]
operator|==
name|BloomType
operator|.
name|ROW
expr_stmt|;
if|if
condition|(
name|shouldRowExist
operator|&&
name|shouldColExist
condition|)
block|{
if|if
condition|(
operator|!
name|exists
condition|)
name|falseNeg
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|exists
condition|)
name|falsePos
operator|++
expr_stmt|;
block|}
block|}
block|}
name|reader
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// evict because we are about to delete the file
name|fs
operator|.
name|delete
argument_list|(
name|f
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|bt
index|[
name|x
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  False negatives: "
operator|+
name|falseNeg
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  False positives: "
operator|+
name|falsePos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|falseNeg
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|falsePos
operator|<
literal|2
operator|*
name|expErr
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSeqIdComparator
parameter_list|()
block|{
name|assertOrdering
argument_list|(
name|StoreFile
operator|.
name|Comparators
operator|.
name|SEQ_ID
argument_list|,
name|mockStoreFile
argument_list|(
literal|true
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|,
operator|-
literal|1
argument_list|,
literal|"/foo/123"
argument_list|)
argument_list|,
name|mockStoreFile
argument_list|(
literal|true
argument_list|,
literal|100
argument_list|,
literal|1000
argument_list|,
operator|-
literal|1
argument_list|,
literal|"/foo/124"
argument_list|)
argument_list|,
name|mockStoreFile
argument_list|(
literal|true
argument_list|,
literal|99
argument_list|,
literal|1000
argument_list|,
operator|-
literal|1
argument_list|,
literal|"/foo/126"
argument_list|)
argument_list|,
name|mockStoreFile
argument_list|(
literal|true
argument_list|,
literal|98
argument_list|,
literal|2000
argument_list|,
operator|-
literal|1
argument_list|,
literal|"/foo/126"
argument_list|)
argument_list|,
name|mockStoreFile
argument_list|(
literal|false
argument_list|,
literal|3453
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|"/foo/1"
argument_list|)
argument_list|,
name|mockStoreFile
argument_list|(
literal|false
argument_list|,
literal|2
argument_list|,
operator|-
literal|1
argument_list|,
literal|3
argument_list|,
literal|"/foo/2"
argument_list|)
argument_list|,
name|mockStoreFile
argument_list|(
literal|false
argument_list|,
literal|1000
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|"/foo/2"
argument_list|)
argument_list|,
name|mockStoreFile
argument_list|(
literal|false
argument_list|,
literal|76
argument_list|,
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
literal|"/foo/3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Assert that the given comparator orders the given storefiles in the    * same way that they're passed.    */
specifier|private
name|void
name|assertOrdering
parameter_list|(
name|Comparator
argument_list|<
name|StoreFile
argument_list|>
name|comparator
parameter_list|,
name|StoreFile
modifier|...
name|sfs
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
name|sorted
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|sfs
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|sorted
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"sfs: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|sfs
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"sorted: "
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|sorted
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sfs
argument_list|)
argument_list|,
name|sorted
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a mock StoreFile with the given attributes.    */
specifier|private
name|StoreFile
name|mockStoreFile
parameter_list|(
name|boolean
name|bulkLoad
parameter_list|,
name|long
name|size
parameter_list|,
name|long
name|bulkTimestamp
parameter_list|,
name|long
name|seqId
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|StoreFile
name|mock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StoreFile
operator|.
name|class
argument_list|)
decl_stmt|;
name|StoreFileReader
name|reader
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|StoreFileReader
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|size
argument_list|)
operator|.
name|when
argument_list|(
name|reader
argument_list|)
operator|.
name|length
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|reader
argument_list|)
operator|.
name|when
argument_list|(
name|mock
argument_list|)
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|bulkLoad
argument_list|)
operator|.
name|when
argument_list|(
name|mock
argument_list|)
operator|.
name|isBulkLoadResult
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|bulkTimestamp
argument_list|)
operator|.
name|when
argument_list|(
name|mock
argument_list|)
operator|.
name|getBulkLoadTimestamp
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|seqId
argument_list|)
operator|.
name|when
argument_list|(
name|mock
argument_list|)
operator|.
name|getMaxSequenceId
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
operator|new
name|Path
argument_list|(
name|path
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|mock
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|String
name|name
init|=
literal|"mock storefile, bulkLoad="
operator|+
name|bulkLoad
operator|+
literal|" bulkTimestamp="
operator|+
name|bulkTimestamp
operator|+
literal|" seqId="
operator|+
name|seqId
operator|+
literal|" path="
operator|+
name|path
decl_stmt|;
name|Mockito
operator|.
name|doReturn
argument_list|(
name|name
argument_list|)
operator|.
name|when
argument_list|(
name|mock
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|mock
return|;
block|}
comment|/**    * Generate a list of KeyValues for testing based on given parameters    * @param timestamps    * @param numRows    * @param qualifier    * @param family    * @return    */
name|List
argument_list|<
name|KeyValue
argument_list|>
name|getKeyValueSet
parameter_list|(
name|long
index|[]
name|timestamps
parameter_list|,
name|int
name|numRows
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
block|{
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvList
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|timestamp
range|:
name|timestamps
control|)
block|{
name|kvList
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|timestamp
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|kvList
return|;
block|}
comment|/**    * Test to ensure correctness when using StoreFile with multiple timestamps    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testMultipleTimestamps
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"familyname"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qualifier"
argument_list|)
decl_stmt|;
name|int
name|numRows
init|=
literal|10
decl_stmt|;
name|long
index|[]
name|timestamps
init|=
operator|new
name|long
index|[]
block|{
literal|20
block|,
literal|10
block|,
literal|5
block|,
literal|1
block|}
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// Make up a directory hierarchy that has a regiondir ("7e0102") and familyname.
name|Path
name|storedir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"7e0102"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
name|storedir
argument_list|,
literal|"1234567890"
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|8
operator|*
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|dir
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvList
init|=
name|getKeyValueSet
argument_list|(
name|timestamps
argument_list|,
name|numRows
argument_list|,
name|qualifier
argument_list|,
name|family
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvList
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|appendMetadata
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|StoreFile
name|hsf
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|mock
argument_list|(
name|Store
operator|.
name|class
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
name|mock
argument_list|(
name|HColumnDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|hcd
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|StoreFileReader
name|reader
init|=
name|hsf
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|StoreFileScanner
name|scanner
init|=
name|getStoreFileScanner
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|20
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|8
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// lets make sure it still works with column family time ranges
name|scan
operator|.
name|setColumnFamilyTimeRange
argument_list|(
name|family
argument_list|,
literal|7
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// This test relies on the timestamp range optimization
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|27
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
comment|// should still use the scanner because we override the family time range
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
literal|27
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setColumnFamilyTimeRange
argument_list|(
name|family
argument_list|,
literal|7
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scanner
operator|.
name|shouldUseScanner
argument_list|(
name|scan
argument_list|,
name|store
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCacheOnWriteEvictOnClose
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|this
operator|.
name|conf
decl_stmt|;
comment|// Find a home for our files (regiondir ("7e0102") and familyname).
name|Path
name|baseDir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"7e0102"
argument_list|)
argument_list|,
literal|"twoCOWEOC"
argument_list|)
decl_stmt|;
comment|// Grab the block cache and get the initial hit/miss counts
name|BlockCache
name|bc
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|bc
argument_list|)
expr_stmt|;
name|CacheStats
name|cs
init|=
name|bc
operator|.
name|getStats
argument_list|()
decl_stmt|;
name|long
name|startHit
init|=
name|cs
operator|.
name|getHitCount
argument_list|()
decl_stmt|;
name|long
name|startMiss
init|=
name|cs
operator|.
name|getMissCount
argument_list|()
decl_stmt|;
name|long
name|startEvicted
init|=
name|cs
operator|.
name|getEvictedCount
argument_list|()
decl_stmt|;
comment|// Let's write a StoreFile with three blocks, with cache on write off
name|conf
operator|.
name|setBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_BLOCKS_ON_WRITE_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|CacheConfig
name|cacheConf
init|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|pathCowOff
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"123456789"
argument_list|)
decl_stmt|;
name|StoreFileWriter
name|writer
init|=
name|writeStoreFile
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|pathCowOff
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|StoreFile
name|hsf
init|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|hsf
operator|.
name|getPath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read this file, we should see 3 misses
name|StoreFileReader
name|reader
init|=
name|hsf
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|StoreFileScanner
name|scanner
init|=
name|getStoreFileScanner
argument_list|(
name|reader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|seek
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
expr_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
empty_stmt|;
name|assertEquals
argument_list|(
name|startHit
argument_list|,
name|cs
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startMiss
operator|+
literal|3
argument_list|,
name|cs
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startEvicted
argument_list|,
name|cs
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
name|startMiss
operator|+=
literal|3
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|(
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now write a StoreFile with three blocks, with cache on write on
name|conf
operator|.
name|setBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_BLOCKS_ON_WRITE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Path
name|pathCowOn
init|=
operator|new
name|Path
argument_list|(
name|baseDir
argument_list|,
literal|"123456788"
argument_list|)
decl_stmt|;
name|writer
operator|=
name|writeStoreFile
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|pathCowOn
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hsf
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
comment|// Read this file, we should see 3 hits
name|reader
operator|=
name|hsf
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|getStoreFileScanner
argument_list|(
name|reader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|seek
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
expr_stmt|;
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
empty_stmt|;
name|assertEquals
argument_list|(
name|startHit
operator|+
literal|3
argument_list|,
name|cs
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startMiss
argument_list|,
name|cs
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startEvicted
argument_list|,
name|cs
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
name|startHit
operator|+=
literal|3
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|(
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let's read back the two files to ensure the blocks exactly match
name|hsf
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|pathCowOff
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|StoreFileReader
name|readerOne
init|=
name|hsf
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|readerOne
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|StoreFileScanner
name|scannerOne
init|=
name|getStoreFileScanner
argument_list|(
name|readerOne
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scannerOne
operator|.
name|seek
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
expr_stmt|;
name|hsf
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|pathCowOn
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|StoreFileReader
name|readerTwo
init|=
name|hsf
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|readerTwo
operator|.
name|loadFileInfo
argument_list|()
expr_stmt|;
name|StoreFileScanner
name|scannerTwo
init|=
name|getStoreFileScanner
argument_list|(
name|readerTwo
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|scannerTwo
operator|.
name|seek
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
expr_stmt|;
name|Cell
name|kv1
init|=
literal|null
decl_stmt|;
name|Cell
name|kv2
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|kv1
operator|=
name|scannerOne
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|kv2
operator|=
name|scannerTwo
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|kv1
operator|.
name|equals
argument_list|(
name|kv2
argument_list|)
argument_list|)
expr_stmt|;
name|KeyValue
name|keyv1
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|kv1
argument_list|)
decl_stmt|;
name|KeyValue
name|keyv2
init|=
name|KeyValueUtil
operator|.
name|ensureKeyValue
argument_list|(
name|kv2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|keyv1
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|keyv1
operator|.
name|getKeyOffset
argument_list|()
argument_list|,
name|keyv1
operator|.
name|getKeyLength
argument_list|()
argument_list|,
name|keyv2
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|keyv2
operator|.
name|getKeyOffset
argument_list|()
argument_list|,
name|keyv2
operator|.
name|getKeyLength
argument_list|()
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|compareTo
argument_list|(
name|kv1
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv1
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv1
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|kv2
operator|.
name|getValueArray
argument_list|()
argument_list|,
name|kv2
operator|.
name|getValueOffset
argument_list|()
argument_list|,
name|kv2
operator|.
name|getValueLength
argument_list|()
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|scannerTwo
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startHit
operator|+
literal|6
argument_list|,
name|cs
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startMiss
argument_list|,
name|cs
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startEvicted
argument_list|,
name|cs
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
name|startHit
operator|+=
literal|6
expr_stmt|;
name|scannerOne
operator|.
name|close
argument_list|()
expr_stmt|;
name|readerOne
operator|.
name|close
argument_list|(
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
argument_list|)
expr_stmt|;
name|scannerTwo
operator|.
name|close
argument_list|()
expr_stmt|;
name|readerTwo
operator|.
name|close
argument_list|(
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let's close the first file with evict on close turned on
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.rs.evictblocksonclose"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hsf
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|pathCowOff
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|reader
operator|=
name|hsf
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|(
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
argument_list|)
expr_stmt|;
comment|// We should have 3 new evictions but the evict count stat should not change. Eviction because
comment|// of HFile invalidation is not counted along with normal evictions
name|assertEquals
argument_list|(
name|startHit
argument_list|,
name|cs
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startMiss
argument_list|,
name|cs
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startEvicted
argument_list|,
name|cs
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let's close the second file with evict on close turned off
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.rs.evictblocksonclose"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|hsf
operator|=
operator|new
name|StoreFile
argument_list|(
name|this
operator|.
name|fs
argument_list|,
name|pathCowOn
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|reader
operator|=
name|hsf
operator|.
name|createReader
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|(
name|cacheConf
operator|.
name|shouldEvictOnClose
argument_list|()
argument_list|)
expr_stmt|;
comment|// We expect no changes
name|assertEquals
argument_list|(
name|startHit
argument_list|,
name|cs
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startMiss
argument_list|,
name|cs
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startEvicted
argument_list|,
name|cs
operator|.
name|getEvictedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|splitStoreFile
parameter_list|(
specifier|final
name|HRegionFileSystem
name|regionFs
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|StoreFile
name|sf
parameter_list|,
specifier|final
name|byte
index|[]
name|splitKey
parameter_list|,
name|boolean
name|isTopRef
parameter_list|)
throws|throws
name|IOException
block|{
name|FileSystem
name|fs
init|=
name|regionFs
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|regionFs
operator|.
name|splitStoreFile
argument_list|(
name|hri
argument_list|,
name|family
argument_list|,
name|sf
argument_list|,
name|splitKey
argument_list|,
name|isTopRef
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|path
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Path
name|regionDir
init|=
name|regionFs
operator|.
name|commitDaughterRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
return|return
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|regionDir
argument_list|,
name|family
argument_list|)
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|StoreFileWriter
name|writeStoreFile
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|CacheConfig
name|cacheConf
parameter_list|,
name|Path
name|path
parameter_list|,
name|int
name|numBlocks
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Let's put ~5 small KVs in each block, so let's make 5*numBlocks KVs
name|int
name|numKVs
init|=
literal|5
operator|*
name|numBlocks
decl_stmt|;
name|List
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|numKVs
argument_list|)
decl_stmt|;
name|byte
index|[]
name|b
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|int
name|totalSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numKVs
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|b
argument_list|,
name|b
argument_list|,
name|b
argument_list|,
name|i
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|kvs
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
comment|// kv has memstoreTS 0, which takes 1 byte to store.
name|totalSize
operator|+=
name|kv
operator|.
name|getLength
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
name|int
name|blockSize
init|=
name|totalSize
operator|/
name|numBlocks
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|blockSize
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|CKTYPE
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|CKBYTES
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|path
argument_list|)
operator|.
name|withMaxKeyCount
argument_list|(
literal|2000
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// We'll write N-1 KVs to ensure we don't write an extra block
name|kvs
operator|.
name|remove
argument_list|(
name|kvs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|kvs
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|appendMetadata
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|writer
return|;
block|}
comment|/**    * Check if data block encoding information is saved correctly in HFile's    * file info.    */
annotation|@
name|Test
specifier|public
name|void
name|testDataBlockEncodingMetaData
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Make up a directory hierarchy that has a regiondir ("7e0102") and familyname.
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
operator|new
name|Path
argument_list|(
name|testDir
argument_list|,
literal|"7e0102"
argument_list|)
argument_list|,
literal|"familyname"
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
literal|"1234567890"
argument_list|)
decl_stmt|;
name|DataBlockEncoding
name|dataBlockEncoderAlgo
init|=
name|DataBlockEncoding
operator|.
name|FAST_DIFF
decl_stmt|;
name|HFileDataBlockEncoder
name|dataBlockEncoder
init|=
operator|new
name|HFileDataBlockEncoderImpl
argument_list|(
name|dataBlockEncoderAlgo
argument_list|)
decl_stmt|;
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
name|BLOCKSIZE_SMALL
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|CKTYPE
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|CKBYTES
argument_list|)
operator|.
name|withDataBlockEncoding
argument_list|(
name|dataBlockEncoderAlgo
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// Make a store file and write data to it.
name|StoreFileWriter
name|writer
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|this
operator|.
name|fs
argument_list|)
operator|.
name|withFilePath
argument_list|(
name|path
argument_list|)
operator|.
name|withMaxKeyCount
argument_list|(
literal|2000
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|StoreFile
name|storeFile
init|=
operator|new
name|StoreFile
argument_list|(
name|fs
argument_list|,
name|writer
operator|.
name|getPath
argument_list|()
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|)
decl_stmt|;
name|StoreFileReader
name|reader
init|=
name|storeFile
operator|.
name|createReader
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|fileInfo
init|=
name|reader
operator|.
name|loadFileInfo
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|fileInfo
operator|.
name|get
argument_list|(
name|HFileDataBlockEncoder
operator|.
name|DATA_BLOCK_ENCODING
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dataBlockEncoderAlgo
operator|.
name|getNameInBytes
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

