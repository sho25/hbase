begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
operator|.
name|toGroupEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|TestProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|TestRpcServiceProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * This class tests operations in MasterRpcServices which require ADMIN access.  * It doesn't test all operations which require ADMIN access, only those which get vetted within  * MasterRpcServices at the point of entry itself (unlike old approach of using  * hooks in AccessController).  *  * Sidenote:  * There is one big difference between how security tests for AccessController hooks work, and how  * the tests in this class for security in MasterRpcServices work.  * The difference arises because of the way AC& MasterRpcServices get the user.  *  * In AccessController, it first checks if there is an active rpc user in ObserverContext. If not,  * it uses UserProvider for current user. This *might* make sense in the context of coprocessors,  * because they can be called outside the context of RPCs.  * But in the context of MasterRpcServices, only one way makes sense - RPCServer.getRequestUser().  *  * In AC tests, when we do FooUser.runAs on AccessController instance directly, it bypasses  * the rpc framework completely, but works because UserProvider provides the correct user, i.e.  * FooUser in this case.  *  * But this doesn't work for the tests here, so we go around by doing complete RPCs.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAdminOnlyOperations
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAdminOnlyOperations
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
decl_stmt|;
comment|// user granted with all global permission
specifier|private
specifier|static
name|User
name|USER_ADMIN
decl_stmt|;
comment|// user without admin permissions
specifier|private
specifier|static
name|User
name|USER_NON_ADMIN
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|GROUP_ADMIN
init|=
literal|"admin_group"
decl_stmt|;
specifier|private
specifier|static
name|User
name|USER_GROUP_ADMIN
decl_stmt|;
comment|// Dummy service to test execService calls. Needs to be public so can be loaded as Coprocessor.
specifier|public
specifier|static
class|class
name|DummyCpService
implements|implements
name|MasterCoprocessor
block|{
specifier|public
name|DummyCpService
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Service
argument_list|>
name|getServices
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|mock
argument_list|(
name|TestRpcServiceProtos
operator|.
name|TestProtobufRpcProto
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|enableSecurity
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authorization"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
literal|"hadoop.security.authentication"
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|MASTER_COPROCESSOR_CONF_KEY
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|DummyCpService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGIONSERVER_COPROCESSOR_CONF_KEY
argument_list|,
name|AccessController
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|User
operator|.
name|HBASE_SECURITY_AUTHORIZATION_CONF_KEY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|configureSuperuser
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
comment|// Enable security
name|enableSecurity
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
comment|// Wait for the ACL table to become available
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
comment|// Create users
name|USER_ADMIN
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"admin"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_NON_ADMIN
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"non_admin"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|USER_GROUP_ADMIN
operator|=
name|User
operator|.
name|createUserForTesting
argument_list|(
name|conf
argument_list|,
literal|"user_group_admin"
argument_list|,
operator|new
name|String
index|[]
block|{
name|GROUP_ADMIN
block|}
argument_list|)
expr_stmt|;
comment|// Assign permissions to users and groups
name|SecureTestUtil
operator|.
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|USER_ADMIN
operator|.
name|getShortName
argument_list|()
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
name|SecureTestUtil
operator|.
name|grantGlobal
argument_list|(
name|TEST_UTIL
argument_list|,
name|toGroupEntry
argument_list|(
name|GROUP_ADMIN
argument_list|)
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
expr_stmt|;
comment|// No permissions to USER_NON_ADMIN
block|}
interface|interface
name|Action
block|{
name|void
name|run
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
name|void
name|verifyAllowed
parameter_list|(
name|User
name|user
parameter_list|,
name|Action
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|user
operator|.
name|runAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
block|{
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|action
operator|.
name|run
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|)
class|;
end_class

begin_function
unit|}    private
name|void
name|verifyDenied
parameter_list|(
name|User
name|user
parameter_list|,
name|Action
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|user
operator|.
name|runAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|boolean
name|accessDenied
operator|=
literal|false
block|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|action
operator|.
name|run
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
name|accessDenied
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected access to be denied"
argument_list|,
name|accessDenied
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    private
name|void
name|verifyAdminCheckForAction
parameter_list|(
name|Action
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyAllowed
argument_list|(
name|USER_ADMIN
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|USER_GROUP_ADMIN
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyDenied
argument_list|(
name|USER_NON_ADMIN
argument_list|,
name|action
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testEnableCatalogJanitor
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyAdminCheckForAction
argument_list|(
parameter_list|(
name|admin
parameter_list|)
lambda|->
name|admin
operator|.
name|enableCatalogJanitor
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testRunCatalogJanitor
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyAdminCheckForAction
argument_list|(
parameter_list|(
name|admin
parameter_list|)
lambda|->
name|admin
operator|.
name|runCatalogJanitor
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCleanerChoreRunning
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyAdminCheckForAction
argument_list|(
parameter_list|(
name|admin
parameter_list|)
lambda|->
name|admin
operator|.
name|cleanerChoreSwitch
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testRunCleanerChore
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyAdminCheckForAction
argument_list|(
parameter_list|(
name|admin
parameter_list|)
lambda|->
name|admin
operator|.
name|runCleanerChore
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testExecProcedure
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyAdminCheckForAction
argument_list|(
parameter_list|(
name|admin
parameter_list|)
lambda|->
block|{
comment|// Using existing table instead of creating a new one.
name|admin
operator|.
name|execProcedure
argument_list|(
literal|"flush-table-proc"
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testExecService
parameter_list|()
throws|throws
name|Exception
block|{
name|Action
name|action
init|=
parameter_list|(
name|admin
parameter_list|)
lambda|->
block|{
name|TestRpcServiceProtos
operator|.
name|TestProtobufRpcProto
operator|.
name|BlockingInterface
name|service
init|=
name|TestRpcServiceProtos
operator|.
name|TestProtobufRpcProto
operator|.
name|newBlockingStub
argument_list|(
name|admin
operator|.
name|coprocessorService
argument_list|()
argument_list|)
decl_stmt|;
name|service
operator|.
name|ping
argument_list|(
literal|null
argument_list|,
name|TestProtos
operator|.
name|EmptyRequestProto
operator|.
name|getDefaultInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|verifyAllowed
argument_list|(
name|USER_ADMIN
argument_list|,
name|action
argument_list|)
expr_stmt|;
name|verifyAllowed
argument_list|(
name|USER_GROUP_ADMIN
argument_list|,
name|action
argument_list|)
expr_stmt|;
comment|// This is same as above verifyAccessDenied
name|USER_NON_ADMIN
operator|.
name|runAs
argument_list|(
call|(
name|PrivilegedExceptionAction
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|boolean
name|accessDenied
operator|=
literal|false
block|;
try|try
init|(
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|action
operator|.
name|run
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|e
parameter_list|)
block|{
comment|// For MasterRpcServices.execService.
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|AccessDeniedException
condition|)
block|{
name|accessDenied
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Expected access to be denied"
argument_list|,
name|accessDenied
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function
unit|}    @
name|Test
specifier|public
name|void
name|testExecProcedureWithRet
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyAdminCheckForAction
argument_list|(
parameter_list|(
name|admin
parameter_list|)
lambda|->
block|{
comment|// Using existing table instead of creating a new one.
name|admin
operator|.
name|execProcedureWithReturn
argument_list|(
literal|"flush-table-proc"
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testNormalize
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyAdminCheckForAction
argument_list|(
parameter_list|(
name|admin
parameter_list|)
lambda|->
name|admin
operator|.
name|normalize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testSetNormalizerRunning
parameter_list|()
throws|throws
name|Exception
block|{
name|verifyAdminCheckForAction
argument_list|(
parameter_list|(
name|admin
parameter_list|)
lambda|->
name|admin
operator|.
name|normalizerSwitch
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

