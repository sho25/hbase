begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestKeyLocker
block|{
annotation|@
name|Test
specifier|public
name|void
name|testLocker
parameter_list|()
block|{
name|KeyLocker
argument_list|<
name|String
argument_list|>
name|locker
init|=
operator|new
name|KeyLocker
argument_list|()
decl_stmt|;
name|ReentrantLock
name|lock1
init|=
name|locker
operator|.
name|acquireLock
argument_list|(
literal|"l1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lock1
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|ReentrantLock
name|lock2
init|=
name|locker
operator|.
name|acquireLock
argument_list|(
literal|"l2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lock2
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lock1
operator|!=
name|lock2
argument_list|)
expr_stmt|;
comment|// same key = same lock
name|ReentrantLock
name|lock20
init|=
name|locker
operator|.
name|acquireLock
argument_list|(
literal|"l2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lock20
operator|==
name|lock2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lock2
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lock20
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
comment|// Locks are still reentrant; so with 2 acquires we want two unlocks
name|lock20
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lock20
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|lock2
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lock20
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
comment|// The lock object was freed once useless, so we're recreating a new one
name|ReentrantLock
name|lock200
init|=
name|locker
operator|.
name|acquireLock
argument_list|(
literal|"l2"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lock2
operator|!=
name|lock200
argument_list|)
expr_stmt|;
name|lock200
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lock200
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
comment|// first lock is still there
name|Assert
operator|.
name|assertTrue
argument_list|(
name|lock1
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
name|lock1
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|lock1
operator|.
name|isHeldByCurrentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

