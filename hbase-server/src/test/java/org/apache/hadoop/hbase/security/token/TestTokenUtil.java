begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|token
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTokenUtil
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestTokenUtil
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testObtainToken
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|urlPU
init|=
name|ProtobufUtil
operator|.
name|class
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|URL
name|urlTU
init|=
name|TokenUtil
operator|.
name|class
operator|.
name|getProtectionDomain
argument_list|()
operator|.
name|getCodeSource
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|ClassLoader
name|cl
init|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|urlPU
block|,
name|urlTU
block|}
argument_list|,
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|Throwable
name|injected
init|=
operator|new
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
argument_list|(
literal|"injected"
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|tokenUtil
init|=
name|cl
operator|.
name|loadClass
argument_list|(
name|TokenUtil
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
decl_stmt|;
name|Field
name|shouldInjectFault
init|=
name|tokenUtil
operator|.
name|getDeclaredField
argument_list|(
literal|"injectedException"
argument_list|)
decl_stmt|;
name|shouldInjectFault
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|shouldInjectFault
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|injected
argument_list|)
expr_stmt|;
try|try
block|{
name|tokenUtil
operator|.
name|getMethod
argument_list|(
literal|"obtainToken"
argument_list|,
name|Connection
operator|.
name|class
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have injected exception."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e
decl_stmt|;
name|boolean
name|serviceExceptionFound
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|(
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|t
operator|==
name|injected
condition|)
block|{
comment|// reference equality
name|serviceExceptionFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|serviceExceptionFound
condition|)
block|{
throw|throw
name|e
throw|;
comment|// wrong exception, fail the test
block|}
block|}
name|Boolean
name|loaded
init|=
operator|(
name|Boolean
operator|)
name|cl
operator|.
name|loadClass
argument_list|(
name|ProtobufUtil
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
operator|.
name|getDeclaredMethod
argument_list|(
literal|"isClassLoaderLoaded"
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Should not have loaded DynamicClassLoader"
argument_list|,
name|loaded
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

