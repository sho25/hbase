begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * White box testing for replication state interfaces. Implementations should extend this class, and  * initialize the interfaces properly.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TestReplicationStateBasic
block|{
specifier|protected
name|ReplicationQueues
name|rq1
decl_stmt|;
specifier|protected
name|ReplicationQueues
name|rq2
decl_stmt|;
specifier|protected
name|ReplicationQueues
name|rq3
decl_stmt|;
specifier|protected
name|ReplicationQueuesClient
name|rqc
decl_stmt|;
specifier|protected
name|String
name|server1
init|=
operator|new
name|ServerName
argument_list|(
literal|"hostname1.example.org"
argument_list|,
literal|1234
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|server2
init|=
operator|new
name|ServerName
argument_list|(
literal|"hostname2.example.org"
argument_list|,
literal|1234
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|server3
init|=
operator|new
name|ServerName
argument_list|(
literal|"hostname3.example.org"
argument_list|,
literal|1234
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testReplicationQueuesClient
parameter_list|()
throws|throws
name|KeeperException
block|{
comment|// Test methods with empty state
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rqc
operator|.
name|getListOfReplicators
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rqc
operator|.
name|getLogsInQueue
argument_list|(
name|server1
argument_list|,
literal|"qId1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rqc
operator|.
name|getAllQueues
argument_list|(
name|server1
argument_list|)
argument_list|)
expr_stmt|;
comment|/*      * Set up data Two replicators: -- server1: three queues with 0, 1 and 2 log files each --      * server2: zero queues      */
name|rq1
operator|.
name|init
argument_list|(
name|server1
argument_list|)
expr_stmt|;
name|rq2
operator|.
name|init
argument_list|(
name|server2
argument_list|)
expr_stmt|;
name|rq1
operator|.
name|addLog
argument_list|(
literal|"qId1"
argument_list|,
literal|"trash"
argument_list|)
expr_stmt|;
name|rq1
operator|.
name|removeLog
argument_list|(
literal|"qId1"
argument_list|,
literal|"trash"
argument_list|)
expr_stmt|;
name|rq1
operator|.
name|addLog
argument_list|(
literal|"qId2"
argument_list|,
literal|"filename1"
argument_list|)
expr_stmt|;
name|rq1
operator|.
name|addLog
argument_list|(
literal|"qId3"
argument_list|,
literal|"filename2"
argument_list|)
expr_stmt|;
name|rq1
operator|.
name|addLog
argument_list|(
literal|"qId3"
argument_list|,
literal|"filename3"
argument_list|)
expr_stmt|;
name|rq2
operator|.
name|addLog
argument_list|(
literal|"trash"
argument_list|,
literal|"trash"
argument_list|)
expr_stmt|;
name|rq2
operator|.
name|removeQueue
argument_list|(
literal|"trash"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|reps
init|=
name|rqc
operator|.
name|getListOfReplicators
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|server1
argument_list|,
name|reps
operator|.
name|contains
argument_list|(
name|server1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|server2
argument_list|,
name|reps
operator|.
name|contains
argument_list|(
name|server2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rqc
operator|.
name|getLogsInQueue
argument_list|(
literal|"bogus"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rqc
operator|.
name|getLogsInQueue
argument_list|(
name|server1
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rqc
operator|.
name|getLogsInQueue
argument_list|(
name|server1
argument_list|,
literal|"qId1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rqc
operator|.
name|getLogsInQueue
argument_list|(
name|server1
argument_list|,
literal|"qId2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"filename1"
argument_list|,
name|rqc
operator|.
name|getLogsInQueue
argument_list|(
name|server1
argument_list|,
literal|"qId2"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rqc
operator|.
name|getAllQueues
argument_list|(
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rqc
operator|.
name|getAllQueues
argument_list|(
name|server2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
name|rqc
operator|.
name|getAllQueues
argument_list|(
name|server1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
literal|"qId2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|list
operator|.
name|contains
argument_list|(
literal|"qId3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicationQueues
parameter_list|()
throws|throws
name|KeeperException
block|{
name|rq1
operator|.
name|init
argument_list|(
name|server1
argument_list|)
expr_stmt|;
name|rq2
operator|.
name|init
argument_list|(
name|server2
argument_list|)
expr_stmt|;
name|rq3
operator|.
name|init
argument_list|(
name|server3
argument_list|)
expr_stmt|;
comment|// Zero queues or replicators exist
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq1
operator|.
name|getListOfReplicators
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rq1
operator|.
name|removeQueue
argument_list|(
literal|"bogus"
argument_list|)
expr_stmt|;
name|rq1
operator|.
name|removeLog
argument_list|(
literal|"bogus"
argument_list|,
literal|"bogus"
argument_list|)
expr_stmt|;
name|rq1
operator|.
name|removeAllQueues
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|rq1
operator|.
name|getAllQueues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq1
operator|.
name|getLogPosition
argument_list|(
literal|"bogus"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rq1
operator|.
name|getLogsInQueue
argument_list|(
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq1
operator|.
name|claimQueues
argument_list|(
operator|new
name|ServerName
argument_list|(
literal|"bogus"
argument_list|,
literal|1234
argument_list|,
operator|-
literal|1L
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rq1
operator|.
name|setLogPosition
argument_list|(
literal|"bogus"
argument_list|,
literal|"bogus"
argument_list|,
literal|5L
argument_list|)
expr_stmt|;
name|populateQueues
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rq1
operator|.
name|getListOfReplicators
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq2
operator|.
name|getLogsInQueue
argument_list|(
literal|"qId1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|rq3
operator|.
name|getLogsInQueue
argument_list|(
literal|"qId5"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq3
operator|.
name|getLogPosition
argument_list|(
literal|"qId1"
argument_list|,
literal|"filename0"
argument_list|)
argument_list|)
expr_stmt|;
name|rq3
operator|.
name|setLogPosition
argument_list|(
literal|"qId5"
argument_list|,
literal|"filename4"
argument_list|,
literal|354L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|354L
argument_list|,
name|rq3
operator|.
name|getLogPosition
argument_list|(
literal|"qId5"
argument_list|,
literal|"filename4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|rq3
operator|.
name|getLogsInQueue
argument_list|(
literal|"qId5"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq2
operator|.
name|getLogsInQueue
argument_list|(
literal|"qId1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq1
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rq2
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|rq3
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq3
operator|.
name|claimQueues
argument_list|(
name|server1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rq3
operator|.
name|getListOfReplicators
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|SortedSet
argument_list|<
name|String
argument_list|>
argument_list|>
name|queues
init|=
name|rq2
operator|.
name|claimQueues
argument_list|(
name|server3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|queues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rq2
operator|.
name|getListOfReplicators
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try to claim our own queues
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq2
operator|.
name|claimQueues
argument_list|(
name|server2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|rq2
operator|.
name|getAllQueues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rq2
operator|.
name|removeAllQueues
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rq2
operator|.
name|getListOfReplicators
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*    * three replicators: rq1 has 0 queues, rq2 has 1 queue with no logs, rq3 has 5 queues with 1, 2,    * 3, 4, 5 log files respectively    */
specifier|protected
name|void
name|populateQueues
parameter_list|()
throws|throws
name|KeeperException
block|{
name|rq1
operator|.
name|addLog
argument_list|(
literal|"trash"
argument_list|,
literal|"trash"
argument_list|)
expr_stmt|;
name|rq1
operator|.
name|removeQueue
argument_list|(
literal|"trash"
argument_list|)
expr_stmt|;
name|rq2
operator|.
name|addLog
argument_list|(
literal|"qId1"
argument_list|,
literal|"trash"
argument_list|)
expr_stmt|;
name|rq2
operator|.
name|removeLog
argument_list|(
literal|"qId1"
argument_list|,
literal|"trash"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|rq3
operator|.
name|addLog
argument_list|(
literal|"qId"
operator|+
name|i
argument_list|,
literal|"filename"
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

