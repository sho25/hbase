begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionLoad
block|{
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Admin
name|admin
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table_1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table_2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table_3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
index|[]
name|tables
init|=
operator|new
name|TableName
index|[]
block|{
name|TABLE_1
block|,
name|TABLE_2
block|,
name|TABLE_3
block|}
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|admin
operator|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|admin
operator|.
name|setBalancerRunning
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createTables
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|TableName
name|table
range|:
name|tables
control|)
block|{
name|UTIL
operator|.
name|deleteTableIfAny
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createTables
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
for|for
control|(
name|TableName
name|tableName
range|:
name|tables
control|)
block|{
name|Table
name|table
init|=
name|UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|UTIL
operator|.
name|waitTableAvailable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|loadTable
argument_list|(
name|table
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionLoad
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Check if regions match with the regionLoad from the server
for|for
control|(
name|ServerName
name|serverName
range|:
name|admin
operator|.
name|getClusterStatus
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getServers
argument_list|()
control|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getOnlineRegions
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|RegionLoad
argument_list|>
name|regionLoads
init|=
name|admin
operator|.
name|getRegionLoad
argument_list|(
name|serverName
argument_list|)
operator|.
name|values
argument_list|()
decl_stmt|;
name|checkRegionsAndRegionLoads
argument_list|(
name|regions
argument_list|,
name|regionLoads
argument_list|)
expr_stmt|;
block|}
comment|// Check if regionLoad matches the table's regions and nothing is missed
for|for
control|(
name|TableName
name|table
range|:
operator|new
name|TableName
index|[]
block|{
name|TABLE_1
block|,
name|TABLE_2
block|,
name|TABLE_3
block|}
control|)
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|tableRegions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionLoad
argument_list|>
name|regionLoads
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|admin
operator|.
name|getClusterStatus
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getServers
argument_list|()
control|)
block|{
name|regionLoads
operator|.
name|addAll
argument_list|(
name|admin
operator|.
name|getRegionLoad
argument_list|(
name|serverName
argument_list|,
name|table
argument_list|)
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|checkRegionsAndRegionLoads
argument_list|(
name|tableRegions
argument_list|,
name|regionLoads
argument_list|)
expr_stmt|;
block|}
comment|// Check RegionLoad matches the regionLoad from ClusterStatus
name|ClusterStatus
name|clusterStatus
init|=
name|admin
operator|.
name|getClusterStatus
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|serverName
range|:
name|clusterStatus
operator|.
name|getServers
argument_list|()
control|)
block|{
name|ServerLoad
name|serverLoad
init|=
name|clusterStatus
operator|.
name|getLoad
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|regionLoads
init|=
name|admin
operator|.
name|getRegionLoad
argument_list|(
name|serverName
argument_list|)
decl_stmt|;
name|compareRegionLoads
argument_list|(
name|serverLoad
operator|.
name|getRegionsLoad
argument_list|()
argument_list|,
name|regionLoads
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|compareRegionLoads
parameter_list|(
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|regionLoadCluster
parameter_list|,
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|regionLoads
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No of regionLoads from clusterStatus and regionloads from RS doesn't match"
argument_list|,
name|regionLoadCluster
operator|.
name|size
argument_list|()
argument_list|,
name|regionLoads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The contents of region load from cluster and server should match
for|for
control|(
name|byte
index|[]
name|regionName
range|:
name|regionLoadCluster
operator|.
name|keySet
argument_list|()
control|)
block|{
name|regionLoads
operator|.
name|remove
argument_list|(
name|regionName
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"regionLoads from SN should be empty"
argument_list|,
literal|0
argument_list|,
name|regionLoads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkRegionsAndRegionLoads
parameter_list|(
name|Collection
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|Collection
argument_list|<
name|RegionLoad
argument_list|>
name|regionLoads
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"No of regions and regionloads doesn't match"
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|regionLoads
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionLoad
argument_list|>
name|regionLoadMap
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionLoad
name|regionLoad
range|:
name|regionLoads
control|)
block|{
name|regionLoadMap
operator|.
name|put
argument_list|(
name|regionLoad
operator|.
name|getName
argument_list|()
argument_list|,
name|regionLoad
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HRegionInfo
name|info
range|:
name|regions
control|)
block|{
name|assertTrue
argument_list|(
literal|"Region not in regionLoadMap region:"
operator|+
name|info
operator|.
name|getRegionNameAsString
argument_list|()
operator|+
literal|" regionMap: "
operator|+
name|regionLoadMap
argument_list|,
name|regionLoadMap
operator|.
name|containsKey
argument_list|(
name|info
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

