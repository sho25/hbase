begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKeyImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationWALEntryFilters
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestReplicationWALEntryFilters
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|byte
index|[]
name|a
init|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|}
decl_stmt|;
specifier|static
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[]
block|{
literal|'b'
block|}
decl_stmt|;
specifier|static
name|byte
index|[]
name|c
init|=
operator|new
name|byte
index|[]
block|{
literal|'c'
block|}
decl_stmt|;
specifier|static
name|byte
index|[]
name|d
init|=
operator|new
name|byte
index|[]
block|{
literal|'d'
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSystemTableWALEntryFilter
parameter_list|()
block|{
name|SystemTableWALEntryFilter
name|filter
init|=
operator|new
name|SystemTableWALEntryFilter
argument_list|()
decl_stmt|;
comment|// meta
name|WALKeyImpl
name|key1
init|=
operator|new
name|WALKeyImpl
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Entry
name|metaEntry
init|=
operator|new
name|Entry
argument_list|(
name|key1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|filter
argument_list|(
name|metaEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// ns table
name|WALKeyImpl
name|key2
init|=
operator|new
name|WALKeyImpl
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Entry
name|nsEntry
init|=
operator|new
name|Entry
argument_list|(
name|key2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|filter
operator|.
name|filter
argument_list|(
name|nsEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// user table
name|WALKeyImpl
name|key3
init|=
operator|new
name|WALKeyImpl
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|Entry
name|userEntry
init|=
operator|new
name|Entry
argument_list|(
name|key3
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|userEntry
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScopeWALEntryFilter
parameter_list|()
block|{
name|WALEntryFilter
name|filter
init|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|ScopeWALEntryFilter
argument_list|()
argument_list|)
decl_stmt|;
name|Entry
name|userEntry
init|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|Entry
name|userEntryA
init|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|Entry
name|userEntryB
init|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|Entry
name|userEntryEmpty
init|=
name|createEntry
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// no scopes
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// empty scopes
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
name|scopes
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// different scope
name|scopes
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
name|scopes
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
comment|// all kvs should be filtered
name|assertEquals
argument_list|(
name|userEntryEmpty
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// local scope
name|scopes
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
name|scopes
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userEntryEmpty
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userEntryEmpty
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// only scope a
name|scopes
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
name|scopes
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userEntryA
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userEntryA
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// only scope b
name|scopes
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
name|scopes
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userEntryB
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userEntryB
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// scope a and b
name|scopes
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
name|scopes
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userEntryB
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|scopes
operator|.
name|put
argument_list|(
name|a
argument_list|,
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|userEntryB
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|WALEntryFilter
name|nullFilter
init|=
operator|new
name|WALEntryFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|WALEntryFilter
name|passFilter
init|=
operator|new
name|WALEntryFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Entry
name|filter
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
return|return
name|entry
return|;
block|}
block|}
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testChainWALEntryFilter
parameter_list|()
block|{
name|Entry
name|userEntry
init|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|ChainWALEntryFilter
name|filter
init|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|,
name|passFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|,
name|passFilter
argument_list|,
name|passFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|nullFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|nullFilter
argument_list|,
name|passFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|,
name|nullFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|nullFilter
argument_list|,
name|passFilter
argument_list|,
name|nullFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
name|nullFilter
argument_list|,
name|nullFilter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// flatten
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|,
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|,
name|passFilter
argument_list|)
argument_list|,
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|)
argument_list|,
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|,
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|,
operator|new
name|ChainWALEntryFilter
argument_list|(
name|nullFilter
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|ChainWALEntryFilter
argument_list|(
name|passFilter
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceTableCfWALEntryFilter
parameter_list|()
block|{
name|ReplicationPeer
name|peer
init|=
name|mock
argument_list|(
name|ReplicationPeer
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReplicationPeerConfig
name|peerConfig
init|=
name|mock
argument_list|(
name|ReplicationPeerConfig
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// 1. replicate_all flag is false, no namespaces and table-cfs config
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|Entry
name|userEntry
init|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|ChainWALEntryFilter
name|filter
init|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. replicate_all flag is false, and only config table-cfs in peer
comment|// empty map
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// table bar
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// table foo:a
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// table foo:a,c
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|,
name|d
argument_list|)
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. replicate_all flag is false, and only config namespaces in peer
name|when
argument_list|(
name|peer
operator|.
name|getTableCFs
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// empty set
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// namespace default
name|namespaces
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// namespace ns1
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"ns1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. replicate_all flag is false, and config namespaces and table-cfs both
comment|// Namespaces config should not confict with table-cfs config
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"ns1"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"ns1:foo"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"ns1"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceTableCfWALEntryFilter2
parameter_list|()
block|{
name|ReplicationPeer
name|peer
init|=
name|mock
argument_list|(
name|ReplicationPeer
operator|.
name|class
argument_list|)
decl_stmt|;
name|ReplicationPeerConfig
name|peerConfig
init|=
name|mock
argument_list|(
name|ReplicationPeerConfig
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// 1. replicate_all flag is true
comment|// and no exclude namespaces and no exclude table-cfs config
name|when
argument_list|(
name|peerConfig
operator|.
name|replicateAllUserTables
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|Entry
name|userEntry
init|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|ChainWALEntryFilter
name|filter
init|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2. replicate_all flag is true, and only config exclude namespaces
comment|// empty set
name|Set
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// exclude namespace default
name|namespaces
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// exclude namespace ns1
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"ns1"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// 3. replicate_all flag is true, and only config exclude table-cfs
comment|// empty table-cfs map
name|Map
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|tableCfs
init|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// exclude table bar
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// exclude table foo:a
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// 4. replicate_all flag is true, and config exclude namespaces and table-cfs both
comment|// exclude ns1 and table foo:a,c
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"ns1"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"a"
argument_list|,
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|createEntry
argument_list|(
literal|null
argument_list|,
name|b
argument_list|)
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
comment|// exclude namespace default and table ns1:bar
name|namespaces
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|tableCfs
operator|=
operator|new
name|HashMap
argument_list|<
name|TableName
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|namespaces
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|tableCfs
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"ns1:bar"
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeNamespaces
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peerConfig
operator|.
name|getExcludeTableCFsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|tableCfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|peer
operator|.
name|getPeerConfig
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|peerConfig
argument_list|)
expr_stmt|;
name|userEntry
operator|=
name|createEntry
argument_list|(
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|ChainWALEntryFilter
argument_list|(
operator|new
name|NamespaceTableCfWALEntryFilter
argument_list|(
name|peer
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|filter
operator|.
name|filter
argument_list|(
name|userEntry
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Entry
name|createEntry
parameter_list|(
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
parameter_list|,
name|byte
index|[]
modifier|...
name|kvs
parameter_list|)
block|{
name|WALKeyImpl
name|key1
init|=
operator|new
name|WALKeyImpl
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|scopes
argument_list|)
decl_stmt|;
name|WALEdit
name|edit1
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|kv
range|:
name|kvs
control|)
block|{
name|edit1
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|kv
argument_list|,
name|kv
argument_list|,
name|kv
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Entry
argument_list|(
name|key1
argument_list|,
name|edit1
argument_list|)
return|;
block|}
specifier|private
name|void
name|assertEquals
parameter_list|(
name|Entry
name|e1
parameter_list|,
name|Entry
name|e2
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|e1
operator|==
literal|null
argument_list|,
name|e2
operator|==
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|e1
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// do not compare WALKeys
comment|// compare kvs
name|Assert
operator|.
name|assertEquals
argument_list|(
name|e1
operator|.
name|getEdit
argument_list|()
operator|==
literal|null
argument_list|,
name|e2
operator|.
name|getEdit
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|e1
operator|.
name|getEdit
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|Cell
argument_list|>
name|cells1
init|=
name|e1
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|cells2
init|=
name|e2
operator|.
name|getEdit
argument_list|()
operator|.
name|getCells
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cells1
operator|.
name|size
argument_list|()
argument_list|,
name|cells2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cells1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|cells1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|cells2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

