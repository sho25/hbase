begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBatchScanResultCache
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestBatchScanResultCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|CF
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
name|BatchScanResultCache
name|resultCache
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|resultCache
operator|=
operator|new
name|BatchScanResultCache
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|resultCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resultCache
operator|=
literal|null
expr_stmt|;
block|}
specifier|static
name|Cell
name|createCell
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|key
parameter_list|,
name|int
name|cq
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|cf
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq"
operator|+
name|cq
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|Cell
index|[]
name|createCells
parameter_list|(
name|byte
index|[]
name|cf
parameter_list|,
name|int
name|key
parameter_list|,
name|int
name|numCqs
parameter_list|)
block|{
name|Cell
index|[]
name|cells
init|=
operator|new
name|Cell
index|[
name|numCqs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCqs
condition|;
name|i
operator|++
control|)
block|{
name|cells
index|[
name|i
index|]
operator|=
name|createCell
argument_list|(
name|cf
argument_list|,
name|key
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|cells
return|;
block|}
specifier|private
name|void
name|assertResultEquals
parameter_list|(
name|Result
name|result
parameter_list|,
name|int
name|key
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|to
operator|-
name|start
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|to
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|key
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|to
operator|-
name|start
operator|==
literal|4
argument_list|,
name|result
operator|.
name|mayHaveMoreCellsInRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|assertSame
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|cells1
init|=
name|createCells
argument_list|(
name|CF
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|cells2
init|=
name|createCells
argument_list|(
name|CF
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|cells3
init|=
name|createCells
argument_list|(
name|CF
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|cells1
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|}
argument_list|,
literal|false
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|Result
index|[]
name|results
init|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cells1
argument_list|,
literal|3
argument_list|,
literal|7
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cells1
argument_list|,
literal|7
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|results
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|results
operator|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|results
operator|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cells2
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cells2
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cells2
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cells3
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cells3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|,
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cells3
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|results
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|results
index|[
literal|0
index|]
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|results
index|[
literal|1
index|]
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|results
index|[
literal|2
index|]
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|results
index|[
literal|3
index|]
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|results
index|[
literal|4
index|]
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertResultEquals
argument_list|(
name|results
index|[
literal|5
index|]
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

