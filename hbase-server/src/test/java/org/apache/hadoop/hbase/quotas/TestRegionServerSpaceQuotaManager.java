begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
operator|.
name|toBytes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_comment
comment|/**  * Test class for {@link RegionServerSpaceQuotaManager}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestRegionServerSpaceQuotaManager
block|{
specifier|private
name|RegionServerSpaceQuotaManager
name|quotaManager
decl_stmt|;
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|Table
name|quotaTable
decl_stmt|;
specifier|private
name|ResultScanner
name|scanner
decl_stmt|;
annotation|@
name|Before
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|quotaManager
operator|=
name|mock
argument_list|(
name|RegionServerSpaceQuotaManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|conn
operator|=
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
expr_stmt|;
name|quotaTable
operator|=
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|mock
argument_list|(
name|ResultScanner
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Call the real getViolationPoliciesToEnforce()
name|when
argument_list|(
name|quotaManager
operator|.
name|getViolationPoliciesToEnforce
argument_list|()
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
comment|// Mock out creating a scanner
name|when
argument_list|(
name|quotaManager
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|conn
operator|.
name|getTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|quotaTable
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|quotaTable
operator|.
name|getScanner
argument_list|(
name|any
argument_list|(
name|Scan
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
comment|// Mock out the static method call with some indirection
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Result
name|result
init|=
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|0
argument_list|,
name|Result
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|policies
init|=
name|invocation
operator|.
name|getArgumentAt
argument_list|(
literal|1
argument_list|,
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|QuotaTableUtil
operator|.
name|extractViolationPolicy
argument_list|(
name|result
argument_list|,
name|policies
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|quotaManager
argument_list|)
operator|.
name|extractViolationPolicy
argument_list|(
name|any
argument_list|(
name|Result
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingAllColumns
parameter_list|()
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|Result
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scanner
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|results
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|quotaManager
operator|.
name|getViolationPoliciesToEnforce
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an IOException, but did not receive one."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected an error because we had no cells in the row.
comment|// This should only happen due to programmer error.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingDesiredColumn
parameter_list|()
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Give a column that isn't the one we want
name|Cell
name|c
init|=
operator|new
name|KeyValue
argument_list|(
name|toBytes
argument_list|(
literal|"t:inviolation"
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|"s"
argument_list|)
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|Result
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scanner
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|results
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|quotaManager
operator|.
name|getViolationPoliciesToEnforce
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an IOException, but did not receive one."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected an error because we were missing the column we expected in this row.
comment|// This should only happen due to programmer error.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParsingError
parameter_list|()
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Cell
name|c
init|=
operator|new
name|KeyValue
argument_list|(
name|toBytes
argument_list|(
literal|"t:inviolation"
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|"u"
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|"v"
argument_list|)
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|Result
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scanner
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|results
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|quotaManager
operator|.
name|getViolationPoliciesToEnforce
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an IOException, but did not receive one."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We provided a garbage serialized protobuf message (empty byte array), this should
comment|// in turn throw an IOException
block|}
block|}
block|}
end_class

end_unit

