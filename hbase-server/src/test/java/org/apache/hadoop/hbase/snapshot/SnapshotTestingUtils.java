begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|PathFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotEnabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|BufferedMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|errorhandling
operator|.
name|ForeignExceptionDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
operator|.
name|MobUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|HBaseProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotRegionManifest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSnapshotDoneRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MasterProtos
operator|.
name|IsSnapshotDoneResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|MD5Hash
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_comment
comment|/**  * Utilities class for snapshots  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
specifier|final
class|class
name|SnapshotTestingUtils
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SnapshotTestingUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|KEYS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0123456789"
argument_list|)
decl_stmt|;
specifier|private
name|SnapshotTestingUtils
parameter_list|()
block|{
comment|// private constructor for utility class
block|}
comment|/**    * Assert that we don't have any snapshots lists    *    * @throws IOException    *           if the admin operation fails    */
specifier|public
specifier|static
name|void
name|assertNoSnapshots
parameter_list|(
name|Admin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
literal|"Have some previous snapshots"
argument_list|,
literal|0
argument_list|,
name|admin
operator|.
name|listSnapshots
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure that there is only one snapshot returned from the master and its    * name and table match the passed in parameters.    */
specifier|public
specifier|static
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|assertExistsMatchingSnapshot
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// list the snapshot
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|admin
operator|.
name|listSnapshots
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|returnedSnapshots
init|=
operator|new
name|ArrayList
argument_list|<
name|SnapshotDescription
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotDescription
name|sd
range|:
name|snapshots
control|)
block|{
if|if
condition|(
name|snapshotName
operator|.
name|equals
argument_list|(
name|sd
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|tableName
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|sd
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|returnedSnapshots
operator|.
name|add
argument_list|(
name|sd
argument_list|)
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"No matching snapshots found."
argument_list|,
name|returnedSnapshots
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|returnedSnapshots
return|;
block|}
comment|/**    * Make sure that there is only one snapshot returned from the master    */
specifier|public
specifier|static
name|void
name|assertOneSnapshotThatMatches
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshot
parameter_list|)
throws|throws
name|IOException
block|{
name|assertOneSnapshotThatMatches
argument_list|(
name|admin
argument_list|,
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshot
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure that there is only one snapshot returned from the master and its    * name and table match the passed in parameters.    */
specifier|public
specifier|static
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|assertOneSnapshotThatMatches
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// list the snapshot
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|admin
operator|.
name|listSnapshots
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should only have 1 snapshot"
argument_list|,
literal|1
argument_list|,
name|snapshots
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|snapshotName
argument_list|,
name|snapshots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|snapshots
return|;
block|}
comment|/**    * Make sure that there is only one snapshot returned from the master and its    * name and table match the passed in parameters.    */
specifier|public
specifier|static
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|assertOneSnapshotThatMatches
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|byte
index|[]
name|snapshot
parameter_list|,
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|assertOneSnapshotThatMatches
argument_list|(
name|admin
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|snapshot
argument_list|)
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|confirmSnapshotValid
parameter_list|(
name|HBaseTestingUtility
name|testUtil
parameter_list|,
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDescriptor
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|family
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterFileSystem
name|mfs
init|=
name|testUtil
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
name|confirmSnapshotValid
argument_list|(
name|snapshotDescriptor
argument_list|,
name|tableName
argument_list|,
name|family
argument_list|,
name|mfs
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|testUtil
operator|.
name|getHBaseAdmin
argument_list|()
argument_list|,
name|mfs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Confirm that the snapshot contains references to all the files that should    * be in the snapshot.    */
specifier|public
specifier|static
name|void
name|confirmSnapshotValid
parameter_list|(
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDescriptor
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|testFamily
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|Admin
name|admin
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
name|nonEmptyTestFamilies
init|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nonEmptyTestFamilies
operator|.
name|add
argument_list|(
name|testFamily
argument_list|)
expr_stmt|;
name|confirmSnapshotValid
argument_list|(
name|snapshotDescriptor
argument_list|,
name|tableName
argument_list|,
name|nonEmptyTestFamilies
argument_list|,
literal|null
argument_list|,
name|rootDir
argument_list|,
name|admin
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Confirm that the snapshot has no references files but only metadata.    */
specifier|public
specifier|static
name|void
name|confirmEmptySnapshotValid
parameter_list|(
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDescriptor
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|testFamily
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|Admin
name|admin
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
name|emptyTestFamilies
init|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|emptyTestFamilies
operator|.
name|add
argument_list|(
name|testFamily
argument_list|)
expr_stmt|;
name|confirmSnapshotValid
argument_list|(
name|snapshotDescriptor
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|emptyTestFamilies
argument_list|,
name|rootDir
argument_list|,
name|admin
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Confirm that the snapshot contains references to all the files that should    * be in the snapshot. This method also perform some redundant check like    * the existence of the snapshotinfo or the regioninfo which are done always    * by the MasterSnapshotVerifier, at the end of the snapshot operation.    */
specifier|public
specifier|static
name|void
name|confirmSnapshotValid
parameter_list|(
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDescriptor
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|nonEmptyTestFamilies
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|emptyTestFamilies
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|Admin
name|admin
parameter_list|,
name|FileSystem
name|fs
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Configuration
name|conf
init|=
name|admin
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// check snapshot dir
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshotDescriptor
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|snapshotDir
argument_list|)
argument_list|)
expr_stmt|;
name|HBaseProtos
operator|.
name|SnapshotDescription
name|desc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
comment|// Extract regions and families with store files
specifier|final
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|snapshotFamilies
init|=
operator|new
name|TreeSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|open
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|desc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SnapshotRegionManifest
argument_list|>
name|regionManifests
init|=
name|manifest
operator|.
name|getRegionManifestsMap
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotRegionManifest
name|regionManifest
range|:
name|regionManifests
operator|.
name|values
argument_list|()
control|)
block|{
name|SnapshotReferenceUtil
operator|.
name|visitRegionStoreFiles
argument_list|(
name|regionManifest
argument_list|,
operator|new
name|SnapshotReferenceUtil
operator|.
name|StoreFileVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|snapshotFamilies
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|family
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Verify that there are store files in the specified families
if|if
condition|(
name|nonEmptyTestFamilies
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|byte
index|[]
name|familyName
range|:
name|nonEmptyTestFamilies
control|)
block|{
name|assertTrue
argument_list|(
name|snapshotFamilies
operator|.
name|contains
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verify that there are no store files in the specified families
if|if
condition|(
name|emptyTestFamilies
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|byte
index|[]
name|familyName
range|:
name|emptyTestFamilies
control|)
block|{
name|assertFalse
argument_list|(
name|snapshotFamilies
operator|.
name|contains
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check the region snapshot for all the regions
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
comment|// remove the non-default regions
name|RegionReplicaUtil
operator|.
name|removeNonDefaultRegions
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|boolean
name|hasMob
init|=
name|regionManifests
operator|.
name|containsKey
argument_list|(
name|MobUtils
operator|.
name|getMobRegionInfo
argument_list|(
name|tableName
argument_list|)
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasMob
condition|)
block|{
name|assertEquals
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|regionManifests
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|regionManifests
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify Regions (redundant check, see MasterSnapshotVerifier)
for|for
control|(
name|HRegionInfo
name|info
range|:
name|regions
control|)
block|{
name|String
name|regionName
init|=
name|info
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|regionManifests
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method for testing async snapshot operations. Just waits for the    * given snapshot to complete on the server by repeatedly checking the master.    *    * @param master: the master running the snapshot    * @param snapshot: the snapshot to check    * @param sleep: amount to sleep between checks to see if the snapshot is done    * @throws ServiceException if the snapshot fails    */
specifier|public
specifier|static
name|void
name|waitForSnapshotToComplete
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshot
parameter_list|,
name|long
name|sleep
parameter_list|)
throws|throws
name|ServiceException
block|{
specifier|final
name|IsSnapshotDoneRequest
name|request
init|=
name|IsSnapshotDoneRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setSnapshot
argument_list|(
name|snapshot
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IsSnapshotDoneResponse
name|done
init|=
name|IsSnapshotDoneResponse
operator|.
name|newBuilder
argument_list|()
operator|.
name|buildPartial
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|done
operator|.
name|getDone
argument_list|()
condition|)
block|{
name|done
operator|=
name|master
operator|.
name|getMasterRpcServices
argument_list|()
operator|.
name|isSnapshotDone
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|sleep
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/*    * Take snapshot with maximum of numTries attempts, ignoring CorruptedSnapshotException    * except for the last CorruptedSnapshotException    */
specifier|public
specifier|static
name|void
name|snapshot
parameter_list|(
name|Admin
name|admin
parameter_list|,
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
name|HBaseProtos
operator|.
name|SnapshotDescription
operator|.
name|Type
name|type
parameter_list|,
name|int
name|numTries
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|tries
init|=
literal|0
decl_stmt|;
name|CorruptedSnapshotException
name|lastEx
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|tries
operator|++
operator|<
name|numTries
condition|)
block|{
try|try
block|{
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|SnapshotType
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|CorruptedSnapshotException
name|cse
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got CorruptedSnapshotException"
argument_list|,
name|cse
argument_list|)
expr_stmt|;
name|lastEx
operator|=
name|cse
expr_stmt|;
block|}
block|}
throw|throw
name|lastEx
throw|;
block|}
specifier|public
specifier|static
name|void
name|cleanupSnapshot
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|SnapshotTestingUtils
operator|.
name|cleanupSnapshot
argument_list|(
name|admin
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|cleanupSnapshot
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// delete the taken snapshot
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
comment|/**    * Expect the snapshot to throw an error when checking if the snapshot is    * complete    *    * @param master master to check    * @param snapshot the {@link SnapshotDescription} request to pass to the master    * @param clazz expected exception from the master    */
specifier|public
specifier|static
name|void
name|expectSnapshotDoneException
parameter_list|(
name|HMaster
name|master
parameter_list|,
name|IsSnapshotDoneRequest
name|snapshot
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|HBaseSnapshotException
argument_list|>
name|clazz
parameter_list|)
block|{
try|try
block|{
name|master
operator|.
name|getMasterRpcServices
argument_list|()
operator|.
name|isSnapshotDone
argument_list|(
literal|null
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"didn't fail to lookup a snapshot"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServiceException
name|se
parameter_list|)
block|{
try|try
block|{
throw|throw
name|ProtobufUtil
operator|.
name|getRemoteException
argument_list|(
name|se
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|HBaseSnapshotException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Threw wrong snapshot exception!"
argument_list|,
name|clazz
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Threw an unexpected exception:"
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * List all the HFiles in the given table    *    * @param fs: FileSystem where the table lives    * @param tableDir directory of the table    * @return array of the current HFiles in the table (could be a zero-length array)    * @throws IOException on unexecpted error reading the FS    */
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|listHFileNames
parameter_list|(
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|tableDir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|hfiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|FSVisitor
operator|.
name|visitTableStoreFiles
argument_list|(
name|fs
argument_list|,
name|tableDir
argument_list|,
operator|new
name|FSVisitor
operator|.
name|StoreFileVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|String
name|region
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|String
name|hfileName
parameter_list|)
throws|throws
name|IOException
block|{
name|hfiles
operator|.
name|add
argument_list|(
name|hfileName
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|hfiles
argument_list|)
expr_stmt|;
return|return
name|hfiles
return|;
block|}
comment|/**    * Take a snapshot of the specified table and verify that the given family is    * not empty. Note that this will leave the table disabled    * in the case of an offline snapshot.    */
specifier|public
specifier|static
name|void
name|createSnapshotAndValidate
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|String
name|familyName
parameter_list|,
name|String
name|snapshotNameString
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|boolean
name|onlineSnapshot
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|nonEmptyFamilyNames
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|nonEmptyFamilyNames
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|familyName
argument_list|)
argument_list|)
expr_stmt|;
name|createSnapshotAndValidate
argument_list|(
name|admin
argument_list|,
name|tableName
argument_list|,
name|nonEmptyFamilyNames
argument_list|,
comment|/* emptyFamilyNames= */
literal|null
argument_list|,
name|snapshotNameString
argument_list|,
name|rootDir
argument_list|,
name|fs
argument_list|,
name|onlineSnapshot
argument_list|)
expr_stmt|;
block|}
comment|/**    * Take a snapshot of the specified table and verify the given families.    * Note that this will leave the table disabled in the case of an offline snapshot.    */
specifier|public
specifier|static
name|void
name|createSnapshotAndValidate
parameter_list|(
name|Admin
name|admin
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|nonEmptyFamilyNames
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|emptyFamilyNames
parameter_list|,
name|String
name|snapshotNameString
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|boolean
name|onlineSnapshot
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|onlineSnapshot
condition|)
block|{
try|try
block|{
name|admin
operator|.
name|disableTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableNotEnabledException
name|tne
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"In attempting to disable "
operator|+
name|tableName
operator|+
literal|" it turns out that the this table is "
operator|+
literal|"already disabled."
argument_list|)
expr_stmt|;
block|}
block|}
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshotNameString
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SnapshotDescription
argument_list|>
name|snapshots
init|=
name|SnapshotTestingUtils
operator|.
name|assertExistsMatchingSnapshot
argument_list|(
name|admin
argument_list|,
name|snapshotNameString
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|snapshots
operator|==
literal|null
operator|||
name|snapshots
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Incorrect number of snapshots for table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
name|SnapshotTestingUtils
operator|.
name|confirmSnapshotValid
argument_list|(
name|ProtobufUtil
operator|.
name|createHBaseProtosSnapshotDesc
argument_list|(
name|snapshots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|tableName
argument_list|,
name|nonEmptyFamilyNames
argument_list|,
name|emptyFamilyNames
argument_list|,
name|rootDir
argument_list|,
name|admin
argument_list|,
name|fs
argument_list|)
expr_stmt|;
block|}
comment|/**    * Corrupt the specified snapshot by deleting some files.    *    * @param util {@link HBaseTestingUtility}    * @param snapshotName name of the snapshot to corrupt    * @return array of the corrupted HFiles    * @throws IOException on unexecpted error reading the FS    */
specifier|public
specifier|static
name|ArrayList
name|corruptSnapshot
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|String
name|snapshotName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|MasterFileSystem
name|mfs
init|=
name|util
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
specifier|final
name|FileSystem
name|fs
init|=
name|mfs
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|snapshotDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|snapshotName
argument_list|,
name|mfs
operator|.
name|getRootDir
argument_list|()
argument_list|)
decl_stmt|;
name|HBaseProtos
operator|.
name|SnapshotDescription
name|snapshotDesc
init|=
name|SnapshotDescriptionUtils
operator|.
name|readSnapshotInfo
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|table
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|snapshotDesc
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ArrayList
name|corruptedFiles
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|util
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|SnapshotReferenceUtil
operator|.
name|visitTableStoreFiles
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|snapshotDesc
argument_list|,
operator|new
name|SnapshotReferenceUtil
operator|.
name|StoreFileVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|storeFile
parameter_list|(
specifier|final
name|HRegionInfo
name|regionInfo
parameter_list|,
specifier|final
name|String
name|family
parameter_list|,
specifier|final
name|SnapshotRegionManifest
operator|.
name|StoreFile
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|region
init|=
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|String
name|hfile
init|=
name|storeFile
operator|.
name|getName
argument_list|()
decl_stmt|;
name|HFileLink
name|link
init|=
name|HFileLink
operator|.
name|build
argument_list|(
name|conf
argument_list|,
name|table
argument_list|,
name|region
argument_list|,
name|family
argument_list|,
name|hfile
argument_list|)
decl_stmt|;
if|if
condition|(
name|corruptedFiles
operator|.
name|size
argument_list|()
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|link
operator|.
name|getAvailablePath
argument_list|(
name|fs
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|corruptedFiles
operator|.
name|add
argument_list|(
name|hfile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|corruptedFiles
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|corruptedFiles
return|;
block|}
comment|// ==========================================================================
comment|//  Snapshot Mock
comment|// ==========================================================================
specifier|public
specifier|static
class|class
name|SnapshotMock
block|{
specifier|protected
specifier|final
specifier|static
name|String
name|TEST_FAMILY
init|=
literal|"cf"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|TEST_NUM_REGIONS
init|=
literal|4
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|static
class|class
name|RegionData
block|{
specifier|public
name|HRegionInfo
name|hri
decl_stmt|;
specifier|public
name|Path
name|tableDir
decl_stmt|;
specifier|public
name|Path
index|[]
name|files
decl_stmt|;
specifier|public
name|RegionData
parameter_list|(
specifier|final
name|Path
name|tableDir
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|,
specifier|final
name|int
name|nfiles
parameter_list|)
block|{
name|this
operator|.
name|tableDir
operator|=
name|tableDir
expr_stmt|;
name|this
operator|.
name|hri
operator|=
name|hri
expr_stmt|;
name|this
operator|.
name|files
operator|=
operator|new
name|Path
index|[
name|nfiles
index|]
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SnapshotBuilder
block|{
specifier|private
specifier|final
name|RegionData
index|[]
name|tableRegions
decl_stmt|;
specifier|private
specifier|final
name|HBaseProtos
operator|.
name|SnapshotDescription
name|desc
decl_stmt|;
specifier|private
specifier|final
name|HTableDescriptor
name|htd
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
specifier|private
specifier|final
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|final
name|Path
name|rootDir
decl_stmt|;
specifier|private
name|Path
name|snapshotDir
decl_stmt|;
specifier|private
name|int
name|snapshotted
init|=
literal|0
decl_stmt|;
specifier|public
name|SnapshotBuilder
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|,
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|HBaseProtos
operator|.
name|SnapshotDescription
name|desc
parameter_list|,
specifier|final
name|RegionData
index|[]
name|tableRegions
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
name|this
operator|.
name|htd
operator|=
name|htd
expr_stmt|;
name|this
operator|.
name|desc
operator|=
name|desc
expr_stmt|;
name|this
operator|.
name|tableRegions
operator|=
name|tableRegions
expr_stmt|;
name|this
operator|.
name|snapshotDir
operator|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|desc
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
operator|new
name|FSTableDescriptors
argument_list|(
name|conf
argument_list|)
operator|.
name|createTableDescriptorForTableDirectory
argument_list|(
name|snapshotDir
argument_list|,
name|htd
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HTableDescriptor
name|getTableDescriptor
parameter_list|()
block|{
return|return
name|this
operator|.
name|htd
return|;
block|}
specifier|public
name|HBaseProtos
operator|.
name|SnapshotDescription
name|getSnapshotDescription
parameter_list|()
block|{
return|return
name|this
operator|.
name|desc
return|;
block|}
specifier|public
name|Path
name|getSnapshotsDir
parameter_list|()
block|{
return|return
name|this
operator|.
name|snapshotDir
return|;
block|}
specifier|public
name|Path
index|[]
name|addRegion
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|addRegion
argument_list|(
name|desc
argument_list|)
return|;
block|}
specifier|public
name|Path
index|[]
name|addRegionV1
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|addRegion
argument_list|(
name|desc
operator|.
name|toBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|SnapshotManifestV1
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Path
index|[]
name|addRegionV2
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|addRegion
argument_list|(
name|desc
operator|.
name|toBuilder
argument_list|()
operator|.
name|setVersion
argument_list|(
name|SnapshotManifestV2
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Path
index|[]
name|addRegion
parameter_list|(
specifier|final
name|HBaseProtos
operator|.
name|SnapshotDescription
name|desc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|snapshotted
operator|==
name|tableRegions
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No more regions in the table"
argument_list|)
throw|;
block|}
name|RegionData
name|regionData
init|=
name|tableRegions
index|[
name|this
operator|.
name|snapshotted
operator|++
index|]
decl_stmt|;
name|ForeignExceptionDispatcher
name|monitor
init|=
operator|new
name|ForeignExceptionDispatcher
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|desc
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|manifest
operator|.
name|addRegion
argument_list|(
name|regionData
operator|.
name|tableDir
argument_list|,
name|regionData
operator|.
name|hri
argument_list|)
expr_stmt|;
return|return
name|regionData
operator|.
name|files
return|;
block|}
specifier|private
name|void
name|corruptFile
parameter_list|(
name|Path
name|p
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|manifestName
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// Rename the original region-manifest file
name|Path
name|newP
init|=
operator|new
name|Path
argument_list|(
name|p
operator|.
name|getParent
argument_list|()
argument_list|,
name|manifestName
operator|+
literal|"1"
argument_list|)
decl_stmt|;
name|fs
operator|.
name|rename
argument_list|(
name|p
argument_list|,
name|newP
argument_list|)
expr_stmt|;
comment|// Create a new region-manifest file
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|p
argument_list|)
decl_stmt|;
comment|//Copy the first 25 bytes of the original region-manifest into the new one,
comment|//make it a corrupted region-manifest file.
name|FSDataInputStream
name|input
init|=
name|fs
operator|.
name|open
argument_list|(
name|newP
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|25
index|]
decl_stmt|;
name|int
name|len
init|=
name|input
operator|.
name|read
argument_list|(
literal|0
argument_list|,
name|buffer
argument_list|,
literal|0
argument_list|,
literal|25
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|1
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|len
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Delete the original region-manifest
name|fs
operator|.
name|delete
argument_list|(
name|newP
argument_list|)
expr_stmt|;
block|}
comment|/**        * Corrupt one region-manifest file        *        * @throws IOException on unexecpted error from the FS        */
specifier|public
name|void
name|corruptOneRegionManifest
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|manifestFiles
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|SnapshotManifestV2
operator|.
name|SNAPSHOT_MANIFEST_PREFIX
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|manifestFiles
operator|.
name|length
operator|==
literal|0
condition|)
return|return;
comment|// Just choose the first one
name|Path
name|p
init|=
name|manifestFiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|corruptFile
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|missOneRegionSnapshotFile
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|manifestFiles
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|fileStatus
range|:
name|manifestFiles
control|)
block|{
name|String
name|fileName
init|=
name|fileStatus
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
name|SnapshotDescriptionUtils
operator|.
name|SNAPSHOTINFO_FILE
argument_list|)
operator|||
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".tabledesc"
argument_list|)
operator|||
name|fileName
operator|.
name|endsWith
argument_list|(
name|SnapshotDescriptionUtils
operator|.
name|SNAPSHOT_TMP_DIR_NAME
argument_list|)
condition|)
block|{
name|fs
operator|.
name|delete
argument_list|(
name|fileStatus
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**        * Corrupt data-manifest file        *        * @throws IOException on unexecpted error from the FS        */
specifier|public
name|void
name|corruptDataManifest
parameter_list|()
throws|throws
name|IOException
block|{
name|FileStatus
index|[]
name|manifestFiles
init|=
name|FSUtils
operator|.
name|listStatus
argument_list|(
name|fs
argument_list|,
name|snapshotDir
argument_list|,
operator|new
name|PathFilter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|SnapshotManifest
operator|.
name|DATA_MANIFEST_NAME
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|manifestFiles
operator|.
name|length
operator|==
literal|0
condition|)
return|return;
comment|// Just choose the first one
name|Path
name|p
init|=
name|manifestFiles
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|corruptFile
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Path
name|commit
parameter_list|()
throws|throws
name|IOException
block|{
name|ForeignExceptionDispatcher
name|monitor
init|=
operator|new
name|ForeignExceptionDispatcher
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|desc
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|manifest
operator|.
name|addTableDescriptor
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|consolidate
argument_list|()
expr_stmt|;
name|SnapshotDescriptionUtils
operator|.
name|completeSnapshot
argument_list|(
name|desc
argument_list|,
name|rootDir
argument_list|,
name|snapshotDir
argument_list|,
name|fs
argument_list|)
expr_stmt|;
name|snapshotDir
operator|=
name|SnapshotDescriptionUtils
operator|.
name|getCompletedSnapshotDir
argument_list|(
name|desc
argument_list|,
name|rootDir
argument_list|)
expr_stmt|;
return|return
name|snapshotDir
return|;
block|}
specifier|public
name|void
name|consolidate
parameter_list|()
throws|throws
name|IOException
block|{
name|ForeignExceptionDispatcher
name|monitor
init|=
operator|new
name|ForeignExceptionDispatcher
argument_list|(
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SnapshotManifest
name|manifest
init|=
name|SnapshotManifest
operator|.
name|create
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|snapshotDir
argument_list|,
name|desc
argument_list|,
name|monitor
argument_list|)
decl_stmt|;
name|manifest
operator|.
name|addTableDescriptor
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|consolidate
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|SnapshotMock
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|FileSystem
name|fs
parameter_list|,
specifier|final
name|Path
name|rootDir
parameter_list|)
block|{
name|this
operator|.
name|fs
operator|=
name|fs
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|rootDir
operator|=
name|rootDir
expr_stmt|;
block|}
specifier|public
name|SnapshotBuilder
name|createSnapshotV1
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|SnapshotManifestV1
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
return|;
block|}
specifier|public
name|SnapshotBuilder
name|createSnapshotV1
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|numRegions
argument_list|,
name|SnapshotManifestV1
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
return|;
block|}
specifier|public
name|SnapshotBuilder
name|createSnapshotV2
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|SnapshotManifestV2
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
return|;
block|}
specifier|public
name|SnapshotBuilder
name|createSnapshotV2
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|int
name|numRegions
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|numRegions
argument_list|,
name|SnapshotManifestV2
operator|.
name|DESCRIPTOR_VERSION
argument_list|)
return|;
block|}
specifier|private
name|SnapshotBuilder
name|createSnapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|int
name|version
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|createSnapshot
argument_list|(
name|snapshotName
argument_list|,
name|tableName
argument_list|,
name|TEST_NUM_REGIONS
argument_list|,
name|version
argument_list|)
return|;
block|}
specifier|private
name|SnapshotBuilder
name|createSnapshot
parameter_list|(
specifier|final
name|String
name|snapshotName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|int
name|numRegions
parameter_list|,
specifier|final
name|int
name|version
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
name|createHtd
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|RegionData
index|[]
name|regions
init|=
name|createTable
argument_list|(
name|htd
argument_list|,
name|numRegions
argument_list|)
decl_stmt|;
name|HBaseProtos
operator|.
name|SnapshotDescription
name|desc
init|=
name|HBaseProtos
operator|.
name|SnapshotDescription
operator|.
name|newBuilder
argument_list|()
operator|.
name|setTable
argument_list|(
name|htd
operator|.
name|getNameAsString
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|snapshotName
argument_list|)
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Path
name|workingDir
init|=
name|SnapshotDescriptionUtils
operator|.
name|getWorkingSnapshotDir
argument_list|(
name|desc
argument_list|,
name|rootDir
argument_list|)
decl_stmt|;
name|SnapshotDescriptionUtils
operator|.
name|writeSnapshotInfo
argument_list|(
name|desc
argument_list|,
name|workingDir
argument_list|,
name|fs
argument_list|)
expr_stmt|;
return|return
operator|new
name|SnapshotBuilder
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|rootDir
argument_list|,
name|htd
argument_list|,
name|desc
argument_list|,
name|regions
argument_list|)
return|;
block|}
specifier|public
name|HTableDescriptor
name|createHtd
parameter_list|(
specifier|final
name|String
name|tableName
parameter_list|)
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|TEST_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|htd
return|;
block|}
specifier|private
name|RegionData
index|[]
name|createTable
parameter_list|(
specifier|final
name|HTableDescriptor
name|htd
parameter_list|,
specifier|final
name|int
name|nregions
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootDir
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
operator|new
name|FSTableDescriptors
argument_list|(
name|conf
argument_list|)
operator|.
name|createTableDescriptorForTableDirectory
argument_list|(
name|tableDir
argument_list|,
name|htd
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nregions
operator|%
literal|2
operator|==
literal|0
argument_list|)
expr_stmt|;
name|RegionData
index|[]
name|regions
init|=
operator|new
name|RegionData
index|[
name|nregions
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
operator|+
name|i
operator|*
literal|2
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
operator|+
name|i
operator|*
literal|2
argument_list|)
decl_stmt|;
comment|// First region, simple with one plain hfile.
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|HRegionFileSystem
name|rfs
init|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|hri
argument_list|)
decl_stmt|;
name|regions
index|[
name|i
index|]
operator|=
operator|new
name|RegionData
argument_list|(
name|tableDir
argument_list|,
name|hri
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|regions
index|[
name|i
index|]
operator|.
name|files
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|Path
name|storeFile
init|=
name|createStoreFile
argument_list|(
name|rfs
operator|.
name|createTempName
argument_list|()
argument_list|)
decl_stmt|;
name|regions
index|[
name|i
index|]
operator|.
name|files
index|[
name|j
index|]
operator|=
name|rfs
operator|.
name|commitStoreFile
argument_list|(
name|TEST_FAMILY
argument_list|,
name|storeFile
argument_list|)
expr_stmt|;
block|}
comment|// Second region, used to test the split case.
comment|// This region contains a reference to the hfile in the first region.
name|startKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
operator|+
name|i
operator|*
literal|2
argument_list|)
expr_stmt|;
name|endKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
operator|+
name|i
operator|*
literal|2
argument_list|)
expr_stmt|;
name|hri
operator|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|rfs
operator|=
name|HRegionFileSystem
operator|.
name|createRegionOnFileSystem
argument_list|(
name|conf
argument_list|,
name|fs
argument_list|,
name|tableDir
argument_list|,
name|hri
argument_list|)
expr_stmt|;
name|regions
index|[
name|i
operator|+
literal|1
index|]
operator|=
operator|new
name|RegionData
argument_list|(
name|tableDir
argument_list|,
name|hri
argument_list|,
name|regions
index|[
name|i
index|]
operator|.
name|files
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|regions
index|[
name|i
index|]
operator|.
name|files
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|String
name|refName
init|=
name|regions
index|[
name|i
index|]
operator|.
name|files
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|'.'
operator|+
name|regions
index|[
name|i
index|]
operator|.
name|hri
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Path
name|refFile
init|=
name|createStoreFile
argument_list|(
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
name|refName
argument_list|)
argument_list|)
decl_stmt|;
name|regions
index|[
name|i
operator|+
literal|1
index|]
operator|.
name|files
index|[
name|j
index|]
operator|=
name|rfs
operator|.
name|commitStoreFile
argument_list|(
name|TEST_FAMILY
argument_list|,
name|refFile
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|regions
return|;
block|}
specifier|private
name|Path
name|createStoreFile
parameter_list|(
specifier|final
name|Path
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|FSDataOutputStream
name|out
init|=
name|fs
operator|.
name|create
argument_list|(
name|storeFile
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|storeFile
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|storeFile
return|;
block|}
block|}
comment|// ==========================================================================
comment|//  Table Helpers
comment|// ==========================================================================
specifier|public
specifier|static
name|void
name|waitForTableToBeOnline
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HRegionServer
name|rs
init|=
name|util
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Region
argument_list|>
name|onlineRegions
init|=
name|rs
operator|.
name|getOnlineRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|onlineRegions
control|)
block|{
name|region
operator|.
name|waitForFlushesAndCompactions
argument_list|()
expr_stmt|;
block|}
comment|// Wait up to 60 seconds for a table to be available.
name|util
operator|.
name|waitFor
argument_list|(
literal|60000
argument_list|,
name|util
operator|.
name|predicateTableAvailable
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|createTable
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|int
name|regionReplication
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setRegionReplication
argument_list|(
name|regionReplication
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|family
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
index|[]
name|splitKeys
init|=
name|getSplitKeys
argument_list|()
decl_stmt|;
name|util
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|splitKeys
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|splitKeys
operator|.
name|length
operator|+
literal|1
operator|)
operator|*
name|regionReplication
argument_list|,
name|util
operator|.
name|getHBaseAdmin
argument_list|()
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|getSplitKeys
parameter_list|()
block|{
name|byte
index|[]
index|[]
name|splitKeys
init|=
operator|new
name|byte
index|[
name|KEYS
operator|.
name|length
operator|-
literal|2
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|splitKeys
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|splitKeys
index|[
name|i
index|]
operator|=
operator|new
name|byte
index|[]
block|{
name|KEYS
index|[
name|i
operator|+
literal|1
index|]
block|}
expr_stmt|;
block|}
return|return
name|splitKeys
return|;
block|}
specifier|public
specifier|static
name|void
name|createTable
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|createTable
argument_list|(
name|util
argument_list|,
name|tableName
argument_list|,
literal|1
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|loadData
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|int
name|rows
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|BufferedMutator
name|mutator
init|=
name|util
operator|.
name|getConnection
argument_list|()
operator|.
name|getBufferedMutator
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|loadData
argument_list|(
name|util
argument_list|,
name|mutator
argument_list|,
name|rows
argument_list|,
name|families
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|loadData
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|BufferedMutator
name|mutator
parameter_list|,
name|int
name|rows
parameter_list|,
name|byte
index|[]
modifier|...
name|families
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Ensure one row per region
name|assertTrue
argument_list|(
name|rows
operator|>=
name|KEYS
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
name|k0
range|:
name|KEYS
control|)
block|{
name|byte
index|[]
name|k
init|=
operator|new
name|byte
index|[]
block|{
name|k0
block|}
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|k
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MD5Hash
operator|.
name|getMD5AsHex
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|families1
init|=
name|families
decl_stmt|;
specifier|final
name|byte
index|[]
name|key1
init|=
name|key
decl_stmt|;
specifier|final
name|byte
index|[]
name|value1
init|=
name|value
decl_stmt|;
name|mutator
operator|.
name|mutate
argument_list|(
name|createPut
argument_list|(
name|families1
argument_list|,
name|key1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|--
expr_stmt|;
block|}
comment|// Add other extra rows. more rows, more files
while|while
condition|(
name|rows
operator|--
operator|>
literal|0
condition|)
block|{
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rows
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|key
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|MD5Hash
operator|.
name|getMD5AsHex
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
index|[]
name|families1
init|=
name|families
decl_stmt|;
specifier|final
name|byte
index|[]
name|key1
init|=
name|key
decl_stmt|;
specifier|final
name|byte
index|[]
name|value1
init|=
name|value
decl_stmt|;
name|mutator
operator|.
name|mutate
argument_list|(
name|createPut
argument_list|(
name|families1
argument_list|,
name|key1
argument_list|,
name|value1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mutator
operator|.
name|flush
argument_list|()
expr_stmt|;
name|waitForTableToBeOnline
argument_list|(
name|util
argument_list|,
name|mutator
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Put
name|createPut
parameter_list|(
specifier|final
name|byte
index|[]
index|[]
name|families
parameter_list|,
specifier|final
name|byte
index|[]
name|key
parameter_list|,
specifier|final
name|byte
index|[]
name|value
parameter_list|)
block|{
name|byte
index|[]
name|q
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|family
range|:
name|families
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|q
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|put
return|;
block|}
specifier|public
specifier|static
name|void
name|deleteAllSnapshots
parameter_list|(
specifier|final
name|Admin
name|admin
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Delete all the snapshots
for|for
control|(
name|SnapshotDescription
name|snapshot
range|:
name|admin
operator|.
name|listSnapshots
argument_list|()
control|)
block|{
name|admin
operator|.
name|deleteSnapshot
argument_list|(
name|snapshot
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SnapshotTestingUtils
operator|.
name|assertNoSnapshots
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|deleteArchiveDirectory
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Ensure the archiver to be empty
name|MasterFileSystem
name|mfs
init|=
name|util
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
name|Path
name|archiveDir
init|=
operator|new
name|Path
argument_list|(
name|mfs
operator|.
name|getRootDir
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HFILE_ARCHIVE_DIRECTORY
argument_list|)
decl_stmt|;
name|mfs
operator|.
name|getFileSystem
argument_list|()
operator|.
name|delete
argument_list|(
name|archiveDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|verifyRowCount
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|util
parameter_list|,
specifier|final
name|TableName
name|tableName
parameter_list|,
name|long
name|expectedRows
parameter_list|)
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|util
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|expectedRows
argument_list|,
name|util
operator|.
name|countRows
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|verifyReplicasCameOnline
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Admin
name|admin
parameter_list|,
name|int
name|regionReplication
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|hri
range|:
name|regions
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForDefaultReplica
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionReplication
condition|;
name|i
operator|++
control|)
block|{
name|HRegionInfo
name|replica
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|hri
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|regions
operator|.
name|contains
argument_list|(
name|replica
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
name|replica
operator|+
literal|" is not contained in the list of online regions"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
assert|assert
operator|(
name|set
operator|.
name|size
argument_list|()
operator|==
name|getSplitKeys
argument_list|()
operator|.
name|length
operator|+
literal|1
operator|)
assert|;
block|}
block|}
end_class

end_unit

