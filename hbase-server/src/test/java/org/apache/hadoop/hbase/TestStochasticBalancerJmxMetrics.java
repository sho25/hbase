begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanAttributeInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerConnection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectInstance
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BalancerTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|StochasticLoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|FixMethodOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|MethodSorters
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|FixMethodOrder
argument_list|(
name|MethodSorters
operator|.
name|NAME_ASCENDING
argument_list|)
annotation|@
name|Ignore
specifier|public
class|class
name|TestStochasticBalancerJmxMetrics
extends|extends
name|BalancerTestBase
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStochasticBalancerJmxMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|connectorPort
init|=
literal|61120
decl_stmt|;
specifier|private
specifier|static
name|StochasticLoadBalancer
name|loadBalancer
decl_stmt|;
comment|/**    * a simple cluster for testing JMX.    */
specifier|private
specifier|static
name|int
index|[]
name|mockCluster_ensemble
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
specifier|private
specifier|static
name|int
index|[]
name|mockCluster_pertable_1
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
specifier|private
specifier|static
name|int
index|[]
name|mockCluster_pertable_2
init|=
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
specifier|private
specifier|static
name|int
index|[]
name|mockCluster_pertable_namespace
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|1
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME_1
init|=
literal|"Table1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME_2
init|=
literal|"Table2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TABLE_NAME_NAMESPACE
init|=
literal|"hbase:namespace"
decl_stmt|;
specifier|private
specifier|static
name|Configuration
name|conf
init|=
literal|null
decl_stmt|;
comment|/**    * Setup the environment for the test.    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.util.ip.to.rack.determiner"
argument_list|,
name|MockMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.master.balancer.stochastic.maxMovePercent"
argument_list|,
literal|0.75f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.regions.slop"
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|REGIONSERVER_COPROCESSOR_CONF_KEY
argument_list|,
name|JMXListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
do|do
block|{
name|int
name|sign
init|=
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|1
else|:
operator|-
literal|1
decl_stmt|;
name|connectorPort
operator|+=
name|sign
operator|*
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|HBaseTestingUtility
operator|.
name|available
argument_list|(
name|connectorPort
argument_list|)
condition|)
do|;
try|try
block|{
name|conf
operator|.
name|setInt
argument_list|(
literal|"regionserver.rmi.registry.port"
argument_list|,
name|connectorPort
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encountered exception when starting cluster. Trying port "
operator|+
name|connectorPort
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
comment|// this is to avoid "IllegalStateException: A mini-cluster is already running"
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Encountered exception shutting down cluster"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * In Ensemble mode, there should be only one ensemble table    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testJmxMetrics_EnsembleMode
parameter_list|()
throws|throws
name|Exception
block|{
name|loadBalancer
operator|=
operator|new
name|StochasticLoadBalancer
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCE_BYTABLE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TableName
name|tableName
init|=
name|HConstants
operator|.
name|ENSEMBLE_TABLE_NAME
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
name|mockClusterServers
argument_list|(
name|mockCluster_ensemble
argument_list|)
decl_stmt|;
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|tableName
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|String
index|[]
name|tableNames
init|=
operator|new
name|String
index|[]
block|{
name|tableName
operator|.
name|getNameAsString
argument_list|()
block|}
decl_stmt|;
name|String
index|[]
name|functionNames
init|=
name|loadBalancer
operator|.
name|getCostFunctionNames
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jmxMetrics
init|=
name|readJmxMetricsWithRetry
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedMetrics
init|=
name|getExpectedJmxMetrics
argument_list|(
name|tableNames
argument_list|,
name|functionNames
argument_list|)
decl_stmt|;
comment|// printMetrics(jmxMetrics, "existing metrics in ensemble mode");
comment|// printMetrics(expectedMetrics, "expected metrics in ensemble mode");
comment|// assert that every expected is in the JMX
for|for
control|(
name|String
name|expected
range|:
name|expectedMetrics
control|)
block|{
name|assertTrue
argument_list|(
literal|"Metric "
operator|+
name|expected
operator|+
literal|" can not be found in JMX in ensemble mode."
argument_list|,
name|jmxMetrics
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * In per-table mode, each table has a set of metrics    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|60000
argument_list|)
specifier|public
name|void
name|testJmxMetrics_PerTableMode
parameter_list|()
throws|throws
name|Exception
block|{
name|loadBalancer
operator|=
operator|new
name|StochasticLoadBalancer
argument_list|()
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|HBASE_MASTER_LOADBALANCE_BYTABLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// NOTE the size is normally set in setClusterStatus, for test purpose, we set it manually
comment|// Tables: hbase:namespace, table1, table2
comment|// Functions: costFunctions, overall
name|String
index|[]
name|functionNames
init|=
name|loadBalancer
operator|.
name|getCostFunctionNames
argument_list|()
decl_stmt|;
name|loadBalancer
operator|.
name|updateMetricsSize
argument_list|(
literal|3
operator|*
operator|(
name|functionNames
operator|.
name|length
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
comment|// table 1
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME_1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
name|mockClusterServers
argument_list|(
name|mockCluster_pertable_1
argument_list|)
decl_stmt|;
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|tableName
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// table 2
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME_2
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|mockClusterServers
argument_list|(
name|mockCluster_pertable_2
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|tableName
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// table hbase:namespace
name|tableName
operator|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME_NAMESPACE
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|mockClusterServers
argument_list|(
name|mockCluster_pertable_namespace
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|balanceCluster
argument_list|(
name|tableName
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
name|String
index|[]
name|tableNames
init|=
operator|new
name|String
index|[]
block|{
name|TABLE_NAME_1
block|,
name|TABLE_NAME_2
block|,
name|TABLE_NAME_NAMESPACE
block|}
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|jmxMetrics
init|=
name|readJmxMetricsWithRetry
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedMetrics
init|=
name|getExpectedJmxMetrics
argument_list|(
name|tableNames
argument_list|,
name|functionNames
argument_list|)
decl_stmt|;
comment|// printMetrics(jmxMetrics, "existing metrics in per-table mode");
comment|// printMetrics(expectedMetrics, "expected metrics in per-table mode");
comment|// assert that every expected is in the JMX
for|for
control|(
name|String
name|expected
range|:
name|expectedMetrics
control|)
block|{
name|assertTrue
argument_list|(
literal|"Metric "
operator|+
name|expected
operator|+
literal|" can not be found in JMX in per-table mode."
argument_list|,
name|jmxMetrics
operator|.
name|contains
argument_list|(
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|readJmxMetricsWithRetry
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|metrics
init|=
name|readJmxMetrics
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
return|return
name|metrics
return|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get jmxmetrics... sleeping, retrying; "
operator|+
name|i
operator|+
literal|" of "
operator|+
name|count
operator|+
literal|" times"
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Read the attributes from Hadoop->HBase->Master->Balancer in JMX    * @throws IOException    */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|readJmxMetrics
parameter_list|()
throws|throws
name|IOException
block|{
name|JMXConnector
name|connector
init|=
literal|null
decl_stmt|;
name|ObjectName
name|target
init|=
literal|null
decl_stmt|;
name|MBeanServerConnection
name|mb
init|=
literal|null
decl_stmt|;
try|try
block|{
name|connector
operator|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|JMXListener
operator|.
name|buildJMXServiceURL
argument_list|(
name|connectorPort
argument_list|,
name|connectorPort
argument_list|)
argument_list|)
expr_stmt|;
name|mb
operator|=
name|connector
operator|.
name|getMBeanServerConnection
argument_list|()
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pairs
init|=
operator|new
name|Hashtable
argument_list|<>
argument_list|()
decl_stmt|;
name|pairs
operator|.
name|put
argument_list|(
literal|"service"
argument_list|,
literal|"HBase"
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Master"
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|put
argument_list|(
literal|"sub"
argument_list|,
literal|"Balancer"
argument_list|)
expr_stmt|;
name|target
operator|=
operator|new
name|ObjectName
argument_list|(
literal|"Hadoop"
argument_list|,
name|pairs
argument_list|)
expr_stmt|;
name|MBeanInfo
name|beanInfo
init|=
name|mb
operator|.
name|getMBeanInfo
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|existingAttrs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|MBeanAttributeInfo
name|attrInfo
range|:
name|beanInfo
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|existingAttrs
operator|.
name|add
argument_list|(
name|attrInfo
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|existingAttrs
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to get bean!!! "
operator|+
name|target
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|mb
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|ObjectInstance
argument_list|>
name|instances
init|=
name|mb
operator|.
name|queryMBeans
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|ObjectInstance
argument_list|>
name|iterator
init|=
name|instances
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"MBean Found:"
argument_list|)
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ObjectInstance
name|instance
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Class Name: "
operator|+
name|instance
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Object Name: "
operator|+
name|instance
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|connector
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|connector
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Given the tables and functions, return metrics names that should exist in JMX    */
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getExpectedJmxMetrics
parameter_list|(
name|String
index|[]
name|tableNames
parameter_list|,
name|String
index|[]
name|functionNames
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|StochasticLoadBalancer
operator|.
name|composeAttributeName
argument_list|(
name|tableName
argument_list|,
literal|"Overall"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|functionName
range|:
name|functionNames
control|)
block|{
name|String
name|metricsName
init|=
name|StochasticLoadBalancer
operator|.
name|composeAttributeName
argument_list|(
name|tableName
argument_list|,
name|functionName
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|metricsName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|void
name|printMetrics
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|metrics
parameter_list|,
name|String
name|info
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|info
condition|)
name|LOG
operator|.
name|info
argument_list|(
literal|"++++ ------ "
operator|+
name|info
operator|+
literal|" ------"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"++++ metrics count = "
operator|+
name|metrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|str
range|:
name|metrics
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|" ++++ "
operator|+
name|str
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

