begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HeapSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTagRewriteCell
block|{
annotation|@
name|Test
specifier|public
name|void
name|testHeapSize
parameter_list|()
block|{
name|Cell
name|originalCell
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|fakeTagArrayLength
init|=
literal|10
decl_stmt|;
name|Cell
name|trCell
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|originalCell
argument_list|,
operator|new
name|byte
index|[
name|fakeTagArrayLength
index|]
argument_list|)
decl_stmt|;
comment|// Get the heapSize before the internal tags array in trCell are nuked
name|long
name|trCellHeapSize
init|=
operator|(
operator|(
name|HeapSize
operator|)
name|trCell
operator|)
operator|.
name|heapSize
argument_list|()
decl_stmt|;
comment|// Make another TagRewriteCell with the original TagRewriteCell
comment|// This happens on systems with more than one RegionObserver/Coproc loaded (such as
comment|// VisibilityController and AccessController)
name|Cell
name|trCell2
init|=
name|CellUtil
operator|.
name|createCell
argument_list|(
name|trCell
argument_list|,
operator|new
name|byte
index|[
name|fakeTagArrayLength
index|]
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"TagRewriteCell containing a TagRewriteCell's heapsize should be larger than a "
operator|+
literal|"single TagRewriteCell's heapsize"
argument_list|,
name|trCellHeapSize
operator|<
operator|(
operator|(
name|HeapSize
operator|)
name|trCell2
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"TagRewriteCell should have had nulled out tags array"
argument_list|,
operator|(
operator|(
name|HeapSize
operator|)
name|trCell
operator|)
operator|.
name|heapSize
argument_list|()
operator|<
name|trCellHeapSize
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

