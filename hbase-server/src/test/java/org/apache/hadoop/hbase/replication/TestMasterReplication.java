begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|LargeTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMasterReplication
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestReplicationBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|baseConfiguration
decl_stmt|;
specifier|private
name|HBaseTestingUtility
index|[]
name|utilities
decl_stmt|;
specifier|private
name|Configuration
index|[]
name|configurations
decl_stmt|;
specifier|private
name|MiniZooKeeperCluster
name|miniZK
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SLEEP_TIME
init|=
literal|500
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_RETRIES
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|famName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row4"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|noRepfamName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"norep"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|count
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"count"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|put
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"put"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|delete
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"delete"
argument_list|)
decl_stmt|;
specifier|private
name|HTableDescriptor
name|table
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|baseConfiguration
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// smaller block size and capacity to trigger more operations
comment|// and test them
name|baseConfiguration
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
literal|1024
operator|*
literal|20
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setInt
argument_list|(
literal|"replication.source.size.capacity"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setLong
argument_list|(
literal|"replication.source.sleepforretries"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setLong
argument_list|(
literal|"hbase.master.logcleaner.ttl"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|REPLICATION_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setBoolean
argument_list|(
literal|"dfs.support.append"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|USER_REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|CoprocessorCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|famName
argument_list|)
decl_stmt|;
name|fam
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
expr_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|fam
operator|=
operator|new
name|HColumnDescriptor
argument_list|(
name|noRepfamName
argument_list|)
expr_stmt|;
name|table
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
block|}
comment|/**    * It tests the replication scenario involving 0 -> 1 -> 0. It does it by    * adding and deleting a row to a table in each cluster, checking if it's    * replicated. It also tests that the puts and deletes are not replicated back    * to the originating cluster.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCyclicReplication1
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSimplePutDelete"
argument_list|)
expr_stmt|;
name|int
name|numClusters
init|=
literal|2
decl_stmt|;
name|HTable
index|[]
name|htables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startMiniClusters
argument_list|(
name|numClusters
argument_list|)
expr_stmt|;
name|createTableOnClusters
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|htables
operator|=
name|getHTablesOnClusters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Test the replication scenarios of 0 -> 1 -> 0
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
decl_stmt|;
comment|// add rows to both clusters,
comment|// make sure they are both replication
name|putAndWait
argument_list|(
name|row
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|putAndWait
argument_list|(
name|row1
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|put
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row1
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|delete
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|htables
argument_list|)
expr_stmt|;
name|shutDownMiniClusters
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests the cyclic replication scenario of 0 -> 1 -> 2 -> 0 by adding and    * deleting rows to a table in each clusters and ensuring that the each of    * these clusters get the appropriate mutations. It also tests the grouping    * scenario where a cluster needs to replicate the edits originating from    * itself and also the edits that it received using replication from a    * different cluster. The scenario is explained in HBASE-9158    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCyclicReplication2
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testCyclicReplication1"
argument_list|)
expr_stmt|;
name|int
name|numClusters
init|=
literal|3
decl_stmt|;
name|HTable
index|[]
name|htables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startMiniClusters
argument_list|(
name|numClusters
argument_list|)
expr_stmt|;
name|createTableOnClusters
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Test the replication scenario of 0 -> 1 -> 2 -> 0
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|htables
operator|=
name|getHTablesOnClusters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// put "row" and wait 'til it got around
name|putAndWait
argument_list|(
name|row
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|putAndWait
argument_list|(
name|row1
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|putAndWait
argument_list|(
name|row2
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row1
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row2
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
decl_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|put
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|delete
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
comment|// Test HBASE-9158
name|disablePeer
argument_list|(
literal|"1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// we now have an edit that was replicated into cluster originating from
comment|// cluster 0
name|putAndWait
argument_list|(
name|row3
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// now add a local edit to cluster 1
name|htables
index|[
literal|1
index|]
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row4
argument_list|)
operator|.
name|add
argument_list|(
name|famName
argument_list|,
name|row4
argument_list|,
name|row4
argument_list|)
argument_list|)
expr_stmt|;
comment|// re-enable replication from cluster 2 to cluster 0
name|enablePeer
argument_list|(
literal|"1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// without HBASE-9158 the edit for row4 would have been marked with
comment|// cluster 0's id
comment|// and hence not replicated to cluster 0
name|wait
argument_list|(
name|row4
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|htables
argument_list|)
expr_stmt|;
name|shutDownMiniClusters
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests cyclic replication scenario of 0 -> 1 -> 2 -> 1.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCyclicReplication3
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testCyclicReplication2"
argument_list|)
expr_stmt|;
name|int
name|numClusters
init|=
literal|3
decl_stmt|;
name|HTable
index|[]
name|htables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startMiniClusters
argument_list|(
name|numClusters
argument_list|)
expr_stmt|;
name|createTableOnClusters
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Test the replication scenario of 0 -> 1 -> 2 -> 1
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|htables
operator|=
name|getHTablesOnClusters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// put "row" and wait 'til it got around
name|putAndWait
argument_list|(
name|row
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|putAndWait
argument_list|(
name|row1
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|putAndWait
argument_list|(
name|row2
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row1
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row2
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|3
block|}
decl_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|put
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|delete
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|htables
argument_list|)
expr_stmt|;
name|shutDownMiniClusters
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|configurations
operator|=
literal|null
expr_stmt|;
name|utilities
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|private
name|void
name|startMiniClusters
parameter_list|(
name|int
name|numClusters
parameter_list|)
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|utilities
operator|=
operator|new
name|HBaseTestingUtility
index|[
name|numClusters
index|]
expr_stmt|;
name|configurations
operator|=
operator|new
name|Configuration
index|[
name|numClusters
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClusters
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|baseConfiguration
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/"
operator|+
name|i
operator|+
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
name|utility
init|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|utility
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|miniZK
operator|=
name|utility
operator|.
name|getZkCluster
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|utility
operator|.
name|setZkCluster
argument_list|(
name|miniZK
argument_list|)
expr_stmt|;
block|}
name|utility
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|utilities
index|[
name|i
index|]
operator|=
name|utility
expr_stmt|;
name|configurations
index|[
name|i
index|]
operator|=
name|conf
expr_stmt|;
operator|new
name|ZooKeeperWatcher
argument_list|(
name|conf
argument_list|,
literal|"cluster"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|shutDownMiniClusters
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numClusters
init|=
name|utilities
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numClusters
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|utilities
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|utilities
index|[
name|i
index|]
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
name|miniZK
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createTableOnClusters
parameter_list|(
name|HTableDescriptor
name|table
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numClusters
init|=
name|configurations
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClusters
condition|;
name|i
operator|++
control|)
block|{
name|HBaseAdmin
name|hbaseAdmin
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hbaseAdmin
operator|=
operator|new
name|HBaseAdmin
argument_list|(
name|configurations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|hbaseAdmin
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|hbaseAdmin
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addPeer
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|masterClusterNumber
parameter_list|,
name|int
name|slaveClusterNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|ReplicationAdmin
name|replicationAdmin
init|=
literal|null
decl_stmt|;
try|try
block|{
name|replicationAdmin
operator|=
operator|new
name|ReplicationAdmin
argument_list|(
name|configurations
index|[
name|masterClusterNumber
index|]
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|addPeer
argument_list|(
name|id
argument_list|,
name|utilities
index|[
name|slaveClusterNumber
index|]
operator|.
name|getClusterKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|replicationAdmin
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|disablePeer
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|masterClusterNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|ReplicationAdmin
name|replicationAdmin
init|=
literal|null
decl_stmt|;
try|try
block|{
name|replicationAdmin
operator|=
operator|new
name|ReplicationAdmin
argument_list|(
name|configurations
index|[
name|masterClusterNumber
index|]
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|disablePeer
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|replicationAdmin
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|enablePeer
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|masterClusterNumber
parameter_list|)
throws|throws
name|Exception
block|{
name|ReplicationAdmin
name|replicationAdmin
init|=
literal|null
decl_stmt|;
try|try
block|{
name|replicationAdmin
operator|=
operator|new
name|ReplicationAdmin
argument_list|(
name|configurations
index|[
name|masterClusterNumber
index|]
argument_list|)
expr_stmt|;
name|replicationAdmin
operator|.
name|enablePeer
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|replicationAdmin
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|close
parameter_list|(
name|Closeable
modifier|...
name|closeables
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|closeables
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Closeable
name|closeable
range|:
name|closeables
control|)
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occured while closing the object:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|private
name|HTable
index|[]
name|getHTablesOnClusters
parameter_list|(
name|byte
index|[]
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numClusters
init|=
name|utilities
operator|.
name|length
decl_stmt|;
name|HTable
index|[]
name|htables
init|=
operator|new
name|HTable
index|[
name|numClusters
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClusters
condition|;
name|i
operator|++
control|)
block|{
name|HTable
name|htable
init|=
operator|new
name|HTable
argument_list|(
name|configurations
index|[
name|i
index|]
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|htable
operator|.
name|setWriteBufferSize
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|htables
index|[
name|i
index|]
operator|=
name|htable
expr_stmt|;
block|}
return|return
name|htables
return|;
block|}
specifier|private
name|void
name|validateCounts
parameter_list|(
name|HTable
index|[]
name|htables
parameter_list|,
name|byte
index|[]
name|type
parameter_list|,
name|int
index|[]
name|expectedCounts
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|htables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|type
argument_list|)
operator|+
literal|" were replicated back "
argument_list|,
name|expectedCounts
index|[
name|i
index|]
argument_list|,
name|getCount
argument_list|(
name|htables
index|[
name|i
index|]
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getCount
parameter_list|(
name|HTable
name|t
parameter_list|,
name|byte
index|[]
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|test
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|test
operator|.
name|setAttribute
argument_list|(
literal|"count"
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
name|t
operator|.
name|get
argument_list|(
name|test
argument_list|)
decl_stmt|;
return|return
name|Bytes
operator|.
name|toInt
argument_list|(
name|res
operator|.
name|getValue
argument_list|(
name|count
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|deleteAndWait
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|HTable
name|source
parameter_list|,
name|HTable
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|source
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|wait
argument_list|(
name|row
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|putAndWait
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|,
name|HTable
name|source
parameter_list|,
name|HTable
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|fam
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|source
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|wait
argument_list|(
name|row
argument_list|,
name|target
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|wait
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|HTable
name|target
parameter_list|,
name|boolean
name|isDeleted
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for replication. Row:"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|". IsDeleteReplication:"
operator|+
name|isDeleted
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|target
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|boolean
name|sleep
init|=
name|isDeleted
condition|?
name|res
operator|.
name|size
argument_list|()
operator|>
literal|0
else|:
name|res
operator|.
name|size
argument_list|()
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|sleep
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for more time for replication. Row:"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|". IsDeleteReplication:"
operator|+
name|isDeleted
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isDeleted
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|res
operator|.
name|value
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Obtained row:"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|". IsDeleteReplication:"
operator|+
name|isDeleted
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * Use a coprocessor to count puts and deletes. as KVs would be replicated back with the same    * timestamp there is otherwise no way to count them.    */
specifier|public
specifier|static
class|class
name|CoprocessorCounter
extends|extends
name|BaseRegionObserver
block|{
specifier|private
name|int
name|nCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|nDelete
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|nCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDelete
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|nDelete
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGet
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|KeyValue
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|get
operator|.
name|getAttribute
argument_list|(
literal|"count"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// order is important!
name|result
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|count
argument_list|,
name|count
argument_list|,
name|delete
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|nDelete
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|count
argument_list|,
name|count
argument_list|,
name|put
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|nCount
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

