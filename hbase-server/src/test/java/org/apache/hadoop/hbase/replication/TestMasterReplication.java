begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|replication
operator|.
name|ReplicationPeerConfigUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
operator|.
name|WALActionsListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|regionserver
operator|.
name|TestSourceFSConfigurationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|LoadIncrementalHFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALEdit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZNodePaths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestMasterReplication
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestMasterReplication
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationBase
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|baseConfiguration
decl_stmt|;
specifier|private
name|HBaseTestingUtility
index|[]
name|utilities
decl_stmt|;
specifier|private
name|Configuration
index|[]
name|configurations
decl_stmt|;
specifier|private
name|MiniZooKeeperCluster
name|miniZK
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|SLEEP_TIME
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NB_RETRIES
init|=
literal|120
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|famName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|famName1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|row4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row4"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|noRepfamName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"norep"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|count
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"count"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|put
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"put"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|delete
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"delete"
argument_list|)
decl_stmt|;
specifier|private
name|TableDescriptor
name|table
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|baseConfiguration
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// smaller block size and capacity to trigger more operations
comment|// and test them
name|baseConfiguration
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.hlog.blocksize"
argument_list|,
literal|1024
operator|*
literal|20
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setInt
argument_list|(
literal|"replication.source.size.capacity"
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setLong
argument_list|(
literal|"replication.source.sleepforretries"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setLong
argument_list|(
literal|"hbase.master.logcleaner.ttl"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setBoolean
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BULKLOAD_ENABLE_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|set
argument_list|(
literal|"hbase.replication.source.fs.conf.provider"
argument_list|,
name|TestSourceFSConfigurationProvider
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|REPLICATION_CLUSTER_ID
argument_list|,
literal|"12345"
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|baseConfiguration
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|USER_REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|CoprocessorCounter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|famName
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|famName1
argument_list|)
operator|.
name|setScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_GLOBAL
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|addColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|noRepfamName
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|/**    * It tests the replication scenario involving 0 -> 1 -> 0. It does it by    * adding and deleting a row to a table in each cluster, checking if it's    * replicated. It also tests that the puts and deletes are not replicated back    * to the originating cluster.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCyclicReplication1
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testSimplePutDelete"
argument_list|)
expr_stmt|;
name|int
name|numClusters
init|=
literal|2
decl_stmt|;
name|Table
index|[]
name|htables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|htables
operator|=
name|setUpClusterTablesAndPeers
argument_list|(
name|numClusters
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
decl_stmt|;
comment|// add rows to both clusters,
comment|// make sure they are both replication
name|putAndWait
argument_list|(
name|row
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|putAndWait
argument_list|(
name|row1
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|put
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row1
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|delete
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|htables
argument_list|)
expr_stmt|;
name|shutDownMiniClusters
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests the replication scenario 0 -> 0. By default    * {@link BaseReplicationEndpoint#canReplicateToSameCluster()} returns false, so the    * ReplicationSource should terminate, and no further logs should get enqueued    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testLoopedReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testLoopedReplication"
argument_list|)
expr_stmt|;
name|startMiniClusters
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|createTableOnClusters
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
comment|// wait for source to terminate
specifier|final
name|ServerName
name|rsName
init|=
name|utilities
index|[
literal|0
index|]
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|baseConfiguration
argument_list|,
literal|10000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|ClusterMetrics
name|clusterStatus
init|=
name|utilities
index|[
literal|0
index|]
operator|.
name|getAdmin
argument_list|()
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|ClusterMetrics
operator|.
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
decl_stmt|;
name|ServerMetrics
name|serverLoad
init|=
name|clusterStatus
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|rsName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|replicationLoadSourceList
init|=
name|serverLoad
operator|.
name|getReplicationLoadSourceList
argument_list|()
decl_stmt|;
return|return
name|replicationLoadSourceList
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Table
index|[]
name|htables
init|=
name|getHTablesOnClusters
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|putAndWait
argument_list|(
name|row
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|rollWALAndWait
argument_list|(
name|utilities
index|[
literal|0
index|]
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|ZKWatcher
name|zkw
init|=
name|utilities
index|[
literal|0
index|]
operator|.
name|getZooKeeperWatcher
argument_list|()
decl_stmt|;
name|String
name|queuesZnode
init|=
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|getZNodePaths
argument_list|()
operator|.
name|baseZNode
argument_list|,
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
literal|"replication"
argument_list|,
literal|"rs"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|listChildrenNoWatch
init|=
name|ZKUtil
operator|.
name|listChildrenNoWatch
argument_list|(
name|zkw
argument_list|,
name|ZNodePaths
operator|.
name|joinZNode
argument_list|(
name|queuesZnode
argument_list|,
name|rsName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|listChildrenNoWatch
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * It tests the replication scenario involving 0 -> 1 -> 0. It does it by bulk loading a set of    * HFiles to a table in each cluster, checking if it's replicated.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testHFileCyclicReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testHFileCyclicReplication"
argument_list|)
expr_stmt|;
name|int
name|numClusters
init|=
literal|2
decl_stmt|;
name|Table
index|[]
name|htables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|htables
operator|=
name|setUpClusterTablesAndPeers
argument_list|(
name|numClusters
argument_list|)
expr_stmt|;
comment|// Load 100 rows for each hfile range in cluster '0' and validate whether its been replicated
comment|// to cluster '1'.
name|byte
index|[]
index|[]
index|[]
name|hfileRanges
init|=
operator|new
name|byte
index|[]
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaa"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cccc"
argument_list|)
block|}
block|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fff"
argument_list|)
block|}
block|, }
decl_stmt|;
name|int
name|numOfRows
init|=
literal|100
decl_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[]
block|{
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
block|,
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
block|}
decl_stmt|;
name|loadAndValidateHFileReplication
argument_list|(
literal|"testHFileCyclicReplication_01"
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
name|row
argument_list|,
name|famName
argument_list|,
name|htables
argument_list|,
name|hfileRanges
argument_list|,
name|numOfRows
argument_list|,
name|expectedCounts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Load 200 rows for each hfile range in cluster '1' and validate whether its been replicated
comment|// to cluster '0'.
name|hfileRanges
operator|=
operator|new
name|byte
index|[]
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"gggg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"iiii"
argument_list|)
block|}
block|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jjj"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"lll"
argument_list|)
block|}
block|, }
expr_stmt|;
name|numOfRows
operator|=
literal|200
expr_stmt|;
name|int
index|[]
name|newExpectedCounts
init|=
operator|new
name|int
index|[]
block|{
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
operator|+
name|expectedCounts
index|[
literal|0
index|]
block|,
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
operator|+
name|expectedCounts
index|[
literal|1
index|]
block|}
decl_stmt|;
name|loadAndValidateHFileReplication
argument_list|(
literal|"testHFileCyclicReplication_10"
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
name|row
argument_list|,
name|famName
argument_list|,
name|htables
argument_list|,
name|hfileRanges
argument_list|,
name|numOfRows
argument_list|,
name|newExpectedCounts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|htables
argument_list|)
expr_stmt|;
name|shutDownMiniClusters
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Table
index|[]
name|setUpClusterTablesAndPeers
parameter_list|(
name|int
name|numClusters
parameter_list|)
throws|throws
name|Exception
block|{
name|Table
index|[]
name|htables
decl_stmt|;
name|startMiniClusters
argument_list|(
name|numClusters
argument_list|)
expr_stmt|;
name|createTableOnClusters
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|htables
operator|=
name|getHTablesOnClusters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Test the replication scenarios of 0 -> 1 -> 0
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|htables
return|;
block|}
comment|/**    * Tests the cyclic replication scenario of 0 -> 1 -> 2 -> 0 by adding and deleting rows to a    * table in each clusters and ensuring that the each of these clusters get the appropriate    * mutations. It also tests the grouping scenario where a cluster needs to replicate the edits    * originating from itself and also the edits that it received using replication from a different    * cluster. The scenario is explained in HBASE-9158    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCyclicReplication2
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testCyclicReplication2"
argument_list|)
expr_stmt|;
name|int
name|numClusters
init|=
literal|3
decl_stmt|;
name|Table
index|[]
name|htables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startMiniClusters
argument_list|(
name|numClusters
argument_list|)
expr_stmt|;
name|createTableOnClusters
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Test the replication scenario of 0 -> 1 -> 2 -> 0
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|htables
operator|=
name|getHTablesOnClusters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// put "row" and wait 'til it got around
name|putAndWait
argument_list|(
name|row
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|putAndWait
argument_list|(
name|row1
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|putAndWait
argument_list|(
name|row2
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row1
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row2
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|3
block|}
decl_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|put
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|delete
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
comment|// Test HBASE-9158
name|disablePeer
argument_list|(
literal|"1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// we now have an edit that was replicated into cluster originating from
comment|// cluster 0
name|putAndWait
argument_list|(
name|row3
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// now add a local edit to cluster 1
name|htables
index|[
literal|1
index|]
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|row4
argument_list|)
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|row4
argument_list|,
name|row4
argument_list|)
argument_list|)
expr_stmt|;
comment|// re-enable replication from cluster 2 to cluster 0
name|enablePeer
argument_list|(
literal|"1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// without HBASE-9158 the edit for row4 would have been marked with
comment|// cluster 0's id
comment|// and hence not replicated to cluster 0
name|wait
argument_list|(
name|row4
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|htables
argument_list|)
expr_stmt|;
name|shutDownMiniClusters
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * It tests the multi slave hfile replication scenario involving 0 -> 1, 2. It does it by bulk    * loading a set of HFiles to a table in master cluster, checking if it's replicated in its peers.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testHFileMultiSlaveReplication
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testHFileMultiSlaveReplication"
argument_list|)
expr_stmt|;
name|int
name|numClusters
init|=
literal|3
decl_stmt|;
name|Table
index|[]
name|htables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startMiniClusters
argument_list|(
name|numClusters
argument_list|)
expr_stmt|;
name|createTableOnClusters
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Add a slave, 0 -> 1
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|htables
operator|=
name|getHTablesOnClusters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Load 100 rows for each hfile range in cluster '0' and validate whether its been replicated
comment|// to cluster '1'.
name|byte
index|[]
index|[]
index|[]
name|hfileRanges
init|=
operator|new
name|byte
index|[]
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mmmm"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"oooo"
argument_list|)
block|}
block|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ppp"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"rrr"
argument_list|)
block|}
block|, }
decl_stmt|;
name|int
name|numOfRows
init|=
literal|100
decl_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[]
block|{
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
block|,
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
block|}
decl_stmt|;
name|loadAndValidateHFileReplication
argument_list|(
literal|"testHFileCyclicReplication_0"
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
name|row
argument_list|,
name|famName
argument_list|,
name|htables
argument_list|,
name|hfileRanges
argument_list|,
name|numOfRows
argument_list|,
name|expectedCounts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Validate data is not replicated to cluster '2'.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|utilities
index|[
literal|2
index|]
operator|.
name|countRows
argument_list|(
name|htables
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|rollWALAndWait
argument_list|(
name|utilities
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|// Add one more slave, 0 -> 2
name|addPeer
argument_list|(
literal|"2"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Load 200 rows for each hfile range in cluster '0' and validate whether its been replicated
comment|// to cluster '1' and '2'. Previous data should be replicated to cluster '2'.
name|hfileRanges
operator|=
operator|new
name|byte
index|[]
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ssss"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"uuuu"
argument_list|)
block|}
block|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"vvv"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"xxx"
argument_list|)
block|}
block|, }
expr_stmt|;
name|numOfRows
operator|=
literal|200
expr_stmt|;
name|int
index|[]
name|newExpectedCounts
init|=
operator|new
name|int
index|[]
block|{
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
operator|+
name|expectedCounts
index|[
literal|0
index|]
block|,
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
operator|+
name|expectedCounts
index|[
literal|1
index|]
block|,
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
block|}
decl_stmt|;
name|loadAndValidateHFileReplication
argument_list|(
literal|"testHFileCyclicReplication_1"
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
name|row
argument_list|,
name|famName
argument_list|,
name|htables
argument_list|,
name|hfileRanges
argument_list|,
name|numOfRows
argument_list|,
name|newExpectedCounts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|htables
argument_list|)
expr_stmt|;
name|shutDownMiniClusters
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * It tests the bulk loaded hfile replication scenario to only explicitly specified table column    * families. It does it by bulk loading a set of HFiles belonging to both the CFs of table and set    * only one CF data to replicate.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testHFileReplicationForConfiguredTableCfs
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testHFileReplicationForConfiguredTableCfs"
argument_list|)
expr_stmt|;
name|int
name|numClusters
init|=
literal|2
decl_stmt|;
name|Table
index|[]
name|htables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startMiniClusters
argument_list|(
name|numClusters
argument_list|)
expr_stmt|;
name|createTableOnClusters
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|htables
operator|=
name|getHTablesOnClusters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Test the replication scenarios only 'f' is configured for table data replication not 'f1'
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|tableName
operator|.
name|getNameAsString
argument_list|()
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|famName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Load 100 rows for each hfile range in cluster '0' for table CF 'f'
name|byte
index|[]
index|[]
index|[]
name|hfileRanges
init|=
operator|new
name|byte
index|[]
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaa"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cccc"
argument_list|)
block|}
block|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fff"
argument_list|)
block|}
block|, }
decl_stmt|;
name|int
name|numOfRows
init|=
literal|100
decl_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[]
block|{
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
block|,
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
block|}
decl_stmt|;
name|loadAndValidateHFileReplication
argument_list|(
literal|"load_f"
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
name|row
argument_list|,
name|famName
argument_list|,
name|htables
argument_list|,
name|hfileRanges
argument_list|,
name|numOfRows
argument_list|,
name|expectedCounts
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Load 100 rows for each hfile range in cluster '0' for table CF 'f1'
name|hfileRanges
operator|=
operator|new
name|byte
index|[]
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"gggg"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"iiii"
argument_list|)
block|}
block|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"jjj"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"lll"
argument_list|)
block|}
block|, }
expr_stmt|;
name|numOfRows
operator|=
literal|100
expr_stmt|;
name|int
index|[]
name|newExpectedCounts
init|=
operator|new
name|int
index|[]
block|{
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
operator|+
name|expectedCounts
index|[
literal|0
index|]
block|,
name|expectedCounts
index|[
literal|1
index|]
block|}
decl_stmt|;
name|loadAndValidateHFileReplication
argument_list|(
literal|"load_f1"
argument_list|,
literal|0
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
name|row
argument_list|,
name|famName1
argument_list|,
name|htables
argument_list|,
name|hfileRanges
argument_list|,
name|numOfRows
argument_list|,
name|newExpectedCounts
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Validate data replication for CF 'f1'
comment|// Source cluster table should contain data for the families
name|wait
argument_list|(
literal|0
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|hfileRanges
operator|.
name|length
operator|*
name|numOfRows
operator|+
name|expectedCounts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Sleep for enough time so that the data is still not replicated for the CF which is not
comment|// configured for replication
name|Thread
operator|.
name|sleep
argument_list|(
operator|(
name|NB_RETRIES
operator|/
literal|2
operator|)
operator|*
name|SLEEP_TIME
argument_list|)
expr_stmt|;
comment|// Peer cluster should have only configured CF data
name|wait
argument_list|(
literal|1
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|expectedCounts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|htables
argument_list|)
expr_stmt|;
name|shutDownMiniClusters
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests cyclic replication scenario of 0 -> 1 -> 2 -> 1.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|300000
argument_list|)
specifier|public
name|void
name|testCyclicReplication3
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testCyclicReplication2"
argument_list|)
expr_stmt|;
name|int
name|numClusters
init|=
literal|3
decl_stmt|;
name|Table
index|[]
name|htables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startMiniClusters
argument_list|(
name|numClusters
argument_list|)
expr_stmt|;
name|createTableOnClusters
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// Test the replication scenario of 0 -> 1 -> 2 -> 1
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|addPeer
argument_list|(
literal|"1"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|htables
operator|=
name|getHTablesOnClusters
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// put "row" and wait 'til it got around
name|putAndWait
argument_list|(
name|row
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|putAndWait
argument_list|(
name|row1
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|putAndWait
argument_list|(
name|row2
argument_list|,
name|famName
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row
argument_list|,
name|htables
index|[
literal|0
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row1
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|deleteAndWait
argument_list|(
name|row2
argument_list|,
name|htables
index|[
literal|2
index|]
argument_list|,
name|htables
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|int
index|[]
name|expectedCounts
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|,
literal|3
block|}
decl_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|put
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
name|validateCounts
argument_list|(
name|htables
argument_list|,
name|delete
argument_list|,
name|expectedCounts
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|close
argument_list|(
name|htables
argument_list|)
expr_stmt|;
name|shutDownMiniClusters
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|configurations
operator|=
literal|null
expr_stmt|;
name|utilities
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|private
name|void
name|startMiniClusters
parameter_list|(
name|int
name|numClusters
parameter_list|)
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|utilities
operator|=
operator|new
name|HBaseTestingUtility
index|[
name|numClusters
index|]
expr_stmt|;
name|configurations
operator|=
operator|new
name|Configuration
index|[
name|numClusters
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClusters
condition|;
name|i
operator|++
control|)
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
name|baseConfiguration
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/"
operator|+
name|i
operator|+
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
name|utility
init|=
operator|new
name|HBaseTestingUtility
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|utility
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|miniZK
operator|=
name|utility
operator|.
name|getZkCluster
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|utility
operator|.
name|setZkCluster
argument_list|(
name|miniZK
argument_list|)
expr_stmt|;
block|}
name|utility
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|utilities
index|[
name|i
index|]
operator|=
name|utility
expr_stmt|;
name|configurations
index|[
name|i
index|]
operator|=
name|conf
expr_stmt|;
operator|new
name|ZKWatcher
argument_list|(
name|conf
argument_list|,
literal|"cluster"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|shutDownMiniClusters
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numClusters
init|=
name|utilities
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|numClusters
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|utilities
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|utilities
index|[
name|i
index|]
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
name|miniZK
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|createTableOnClusters
parameter_list|(
name|TableDescriptor
name|table
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|HBaseTestingUtility
name|utility
range|:
name|utilities
control|)
block|{
name|utility
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addPeer
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|masterClusterNumber
parameter_list|,
name|int
name|slaveClusterNumber
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configurations
index|[
name|masterClusterNumber
index|]
argument_list|)
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|id
argument_list|,
operator|new
name|ReplicationPeerConfig
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|utilities
index|[
name|slaveClusterNumber
index|]
operator|.
name|getClusterKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addPeer
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|masterClusterNumber
parameter_list|,
name|int
name|slaveClusterNumber
parameter_list|,
name|String
name|tableCfs
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configurations
index|[
name|masterClusterNumber
index|]
argument_list|)
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|addReplicationPeer
argument_list|(
name|id
argument_list|,
operator|new
name|ReplicationPeerConfig
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|utilities
index|[
name|slaveClusterNumber
index|]
operator|.
name|getClusterKey
argument_list|()
argument_list|)
operator|.
name|setReplicateAllUserTables
argument_list|(
literal|false
argument_list|)
operator|.
name|setTableCFsMap
argument_list|(
name|ReplicationPeerConfigUtil
operator|.
name|parseTableCFsFromConfig
argument_list|(
name|tableCfs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|disablePeer
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|masterClusterNumber
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configurations
index|[
name|masterClusterNumber
index|]
argument_list|)
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|disableReplicationPeer
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|enablePeer
parameter_list|(
name|String
name|id
parameter_list|,
name|int
name|masterClusterNumber
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configurations
index|[
name|masterClusterNumber
index|]
argument_list|)
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|admin
operator|.
name|enableReplicationPeer
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|close
parameter_list|(
name|Closeable
modifier|...
name|closeables
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|closeables
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Closeable
name|closeable
range|:
name|closeables
control|)
block|{
name|closeable
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception occurred while closing the object:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|private
name|Table
index|[]
name|getHTablesOnClusters
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numClusters
init|=
name|utilities
operator|.
name|length
decl_stmt|;
name|Table
index|[]
name|htables
init|=
operator|new
name|Table
index|[
name|numClusters
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numClusters
condition|;
name|i
operator|++
control|)
block|{
name|Table
name|htable
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|configurations
index|[
name|i
index|]
argument_list|)
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htables
index|[
name|i
index|]
operator|=
name|htable
expr_stmt|;
block|}
return|return
name|htables
return|;
block|}
specifier|private
name|void
name|validateCounts
parameter_list|(
name|Table
index|[]
name|htables
parameter_list|,
name|byte
index|[]
name|type
parameter_list|,
name|int
index|[]
name|expectedCounts
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|htables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|type
argument_list|)
operator|+
literal|" were replicated back "
argument_list|,
name|expectedCounts
index|[
name|i
index|]
argument_list|,
name|getCount
argument_list|(
name|htables
index|[
name|i
index|]
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|getCount
parameter_list|(
name|Table
name|t
parameter_list|,
name|byte
index|[]
name|type
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|test
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|test
operator|.
name|setAttribute
argument_list|(
literal|"count"
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
name|t
operator|.
name|get
argument_list|(
name|test
argument_list|)
decl_stmt|;
return|return
name|Bytes
operator|.
name|toInt
argument_list|(
name|res
operator|.
name|getValue
argument_list|(
name|count
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|deleteAndWait
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|Table
name|source
parameter_list|,
name|Table
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|source
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|wait
argument_list|(
name|row
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|putAndWait
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|,
name|Table
name|source
parameter_list|,
name|Table
name|target
parameter_list|)
throws|throws
name|Exception
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|fam
argument_list|,
name|row
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|source
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|wait
argument_list|(
name|row
argument_list|,
name|target
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadAndValidateHFileReplication
parameter_list|(
name|String
name|testName
parameter_list|,
name|int
name|masterNumber
parameter_list|,
name|int
index|[]
name|slaveNumbers
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|,
name|Table
index|[]
name|tables
parameter_list|,
name|byte
index|[]
index|[]
index|[]
name|hfileRanges
parameter_list|,
name|int
name|numOfRows
parameter_list|,
name|int
index|[]
name|expectedCounts
parameter_list|,
name|boolean
name|toValidate
parameter_list|)
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|util
init|=
name|utilities
index|[
name|masterNumber
index|]
decl_stmt|;
name|Path
name|dir
init|=
name|util
operator|.
name|getDataTestDirOnTestFS
argument_list|(
name|testName
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|util
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|dir
operator|=
name|dir
operator|.
name|makeQualified
argument_list|(
name|fs
operator|.
name|getUri
argument_list|()
argument_list|,
name|fs
operator|.
name|getWorkingDirectory
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|familyDir
init|=
operator|new
name|Path
argument_list|(
name|dir
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|fam
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|hfileIdx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|byte
index|[]
index|[]
name|range
range|:
name|hfileRanges
control|)
block|{
name|byte
index|[]
name|from
init|=
name|range
index|[
literal|0
index|]
decl_stmt|;
name|byte
index|[]
name|to
init|=
name|range
index|[
literal|1
index|]
decl_stmt|;
name|HFileTestUtil
operator|.
name|createHFile
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|fs
argument_list|,
operator|new
name|Path
argument_list|(
name|familyDir
argument_list|,
literal|"hfile_"
operator|+
name|hfileIdx
operator|++
argument_list|)
argument_list|,
name|fam
argument_list|,
name|row
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|numOfRows
argument_list|)
expr_stmt|;
block|}
name|Table
name|source
init|=
name|tables
index|[
name|masterNumber
index|]
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|source
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LoadIncrementalHFiles
name|loader
init|=
operator|new
name|LoadIncrementalHFiles
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|String
index|[]
name|args
init|=
block|{
name|dir
operator|.
name|toString
argument_list|()
block|,
name|tableName
operator|.
name|toString
argument_list|()
block|}
decl_stmt|;
name|loader
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
if|if
condition|(
name|toValidate
condition|)
block|{
for|for
control|(
name|int
name|slaveClusterNumber
range|:
name|slaveNumbers
control|)
block|{
name|wait
argument_list|(
name|slaveClusterNumber
argument_list|,
name|tables
index|[
name|slaveClusterNumber
index|]
argument_list|,
name|expectedCounts
index|[
name|slaveClusterNumber
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|wait
parameter_list|(
name|int
name|slaveNumber
parameter_list|,
name|Table
name|target
parameter_list|,
name|int
name|expectedCount
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for bulkloaded data replication. Current count="
operator|+
name|count
operator|+
literal|", expected count="
operator|+
name|expectedCount
argument_list|)
expr_stmt|;
block|}
name|count
operator|=
name|utilities
index|[
name|slaveNumber
index|]
operator|.
name|countRows
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|!=
name|expectedCount
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting more time for bulkloaded data replication."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|wait
parameter_list|(
name|byte
index|[]
name|row
parameter_list|,
name|Table
name|target
parameter_list|,
name|boolean
name|isDeleted
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_RETRIES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|==
name|NB_RETRIES
operator|-
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"Waited too much time for replication. Row:"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|". IsDeleteReplication:"
operator|+
name|isDeleted
argument_list|)
expr_stmt|;
block|}
name|Result
name|res
init|=
name|target
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|boolean
name|sleep
init|=
name|isDeleted
condition|?
name|res
operator|.
name|size
argument_list|()
operator|>
literal|0
else|:
name|res
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|sleep
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting for more time for replication. Row:"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|". IsDeleteReplication:"
operator|+
name|isDeleted
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|SLEEP_TIME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isDeleted
condition|)
block|{
name|assertArrayEquals
argument_list|(
name|res
operator|.
name|value
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Obtained row:"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|". IsDeleteReplication:"
operator|+
name|isDeleted
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|rollWALAndWait
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|utility
parameter_list|,
specifier|final
name|TableName
name|table
parameter_list|,
specifier|final
name|byte
index|[]
name|row
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Admin
name|admin
init|=
name|utility
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|MiniHBaseCluster
name|cluster
init|=
name|utility
operator|.
name|getMiniHBaseCluster
argument_list|()
decl_stmt|;
comment|// find the region that corresponds to the given row.
name|HRegion
name|region
init|=
literal|null
decl_stmt|;
for|for
control|(
name|HRegion
name|candidate
range|:
name|cluster
operator|.
name|getRegions
argument_list|(
name|table
argument_list|)
control|)
block|{
if|if
condition|(
name|HRegion
operator|.
name|rowIsInRange
argument_list|(
name|candidate
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|row
argument_list|)
condition|)
block|{
name|region
operator|=
name|candidate
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
literal|"Couldn't find the region for row '"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"'"
argument_list|,
name|region
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// listen for successful log rolls
specifier|final
name|WALActionsListener
name|listener
init|=
operator|new
name|WALActionsListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|postLogRoll
parameter_list|(
specifier|final
name|Path
name|oldPath
parameter_list|,
specifier|final
name|Path
name|newPath
parameter_list|)
throws|throws
name|IOException
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|region
operator|.
name|getWAL
argument_list|()
operator|.
name|registerWALActionsListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
comment|// request a roll
name|admin
operator|.
name|rollWALWriter
argument_list|(
name|cluster
operator|.
name|getServerHoldingRegion
argument_list|(
name|region
operator|.
name|getTableDescriptor
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|exception
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Interrupted while waiting for the wal of '"
operator|+
name|region
operator|+
literal|"' to roll. If later "
operator|+
literal|"replication tests fail, it's probably because we should still be waiting."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|region
operator|.
name|getWAL
argument_list|()
operator|.
name|unregisterWALActionsListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**    * Use a coprocessor to count puts and deletes. as KVs would be replicated back with the same    * timestamp there is otherwise no way to count them.    */
specifier|public
specifier|static
class|class
name|CoprocessorCounter
implements|implements
name|RegionCoprocessor
implements|,
name|RegionObserver
block|{
specifier|private
name|int
name|nCount
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|nDelete
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Optional
argument_list|<
name|RegionObserver
argument_list|>
name|getRegionObserver
parameter_list|()
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prePut
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|nCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|postDelete
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Delete
name|delete
parameter_list|,
specifier|final
name|WALEdit
name|edit
parameter_list|,
specifier|final
name|Durability
name|durability
parameter_list|)
throws|throws
name|IOException
block|{
name|nDelete
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|preGetOp
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
specifier|final
name|Get
name|get
parameter_list|,
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|get
operator|.
name|getAttribute
argument_list|(
literal|"count"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// order is important!
name|result
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|count
argument_list|,
name|count
argument_list|,
name|delete
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|nDelete
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|count
argument_list|,
name|count
argument_list|,
name|put
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|nCount
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|bypass
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

