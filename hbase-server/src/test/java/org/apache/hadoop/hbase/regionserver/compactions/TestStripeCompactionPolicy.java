begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeStoreFileManager
operator|.
name|OPEN_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|AdditionalMatchers
operator|.
name|aryEq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyInt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|isNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|only
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreConfigInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeMultiFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeStoreConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeStoreFileManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeStoreFlusher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|TestStripeCompactor
operator|.
name|StoreFileWritersCapture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ConcatenatedLists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ManualEnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStripeCompactionPolicy
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEY_A
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEY_B
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEY_C
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEY_D
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEY_E
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KeyValue
name|KV_A
init|=
operator|new
name|KeyValue
argument_list|(
name|KEY_A
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KeyValue
name|KV_B
init|=
operator|new
name|KeyValue
argument_list|(
name|KEY_B
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KeyValue
name|KV_C
init|=
operator|new
name|KeyValue
argument_list|(
name|KEY_C
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KeyValue
name|KV_D
init|=
operator|new
name|KeyValue
argument_list|(
name|KEY_D
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KeyValue
name|KV_E
init|=
operator|new
name|KeyValue
argument_list|(
name|KEY_E
argument_list|,
literal|0L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
name|defaultSplitSize
init|=
literal|18
decl_stmt|;
specifier|private
specifier|static
name|float
name|defaultSplitCount
init|=
literal|1.8F
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|int
name|defaultInitialCount
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|long
name|defaultTtl
init|=
literal|1000
operator|*
literal|1000
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNoStripesFromFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|StripeStoreConfig
operator|.
name|FLUSH_TO_L0_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|StripeInformationProvider
name|si
init|=
name|createStripesL0Only
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|input
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KV_A
block|,
name|KV_B
block|,
name|KV_C
block|,
name|KV_D
block|,
name|KV_E
block|}
decl_stmt|;
name|KeyValue
index|[]
index|[]
name|expected
init|=
operator|new
name|KeyValue
index|[]
index|[]
block|{
name|input
block|}
decl_stmt|;
name|verifyFlush
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|input
argument_list|,
name|expected
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOldStripesFromFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|StripeInformationProvider
name|si
init|=
name|createStripes
argument_list|(
literal|0
argument_list|,
name|KEY_C
argument_list|,
name|KEY_D
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|input
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KV_B
block|,
name|KV_C
block|,
name|KV_C
block|,
name|KV_D
block|,
name|KV_E
block|}
decl_stmt|;
name|KeyValue
index|[]
index|[]
name|expected
init|=
operator|new
name|KeyValue
index|[]
index|[]
block|{
operator|new
name|KeyValue
index|[]
block|{
name|KV_B
block|}
block|,
operator|new
name|KeyValue
index|[]
block|{
name|KV_C
block|,
name|KV_C
block|}
block|,
operator|new
name|KeyValue
index|[]
block|{
name|KV_D
block|,
name|KV_E
block|}
block|}
decl_stmt|;
name|verifyFlush
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|input
argument_list|,
name|expected
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|OPEN_KEY
block|,
name|KEY_C
block|,
name|KEY_D
block|,
name|OPEN_KEY
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewStripesFromFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|StripeInformationProvider
name|si
init|=
name|createStripesL0Only
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|KeyValue
index|[]
name|input
init|=
operator|new
name|KeyValue
index|[]
block|{
name|KV_B
block|,
name|KV_C
block|,
name|KV_C
block|,
name|KV_D
block|,
name|KV_E
block|}
decl_stmt|;
comment|// Starts with one stripe; unlike flush results, must have metadata
name|KeyValue
index|[]
index|[]
name|expected
init|=
operator|new
name|KeyValue
index|[]
index|[]
block|{
name|input
block|}
decl_stmt|;
name|verifyFlush
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|input
argument_list|,
name|expected
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|OPEN_KEY
block|,
name|OPEN_KEY
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleStripeCompaction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a special policy that only compacts single stripes, using standard methods.
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Test depends on this not being set to pass.  Default breaks test.  TODO: Revisit.
name|conf
operator|.
name|unset
argument_list|(
literal|"hbase.hstore.compaction.min.size"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|CompactionConfiguration
operator|.
name|HBASE_HSTORE_COMPACTION_RATIO_KEY
argument_list|,
literal|1.0F
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|StripeStoreConfig
operator|.
name|MIN_FILES_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|StripeStoreConfig
operator|.
name|MAX_FILES_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|StripeStoreConfig
operator|.
name|SIZE_TO_SPLIT_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// make sure the are no splits
name|StoreConfigInformation
name|sci
init|=
name|mock
argument_list|(
name|StoreConfigInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|StripeStoreConfig
name|ssc
init|=
operator|new
name|StripeStoreConfig
argument_list|(
name|conf
argument_list|,
name|sci
argument_list|)
decl_stmt|;
name|StripeCompactionPolicy
name|policy
init|=
operator|new
name|StripeCompactionPolicy
argument_list|(
name|conf
argument_list|,
name|sci
argument_list|,
name|ssc
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|StripeCompactionRequest
name|selectCompaction
parameter_list|(
name|StripeInformationProvider
name|si
parameter_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesCompacting
parameter_list|,
name|boolean
name|isOffpeak
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|filesCompacting
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|selectSingleStripeCompaction
argument_list|(
name|si
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|isOffpeak
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needsCompactions
parameter_list|(
name|StripeInformationProvider
name|si
parameter_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesCompacting
parameter_list|)
block|{
if|if
condition|(
operator|!
name|filesCompacting
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|needsSingleStripeCompaction
argument_list|(
name|si
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// No compaction due to min files or ratio
name|StripeInformationProvider
name|si
init|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|2L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|3L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|5L
block|,
literal|1L
block|}
argument_list|)
decl_stmt|;
name|verifyNoCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|)
expr_stmt|;
comment|// No compaction due to min files or ratio - will report needed, but not do any.
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|2L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|3L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|5L
block|,
literal|1L
block|,
literal|1L
block|}
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|policy
operator|.
name|selectCompaction
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|needsCompactions
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// One stripe has possible compaction
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|2L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|3L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|5L
block|,
literal|4L
block|,
literal|3L
block|}
argument_list|)
expr_stmt|;
name|verifySingleStripeCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Several stripes have possible compactions; choose best quality (removes most files)
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|2L
block|,
literal|2L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|2L
block|,
literal|2L
block|,
literal|1L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|2L
block|,
literal|2L
block|,
literal|1L
block|}
argument_list|)
expr_stmt|;
name|verifySingleStripeCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|5L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|2L
block|,
literal|2L
block|,
literal|1L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|2L
block|,
literal|2L
block|}
argument_list|)
expr_stmt|;
name|verifySingleStripeCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Or with smallest files, if the count is the same
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|3L
block|,
literal|3L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|1L
block|,
literal|2L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|2L
block|,
literal|2L
block|}
argument_list|)
expr_stmt|;
name|verifySingleStripeCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Verify max count is respected.
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|5L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|5L
block|,
literal|4L
block|,
literal|4L
block|,
literal|4L
block|,
literal|4L
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|sfs
init|=
name|si
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|verifyCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|sfs
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|si
operator|.
name|getStartRow
argument_list|(
literal|1
argument_list|)
argument_list|,
name|si
operator|.
name|getEndRow
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Verify ratio is applied.
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|5L
block|}
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|50L
block|,
literal|4L
block|,
literal|4L
block|,
literal|4L
block|,
literal|4L
block|}
argument_list|)
expr_stmt|;
name|sfs
operator|=
name|si
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|verifyCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|sfs
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
name|si
operator|.
name|getStartRow
argument_list|(
literal|1
argument_list|)
argument_list|,
name|si
operator|.
name|getEndRow
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithParallelCompaction
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO: currently only one compaction at a time per store is allowed. If this changes,
comment|//       the appropriate file exclusion testing would need to be done in respective tests.
name|assertNull
argument_list|(
name|createPolicy
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
operator|.
name|selectCompaction
argument_list|(
name|mock
argument_list|(
name|StripeInformationProvider
operator|.
name|class
argument_list|)
argument_list|,
name|al
argument_list|(
name|createFile
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithReferences
parameter_list|()
throws|throws
name|Exception
block|{
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
decl_stmt|;
name|StripeCompactor
name|sc
init|=
name|mock
argument_list|(
name|StripeCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
name|StoreFile
name|ref
init|=
name|createFile
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|ref
operator|.
name|isReference
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|StripeInformationProvider
name|si
init|=
name|mock
argument_list|(
name|StripeInformationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|sfs
init|=
name|al
argument_list|(
name|ref
argument_list|,
name|createFile
argument_list|()
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|si
operator|.
name|getStorefiles
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sfs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|needsCompactions
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StripeCompactionPolicy
operator|.
name|StripeCompactionRequest
name|scr
init|=
name|policy
operator|.
name|selectCompaction
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|si
operator|.
name|getStorefiles
argument_list|()
argument_list|,
name|scr
operator|.
name|getRequest
argument_list|()
operator|.
name|getFiles
argument_list|()
argument_list|)
expr_stmt|;
name|scr
operator|.
name|execute
argument_list|(
name|sc
argument_list|,
name|NoLimitCompactionThroughputController
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sc
argument_list|,
name|only
argument_list|()
argument_list|)
operator|.
name|compact
argument_list|(
name|eq
argument_list|(
name|scr
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|,
name|anyInt
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|,
name|aryEq
argument_list|(
name|OPEN_KEY
argument_list|)
argument_list|,
name|aryEq
argument_list|(
name|OPEN_KEY
argument_list|)
argument_list|,
name|aryEq
argument_list|(
name|OPEN_KEY
argument_list|)
argument_list|,
name|aryEq
argument_list|(
name|OPEN_KEY
argument_list|)
argument_list|,
name|any
argument_list|(
name|NoLimitCompactionThroughputController
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitialCountFromL0
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|StripeStoreConfig
operator|.
name|MIN_FILES_L0_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|conf
argument_list|,
name|defaultSplitSize
argument_list|,
name|defaultSplitCount
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
name|si
init|=
name|createStripesL0Only
argument_list|(
literal|3
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|verifyCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|si
operator|.
name|getStorefiles
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|2
argument_list|,
literal|12L
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|si
operator|=
name|createStripesL0Only
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// If result would be too large, split into smaller parts.
name|verifyCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|si
operator|.
name|getStorefiles
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|3
argument_list|,
literal|10L
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|policy
operator|=
name|createPolicy
argument_list|(
name|conf
argument_list|,
name|defaultSplitSize
argument_list|,
name|defaultSplitCount
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|si
operator|.
name|getStorefiles
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|6
argument_list|,
literal|5L
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistingStripesFromL0
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|StripeStoreConfig
operator|.
name|MIN_FILES_L0_KEY
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
name|si
init|=
name|createStripes
argument_list|(
literal|3
argument_list|,
name|KEY_A
argument_list|)
decl_stmt|;
name|verifyCompaction
argument_list|(
name|createPolicy
argument_list|(
name|conf
argument_list|)
argument_list|,
name|si
argument_list|,
name|si
operator|.
name|getLevel0Files
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|si
operator|.
name|getStripeBoundaries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNothingToCompactFromL0
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|StripeStoreConfig
operator|.
name|MIN_FILES_L0_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
name|si
init|=
name|createStripesL0Only
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|verifyNoCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|)
expr_stmt|;
name|si
operator|=
name|createStripes
argument_list|(
literal|3
argument_list|,
name|KEY_A
argument_list|)
expr_stmt|;
name|verifyNoCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitOffStripe
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Test depends on this not being set to pass.  Default breaks test.  TODO: Revisit.
name|conf
operator|.
name|unset
argument_list|(
literal|"hbase.hstore.compaction.min.size"
argument_list|)
expr_stmt|;
comment|// First test everything with default split count of 2, then split into more.
name|conf
operator|.
name|setInt
argument_list|(
name|StripeStoreConfig
operator|.
name|MIN_FILES_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Long
index|[]
name|toSplit
init|=
operator|new
name|Long
index|[]
block|{
name|defaultSplitSize
operator|-
literal|2
block|,
literal|1L
block|,
literal|1L
block|}
decl_stmt|;
name|Long
index|[]
name|noSplit
init|=
operator|new
name|Long
index|[]
block|{
name|defaultSplitSize
operator|-
literal|2
block|,
literal|1L
block|}
decl_stmt|;
name|long
name|splitTargetSize
init|=
call|(
name|long
call|)
argument_list|(
name|defaultSplitSize
operator|/
name|defaultSplitCount
argument_list|)
decl_stmt|;
comment|// Don't split if not eligible for compaction.
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
name|si
init|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Long
index|[]
block|{
name|defaultSplitSize
operator|-
literal|2
block|,
literal|2L
block|}
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|createPolicy
argument_list|(
name|conf
argument_list|)
operator|.
name|selectCompaction
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure everything is eligible.
name|conf
operator|.
name|setFloat
argument_list|(
name|CompactionConfiguration
operator|.
name|HBASE_HSTORE_COMPACTION_RATIO_KEY
argument_list|,
literal|500f
argument_list|)
expr_stmt|;
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
name|splitTargetSize
argument_list|)
expr_stmt|;
comment|// Add some extra stripes...
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|noSplit
argument_list|,
name|noSplit
argument_list|,
name|toSplit
argument_list|)
expr_stmt|;
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
name|splitTargetSize
argument_list|)
expr_stmt|;
comment|// In the middle.
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|noSplit
argument_list|,
name|toSplit
argument_list|,
name|noSplit
argument_list|)
expr_stmt|;
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|2
argument_list|,
name|splitTargetSize
argument_list|)
expr_stmt|;
comment|// No split-off with different config (larger split size).
comment|// However, in this case some eligible stripe will just be compacted alone.
name|StripeCompactionPolicy
name|specPolicy
init|=
name|createPolicy
argument_list|(
name|conf
argument_list|,
name|defaultSplitSize
operator|+
literal|1
argument_list|,
name|defaultSplitCount
argument_list|,
name|defaultInitialCount
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|verifySingleStripeCompaction
argument_list|(
name|specPolicy
argument_list|,
name|si
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitOffStripeOffPeak
parameter_list|()
throws|throws
name|Exception
block|{
comment|// for HBASE-11439
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Test depends on this not being set to pass.  Default breaks test.  TODO: Revisit.
name|conf
operator|.
name|unset
argument_list|(
literal|"hbase.hstore.compaction.min.size"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|StripeStoreConfig
operator|.
name|MIN_FILES_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Select the last 2 files.
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
name|si
init|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|Long
index|[]
block|{
name|defaultSplitSize
operator|-
literal|2
block|,
literal|1L
block|,
literal|1L
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|createPolicy
argument_list|(
name|conf
argument_list|)
operator|.
name|selectCompaction
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|getRequest
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure everything is eligible in offpeak.
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.hstore.compaction.ratio.offpeak"
argument_list|,
literal|500f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|createPolicy
argument_list|(
name|conf
argument_list|)
operator|.
name|selectCompaction
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|getRequest
argument_list|()
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSplitOffStripeDropDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|StripeStoreConfig
operator|.
name|MIN_FILES_KEY
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Long
index|[]
name|toSplit
init|=
operator|new
name|Long
index|[]
block|{
name|defaultSplitSize
operator|/
literal|2
block|,
name|defaultSplitSize
operator|/
literal|2
block|}
decl_stmt|;
name|Long
index|[]
name|noSplit
init|=
operator|new
name|Long
index|[]
block|{
literal|1L
block|}
decl_stmt|;
name|long
name|splitTargetSize
init|=
call|(
name|long
call|)
argument_list|(
name|defaultSplitSize
operator|/
name|defaultSplitCount
argument_list|)
decl_stmt|;
comment|// Verify the deletes can be dropped if there are no L0 files.
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
name|si
init|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|noSplit
argument_list|,
name|toSplit
argument_list|)
decl_stmt|;
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|splitTargetSize
argument_list|)
expr_stmt|;
comment|// But cannot be dropped if there are.
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|noSplit
argument_list|,
name|toSplit
argument_list|)
expr_stmt|;
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|splitTargetSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testMergeExpiredFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|ManualEnvironmentEdge
name|edge
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|defaultTtl
operator|+
literal|2
decl_stmt|;
name|edge
operator|.
name|setValue
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
try|try
block|{
name|StoreFile
name|expiredFile
init|=
name|createFile
argument_list|()
decl_stmt|,
name|notExpiredFile
init|=
name|createFile
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|expiredFile
operator|.
name|getReader
argument_list|()
operator|.
name|getMaxTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|now
operator|-
name|defaultTtl
operator|-
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|notExpiredFile
operator|.
name|getReader
argument_list|()
operator|.
name|getMaxTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|now
operator|-
name|defaultTtl
operator|+
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|expired
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|expiredFile
argument_list|,
name|expiredFile
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|notExpired
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|notExpiredFile
argument_list|,
name|notExpiredFile
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|mixed
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|expiredFile
argument_list|,
name|notExpiredFile
argument_list|)
decl_stmt|;
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|defaultSplitSize
argument_list|,
name|defaultSplitCount
argument_list|,
name|defaultInitialCount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Merge expired if there are eligible stripes.
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
name|si
init|=
name|createStripesWithFiles
argument_list|(
name|expired
argument_list|,
name|expired
argument_list|,
name|expired
argument_list|)
decl_stmt|;
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Don't merge if nothing expired.
name|si
operator|=
name|createStripesWithFiles
argument_list|(
name|notExpired
argument_list|,
name|notExpired
argument_list|,
name|notExpired
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|policy
operator|.
name|selectCompaction
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// Merge one expired stripe with next.
name|si
operator|=
name|createStripesWithFiles
argument_list|(
name|notExpired
argument_list|,
name|expired
argument_list|,
name|notExpired
argument_list|)
expr_stmt|;
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Merge the biggest run out of multiple options.
comment|// Merge one expired stripe with next.
name|si
operator|=
name|createStripesWithFiles
argument_list|(
name|notExpired
argument_list|,
name|expired
argument_list|,
name|notExpired
argument_list|,
name|expired
argument_list|,
name|expired
argument_list|,
name|notExpired
argument_list|)
expr_stmt|;
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Stripe with a subset of expired files is not merged.
name|si
operator|=
name|createStripesWithFiles
argument_list|(
name|expired
argument_list|,
name|expired
argument_list|,
name|notExpired
argument_list|,
name|expired
argument_list|,
name|mixed
argument_list|)
expr_stmt|;
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testMergeExpiredStripes
parameter_list|()
throws|throws
name|Exception
block|{
comment|// HBASE-11397
name|ManualEnvironmentEdge
name|edge
init|=
operator|new
name|ManualEnvironmentEdge
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|defaultTtl
operator|+
literal|2
decl_stmt|;
name|edge
operator|.
name|setValue
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
try|try
block|{
name|StoreFile
name|expiredFile
init|=
name|createFile
argument_list|()
decl_stmt|,
name|notExpiredFile
init|=
name|createFile
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|expiredFile
operator|.
name|getReader
argument_list|()
operator|.
name|getMaxTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|now
operator|-
name|defaultTtl
operator|-
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|notExpiredFile
operator|.
name|getReader
argument_list|()
operator|.
name|getMaxTimestamp
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|now
operator|-
name|defaultTtl
operator|+
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|expired
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|expiredFile
argument_list|,
name|expiredFile
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|notExpired
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|notExpiredFile
argument_list|,
name|notExpiredFile
argument_list|)
decl_stmt|;
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|,
name|defaultSplitSize
argument_list|,
name|defaultSplitCount
argument_list|,
name|defaultInitialCount
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Merge all three expired stripes into one.
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
name|si
init|=
name|createStripesWithFiles
argument_list|(
name|expired
argument_list|,
name|expired
argument_list|,
name|expired
argument_list|)
decl_stmt|;
name|verifyMergeCompatcion
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Merge two adjacent expired stripes into one.
name|si
operator|=
name|createStripesWithFiles
argument_list|(
name|notExpired
argument_list|,
name|expired
argument_list|,
name|notExpired
argument_list|,
name|expired
argument_list|,
name|expired
argument_list|,
name|notExpired
argument_list|)
expr_stmt|;
name|verifyMergeCompatcion
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|StripeCompactionPolicy
operator|.
name|StripeInformationProvider
name|createStripesWithFiles
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
modifier|...
name|stripeFiles
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createStripesWithFiles
argument_list|(
name|createBoundaries
argument_list|(
name|stripeFiles
operator|.
name|length
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|stripeFiles
argument_list|)
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleStripeDropDeletes
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|// Test depends on this not being set to pass.  Default breaks test.  TODO: Revisit.
name|conf
operator|.
name|unset
argument_list|(
literal|"hbase.hstore.compaction.min.size"
argument_list|)
expr_stmt|;
name|StripeCompactionPolicy
name|policy
init|=
name|createPolicy
argument_list|(
name|conf
argument_list|)
decl_stmt|;
comment|// Verify the deletes can be dropped if there are no L0 files.
name|Long
index|[]
index|[]
name|stripes
init|=
operator|new
name|Long
index|[]
index|[]
block|{
operator|new
name|Long
index|[]
block|{
literal|3L
block|,
literal|2L
block|,
literal|2L
block|,
literal|2L
block|}
block|,
operator|new
name|Long
index|[]
block|{
literal|6L
block|}
block|}
decl_stmt|;
name|StripeInformationProvider
name|si
init|=
name|createStripesWithSizes
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|stripes
argument_list|)
decl_stmt|;
name|verifySingleStripeCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// But cannot be dropped if there are.
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
name|stripes
argument_list|)
expr_stmt|;
name|verifySingleStripeCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Unless there are enough to cause L0 compaction.
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|,
name|stripes
argument_list|)
expr_stmt|;
name|ConcatenatedLists
argument_list|<
name|StoreFile
argument_list|>
name|sfs
init|=
operator|new
name|ConcatenatedLists
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
name|sfs
operator|.
name|addSublist
argument_list|(
name|si
operator|.
name|getLevel0Files
argument_list|()
argument_list|)
expr_stmt|;
name|sfs
operator|.
name|addSublist
argument_list|(
name|si
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|verifyCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|sfs
argument_list|,
name|si
operator|.
name|getStartRow
argument_list|(
literal|0
argument_list|)
argument_list|,
name|si
operator|.
name|getEndRow
argument_list|(
literal|0
argument_list|)
argument_list|,
name|si
operator|.
name|getStripeBoundaries
argument_list|()
argument_list|)
expr_stmt|;
comment|// If we cannot actually compact all files in some stripe, L0 is chosen.
name|si
operator|=
name|createStripesWithSizes
argument_list|(
literal|6
argument_list|,
literal|2
argument_list|,
operator|new
name|Long
index|[]
index|[]
block|{
operator|new
name|Long
index|[]
block|{
literal|10L
block|,
literal|1L
block|,
literal|1L
block|,
literal|1L
block|,
literal|1L
block|}
block|,
operator|new
name|Long
index|[]
block|{
literal|12L
block|}
block|}
argument_list|)
expr_stmt|;
name|verifyCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|si
operator|.
name|getLevel0Files
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|si
operator|.
name|getStripeBoundaries
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/********* HELPER METHODS ************/
specifier|private
specifier|static
name|StripeCompactionPolicy
name|createPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createPolicy
argument_list|(
name|conf
argument_list|,
name|defaultSplitSize
argument_list|,
name|defaultSplitCount
argument_list|,
name|defaultInitialCount
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|StripeCompactionPolicy
name|createPolicy
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|long
name|splitSize
parameter_list|,
name|float
name|splitCount
parameter_list|,
name|int
name|initialCount
parameter_list|,
name|boolean
name|hasTtl
parameter_list|)
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|StripeStoreConfig
operator|.
name|SIZE_TO_SPLIT_KEY
argument_list|,
name|splitSize
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
name|StripeStoreConfig
operator|.
name|SPLIT_PARTS_KEY
argument_list|,
name|splitCount
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|StripeStoreConfig
operator|.
name|INITIAL_STRIPE_COUNT_KEY
argument_list|,
name|initialCount
argument_list|)
expr_stmt|;
name|StoreConfigInformation
name|sci
init|=
name|mock
argument_list|(
name|StoreConfigInformation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sci
operator|.
name|getStoreFileTtl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hasTtl
condition|?
name|defaultTtl
else|:
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|StripeStoreConfig
name|ssc
init|=
operator|new
name|StripeStoreConfig
argument_list|(
name|conf
argument_list|,
name|sci
argument_list|)
decl_stmt|;
return|return
operator|new
name|StripeCompactionPolicy
argument_list|(
name|conf
argument_list|,
name|sci
argument_list|,
name|ssc
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
name|al
parameter_list|(
name|StoreFile
modifier|...
name|sfs
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sfs
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|verifyMergeCompatcion
parameter_list|(
name|StripeCompactionPolicy
name|policy
parameter_list|,
name|StripeInformationProvider
name|si
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
throws|throws
name|Exception
block|{
name|StripeCompactionPolicy
operator|.
name|StripeCompactionRequest
name|scr
init|=
name|policy
operator|.
name|selectCompaction
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|sfs
init|=
name|getAllFiles
argument_list|(
name|si
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|verifyCollectionsEqual
argument_list|(
name|sfs
argument_list|,
name|scr
operator|.
name|getRequest
argument_list|()
operator|.
name|getFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// All the Stripes are expired, so the Compactor will not create any Writers. We need to create
comment|// an empty file to preserve metadata
name|StripeCompactor
name|sc
init|=
name|createCompactor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|scr
operator|.
name|execute
argument_list|(
name|sc
argument_list|,
name|NoLimitCompactionThroughputController
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify the compaction that includes several entire stripes.    * @param policy Policy to test.    * @param si Stripe information pre-set with stripes to test.    * @param from Starting stripe.    * @param to Ending stripe (inclusive).    * @param dropDeletes Whether to drop deletes from compaction range.    * @param count Expected # of resulting stripes, null if not checked.    * @param size Expected target stripe size, null if not checked.    */
specifier|private
name|void
name|verifyWholeStripesCompaction
parameter_list|(
name|StripeCompactionPolicy
name|policy
parameter_list|,
name|StripeInformationProvider
name|si
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|Boolean
name|dropDeletes
parameter_list|,
name|Integer
name|count
parameter_list|,
name|Long
name|size
parameter_list|,
name|boolean
name|needsCompaction
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|getAllFiles
argument_list|(
name|si
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
argument_list|,
name|dropDeletes
argument_list|,
name|count
argument_list|,
name|size
argument_list|,
name|si
operator|.
name|getStartRow
argument_list|(
name|from
argument_list|)
argument_list|,
name|si
operator|.
name|getEndRow
argument_list|(
name|to
argument_list|)
argument_list|,
name|needsCompaction
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyWholeStripesCompaction
parameter_list|(
name|StripeCompactionPolicy
name|policy
parameter_list|,
name|StripeInformationProvider
name|si
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|Boolean
name|dropDeletes
parameter_list|,
name|Integer
name|count
parameter_list|,
name|Long
name|size
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|from
argument_list|,
name|to
argument_list|,
name|dropDeletes
argument_list|,
name|count
argument_list|,
name|size
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifySingleStripeCompaction
parameter_list|(
name|StripeCompactionPolicy
name|policy
parameter_list|,
name|StripeInformationProvider
name|si
parameter_list|,
name|int
name|index
parameter_list|,
name|Boolean
name|dropDeletes
parameter_list|)
throws|throws
name|IOException
block|{
name|verifyWholeStripesCompaction
argument_list|(
name|policy
argument_list|,
name|si
argument_list|,
name|index
argument_list|,
name|index
argument_list|,
name|dropDeletes
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify no compaction is needed or selected.    * @param policy Policy to test.    * @param si Stripe information pre-set with stripes to test.    */
specifier|private
name|void
name|verifyNoCompaction
parameter_list|(
name|StripeCompactionPolicy
name|policy
parameter_list|,
name|StripeInformationProvider
name|si
parameter_list|)
throws|throws
name|IOException
block|{
name|assertNull
argument_list|(
name|policy
operator|.
name|selectCompaction
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|policy
operator|.
name|needsCompactions
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify arbitrary compaction.    * @param policy Policy to test.    * @param si Stripe information pre-set with stripes to test.    * @param sfs Files that should be compacted.    * @param dropDeletesFrom Row from which to drop deletes.    * @param dropDeletesTo Row to which to drop deletes.    * @param boundaries Expected target stripe boundaries.    */
specifier|private
name|void
name|verifyCompaction
parameter_list|(
name|StripeCompactionPolicy
name|policy
parameter_list|,
name|StripeInformationProvider
name|si
parameter_list|,
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|sfs
parameter_list|,
name|byte
index|[]
name|dropDeletesFrom
parameter_list|,
name|byte
index|[]
name|dropDeletesTo
parameter_list|,
specifier|final
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|boundaries
parameter_list|)
throws|throws
name|Exception
block|{
name|StripeCompactor
name|sc
init|=
name|mock
argument_list|(
name|StripeCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|.
name|needsCompactions
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StripeCompactionPolicy
operator|.
name|StripeCompactionRequest
name|scr
init|=
name|policy
operator|.
name|selectCompaction
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|verifyCollectionsEqual
argument_list|(
name|sfs
argument_list|,
name|scr
operator|.
name|getRequest
argument_list|()
operator|.
name|getFiles
argument_list|()
argument_list|)
expr_stmt|;
name|scr
operator|.
name|execute
argument_list|(
name|sc
argument_list|,
name|NoLimitCompactionThroughputController
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sc
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|compact
argument_list|(
name|eq
argument_list|(
name|scr
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|,
name|argThat
argument_list|(
operator|new
name|ArgumentMatcher
argument_list|<
name|List
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|argument
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|other
init|=
operator|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
operator|)
name|argument
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|!=
name|boundaries
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|other
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|other
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|boundaries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
argument_list|)
argument_list|,
name|dropDeletesFrom
operator|==
literal|null
condition|?
name|isNull
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
else|:
name|aryEq
argument_list|(
name|dropDeletesFrom
argument_list|)
argument_list|,
name|dropDeletesTo
operator|==
literal|null
condition|?
name|isNull
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
else|:
name|aryEq
argument_list|(
name|dropDeletesTo
argument_list|)
argument_list|,
name|any
argument_list|(
name|NoLimitCompactionThroughputController
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify arbitrary compaction.    * @param policy Policy to test.    * @param si Stripe information pre-set with stripes to test.    * @param sfs Files that should be compacted.    * @param dropDeletes Whether to drop deletes from compaction range.    * @param count Expected # of resulting stripes, null if not checked.    * @param size Expected target stripe size, null if not checked.    * @param start Left boundary of the compaction.    * @param righr Right boundary of the compaction.    */
specifier|private
name|void
name|verifyCompaction
parameter_list|(
name|StripeCompactionPolicy
name|policy
parameter_list|,
name|StripeInformationProvider
name|si
parameter_list|,
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|sfs
parameter_list|,
name|Boolean
name|dropDeletes
parameter_list|,
name|Integer
name|count
parameter_list|,
name|Long
name|size
parameter_list|,
name|byte
index|[]
name|start
parameter_list|,
name|byte
index|[]
name|end
parameter_list|,
name|boolean
name|needsCompaction
parameter_list|)
throws|throws
name|IOException
block|{
name|StripeCompactor
name|sc
init|=
name|mock
argument_list|(
name|StripeCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|needsCompaction
operator|||
name|policy
operator|.
name|needsCompactions
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|StripeCompactionPolicy
operator|.
name|StripeCompactionRequest
name|scr
init|=
name|policy
operator|.
name|selectCompaction
argument_list|(
name|si
argument_list|,
name|al
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|verifyCollectionsEqual
argument_list|(
name|sfs
argument_list|,
name|scr
operator|.
name|getRequest
argument_list|()
operator|.
name|getFiles
argument_list|()
argument_list|)
expr_stmt|;
name|scr
operator|.
name|execute
argument_list|(
name|sc
argument_list|,
name|NoLimitCompactionThroughputController
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|sc
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|compact
argument_list|(
name|eq
argument_list|(
name|scr
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|,
name|count
operator|==
literal|null
condition|?
name|anyInt
argument_list|()
else|:
name|eq
argument_list|(
name|count
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|,
name|size
operator|==
literal|null
condition|?
name|anyLong
argument_list|()
else|:
name|eq
argument_list|(
name|size
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|,
name|aryEq
argument_list|(
name|start
argument_list|)
argument_list|,
name|aryEq
argument_list|(
name|end
argument_list|)
argument_list|,
name|dropDeletesMatcher
argument_list|(
name|dropDeletes
argument_list|,
name|start
argument_list|)
argument_list|,
name|dropDeletesMatcher
argument_list|(
name|dropDeletes
argument_list|,
name|end
argument_list|)
argument_list|,
name|any
argument_list|(
name|NoLimitCompactionThroughputController
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** Verify arbitrary flush. */
specifier|protected
name|void
name|verifyFlush
parameter_list|(
name|StripeCompactionPolicy
name|policy
parameter_list|,
name|StripeInformationProvider
name|si
parameter_list|,
name|KeyValue
index|[]
name|input
parameter_list|,
name|KeyValue
index|[]
index|[]
name|expected
parameter_list|,
name|byte
index|[]
index|[]
name|boundaries
parameter_list|)
throws|throws
name|IOException
block|{
name|StoreFileWritersCapture
name|writers
init|=
operator|new
name|StoreFileWritersCapture
argument_list|()
decl_stmt|;
name|StripeStoreFlusher
operator|.
name|StripeFlushRequest
name|req
init|=
name|policy
operator|.
name|selectFlush
argument_list|(
name|si
argument_list|,
name|input
operator|.
name|length
argument_list|)
decl_stmt|;
name|StripeMultiFileWriter
name|mw
init|=
name|req
operator|.
name|createWriter
argument_list|()
decl_stmt|;
name|mw
operator|.
name|init
argument_list|(
literal|null
argument_list|,
name|writers
argument_list|,
operator|new
name|KeyValue
operator|.
name|KVComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValue
name|kv
range|:
name|input
control|)
block|{
name|mw
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasMetadata
init|=
name|boundaries
operator|!=
literal|null
decl_stmt|;
name|mw
operator|.
name|commitWriters
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writers
operator|.
name|verifyKvs
argument_list|(
name|expected
argument_list|,
literal|true
argument_list|,
name|hasMetadata
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMetadata
condition|)
block|{
name|writers
operator|.
name|verifyBoundaries
argument_list|(
name|boundaries
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|byte
index|[]
name|dropDeletesMatcher
parameter_list|(
name|Boolean
name|dropDeletes
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
return|return
name|dropDeletes
operator|==
literal|null
condition|?
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
else|:
operator|(
name|dropDeletes
operator|.
name|booleanValue
argument_list|()
condition|?
name|aryEq
argument_list|(
name|value
argument_list|)
else|:
name|isNull
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
operator|)
return|;
block|}
specifier|private
name|void
name|verifyCollectionsEqual
parameter_list|(
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|sfs
parameter_list|,
name|Collection
argument_list|<
name|StoreFile
argument_list|>
name|scr
parameter_list|)
block|{
comment|// Dumb.
name|assertEquals
argument_list|(
name|sfs
operator|.
name|size
argument_list|()
argument_list|,
name|scr
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scr
operator|.
name|containsAll
argument_list|(
name|sfs
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|StoreFile
argument_list|>
name|getAllFiles
parameter_list|(
name|StripeInformationProvider
name|si
parameter_list|,
name|int
name|fromStripe
parameter_list|,
name|int
name|toStripe
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|fromStripe
init|;
name|i
operator|<=
name|toStripe
condition|;
operator|++
name|i
control|)
block|{
name|expected
operator|.
name|addAll
argument_list|(
name|si
operator|.
name|getStripes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expected
return|;
block|}
comment|/**    * @param l0Count Number of L0 files.    * @param boundaries Target boundaries.    * @return Mock stripes.    */
specifier|private
specifier|static
name|StripeInformationProvider
name|createStripes
parameter_list|(
name|int
name|l0Count
parameter_list|,
name|byte
index|[]
modifier|...
name|boundaries
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|l0Sizes
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l0Count
condition|;
operator|++
name|i
control|)
block|{
name|l0Sizes
operator|.
name|add
argument_list|(
literal|5L
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|sizes
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|boundaries
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|sizes
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|createStripes
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|boundaries
argument_list|)
argument_list|,
name|sizes
argument_list|,
name|l0Sizes
argument_list|)
return|;
block|}
comment|/**    * @param l0Count Number of L0 files.    * @param l0Size Size of each file.    * @return Mock stripes.    */
specifier|private
specifier|static
name|StripeInformationProvider
name|createStripesL0Only
parameter_list|(
name|int
name|l0Count
parameter_list|,
name|long
name|l0Size
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|l0Sizes
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l0Count
condition|;
operator|++
name|i
control|)
block|{
name|l0Sizes
operator|.
name|add
argument_list|(
name|l0Size
argument_list|)
expr_stmt|;
block|}
return|return
name|createStripes
argument_list|(
literal|null
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
argument_list|,
name|l0Sizes
argument_list|)
return|;
block|}
comment|/**    * @param l0Count Number of L0 files.    * @param l0Size Size of each file.    * @param sizes Sizes of the files; each sub-array representing a stripe.    * @return Mock stripes.    */
specifier|private
specifier|static
name|StripeInformationProvider
name|createStripesWithSizes
parameter_list|(
name|int
name|l0Count
parameter_list|,
name|long
name|l0Size
parameter_list|,
name|Long
index|[]
modifier|...
name|sizes
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|sizeList
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
index|[]
name|size
range|:
name|sizes
control|)
block|{
name|sizeList
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|createStripesWithSizes
argument_list|(
name|l0Count
argument_list|,
name|l0Size
argument_list|,
name|sizeList
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|StripeInformationProvider
name|createStripesWithSizes
parameter_list|(
name|int
name|l0Count
parameter_list|,
name|long
name|l0Size
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|sizes
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|boundaries
init|=
name|createBoundaries
argument_list|(
name|sizes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|l0Sizes
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l0Count
condition|;
operator|++
name|i
control|)
block|{
name|l0Sizes
operator|.
name|add
argument_list|(
name|l0Size
argument_list|)
expr_stmt|;
block|}
return|return
name|createStripes
argument_list|(
name|boundaries
argument_list|,
name|sizes
argument_list|,
name|l0Sizes
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|createBoundaries
parameter_list|(
name|int
name|stripeCount
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|keys
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|KEY_A
block|,
name|KEY_B
block|,
name|KEY_C
block|,
name|KEY_D
block|,
name|KEY_E
block|}
decl_stmt|;
assert|assert
name|stripeCount
operator|<=
name|keys
operator|.
name|length
operator|+
literal|1
assert|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|boundaries
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|boundaries
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|keys
argument_list|)
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|stripeCount
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|boundaries
return|;
block|}
specifier|private
specifier|static
name|StripeInformationProvider
name|createStripes
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|boundaries
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
name|stripeSizes
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|l0Sizes
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|stripeFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
argument_list|(
name|stripeSizes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Long
argument_list|>
name|sizes
range|:
name|stripeSizes
control|)
block|{
name|List
argument_list|<
name|StoreFile
argument_list|>
name|sfs
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|size
range|:
name|sizes
control|)
block|{
name|sfs
operator|.
name|add
argument_list|(
name|createFile
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|stripeFiles
operator|.
name|add
argument_list|(
name|sfs
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|StoreFile
argument_list|>
name|l0Files
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|size
range|:
name|l0Sizes
control|)
block|{
name|l0Files
operator|.
name|add
argument_list|(
name|createFile
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|createStripesWithFiles
argument_list|(
name|boundaries
argument_list|,
name|stripeFiles
argument_list|,
name|l0Files
argument_list|)
return|;
block|}
comment|/**    * This method actually does all the work.    */
specifier|private
specifier|static
name|StripeInformationProvider
name|createStripesWithFiles
parameter_list|(
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|boundaries
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|stripeFiles
parameter_list|,
name|List
argument_list|<
name|StoreFile
argument_list|>
name|l0Files
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|ImmutableList
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
name|stripes
init|=
operator|new
name|ArrayList
argument_list|<
name|ImmutableList
argument_list|<
name|StoreFile
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|boundariesList
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|StripeInformationProvider
name|si
init|=
name|mock
argument_list|(
name|StripeInformationProvider
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stripeFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
assert|assert
name|stripeFiles
operator|.
name|size
argument_list|()
operator|==
operator|(
name|boundaries
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
assert|;
name|boundariesList
operator|.
name|add
argument_list|(
name|OPEN_KEY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|boundaries
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|startKey
init|=
operator|(
operator|(
name|i
operator|==
literal|0
operator|)
condition|?
name|OPEN_KEY
else|:
name|boundaries
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
operator|(
operator|(
name|i
operator|==
name|boundaries
operator|.
name|size
argument_list|()
operator|)
condition|?
name|OPEN_KEY
else|:
name|boundaries
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
name|boundariesList
operator|.
name|add
argument_list|(
name|endKey
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFile
name|sf
range|:
name|stripeFiles
operator|.
name|get
argument_list|(
name|i
argument_list|)
control|)
block|{
name|setFileStripe
argument_list|(
name|sf
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
block|}
name|stripes
operator|.
name|add
argument_list|(
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|stripeFiles
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|si
operator|.
name|getStartRow
argument_list|(
name|eq
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|si
operator|.
name|getEndRow
argument_list|(
name|eq
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|endKey
argument_list|)
expr_stmt|;
block|}
block|}
name|ConcatenatedLists
argument_list|<
name|StoreFile
argument_list|>
name|sfs
init|=
operator|new
name|ConcatenatedLists
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
name|sfs
operator|.
name|addAllSublists
argument_list|(
name|stripes
argument_list|)
expr_stmt|;
name|sfs
operator|.
name|addSublist
argument_list|(
name|l0Files
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|si
operator|.
name|getStorefiles
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|si
operator|.
name|getStripes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stripes
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|si
operator|.
name|getStripeBoundaries
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|boundariesList
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|si
operator|.
name|getStripeCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|stripes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|si
operator|.
name|getLevel0Files
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|l0Files
argument_list|)
expr_stmt|;
return|return
name|si
return|;
block|}
specifier|private
specifier|static
name|StoreFile
name|createFile
parameter_list|(
name|long
name|size
parameter_list|)
throws|throws
name|Exception
block|{
name|StoreFile
name|sf
init|=
name|mock
argument_list|(
name|StoreFile
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"moo"
argument_list|)
argument_list|)
expr_stmt|;
name|StoreFile
operator|.
name|Reader
name|r
init|=
name|mock
argument_list|(
name|StoreFile
operator|.
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getEntries
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|r
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getBloomFilterType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getHFileReader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|HFile
operator|.
name|Reader
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getStoreFileScanner
argument_list|(
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|StoreFileScanner
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|getReader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|createReader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|sf
return|;
block|}
specifier|private
specifier|static
name|StoreFile
name|createFile
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|createFile
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|setFileStripe
parameter_list|(
name|StoreFile
name|sf
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|)
block|{
name|when
argument_list|(
name|sf
operator|.
name|getMetadataValue
argument_list|(
name|StripeStoreFileManager
operator|.
name|STRIPE_START_KEY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|startKey
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|getMetadataValue
argument_list|(
name|StripeStoreFileManager
operator|.
name|STRIPE_END_KEY
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|endKey
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|StripeCompactor
name|createCompactor
parameter_list|()
throws|throws
name|Exception
block|{
name|HColumnDescriptor
name|col
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
name|StoreFileWritersCapture
name|writers
init|=
operator|new
name|StoreFileWritersCapture
argument_list|()
decl_stmt|;
name|Store
name|store
init|=
name|mock
argument_list|(
name|Store
operator|.
name|class
argument_list|)
decl_stmt|;
name|HRegionInfo
name|info
init|=
name|mock
argument_list|(
name|HRegionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|info
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"testRegion"
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|createWriterInTmp
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|writers
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|()
decl_stmt|;
return|return
operator|new
name|StripeCompactor
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|InternalScanner
name|createScanner
parameter_list|(
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|long
name|earliestPutTs
parameter_list|,
name|byte
index|[]
name|dropDeletesFromRow
parameter_list|,
name|byte
index|[]
name|dropDeletesToRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scanner
return|;
block|}
annotation|@
name|Override
specifier|protected
name|InternalScanner
name|createScanner
parameter_list|(
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|long
name|earliestPutTs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scanner
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
class|class
name|Scanner
implements|implements
name|InternalScanner
block|{
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
name|kvs
decl_stmt|;
specifier|public
name|Scanner
parameter_list|(
name|KeyValue
modifier|...
name|kvs
parameter_list|)
block|{
name|this
operator|.
name|kvs
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|kvs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|kvs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|results
operator|.
name|add
argument_list|(
name|kvs
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|!
name|kvs
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|next
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{     }
block|}
block|}
end_class

end_unit

