begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MiscTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|MiniZooKeeperCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hdfs
operator|.
name|MiniDFSCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|http
operator|.
name|ssl
operator|.
name|KeyStoreTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Test our testing utility class  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MiscTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHBaseTestingUtility
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHBaseTestingUtility
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * Basic sanity test that spins up multiple HDFS and HBase clusters that share    * the same ZK ensemble. We then create the same table in both and make sure    * that what we insert in one place doesn't end up in the other.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testMultiClusters
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create three clusters
comment|// Cluster 1.
name|HBaseTestingUtility
name|htu1
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// Set a different zk path for each cluster
name|htu1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/1"
argument_list|)
expr_stmt|;
name|htu1
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
comment|// Cluster 2
name|HBaseTestingUtility
name|htu2
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|htu2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/2"
argument_list|)
expr_stmt|;
name|htu2
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|htu1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|htu2
operator|.
name|setZkCluster
argument_list|(
name|htu1
operator|.
name|getZkCluster
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cluster 3; seed it with the conf from htu1 so we pickup the 'right'
comment|// zk cluster config; it is set back into the config. as part of the
comment|// start of minizkcluster.
name|HBaseTestingUtility
name|htu3
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|htu3
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_ZNODE_PARENT
argument_list|,
literal|"/3"
argument_list|)
expr_stmt|;
name|htu3
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
name|htu1
operator|.
name|getConfiguration
argument_list|()
operator|.
name|get
argument_list|(
name|HConstants
operator|.
name|ZOOKEEPER_CLIENT_PORT
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
name|htu3
operator|.
name|setZkCluster
argument_list|(
name|htu1
operator|.
name|getZkCluster
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|htu1
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|htu2
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|htu3
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAM_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|QUAL_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Table
name|table1
init|=
name|htu1
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAM_NAME
argument_list|)
decl_stmt|;
name|Table
name|table2
init|=
name|htu2
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAM_NAME
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|FAM_NAME
argument_list|,
name|QUAL_NAME
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table1
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAM_NAME
argument_list|,
name|QUAL_NAME
argument_list|)
expr_stmt|;
name|Result
name|res
init|=
name|table1
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|=
name|table2
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|res
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|table1
operator|.
name|close
argument_list|()
expr_stmt|;
name|table2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|htu3
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|htu2
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|htu1
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiniCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|hbt
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|hbt
operator|.
name|startMiniCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hbt
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiniClusterBindToWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|hbt
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|hbt
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.regionserver.ipc.address"
argument_list|,
literal|"0.0.0.0"
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|hbt
operator|.
name|startMiniCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hbt
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiniClusterWithSSLOn
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|BASEDIR
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"test.build.dir"
argument_list|,
literal|"target/test-dir"
argument_list|)
operator|+
literal|"/"
operator|+
name|TestHBaseTestingUtility
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|String
name|sslConfDir
init|=
name|KeyStoreTestUtil
operator|.
name|getClasspathDir
argument_list|(
name|TestHBaseTestingUtility
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|keystoresDir
init|=
operator|new
name|File
argument_list|(
name|BASEDIR
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|HBaseTestingUtility
name|hbt
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|File
name|base
init|=
operator|new
name|File
argument_list|(
name|BASEDIR
argument_list|)
decl_stmt|;
name|FileUtil
operator|.
name|fullyDelete
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|base
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|KeyStoreTestUtil
operator|.
name|setupSSLConfig
argument_list|(
name|keystoresDir
argument_list|,
name|sslConfDir
argument_list|,
name|hbt
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hbt
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
literal|"hbase.ssl.enabled"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|hbt
operator|.
name|getConfiguration
argument_list|()
operator|.
name|addResource
argument_list|(
literal|"ssl-server.xml"
argument_list|)
expr_stmt|;
name|hbt
operator|.
name|getConfiguration
argument_list|()
operator|.
name|addResource
argument_list|(
literal|"ssl-client.xml"
argument_list|)
expr_stmt|;
name|MiniHBaseCluster
name|cluster
init|=
name|hbt
operator|.
name|startMiniCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hbt
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    *  Test that we can start and stop multiple time a cluster    *   with the same HBaseTestingUtility.    */
annotation|@
name|Test
specifier|public
name|void
name|testMultipleStartStop
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|htu1
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|Path
name|foo
init|=
operator|new
name|Path
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|htu1
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|htu1
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|htu1
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|htu1
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|htu1
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|htu1
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|htu1
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|create
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|htu1
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|htu1
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiniZooKeeperWithOneServer
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|hbt
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|MiniZooKeeperCluster
name|cluster1
init|=
name|hbt
operator|.
name|startMiniZKCluster
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster1
operator|.
name|getBackupZooKeeperServerNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|cluster1
operator|.
name|killCurrentActiveZooKeeperServer
argument_list|()
operator|==
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hbt
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiniZooKeeperWithMultipleServers
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|hbt
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// set up zookeeper cluster with 5 zk servers
name|MiniZooKeeperCluster
name|cluster2
init|=
name|hbt
operator|.
name|startMiniZKCluster
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|int
name|defaultClientPort
init|=
literal|21818
decl_stmt|;
name|cluster2
operator|.
name|setDefaultClientPort
argument_list|(
name|defaultClientPort
argument_list|)
expr_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|cluster2
operator|.
name|getBackupZooKeeperServerNum
argument_list|()
argument_list|)
expr_stmt|;
comment|// killing the current active zk server
name|int
name|currentActivePort
init|=
name|cluster2
operator|.
name|killCurrentActiveZooKeeperServer
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|currentActivePort
operator|>=
name|defaultClientPort
argument_list|)
expr_stmt|;
comment|// Check if the client port is returning a proper value
name|assertTrue
argument_list|(
name|cluster2
operator|.
name|getClientPort
argument_list|()
operator|==
name|currentActivePort
argument_list|)
expr_stmt|;
comment|// kill another active zk server
name|currentActivePort
operator|=
name|cluster2
operator|.
name|killCurrentActiveZooKeeperServer
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentActivePort
operator|>=
name|defaultClientPort
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster2
operator|.
name|getClientPort
argument_list|()
operator|==
name|currentActivePort
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cluster2
operator|.
name|getBackupZooKeeperServerNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cluster2
operator|.
name|getZooKeeperServerNum
argument_list|()
argument_list|)
expr_stmt|;
comment|// killing the backup zk servers
name|cluster2
operator|.
name|killOneBackupZooKeeperServer
argument_list|()
expr_stmt|;
name|cluster2
operator|.
name|killOneBackupZooKeeperServer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster2
operator|.
name|getBackupZooKeeperServerNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster2
operator|.
name|getZooKeeperServerNum
argument_list|()
argument_list|)
expr_stmt|;
comment|// killing the last zk server
name|currentActivePort
operator|=
name|cluster2
operator|.
name|killCurrentActiveZooKeeperServer
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|currentActivePort
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster2
operator|.
name|getClientPort
argument_list|()
operator|==
name|currentActivePort
argument_list|)
expr_stmt|;
comment|// this should do nothing.
name|cluster2
operator|.
name|killOneBackupZooKeeperServer
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|cluster2
operator|.
name|getBackupZooKeeperServerNum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster2
operator|.
name|getZooKeeperServerNum
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hbt
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiniZooKeeperWithMultipleClientPorts
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|defaultClientPort
init|=
literal|8888
decl_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|HBaseTestingUtility
name|hbt
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// Test 1 - set up zookeeper cluster with same number of ZK servers and specified client ports
name|int
index|[]
name|clientPortList1
init|=
block|{
literal|1111
block|,
literal|1112
block|,
literal|1113
block|}
decl_stmt|;
name|MiniZooKeeperCluster
name|cluster1
init|=
name|hbt
operator|.
name|startMiniZKCluster
argument_list|(
name|clientPortList1
operator|.
name|length
argument_list|,
name|clientPortList1
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|clientPortListInCluster
init|=
name|cluster1
operator|.
name|getClientPortList
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|clientPortListInCluster
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|clientPortListInCluster
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|clientPortList1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hbt
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
comment|// Test 2 - set up zookeeper cluster with more ZK servers than specified client ports
name|hbt
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"test.hbase.zookeeper.property.clientPort"
argument_list|,
name|defaultClientPort
argument_list|)
expr_stmt|;
name|int
index|[]
name|clientPortList2
init|=
block|{
literal|2222
block|,
literal|2223
block|}
decl_stmt|;
name|MiniZooKeeperCluster
name|cluster2
init|=
name|hbt
operator|.
name|startMiniZKCluster
argument_list|(
name|clientPortList2
operator|.
name|length
operator|+
literal|2
argument_list|,
name|clientPortList2
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|clientPortListInCluster
init|=
name|cluster2
operator|.
name|getClientPortList
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|j
operator|=
literal|0
init|;
name|i
operator|<
name|clientPortListInCluster
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|<
name|clientPortList2
operator|.
name|length
condition|)
block|{
name|assertEquals
argument_list|(
name|clientPortListInCluster
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|clientPortList2
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// servers with no specified client port will use defaultClientPort or some other ports
comment|// based on defaultClientPort
name|assertEquals
argument_list|(
name|clientPortListInCluster
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|defaultClientPort
operator|+
name|j
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hbt
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
comment|// Test 3 - set up zookeeper cluster with invalid client ports
name|hbt
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"test.hbase.zookeeper.property.clientPort"
argument_list|,
name|defaultClientPort
argument_list|)
expr_stmt|;
name|int
index|[]
name|clientPortList3
init|=
block|{
literal|3333
block|,
operator|-
literal|3334
block|,
literal|3335
block|,
literal|0
block|}
decl_stmt|;
name|MiniZooKeeperCluster
name|cluster3
init|=
name|hbt
operator|.
name|startMiniZKCluster
argument_list|(
name|clientPortList3
operator|.
name|length
operator|+
literal|1
argument_list|,
name|clientPortList3
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|clientPortListInCluster
init|=
name|cluster3
operator|.
name|getClientPortList
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|j
operator|=
literal|0
init|;
name|i
operator|<
name|clientPortListInCluster
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Servers will only use valid client ports; if ports are not specified or invalid,
comment|// the default port or a port based on default port will be used.
if|if
condition|(
name|i
argument_list|<
name|clientPortList3
operator|.
name|length
operator|&&
name|clientPortList3
index|[
name|i
index|]
argument_list|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|clientPortListInCluster
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|clientPortList3
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|clientPortListInCluster
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|defaultClientPort
operator|+
name|j
argument_list|)
expr_stmt|;
name|j
operator|++
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hbt
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
comment|// Test 4 - set up zookeeper cluster with default port and some other ports used
comment|// This test tests that the defaultClientPort and defaultClientPort+2 are used, so
comment|// the algorithm should choice defaultClientPort+1 and defaultClientPort+3 to fill
comment|// out the ports for servers without ports specified.
name|hbt
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"test.hbase.zookeeper.property.clientPort"
argument_list|,
name|defaultClientPort
argument_list|)
expr_stmt|;
name|int
index|[]
name|clientPortList4
init|=
block|{
operator|-
literal|4444
block|,
name|defaultClientPort
operator|+
literal|2
block|,
literal|4446
block|,
name|defaultClientPort
block|}
decl_stmt|;
name|MiniZooKeeperCluster
name|cluster4
init|=
name|hbt
operator|.
name|startMiniZKCluster
argument_list|(
name|clientPortList4
operator|.
name|length
operator|+
literal|1
argument_list|,
name|clientPortList4
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|clientPortListInCluster
init|=
name|cluster4
operator|.
name|getClientPortList
argument_list|()
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
operator|,
name|j
operator|=
literal|1
init|;
name|i
operator|<
name|clientPortListInCluster
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// Servers will only use valid client ports; if ports are not specified or invalid,
comment|// the default port or a port based on default port will be used.
if|if
condition|(
name|i
argument_list|<
name|clientPortList4
operator|.
name|length
operator|&&
name|clientPortList4
index|[
name|i
index|]
argument_list|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|clientPortListInCluster
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|clientPortList4
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|clientPortListInCluster
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|defaultClientPort
operator|+
name|j
argument_list|)
expr_stmt|;
name|j
operator|+=
literal|2
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hbt
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
comment|// Test 5 - set up zookeeper cluster with same ports specified - fail is expected.
name|int
index|[]
name|clientPortList5
init|=
block|{
literal|5555
block|,
literal|5556
block|,
literal|5556
block|}
decl_stmt|;
try|try
block|{
name|MiniZooKeeperCluster
name|cluster5
init|=
name|hbt
operator|.
name|startMiniZKCluster
argument_list|(
name|clientPortList5
operator|.
name|length
argument_list|,
name|clientPortList5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cluster5
operator|.
name|getClientPort
argument_list|()
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// expected failure
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// exception is acceptable
block|}
finally|finally
block|{
name|hbt
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiniDFSCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|hbt
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|MiniDFSCluster
name|cluster
init|=
name|hbt
operator|.
name|startMiniDFSCluster
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|FileSystem
name|dfs
init|=
name|cluster
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|dir
init|=
operator|new
name|Path
argument_list|(
literal|"dir"
argument_list|)
decl_stmt|;
name|Path
name|qualifiedDir
init|=
name|dfs
operator|.
name|makeQualified
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"dir="
operator|+
name|dir
operator|+
literal|", qualifiedDir="
operator|+
name|qualifiedDir
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|dfs
operator|.
name|exists
argument_list|(
name|qualifiedDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|mkdirs
argument_list|(
name|qualifiedDir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|dfs
operator|.
name|delete
argument_list|(
name|qualifiedDir
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|hbt
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetupClusterTestBuildDir
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|hbt
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|Path
name|testdir
init|=
name|hbt
operator|.
name|getClusterTestDir
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"uuid-subdir="
operator|+
name|testdir
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|hbt
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testdir
argument_list|)
argument_list|)
expr_stmt|;
name|hbt
operator|.
name|startMiniDFSCluster
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testdir
argument_list|)
argument_list|)
expr_stmt|;
name|hbt
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|testdir
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestDir
parameter_list|()
throws|throws
name|Exception
block|{
name|HBaseTestingUtility
name|hbt
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
name|Path
name|testdir
init|=
name|hbt
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"testdir="
operator|+
name|testdir
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|hbt
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|testdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|mkdirs
argument_list|(
name|testdir
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hbt
operator|.
name|cleanupTestDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

