begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test case for the MemoryBoundedLogMessageBuffer utility.  * Ensures that it uses no more memory than it's supposed to,  * and that it properly deals with multibyte encodings.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestMemoryBoundedLogMessageBuffer
block|{
specifier|private
specifier|static
specifier|final
name|long
name|TEN_KB
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JP_TEXT
init|=
literal|"こんにちは"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testBuffer
parameter_list|()
block|{
name|MemoryBoundedLogMessageBuffer
name|buf
init|=
operator|new
name|MemoryBoundedLogMessageBuffer
argument_list|(
name|TEN_KB
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|add
argument_list|(
literal|"hello "
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Usage too big: "
operator|+
name|buf
operator|.
name|estimateHeapUsage
argument_list|()
argument_list|,
name|buf
operator|.
name|estimateHeapUsage
argument_list|()
operator|<
name|TEN_KB
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Too many retained: "
operator|+
name|buf
operator|.
name|getMessages
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|buf
operator|.
name|getMessages
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|100
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|buf
operator|.
name|dumpTo
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dump
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"The early log messages should be evicted"
argument_list|,
name|dump
operator|.
name|contains
argument_list|(
literal|"hello 1\n"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The late log messages should be retained"
argument_list|,
name|dump
operator|.
name|contains
argument_list|(
literal|"hello 999\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonAsciiEncoding
parameter_list|()
block|{
name|MemoryBoundedLogMessageBuffer
name|buf
init|=
operator|new
name|MemoryBoundedLogMessageBuffer
argument_list|(
name|TEN_KB
argument_list|)
decl_stmt|;
name|buf
operator|.
name|add
argument_list|(
name|JP_TEXT
argument_list|)
expr_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|buf
operator|.
name|dumpTo
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|dump
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|dump
operator|.
name|contains
argument_list|(
name|JP_TEXT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

