begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ZooKeeperConnectionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|BaseRegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcControllerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_comment
comment|/**  * {@link ClusterConnection} testing utility.  */
end_comment

begin_class
specifier|public
class|class
name|HConnectionTestingUtility
block|{
comment|/*    * Not part of {@link HBaseTestingUtility} because this class is not    * in same package as {@link ClusterConnection}.  Would have to reveal ugly    * {@link ConnectionImplementation} innards to HBaseTestingUtility to give it access.    */
comment|/**    * Get a Mocked {@link ClusterConnection} that goes with the passed<code>conf</code>    * configuration instance.  Minimally the mock will return    *<code>conf</conf> when {@link ClusterConnection#getConfiguration()} is invoked.    * Be sure to shutdown the connection when done by calling    * {@link Connection#close()} else it will stick around; this is probably not what you want.    * @param conf configuration    * @return ClusterConnection object for<code>conf</code>    * @throws ZooKeeperConnectionException    */
specifier|public
specifier|static
name|ClusterConnection
name|getMockedConnection
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ZooKeeperConnectionException
block|{
name|ConnectionImplementation
name|connection
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ConnectionImplementation
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|getRpcControllerFactory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|RpcControllerFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// we need a real retrying caller
name|RpcRetryingCallerFactory
name|callerFactory
init|=
operator|new
name|RpcRetryingCallerFactory
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|connection
operator|.
name|getRpcRetryingCallerFactory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|callerFactory
argument_list|)
expr_stmt|;
return|return
name|connection
return|;
block|}
comment|/**    * Calls {@link #getMockedConnection(Configuration)} and then mocks a few    * more of the popular {@link ClusterConnection} methods so they do 'normal'    * operation (see return doc below for list). Be sure to shutdown the    * connection when done by calling {@link Connection#close()} else it will stick around;    * this is probably not what you want.    *    * @param conf Configuration to use    * @param admin An AdminProtocol; can be null but is usually    * itself a mock.    * @param client A ClientProtocol; can be null but is usually    * itself a mock.    * @param sn ServerName to include in the region location returned by this    *<code>connection</code>    * @param hri HRegionInfo to include in the location returned when    * getRegionLocator is called on the mocked connection    * @return Mock up a connection that returns a {@link Configuration} when    * {@link ClusterConnection#getConfiguration()} is called, a 'location' when    * {@link ClusterConnection#getRegionLocation(org.apache.hadoop.hbase.TableName, byte[], boolean)}    * is called,    * and that returns the passed {@link AdminProtos.AdminService.BlockingInterface} instance when    * {@link ClusterConnection#getAdmin(ServerName)} is called, returns the passed    * {@link ClientProtos.ClientService.BlockingInterface} instance when    * {@link ClusterConnection#getClient(ServerName)} is called (Be sure to call    * {@link Connection#close()} when done with this mocked Connection.    * @throws IOException    */
specifier|public
specifier|static
name|ClusterConnection
name|getMockedConnectionAndDecorate
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|AdminProtos
operator|.
name|AdminService
operator|.
name|BlockingInterface
name|admin
parameter_list|,
specifier|final
name|ClientProtos
operator|.
name|ClientService
operator|.
name|BlockingInterface
name|client
parameter_list|,
specifier|final
name|ServerName
name|sn
parameter_list|,
specifier|final
name|HRegionInfo
name|hri
parameter_list|)
throws|throws
name|IOException
block|{
name|ConnectionImplementation
name|c
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ConnectionImplementation
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|doNothing
argument_list|()
operator|.
name|when
argument_list|(
name|c
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Make it so we return a particular location when asked.
specifier|final
name|HRegionLocation
name|loc
init|=
operator|new
name|HRegionLocation
argument_list|(
name|hri
argument_list|,
name|sn
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getRegionLocation
argument_list|(
operator|(
name|TableName
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|locateRegion
argument_list|(
operator|(
name|TableName
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|loc
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|locateRegion
argument_list|(
operator|(
name|TableName
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyBoolean
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyInt
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|RegionLocations
argument_list|(
name|loc
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|admin
operator|!=
literal|null
condition|)
block|{
comment|// If a call to getAdmin, return this implementation.
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getAdmin
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ServerName
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|admin
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|client
operator|!=
literal|null
condition|)
block|{
comment|// If a call to getClient, return this client.
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getClient
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|ServerName
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
name|NonceGenerator
name|ng
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|NonceGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getNonceGenerator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ng
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getAsyncProcess
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|AsyncProcess
argument_list|(
name|c
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
name|RpcRetryingCallerFactory
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
argument_list|,
literal|false
argument_list|,
name|RpcControllerFactory
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
argument_list|,
name|conf
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getNewRpcRetryingCallerFactory
argument_list|(
name|conf
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|RpcRetryingCallerFactory
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|,
name|RetryingCallerInterceptorFactory
operator|.
name|NO_OP_INTERCEPTOR
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getRpcControllerFactory
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|RpcControllerFactory
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|c
operator|.
name|getTable
argument_list|(
operator|(
name|TableName
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|ResultScanner
name|rs
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ResultScanner
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|t
operator|.
name|getScanner
argument_list|(
operator|(
name|Scan
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rs
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
comment|/**    * Get a Mockito spied-upon {@link ClusterConnection} that goes with the passed    *<code>conf</code> configuration instance.    * Be sure to shutdown the connection when done by calling    * {@link Connection#close()} else it will stick around; this is probably not what you want.    * @param conf configuration    * @return ClusterConnection object for<code>conf</code>    * @throws ZooKeeperConnectionException    * @see @link    * {http://mockito.googlecode.com/svn/branches/1.6/javadoc/org/mockito/Mockito.html#spy(T)}    */
specifier|public
specifier|static
name|ClusterConnection
name|getSpiedConnection
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|ConnectionImplementation
name|connection
init|=
name|Mockito
operator|.
name|spy
argument_list|(
operator|new
name|ConnectionImplementation
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|connection
return|;
block|}
comment|/**    * This coproceesor sleep 2s at first increment/append rpc call.    */
specifier|public
specifier|static
class|class
name|SleepAtFirstRpcCall
extends|extends
name|BaseRegionObserver
block|{
specifier|static
specifier|final
name|AtomicLong
name|ct
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|String
name|SLEEP_TIME_CONF_KEY
init|=
literal|"hbase.coprocessor.SleepAtFirstRpcCall.sleepTime"
decl_stmt|;
specifier|static
specifier|final
name|long
name|DEFAULT_SLEEP_TIME
init|=
literal|2000
decl_stmt|;
specifier|static
specifier|final
name|AtomicLong
name|sleepTime
init|=
operator|new
name|AtomicLong
argument_list|(
name|DEFAULT_SLEEP_TIME
argument_list|)
decl_stmt|;
specifier|public
name|SleepAtFirstRpcCall
parameter_list|()
block|{     }
annotation|@
name|Override
specifier|public
name|void
name|postOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|)
block|{
name|RegionCoprocessorEnvironment
name|env
init|=
name|c
operator|.
name|getEnvironment
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|env
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|sleepTime
operator|.
name|set
argument_list|(
name|conf
operator|.
name|getLong
argument_list|(
name|SLEEP_TIME_CONF_KEY
argument_list|,
name|DEFAULT_SLEEP_TIME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|postIncrement
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Increment
name|increment
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ct
operator|.
name|incrementAndGet
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Result
name|postAppend
parameter_list|(
specifier|final
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|e
parameter_list|,
specifier|final
name|Append
name|append
parameter_list|,
specifier|final
name|Result
name|result
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ct
operator|.
name|incrementAndGet
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
name|sleepTime
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

