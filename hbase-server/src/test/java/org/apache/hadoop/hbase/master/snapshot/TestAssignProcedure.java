begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|snapshot
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CategoryBasedTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|AssignProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAssignProcedure
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestAssignProcedure
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestRule
name|timeout
init|=
name|CategoryBasedTimeout
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withLookingForStuckThread
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testSimpleComparator
parameter_list|()
block|{
name|List
argument_list|<
name|AssignProcedure
argument_list|>
name|procedures
init|=
operator|new
name|ArrayList
argument_list|<
name|AssignProcedure
argument_list|>
argument_list|()
decl_stmt|;
name|RegionInfo
name|user1
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"user_space1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
name|RegionInfo
name|user2
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"user_space2"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|user2
argument_list|)
argument_list|)
expr_stmt|;
name|RegionInfo
name|system
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|system
argument_list|)
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|sort
argument_list|(
name|AssignProcedure
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procedures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isMeta
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procedures
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComparatorWithMetas
parameter_list|()
block|{
name|List
argument_list|<
name|AssignProcedure
argument_list|>
name|procedures
init|=
operator|new
name|ArrayList
argument_list|<
name|AssignProcedure
argument_list|>
argument_list|()
decl_stmt|;
name|RegionInfo
name|user3
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"user3"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|user3
argument_list|)
argument_list|)
expr_stmt|;
name|RegionInfo
name|system
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|system
argument_list|)
argument_list|)
expr_stmt|;
name|RegionInfo
name|user1
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"user_space1"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|RegionInfo
name|user2
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"user_space2"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
name|RegionInfo
name|meta2
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"002"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|user2
argument_list|)
argument_list|)
expr_stmt|;
name|RegionInfo
name|meta1
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"001"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|meta1
argument_list|)
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
argument_list|)
expr_stmt|;
name|RegionInfo
name|meta0
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"000"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|procedures
operator|.
name|add
argument_list|(
operator|new
name|AssignProcedure
argument_list|(
name|meta0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|procedures
argument_list|)
expr_stmt|;
name|procedures
operator|.
name|sort
argument_list|(
name|AssignProcedure
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
try|try
block|{
name|assertTrue
argument_list|(
name|procedures
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procedures
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|meta0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procedures
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|meta1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procedures
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|meta2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procedures
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getTable
argument_list|()
operator|.
name|equals
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procedures
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|user1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procedures
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|user2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|procedures
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|user3
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
for|for
control|(
name|AssignProcedure
name|proc
range|:
name|procedures
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
throw|throw
name|t
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

