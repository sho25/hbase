begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|AdminProtos
operator|.
name|FlushRegionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RegionServerStatusProtos
operator|.
name|GetLastFlushedSequenceIdRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ServiceException
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestHLogFiltering
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHLogFiltering
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_MASTERS
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_RS
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|TABLE_NAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestHLogFiltering"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CF1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"MyCF1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CF2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"MyCF2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|FAMILIES
init|=
block|{
name|CF1
block|,
name|CF2
block|}
decl_stmt|;
specifier|private
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|NUM_MASTERS
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
name|fillTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|fillTable
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|HTable
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLE_NAME
argument_list|,
name|FAMILIES
argument_list|,
literal|3
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row0"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row99"
argument_list|)
argument_list|,
name|NUM_RS
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|19387129L
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iStoreFile
init|=
literal|0
init|;
name|iStoreFile
operator|<
literal|4
condition|;
operator|++
name|iStoreFile
control|)
block|{
for|for
control|(
name|int
name|iRow
init|=
literal|0
init|;
name|iRow
operator|<
literal|100
condition|;
operator|++
name|iRow
control|)
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|iRow
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iCol
init|=
literal|0
init|;
name|iCol
operator|<
literal|10
condition|;
operator|++
name|iCol
control|)
block|{
specifier|final
name|byte
index|[]
name|cf
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|?
name|CF1
else|:
name|CF2
decl_stmt|;
specifier|final
name|long
name|ts
init|=
name|rand
operator|.
name|nextInt
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col"
operator|+
name|iCol
argument_list|)
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value_for_row_"
operator|+
name|iRow
operator|+
literal|"_cf_"
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|cf
argument_list|)
operator|+
literal|"_col_"
operator|+
name|iCol
operator|+
literal|"_ts_"
operator|+
name|ts
operator|+
literal|"_random_"
operator|+
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|cf
argument_list|,
name|qual
argument_list|,
name|ts
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rand
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.8
condition|)
block|{
name|del
operator|.
name|deleteColumn
argument_list|(
name|cf
argument_list|,
name|qual
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|del
operator|.
name|deleteColumns
argument_list|(
name|cf
argument_list|,
name|qual
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|table
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
block|}
block|}
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|TABLE_NAME
argument_list|,
name|NUM_RS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushedSequenceIdsSentToHMaster
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ServiceException
block|{
name|SortedMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|allFlushedSequenceIds
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RS
condition|;
operator|++
name|i
control|)
block|{
name|flushAllRegions
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_RS
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|byte
index|[]
name|regionName
range|:
name|getRegionsByServer
argument_list|(
name|i
argument_list|)
control|)
block|{
if|if
condition|(
name|allFlushedSequenceIds
operator|.
name|containsKey
argument_list|(
name|regionName
argument_list|)
condition|)
block|{
name|GetLastFlushedSequenceIdRequest
name|req
init|=
name|RequestConverter
operator|.
name|buildGetLastFlushedSequenceIdRequest
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|allFlushedSequenceIds
operator|.
name|get
argument_list|(
name|regionName
argument_list|)
argument_list|,
name|master
operator|.
name|getLastFlushedSequenceId
argument_list|(
literal|null
argument_list|,
name|req
argument_list|)
operator|.
name|getLastFlushedSequenceId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|getRegionsByServer
parameter_list|(
name|int
name|rsId
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|regionNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|HRegionServer
name|hrs
init|=
name|getRegionServer
argument_list|(
name|rsId
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegion
name|r
range|:
name|hrs
operator|.
name|getOnlineRegions
argument_list|(
name|TABLE_NAME
argument_list|)
control|)
block|{
name|regionNames
operator|.
name|add
argument_list|(
name|r
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|regionNames
return|;
block|}
specifier|private
name|HRegionServer
name|getRegionServer
parameter_list|(
name|int
name|rsId
parameter_list|)
block|{
return|return
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|rsId
argument_list|)
return|;
block|}
specifier|private
name|void
name|flushAllRegions
parameter_list|(
name|int
name|rsId
parameter_list|)
throws|throws
name|ServiceException
throws|,
name|IOException
block|{
name|HRegionServer
name|hrs
init|=
name|getRegionServer
argument_list|(
name|rsId
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|regionName
range|:
name|getRegionsByServer
argument_list|(
name|rsId
argument_list|)
control|)
block|{
name|FlushRegionRequest
name|request
init|=
name|RequestConverter
operator|.
name|buildFlushRegionRequest
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|hrs
operator|.
name|flushRegion
argument_list|(
literal|null
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

