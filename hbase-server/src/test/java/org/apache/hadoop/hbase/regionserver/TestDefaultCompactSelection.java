begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|RatioBasedCompactionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|DefaultWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestDefaultCompactSelection
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDefaultCompactSelection
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
specifier|protected
name|HStore
name|store
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
name|TestDefaultCompactSelection
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Path
name|TEST_FILE
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|minFiles
init|=
literal|3
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|maxFiles
init|=
literal|5
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|long
name|minSize
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|long
name|maxSize
init|=
literal|2100
decl_stmt|;
specifier|private
name|WALFactory
name|wals
decl_stmt|;
specifier|private
name|HRegion
name|region
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup config values necessary for store
name|this
operator|.
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|MAJOR_COMPACTION_PERIOD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
name|minFiles
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.max"
argument_list|,
name|maxFiles
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.hstore.compaction.max.size"
argument_list|,
name|maxSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.hstore.compaction.ratio"
argument_list|,
literal|1.0F
argument_list|)
expr_stmt|;
comment|// Test depends on this not being set to pass.  Default breaks test.  TODO: Revisit.
name|this
operator|.
name|conf
operator|.
name|unset
argument_list|(
literal|"hbase.hstore.compaction.min.size"
argument_list|)
expr_stmt|;
comment|//Setting up a Store
specifier|final
name|String
name|id
init|=
name|TestDefaultCompactSelection
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Path
name|basedir
init|=
operator|new
name|Path
argument_list|(
name|DIR
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|logdir
init|=
operator|new
name|Path
argument_list|(
name|basedir
argument_list|,
name|DefaultWALProvider
operator|.
name|getWALDirectoryName
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|delete
argument_list|(
name|logdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"table"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|walConf
init|=
operator|new
name|Configuration
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|walConf
argument_list|,
name|basedir
argument_list|)
expr_stmt|;
name|wals
operator|=
operator|new
name|WALFactory
argument_list|(
name|walConf
argument_list|,
literal|null
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|region
operator|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|info
argument_list|,
name|basedir
argument_list|,
name|conf
argument_list|,
name|htd
argument_list|)
expr_stmt|;
name|HRegion
operator|.
name|closeHRegion
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|Path
name|tableDir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|basedir
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|region
operator|=
operator|new
name|HRegion
argument_list|(
name|tableDir
argument_list|,
name|wals
operator|.
name|getWAL
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
argument_list|,
name|fs
argument_list|,
name|conf
argument_list|,
name|info
argument_list|,
name|htd
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|HStore
argument_list|(
name|region
argument_list|,
name|hcd
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|TEST_FILE
operator|=
name|region
operator|.
name|getRegionFileSystem
argument_list|()
operator|.
name|createTempName
argument_list|()
expr_stmt|;
name|fs
operator|.
name|createNewFile
argument_list|(
name|TEST_FILE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
name|IOException
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ex
operator|=
name|e
expr_stmt|;
block|}
try|try
block|{
name|wals
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught Exception"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ex
operator|=
name|e
expr_stmt|;
block|}
if|if
condition|(
name|ex
operator|!=
literal|null
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|toArrayList
parameter_list|(
name|long
modifier|...
name|numbers
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
range|:
name|numbers
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|List
argument_list|<
name|StoreFile
argument_list|>
name|sfCreate
parameter_list|(
name|long
modifier|...
name|sizes
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|ageInDisk
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ageInDisk
operator|.
name|add
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
return|return
name|sfCreate
argument_list|(
name|toArrayList
argument_list|(
name|sizes
argument_list|)
argument_list|,
name|ageInDisk
argument_list|)
return|;
block|}
name|List
argument_list|<
name|StoreFile
argument_list|>
name|sfCreate
parameter_list|(
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|sizes
parameter_list|,
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|ageInDisk
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sfCreate
argument_list|(
literal|false
argument_list|,
name|sizes
argument_list|,
name|ageInDisk
argument_list|)
return|;
block|}
name|List
argument_list|<
name|StoreFile
argument_list|>
name|sfCreate
parameter_list|(
name|boolean
name|isReference
parameter_list|,
name|long
modifier|...
name|sizes
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|ageInDisk
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|sizes
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ageInDisk
operator|.
name|add
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
return|return
name|sfCreate
argument_list|(
name|isReference
argument_list|,
name|toArrayList
argument_list|(
name|sizes
argument_list|)
argument_list|,
name|ageInDisk
argument_list|)
return|;
block|}
name|List
argument_list|<
name|StoreFile
argument_list|>
name|sfCreate
parameter_list|(
name|boolean
name|isReference
parameter_list|,
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|sizes
parameter_list|,
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|ageInDisk
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|StoreFile
argument_list|>
name|ret
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|MockStoreFile
argument_list|(
name|TEST_UTIL
argument_list|,
name|TEST_FILE
argument_list|,
name|sizes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|ageInDisk
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|isReference
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
name|long
index|[]
name|getSizes
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|sfList
parameter_list|)
block|{
name|long
index|[]
name|aNums
init|=
operator|new
name|long
index|[
name|sfList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sfList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|aNums
index|[
name|i
index|]
operator|=
name|sfList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getReader
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|aNums
return|;
block|}
name|void
name|compactEquals
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|candidates
parameter_list|,
name|long
modifier|...
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|compactEquals
argument_list|(
name|candidates
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|void
name|compactEquals
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|candidates
parameter_list|,
name|boolean
name|forcemajor
parameter_list|,
name|long
modifier|...
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|compactEquals
argument_list|(
name|candidates
argument_list|,
name|forcemajor
argument_list|,
literal|false
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
name|void
name|compactEquals
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|candidates
parameter_list|,
name|boolean
name|forcemajor
parameter_list|,
name|boolean
name|isOffPeak
parameter_list|,
name|long
modifier|...
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|store
operator|.
name|forceMajor
operator|=
name|forcemajor
expr_stmt|;
comment|//Test Default compactions
name|CompactionRequest
name|result
init|=
operator|(
operator|(
name|RatioBasedCompactionPolicy
operator|)
name|store
operator|.
name|storeEngine
operator|.
name|getCompactionPolicy
argument_list|()
operator|)
operator|.
name|selectCompaction
argument_list|(
name|candidates
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
name|isOffPeak
argument_list|,
name|forcemajor
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|actual
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|(
name|result
operator|.
name|getFiles
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOffPeak
operator|&&
operator|!
name|forcemajor
condition|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|isOffPeak
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|getSizes
argument_list|(
name|actual
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|forceMajor
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|testCompactionRatio
parameter_list|()
throws|throws
name|IOException
block|{
comment|/**      * NOTE: these tests are specific to describe the implementation of the      * current compaction algorithm.  Developed to ensure that refactoring      * doesn't implicitly alter this.      */
name|long
name|tooBig
init|=
name|maxSize
operator|+
literal|1
decl_stmt|;
comment|// default case. preserve user ratio on size
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|,
literal|23
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|23
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// less than compact threshold = don't compact
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|,
literal|25
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
comment|/* empty */
argument_list|)
expr_stmt|;
comment|// greater than compact size = skip those
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|tooBig
argument_list|,
name|tooBig
argument_list|,
literal|700
argument_list|,
literal|700
argument_list|,
literal|700
argument_list|)
argument_list|,
literal|700
argument_list|,
literal|700
argument_list|,
literal|700
argument_list|)
expr_stmt|;
comment|// big size + threshold
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|tooBig
argument_list|,
name|tooBig
argument_list|,
literal|700
argument_list|,
literal|700
argument_list|)
comment|/* empty */
argument_list|)
expr_stmt|;
comment|// small files = don't care about ratio
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|7
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// don't exceed max file compact threshold
comment|// note:  file selection starts with largest to smallest.
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|7
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|50
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|)
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|251
argument_list|,
literal|253
argument_list|,
literal|251
argument_list|,
name|maxSize
operator|-
literal|1
argument_list|)
argument_list|,
literal|251
argument_list|,
literal|253
argument_list|,
literal|251
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|maxSize
operator|-
literal|1
argument_list|,
name|maxSize
operator|-
literal|1
argument_list|,
name|maxSize
operator|-
literal|1
argument_list|)
comment|/* empty */
argument_list|)
expr_stmt|;
comment|// Always try and compact something to get below blocking storefile count
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.hstore.compaction.min.size"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeEngine
operator|.
name|getCompactionPolicy
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|512
argument_list|,
literal|256
argument_list|,
literal|128
argument_list|,
literal|64
argument_list|,
literal|32
argument_list|,
literal|16
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setLong
argument_list|(
literal|"hbase.hstore.compaction.min.size"
argument_list|,
name|minSize
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeEngine
operator|.
name|getCompactionPolicy
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|/* MAJOR COMPACTION */
comment|// if a major compaction has been forced, then compact everything
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|50
argument_list|,
literal|25
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|50
argument_list|,
literal|25
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// also choose files< threshold on major compaction
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|12
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// even if one of those files is too big
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|tooBig
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|true
argument_list|,
name|tooBig
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// don't exceed max file compact threshold, even with major compaction
name|store
operator|.
name|forceMajor
operator|=
literal|true
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|7
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|store
operator|.
name|forceMajor
operator|=
literal|false
expr_stmt|;
comment|// if we exceed maxCompactSize, downgrade to minor
comment|// if not, it creates a 'snowball effect' when files>> maxCompactSize:
comment|// the last file in compaction is the aggregate of all previous compactions
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|,
literal|23
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|23
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|MAJOR_COMPACTION_PERIOD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.hregion.majorcompaction.jitter"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeEngine
operator|.
name|getCompactionPolicy
argument_list|()
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
try|try
block|{
comment|// trigger an aged major compaction
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|50
argument_list|,
literal|25
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|50
argument_list|,
literal|25
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// major sure exceeding maxCompactSize also downgrades aged minors
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|100
argument_list|,
literal|50
argument_list|,
literal|23
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|23
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|MAJOR_COMPACTION_PERIOD
argument_list|,
literal|1000
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.hregion.majorcompaction.jitter"
argument_list|,
literal|0.20F
argument_list|)
expr_stmt|;
block|}
comment|/* REFERENCES == file is from a region that was split */
comment|// treat storefiles that have references like a major compaction
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|true
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|,
literal|25
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
argument_list|,
literal|100
argument_list|,
literal|50
argument_list|,
literal|25
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// reference files shouldn't obey max threshold
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|true
argument_list|,
name|tooBig
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
argument_list|,
name|tooBig
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|)
expr_stmt|;
comment|// reference files should obey max file compact to avoid OOM
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|true
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// empty case
name|compactEquals
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
comment|/* empty */
argument_list|)
expr_stmt|;
comment|// empty case (because all files are too big)
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
name|tooBig
argument_list|,
name|tooBig
argument_list|)
comment|/* empty */
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testOffPeakCompactionRatio
parameter_list|()
throws|throws
name|IOException
block|{
comment|/*      * NOTE: these tests are specific to describe the implementation of the      * current compaction algorithm.  Developed to ensure that refactoring      * doesn't implicitly alter this.      */
comment|// set an off-peak compaction threshold
name|this
operator|.
name|conf
operator|.
name|setFloat
argument_list|(
literal|"hbase.hstore.compaction.ratio.offpeak"
argument_list|,
literal|5.0F
argument_list|)
expr_stmt|;
name|store
operator|.
name|storeEngine
operator|.
name|getCompactionPolicy
argument_list|()
operator|.
name|setConf
argument_list|(
name|this
operator|.
name|conf
argument_list|)
expr_stmt|;
comment|// Test with and without the flag.
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|999
argument_list|,
literal|50
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|50
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|999
argument_list|,
literal|50
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
argument_list|,
literal|12
argument_list|,
literal|12
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testStuckStoreCompaction
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Select the smallest compaction if the store is stuck.
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
comment|// If not stuck, standard policy applies.
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
argument_list|,
literal|99
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
comment|// Add sufficiently small files to compaction, though
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|15
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// Prefer earlier compaction to latter if the benefit is not significant
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|30
argument_list|,
literal|26
argument_list|,
literal|26
argument_list|,
literal|29
argument_list|,
literal|25
argument_list|,
literal|25
argument_list|)
argument_list|,
literal|30
argument_list|,
literal|26
argument_list|,
literal|26
argument_list|)
expr_stmt|;
comment|// Prefer later compaction if the benefit is significant.
name|compactEquals
argument_list|(
name|sfCreate
argument_list|(
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|99
argument_list|,
literal|27
argument_list|,
literal|27
argument_list|,
literal|27
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testCompactionEmptyHFile
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Set TTL
name|ScanInfo
name|oldScanInfo
init|=
name|store
operator|.
name|getScanInfo
argument_list|()
decl_stmt|;
name|ScanInfo
name|newScanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|oldScanInfo
operator|.
name|getFamily
argument_list|()
argument_list|,
name|oldScanInfo
operator|.
name|getMinVersions
argument_list|()
argument_list|,
name|oldScanInfo
operator|.
name|getMaxVersions
argument_list|()
argument_list|,
literal|600
argument_list|,
name|oldScanInfo
operator|.
name|getKeepDeletedCells
argument_list|()
argument_list|,
name|oldScanInfo
operator|.
name|getTimeToPurgeDeletes
argument_list|()
argument_list|,
name|oldScanInfo
operator|.
name|getComparator
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|setScanInfo
argument_list|(
name|newScanInfo
argument_list|)
expr_stmt|;
comment|// Do not compact empty store file
name|List
argument_list|<
name|StoreFile
argument_list|>
name|candidates
init|=
name|sfCreate
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|StoreFile
name|file
range|:
name|candidates
control|)
block|{
if|if
condition|(
name|file
operator|instanceof
name|MockStoreFile
condition|)
block|{
name|MockStoreFile
name|mockFile
init|=
operator|(
name|MockStoreFile
operator|)
name|file
decl_stmt|;
name|mockFile
operator|.
name|setTimeRangeTracker
argument_list|(
operator|new
name|TimeRangeTracker
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|mockFile
operator|.
name|setEntries
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test Default compactions
name|CompactionRequest
name|result
init|=
operator|(
operator|(
name|RatioBasedCompactionPolicy
operator|)
name|store
operator|.
name|storeEngine
operator|.
name|getCompactionPolicy
argument_list|()
operator|)
operator|.
name|selectCompaction
argument_list|(
name|candidates
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getFiles
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|setScanInfo
argument_list|(
name|oldScanInfo
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

