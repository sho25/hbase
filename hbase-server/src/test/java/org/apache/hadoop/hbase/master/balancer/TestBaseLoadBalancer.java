begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionReplicaUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RackManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
operator|.
name|Cluster
operator|.
name|MoveRegionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|net
operator|.
name|DNSToSwitchMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBaseLoadBalancer
extends|extends
name|BalancerTestBase
block|{
specifier|private
specifier|static
name|LoadBalancer
name|loadBalancer
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestBaseLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ServerName
name|master
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"fake-master"
argument_list|,
literal|0
argument_list|,
literal|1L
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|RackManager
name|rackManager
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SERVERS
init|=
literal|15
decl_stmt|;
specifier|private
specifier|static
name|ServerName
index|[]
name|servers
init|=
operator|new
name|ServerName
index|[
name|NUM_SERVERS
index|]
decl_stmt|;
name|int
index|[]
index|[]
name|regionsAndServersMocks
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|// { num regions, num servers }
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|25
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|100
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|12
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|12
block|,
literal|100
block|}
block|, }
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.util.ip.to.rack.determiner"
argument_list|,
name|MockMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|loadBalancer
operator|=
operator|new
name|MockBalancer
argument_list|()
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|MasterServices
name|st
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MasterServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|st
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|loadBalancer
operator|.
name|setMasterServices
argument_list|(
name|st
argument_list|)
expr_stmt|;
comment|// Set up the rack topologies (5 machines per rack)
name|rackManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RackManager
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_SERVERS
condition|;
name|i
operator|++
control|)
block|{
name|servers
index|[
name|i
index|]
operator|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|5
condition|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|servers
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"rack1"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|5
operator|&&
name|i
operator|<
literal|10
condition|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|servers
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"rack2"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|10
condition|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|servers
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"rack3"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|MockBalancer
extends|extends
name|BaseLoadBalancer
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceCluster
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceCluster
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
throws|throws
name|HBaseIOException
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * All regions have an assignment.    * @param regions    * @param servers    * @param assignments    */
specifier|private
name|void
name|assertImmediateAssignment
parameter_list|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|assignments
parameter_list|)
block|{
for|for
control|(
name|RegionInfo
name|region
range|:
name|regions
control|)
block|{
name|assertTrue
argument_list|(
name|assignments
operator|.
name|containsKey
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the bulk assignment used during cluster startup.    *    * Round-robin. Should yield a balanced cluster so same invariant as the load    * balancer holds, all servers holding either floor(avg) or ceiling(avg).    *    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testBulkAssignment
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|tmp
init|=
name|getListOfServerNames
argument_list|(
name|randomServers
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|hris
init|=
name|randomRegions
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|hris
operator|.
name|add
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|add
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|plans
init|=
name|loadBalancer
operator|.
name|roundRobinAssignment
argument_list|(
name|hris
argument_list|,
name|tmp
argument_list|)
decl_stmt|;
if|if
condition|(
name|LoadBalancer
operator|.
name|isTablesOnMaster
argument_list|(
name|loadBalancer
operator|.
name|getConf
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|plans
operator|.
name|get
argument_list|(
name|master
argument_list|)
operator|.
name|contains
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plans
operator|.
name|get
argument_list|(
name|master
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|totalRegion
init|=
literal|0
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
range|:
name|plans
operator|.
name|values
argument_list|()
control|)
block|{
name|totalRegion
operator|+=
name|regions
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|hris
operator|.
name|size
argument_list|()
argument_list|,
name|totalRegion
argument_list|)
expr_stmt|;
for|for
control|(
name|int
index|[]
name|mock
range|:
name|regionsAndServersMocks
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"testBulkAssignment with "
operator|+
name|mock
index|[
literal|0
index|]
operator|+
literal|" regions and "
operator|+
name|mock
index|[
literal|1
index|]
operator|+
literal|" servers"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
name|mock
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers
init|=
name|randomServers
argument_list|(
name|mock
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|list
init|=
name|getListOfServerNames
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
name|loadBalancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|float
name|average
init|=
operator|(
name|float
operator|)
name|regions
operator|.
name|size
argument_list|()
operator|/
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignments
operator|!=
literal|null
operator|&&
operator|!
name|assignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionList
range|:
name|assignments
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|min
operator|||
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|max
argument_list|)
expr_stmt|;
block|}
block|}
name|returnRegions
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|returnServers
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the cluster startup bulk assignment which attempts to retain    * assignment info.    * @throws Exception    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRetainAssignment
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test simple case where all same servers are there
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers
init|=
name|randomServers
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|existing
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|RegionInfo
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|sn
init|=
name|servers
operator|.
name|get
argument_list|(
name|i
operator|%
name|servers
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// The old server would have had same host and port, but different
comment|// start code!
name|ServerName
name|snWithOldStartCode
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|,
name|sn
operator|.
name|getPort
argument_list|()
argument_list|,
name|sn
operator|.
name|getStartcode
argument_list|()
operator|-
literal|10
argument_list|)
decl_stmt|;
name|existing
operator|.
name|put
argument_list|(
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|snWithOldStartCode
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|listOfServerNames
init|=
name|getListOfServerNames
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|assignment
init|=
name|loadBalancer
operator|.
name|retainAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|)
decl_stmt|;
name|assertRetainedAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
comment|// Include two new servers that were not there before
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|servers2
operator|.
name|add
argument_list|(
name|randomServer
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|servers2
operator|.
name|add
argument_list|(
name|randomServer
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|listOfServerNames
operator|=
name|getListOfServerNames
argument_list|(
name|servers2
argument_list|)
expr_stmt|;
name|assignment
operator|=
name|loadBalancer
operator|.
name|retainAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|)
expr_stmt|;
name|assertRetainedAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
comment|// Remove two of the servers that were previously there
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|servers3
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|servers3
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|listOfServerNames
operator|=
name|getListOfServerNames
argument_list|(
name|servers3
argument_list|)
expr_stmt|;
name|assignment
operator|=
name|loadBalancer
operator|.
name|retainAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|)
expr_stmt|;
name|assertRetainedAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testRandomAssignment
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|!=
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"run testRandomAssignment() with idle servers:"
operator|+
name|i
argument_list|)
expr_stmt|;
name|testRandomAssignment
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testRandomAssignment
parameter_list|(
name|int
name|numberOfIdleServers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numberOfIdleServers
operator|>
literal|0
assert|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|idleServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numberOfIdleServers
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|numberOfIdleServers
condition|;
operator|++
name|i
control|)
block|{
name|idleServers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"server-"
operator|+
name|i
argument_list|,
literal|1000
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|allServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|idleServers
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|allServers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"server-"
operator|+
name|numberOfIdleServers
argument_list|,
literal|1000
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|allServers
operator|.
name|addAll
argument_list|(
name|idleServers
argument_list|)
expr_stmt|;
name|LoadBalancer
name|balancer
init|=
operator|new
name|MockBalancer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|shouldBeOnMaster
parameter_list|(
name|RegionInfo
name|region
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setClass
argument_list|(
literal|"hbase.util.ip.to.rack.determiner"
argument_list|,
name|MockMapping
operator|.
name|class
argument_list|,
name|DNSToSwitchMapping
operator|.
name|class
argument_list|)
expr_stmt|;
name|balancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|ServerManager
name|sm
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ServerManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|sm
operator|.
name|getOnlineServersListWithPredicator
argument_list|(
name|allServers
argument_list|,
name|BaseLoadBalancer
operator|.
name|IDLE_SERVER_PREDICATOR
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|idleServers
argument_list|)
expr_stmt|;
name|MasterServices
name|services
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|MasterServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|services
operator|.
name|getServerManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sm
argument_list|)
expr_stmt|;
name|balancer
operator|.
name|setMasterServices
argument_list|(
name|services
argument_list|)
expr_stmt|;
name|RegionInfo
name|hri1
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
literal|"key1"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|setEndKey
argument_list|(
literal|"key2"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|hri1
argument_list|,
name|Collections
operator|.
name|EMPTY_LIST
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|hri1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|ServerName
name|sn
init|=
name|balancer
operator|.
name|randomAssignment
argument_list|(
name|hri1
argument_list|,
name|allServers
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"actual:"
operator|+
name|sn
operator|+
literal|", except:"
operator|+
name|idleServers
argument_list|,
name|idleServers
operator|.
name|contains
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRegionAvailability
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a cluster with a few servers, assign them to specific racks
comment|// then assign some regions. The tests should check whether moving a
comment|// replica from one node to a specific other node or rack lowers the
comment|// availability of the region or not
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|list0
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create a region (region1)
name|RegionInfo
name|hri1
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
literal|"key1"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|setEndKey
argument_list|(
literal|"key2"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// create a replica of the region (replica_of_region1)
name|RegionInfo
name|hri2
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|hri1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// create a second region (region2)
name|RegionInfo
name|hri3
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
literal|"key2"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|setEndKey
argument_list|(
literal|"key3"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|101
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|list0
operator|.
name|add
argument_list|(
name|hri1
argument_list|)
expr_stmt|;
comment|//only region1
name|list1
operator|.
name|add
argument_list|(
name|hri2
argument_list|)
expr_stmt|;
comment|//only replica_of_region1
name|list2
operator|.
name|add
argument_list|(
name|hri3
argument_list|)
expr_stmt|;
comment|//only region2
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|0
index|]
argument_list|,
name|list0
argument_list|)
expr_stmt|;
comment|//servers[0] hosts region1
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|1
index|]
argument_list|,
name|list1
argument_list|)
expr_stmt|;
comment|//servers[1] hosts replica_of_region1
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|2
index|]
argument_list|,
name|list2
argument_list|)
expr_stmt|;
comment|//servers[2] hosts region2
comment|// create a cluster with the above clusterState. The way in which the
comment|// cluster is created (constructor code) would make sure the indices of
comment|// the servers are in the order in which it is inserted in the clusterState
comment|// map (linkedhashmap is important). A similar thing applies to the region lists
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
comment|// check whether a move of region1 from servers[0] to servers[1] would lower
comment|// the availability of region1
name|assertTrue
argument_list|(
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri1
argument_list|,
name|servers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// check whether a move of region1 from servers[0] to servers[2] would lower
comment|// the availability of region1
name|assertTrue
argument_list|(
operator|!
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri1
argument_list|,
name|servers
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// check whether a move of replica_of_region1 from servers[0] to servers[2] would lower
comment|// the availability of replica_of_region1
name|assertTrue
argument_list|(
operator|!
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri2
argument_list|,
name|servers
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// check whether a move of region2 from servers[0] to servers[1] would lower
comment|// the availability of region2
name|assertTrue
argument_list|(
operator|!
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri3
argument_list|,
name|servers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// now lets have servers[1] host replica_of_region2
name|list1
operator|.
name|add
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|hri3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a new clusterState with the above change
name|cluster
operator|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|rackManager
argument_list|)
expr_stmt|;
comment|// now check whether a move of a replica from servers[0] to servers[1] would lower
comment|// the availability of region2
name|assertTrue
argument_list|(
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri3
argument_list|,
name|servers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// start over again
name|clusterState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|0
index|]
argument_list|,
name|list0
argument_list|)
expr_stmt|;
comment|//servers[0], rack1 hosts region1
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|5
index|]
argument_list|,
name|list1
argument_list|)
expr_stmt|;
comment|//servers[5], rack2 hosts replica_of_region1 and replica_of_region2
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|6
index|]
argument_list|,
name|list2
argument_list|)
expr_stmt|;
comment|//servers[6], rack2 hosts region2
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|10
index|]
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
comment|//servers[10], rack3 hosts no region
comment|// create a cluster with the above clusterState
name|cluster
operator|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|rackManager
argument_list|)
expr_stmt|;
comment|// check whether a move of region1 from servers[0],rack1 to servers[6],rack2 would
comment|// lower the availability
name|assertTrue
argument_list|(
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri1
argument_list|,
name|servers
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// now create a cluster without the rack manager
name|cluster
operator|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// now repeat check whether a move of region1 from servers[0] to servers[6] would
comment|// lower the availability
name|assertTrue
argument_list|(
operator|!
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri1
argument_list|,
name|servers
index|[
literal|6
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testRegionAvailabilityWithRegionMoves
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|list0
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|list1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|list2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// create a region (region1)
name|RegionInfo
name|hri1
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
literal|"key1"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|setEndKey
argument_list|(
literal|"key2"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|// create a replica of the region (replica_of_region1)
name|RegionInfo
name|hri2
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|hri1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// create a second region (region2)
name|RegionInfo
name|hri3
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setStartKey
argument_list|(
literal|"key2"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|setEndKey
argument_list|(
literal|"key3"
operator|.
name|getBytes
argument_list|()
argument_list|)
operator|.
name|setSplit
argument_list|(
literal|false
argument_list|)
operator|.
name|setRegionId
argument_list|(
literal|101
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|list0
operator|.
name|add
argument_list|(
name|hri1
argument_list|)
expr_stmt|;
comment|//only region1
name|list1
operator|.
name|add
argument_list|(
name|hri2
argument_list|)
expr_stmt|;
comment|//only replica_of_region1
name|list2
operator|.
name|add
argument_list|(
name|hri3
argument_list|)
expr_stmt|;
comment|//only region2
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|0
index|]
argument_list|,
name|list0
argument_list|)
expr_stmt|;
comment|//servers[0] hosts region1
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|1
index|]
argument_list|,
name|list1
argument_list|)
expr_stmt|;
comment|//servers[1] hosts replica_of_region1
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|2
index|]
argument_list|,
name|list2
argument_list|)
expr_stmt|;
comment|//servers[2] hosts region2
comment|// create a cluster with the above clusterState. The way in which the
comment|// cluster is created (constructor code) would make sure the indices of
comment|// the servers are in the order in which it is inserted in the clusterState
comment|// map (linkedhashmap is important).
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
comment|// check whether moving region1 from servers[1] to servers[2] would lower availability
name|assertTrue
argument_list|(
operator|!
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri1
argument_list|,
name|servers
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// now move region1 from servers[0] to servers[2]
name|cluster
operator|.
name|doAction
argument_list|(
operator|new
name|MoveRegionAction
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// check that the numMaxRegionsPerTable for "table" has increased to 2
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cluster
operator|.
name|numMaxRegionsPerTable
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// now repeat check whether moving region1 from servers[1] to servers[2]
comment|// would lower availability
name|assertTrue
argument_list|(
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri1
argument_list|,
name|servers
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// start over again
name|clusterState
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|list3
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|RegionInfo
name|hri4
init|=
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|hri3
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|list3
operator|.
name|add
argument_list|(
name|hri4
argument_list|)
expr_stmt|;
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|0
index|]
argument_list|,
name|list0
argument_list|)
expr_stmt|;
comment|//servers[0], rack1 hosts region1
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|5
index|]
argument_list|,
name|list1
argument_list|)
expr_stmt|;
comment|//servers[5], rack2 hosts replica_of_region1
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|6
index|]
argument_list|,
name|list2
argument_list|)
expr_stmt|;
comment|//servers[6], rack2 hosts region2
name|clusterState
operator|.
name|put
argument_list|(
name|servers
index|[
literal|12
index|]
argument_list|,
name|list3
argument_list|)
expr_stmt|;
comment|//servers[12], rack3 hosts replica_of_region2
comment|// create a cluster with the above clusterState
name|cluster
operator|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|rackManager
argument_list|)
expr_stmt|;
comment|// check whether a move of replica_of_region2 from servers[12],rack3 to servers[0],rack1 would
comment|// lower the availability
name|assertTrue
argument_list|(
operator|!
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri4
argument_list|,
name|servers
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// now move region2 from servers[6],rack2 to servers[0],rack1
name|cluster
operator|.
name|doAction
argument_list|(
operator|new
name|MoveRegionAction
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// now repeat check if replica_of_region2 from servers[12],rack3 to servers[0],rack1 would
comment|// lower the availability
name|assertTrue
argument_list|(
name|cluster
operator|.
name|wouldLowerAvailability
argument_list|(
name|hri3
argument_list|,
name|servers
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|getListOfServerNames
parameter_list|(
specifier|final
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|sals
parameter_list|)
block|{
return|return
name|sals
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|ServerAndLoad
operator|::
name|getServerName
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Asserts a valid retained assignment plan.    *<p>    * Must meet the following conditions:    *<ul>    *<li>Every input region has an assignment, and to an online server    *<li>If a region had an existing assignment to a server with the same    * address a a currently online server, it will be assigned to it    *</ul>    * @param existing    * @param servers    * @param assignment    */
specifier|private
name|void
name|assertRetainedAssignment
parameter_list|(
name|Map
argument_list|<
name|RegionInfo
argument_list|,
name|ServerName
argument_list|>
name|existing
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|assignment
parameter_list|)
block|{
comment|// Verify condition 1, every region assigned, and to online server
name|Set
argument_list|<
name|ServerName
argument_list|>
name|onlineServerSet
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|RegionInfo
argument_list|>
name|assignedRegions
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|RegionInfo
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|a
range|:
name|assignment
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"Region assigned to server that was not listed as online"
argument_list|,
name|onlineServerSet
operator|.
name|contains
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|r
range|:
name|a
operator|.
name|getValue
argument_list|()
control|)
name|assignedRegions
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|existing
operator|.
name|size
argument_list|()
argument_list|,
name|assignedRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify condition 2, if server had existing assignment, must have same
name|Set
argument_list|<
name|String
argument_list|>
name|onlineHostNames
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|servers
control|)
block|{
name|onlineHostNames
operator|.
name|add
argument_list|(
name|s
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|a
range|:
name|assignment
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|assignedTo
init|=
name|a
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionInfo
name|r
range|:
name|a
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ServerName
name|address
init|=
name|existing
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
operator|&&
name|onlineHostNames
operator|.
name|contains
argument_list|(
name|address
operator|.
name|getHostname
argument_list|()
argument_list|)
condition|)
block|{
comment|// this region was prevously assigned somewhere, and that
comment|// host is still around, then it should be re-assigned on the
comment|// same host
name|assertEquals
argument_list|(
name|address
operator|.
name|getHostname
argument_list|()
argument_list|,
name|assignedTo
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testClusterServersWithSameHostPort
parameter_list|()
block|{
comment|// tests whether the BaseLoadBalancer.Cluster can be constructed with servers
comment|// sharing same host and port
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getListOfServerNames
argument_list|(
name|randomServers
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
literal|101
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assignRegions
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// construct another list of servers, but sharing same hosts and ports
name|List
argument_list|<
name|ServerName
argument_list|>
name|oldServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|servers
control|)
block|{
comment|// The old server would have had same host and port, but different start code!
name|oldServers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|,
name|sn
operator|.
name|getPort
argument_list|()
argument_list|,
name|sn
operator|.
name|getStartcode
argument_list|()
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|regions
operator|=
name|randomRegions
argument_list|(
literal|9
argument_list|)
expr_stmt|;
comment|// some more regions
name|assignRegions
argument_list|(
name|regions
argument_list|,
name|oldServers
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// should not throw exception:
name|BaseLoadBalancer
operator|.
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|101
operator|+
literal|9
argument_list|,
name|cluster
operator|.
name|numRegions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cluster
operator|.
name|numServers
argument_list|)
expr_stmt|;
comment|// only 10 servers because they share the same host + port
block|}
specifier|private
name|void
name|assignRegions
parameter_list|(
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|sn
init|=
name|servers
operator|.
name|get
argument_list|(
name|i
operator|%
name|servers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsOfServer
init|=
name|clusterState
operator|.
name|get
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsOfServer
operator|==
literal|null
condition|)
block|{
name|regionsOfServer
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|clusterState
operator|.
name|put
argument_list|(
name|sn
argument_list|,
name|regionsOfServer
argument_list|)
expr_stmt|;
block|}
name|regionsOfServer
operator|.
name|add
argument_list|(
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testClusterRegionLocations
parameter_list|()
block|{
comment|// tests whether region locations are handled correctly in Cluster
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getListOfServerNames
argument_list|(
name|randomServers
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
literal|101
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|assignRegions
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// mock block locality for some regions
name|RegionLocationFinder
name|locationFinder
init|=
name|mock
argument_list|(
name|RegionLocationFinder
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// block locality: region:0   => {server:0}
comment|//                 region:1   => {server:0, server:1}
comment|//                 region:42 => {server:4, server:9, server:5}
name|when
argument_list|(
name|locationFinder
operator|.
name|getTopBlockLocations
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|locationFinder
operator|.
name|getTopBlockLocations
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|servers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|locationFinder
operator|.
name|getTopBlockLocations
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|servers
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
name|servers
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|locationFinder
operator|.
name|getTopBlockLocations
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|43
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// this server does not exists in clusterStatus
name|BaseLoadBalancer
operator|.
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
name|locationFinder
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|r0
init|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|cluster
operator|.
name|regions
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// this is ok, it is just a test
name|int
name|r1
init|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|cluster
operator|.
name|regions
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|r10
init|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|cluster
operator|.
name|regions
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|r42
init|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|cluster
operator|.
name|regions
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|42
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|r43
init|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|cluster
operator|.
name|regions
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|43
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|s0
init|=
name|cluster
operator|.
name|serversToIndex
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|s1
init|=
name|cluster
operator|.
name|serversToIndex
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|s4
init|=
name|cluster
operator|.
name|serversToIndex
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|s5
init|=
name|cluster
operator|.
name|serversToIndex
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|s9
init|=
name|cluster
operator|.
name|serversToIndex
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|9
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
decl_stmt|;
comment|// region 0 locations
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r0
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s0
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// region 1 locations
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r1
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s0
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r1
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r1
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// region 10 locations
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r10
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// region 42 locations
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r42
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s4
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r42
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s9
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r42
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s5
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r42
index|]
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// region 43 locations
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r43
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r43
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

