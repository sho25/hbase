begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|balancer
operator|.
name|BaseLoadBalancer
operator|.
name|Cluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestBaseLoadBalancer
extends|extends
name|BalancerTestBase
block|{
specifier|private
specifier|static
name|LoadBalancer
name|loadBalancer
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStochasticLoadBalancer
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
index|[]
index|[]
name|regionsAndServersMocks
init|=
operator|new
name|int
index|[]
index|[]
block|{
comment|// { num regions, num servers }
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|1
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|2
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|3
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|25
block|,
literal|3
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|2
block|,
literal|100
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|12
block|,
literal|10
block|}
block|,
operator|new
name|int
index|[]
block|{
literal|12
block|,
literal|100
block|}
block|, }
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeAllTests
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|loadBalancer
operator|=
operator|new
name|MockBalancer
argument_list|()
expr_stmt|;
name|loadBalancer
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|MockBalancer
extends|extends
name|BaseLoadBalancer
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RegionPlan
argument_list|>
name|balanceCluster
parameter_list|(
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Tests immediate assignment.    *    * Invariant is that all regions have an assignment.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testImmediateAssignment
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
index|[]
name|mock
range|:
name|regionsAndServersMocks
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"testImmediateAssignment with "
operator|+
name|mock
index|[
literal|0
index|]
operator|+
literal|" regions and "
operator|+
name|mock
index|[
literal|1
index|]
operator|+
literal|" servers"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
name|mock
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers
init|=
name|randomServers
argument_list|(
name|mock
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|list
init|=
name|getListOfServerNames
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|assignments
init|=
name|loadBalancer
operator|.
name|immediateAssignment
argument_list|(
name|regions
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|assertImmediateAssignment
argument_list|(
name|regions
argument_list|,
name|list
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
name|returnRegions
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|returnServers
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * All regions have an assignment.    * @param regions    * @param servers    * @param assignments    */
specifier|private
name|void
name|assertImmediateAssignment
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|assignments
parameter_list|)
block|{
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|assertTrue
argument_list|(
name|assignments
operator|.
name|containsKey
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Tests the bulk assignment used during cluster startup.    *    * Round-robin. Should yield a balanced cluster so same invariant as the load    * balancer holds, all servers holding either floor(avg) or ceiling(avg).    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testBulkAssignment
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
index|[]
name|mock
range|:
name|regionsAndServersMocks
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"testBulkAssignment with "
operator|+
name|mock
index|[
literal|0
index|]
operator|+
literal|" regions and "
operator|+
name|mock
index|[
literal|1
index|]
operator|+
literal|" servers"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
name|mock
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers
init|=
name|randomServers
argument_list|(
name|mock
index|[
literal|1
index|]
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|list
init|=
name|getListOfServerNames
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignments
init|=
name|loadBalancer
operator|.
name|roundRobinAssignment
argument_list|(
name|regions
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|float
name|average
init|=
operator|(
name|float
operator|)
name|regions
operator|.
name|size
argument_list|()
operator|/
name|servers
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|min
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|average
argument_list|)
decl_stmt|;
name|int
name|max
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|average
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignments
operator|!=
literal|null
operator|&&
operator|!
name|assignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionList
range|:
name|assignments
operator|.
name|values
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|min
operator|||
name|regionList
operator|.
name|size
argument_list|()
operator|==
name|max
argument_list|)
expr_stmt|;
block|}
block|}
name|returnRegions
argument_list|(
name|regions
argument_list|)
expr_stmt|;
name|returnServers
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the cluster startup bulk assignment which attempts to retain    * assignment info.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testRetainAssignment
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test simple case where all same servers are there
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers
init|=
name|randomServers
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|existing
init|=
operator|new
name|TreeMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|sn
init|=
name|servers
operator|.
name|get
argument_list|(
name|i
operator|%
name|servers
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// The old server would have had same host and port, but different
comment|// start code!
name|ServerName
name|snWithOldStartCode
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|,
name|sn
operator|.
name|getPort
argument_list|()
argument_list|,
name|sn
operator|.
name|getStartcode
argument_list|()
operator|-
literal|10
argument_list|)
decl_stmt|;
name|existing
operator|.
name|put
argument_list|(
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|snWithOldStartCode
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|listOfServerNames
init|=
name|getListOfServerNames
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignment
init|=
name|loadBalancer
operator|.
name|retainAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|)
decl_stmt|;
name|assertRetainedAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
comment|// Include two new servers that were not there before
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers2
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerAndLoad
argument_list|>
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|servers2
operator|.
name|add
argument_list|(
name|randomServer
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|servers2
operator|.
name|add
argument_list|(
name|randomServer
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|listOfServerNames
operator|=
name|getListOfServerNames
argument_list|(
name|servers2
argument_list|)
expr_stmt|;
name|assignment
operator|=
name|loadBalancer
operator|.
name|retainAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|)
expr_stmt|;
name|assertRetainedAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
comment|// Remove two of the servers that were previously there
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|servers3
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerAndLoad
argument_list|>
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|servers3
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|servers3
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|listOfServerNames
operator|=
name|getListOfServerNames
argument_list|(
name|servers3
argument_list|)
expr_stmt|;
name|assignment
operator|=
name|loadBalancer
operator|.
name|retainAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|)
expr_stmt|;
name|assertRetainedAssignment
argument_list|(
name|existing
argument_list|,
name|listOfServerNames
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|ServerName
argument_list|>
name|getListOfServerNames
parameter_list|(
specifier|final
name|List
argument_list|<
name|ServerAndLoad
argument_list|>
name|sals
parameter_list|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerAndLoad
name|e
range|:
name|sals
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|e
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**    * Asserts a valid retained assignment plan.    *<p>    * Must meet the following conditions:    *<ul>    *<li>Every input region has an assignment, and to an online server    *<li>If a region had an existing assignment to a server with the same    * address a a currently online server, it will be assigned to it    *</ul>    * @param existing    * @param servers    * @param assignment    */
specifier|private
name|void
name|assertRetainedAssignment
parameter_list|(
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|existing
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignment
parameter_list|)
block|{
comment|// Verify condition 1, every region assigned, and to online server
name|Set
argument_list|<
name|ServerName
argument_list|>
name|onlineServerSet
init|=
operator|new
name|TreeSet
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|servers
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|HRegionInfo
argument_list|>
name|assignedRegions
init|=
operator|new
name|TreeSet
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|a
range|:
name|assignment
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"Region assigned to server that was not listed as online"
argument_list|,
name|onlineServerSet
operator|.
name|contains
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|r
range|:
name|a
operator|.
name|getValue
argument_list|()
control|)
name|assignedRegions
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|existing
operator|.
name|size
argument_list|()
argument_list|,
name|assignedRegions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify condition 2, if server had existing assignment, must have same
name|Set
argument_list|<
name|String
argument_list|>
name|onlineHostNames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|s
range|:
name|servers
control|)
block|{
name|onlineHostNames
operator|.
name|add
argument_list|(
name|s
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|a
range|:
name|assignment
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
name|assignedTo
init|=
name|a
operator|.
name|getKey
argument_list|()
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|r
range|:
name|a
operator|.
name|getValue
argument_list|()
control|)
block|{
name|ServerName
name|address
init|=
name|existing
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|address
operator|!=
literal|null
operator|&&
name|onlineHostNames
operator|.
name|contains
argument_list|(
name|address
operator|.
name|getHostname
argument_list|()
argument_list|)
condition|)
block|{
comment|// this region was prevously assigned somewhere, and that
comment|// host is still around, then it should be re-assigned on the
comment|// same host
name|assertEquals
argument_list|(
name|address
operator|.
name|getHostname
argument_list|()
argument_list|,
name|assignedTo
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClusterServersWithSameHostPort
parameter_list|()
block|{
comment|// tests whether the BaseLoadBalancer.Cluster can be constructed with servers
comment|// sharing same host and port
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getListOfServerNames
argument_list|(
name|randomServers
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
literal|101
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|assignRegions
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// construct another list of servers, but sharing same hosts and ports
name|List
argument_list|<
name|ServerName
argument_list|>
name|oldServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|servers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|servers
control|)
block|{
comment|// The old server would have had same host and port, but different start code!
name|oldServers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
name|sn
operator|.
name|getHostname
argument_list|()
argument_list|,
name|sn
operator|.
name|getPort
argument_list|()
argument_list|,
name|sn
operator|.
name|getStartcode
argument_list|()
operator|-
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|regions
operator|=
name|randomRegions
argument_list|(
literal|9
argument_list|)
expr_stmt|;
comment|// some more regions
name|assignRegions
argument_list|(
name|regions
argument_list|,
name|oldServers
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// should not throw exception:
name|BaseLoadBalancer
operator|.
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|101
operator|+
literal|9
argument_list|,
name|cluster
operator|.
name|numRegions
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|cluster
operator|.
name|numServers
argument_list|)
expr_stmt|;
comment|// only 10 servers because they share the same host + port
block|}
specifier|private
name|void
name|assignRegions
parameter_list|(
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
parameter_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|sn
init|=
name|servers
operator|.
name|get
argument_list|(
name|i
operator|%
name|servers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regionsOfServer
init|=
name|clusterState
operator|.
name|get
argument_list|(
name|sn
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsOfServer
operator|==
literal|null
condition|)
block|{
name|regionsOfServer
operator|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|clusterState
operator|.
name|put
argument_list|(
name|sn
argument_list|,
name|regionsOfServer
argument_list|)
expr_stmt|;
block|}
name|regionsOfServer
operator|.
name|add
argument_list|(
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClusterRegionLocations
parameter_list|()
block|{
comment|// tests whether region locations are handled correctly in Cluster
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getListOfServerNames
argument_list|(
name|randomServers
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|randomRegions
argument_list|(
literal|101
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|clusterState
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|assignRegions
argument_list|(
name|regions
argument_list|,
name|servers
argument_list|,
name|clusterState
argument_list|)
expr_stmt|;
comment|// mock block locality for some regions
name|RegionLocationFinder
name|locationFinder
init|=
name|mock
argument_list|(
name|RegionLocationFinder
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// block locality: region:0   => {server:0}
comment|//                 region:1   => {server:0, server:1}
comment|//                 region:42 => {server:4, server:9, server:5}
name|when
argument_list|(
name|locationFinder
operator|.
name|getTopBlockLocations
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|locationFinder
operator|.
name|getTopBlockLocations
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|servers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|locationFinder
operator|.
name|getTopBlockLocations
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|42
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|servers
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|,
name|servers
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|locationFinder
operator|.
name|getTopBlockLocations
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|43
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// this server does not exists in clusterStatus
name|BaseLoadBalancer
operator|.
name|Cluster
name|cluster
init|=
operator|new
name|Cluster
argument_list|(
name|clusterState
argument_list|,
literal|null
argument_list|,
name|locationFinder
argument_list|)
decl_stmt|;
name|int
name|r0
init|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|cluster
operator|.
name|regions
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// this is ok, it is just a test
name|int
name|r1
init|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|cluster
operator|.
name|regions
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|r10
init|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|cluster
operator|.
name|regions
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|r42
init|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|cluster
operator|.
name|regions
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|42
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|r43
init|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|cluster
operator|.
name|regions
argument_list|,
name|regions
operator|.
name|get
argument_list|(
literal|43
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|s0
init|=
name|cluster
operator|.
name|serversToIndex
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|s1
init|=
name|cluster
operator|.
name|serversToIndex
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|s4
init|=
name|cluster
operator|.
name|serversToIndex
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|s5
init|=
name|cluster
operator|.
name|serversToIndex
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|s9
init|=
name|cluster
operator|.
name|serversToIndex
operator|.
name|get
argument_list|(
name|servers
operator|.
name|get
argument_list|(
literal|9
argument_list|)
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
decl_stmt|;
comment|// region 0 locations
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r0
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s0
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r0
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// region 1 locations
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r1
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s0
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r1
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s1
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r1
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// region 10 locations
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r10
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// region 42 locations
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r42
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s4
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r42
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s9
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r42
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s5
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r42
index|]
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// region 43 locations
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r43
index|]
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|cluster
operator|.
name|regionLocations
index|[
name|r43
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

