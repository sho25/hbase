begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureEnv
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
operator|.
name|MasterProcedureScheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureSuspendedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|NoopProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSyncReplicationReplayWALManager
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSyncReplicationReplayWALManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|SyncReplicationReplayWALManager
name|manager
decl_stmt|;
specifier|private
name|MasterProcedureScheduler
name|scheduler
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|ServerName
argument_list|>
name|onlineServers
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ServerListener
argument_list|>
name|listeners
decl_stmt|;
specifier|private
name|Queue
argument_list|<
name|Procedure
argument_list|<
name|?
argument_list|>
argument_list|>
name|wokenProcedures
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
throws|,
name|ReplicationException
block|{
name|wokenProcedures
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
name|onlineServers
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
name|listeners
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|ServerManager
name|serverManager
init|=
name|mock
argument_list|(
name|ServerManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|inv
lambda|->
name|listeners
operator|.
name|add
argument_list|(
name|inv
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|serverManager
argument_list|)
operator|.
name|registerListener
argument_list|(
name|any
argument_list|(
name|ServerListener
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ServerMetrics
name|serverMetrics
init|=
name|mock
argument_list|(
name|ServerMetrics
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
name|inv
lambda|->
name|onlineServers
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Function
operator|.
name|identity
argument_list|()
argument_list|,
name|k
lambda|->
name|serverMetrics
argument_list|)
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|serverManager
argument_list|)
operator|.
name|getOnlineServers
argument_list|()
expr_stmt|;
name|MasterFileSystem
name|mfs
init|=
name|mock
argument_list|(
name|MasterFileSystem
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mfs
operator|.
name|getFileSystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mfs
operator|.
name|getWALRootDir
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|=
name|mock
argument_list|(
name|MasterProcedureScheduler
operator|.
name|class
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
name|event
init|=
operator|(
operator|(
name|ProcedureEvent
argument_list|<
name|?
argument_list|>
index|[]
operator|)
name|invocation
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
operator|)
index|[
literal|0
index|]
decl_stmt|;
name|event
operator|.
name|wakeInternal
argument_list|(
operator|new
name|MasterProcedureScheduler
argument_list|(
name|pid
lambda|->
literal|null
argument_list|)
block|{            @
name|Override
specifier|public
name|void
name|addFront
argument_list|(
name|Iterator
argument_list|<
name|Procedure
argument_list|>
name|procedureIterator
argument_list|)
block|{
name|procedureIterator
operator|.
name|forEachRemaining
argument_list|(
name|wokenProcedures
operator|::
name|add
argument_list|)
block|;           }
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|scheduler
argument_list|)
operator|.
name|wakeEvents
argument_list|(
name|any
argument_list|(
name|ProcedureEvent
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
name|MasterProcedureEnv
name|env
init|=
name|mock
argument_list|(
name|MasterProcedureEnv
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|env
operator|.
name|getProcedureScheduler
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|ProcedureExecutor
argument_list|<
name|MasterProcedureEnv
argument_list|>
name|procExec
init|=
name|mock
argument_list|(
name|ProcedureExecutor
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|procExec
operator|.
name|getEnvironment
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|MasterServices
name|services
init|=
name|mock
argument_list|(
name|MasterServices
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|services
operator|.
name|getServerManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|serverManager
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|services
operator|.
name|getMasterFileSystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mfs
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|services
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|procExec
argument_list|)
expr_stmt|;
name|manager
operator|=
operator|new
name|SyncReplicationReplayWALManager
argument_list|(
name|services
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|listeners
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUsedWorkers
parameter_list|()
throws|throws
name|ProcedureSuspendedException
block|{
name|String
name|peerId1
init|=
literal|"1"
decl_stmt|;
name|String
name|peerId2
init|=
literal|"2"
decl_stmt|;
name|ServerName
name|sn1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"host1"
argument_list|,
literal|123
argument_list|,
literal|12345
argument_list|)
decl_stmt|;
name|ServerName
name|sn2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"host2"
argument_list|,
literal|234
argument_list|,
literal|23456
argument_list|)
decl_stmt|;
name|ServerName
name|sn3
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"host3"
argument_list|,
literal|345
argument_list|,
literal|34567
argument_list|)
decl_stmt|;
name|onlineServers
operator|.
name|add
argument_list|(
name|sn1
argument_list|)
expr_stmt|;
name|manager
operator|.
name|registerPeer
argument_list|(
name|peerId1
argument_list|)
expr_stmt|;
name|manager
operator|.
name|registerPeer
argument_list|(
name|peerId2
argument_list|)
expr_stmt|;
comment|// confirm that different peer ids does not affect each other
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|manager
operator|.
name|acquirePeerWorker
argument_list|(
name|peerId1
argument_list|,
operator|new
name|NoopProcedure
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|manager
operator|.
name|acquirePeerWorker
argument_list|(
name|peerId2
argument_list|,
operator|new
name|NoopProcedure
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|onlineServers
operator|.
name|add
argument_list|(
name|sn2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|manager
operator|.
name|acquirePeerWorker
argument_list|(
name|peerId1
argument_list|,
operator|new
name|NoopProcedure
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn2
argument_list|,
name|manager
operator|.
name|acquirePeerWorker
argument_list|(
name|peerId2
argument_list|,
operator|new
name|NoopProcedure
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NoopProcedure
argument_list|<
name|?
argument_list|>
name|proc
init|=
operator|new
name|NoopProcedure
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|manager
operator|.
name|acquirePeerWorker
argument_list|(
name|peerId1
argument_list|,
name|proc
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should suspend"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProcedureSuspendedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|manager
operator|.
name|releasePeerWorker
argument_list|(
name|peerId1
argument_list|,
name|sn1
argument_list|,
name|scheduler
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wokenProcedures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|proc
argument_list|,
name|wokenProcedures
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sn1
argument_list|,
name|manager
operator|.
name|acquirePeerWorker
argument_list|(
name|peerId1
argument_list|,
operator|new
name|NoopProcedure
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|NoopProcedure
argument_list|<
name|?
argument_list|>
name|proc1
init|=
operator|new
name|NoopProcedure
argument_list|<>
argument_list|()
decl_stmt|;
name|NoopProcedure
argument_list|<
name|?
argument_list|>
name|proc2
init|=
operator|new
name|NoopProcedure
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|manager
operator|.
name|acquirePeerWorker
argument_list|(
name|peerId1
argument_list|,
name|proc1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should suspend"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProcedureSuspendedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|manager
operator|.
name|acquirePeerWorker
argument_list|(
name|peerId1
argument_list|,
name|proc2
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should suspend"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ProcedureSuspendedException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|listeners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|serverAdded
argument_list|(
name|sn3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|wokenProcedures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|proc2
argument_list|,
name|wokenProcedures
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|proc1
argument_list|,
name|wokenProcedures
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

