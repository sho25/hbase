begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one or more contributor license  * agreements. See the NOTICE file distributed with this work for additional information regarding  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License. You may obtain a  * copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable  * law or agreed to in writing, software distributed under the License is distributed on an "AS IS"  * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License  * for the specific language governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaTableAccessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationPeerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationQueueStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationStorageFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|hbck
operator|.
name|HbckTestingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestHBaseFsckCleanReplicationBarriers
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestHBaseFsckCleanReplicationBarriers
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|PEER_1
init|=
literal|"1"
decl_stmt|,
name|PEER_2
init|=
literal|"2"
decl_stmt|;
specifier|private
specifier|static
name|ReplicationQueueStorage
name|QUEUE_STORAGE
decl_stmt|;
specifier|private
specifier|static
name|String
name|WAL_FILE_NAME
init|=
literal|"test.wal"
decl_stmt|;
specifier|private
specifier|static
name|String
name|TABLE_NAME
init|=
literal|"test"
decl_stmt|;
specifier|private
specifier|static
name|String
name|COLUMN_FAMILY
init|=
literal|"info"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QUEUE_STORAGE
operator|=
name|ReplicationStorageFactory
operator|.
name|getReplicationQueueStorage
argument_list|(
name|UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
argument_list|,
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|createPeer
argument_list|()
expr_stmt|;
name|QUEUE_STORAGE
operator|.
name|addWAL
argument_list|(
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|PEER_1
argument_list|,
name|WAL_FILE_NAME
argument_list|)
expr_stmt|;
name|QUEUE_STORAGE
operator|.
name|addWAL
argument_list|(
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|PEER_2
argument_list|,
name|WAL_FILE_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanReplicationBarrierWithNonExistTable
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME
operator|+
literal|"_non"
argument_list|)
decl_stmt|;
name|boolean
name|cleaned
init|=
name|HbckTestingUtil
operator|.
name|cleanReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanReplicationBarrierWithDeletedTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME
operator|+
literal|"_deleted"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionInfos
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// only write some barriers into meta table
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|110
condition|;
name|i
operator|++
control|)
block|{
name|RegionInfo
name|regionInfo
init|=
name|RegionInfoBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setStartKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|setEndKey
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|regionInfos
operator|.
name|add
argument_list|(
name|regionInfo
argument_list|)
expr_stmt|;
name|addStateAndBarrier
argument_list|(
name|regionInfo
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|updatePushedSeqId
argument_list|(
name|regionInfo
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check if there is lastPushedId"
argument_list|,
literal|10
argument_list|,
name|QUEUE_STORAGE
operator|.
name|getLastSequenceId
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|PEER_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check if there is lastPushedId"
argument_list|,
literal|10
argument_list|,
name|QUEUE_STORAGE
operator|.
name|getLastSequenceId
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|PEER_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Scan
name|barrierScan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|barrierScan
operator|.
name|setCaching
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|barrierScan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|)
expr_stmt|;
name|barrierScan
operator|.
name|withStartRow
argument_list|(
name|MetaTableAccessor
operator|.
name|getTableStartRowForMeta
argument_list|(
name|tableName
argument_list|,
name|MetaTableAccessor
operator|.
name|QueryType
operator|.
name|REGION
argument_list|)
argument_list|)
operator|.
name|withStopRow
argument_list|(
name|MetaTableAccessor
operator|.
name|getTableStopRowForMeta
argument_list|(
name|tableName
argument_list|,
name|MetaTableAccessor
operator|.
name|QueryType
operator|.
name|REGION
argument_list|)
argument_list|)
expr_stmt|;
name|Result
name|result
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|MetaTableAccessor
operator|.
name|getMetaHTable
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|getScanner
argument_list|(
name|barrierScan
argument_list|)
init|)
block|{
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|MetaTableAccessor
operator|.
name|getReplicationBarriers
argument_list|(
name|result
argument_list|)
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|cleaned
init|=
name|HbckTestingUtil
operator|.
name|cleanReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|regionInfos
control|)
block|{
name|assertEquals
argument_list|(
literal|"check if there is lastPushedId"
argument_list|,
operator|-
literal|1
argument_list|,
name|QUEUE_STORAGE
operator|.
name|getLastSequenceId
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|PEER_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check if there is lastPushedId"
argument_list|,
operator|-
literal|1
argument_list|,
name|QUEUE_STORAGE
operator|.
name|getLastSequenceId
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|PEER_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cleaned
operator|=
name|HbckTestingUtil
operator|.
name|cleanReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|region
range|:
name|regionInfos
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanReplicationBarrierWithExistTable
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|String
name|cf
init|=
name|COLUMN_FAMILY
decl_stmt|;
name|TableDescriptor
name|tableDescriptor
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cf
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setReplicationScope
argument_list|(
name|HConstants
operator|.
name|REPLICATION_SCOPE_LOCAL
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|,
name|Bytes
operator|.
name|split
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|256
argument_list|)
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|region
range|:
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
control|)
block|{
name|addStateAndBarrier
argument_list|(
name|region
argument_list|,
name|RegionState
operator|.
name|State
operator|.
name|OFFLINE
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|updatePushedSeqId
argument_list|(
name|region
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check if there is lastPushedId"
argument_list|,
literal|10
argument_list|,
name|QUEUE_STORAGE
operator|.
name|getLastSequenceId
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|PEER_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check if there is lastPushedId"
argument_list|,
literal|10
argument_list|,
name|QUEUE_STORAGE
operator|.
name|getLastSequenceId
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|PEER_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|cleaned
init|=
name|HbckTestingUtil
operator|.
name|cleanReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|region
range|:
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|"check if there is lastPushedId"
argument_list|,
operator|-
literal|1
argument_list|,
name|QUEUE_STORAGE
operator|.
name|getLastSequenceId
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|PEER_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"check if there is lastPushedId"
argument_list|,
operator|-
literal|1
argument_list|,
name|QUEUE_STORAGE
operator|.
name|getLastSequenceId
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|PEER_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cleaned
operator|=
name|HbckTestingUtil
operator|.
name|cleanReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cleaned
argument_list|)
expr_stmt|;
for|for
control|(
name|RegionInfo
name|region
range|:
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|MetaTableAccessor
operator|.
name|getReplicationBarrier
argument_list|(
name|UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|createPeer
parameter_list|()
throws|throws
name|IOException
block|{
name|ReplicationPeerConfig
name|rpc
init|=
name|ReplicationPeerConfig
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterKey
argument_list|(
name|UTIL
operator|.
name|getClusterKey
argument_list|()
argument_list|)
operator|.
name|setSerial
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|addReplicationPeer
argument_list|(
name|PEER_1
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|addReplicationPeer
argument_list|(
name|PEER_2
argument_list|,
name|rpc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addStateAndBarrier
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|RegionState
operator|.
name|State
name|state
parameter_list|,
name|long
modifier|...
name|barriers
parameter_list|)
throws|throws
name|IOException
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|region
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|STATE_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|state
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|barriers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|REPLICATION_BARRIER_FAMILY
argument_list|,
name|HConstants
operator|.
name|SEQNUM_QUALIFIER
argument_list|,
name|put
operator|.
name|getTimestamp
argument_list|()
operator|-
name|barriers
operator|.
name|length
operator|+
name|i
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|barriers
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
init|)
block|{
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updatePushedSeqId
parameter_list|(
name|RegionInfo
name|region
parameter_list|,
name|long
name|seqId
parameter_list|)
throws|throws
name|ReplicationException
block|{
name|QUEUE_STORAGE
operator|.
name|setWALPosition
argument_list|(
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|PEER_1
argument_list|,
name|WAL_FILE_NAME
argument_list|,
literal|10
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|seqId
argument_list|)
argument_list|)
expr_stmt|;
name|QUEUE_STORAGE
operator|.
name|setWALPosition
argument_list|(
name|UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
argument_list|,
name|PEER_2
argument_list|,
name|WAL_FILE_NAME
argument_list|,
literal|10
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|region
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|seqId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

