begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|NamespaceDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaHelperForTests
operator|.
name|NoFilesToDischarge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaHelperForTests
operator|.
name|SpaceQuotaSnapshotPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|HashMultimap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimap
import|;
end_import

begin_comment
comment|/**  * Test class for the {@link SnapshotQuotaObserverChore}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSnapshotQuotaObserverChore
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSnapshotQuotaObserverChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestSnapshotQuotaObserverChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|COUNTER
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|Admin
name|admin
decl_stmt|;
specifier|private
name|SpaceQuotaHelperForTests
name|helper
decl_stmt|;
specifier|private
name|HMaster
name|master
decl_stmt|;
specifier|private
name|SnapshotQuotaObserverChore
name|testChore
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|SpaceQuotaHelperForTests
operator|.
name|updateConfigForQuotas
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Clean up the compacted files faster than normal (15s instead of 2mins)
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hfile.compaction.discharger.interval"
argument_list|,
literal|15
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|conn
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|helper
operator|=
operator|new
name|SpaceQuotaHelperForTests
argument_list|(
name|TEST_UTIL
argument_list|,
name|testName
argument_list|,
name|COUNTER
argument_list|)
expr_stmt|;
name|master
operator|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
expr_stmt|;
name|helper
operator|.
name|removeAllQuotas
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|testChore
operator|=
operator|new
name|SnapshotQuotaObserverChore
argument_list|(
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|master
operator|.
name|getFileSystem
argument_list|()
argument_list|,
name|master
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotsFromTables
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tn1
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TableName
name|tn2
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|TableName
name|tn3
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Set a space quota on table 1 and 2 (but not 3)
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn1
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn2
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create snapshots on each table (we didn't write any data, so just skipflush)
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|tn1
operator|+
literal|"snapshot"
argument_list|,
name|tn1
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|tn2
operator|+
literal|"snapshot"
argument_list|,
name|tn2
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|tn3
operator|+
literal|"snapshot"
argument_list|,
name|tn3
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|mapping
init|=
name|testChore
operator|.
name|getSnapshotsToComputeSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mapping
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tn1
operator|+
literal|"snapshot"
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn1
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tn2
operator|+
literal|"snapshot"
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn2
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|tn2
operator|+
literal|"snapshot1"
argument_list|,
name|tn2
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|tn3
operator|+
literal|"snapshot1"
argument_list|,
name|tn3
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|mapping
operator|=
name|testChore
operator|.
name|getSnapshotsToComputeSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mapping
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tn1
operator|+
literal|"snapshot"
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn1
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tn2
operator|+
literal|"snapshot"
argument_list|,
name|tn2
operator|+
literal|"snapshot1"
argument_list|)
argument_list|)
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotsFromNamespaces
parameter_list|()
throws|throws
name|Exception
block|{
name|NamespaceDescriptor
name|ns
init|=
name|NamespaceDescriptor
operator|.
name|create
argument_list|(
literal|"snapshots_from_namespaces"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createNamespace
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|TableName
name|tn1
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TableName
name|tn2
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TableName
name|tn3
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Set a throttle quota on 'default' namespace
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleNamespace
argument_list|(
name|tn3
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set a user throttle quota
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|throttleUser
argument_list|(
literal|"user"
argument_list|,
name|ThrottleType
operator|.
name|WRITE_NUMBER
argument_list|,
literal|100
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set a space quota on the namespace
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|limitNamespaceSpace
argument_list|(
name|ns
operator|.
name|getName
argument_list|()
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create snapshots on each table (we didn't write any data, so just skipflush)
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|tn1
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"snapshot"
argument_list|,
name|tn1
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|tn2
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"snapshot"
argument_list|,
name|tn2
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|tn3
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"snapshot"
argument_list|,
name|tn3
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|mapping
init|=
name|testChore
operator|.
name|getSnapshotsToComputeSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mapping
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tn1
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"snapshot"
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn1
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tn2
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"snapshot"
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn2
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|tn2
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"snapshot1"
argument_list|,
name|tn2
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|tn3
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"snapshot2"
argument_list|,
name|tn3
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
name|mapping
operator|=
name|testChore
operator|.
name|getSnapshotsToComputeSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mapping
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn1
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tn1
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"snapshot"
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn1
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn2
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|tn2
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"snapshot"
argument_list|,
name|tn2
operator|.
name|getQualifierAsString
argument_list|()
operator|+
literal|"snapshot1"
argument_list|)
argument_list|)
argument_list|,
name|mapping
operator|.
name|get
argument_list|(
name|tn2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotSize
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table and set a quota
name|TableName
name|tn1
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn1
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write some data and flush it
name|helper
operator|.
name|writeData
argument_list|(
name|tn1
argument_list|,
literal|256L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_KILOBYTE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn1
argument_list|)
expr_stmt|;
specifier|final
name|long
name|snapshotSize
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tn1
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getStores
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|HStore
operator|::
name|getHFilesSize
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
comment|// Wait for the Master chore to run to see the usage (with a fudge factor)
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30_000
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn1
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|==
name|snapshotSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Create a snapshot on the table
specifier|final
name|String
name|snapshotName
init|=
name|tn1
operator|+
literal|"snapshot"
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName
argument_list|,
name|tn1
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get the snapshots
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|snapshotsToCompute
init|=
name|testChore
operator|.
name|getSnapshotsToComputeSize
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected to see the single snapshot: "
operator|+
name|snapshotsToCompute
argument_list|,
literal|1
argument_list|,
name|snapshotsToCompute
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get the size of our snapshot
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|namespaceSnapshotSizes
init|=
name|testChore
operator|.
name|computeSnapshotSizes
argument_list|(
name|snapshotsToCompute
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namespaceSnapshotSizes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|size
init|=
name|namespaceSnapshotSizes
operator|.
name|get
argument_list|(
name|tn1
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// The snapshot should take up no space since the table refers to it completely
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|size
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write some more data, flush it, and then major_compact the table
name|helper
operator|.
name|writeData
argument_list|(
name|tn1
argument_list|,
literal|256L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_KILOBYTE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tn1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test table should reflect it's original size since ingest was deterministic
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30_000
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn1
argument_list|)
block|{
specifier|private
specifier|final
name|long
name|regionSize
init|=
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tn1
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getStores
argument_list|()
operator|.
name|stream
argument_list|()
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|HStore
operator|::
name|getHFilesSize
argument_list|)
operator|.
name|sum
argument_list|()
decl_stmt|;
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current usage="
operator|+
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|+
literal|" snapshotSize="
operator|+
name|snapshotSize
argument_list|)
expr_stmt|;
comment|// The usage of table space consists of region size and snapshot size
return|return
name|closeInSize
argument_list|(
name|snapshot
operator|.
name|getUsage
argument_list|()
argument_list|,
name|snapshotSize
operator|+
name|regionSize
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_KILOBYTE
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Wait for no compacted files on the regions of our table
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30_000
argument_list|,
operator|new
name|NoFilesToDischarge
argument_list|(
name|TEST_UTIL
operator|.
name|getMiniHBaseCluster
argument_list|()
argument_list|,
name|tn1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Still should see only one snapshot
name|snapshotsToCompute
operator|=
name|testChore
operator|.
name|getSnapshotsToComputeSize
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected to see the single snapshot: "
operator|+
name|snapshotsToCompute
argument_list|,
literal|1
argument_list|,
name|snapshotsToCompute
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|namespaceSnapshotSizes
operator|=
name|testChore
operator|.
name|computeSnapshotSizes
argument_list|(
name|snapshotsToCompute
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|namespaceSnapshotSizes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|=
name|namespaceSnapshotSizes
operator|.
name|get
argument_list|(
name|tn1
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// The snapshot should take up the size the table originally took up
name|assertEquals
argument_list|(
name|snapshotSize
argument_list|,
name|size
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPersistingSnapshotsForNamespaces
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tn1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"ns1:tn1"
argument_list|)
decl_stmt|;
name|TableName
name|tn2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"ns1:tn2"
argument_list|)
decl_stmt|;
name|TableName
name|tn3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"ns2:tn1"
argument_list|)
decl_stmt|;
name|TableName
name|tn4
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"ns2:tn2"
argument_list|)
decl_stmt|;
name|TableName
name|tn5
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"tn1"
argument_list|)
decl_stmt|;
comment|// Shim in a custom factory to avoid computing snapshot sizes.
name|FileArchiverNotifierFactory
name|test
init|=
operator|new
name|FileArchiverNotifierFactory
argument_list|()
block|{
name|Map
argument_list|<
name|TableName
argument_list|,
name|Long
argument_list|>
name|tableToSize
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|tn1
argument_list|,
literal|1024L
argument_list|,
name|tn2
argument_list|,
literal|1024L
argument_list|,
name|tn3
argument_list|,
literal|512L
argument_list|,
name|tn4
argument_list|,
literal|1024L
argument_list|,
name|tn5
argument_list|,
literal|3072L
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|FileArchiverNotifier
name|get
parameter_list|(
name|Connection
name|conn
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|FileSystem
name|fs
parameter_list|,
name|TableName
name|tn
parameter_list|)
block|{
return|return
operator|new
name|FileArchiverNotifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|addArchivedFiles
parameter_list|(
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|fileSizes
parameter_list|)
throws|throws
name|IOException
block|{}
annotation|@
name|Override
specifier|public
name|long
name|computeAndStoreSnapshotSizes
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|currentSnapshots
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|tableToSize
operator|.
name|get
argument_list|(
name|tn
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|FileArchiverNotifierFactoryImpl
operator|.
name|setInstance
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|Multimap
argument_list|<
name|TableName
argument_list|,
name|String
argument_list|>
name|snapshotsToCompute
init|=
name|HashMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|snapshotsToCompute
operator|.
name|put
argument_list|(
name|tn1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|snapshotsToCompute
operator|.
name|put
argument_list|(
name|tn2
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|snapshotsToCompute
operator|.
name|put
argument_list|(
name|tn3
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|snapshotsToCompute
operator|.
name|put
argument_list|(
name|tn4
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|snapshotsToCompute
operator|.
name|put
argument_list|(
name|tn5
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|nsSizes
init|=
name|testChore
operator|.
name|computeSnapshotSizes
argument_list|(
name|snapshotsToCompute
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|nsSizes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2048L
argument_list|,
operator|(
name|long
operator|)
name|nsSizes
operator|.
name|get
argument_list|(
literal|"ns1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1536L
argument_list|,
operator|(
name|long
operator|)
name|nsSizes
operator|.
name|get
argument_list|(
literal|"ns2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3072L
argument_list|,
operator|(
name|long
operator|)
name|nsSizes
operator|.
name|get
argument_list|(
name|NamespaceDescriptor
operator|.
name|DEFAULT_NAMESPACE_NAME_STR
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|FileArchiverNotifierFactoryImpl
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBucketingFilesToSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table and set a quota
name|TableName
name|tn1
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn1
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write some data and flush it
name|helper
operator|.
name|writeData
argument_list|(
name|tn1
argument_list|,
literal|256L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_KILOBYTE
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn1
argument_list|)
expr_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|Long
argument_list|>
name|lastSeenSize
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Wait for the Master chore to run to see the usage (with a fudge factor)
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30_000
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn1
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
name|lastSeenSize
operator|.
name|set
argument_list|(
name|snapshot
operator|.
name|getUsage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>
literal|230L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_KILOBYTE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Create a snapshot on the table
specifier|final
name|String
name|snapshotName1
init|=
name|tn1
operator|+
literal|"snapshot1"
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName1
argument_list|,
name|tn1
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
comment|// Major compact the table to force a rewrite
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tn1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure that the snapshot owns the size
specifier|final
name|Table
name|quotaTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30_000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
name|QuotaTableUtil
operator|.
name|makeGetForSnapshotSize
argument_list|(
name|tn1
argument_list|,
name|snapshotName1
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|quotaTable
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|r
operator|.
name|advance
argument_list|()
expr_stmt|;
name|Cell
name|c
init|=
name|r
operator|.
name|current
argument_list|()
decl_stmt|;
return|return
name|lastSeenSize
operator|.
name|get
argument_list|()
operator|==
name|QuotaTableUtil
operator|.
name|parseSnapshotSize
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Create another snapshot on the table
specifier|final
name|String
name|snapshotName2
init|=
name|tn1
operator|+
literal|"snapshot2"
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
operator|new
name|SnapshotDescription
argument_list|(
name|snapshotName2
argument_list|,
name|tn1
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
argument_list|)
expr_stmt|;
comment|// Major compact the table to force a rewrite
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tn1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Make sure that the snapshot owns the size
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30_000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
name|Get
name|g
init|=
name|QuotaTableUtil
operator|.
name|makeGetForSnapshotSize
argument_list|(
name|tn1
argument_list|,
name|snapshotName2
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|quotaTable
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|r
operator|.
name|advance
argument_list|()
expr_stmt|;
name|Cell
name|c
init|=
name|r
operator|.
name|current
argument_list|()
decl_stmt|;
return|return
name|lastSeenSize
operator|.
name|get
argument_list|()
operator|==
name|QuotaTableUtil
operator|.
name|parseSnapshotSize
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
name|QuotaTableUtil
operator|.
name|createGetNamespaceSnapshotSize
argument_list|(
name|tn1
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|quotaTable
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|advance
argument_list|()
expr_stmt|;
name|long
name|size
init|=
name|QuotaTableUtil
operator|.
name|parseSnapshotSize
argument_list|(
name|r
operator|.
name|current
argument_list|()
argument_list|)
decl_stmt|;
comment|// Two snapshots of equal size.
name|assertEquals
argument_list|(
name|lastSeenSize
operator|.
name|get
argument_list|()
operator|*
literal|2
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**    * Computes if {@code size2} is within {@code delta} of {@code size1}, inclusive.    */
name|boolean
name|closeInSize
parameter_list|(
name|long
name|size1
parameter_list|,
name|long
name|size2
parameter_list|,
name|long
name|delta
parameter_list|)
block|{
name|long
name|lower
init|=
name|size1
operator|-
name|delta
decl_stmt|;
name|long
name|upper
init|=
name|size1
operator|+
name|delta
decl_stmt|;
return|return
name|lower
operator|<=
name|size2
operator|&&
name|size2
operator|<=
name|upper
return|;
block|}
block|}
end_class

end_unit

