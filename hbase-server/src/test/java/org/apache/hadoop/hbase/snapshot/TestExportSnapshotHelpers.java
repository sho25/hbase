begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|snapshot
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|SnapshotProtos
operator|.
name|SnapshotFileInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test Export Snapshot Tool helpers  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestExportSnapshotHelpers
block|{
comment|/**    * Verfy the result of getBalanceSplits() method.    * The result are groups of files, used as input list for the "export" mappers.    * All the groups should have similar amount of data.    *    * The input list is a pair of file path and length.    * The getBalanceSplits() function sort it by length,    * and assign to each group a file, going back and forth through the groups.    */
annotation|@
name|Test
specifier|public
name|void
name|testBalanceSplit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a list of files
name|List
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|(
literal|21
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<=
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|SnapshotFileInfo
name|fileInfo
init|=
name|SnapshotFileInfo
operator|.
name|newBuilder
argument_list|()
operator|.
name|setType
argument_list|(
name|SnapshotFileInfo
operator|.
name|Type
operator|.
name|HFILE
argument_list|)
operator|.
name|setHfile
argument_list|(
literal|"file-"
operator|+
name|i
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|files
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|(
name|fileInfo
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Create 5 groups (total size 210)
comment|//    group 0: 20, 11, 10,  1 (total size: 42)
comment|//    group 1: 19, 12,  9,  2 (total size: 42)
comment|//    group 2: 18, 13,  8,  3 (total size: 42)
comment|//    group 3: 17, 12,  7,  4 (total size: 42)
comment|//    group 4: 16, 11,  6,  5 (total size: 42)
name|List
argument_list|<
name|List
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
argument_list|>
name|splits
init|=
name|ExportSnapshot
operator|.
name|getBalancedSplits
argument_list|(
name|files
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|splits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|split0
init|=
operator|new
name|String
index|[]
block|{
literal|"file-20"
block|,
literal|"file-11"
block|,
literal|"file-10"
block|,
literal|"file-1"
block|,
literal|"file-0"
block|}
decl_stmt|;
name|verifyBalanceSplit
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|split0
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|String
index|[]
name|split1
init|=
operator|new
name|String
index|[]
block|{
literal|"file-19"
block|,
literal|"file-12"
block|,
literal|"file-9"
block|,
literal|"file-2"
block|}
decl_stmt|;
name|verifyBalanceSplit
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|split1
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|String
index|[]
name|split2
init|=
operator|new
name|String
index|[]
block|{
literal|"file-18"
block|,
literal|"file-13"
block|,
literal|"file-8"
block|,
literal|"file-3"
block|}
decl_stmt|;
name|verifyBalanceSplit
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|split2
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|String
index|[]
name|split3
init|=
operator|new
name|String
index|[]
block|{
literal|"file-17"
block|,
literal|"file-14"
block|,
literal|"file-7"
block|,
literal|"file-4"
block|}
decl_stmt|;
name|verifyBalanceSplit
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|split3
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|String
index|[]
name|split4
init|=
operator|new
name|String
index|[]
block|{
literal|"file-16"
block|,
literal|"file-15"
block|,
literal|"file-6"
block|,
literal|"file-5"
block|}
decl_stmt|;
name|verifyBalanceSplit
argument_list|(
name|splits
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|split4
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyBalanceSplit
parameter_list|(
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
argument_list|>
name|split
parameter_list|,
specifier|final
name|String
index|[]
name|expected
parameter_list|,
specifier|final
name|long
name|expectedSize
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|split
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Pair
argument_list|<
name|SnapshotFileInfo
argument_list|,
name|Long
argument_list|>
name|fileInfo
init|=
name|split
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|fileInfo
operator|.
name|getFirst
argument_list|()
operator|.
name|getHfile
argument_list|()
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|fileInfo
operator|.
name|getSecond
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|totalSize
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

