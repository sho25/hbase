begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|mob
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InterruptedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CorruptHFileException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|CellSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|InternalScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|KeyValueScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScannerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ShipperListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|ThroughputControlUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|throttle
operator|.
name|ThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|yetus
operator|.
name|audience
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class is used for testing only. The main purpose is to emulate  * random failures during MOB compaction process.  * Example of usage:  *<pre>{@code  * public class SomeTest {  *  *   public void initConfiguration(Configuration conf){  *     conf.set(MobStoreEngine.DEFAULT_MOB_COMPACTOR_CLASS_KEY,          FaultyMobStoreCompactor.class.getName());        conf.setDouble("hbase.mob.compaction.fault.probability", 0.1);  *   }  * }  * }</pre>  * @see org.apache.hadoop.hbase.mob.MobStressToolRunner on how to use and configure  *   this class.  *  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
specifier|public
class|class
name|FaultyMobStoreCompactor
extends|extends
name|DefaultMobStoreCompactor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FaultyMobStoreCompactor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|mobCounter
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|totalFailures
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|totalCompactions
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|AtomicLong
name|totalMajorCompactions
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|static
name|double
name|failureProb
init|=
literal|0.1d
decl_stmt|;
specifier|static
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|public
name|FaultyMobStoreCompactor
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|HStore
name|store
parameter_list|)
block|{
name|super
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
expr_stmt|;
name|failureProb
operator|=
name|conf
operator|.
name|getDouble
argument_list|(
literal|"hbase.mob.compaction.fault.probability"
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|performCompaction
parameter_list|(
name|FileDetails
name|fd
parameter_list|,
name|InternalScanner
name|scanner
parameter_list|,
name|CellSink
name|writer
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|boolean
name|cleanSeqId
parameter_list|,
name|ThroughputController
name|throughputController
parameter_list|,
name|boolean
name|major
parameter_list|,
name|int
name|numofFilesToCompact
parameter_list|)
throws|throws
name|IOException
block|{
name|totalCompactions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
name|major
condition|)
block|{
name|totalMajorCompactions
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
name|long
name|bytesWrittenProgressForCloseCheck
init|=
literal|0
decl_stmt|;
name|long
name|bytesWrittenProgressForLog
init|=
literal|0
decl_stmt|;
name|long
name|bytesWrittenProgressForShippedCall
init|=
literal|0
decl_stmt|;
comment|// Clear old mob references
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|isUserRequest
init|=
name|userRequest
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|compactMOBs
init|=
name|major
operator|&&
name|isUserRequest
decl_stmt|;
name|boolean
name|discardMobMiss
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|MobConstants
operator|.
name|MOB_UNSAFE_DISCARD_MISS_KEY
argument_list|,
name|MobConstants
operator|.
name|DEFAULT_MOB_DISCARD_MISS
argument_list|)
decl_stmt|;
name|boolean
name|mustFail
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|compactMOBs
condition|)
block|{
name|mobCounter
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|double
name|dv
init|=
name|rnd
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|dv
operator|<
name|failureProb
condition|)
block|{
name|mustFail
operator|=
literal|true
expr_stmt|;
name|totalFailures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
name|FileSystem
name|fs
init|=
name|store
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
comment|// Since scanner.next() can return 'false' but still be delivering data,
comment|// we have to use a do/while loop.
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Limit to "hbase.hstore.compaction.kv.max" (default 10) to avoid OOME
name|int
name|closeCheckSizeLimit
init|=
name|HStore
operator|.
name|getCloseCheckInterval
argument_list|()
decl_stmt|;
name|long
name|lastMillis
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|lastMillis
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
name|String
name|compactionName
init|=
name|ThroughputControlUtil
operator|.
name|getNameForThrottling
argument_list|(
name|store
argument_list|,
literal|"compaction"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
literal|0
decl_stmt|;
name|boolean
name|hasMore
decl_stmt|;
name|Path
name|path
init|=
name|MobUtils
operator|.
name|getMobFamilyPath
argument_list|(
name|conf
argument_list|,
name|store
operator|.
name|getTableName
argument_list|()
argument_list|,
name|store
operator|.
name|getColumnFamilyName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fileName
init|=
literal|null
decl_stmt|;
name|StoreFileWriter
name|mobFileWriter
init|=
literal|null
decl_stmt|;
name|long
name|mobCells
init|=
literal|0
decl_stmt|;
name|long
name|cellsCountCompactedToMob
init|=
literal|0
decl_stmt|,
name|cellsCountCompactedFromMob
init|=
literal|0
decl_stmt|;
name|long
name|cellsSizeCompactedToMob
init|=
literal|0
decl_stmt|,
name|cellsSizeCompactedFromMob
init|=
literal|0
decl_stmt|;
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
name|ScannerContext
name|scannerContext
init|=
name|ScannerContext
operator|.
name|newBuilder
argument_list|()
operator|.
name|setBatchLimit
argument_list|(
name|compactionKVMax
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|throughputController
operator|.
name|start
argument_list|(
name|compactionName
argument_list|)
expr_stmt|;
name|KeyValueScanner
name|kvs
init|=
operator|(
name|scanner
operator|instanceof
name|KeyValueScanner
operator|)
condition|?
operator|(
name|KeyValueScanner
operator|)
name|scanner
else|:
literal|null
decl_stmt|;
name|long
name|shippedCallSizeLimit
init|=
operator|(
name|long
operator|)
name|numofFilesToCompact
operator|*
name|this
operator|.
name|store
operator|.
name|getColumnFamilyDescriptor
argument_list|()
operator|.
name|getBlocksize
argument_list|()
decl_stmt|;
name|Cell
name|mobCell
init|=
literal|null
decl_stmt|;
name|long
name|counter
init|=
literal|0
decl_stmt|;
name|long
name|countFailAt
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|mustFail
condition|)
block|{
name|countFailAt
operator|=
name|rnd
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// randomly fail fast
block|}
try|try
block|{
try|try
block|{
name|mobFileWriter
operator|=
name|mobStore
operator|.
name|createWriterInTmp
argument_list|(
operator|new
name|Date
argument_list|(
name|fd
operator|.
name|latestPutTs
argument_list|)
argument_list|,
name|fd
operator|.
name|maxKeyCount
argument_list|,
name|compactionCompression
argument_list|,
name|store
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Bailing out
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to create mob writer, "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|compactMOBs
condition|)
block|{
comment|// Add the only reference we get for compact MOB case
comment|// because new store file will have only one MOB reference
comment|// in this case - of newly compacted MOB file
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|do
block|{
name|hasMore
operator|=
name|scanner
operator|.
name|next
argument_list|(
name|cells
argument_list|,
name|scannerContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|now
operator|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Cell
name|c
range|:
name|cells
control|)
block|{
name|counter
operator|++
expr_stmt|;
if|if
condition|(
name|compactMOBs
condition|)
block|{
if|if
condition|(
name|MobUtils
operator|.
name|isMobReferenceCell
argument_list|(
name|c
argument_list|)
condition|)
block|{
if|if
condition|(
name|counter
operator|==
name|countFailAt
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"INJECTED FAULT mobCounter={}"
argument_list|,
name|mobCounter
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CorruptHFileException
argument_list|(
literal|"injected fault"
argument_list|)
throw|;
block|}
name|String
name|fName
init|=
name|MobUtils
operator|.
name|getMobFileName
argument_list|(
name|c
argument_list|)
decl_stmt|;
comment|// Added to support migration
try|try
block|{
name|mobCell
operator|=
name|mobStore
operator|.
name|resolve
argument_list|(
name|c
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|getCell
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
if|if
condition|(
name|discardMobMiss
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Missing MOB cell: file={} not found"
argument_list|,
name|fName
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
throw|throw
name|fnfe
throw|;
block|}
block|}
if|if
condition|(
name|discardMobMiss
operator|&&
name|mobCell
operator|.
name|getValueLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Missing MOB cell value: file={} cell={}"
argument_list|,
name|fName
argument_list|,
name|mobCell
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|mobCell
operator|.
name|getValueLength
argument_list|()
operator|>
name|mobSizeThreshold
condition|)
block|{
comment|// put the mob data back to the store file
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|mobCell
argument_list|,
name|c
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|mobFileWriter
operator|.
name|append
argument_list|(
name|mobCell
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|MobUtils
operator|.
name|createMobRefCell
argument_list|(
name|mobCell
argument_list|,
name|fileName
argument_list|,
name|this
operator|.
name|mobStore
operator|.
name|getRefCellTags
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mobCells
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// If MOB value is less than threshold, append it directly to a store file
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|mobCell
argument_list|,
name|c
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|mobCell
argument_list|)
expr_stmt|;
name|cellsCountCompactedFromMob
operator|++
expr_stmt|;
name|cellsSizeCompactedFromMob
operator|+=
name|mobCell
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Not a MOB reference cell
name|int
name|size
init|=
name|c
operator|.
name|getValueLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|mobSizeThreshold
condition|)
block|{
name|mobFileWriter
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|MobUtils
operator|.
name|createMobRefCell
argument_list|(
name|c
argument_list|,
name|fileName
argument_list|,
name|this
operator|.
name|mobStore
operator|.
name|getRefCellTags
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mobCells
operator|++
expr_stmt|;
name|cellsCountCompactedToMob
operator|++
expr_stmt|;
name|cellsSizeCompactedToMob
operator|+=
name|c
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getTypeByte
argument_list|()
operator|!=
name|KeyValue
operator|.
name|Type
operator|.
name|Put
operator|.
name|getCode
argument_list|()
condition|)
block|{
comment|// Not a major compaction or major with MOB disabled
comment|// If the kv type is not put, directly write the cell
comment|// to the store file.
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|MobUtils
operator|.
name|isMobReferenceCell
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// Not a major MOB compaction, Put MOB reference
if|if
condition|(
name|MobUtils
operator|.
name|hasValidMobRefCellValue
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|int
name|size
init|=
name|MobUtils
operator|.
name|getMobValueLength
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|>
name|mobSizeThreshold
condition|)
block|{
comment|// If the value size is larger than the threshold, it's regarded as a mob. Since
comment|// its value is already in the mob file, directly write this cell to the store file
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Add MOB reference to a set
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|MobUtils
operator|.
name|getMobFileName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value is not larger than the threshold, it's not regarded a mob. Retrieve
comment|// the mob cell from the mob file, and write it back to the store file.
name|mobCell
operator|=
name|mobStore
operator|.
name|resolve
argument_list|(
name|c
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|getCell
argument_list|()
expr_stmt|;
if|if
condition|(
name|mobCell
operator|.
name|getValueLength
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// put the mob data back to the store file
name|PrivateCellUtil
operator|.
name|setSequenceId
argument_list|(
name|mobCell
argument_list|,
name|c
operator|.
name|getSequenceId
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|mobCell
argument_list|)
expr_stmt|;
name|cellsCountCompactedFromMob
operator|++
expr_stmt|;
name|cellsSizeCompactedFromMob
operator|+=
name|mobCell
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// If the value of a file is empty, there might be issues when retrieving,
comment|// directly write the cell to the store file, and leave it to be handled by the
comment|// next compaction.
name|LOG
operator|.
name|error
argument_list|(
literal|"Empty value for: "
operator|+
name|c
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Add MOB reference to a set
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|MobUtils
operator|.
name|getMobFileName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Corrupted MOB reference: {}"
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getValueLength
argument_list|()
operator|<=
name|mobSizeThreshold
condition|)
block|{
comment|// If the value size of a cell is not larger than the threshold, directly write it to
comment|// the store file.
name|writer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the value size of a cell is larger than the threshold, it's regarded as a mob,
comment|// write this cell to a mob file, and write the path to the store file.
name|mobCells
operator|++
expr_stmt|;
comment|// append the original keyValue in the mob file.
name|mobFileWriter
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Cell
name|reference
init|=
name|MobUtils
operator|.
name|createMobRefCell
argument_list|(
name|c
argument_list|,
name|fileName
argument_list|,
name|this
operator|.
name|mobStore
operator|.
name|getRefCellTags
argument_list|()
argument_list|)
decl_stmt|;
comment|// write the cell whose value is the path of a mob file to the store file.
name|writer
operator|.
name|append
argument_list|(
name|reference
argument_list|)
expr_stmt|;
name|cellsCountCompactedToMob
operator|++
expr_stmt|;
name|cellsSizeCompactedToMob
operator|+=
name|c
operator|.
name|getValueLength
argument_list|()
expr_stmt|;
comment|// Add ref we get for compact MOB case
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|len
init|=
name|c
operator|.
name|getSerializedSize
argument_list|()
decl_stmt|;
operator|++
name|progress
operator|.
name|currentCompactedKVs
expr_stmt|;
name|progress
operator|.
name|totalCompactedSize
operator|+=
name|len
expr_stmt|;
name|bytesWrittenProgressForShippedCall
operator|+=
name|len
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|bytesWrittenProgressForLog
operator|+=
name|len
expr_stmt|;
block|}
name|throughputController
operator|.
name|control
argument_list|(
name|compactionName
argument_list|,
name|len
argument_list|)
expr_stmt|;
comment|// check periodically to see if a system stop is requested
if|if
condition|(
name|closeCheckSizeLimit
operator|>
literal|0
condition|)
block|{
name|bytesWrittenProgressForCloseCheck
operator|+=
name|len
expr_stmt|;
if|if
condition|(
name|bytesWrittenProgressForCloseCheck
operator|>
name|closeCheckSizeLimit
condition|)
block|{
name|bytesWrittenProgressForCloseCheck
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|store
operator|.
name|areWritesEnabled
argument_list|()
condition|)
block|{
name|progress
operator|.
name|cancel
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|kvs
operator|!=
literal|null
operator|&&
name|bytesWrittenProgressForShippedCall
operator|>
name|shippedCallSizeLimit
condition|)
block|{
operator|(
operator|(
name|ShipperListener
operator|)
name|writer
operator|)
operator|.
name|beforeShipped
argument_list|()
expr_stmt|;
name|kvs
operator|.
name|shipped
argument_list|()
expr_stmt|;
name|bytesWrittenProgressForShippedCall
operator|=
literal|0
expr_stmt|;
block|}
block|}
comment|// Log the progress of long running compactions every minute if
comment|// logging at DEBUG level
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|now
operator|-
name|lastMillis
operator|)
operator|>=
name|COMPACTION_PROGRESS_LOG_INTERVAL
condition|)
block|{
name|String
name|rate
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%.2f"
argument_list|,
operator|(
name|bytesWrittenProgressForLog
operator|/
literal|1024.0
operator|)
operator|/
operator|(
operator|(
name|now
operator|-
name|lastMillis
operator|)
operator|/
literal|1000.0
operator|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Compaction progress: {} {}, rate={} KB/sec, throughputController is {}"
argument_list|,
name|compactionName
argument_list|,
name|progress
argument_list|,
name|rate
argument_list|,
name|throughputController
argument_list|)
expr_stmt|;
name|lastMillis
operator|=
name|now
expr_stmt|;
name|bytesWrittenProgressForLog
operator|=
literal|0
expr_stmt|;
block|}
block|}
name|cells
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|hasMore
condition|)
do|;
name|finished
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|progress
operator|.
name|cancel
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|InterruptedIOException
argument_list|(
literal|"Interrupted while control throughput of compacting "
operator|+
name|compactionName
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"MOB Stress Test FAILED, region: "
operator|+
name|store
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Mob compaction failed for region: "
operator|+
name|store
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
finally|finally
block|{
comment|// Clone last cell in the final because writer will append last cell when committing. If
comment|// don't clone here and once the scanner get closed, then the memory of last cell will be
comment|// released. (HBASE-22582)
operator|(
operator|(
name|ShipperListener
operator|)
name|writer
operator|)
operator|.
name|beforeShipped
argument_list|()
expr_stmt|;
name|throughputController
operator|.
name|finish
argument_list|(
name|compactionName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|finished
operator|&&
name|mobFileWriter
operator|!=
literal|null
condition|)
block|{
comment|// Remove all MOB references because compaction failed
name|mobRefSet
operator|.
name|get
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Abort writer
name|abortWriter
argument_list|(
name|mobFileWriter
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|mobFileWriter
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mobCells
operator|>
literal|0
condition|)
block|{
comment|// If the mob file is not empty, commit it.
name|mobFileWriter
operator|.
name|appendMetadata
argument_list|(
name|fd
operator|.
name|maxSeqId
argument_list|,
name|major
argument_list|,
name|mobCells
argument_list|)
expr_stmt|;
name|mobFileWriter
operator|.
name|close
argument_list|()
expr_stmt|;
name|mobStore
operator|.
name|commitFile
argument_list|(
name|mobFileWriter
operator|.
name|getPath
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If the mob file is empty, delete it instead of committing.
name|abortWriter
argument_list|(
name|mobFileWriter
argument_list|)
expr_stmt|;
block|}
block|}
name|mobStore
operator|.
name|updateCellsCountCompactedFromMob
argument_list|(
name|cellsCountCompactedFromMob
argument_list|)
expr_stmt|;
name|mobStore
operator|.
name|updateCellsCountCompactedToMob
argument_list|(
name|cellsCountCompactedToMob
argument_list|)
expr_stmt|;
name|mobStore
operator|.
name|updateCellsSizeCompactedFromMob
argument_list|(
name|cellsSizeCompactedFromMob
argument_list|)
expr_stmt|;
name|mobStore
operator|.
name|updateCellsSizeCompactedToMob
argument_list|(
name|cellsSizeCompactedToMob
argument_list|)
expr_stmt|;
name|progress
operator|.
name|complete
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

