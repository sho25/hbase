begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|wal
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Coprocessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|SampleRegionWALObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MultiVersionConcurrencyControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|DefaultWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WAL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTestFSWAL
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|AbstractTestFSWAL
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Configuration
name|CONF
decl_stmt|;
specifier|protected
specifier|static
name|FileSystem
name|FS
decl_stmt|;
specifier|protected
specifier|static
name|Path
name|DIR
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|currentTest
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|FileStatus
index|[]
name|entries
init|=
name|FS
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|dir
range|:
name|entries
control|)
block|{
name|FS
operator|.
name|delete
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|hbaseDir
init|=
name|TEST_UTIL
operator|.
name|createRootDir
argument_list|()
decl_stmt|;
name|DIR
operator|=
operator|new
name|Path
argument_list|(
name|hbaseDir
argument_list|,
name|currentTest
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Make block sizes small.
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.blocksize"
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// quicker heartbeat interval for faster DN death notification
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.namenode.heartbeat.recheck-interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.heartbeat.interval"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.client.socket-timeout"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
comment|// faster failover with cluster.shutdown();fs.close() idiom
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.ipc.client.connect.max.retries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.client.block.recovery.retries"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.ipc.client.connection.maxidletime"
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CoprocessorHost
operator|.
name|WAL_COPROCESSOR_CONF_KEY
argument_list|,
name|SampleRegionWALObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|CONF
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|FS
operator|=
name|TEST_UTIL
operator|.
name|getDFSCluster
argument_list|()
operator|.
name|getFileSystem
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
name|newWAL
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|String
name|archiveDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|WALActionsListener
argument_list|>
name|listeners
parameter_list|,
name|boolean
name|failIfWALExists
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
name|newSlowWAL
parameter_list|(
name|FileSystem
name|fs
parameter_list|,
name|Path
name|rootDir
parameter_list|,
name|String
name|logDir
parameter_list|,
name|String
name|archiveDir
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|List
argument_list|<
name|WALActionsListener
argument_list|>
name|listeners
parameter_list|,
name|boolean
name|failIfWALExists
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|Runnable
name|action
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * A loaded WAL coprocessor won't break existing WAL test cases.    */
annotation|@
name|Test
specifier|public
name|void
name|testWALCoprocessorLoaded
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test to see whether the coprocessor is loaded or not.
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
name|log
init|=
literal|null
decl_stmt|;
try|try
block|{
name|log
operator|=
name|newWAL
argument_list|(
name|FS
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|CONF
argument_list|)
argument_list|,
name|DIR
operator|.
name|toString
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|,
name|CONF
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|WALCoprocessorHost
name|host
init|=
name|log
operator|.
name|getCoprocessorHost
argument_list|()
decl_stmt|;
name|Coprocessor
name|c
init|=
name|host
operator|.
name|findCoprocessor
argument_list|(
name|SampleRegionWALObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|addEdits
parameter_list|(
name|WAL
name|log
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|,
name|HTableDescriptor
name|htd
parameter_list|,
name|int
name|times
parameter_list|,
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|,
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
condition|;
name|i
operator|++
control|)
block|{
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|WALEdit
name|cols
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|row
argument_list|,
name|row
argument_list|,
name|timestamp
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|WALKey
name|key
init|=
operator|new
name|WALKey
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|,
name|WALKey
operator|.
name|NO_SEQUENCE_ID
argument_list|,
name|timestamp
argument_list|,
name|WALKey
operator|.
name|EMPTY_UUIDS
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|HConstants
operator|.
name|NO_NONCE
argument_list|,
name|mvcc
argument_list|,
name|scopes
argument_list|)
decl_stmt|;
name|log
operator|.
name|append
argument_list|(
name|hri
argument_list|,
name|key
argument_list|,
name|cols
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
comment|/**    * helper method to simulate region flush for a WAL.    * @param wal    * @param regionEncodedName    */
specifier|protected
name|void
name|flushRegion
parameter_list|(
name|WAL
name|wal
parameter_list|,
name|byte
index|[]
name|regionEncodedName
parameter_list|,
name|Set
argument_list|<
name|byte
index|[]
argument_list|>
name|flushedFamilyNames
parameter_list|)
block|{
name|wal
operator|.
name|startCacheFlush
argument_list|(
name|regionEncodedName
argument_list|,
name|flushedFamilyNames
argument_list|)
expr_stmt|;
name|wal
operator|.
name|completeCacheFlush
argument_list|(
name|regionEncodedName
argument_list|)
expr_stmt|;
block|}
comment|/**    * tests the log comparator. Ensure that we are not mixing meta logs with non-meta logs (throws    * exception if we do). Comparison is based on the timestamp present in the wal name.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testWALComparator
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
name|wal1
init|=
literal|null
decl_stmt|;
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
name|walMeta
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wal1
operator|=
name|newWAL
argument_list|(
name|FS
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|CONF
argument_list|)
argument_list|,
name|DIR
operator|.
name|toString
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|,
name|CONF
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Log obtained is: "
operator|+
name|wal1
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|Path
argument_list|>
name|comp
init|=
name|wal1
operator|.
name|LOG_NAME_COMPARATOR
decl_stmt|;
name|Path
name|p1
init|=
name|wal1
operator|.
name|computeFilename
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|Path
name|p2
init|=
name|wal1
operator|.
name|computeFilename
argument_list|(
literal|12
argument_list|)
decl_stmt|;
comment|// comparing with itself returns 0
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|p1
argument_list|,
name|p1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// comparing with different filenum.
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|walMeta
operator|=
name|newWAL
argument_list|(
name|FS
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|CONF
argument_list|)
argument_list|,
name|DIR
operator|.
name|toString
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|,
name|CONF
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|DefaultWALProvider
operator|.
name|META_WAL_PROVIDER_ID
argument_list|)
expr_stmt|;
name|Comparator
argument_list|<
name|Path
argument_list|>
name|compMeta
init|=
name|walMeta
operator|.
name|LOG_NAME_COMPARATOR
decl_stmt|;
name|Path
name|p1WithMeta
init|=
name|walMeta
operator|.
name|computeFilename
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|Path
name|p2WithMeta
init|=
name|walMeta
operator|.
name|computeFilename
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|compMeta
operator|.
name|compare
argument_list|(
name|p1WithMeta
argument_list|,
name|p1WithMeta
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compMeta
operator|.
name|compare
argument_list|(
name|p1WithMeta
argument_list|,
name|p2WithMeta
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// mixing meta and non-meta logs gives error
name|boolean
name|ex
init|=
literal|false
decl_stmt|;
try|try
block|{
name|comp
operator|.
name|compare
argument_list|(
name|p1WithMeta
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|ex
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Comparator doesn't complain while checking meta log files"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|boolean
name|exMeta
init|=
literal|false
decl_stmt|;
try|try
block|{
name|compMeta
operator|.
name|compare
argument_list|(
name|p1WithMeta
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|exMeta
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Meta comparator doesn't complain while checking log files"
argument_list|,
name|exMeta
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wal1
operator|!=
literal|null
condition|)
block|{
name|wal1
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|walMeta
operator|!=
literal|null
condition|)
block|{
name|walMeta
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * On rolling a wal after reaching the threshold, {@link WAL#rollWriter()} returns the list of    * regions which should be flushed in order to archive the oldest wal file.    *<p>    * This method tests this behavior by inserting edits and rolling the wal enough times to reach    * the max number of logs threshold. It checks whether we get the "right regions" for flush on    * rolling the wal.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testFindMemStoresEligibleForFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"testFindMemStoresEligibleForFlush"
argument_list|)
expr_stmt|;
name|Configuration
name|conf1
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|(
name|CONF
argument_list|)
decl_stmt|;
name|conf1
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogs"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
name|wal
init|=
name|newWAL
argument_list|(
name|FS
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|conf1
argument_list|)
argument_list|,
name|DIR
operator|.
name|toString
argument_list|()
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|,
name|conf1
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|t1
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t1"
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"row"
argument_list|)
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|t2
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"t2"
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"row"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri1
init|=
operator|new
name|HRegionInfo
argument_list|(
name|t1
operator|.
name|getTableName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|HRegionInfo
name|hri2
init|=
operator|new
name|HRegionInfo
argument_list|(
name|t2
operator|.
name|getTableName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
comment|// add edits and roll the wal
name|MultiVersionConcurrencyControl
name|mvcc
init|=
operator|new
name|MultiVersionConcurrencyControl
argument_list|()
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes1
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|fam
range|:
name|t1
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|scopes1
operator|.
name|put
argument_list|(
name|fam
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes2
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|fam
range|:
name|t2
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|scopes2
operator|.
name|put
argument_list|(
name|fam
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|addEdits
argument_list|(
name|wal
argument_list|,
name|hri1
argument_list|,
name|t1
argument_list|,
literal|2
argument_list|,
name|mvcc
argument_list|,
name|scopes1
argument_list|)
expr_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// add some more edits and roll the wal. This would reach the log number threshold
name|addEdits
argument_list|(
name|wal
argument_list|,
name|hri1
argument_list|,
name|t1
argument_list|,
literal|2
argument_list|,
name|mvcc
argument_list|,
name|scopes1
argument_list|)
expr_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// with above rollWriter call, the max logs limit is reached.
name|assertTrue
argument_list|(
name|wal
operator|.
name|getNumRolledLogFiles
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// get the regions to flush; since there is only one region in the oldest wal, it should
comment|// return only one region.
name|byte
index|[]
index|[]
name|regionsToFlush
init|=
name|wal
operator|.
name|findRegionsToForceFlush
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regionsToFlush
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regionsToFlush
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// insert edits in second region
name|addEdits
argument_list|(
name|wal
argument_list|,
name|hri2
argument_list|,
name|t2
argument_list|,
literal|2
argument_list|,
name|mvcc
argument_list|,
name|scopes2
argument_list|)
expr_stmt|;
comment|// get the regions to flush, it should still read region1.
name|regionsToFlush
operator|=
name|wal
operator|.
name|findRegionsToForceFlush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|regionsToFlush
operator|.
name|length
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|regionsToFlush
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// flush region 1, and roll the wal file. Only last wal which has entries for region1 should
comment|// remain.
name|flushRegion
argument_list|(
name|wal
argument_list|,
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|t1
operator|.
name|getFamiliesKeys
argument_list|()
argument_list|)
expr_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// only one wal should remain now (that is for the second region).
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wal
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush the second region
name|flushRegion
argument_list|(
name|wal
argument_list|,
name|hri2
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|t2
operator|.
name|getFamiliesKeys
argument_list|()
argument_list|)
expr_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// no wal should remain now.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wal
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// add edits both to region 1 and region 2, and roll.
name|addEdits
argument_list|(
name|wal
argument_list|,
name|hri1
argument_list|,
name|t1
argument_list|,
literal|2
argument_list|,
name|mvcc
argument_list|,
name|scopes1
argument_list|)
expr_stmt|;
name|addEdits
argument_list|(
name|wal
argument_list|,
name|hri2
argument_list|,
name|t2
argument_list|,
literal|2
argument_list|,
name|mvcc
argument_list|,
name|scopes2
argument_list|)
expr_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// add edits and roll the writer, to reach the max logs limit.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wal
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
name|addEdits
argument_list|(
name|wal
argument_list|,
name|hri1
argument_list|,
name|t1
argument_list|,
literal|2
argument_list|,
name|mvcc
argument_list|,
name|scopes1
argument_list|)
expr_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
comment|// it should return two regions to flush, as the oldest wal file has entries
comment|// for both regions.
name|regionsToFlush
operator|=
name|wal
operator|.
name|findRegionsToForceFlush
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|regionsToFlush
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// flush both regions
name|flushRegion
argument_list|(
name|wal
argument_list|,
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|t1
operator|.
name|getFamiliesKeys
argument_list|()
argument_list|)
expr_stmt|;
name|flushRegion
argument_list|(
name|wal
argument_list|,
name|hri2
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|t2
operator|.
name|getFamiliesKeys
argument_list|()
argument_list|)
expr_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|wal
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add an edit to region1, and roll the wal.
name|addEdits
argument_list|(
name|wal
argument_list|,
name|hri1
argument_list|,
name|t1
argument_list|,
literal|2
argument_list|,
name|mvcc
argument_list|,
name|scopes1
argument_list|)
expr_stmt|;
comment|// tests partial flush: roll on a partial flush, and ensure that wal is not archived.
name|wal
operator|.
name|startCacheFlush
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|t1
operator|.
name|getFamiliesKeys
argument_list|()
argument_list|)
expr_stmt|;
name|wal
operator|.
name|rollWriter
argument_list|()
expr_stmt|;
name|wal
operator|.
name|completeCacheFlush
argument_list|(
name|hri1
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|wal
operator|.
name|getNumRolledLogFiles
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|wal
operator|!=
literal|null
condition|)
block|{
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IOException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testFailedToCreateWALIfParentRenamed
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|name
init|=
literal|"testFailedToCreateWALIfParentRenamed"
decl_stmt|;
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
name|log
init|=
name|newWAL
argument_list|(
name|FS
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|CONF
argument_list|)
argument_list|,
name|name
argument_list|,
name|HConstants
operator|.
name|HREGION_OLDLOGDIR_NAME
argument_list|,
name|CONF
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|filenum
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|log
operator|.
name|computeFilename
argument_list|(
name|filenum
argument_list|)
decl_stmt|;
name|log
operator|.
name|createWriterInstance
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|Path
name|parent
init|=
name|path
operator|.
name|getParent
argument_list|()
decl_stmt|;
name|path
operator|=
name|log
operator|.
name|computeFilename
argument_list|(
name|filenum
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Path
name|newPath
init|=
operator|new
name|Path
argument_list|(
name|parent
operator|.
name|getParent
argument_list|()
argument_list|,
name|parent
operator|.
name|getName
argument_list|()
operator|+
literal|"-splitting"
argument_list|)
decl_stmt|;
name|FS
operator|.
name|rename
argument_list|(
name|parent
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|createWriterInstance
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"It should fail to create the new WAL"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test flush for sure has a sequence id that is beyond the last edit appended. We do this by    * slowing appends in the background ring buffer thread while in foreground we call flush. The    * addition of the sync over HRegion in flush should fix an issue where flush was returning before    * all of its appends had made it out to the WAL (HBASE-11109).    * @throws IOException    * @see<a href="https://issues.apache.org/jira/browse/HBASE-11109">HBASE-11109</a>    */
annotation|@
name|Test
specifier|public
name|void
name|testFlushSequenceIdIsGreaterThanAllEditsInHFile
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
name|currentTest
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|testName
argument_list|)
decl_stmt|;
specifier|final
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|rowName
init|=
name|tableName
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
name|r
init|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|hri
argument_list|,
name|TEST_UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
argument_list|)
decl_stmt|;
name|HBaseTestingUtility
operator|.
name|closeRegionAndWAL
argument_list|(
name|r
argument_list|)
expr_stmt|;
specifier|final
name|int
name|countPerFamily
init|=
literal|10
decl_stmt|;
specifier|final
name|AtomicBoolean
name|goslow
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
name|scopes
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|Integer
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|fam
range|:
name|htd
operator|.
name|getFamiliesKeys
argument_list|()
control|)
block|{
name|scopes
operator|.
name|put
argument_list|(
name|fam
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// subclass and doctor a method.
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
name|wal
init|=
name|newSlowWAL
argument_list|(
name|FS
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|CONF
argument_list|)
argument_list|,
name|DIR
operator|.
name|toString
argument_list|()
argument_list|,
name|testName
argument_list|,
name|CONF
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|goslow
operator|.
name|get
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Sleeping before appending 100ms"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|HRegion
name|region
init|=
name|HRegion
operator|.
name|openHRegion
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
argument_list|,
name|TEST_UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
argument_list|,
name|hri
argument_list|,
name|htd
argument_list|,
name|wal
argument_list|)
decl_stmt|;
name|EnvironmentEdge
name|ee
init|=
name|EnvironmentEdgeManager
operator|.
name|getDelegate
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
literal|null
decl_stmt|;
for|for
control|(
name|HColumnDescriptor
name|hcd
range|:
name|htd
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|puts
operator|=
name|TestWALReplay
operator|.
name|addRegionEdits
argument_list|(
name|rowName
argument_list|,
name|hcd
operator|.
name|getName
argument_list|()
argument_list|,
name|countPerFamily
argument_list|,
name|ee
argument_list|,
name|region
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
block|}
comment|// Now assert edits made it in.
specifier|final
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|rowName
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|region
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|countPerFamily
operator|*
name|htd
operator|.
name|getFamilies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Construct a WALEdit and add it a few times to the WAL.
name|WALEdit
name|edits
init|=
operator|new
name|WALEdit
argument_list|()
decl_stmt|;
for|for
control|(
name|Put
name|p
range|:
name|puts
control|)
block|{
name|CellScanner
name|cs
init|=
name|p
operator|.
name|cellScanner
argument_list|()
decl_stmt|;
while|while
condition|(
name|cs
operator|.
name|advance
argument_list|()
condition|)
block|{
name|edits
operator|.
name|add
argument_list|(
name|cs
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add any old cluster id.
name|List
argument_list|<
name|UUID
argument_list|>
name|clusterIds
init|=
operator|new
name|ArrayList
argument_list|<
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
name|clusterIds
operator|.
name|add
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now make appends run slow.
name|goslow
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countPerFamily
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|HRegionInfo
name|info
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
specifier|final
name|WALKey
name|logkey
init|=
operator|new
name|WALKey
argument_list|(
name|info
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|tableName
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|clusterIds
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|region
operator|.
name|getMVCC
argument_list|()
argument_list|,
name|scopes
argument_list|)
decl_stmt|;
name|wal
operator|.
name|append
argument_list|(
name|info
argument_list|,
name|logkey
argument_list|,
name|edits
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// FlushResult.flushSequenceId is not visible here so go get the current sequence id.
name|long
name|currentSequenceId
init|=
name|region
operator|.
name|getReadPoint
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// Now release the appends
name|goslow
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|currentSequenceId
operator|>=
name|region
operator|.
name|getReadPoint
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|region
operator|.
name|close
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncNoAppend
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|testName
init|=
name|currentTest
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|AbstractFSWAL
argument_list|<
name|?
argument_list|>
name|wal
init|=
name|newWAL
argument_list|(
name|FS
argument_list|,
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|CONF
argument_list|)
argument_list|,
name|DIR
operator|.
name|toString
argument_list|()
argument_list|,
name|testName
argument_list|,
name|CONF
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|wal
operator|.
name|sync
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|wal
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

