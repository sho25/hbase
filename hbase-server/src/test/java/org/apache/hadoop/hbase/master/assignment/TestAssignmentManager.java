begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfoBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAssignmentManager
extends|extends
name|TestAssignmentManagerBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAssignmentManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAssignmentManager
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAssignWithGoodExec
parameter_list|()
throws|throws
name|Exception
block|{
comment|// collect AM metrics before test
name|collectAssignmentManagerMetrics
argument_list|()
expr_stmt|;
name|testAssign
argument_list|(
operator|new
name|GoodRsExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignSubmittedCount
operator|+
name|NREGIONS
argument_list|,
name|assignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignFailedCount
argument_list|,
name|assignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssignAndCrashBeforeResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testAssignAndCrashBeforeResponse"
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|HangThenRSCrashExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|TransitRegionStateProcedure
name|proc
init|=
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|proc
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnassignAndCrashBeforeResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testAssignAndCrashBeforeResponse"
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|HangOnCloseThenRSCrashExecutor
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|HangOnCloseThenRSCrashExecutor
operator|.
name|TYPES_OF_FAILURE
condition|;
name|i
operator|++
control|)
block|{
name|TransitRegionStateProcedure
name|assign
init|=
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|assign
argument_list|)
argument_list|)
expr_stmt|;
name|TransitRegionStateProcedure
name|unassign
init|=
name|createUnassignProcedure
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|unassign
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssignSocketTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// collect AM metrics before test
name|collectAssignmentManagerMetrics
argument_list|()
expr_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|SocketTimeoutRsExecutor
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignSubmittedCount
operator|+
literal|1
argument_list|,
name|assignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignFailedCount
argument_list|,
name|assignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssignQueueFullOnce
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// collect AM metrics before test
name|collectAssignmentManagerMetrics
argument_list|()
expr_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|CallQueueTooBigOnceRsExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignSubmittedCount
operator|+
literal|1
argument_list|,
name|assignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignFailedCount
argument_list|,
name|assignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeoutThenQueueFull
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// collect AM metrics before test
name|collectAssignmentManagerMetrics
argument_list|()
expr_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|TimeoutThenCallQueueTooBigRsExecutor
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|TimeoutThenCallQueueTooBigRsExecutor
argument_list|(
literal|15
argument_list|)
argument_list|)
expr_stmt|;
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|createUnassignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignSubmittedCount
operator|+
literal|1
argument_list|,
name|assignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignFailedCount
argument_list|,
name|assignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|unassignSubmittedCount
operator|+
literal|1
argument_list|,
name|unassignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|unassignFailedCount
argument_list|,
name|unassignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testAssign
parameter_list|(
specifier|final
name|MockRSExecutor
name|executor
parameter_list|)
throws|throws
name|Exception
block|{
name|testAssign
argument_list|(
name|executor
argument_list|,
name|NREGIONS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testAssign
parameter_list|(
name|MockRSExecutor
name|executor
parameter_list|,
name|int
name|nRegions
parameter_list|)
throws|throws
name|Exception
block|{
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|TransitRegionStateProcedure
index|[]
name|assignments
init|=
operator|new
name|TransitRegionStateProcedure
index|[
name|nRegions
index|]
decl_stmt|;
name|long
name|st
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|bulkSubmit
argument_list|(
name|assignments
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|assignments
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ProcedureTestingUtility
operator|.
name|waitProcedure
argument_list|(
name|master
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|,
name|assignments
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assignments
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|assignments
index|[
name|i
index|]
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|et
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|float
name|sec
init|=
operator|(
operator|(
name|et
operator|-
name|st
operator|)
operator|/
literal|1000.0f
operator|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"[T] Assigning %dprocs in %s (%.2fproc/sec)"
argument_list|,
name|assignments
operator|.
name|length
argument_list|,
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|et
operator|-
name|st
argument_list|)
argument_list|,
name|assignments
operator|.
name|length
operator|/
name|sec
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAssignAnAssignedRegion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testAssignAnAssignedRegion"
argument_list|)
decl_stmt|;
specifier|final
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// collect AM metrics before test
name|collectAssignmentManagerMetrics
argument_list|()
expr_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|GoodRsExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|byte
index|[]
argument_list|>
name|futureA
init|=
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
decl_stmt|;
comment|// wait first assign
name|waitOnFuture
argument_list|(
name|futureA
argument_list|)
expr_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|OPEN
argument_list|)
expr_stmt|;
comment|// Second should be a noop. We should recognize region is already OPEN internally
comment|// and skip out doing nothing.
comment|// wait second assign
name|Future
argument_list|<
name|byte
index|[]
argument_list|>
name|futureB
init|=
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
decl_stmt|;
name|waitOnFuture
argument_list|(
name|futureB
argument_list|)
expr_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|OPEN
argument_list|)
expr_stmt|;
comment|// TODO: What else can we do to ensure just a noop.
comment|// TODO: Though second assign is noop, it's considered success, can noop be handled in a
comment|// better way?
name|assertEquals
argument_list|(
name|assignSubmittedCount
operator|+
literal|2
argument_list|,
name|assignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignFailedCount
argument_list|,
name|assignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnassignAnUnassignedRegion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testUnassignAnUnassignedRegion"
argument_list|)
decl_stmt|;
specifier|final
name|RegionInfo
name|hri
init|=
name|createRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|// collect AM metrics before test
name|collectAssignmentManagerMetrics
argument_list|()
expr_stmt|;
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|GoodRsExecutor
argument_list|()
argument_list|)
expr_stmt|;
comment|// assign the region first
name|waitOnFuture
argument_list|(
name|submitProcedure
argument_list|(
name|createAssignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Future
argument_list|<
name|byte
index|[]
argument_list|>
name|futureA
init|=
name|submitProcedure
argument_list|(
name|createUnassignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
decl_stmt|;
comment|// Wait first unassign.
name|waitOnFuture
argument_list|(
name|futureA
argument_list|)
expr_stmt|;
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
comment|// Second should be a noop. We should recognize region is already CLOSED internally
comment|// and skip out doing nothing.
specifier|final
name|Future
argument_list|<
name|byte
index|[]
argument_list|>
name|futureB
init|=
name|submitProcedure
argument_list|(
name|createUnassignProcedure
argument_list|(
name|hri
argument_list|)
argument_list|)
decl_stmt|;
name|waitOnFuture
argument_list|(
name|futureB
argument_list|)
expr_stmt|;
comment|// Ensure we are still CLOSED.
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|isRegionInState
argument_list|(
name|hri
argument_list|,
name|State
operator|.
name|CLOSED
argument_list|)
expr_stmt|;
comment|// TODO: What else can we do to ensure just a noop.
name|assertEquals
argument_list|(
name|assignSubmittedCount
operator|+
literal|1
argument_list|,
name|assignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|assignFailedCount
argument_list|,
name|assignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Though second unassign is noop, it's considered success, can noop be handled in a
comment|// better way?
name|assertEquals
argument_list|(
name|unassignSubmittedCount
operator|+
literal|2
argument_list|,
name|unassignProcMetrics
operator|.
name|getSubmittedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|unassignFailedCount
argument_list|,
name|unassignProcMetrics
operator|.
name|getFailedCounter
argument_list|()
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * It is possible that when AM send assign meta request to a RS successfully, but RS can not send    * back any response, which cause master startup hangs forever    */
annotation|@
name|Test
specifier|public
name|void
name|testAssignMetaAndCrashBeforeResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
comment|// See setUp(), start HBase until set up meta
name|util
operator|=
operator|new
name|HBaseTestingUtility
argument_list|()
expr_stmt|;
name|this
operator|.
name|executor
operator|=
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
argument_list|()
expr_stmt|;
name|setupConfiguration
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|=
operator|new
name|MockMasterServices
argument_list|(
name|util
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|this
operator|.
name|regionsToRegionServers
argument_list|)
expr_stmt|;
name|rsDispatcher
operator|=
operator|new
name|MockRSProcedureDispatcher
argument_list|(
name|master
argument_list|)
expr_stmt|;
name|master
operator|.
name|start
argument_list|(
name|NSERVERS
argument_list|,
name|rsDispatcher
argument_list|)
expr_stmt|;
name|am
operator|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
expr_stmt|;
comment|// Assign meta
name|rsDispatcher
operator|.
name|setMockRsExecutor
argument_list|(
operator|new
name|HangThenRSRestartExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|am
operator|.
name|assign
argument_list|(
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|am
operator|.
name|isMetaAssigned
argument_list|()
argument_list|)
expr_stmt|;
comment|// set it back as default, see setUpMeta()
name|am
operator|.
name|wakeMetaLoadedEvent
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

