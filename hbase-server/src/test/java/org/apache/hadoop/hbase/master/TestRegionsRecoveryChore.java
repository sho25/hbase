begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import
name|edu
operator|.
name|umd
operator|.
name|cs
operator|.
name|findbugs
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Size
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Stoppable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionStatesCount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationLoadSink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
operator|.
name|ReplicationLoadSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Test for RegionsRecoveryChore  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionsRecoveryChore
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionsRecoveryChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRegionsRecoveryChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HBASE_TESTING_UTILITY
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|UTF_8_CHARSET
init|=
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|private
name|HMaster
name|hMaster
decl_stmt|;
specifier|private
name|AssignmentManager
name|assignmentManager
decl_stmt|;
specifier|private
name|RegionsRecoveryChore
name|regionsRecoveryChore
decl_stmt|;
specifier|private
specifier|static
name|int
name|regionNo
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|REGION_NAME_LIST
init|=
operator|new
name|byte
index|[]
index|[]
block|{
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|50
block|,
literal|49
block|,
literal|95
block|,
literal|51
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|50
block|,
literal|53
block|,
literal|95
block|,
literal|51
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|50
block|,
literal|54
block|,
literal|95
block|,
literal|52
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|51
block|,
literal|50
block|,
literal|95
block|,
literal|53
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|51
block|,
literal|49
block|,
literal|95
block|,
literal|52
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|51
block|,
literal|48
block|,
literal|95
block|,
literal|51
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|50
block|,
literal|48
block|,
literal|95
block|,
literal|50
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|50
block|,
literal|52
block|,
literal|95
block|,
literal|50
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|50
block|,
literal|57
block|,
literal|95
block|,
literal|50
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|51
block|,
literal|53
block|,
literal|95
block|,
literal|50
block|}
block|,
operator|new
name|byte
index|[]
block|{
literal|114
block|,
literal|101
block|,
literal|103
block|,
literal|105
block|,
literal|111
block|,
literal|110
block|,
literal|49
block|,
literal|48
block|,
literal|56
block|,
literal|95
block|,
literal|49
block|,
literal|49
block|}
block|}
decl_stmt|;
specifier|private
name|Configuration
name|getCustomConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|HBASE_TESTING_UTILITY
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.master.regions.recovery.check.interval"
argument_list|,
literal|100
argument_list|)
expr_stmt|;
return|return
name|conf
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|hMaster
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HMaster
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|assignmentManager
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|AssignmentManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Mockito
operator|.
name|verifyNoMoreInteractions
argument_list|(
name|this
operator|.
name|hMaster
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verifyNoMoreInteractions
argument_list|(
name|this
operator|.
name|assignmentManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionReopensWithStoreRefConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|regionNo
operator|=
literal|0
expr_stmt|;
name|ClusterMetrics
name|clusterMetrics
init|=
name|TestRegionsRecoveryChore
operator|.
name|getClusterMetrics
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerMetrics
argument_list|>
name|serverMetricsMap
init|=
name|clusterMetrics
operator|.
name|getLiveServerMetrics
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"All Region Names with refCount...."
argument_list|)
expr_stmt|;
for|for
control|(
name|ServerMetrics
name|serverMetrics
range|:
name|serverMetricsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionMetrics
argument_list|>
name|regionMetricsMap
init|=
name|serverMetrics
operator|.
name|getRegionMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionMetrics
name|regionMetrics
range|:
name|regionMetricsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"name: "
operator|+
operator|new
name|String
argument_list|(
name|regionMetrics
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|+
literal|" refCount: "
operator|+
name|regionMetrics
operator|.
name|getStoreRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Mockito
operator|.
name|when
argument_list|(
name|hMaster
operator|.
name|getClusterMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterMetrics
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hMaster
operator|.
name|getAssignmentManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|assignmentManager
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|regionName
range|:
name|REGION_NAME_LIST
control|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|assignmentManager
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TestRegionsRecoveryChore
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Stoppable
name|stoppable
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
name|getCustomConf
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
literal|"hbase.regions.recovery.store.file.ref.count"
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|regionsRecoveryChore
operator|=
operator|new
name|RegionsRecoveryChore
argument_list|(
name|stoppable
argument_list|,
name|configuration
argument_list|,
name|hMaster
argument_list|)
expr_stmt|;
name|regionsRecoveryChore
operator|.
name|chore
argument_list|()
expr_stmt|;
comment|// Verify that we need to reopen regions of 2 tables
name|Mockito
operator|.
name|verify
argument_list|(
name|hMaster
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|reopenRegions
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyList
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|hMaster
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getClusterMetrics
argument_list|()
expr_stmt|;
comment|// Verify that we need to reopen total 3 regions that have refCount> 300
name|Mockito
operator|.
name|verify
argument_list|(
name|hMaster
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getAssignmentManager
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|assignmentManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getRegionInfo
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionReopensWithLessThreshold
parameter_list|()
throws|throws
name|Exception
block|{
name|regionNo
operator|=
literal|0
expr_stmt|;
name|ClusterMetrics
name|clusterMetrics
init|=
name|TestRegionsRecoveryChore
operator|.
name|getClusterMetrics
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerMetrics
argument_list|>
name|serverMetricsMap
init|=
name|clusterMetrics
operator|.
name|getLiveServerMetrics
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"All Region Names with refCount...."
argument_list|)
expr_stmt|;
for|for
control|(
name|ServerMetrics
name|serverMetrics
range|:
name|serverMetricsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionMetrics
argument_list|>
name|regionMetricsMap
init|=
name|serverMetrics
operator|.
name|getRegionMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionMetrics
name|regionMetrics
range|:
name|regionMetricsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"name: "
operator|+
operator|new
name|String
argument_list|(
name|regionMetrics
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|+
literal|" refCount: "
operator|+
name|regionMetrics
operator|.
name|getStoreRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Mockito
operator|.
name|when
argument_list|(
name|hMaster
operator|.
name|getClusterMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterMetrics
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hMaster
operator|.
name|getAssignmentManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|assignmentManager
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|regionName
range|:
name|REGION_NAME_LIST
control|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|assignmentManager
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TestRegionsRecoveryChore
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Stoppable
name|stoppable
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
name|getCustomConf
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
literal|"hbase.regions.recovery.store.file.ref.count"
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|regionsRecoveryChore
operator|=
operator|new
name|RegionsRecoveryChore
argument_list|(
name|stoppable
argument_list|,
name|configuration
argument_list|,
name|hMaster
argument_list|)
expr_stmt|;
name|regionsRecoveryChore
operator|.
name|chore
argument_list|()
expr_stmt|;
comment|// Verify that we need to reopen regions of only 1 table
name|Mockito
operator|.
name|verify
argument_list|(
name|hMaster
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|reopenRegions
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyList
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|hMaster
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getClusterMetrics
argument_list|()
expr_stmt|;
comment|// Verify that we need to reopen only 1 region with refCount> 400
name|Mockito
operator|.
name|verify
argument_list|(
name|hMaster
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getAssignmentManager
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|assignmentManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getRegionInfo
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionReopensWithoutStoreRefConfig
parameter_list|()
throws|throws
name|Exception
block|{
name|regionNo
operator|=
literal|0
expr_stmt|;
name|ClusterMetrics
name|clusterMetrics
init|=
name|TestRegionsRecoveryChore
operator|.
name|getClusterMetrics
argument_list|(
literal|10
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerMetrics
argument_list|>
name|serverMetricsMap
init|=
name|clusterMetrics
operator|.
name|getLiveServerMetrics
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"All Region Names with refCount...."
argument_list|)
expr_stmt|;
for|for
control|(
name|ServerMetrics
name|serverMetrics
range|:
name|serverMetricsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionMetrics
argument_list|>
name|regionMetricsMap
init|=
name|serverMetrics
operator|.
name|getRegionMetrics
argument_list|()
decl_stmt|;
for|for
control|(
name|RegionMetrics
name|regionMetrics
range|:
name|regionMetricsMap
operator|.
name|values
argument_list|()
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"name: "
operator|+
operator|new
name|String
argument_list|(
name|regionMetrics
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|+
literal|" refCount: "
operator|+
name|regionMetrics
operator|.
name|getStoreRefCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Mockito
operator|.
name|when
argument_list|(
name|hMaster
operator|.
name|getClusterMetrics
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|clusterMetrics
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hMaster
operator|.
name|getAssignmentManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|assignmentManager
argument_list|)
expr_stmt|;
for|for
control|(
name|byte
index|[]
name|regionName
range|:
name|REGION_NAME_LIST
control|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|assignmentManager
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TestRegionsRecoveryChore
operator|.
name|getRegionInfo
argument_list|(
name|regionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Stoppable
name|stoppable
init|=
operator|new
name|StoppableImplementation
argument_list|()
decl_stmt|;
name|Configuration
name|configuration
init|=
name|getCustomConf
argument_list|()
decl_stmt|;
name|configuration
operator|.
name|unset
argument_list|(
literal|"hbase.regions.recovery.store.file.ref.count"
argument_list|)
expr_stmt|;
name|regionsRecoveryChore
operator|=
operator|new
name|RegionsRecoveryChore
argument_list|(
name|stoppable
argument_list|,
name|configuration
argument_list|,
name|hMaster
argument_list|)
expr_stmt|;
name|regionsRecoveryChore
operator|.
name|chore
argument_list|()
expr_stmt|;
comment|// Verify that by default the feature is turned off so no regions
comment|// should be reopened
name|Mockito
operator|.
name|verify
argument_list|(
name|hMaster
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|reopenRegions
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyList
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|,
name|Mockito
operator|.
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
comment|// default maxStoreFileRefCount is -1 (no regions to be reopened using AM)
name|Mockito
operator|.
name|verify
argument_list|(
name|hMaster
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getAssignmentManager
argument_list|()
expr_stmt|;
name|Mockito
operator|.
name|verify
argument_list|(
name|assignmentManager
argument_list|,
name|Mockito
operator|.
name|times
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|getRegionInfo
argument_list|(
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ClusterMetrics
name|getClusterMetrics
parameter_list|(
name|int
name|noOfLiveServer
parameter_list|)
block|{
name|ClusterMetrics
name|clusterMetrics
init|=
operator|new
name|ClusterMetrics
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|getHBaseVersion
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getDeadServerNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerMetrics
argument_list|>
name|getLiveServerMetrics
parameter_list|()
block|{
name|Map
argument_list|<
name|ServerName
argument_list|,
name|ServerMetrics
argument_list|>
name|liveServerMetrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noOfLiveServer
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|serverName
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"rs_"
operator|+
name|i
argument_list|,
literal|16010
argument_list|,
literal|12345
argument_list|)
decl_stmt|;
name|liveServerMetrics
operator|.
name|put
argument_list|(
name|serverName
argument_list|,
name|TestRegionsRecoveryChore
operator|.
name|getServerMetrics
argument_list|(
name|i
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|liveServerMetrics
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|ServerName
name|getMasterName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getBackupMasterNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RegionState
argument_list|>
name|getRegionStatesInTransition
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|String
name|getClusterId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getMasterCoprocessorNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Boolean
name|getBalancerOn
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMasterInfoPort
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ServerName
argument_list|>
name|getServersName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|TableName
argument_list|,
name|RegionStatesCount
argument_list|>
name|getTableRegionStatesCount
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
return|return
name|clusterMetrics
return|;
block|}
specifier|private
specifier|static
name|ServerMetrics
name|getServerMetrics
parameter_list|(
name|int
name|noOfRegions
parameter_list|)
block|{
name|ServerMetrics
name|serverMetrics
init|=
operator|new
name|ServerMetrics
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServerName
name|getServerName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRequestCountPerSecond
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRequestCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Size
name|getUsedHeapSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Size
name|getMaxHeapSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getInfoServerPort
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|getReplicationLoadSourceList
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
argument_list|>
name|getReplicationLoadSourceMap
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|ReplicationLoadSink
name|getReplicationLoadSink
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionMetrics
argument_list|>
name|getRegionMetrics
parameter_list|()
block|{
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|RegionMetrics
argument_list|>
name|regionMetricsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|noOfRegions
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|regionName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"region"
operator|+
name|regionNo
operator|+
literal|"_"
operator|+
name|i
argument_list|)
decl_stmt|;
name|regionMetricsMap
operator|.
name|put
argument_list|(
name|regionName
argument_list|,
name|TestRegionsRecoveryChore
operator|.
name|getRegionMetrics
argument_list|(
name|regionName
argument_list|,
literal|100
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|regionNo
expr_stmt|;
block|}
return|return
name|regionMetricsMap
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getCoprocessorNames
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getReportTimestamp
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastReportTimestamp
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
return|return
name|serverMetrics
return|;
block|}
specifier|private
specifier|static
name|RegionMetrics
name|getRegionMetrics
parameter_list|(
name|byte
index|[]
name|regionName
parameter_list|,
name|int
name|storeRefCount
parameter_list|)
block|{
name|RegionMetrics
name|regionMetrics
init|=
operator|new
name|RegionMetrics
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRegionName
parameter_list|()
block|{
return|return
name|regionName
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStoreCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStoreFileCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Size
name|getStoreFileSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Size
name|getMemStoreSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getReadRequestCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getWriteRequestCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCpRequestCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getFilteredReadRequestCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Size
name|getStoreFileIndexSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Size
name|getStoreFileRootLevelIndexSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Size
name|getStoreFileUncompressedDataIndexSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Size
name|getBloomFilterSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCompactingCellCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCompactedCellCount
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCompletedSequenceId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|Long
argument_list|>
name|getStoreSequenceId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Size
name|getUncompressedStoreFileSize
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|getDataLocality
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastMajorCompactionTimestamp
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStoreRefCount
parameter_list|()
block|{
return|return
name|storeRefCount
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getMaxStoreFileRefCount
parameter_list|()
block|{
return|return
name|storeRefCount
return|;
block|}
block|}
decl_stmt|;
return|return
name|regionMetrics
return|;
block|}
specifier|private
specifier|static
name|RegionInfo
name|getRegionInfo
parameter_list|(
name|byte
index|[]
name|regionNameBytes
parameter_list|)
block|{
name|RegionInfo
name|regionInfo
init|=
operator|new
name|RegionInfo
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getShortNameToLog
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getRegionId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getRegionName
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRegionNameAsString
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|regionNameBytes
argument_list|,
name|UTF_8_CHARSET
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
literal|""
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getEncodedName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getEncodedNameAsBytes
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getStartKey
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getEndKey
parameter_list|()
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|TableName
name|getTable
parameter_list|()
block|{
name|String
name|regionName
decl_stmt|;
try|try
block|{
name|regionName
operator|=
operator|new
name|String
argument_list|(
name|regionNameBytes
argument_list|,
name|UTF_8_CHARSET
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|regionName
operator|=
literal|""
expr_stmt|;
block|}
name|int
name|regionNo
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|regionName
operator|.
name|split
argument_list|(
literal|"_"
argument_list|)
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table_"
operator|+
name|regionNo
operator|%
literal|3
argument_list|)
decl_stmt|;
return|return
name|tableName
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getReplicaId
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSplit
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOffline
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSplitParent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMetaRegion
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsRange
parameter_list|(
name|byte
index|[]
name|rangeStartKey
parameter_list|,
name|byte
index|[]
name|rangeEndKey
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsRow
parameter_list|(
name|byte
index|[]
name|row
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
return|return
name|regionInfo
return|;
block|}
comment|/**    * Simple helper class that just keeps track of whether or not its stopped.    */
specifier|private
specifier|static
class|class
name|StoppableImplementation
implements|implements
name|Stoppable
block|{
specifier|private
specifier|volatile
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|String
name|why
parameter_list|)
block|{
name|this
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStopped
parameter_list|()
block|{
return|return
name|this
operator|.
name|stop
return|;
block|}
block|}
block|}
end_class

end_unit

