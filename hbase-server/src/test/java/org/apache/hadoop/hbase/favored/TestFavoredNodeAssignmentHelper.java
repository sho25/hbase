begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|favored
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RackManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestFavoredNodeAssignmentHelper
block|{
specifier|private
specifier|static
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
name|rackToServers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ServerName
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|RackManager
name|rackManager
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RackManager
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Some tests have randomness, so we run them multiple times
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ATTEMPTS
init|=
literal|100
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Set up some server -> rack mappings
comment|// Have three racks in the cluster with 10 hosts each.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|40
condition|;
name|i
operator|++
control|)
block|{
name|ServerName
name|server
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
operator|+
name|i
operator|+
literal|":1234"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|10
condition|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|server
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"rack1"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rackToServers
operator|.
name|get
argument_list|(
literal|"rack1"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|rackToServers
operator|.
name|put
argument_list|(
literal|"rack1"
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
name|rackToServers
operator|.
name|get
argument_list|(
literal|"rack1"
argument_list|)
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|10
operator|&&
name|i
operator|<
literal|20
condition|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|server
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"rack2"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rackToServers
operator|.
name|get
argument_list|(
literal|"rack2"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|rackToServers
operator|.
name|put
argument_list|(
literal|"rack2"
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
name|rackToServers
operator|.
name|get
argument_list|(
literal|"rack2"
argument_list|)
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>=
literal|20
operator|&&
name|i
operator|<
literal|30
condition|)
block|{
name|Mockito
operator|.
name|when
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|server
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"rack3"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rackToServers
operator|.
name|get
argument_list|(
literal|"rack3"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|rackToServers
operator|.
name|put
argument_list|(
literal|"rack3"
argument_list|,
name|servers
argument_list|)
expr_stmt|;
block|}
name|rackToServers
operator|.
name|get
argument_list|(
literal|"rack3"
argument_list|)
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
name|servers
operator|.
name|add
argument_list|(
name|server
argument_list|)
expr_stmt|;
block|}
block|}
comment|// The tests decide which racks to work with, and how many machines to
comment|// work with from any given rack
comment|// Return a rondom 'count' number of servers from 'rack'
specifier|private
specifier|static
name|List
argument_list|<
name|ServerName
argument_list|>
name|getServersFromRack
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
parameter_list|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|chosenServers
init|=
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|rackToServerCount
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|rackToServers
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entry
operator|.
name|getValue
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|chosenServers
operator|.
name|add
argument_list|(
name|servers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|chosenServers
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSmallCluster
parameter_list|()
block|{
comment|// Test the case where we cannot assign favored nodes (because the number
comment|// of nodes in the cluster is too less)
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getServersFromRack
argument_list|(
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
name|helper
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|helper
operator|.
name|canPlaceFavoredNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPlacePrimaryRSAsRoundRobin
parameter_list|()
block|{
comment|// Test the regular case where there are many servers in different racks
comment|// Test once for few regions and once for many regions
name|primaryRSPlacement
argument_list|(
literal|6
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// now create lots of regions and try to place them on the limited number of machines
name|primaryRSPlacement
argument_list|(
literal|600
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRoundRobinAssignmentsWithUnevenSizedRacks
parameter_list|()
block|{
comment|//In the case of uneven racks, the regions should be distributed
comment|//proportionately to the rack sizes
name|primaryRSPlacement
argument_list|(
literal|6
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|primaryRSPlacement
argument_list|(
literal|600
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|primaryRSPlacement
argument_list|(
literal|600
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|primaryRSPlacement
argument_list|(
literal|600
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|primaryRSPlacement
argument_list|(
literal|500
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|primaryRSPlacement
argument_list|(
literal|500
argument_list|,
literal|null
argument_list|,
literal|10
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|primaryRSPlacement
argument_list|(
literal|500
argument_list|,
literal|null
argument_list|,
literal|5
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|primaryRSPlacement
argument_list|(
literal|500
argument_list|,
literal|null
argument_list|,
literal|9
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|primaryRSPlacement
argument_list|(
literal|500
argument_list|,
literal|null
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|primaryRSPlacement
argument_list|(
literal|500
argument_list|,
literal|null
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|primaryRSPlacement
argument_list|(
literal|459
argument_list|,
literal|null
argument_list|,
literal|7
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecondaryAndTertiaryPlacementWithSingleRack
parameter_list|()
block|{
comment|// Test the case where there is a single rack and we need to choose
comment|// Primary/Secondary/Tertiary from a single rack.
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack1"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// have lots of regions to test with
name|Triple
argument_list|<
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|,
name|FavoredNodeAssignmentHelper
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|primaryRSMapAndHelper
init|=
name|secondaryAndTertiaryRSPlacementHelper
argument_list|(
literal|60000
argument_list|,
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
name|primaryRSMapAndHelper
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
name|primaryRSMapAndHelper
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|primaryRSMapAndHelper
operator|.
name|getThird
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryMap
init|=
name|helper
operator|.
name|placeSecondaryAndTertiaryRS
argument_list|(
name|primaryRSMap
argument_list|)
decl_stmt|;
comment|// although we created lots of regions we should have no overlap on the
comment|// primary/secondary/tertiary for any given region
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|ServerName
index|[]
name|secondaryAndTertiaryServers
init|=
name|secondaryAndTertiaryMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|secondaryAndTertiaryServers
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|primaryRSMap
operator|.
name|containsKey
argument_list|(
name|region
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|secondaryAndTertiaryServers
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|primaryRSMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|secondaryAndTertiaryServers
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|primaryRSMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|secondaryAndTertiaryServers
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|secondaryAndTertiaryServers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecondaryAndTertiaryPlacementWithSingleServer
parameter_list|()
block|{
comment|// Test the case where we have a single node in the cluster. In this case
comment|// the primary can be assigned but the secondary/tertiary would be null
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Triple
argument_list|<
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|,
name|FavoredNodeAssignmentHelper
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|primaryRSMapAndHelper
init|=
name|secondaryAndTertiaryRSPlacementHelper
argument_list|(
literal|1
argument_list|,
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
name|primaryRSMapAndHelper
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
name|primaryRSMapAndHelper
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|primaryRSMapAndHelper
operator|.
name|getThird
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryMap
init|=
name|helper
operator|.
name|placeSecondaryAndTertiaryRS
argument_list|(
name|primaryRSMap
argument_list|)
decl_stmt|;
comment|// no secondary/tertiary placement in case of a single RegionServer
name|assertTrue
argument_list|(
name|secondaryAndTertiaryMap
operator|.
name|get
argument_list|(
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecondaryAndTertiaryPlacementWithMultipleRacks
parameter_list|()
block|{
comment|// Test the case where we have multiple racks and the region servers
comment|// belong to multiple racks
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack1"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack2"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|Triple
argument_list|<
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|,
name|FavoredNodeAssignmentHelper
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|primaryRSMapAndHelper
init|=
name|secondaryAndTertiaryRSPlacementHelper
argument_list|(
literal|60000
argument_list|,
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
name|primaryRSMapAndHelper
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
name|primaryRSMapAndHelper
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|primaryRSMap
operator|.
name|size
argument_list|()
operator|==
literal|60000
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryMap
init|=
name|helper
operator|.
name|placeSecondaryAndTertiaryRS
argument_list|(
name|primaryRSMap
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|secondaryAndTertiaryMap
operator|.
name|size
argument_list|()
operator|==
literal|60000
argument_list|)
expr_stmt|;
comment|// for every region, the primary should be on one rack and the secondary/tertiary
comment|// on another (we create a lot of regions just to increase probability of failure)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|entry
range|:
name|secondaryAndTertiaryMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ServerName
index|[]
name|allServersForRegion
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|primaryRSRack
init|=
name|rackManager
operator|.
name|getRack
argument_list|(
name|primaryRSMap
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|secondaryRSRack
init|=
name|rackManager
operator|.
name|getRack
argument_list|(
name|allServersForRegion
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|tertiaryRSRack
init|=
name|rackManager
operator|.
name|getRack
argument_list|(
name|allServersForRegion
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|racks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|primaryRSRack
argument_list|)
decl_stmt|;
name|racks
operator|.
name|add
argument_list|(
name|secondaryRSRack
argument_list|)
expr_stmt|;
name|racks
operator|.
name|add
argument_list|(
name|tertiaryRSRack
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|racks
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecondaryAndTertiaryPlacementWithLessThanTwoServersInRacks
parameter_list|()
block|{
comment|// Test the case where we have two racks but with less than two servers in each
comment|// We will not have enough machines to select secondary/tertiary
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Triple
argument_list|<
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|,
name|FavoredNodeAssignmentHelper
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|primaryRSMapAndHelper
init|=
name|secondaryAndTertiaryRSPlacementHelper
argument_list|(
literal|6
argument_list|,
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
name|primaryRSMapAndHelper
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
name|primaryRSMapAndHelper
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|primaryRSMapAndHelper
operator|.
name|getThird
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|primaryRSMap
operator|.
name|size
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryMap
init|=
name|helper
operator|.
name|placeSecondaryAndTertiaryRS
argument_list|(
name|primaryRSMap
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
comment|// not enough secondary/tertiary room to place the regions
name|assertTrue
argument_list|(
name|secondaryAndTertiaryMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecondaryAndTertiaryPlacementWithMoreThanOneServerInPrimaryRack
parameter_list|()
block|{
comment|// Test the case where there is only one server in one rack and another rack
comment|// has more servers. We try to choose secondary/tertiary on different
comment|// racks than what the primary is on. But if the other rack doesn't have
comment|// enough nodes to have both secondary/tertiary RSs, the tertiary is placed
comment|// on the same rack as the primary server is on
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack1"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack2"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Triple
argument_list|<
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|,
name|FavoredNodeAssignmentHelper
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|primaryRSMapAndHelper
init|=
name|secondaryAndTertiaryRSPlacementHelper
argument_list|(
literal|6
argument_list|,
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
name|primaryRSMapAndHelper
operator|.
name|getSecond
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
name|primaryRSMapAndHelper
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|primaryRSMapAndHelper
operator|.
name|getThird
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|primaryRSMap
operator|.
name|size
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiaryMap
init|=
name|helper
operator|.
name|placeSecondaryAndTertiaryRS
argument_list|(
name|primaryRSMap
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|secondaryAndTertiaryMap
operator|.
name|size
argument_list|()
operator|==
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|ServerName
name|s
init|=
name|primaryRSMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|ServerName
name|secondaryRS
init|=
name|secondaryAndTertiaryMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|ServerName
name|tertiaryRS
init|=
name|secondaryAndTertiaryMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|racks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|racks
operator|.
name|add
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|secondaryRS
argument_list|)
argument_list|)
expr_stmt|;
name|racks
operator|.
name|add
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|tertiaryRS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|racks
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Triple
argument_list|<
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|,
name|FavoredNodeAssignmentHelper
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|secondaryAndTertiaryRSPlacementHelper
parameter_list|(
name|int
name|regionCount
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
parameter_list|)
block|{
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getServersFromRack
argument_list|(
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignmentMap
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|helper
operator|.
name|initialize
argument_list|()
expr_stmt|;
comment|// create regions
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|regionCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionCount
condition|;
name|i
operator|++
control|)
block|{
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|// place the regions
name|helper
operator|.
name|placePrimaryRSAsRoundRobin
argument_list|(
name|assignmentMap
argument_list|,
name|primaryRSMap
argument_list|,
name|regions
argument_list|)
expr_stmt|;
return|return
operator|new
name|Triple
argument_list|<
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|,
name|FavoredNodeAssignmentHelper
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|(
name|primaryRSMap
argument_list|,
name|helper
argument_list|,
name|regions
argument_list|)
return|;
block|}
specifier|private
name|void
name|primaryRSPlacement
parameter_list|(
name|int
name|regionCount
parameter_list|,
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
parameter_list|,
name|int
name|firstRackSize
parameter_list|,
name|int
name|secondRackSize
parameter_list|,
name|int
name|thirdRackSize
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack1"
argument_list|,
name|firstRackSize
argument_list|)
expr_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack2"
argument_list|,
name|secondRackSize
argument_list|)
expr_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
literal|"rack3"
argument_list|,
name|thirdRackSize
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getServersFromRack
argument_list|(
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
name|helper
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|helper
operator|.
name|canPlaceFavoredNodes
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignmentMap
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryRSMap
operator|==
literal|null
condition|)
name|primaryRSMap
operator|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
expr_stmt|;
comment|// create some regions
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
name|regionCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regionCount
condition|;
name|i
operator|++
control|)
block|{
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"foobar"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
comment|// place those regions in primary RSs
name|helper
operator|.
name|placePrimaryRSAsRoundRobin
argument_list|(
name|assignmentMap
argument_list|,
name|primaryRSMap
argument_list|,
name|regions
argument_list|)
expr_stmt|;
comment|// we should have all the regions nicely spread across the racks
name|int
name|regionsOnRack1
init|=
literal|0
decl_stmt|;
name|int
name|regionsOnRack2
init|=
literal|0
decl_stmt|;
name|int
name|regionsOnRack3
init|=
literal|0
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
if|if
condition|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|primaryRSMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
literal|"rack1"
argument_list|)
condition|)
block|{
name|regionsOnRack1
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|primaryRSMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
literal|"rack2"
argument_list|)
condition|)
block|{
name|regionsOnRack2
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|primaryRSMap
operator|.
name|get
argument_list|(
name|region
argument_list|)
argument_list|)
operator|.
name|equals
argument_list|(
literal|"rack3"
argument_list|)
condition|)
block|{
name|regionsOnRack3
operator|++
expr_stmt|;
block|}
block|}
comment|// Verify that the regions got placed in the way we expect (documented in
comment|// FavoredNodeAssignmentHelper#placePrimaryRSAsRoundRobin)
name|checkNumRegions
argument_list|(
name|regionCount
argument_list|,
name|firstRackSize
argument_list|,
name|secondRackSize
argument_list|,
name|thirdRackSize
argument_list|,
name|regionsOnRack1
argument_list|,
name|regionsOnRack2
argument_list|,
name|regionsOnRack3
argument_list|,
name|assignmentMap
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkNumRegions
parameter_list|(
name|int
name|regionCount
parameter_list|,
name|int
name|firstRackSize
parameter_list|,
name|int
name|secondRackSize
parameter_list|,
name|int
name|thirdRackSize
parameter_list|,
name|int
name|regionsOnRack1
parameter_list|,
name|int
name|regionsOnRack2
parameter_list|,
name|int
name|regionsOnRack3
parameter_list|,
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignmentMap
parameter_list|)
block|{
comment|//The regions should be distributed proportionately to the racksizes
comment|//Verify the ordering was as expected by inserting the racks and regions
comment|//in sorted maps. The keys being the racksize and numregions; values are
comment|//the relative positions of the racksizes and numregions respectively
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|rackMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|rackMap
operator|.
name|put
argument_list|(
name|firstRackSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|rackMap
operator|.
name|put
argument_list|(
name|secondRackSize
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rackMap
operator|.
name|put
argument_list|(
name|thirdRackSize
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|regionMap
init|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|regionMap
operator|.
name|put
argument_list|(
name|regionsOnRack1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|regionMap
operator|.
name|put
argument_list|(
name|regionsOnRack2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|regionMap
operator|.
name|put
argument_list|(
name|regionsOnRack3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|printProportions
argument_list|(
name|firstRackSize
argument_list|,
name|secondRackSize
argument_list|,
name|thirdRackSize
argument_list|,
name|regionsOnRack1
argument_list|,
name|regionsOnRack2
argument_list|,
name|regionsOnRack3
argument_list|)
argument_list|,
name|rackMap
operator|.
name|get
argument_list|(
name|firstRackSize
argument_list|)
operator|==
name|regionMap
operator|.
name|get
argument_list|(
name|regionsOnRack1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|printProportions
argument_list|(
name|firstRackSize
argument_list|,
name|secondRackSize
argument_list|,
name|thirdRackSize
argument_list|,
name|regionsOnRack1
argument_list|,
name|regionsOnRack2
argument_list|,
name|regionsOnRack3
argument_list|)
argument_list|,
name|rackMap
operator|.
name|get
argument_list|(
name|secondRackSize
argument_list|)
operator|==
name|regionMap
operator|.
name|get
argument_list|(
name|regionsOnRack2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|printProportions
argument_list|(
name|firstRackSize
argument_list|,
name|secondRackSize
argument_list|,
name|thirdRackSize
argument_list|,
name|regionsOnRack1
argument_list|,
name|regionsOnRack2
argument_list|,
name|regionsOnRack3
argument_list|)
argument_list|,
name|rackMap
operator|.
name|get
argument_list|(
name|thirdRackSize
argument_list|)
operator|==
name|regionMap
operator|.
name|get
argument_list|(
name|regionsOnRack3
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|printProportions
parameter_list|(
name|int
name|firstRackSize
parameter_list|,
name|int
name|secondRackSize
parameter_list|,
name|int
name|thirdRackSize
parameter_list|,
name|int
name|regionsOnRack1
parameter_list|,
name|int
name|regionsOnRack2
parameter_list|,
name|int
name|regionsOnRack3
parameter_list|)
block|{
return|return
literal|"The rack sizes "
operator|+
name|firstRackSize
operator|+
literal|" "
operator|+
name|secondRackSize
operator|+
literal|" "
operator|+
name|thirdRackSize
operator|+
literal|" "
operator|+
name|regionsOnRack1
operator|+
literal|" "
operator|+
name|regionsOnRack2
operator|+
literal|" "
operator|+
name|regionsOnRack3
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstrainedPlacement
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
operator|+
literal|1
operator|+
literal|":1234"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
operator|+
literal|2
operator|+
literal|":1234"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo"
operator|+
literal|15
operator|+
literal|":1234"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
name|helper
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|helper
operator|.
name|canPlaceFavoredNodes
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|regions
operator|.
name|add
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
name|assignmentMap
init|=
operator|new
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|HRegionInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|primaryRSMap
init|=
operator|new
name|HashMap
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
argument_list|()
decl_stmt|;
name|helper
operator|.
name|placePrimaryRSAsRoundRobin
argument_list|(
name|assignmentMap
argument_list|,
name|primaryRSMap
argument_list|,
name|regions
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|primaryRSMap
operator|.
name|size
argument_list|()
operator|==
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
index|[]
argument_list|>
name|secondaryAndTertiary
init|=
name|helper
operator|.
name|placeSecondaryAndTertiaryRS
argument_list|(
name|primaryRSMap
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|regions
operator|.
name|size
argument_list|()
argument_list|,
name|secondaryAndTertiary
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOneRandomRack
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rackList
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"rack1"
argument_list|,
literal|"rack2"
argument_list|,
literal|"rack3"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|rack
range|:
name|rackList
control|)
block|{
name|rackToServerCount
operator|.
name|put
argument_list|(
name|rack
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getServersFromRack
argument_list|(
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
name|helper
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|helper
operator|.
name|canPlaceFavoredNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check we don't get a bad rack on any number of attempts
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|rackList
operator|.
name|contains
argument_list|(
name|helper
operator|.
name|getOneRandomRack
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check skipRack multiple times when an invalid rack is specified
name|Set
argument_list|<
name|String
argument_list|>
name|skipRacks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"rack"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|rackList
operator|.
name|contains
argument_list|(
name|helper
operator|.
name|getOneRandomRack
argument_list|(
name|skipRacks
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check skipRack multiple times when an valid rack is specified
name|skipRacks
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"rack1"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|validRacks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"rack2"
argument_list|,
literal|"rack3"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|validRacks
operator|.
name|contains
argument_list|(
name|helper
operator|.
name|getOneRandomRack
argument_list|(
name|skipRacks
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRandomServerSingleRack
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|rack
init|=
literal|"rack1"
decl_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
name|rack
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getServersFromRack
argument_list|(
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
name|helper
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|helper
operator|.
name|canPlaceFavoredNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check we don't get a bad node on any number of attempts
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|ServerName
name|sn
init|=
name|helper
operator|.
name|getOneRandomServer
argument_list|(
name|rack
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Server:"
operator|+
name|sn
operator|+
literal|" does not belong to list: "
operator|+
name|servers
argument_list|,
name|servers
operator|.
name|contains
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check skipServers multiple times when an invalid server is specified
name|Set
argument_list|<
name|ServerName
argument_list|>
name|skipServers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"invalidnode:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|ServerName
name|sn
init|=
name|helper
operator|.
name|getOneRandomServer
argument_list|(
name|rack
argument_list|,
name|skipServers
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Server:"
operator|+
name|sn
operator|+
literal|" does not belong to list: "
operator|+
name|servers
argument_list|,
name|servers
operator|.
name|contains
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check skipRack multiple times when an valid servers are specified
name|ServerName
name|skipSN
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo1:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|skipServers
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|skipSN
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|ServerName
name|sn
init|=
name|helper
operator|.
name|getOneRandomServer
argument_list|(
name|rack
argument_list|,
name|skipServers
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
literal|"Skip server should not be selected "
argument_list|,
name|skipSN
operator|.
name|getHostAndPort
argument_list|()
argument_list|,
name|sn
operator|.
name|getHostAndPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Server:"
operator|+
name|sn
operator|+
literal|" does not belong to list: "
operator|+
name|servers
argument_list|,
name|servers
operator|.
name|contains
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRandomServerMultiRack
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rackList
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"rack1"
argument_list|,
literal|"rack2"
argument_list|,
literal|"rack3"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|rack
range|:
name|rackList
control|)
block|{
name|rackToServerCount
operator|.
name|put
argument_list|(
name|rack
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getServersFromRack
argument_list|(
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
name|helper
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|helper
operator|.
name|canPlaceFavoredNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check we don't get a bad node on any number of attempts
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
for|for
control|(
name|String
name|rack
range|:
name|rackList
control|)
block|{
name|ServerName
name|sn
init|=
name|helper
operator|.
name|getOneRandomServer
argument_list|(
name|rack
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Server:"
operator|+
name|sn
operator|+
literal|" does not belong to rack servers: "
operator|+
name|rackToServers
operator|.
name|get
argument_list|(
name|rack
argument_list|)
argument_list|,
name|rackToServers
operator|.
name|get
argument_list|(
name|rack
argument_list|)
operator|.
name|contains
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check skipServers multiple times when an invalid server is specified
name|Set
argument_list|<
name|ServerName
argument_list|>
name|skipServers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"invalidnode:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
for|for
control|(
name|String
name|rack
range|:
name|rackList
control|)
block|{
name|ServerName
name|sn
init|=
name|helper
operator|.
name|getOneRandomServer
argument_list|(
name|rack
argument_list|,
name|skipServers
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Server:"
operator|+
name|sn
operator|+
literal|" does not belong to rack servers: "
operator|+
name|rackToServers
operator|.
name|get
argument_list|(
name|rack
argument_list|)
argument_list|,
name|rackToServers
operator|.
name|get
argument_list|(
name|rack
argument_list|)
operator|.
name|contains
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check skipRack multiple times when an valid servers are specified
name|ServerName
name|skipSN1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo1:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|ServerName
name|skipSN2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo10:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|ServerName
name|skipSN3
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo20:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|skipServers
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|skipSN1
argument_list|,
name|skipSN2
argument_list|,
name|skipSN3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
for|for
control|(
name|String
name|rack
range|:
name|rackList
control|)
block|{
name|ServerName
name|sn
init|=
name|helper
operator|.
name|getOneRandomServer
argument_list|(
name|rack
argument_list|,
name|skipServers
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Skip server should not be selected "
argument_list|,
name|skipServers
operator|.
name|contains
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Server:"
operator|+
name|sn
operator|+
literal|" does not belong to rack servers: "
operator|+
name|rackToServers
operator|.
name|get
argument_list|(
name|rack
argument_list|)
argument_list|,
name|rackToServers
operator|.
name|get
argument_list|(
name|rack
argument_list|)
operator|.
name|contains
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFavoredNodes
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rackList
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"rack1"
argument_list|,
literal|"rack2"
argument_list|,
literal|"rack3"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|rack
range|:
name|rackList
control|)
block|{
name|rackToServerCount
operator|.
name|put
argument_list|(
name|rack
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getServersFromRack
argument_list|(
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
name|helper
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|helper
operator|.
name|canPlaceFavoredNodes
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
name|region
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|maxattempts
init|=
literal|0
init|;
name|maxattempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|maxattempts
operator|++
control|)
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|fn
init|=
name|helper
operator|.
name|generateFavoredNodes
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|checkDuplicateFN
argument_list|(
name|fn
argument_list|)
expr_stmt|;
name|checkFNRacks
argument_list|(
name|fn
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGenMissingFavoredNodeOneRack
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
name|rack
init|=
literal|"rack1"
decl_stmt|;
name|rackToServerCount
operator|.
name|put
argument_list|(
name|rack
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getServersFromRack
argument_list|(
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
name|helper
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|helper
operator|.
name|canPlaceFavoredNodes
argument_list|()
argument_list|)
expr_stmt|;
name|ServerName
name|snRack1SN1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo1:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|ServerName
name|snRack1SN2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo2:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|ServerName
name|snRack1SN3
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo3:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|fn
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|snRack1SN1
argument_list|,
name|snRack1SN2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|checkDuplicateFN
argument_list|(
name|fn
argument_list|,
name|helper
operator|.
name|generateMissingFavoredNode
argument_list|(
name|fn
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fn
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|snRack1SN1
argument_list|,
name|snRack1SN2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|skipServers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|snRack1SN3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|ServerName
name|genSN
init|=
name|helper
operator|.
name|generateMissingFavoredNode
argument_list|(
name|fn
argument_list|,
name|skipServers
argument_list|)
decl_stmt|;
name|checkDuplicateFN
argument_list|(
name|fn
argument_list|,
name|genSN
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Generated FN should not match excluded one"
argument_list|,
name|snRack1SN3
argument_list|,
name|genSN
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGenMissingFavoredNodeMultiRack
parameter_list|()
throws|throws
name|IOException
block|{
name|ServerName
name|snRack1SN1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo1:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|ServerName
name|snRack1SN2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo2:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|ServerName
name|snRack2SN1
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo10:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|ServerName
name|snRack2SN2
init|=
name|ServerName
operator|.
name|valueOf
argument_list|(
literal|"foo11:1234"
argument_list|,
name|ServerName
operator|.
name|NON_STARTCODE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|rackToServerCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|rackList
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"rack1"
argument_list|,
literal|"rack2"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|rack
range|:
name|rackList
control|)
block|{
name|rackToServerCount
operator|.
name|put
argument_list|(
name|rack
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ServerName
argument_list|>
name|servers
init|=
name|getServersFromRack
argument_list|(
name|rackToServerCount
argument_list|)
decl_stmt|;
name|FavoredNodeAssignmentHelper
name|helper
init|=
operator|new
name|FavoredNodeAssignmentHelper
argument_list|(
name|servers
argument_list|,
name|rackManager
argument_list|)
decl_stmt|;
name|helper
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|helper
operator|.
name|canPlaceFavoredNodes
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|fn
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|snRack1SN1
argument_list|,
name|snRack1SN2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|ServerName
name|genSN
init|=
name|helper
operator|.
name|generateMissingFavoredNode
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|checkDuplicateFN
argument_list|(
name|fn
argument_list|,
name|genSN
argument_list|)
expr_stmt|;
name|checkFNRacks
argument_list|(
name|fn
argument_list|,
name|genSN
argument_list|)
expr_stmt|;
block|}
name|fn
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|snRack1SN1
argument_list|,
name|snRack2SN1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|ServerName
name|genSN
init|=
name|helper
operator|.
name|generateMissingFavoredNode
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|checkDuplicateFN
argument_list|(
name|fn
argument_list|,
name|genSN
argument_list|)
expr_stmt|;
name|checkFNRacks
argument_list|(
name|fn
argument_list|,
name|genSN
argument_list|)
expr_stmt|;
block|}
name|fn
operator|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|snRack1SN1
argument_list|,
name|snRack2SN1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|skipServers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|snRack2SN2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|attempts
init|=
literal|0
init|;
name|attempts
operator|<
name|MAX_ATTEMPTS
condition|;
name|attempts
operator|++
control|)
block|{
name|ServerName
name|genSN
init|=
name|helper
operator|.
name|generateMissingFavoredNode
argument_list|(
name|fn
argument_list|,
name|skipServers
argument_list|)
decl_stmt|;
name|checkDuplicateFN
argument_list|(
name|fn
argument_list|,
name|genSN
argument_list|)
expr_stmt|;
name|checkFNRacks
argument_list|(
name|fn
argument_list|,
name|genSN
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Generated FN should not match excluded one"
argument_list|,
name|snRack2SN2
argument_list|,
name|genSN
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkDuplicateFN
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|fnList
parameter_list|,
name|ServerName
name|genFN
parameter_list|)
block|{
name|Set
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|fnList
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Generated FN can't be null"
argument_list|,
name|genFN
argument_list|)
expr_stmt|;
name|favoredNodes
operator|.
name|add
argument_list|(
name|genFN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Did not find expected number of favored nodes"
argument_list|,
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
argument_list|,
name|favoredNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkDuplicateFN
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|fnList
parameter_list|)
block|{
name|Set
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|fnList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not find expected number of favored nodes"
argument_list|,
name|FavoredNodeAssignmentHelper
operator|.
name|FAVORED_NODES_NUM
argument_list|,
name|favoredNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkFNRacks
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|fnList
parameter_list|,
name|ServerName
name|genFN
parameter_list|)
block|{
name|Set
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|fnList
argument_list|)
decl_stmt|;
name|favoredNodes
operator|.
name|add
argument_list|(
name|genFN
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|racks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|favoredNodes
control|)
block|{
name|racks
operator|.
name|add
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"FN should be spread atleast across 2 racks"
argument_list|,
name|racks
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkFNRacks
parameter_list|(
name|List
argument_list|<
name|ServerName
argument_list|>
name|fnList
parameter_list|)
block|{
name|Set
argument_list|<
name|ServerName
argument_list|>
name|favoredNodes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|fnList
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|racks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|ServerName
name|sn
range|:
name|favoredNodes
control|)
block|{
name|racks
operator|.
name|add
argument_list|(
name|rackManager
operator|.
name|getRack
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"FN should be spread atleast across 2 racks"
argument_list|,
name|racks
operator|.
name|size
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

