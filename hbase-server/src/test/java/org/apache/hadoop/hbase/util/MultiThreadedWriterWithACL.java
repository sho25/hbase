begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RetriesExhaustedWithDetailsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|test
operator|.
name|LoadTestDataGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * MultiThreadedWriter that helps in testing ACL  */
end_comment

begin_class
specifier|public
class|class
name|MultiThreadedWriterWithACL
extends|extends
name|MultiThreadedWriter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MultiThreadedWriterWithACL
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|User
name|userOwner
decl_stmt|;
specifier|public
name|MultiThreadedWriterWithACL
parameter_list|(
name|LoadTestDataGenerator
name|dataGen
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|TableName
name|tableName
parameter_list|,
name|User
name|userOwner
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|dataGen
argument_list|,
name|conf
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|this
operator|.
name|userOwner
operator|=
name|userOwner
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|long
name|startKey
parameter_list|,
name|long
name|endKey
parameter_list|,
name|int
name|numThreads
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|start
argument_list|(
name|startKey
argument_list|,
name|endKey
argument_list|,
name|numThreads
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createWriterThreads
parameter_list|(
name|int
name|numThreads
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|HBaseWriterThread
name|writer
init|=
operator|new
name|HBaseWriterThreadWithACL
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|writers
operator|.
name|add
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|HBaseWriterThreadWithACL
extends|extends
name|HBaseWriterThread
block|{
specifier|private
name|HTableInterface
name|table
decl_stmt|;
specifier|private
name|WriteAccessAction
name|writerAction
init|=
operator|new
name|WriteAccessAction
argument_list|()
decl_stmt|;
specifier|public
name|HBaseWriterThreadWithACL
parameter_list|(
name|int
name|writerId
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|writerId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|HTableInterface
name|createTable
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|closeHTable
parameter_list|()
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in closing the table "
operator|+
name|table
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|HTableInterface
name|table
parameter_list|,
name|Put
name|put
parameter_list|,
specifier|final
name|long
name|keyBase
parameter_list|)
block|{
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|put
operator|=
operator|(
name|Put
operator|)
name|dataGenerator
operator|.
name|beforeMutate
argument_list|(
name|keyBase
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|writerAction
operator|.
name|setPut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|writerAction
operator|.
name|setKeyBase
argument_list|(
name|keyBase
argument_list|)
expr_stmt|;
name|writerAction
operator|.
name|setStartTime
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|userOwner
operator|.
name|runAs
argument_list|(
name|writerAction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|recordFailure
argument_list|(
name|table
argument_list|,
name|put
argument_list|,
name|keyBase
argument_list|,
name|start
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|failedKeySet
operator|.
name|add
argument_list|(
name|keyBase
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|WriteAccessAction
implements|implements
name|PrivilegedExceptionAction
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
name|Put
name|put
decl_stmt|;
specifier|private
name|long
name|keyBase
decl_stmt|;
specifier|private
name|long
name|start
decl_stmt|;
specifier|public
name|WriteAccessAction
parameter_list|()
block|{       }
specifier|public
name|void
name|setPut
parameter_list|(
specifier|final
name|Put
name|put
parameter_list|)
block|{
name|this
operator|.
name|put
operator|=
name|put
expr_stmt|;
block|}
specifier|public
name|void
name|setKeyBase
parameter_list|(
specifier|final
name|long
name|keyBase
parameter_list|)
block|{
name|this
operator|.
name|keyBase
operator|=
name|keyBase
expr_stmt|;
block|}
specifier|public
name|void
name|setStartTime
parameter_list|(
specifier|final
name|long
name|start
parameter_list|)
block|{
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|table
operator|=
operator|new
name|HTable
argument_list|(
name|conf
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|recordFailure
argument_list|(
name|table
argument_list|,
name|put
argument_list|,
name|keyBase
argument_list|,
name|start
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
block|}
specifier|private
name|void
name|recordFailure
parameter_list|(
specifier|final
name|HTableInterface
name|table
parameter_list|,
specifier|final
name|Put
name|put
parameter_list|,
specifier|final
name|long
name|keyBase
parameter_list|,
specifier|final
name|long
name|start
parameter_list|,
name|IOException
name|e
parameter_list|)
block|{
name|failedKeySet
operator|.
name|add
argument_list|(
name|keyBase
argument_list|)
expr_stmt|;
name|String
name|exceptionInfo
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RetriesExhaustedWithDetailsException
condition|)
block|{
name|RetriesExhaustedWithDetailsException
name|aggEx
init|=
operator|(
name|RetriesExhaustedWithDetailsException
operator|)
name|e
decl_stmt|;
name|exceptionInfo
operator|=
name|aggEx
operator|.
name|getExhaustiveDescription
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|StringWriter
name|stackWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|stackWriter
argument_list|)
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|exceptionInfo
operator|=
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to insert: "
operator|+
name|keyBase
operator|+
literal|" after "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms; region information: "
operator|+
name|getRegionDebugInfoSafe
argument_list|(
name|table
argument_list|,
name|put
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"; errors: "
operator|+
name|exceptionInfo
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

