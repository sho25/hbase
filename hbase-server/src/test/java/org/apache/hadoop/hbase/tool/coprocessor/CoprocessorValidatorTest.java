begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|coprocessor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|CoprocessorDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MasterCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|coprocessor
operator|.
name|CoprocessorViolation
operator|.
name|Severity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|CoprocessorValidatorTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|CoprocessorValidatorTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CoprocessorValidator
name|validator
decl_stmt|;
specifier|public
name|CoprocessorValidatorTest
parameter_list|()
block|{
name|validator
operator|=
operator|new
name|CoprocessorValidator
argument_list|()
expr_stmt|;
name|validator
operator|.
name|setConf
argument_list|(
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ClassLoader
name|getClassLoader
parameter_list|()
block|{
return|return
name|CoprocessorValidatorTest
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getFullClassName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
return|return
name|CoprocessorValidatorTest
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"$"
operator|+
name|className
return|;
block|}
specifier|private
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|validateClass
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|ClassLoader
name|classLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
return|return
name|validateClass
argument_list|(
name|classLoader
argument_list|,
name|className
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|validateClass
parameter_list|(
name|ClassLoader
name|classLoader
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|classNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|getFullClassName
argument_list|(
name|className
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|validator
operator|.
name|validateClasses
argument_list|(
name|classLoader
argument_list|,
name|classNames
argument_list|,
name|violations
argument_list|)
expr_stmt|;
return|return
name|violations
return|;
block|}
comment|/*    * In this test case, we are try to load a not-existent class.    */
annotation|@
name|Test
specifier|public
name|void
name|testNoSuchClass
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
init|=
name|validateClass
argument_list|(
literal|"NoSuchClass"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|violations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CoprocessorViolation
name|violation
init|=
name|violations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getFullClassName
argument_list|(
literal|"NoSuchClass"
argument_list|)
argument_list|,
name|violation
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Severity
operator|.
name|ERROR
argument_list|,
name|violation
operator|.
name|getSeverity
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|stackTrace
init|=
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|violation
operator|.
name|getThrowable
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stackTrace
operator|.
name|contains
argument_list|(
literal|"java.lang.ClassNotFoundException: "
operator|+
literal|"org.apache.hadoop.hbase.tool.coprocessor.CoprocessorValidatorTest$NoSuchClass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * In this test case, we are validating MissingClass coprocessor, which    * references a missing class. With a special classloader, we prevent that    * class to be loaded at runtime. It simulates similar cases where a class    * is no more on our classpath.    * E.g. org.apache.hadoop.hbase.regionserver.wal.WALEdit was moved to    * org.apache.hadoop.hbase.wal, so class loading will fail on 2.0.    */
specifier|private
specifier|static
class|class
name|MissingClass
block|{   }
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
class|class
name|MissingClassObserver
block|{
specifier|public
name|void
name|method
parameter_list|(
name|MissingClass
name|missingClass
parameter_list|)
block|{     }
block|}
specifier|private
specifier|static
class|class
name|MissingClassClassLoader
extends|extends
name|ClassLoader
block|{
specifier|public
name|MissingClassClassLoader
parameter_list|()
block|{
name|super
argument_list|(
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|getFullClassName
argument_list|(
literal|"MissingClass"
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|findClass
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingClass
parameter_list|()
throws|throws
name|IOException
block|{
name|MissingClassClassLoader
name|missingClassClassLoader
init|=
operator|new
name|MissingClassClassLoader
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
init|=
name|validateClass
argument_list|(
name|missingClassClassLoader
argument_list|,
literal|"MissingClassObserver"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|violations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CoprocessorViolation
name|violation
init|=
name|violations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getFullClassName
argument_list|(
literal|"MissingClassObserver"
argument_list|)
argument_list|,
name|violation
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Severity
operator|.
name|ERROR
argument_list|,
name|violation
operator|.
name|getSeverity
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|stackTrace
init|=
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|violation
operator|.
name|getThrowable
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stackTrace
operator|.
name|contains
argument_list|(
literal|"java.lang.ClassNotFoundException: "
operator|+
literal|"org.apache.hadoop.hbase.tool.coprocessor.CoprocessorValidatorTest$MissingClass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * ObsoleteMethod coprocessor implements preCreateTable method which has    * HRegionInfo parameters. In our current implementation, we pass only    * RegionInfo parameters, so this method won't be called by HBase at all.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
specifier|static
class|class
name|ObsoleteMethodObserver
comment|/* implements MasterObserver */
block|{
specifier|public
name|void
name|preCreateTable
parameter_list|(
name|ObserverContext
argument_list|<
name|MasterCoprocessorEnvironment
argument_list|>
name|ctx
parameter_list|,
name|HTableDescriptor
name|desc
parameter_list|,
name|HRegionInfo
index|[]
name|regions
parameter_list|)
throws|throws
name|IOException
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObsoleteMethod
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
init|=
name|validateClass
argument_list|(
literal|"ObsoleteMethodObserver"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|violations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CoprocessorViolation
name|violation
init|=
name|violations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Severity
operator|.
name|WARNING
argument_list|,
name|violation
operator|.
name|getSeverity
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getFullClassName
argument_list|(
literal|"ObsoleteMethodObserver"
argument_list|)
argument_list|,
name|violation
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|violation
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"was removed from new coprocessor API"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|validateTable
parameter_list|(
name|String
name|jarFile
parameter_list|,
name|String
name|className
parameter_list|)
throws|throws
name|IOException
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*"
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|mock
argument_list|(
name|Admin
operator|.
name|class
argument_list|)
decl_stmt|;
name|TableDescriptor
name|tableDescriptor
init|=
name|mock
argument_list|(
name|TableDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TableDescriptor
argument_list|>
name|tableDescriptors
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|tableDescriptor
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|tableDescriptors
argument_list|)
operator|.
name|when
argument_list|(
name|admin
argument_list|)
operator|.
name|listTableDescriptors
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|CoprocessorDescriptor
name|coprocessorDescriptor
init|=
name|mock
argument_list|(
name|CoprocessorDescriptor
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CoprocessorDescriptor
argument_list|>
name|coprocessorDescriptors
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|coprocessorDescriptor
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
name|coprocessorDescriptors
argument_list|)
operator|.
name|when
argument_list|(
name|tableDescriptor
argument_list|)
operator|.
name|getCoprocessorDescriptors
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|getFullClassName
argument_list|(
name|className
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|coprocessorDescriptor
argument_list|)
operator|.
name|getClassName
argument_list|()
expr_stmt|;
name|doReturn
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|jarFile
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|coprocessorDescriptor
argument_list|)
operator|.
name|getJarPath
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|validator
operator|.
name|validateTables
argument_list|(
name|getClassLoader
argument_list|()
argument_list|,
name|admin
argument_list|,
name|pattern
argument_list|,
name|violations
argument_list|)
expr_stmt|;
return|return
name|violations
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableNoSuchClass
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
init|=
name|validateTable
argument_list|(
literal|null
argument_list|,
literal|"NoSuchClass"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|violations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CoprocessorViolation
name|violation
init|=
name|violations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getFullClassName
argument_list|(
literal|"NoSuchClass"
argument_list|)
argument_list|,
name|violation
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Severity
operator|.
name|ERROR
argument_list|,
name|violation
operator|.
name|getSeverity
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|stackTrace
init|=
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|violation
operator|.
name|getThrowable
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|stackTrace
operator|.
name|contains
argument_list|(
literal|"java.lang.ClassNotFoundException: "
operator|+
literal|"org.apache.hadoop.hbase.tool.coprocessor.CoprocessorValidatorTest$NoSuchClass"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableMissingJar
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
init|=
name|validateTable
argument_list|(
literal|"no such file"
argument_list|,
literal|"NoSuchClass"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|violations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CoprocessorViolation
name|violation
init|=
name|violations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getFullClassName
argument_list|(
literal|"NoSuchClass"
argument_list|)
argument_list|,
name|violation
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Severity
operator|.
name|ERROR
argument_list|,
name|violation
operator|.
name|getSeverity
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|violation
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"could not validate jar file 'no such file'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableValidJar
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|outputDirectory
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"target"
argument_list|,
literal|"test-classes"
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|getFullClassName
argument_list|(
literal|"ObsoleteMethodObserver"
argument_list|)
decl_stmt|;
name|Path
name|classFile
init|=
name|Paths
operator|.
name|get
argument_list|(
name|className
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|".class"
argument_list|)
decl_stmt|;
name|Path
name|fullClassFile
init|=
name|outputDirectory
operator|.
name|resolve
argument_list|(
name|classFile
argument_list|)
decl_stmt|;
name|Path
name|tempJarFile
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
literal|"coprocessor-validator-test-"
argument_list|,
literal|".jar"
argument_list|)
decl_stmt|;
try|try
block|{
try|try
init|(
name|OutputStream
name|fileStream
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|tempJarFile
argument_list|)
init|;
name|JarOutputStream
name|jarStream
operator|=
operator|new
name|JarOutputStream
argument_list|(
name|fileStream
argument_list|)
init|;
name|InputStream
name|classStream
operator|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|fullClassFile
argument_list|)
init|)
block|{
name|ZipEntry
name|entry
init|=
operator|new
name|ZipEntry
argument_list|(
name|classFile
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|jarStream
operator|.
name|putNextEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
name|ByteStreams
operator|.
name|copy
argument_list|(
name|classStream
argument_list|,
name|jarStream
argument_list|)
expr_stmt|;
block|}
name|String
name|tempJarFileUri
init|=
name|tempJarFile
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CoprocessorViolation
argument_list|>
name|violations
init|=
name|validateTable
argument_list|(
name|tempJarFileUri
argument_list|,
literal|"ObsoleteMethodObserver"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|violations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CoprocessorViolation
name|violation
init|=
name|violations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|getFullClassName
argument_list|(
literal|"ObsoleteMethodObserver"
argument_list|)
argument_list|,
name|violation
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Severity
operator|.
name|WARNING
argument_list|,
name|violation
operator|.
name|getSeverity
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|violation
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"was removed from new coprocessor API"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Files
operator|.
name|delete
argument_list|(
name|tempJarFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

