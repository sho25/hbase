begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RPCTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RPCTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBufferChain
block|{
specifier|private
name|File
name|tmpFile
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
index|[]
name|HELLO_WORLD_CHUNKS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
literal|"hello"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
block|,
literal|" "
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
block|,
literal|"world"
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
block|}
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|tmpFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"TestBufferChain"
argument_list|,
literal|"txt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBackBytesWePutIn
parameter_list|()
block|{
name|ByteBuffer
index|[]
name|bufs
init|=
name|wrapArrays
argument_list|(
name|HELLO_WORLD_CHUNKS
argument_list|)
decl_stmt|;
name|BufferChain
name|chain
init|=
operator|new
name|BufferChain
argument_list|(
name|bufs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hello world"
argument_list|)
argument_list|,
name|chain
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChainChunkBiggerThanWholeArray
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteBuffer
index|[]
name|bufs
init|=
name|wrapArrays
argument_list|(
name|HELLO_WORLD_CHUNKS
argument_list|)
decl_stmt|;
name|BufferChain
name|chain
init|=
operator|new
name|BufferChain
argument_list|(
name|bufs
argument_list|)
decl_stmt|;
name|writeAndVerify
argument_list|(
name|chain
argument_list|,
literal|"hello world"
argument_list|,
literal|8192
argument_list|)
expr_stmt|;
name|assertNoRemaining
argument_list|(
name|bufs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChainChunkBiggerThanSomeArrays
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteBuffer
index|[]
name|bufs
init|=
name|wrapArrays
argument_list|(
name|HELLO_WORLD_CHUNKS
argument_list|)
decl_stmt|;
name|BufferChain
name|chain
init|=
operator|new
name|BufferChain
argument_list|(
name|bufs
argument_list|)
decl_stmt|;
name|writeAndVerify
argument_list|(
name|chain
argument_list|,
literal|"hello world"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertNoRemaining
argument_list|(
name|bufs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLimitOffset
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteBuffer
index|[]
name|bufs
init|=
operator|new
name|ByteBuffer
index|[]
block|{
name|stringBuf
argument_list|(
literal|"XXXhelloYYY"
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
block|,
name|stringBuf
argument_list|(
literal|" "
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
block|,
name|stringBuf
argument_list|(
literal|"XXXXworldY"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
block|}
decl_stmt|;
name|BufferChain
name|chain
init|=
operator|new
name|BufferChain
argument_list|(
name|bufs
argument_list|)
decl_stmt|;
name|writeAndVerify
argument_list|(
name|chain
argument_list|,
literal|"hello world"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertNoRemaining
argument_list|(
name|bufs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWithSpy
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteBuffer
index|[]
name|bufs
init|=
operator|new
name|ByteBuffer
index|[]
block|{
name|stringBuf
argument_list|(
literal|"XXXhelloYYY"
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
block|,
name|stringBuf
argument_list|(
literal|" "
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
block|,
name|stringBuf
argument_list|(
literal|"XXXXworldY"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
block|}
decl_stmt|;
name|BufferChain
name|chain
init|=
operator|new
name|BufferChain
argument_list|(
name|bufs
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|FileChannel
name|ch
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|fos
operator|.
name|getChannel
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|chain
operator|.
name|write
argument_list|(
name|ch
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"he"
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|tmpFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|chain
operator|.
name|write
argument_list|(
name|ch
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hell"
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|tmpFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|chain
operator|.
name|write
argument_list|(
name|ch
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello w"
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|tmpFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|chain
operator|.
name|write
argument_list|(
name|ch
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello world"
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|tmpFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ch
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|ByteBuffer
name|stringBuf
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|position
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|string
operator|.
name|getBytes
argument_list|(
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|buf
operator|.
name|position
argument_list|(
name|position
argument_list|)
expr_stmt|;
name|buf
operator|.
name|limit
argument_list|(
name|position
operator|+
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|buf
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
specifier|private
name|void
name|assertNoRemaining
parameter_list|(
name|ByteBuffer
index|[]
name|bufs
parameter_list|)
block|{
for|for
control|(
name|ByteBuffer
name|buf
range|:
name|bufs
control|)
block|{
name|assertFalse
argument_list|(
name|buf
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ByteBuffer
index|[]
name|wrapArrays
parameter_list|(
name|byte
index|[]
index|[]
name|arrays
parameter_list|)
block|{
name|ByteBuffer
index|[]
name|ret
init|=
operator|new
name|ByteBuffer
index|[
name|arrays
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arrays
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|arrays
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|writeAndVerify
parameter_list|(
name|BufferChain
name|chain
parameter_list|,
name|String
name|string
parameter_list|,
name|int
name|chunkSize
parameter_list|)
throws|throws
name|IOException
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|FileChannel
name|ch
init|=
name|fos
operator|.
name|getChannel
argument_list|()
decl_stmt|;
try|try
block|{
name|long
name|remaining
init|=
name|string
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|chain
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|long
name|n
init|=
name|chain
operator|.
name|write
argument_list|(
name|ch
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n
operator|==
name|chunkSize
operator|||
name|n
operator|==
name|remaining
argument_list|)
expr_stmt|;
name|remaining
operator|-=
name|n
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|remaining
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|chain
operator|.
name|hasRemaining
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|string
argument_list|,
name|Files
operator|.
name|toString
argument_list|(
name|tmpFile
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

