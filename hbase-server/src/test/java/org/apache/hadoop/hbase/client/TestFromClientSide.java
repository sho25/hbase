begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|RegionLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|metrics
operator|.
name|ScanMetrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|CoprocessorHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MultiRowMutationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|ObserverContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionCoprocessorEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|RegionObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|ScannerResetException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|BinaryComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|CompareFilter
operator|.
name|CompareOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FirstKeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|InclusiveStopFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|KeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|LongComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|PrefixFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RegexStringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SubstringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|WhileMatchFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|CoprocessorRpcChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|LoadBalancer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|MutationProto
operator|.
name|MutationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MultiRowMutationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|MultiRowMutationProtos
operator|.
name|MutateRowsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|DelegatingKeyValueScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|KeyValueScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|NoSuchColumnFamilyException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ScanInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_comment
comment|/**  * Run tests that use the HBase clients; {@link Table}.  * Sets up the HBase mini cluster once at start and runs through all client tests.  * Each creates a table named for the method and does its stuff against that.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
class|class
name|TestFromClientSide
block|{
comment|// NOTE: Increment tests were moved to their own class, TestIncrementsFromClientSide.
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestFromClientSide
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testValue"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|int
name|SLAVES
init|=
literal|3
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Uncomment the following lines if more verbosity is needed for
comment|// debugging (see HBASE-12285 for details).
comment|//((Log4JLogger)RpcServer.LOG).getLogger().setLevel(Level.ALL);
comment|//((Log4JLogger)RpcClient.LOG).getLogger().setLevel(Level.ALL);
comment|//((Log4JLogger)ScannerCallable.LOG).getLogger().setLevel(Level.ALL);
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setStrings
argument_list|(
name|CoprocessorHost
operator|.
name|REGION_COPROCESSOR_CONF_KEY
argument_list|,
name|MultiRowMutationEndpoint
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
literal|"hbase.table.sanity.checks"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// enable for below tests
name|conf
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_SCANNER_TIMEOUT_PERIOD
argument_list|,
literal|6000000
argument_list|)
expr_stmt|;
comment|// We need more than one region server in this test
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
name|SLAVES
argument_list|)
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
comment|/**    * @throws java.lang.Exception    */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Nothing to do.
block|}
comment|/**    * Test append result when there are duplicate rpc request.    */
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kvs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|put
argument_list|(
name|HConnectionTestingUtility
operator|.
name|SleepAtFirstRpcCall
operator|.
name|SLEEP_TIME_CONF_KEY
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|HConnectionTestingUtility
operator|.
name|SleepAtFirstRpcCall
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|ROW
block|}
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
literal|50
argument_list|)
expr_stmt|;
comment|// Client will retry beacuse rpc timeout is small than the sleep time of first rpc call
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|HTable
condition|)
block|{
name|HTable
name|table
init|=
operator|(
name|HTable
operator|)
name|t
decl_stmt|;
name|table
operator|.
name|setOperationTimeout
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
expr_stmt|;
try|try
block|{
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|append
operator|.
name|addColumn
argument_list|(
name|TEST_UTIL
operator|.
name|fam1
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
decl_stmt|;
comment|// Verify expected result
name|Cell
index|[]
name|cells
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cells
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertKey
argument_list|(
name|cells
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|TEST_UTIL
operator|.
name|fam1
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Verify expected result again
name|Result
name|readResult
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|cells
operator|=
name|readResult
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cells
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertKey
argument_list|(
name|cells
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|TEST_UTIL
operator|.
name|fam1
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|connection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Basic client side validation of HBASE-4536    */
annotation|@
name|Test
specifier|public
name|void
name|testKeepDeletedCells
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|C0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c0"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|T1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"T1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|T2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"T2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|T3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"T3"
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|setKeepDeletedCells
argument_list|(
name|KeepDeletedCells
operator|.
name|TRUE
argument_list|)
operator|.
name|setDataBlockEncoding
argument_list|(
name|DataBlockEncoding
operator|.
name|PREFIX_TREE
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|Table
name|h
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|4
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|T3
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
decl_stmt|;
name|h
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|h
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|T1
argument_list|)
decl_stmt|;
comment|// does *not* include the delete
name|g
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|h
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|T2
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|T1
argument_list|)
decl_stmt|;
name|s
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|h
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|T2
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T1
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|T1
argument_list|)
expr_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|h
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|isDeleteFamily
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T3
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T2
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T1
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|h
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**     * Basic client side validation of HBASE-10118     */
annotation|@
name|Test
specifier|public
name|void
name|testPurgeFutureDeletes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|COLUMN
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// future timestamp
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|*
literal|2
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|del
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|)
argument_list|)
expr_stmt|;
comment|// major compaction, purged future deletes
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// waiting for the major compaction to complete
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|6000
argument_list|,
operator|new
name|Waiter
operator|.
name|Predicate
argument_list|<
name|IOException
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|==
name|CompactionState
operator|.
name|NONE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Verifies that getConfiguration returns the same Configuration object used    * to create the HTable instance.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test from client side of an involved filter against a multi family that    * involves deletes.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testWeirdCacheBehaviour
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
block|}
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|String
name|value
init|=
literal|"this is the value"
decl_stmt|;
name|String
name|value2
init|=
literal|"this is some other value"
decl_stmt|;
name|String
name|keyPrefix1
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyPrefix2
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyPrefix3
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix3
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|ht
argument_list|,
name|value2
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|ht
argument_list|,
name|value2
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|ht
argument_list|,
name|value2
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting important checks....."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix1
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix2
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix3
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix3
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteColumns
parameter_list|(
name|Table
name|ht
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|keyPrefix
parameter_list|)
throws|throws
name|IOException
block|{
name|ResultScanner
name|scanner
init|=
name|buildScanner
argument_list|(
name|keyPrefix
argument_list|,
name|value
argument_list|,
name|ht
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|it
init|=
name|scanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Result
name|result
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Did not perform correct number of deletes"
argument_list|,
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getNumberOfRows
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|value
parameter_list|,
name|Table
name|ht
parameter_list|)
throws|throws
name|Exception
block|{
name|ResultScanner
name|resultScanner
init|=
name|buildScanner
argument_list|(
name|keyPrefix
argument_list|,
name|value
argument_list|,
name|ht
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Result
argument_list|>
name|scanner
init|=
name|resultScanner
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|numberOfResults
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|scanner
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Got back key: "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|result
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"kv="
operator|+
name|kv
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|numberOfResults
operator|++
expr_stmt|;
block|}
return|return
name|numberOfResults
return|;
block|}
specifier|private
name|ResultScanner
name|buildScanner
parameter_list|(
name|String
name|keyPrefix
parameter_list|,
name|String
name|value
parameter_list|,
name|Table
name|ht
parameter_list|)
throws|throws
name|IOException
block|{
comment|// OurFilterList allFilters = new OurFilterList();
name|FilterList
name|allFilters
init|=
operator|new
name|FilterList
argument_list|(
comment|/* FilterList.Operator.MUST_PASS_ALL */
argument_list|)
decl_stmt|;
name|allFilters
operator|.
name|addFilter
argument_list|(
operator|new
name|PrefixFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keyPrefix
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SingleColumnValueFilter
name|filter
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|filter
operator|.
name|setFilterIfMissing
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allFilters
operator|.
name|addFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
comment|// allFilters.addFilter(new
comment|// RowExcludingSingleColumnValueFilter(Bytes.toBytes("trans-tags"),
comment|// Bytes.toBytes("qual2"), CompareOp.EQUAL, Bytes.toBytes(value)));
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|allFilters
argument_list|)
expr_stmt|;
return|return
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
return|;
block|}
specifier|private
name|void
name|putRows
parameter_list|(
name|Table
name|ht
parameter_list|,
name|int
name|numRows
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|String
name|row
init|=
name|key
operator|+
literal|"_"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Saving row: %s, with value %s"
argument_list|,
name|row
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value for blob"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"statement"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"20090921010101999"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual2"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"adhocTransactionGroupId"
argument_list|)
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test filters when multiple regions.  It does counts.  Needs eye-balling of    * logs to ensure that we're not scanning more regions that we're supposed to.    * Related to the TestFilterAcrossRegions over in the o.a.h.h.filter package.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testFilterAcrossMultipleRegions
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|FAMILY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertRowCount
argument_list|(
name|t
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Split the table.  Should split on a reasonable key; 'lqj'
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|splitTable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertRowCount
argument_list|(
name|t
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Get end key of first region.
name|byte
index|[]
name|endKey
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
comment|// Count rows with a filter that stops us before passed 'endKey'.
comment|// Should be count of rows in first region.
name|int
name|endKeyCount
init|=
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|endKey
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|endKeyCount
operator|<
name|rowCount
argument_list|)
expr_stmt|;
comment|// How do I know I did not got to second region?  Thats tough.  Can't really
comment|// do that in client-side region test.  I verified by tracing in debugger.
comment|// I changed the messages that come out when set to DEBUG so should see
comment|// when scanner is done. Says "Finished with scanning..." with region name.
comment|// Check that its finished in right region.
comment|// New test.  Make it so scan goes into next region by one and then two.
comment|// Make sure count comes out right.
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[]
block|{
name|endKey
index|[
literal|0
index|]
block|,
name|endKey
index|[
literal|1
index|]
block|,
call|(
name|byte
call|)
argument_list|(
name|endKey
index|[
literal|2
index|]
operator|+
literal|1
argument_list|)
block|}
decl_stmt|;
name|int
name|plusOneCount
init|=
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|endKeyCount
operator|+
literal|1
argument_list|,
name|plusOneCount
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|byte
index|[]
block|{
name|endKey
index|[
literal|0
index|]
block|,
name|endKey
index|[
literal|1
index|]
block|,
call|(
name|byte
call|)
argument_list|(
name|endKey
index|[
literal|2
index|]
operator|+
literal|2
argument_list|)
block|}
expr_stmt|;
name|int
name|plusTwoCount
init|=
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|endKeyCount
operator|+
literal|2
argument_list|,
name|plusTwoCount
argument_list|)
expr_stmt|;
comment|// New test.  Make it so I scan one less than endkey.
name|key
operator|=
operator|new
name|byte
index|[]
block|{
name|endKey
index|[
literal|0
index|]
block|,
name|endKey
index|[
literal|1
index|]
block|,
call|(
name|byte
call|)
argument_list|(
name|endKey
index|[
literal|2
index|]
operator|-
literal|1
argument_list|)
block|}
expr_stmt|;
name|int
name|minusOneCount
init|=
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|endKeyCount
operator|-
literal|1
argument_list|,
name|minusOneCount
argument_list|)
expr_stmt|;
comment|// For above test... study logs.  Make sure we do "Finished with scanning.."
comment|// in first region and that we do not fall into the next region.
name|key
operator|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'a'
block|,
literal|'a'
block|}
expr_stmt|;
name|int
name|countBBB
init|=
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|EQUAL
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countBBB
argument_list|)
expr_stmt|;
name|int
name|countGreater
init|=
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|endKey
argument_list|,
literal|null
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|)
argument_list|)
decl_stmt|;
comment|// Because started at start of table.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countGreater
argument_list|)
expr_stmt|;
name|countGreater
operator|=
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|endKey
argument_list|,
name|endKey
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCount
operator|-
name|endKeyCount
argument_list|,
name|countGreater
argument_list|)
expr_stmt|;
block|}
comment|/**    * This is a coprocessor to inject a test failure so that a store scanner.reseek() call will    * fail with an IOException() on the first call.    */
specifier|public
specifier|static
class|class
name|ExceptionInReseekRegionObserver
implements|implements
name|RegionObserver
block|{
specifier|static
name|AtomicLong
name|reqCount
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|static
name|AtomicBoolean
name|isDoNotRetry
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// whether to throw DNRIOE
specifier|static
name|AtomicBoolean
name|throwOnce
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|// whether to only throw once
specifier|static
name|void
name|reset
parameter_list|()
block|{
name|reqCount
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|isDoNotRetry
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|throwOnce
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
class|class
name|MyStoreScanner
extends|extends
name|StoreScanner
block|{
specifier|public
name|MyStoreScanner
parameter_list|(
name|Store
name|store
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|readPt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|store
argument_list|,
name|scanInfo
argument_list|,
name|scan
argument_list|,
name|columns
argument_list|,
name|readPt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|selectScannersFrom
parameter_list|(
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|KeyValueScanner
argument_list|>
name|allScanners
parameter_list|)
block|{
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|super
operator|.
name|selectScannersFrom
argument_list|(
name|store
argument_list|,
name|allScanners
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|newScanners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|scanners
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|newScanners
operator|.
name|add
argument_list|(
operator|new
name|DelegatingKeyValueScanner
argument_list|(
name|scanner
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|reseek
parameter_list|(
name|Cell
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|reqCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|throwOnce
operator|.
name|get
argument_list|()
operator|||
name|reqCount
operator|.
name|get
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|isDoNotRetry
operator|.
name|get
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Injected exception"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Injected exception"
argument_list|)
throw|;
block|}
block|}
return|return
name|super
operator|.
name|reseek
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|newScanners
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|KeyValueScanner
name|preStoreScannerOpen
parameter_list|(
name|ObserverContext
argument_list|<
name|RegionCoprocessorEnvironment
argument_list|>
name|c
parameter_list|,
name|Store
name|store
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|targetCols
parameter_list|,
name|KeyValueScanner
name|s
parameter_list|,
specifier|final
name|long
name|readPt
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MyStoreScanner
argument_list|(
name|store
argument_list|,
name|store
operator|.
name|getScanInfo
argument_list|()
argument_list|,
name|scan
argument_list|,
name|targetCols
argument_list|,
name|readPt
argument_list|)
return|;
block|}
block|}
comment|/**    * Tests the case where a Scan can throw an IOException in the middle of the seek / reseek    * leaving the server side RegionScanner to be in dirty state. The client has to ensure that the    * ClientScanner does not get an exception and also sees all the data.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testClientScannerIsResetWhenScanThrowsIOException
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.client.log.scanner.activity"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addCoprocessor
argument_list|(
name|ExceptionInReseekRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|ExceptionInReseekRegionObserver
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ExceptionInReseekRegionObserver
operator|.
name|throwOnce
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// throw exceptions only once
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|int
name|rowCount
init|=
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|FAMILY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|int
name|actualRowCount
init|=
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|actualRowCount
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ExceptionInReseekRegionObserver
operator|.
name|reqCount
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the case where a coprocessor throws a DoNotRetryIOException in the scan. The expectation    * is that the exception will bubble up to the client scanner instead of being retried.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testScannerThrowsExceptionWhenCoprocessorThrowsDNRIOE
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.client.log.scanner.activity"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addCoprocessor
argument_list|(
name|ExceptionInReseekRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|ExceptionInReseekRegionObserver
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ExceptionInReseekRegionObserver
operator|.
name|isDoNotRetry
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|FAMILY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|expected
parameter_list|)
block|{
comment|// expected
block|}
name|assertTrue
argument_list|(
name|ExceptionInReseekRegionObserver
operator|.
name|reqCount
operator|.
name|get
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests the case where a coprocessor throws a regular IOException in the scan. The expectation    * is that the we will keep on retrying, but fail after the retries are exhausted instead of    * retrying indefinitely.    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|180000
argument_list|)
specifier|public
name|void
name|testScannerFailsAfterRetriesWhenCoprocessorThrowsIOE
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setBoolean
argument_list|(
literal|"hbase.client.log.scanner.activity"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_RETRIES_NUMBER
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|HTableDescriptor
name|htd
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addCoprocessor
argument_list|(
name|ExceptionInReseekRegionObserver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
name|ExceptionInReseekRegionObserver
operator|.
name|reset
argument_list|()
expr_stmt|;
name|ExceptionInReseekRegionObserver
operator|.
name|throwOnce
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// throw exceptions in every retry
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|FAMILY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown an exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DoNotRetryIOException
name|expected
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|expected
operator|instanceof
name|ScannerResetException
argument_list|)
expr_stmt|;
comment|// expected
block|}
name|assertTrue
argument_list|(
name|ExceptionInReseekRegionObserver
operator|.
name|reqCount
operator|.
name|get
argument_list|()
operator|>=
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/*    * @param key    * @return Scan with RowFilter that does LESS than passed key.    */
specifier|private
name|Scan
name|createScanWithRowFilter
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|LESS
argument_list|)
return|;
block|}
comment|/*    * @param key    * @param op    * @param startRow    * @return Scan with RowFilter that does CompareOp op on passed key.    */
specifier|private
name|Scan
name|createScanWithRowFilter
parameter_list|(
specifier|final
name|byte
index|[]
name|key
parameter_list|,
specifier|final
name|byte
index|[]
name|startRow
parameter_list|,
name|CompareFilter
operator|.
name|CompareOp
name|op
parameter_list|)
block|{
comment|// Make sure key is of some substance... non-null and> than first key.
name|assertTrue
argument_list|(
name|key
operator|!=
literal|null
operator|&&
name|key
operator|.
name|length
operator|>
literal|0
operator|&&
name|Bytes
operator|.
name|BYTES_COMPARATOR
operator|.
name|compare
argument_list|(
name|key
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'a'
block|,
literal|'a'
block|}
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Key="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
name|startRow
operator|==
literal|null
condition|?
operator|new
name|Scan
argument_list|()
else|:
operator|new
name|Scan
argument_list|(
name|startRow
argument_list|)
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|RowFilter
argument_list|(
name|op
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|f
operator|=
operator|new
name|WhileMatchFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|s
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|private
name|void
name|assertRowCount
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|,
specifier|final
name|int
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|TEST_UTIL
operator|.
name|countRows
argument_list|(
name|t
argument_list|,
operator|new
name|Scan
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*    * Split table into multiple regions.    * @param t Table to split.    * @return Map of regions to servers.    * @throws IOException    */
specifier|private
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|splitTable
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// Split this table in two.
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|split
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|waitOnSplit
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
return|return
name|regions
return|;
block|}
comment|/*    * Wait on table split.  May return because we waited long enough on the split    * and it didn't happen.  Caller should check.    * @param t    * @return Map of table regions; caller needs to check table actually split.    */
specifier|private
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|waitOnSplit
parameter_list|(
specifier|final
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
init|)
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|int
name|originalCount
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"hbase.test.retries"
argument_list|,
literal|30
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|regions
operator|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|>
name|originalCount
condition|)
break|break;
block|}
return|return
name|regions
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuperSimple
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|tableName
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected null result"
argument_list|,
name|result
operator|==
literal|null
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxKeyValueSize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|oldMaxSize
init|=
name|conf
operator|.
name|get
argument_list|(
name|ConnectionConfiguration
operator|.
name|MAX_KEYVALUE_SIZE_KEY
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|4
operator|*
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|ConnectionConfiguration
operator|.
name|MAX_KEYVALUE_SIZE_KEY
argument_list|,
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// Create new table so we pick up the change in Configuration.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
init|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"Inserting a too large KeyValue worked, should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|conf
operator|.
name|set
argument_list|(
name|ConnectionConfiguration
operator|.
name|MAX_KEYVALUE_SIZE_KEY
argument_list|,
name|oldMaxSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilters
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"col[1-5]"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|expectedIndex
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
name|expectedIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|QUALIFIERS
index|[
name|expectedIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|expectedIndex
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedIndex
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterWithLongCompartor
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
literal|10
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|100L
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER
argument_list|,
operator|new
name|LongComparator
argument_list|(
literal|500
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|expectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|>
literal|500
argument_list|)
expr_stmt|;
name|expectedIndex
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedIndex
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeyOnlyFilter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|KeyOnlyFilter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
name|VALUE
operator|.
name|length
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test simple table and non-existent row cases.    */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleMissing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// Try to get a row on an empty table
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Insert a row
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Try to get empty rows around it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan empty rows around it
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can actually get the row
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Make sure we can scan the row
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test basic puts, gets, scans, and deletes for a single row    * in a multiple family table.    */
annotation|@
name|Test
specifier|public
name|void
name|testSingleRowMultipleFamily
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeN
argument_list|(
name|QUALIFIER
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|)
decl_stmt|;
name|Get
name|get
decl_stmt|;
name|Scan
name|scan
decl_stmt|;
name|Delete
name|delete
decl_stmt|;
name|Put
name|put
decl_stmt|;
name|Result
name|result
decl_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Insert one column to one family
comment|////////////////////////////////////////////////////////////////////////////
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get the single column
name|getVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Scan the single column
name|scanVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Get empty results around inserted column
name|getVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Scan empty results around inserted column
name|scanVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush memstore and run same tests from storefiles
comment|////////////////////////////////////////////////////////////////////////////
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Redo get and scan tests from storefile
name|getVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|getVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Now, Test reading from memstore and storefiles at once
comment|////////////////////////////////////////////////////////////////////////////
comment|// Insert multiple columns to two other families
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|9
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get multiple columns across multiple families and get empties around it
name|singleRowGetTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|// Scan multiple columns across multiple families and scan empties around it
name|singleRowScanTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush the table again
comment|////////////////////////////////////////////////////////////////////////////
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Redo tests again
name|singleRowGetTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
name|singleRowScanTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|// Insert more data to memstore
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete a storefile column
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get deleted column
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted column
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get a column before it and after it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan a column before it and after it
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete a memstore column
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get deleted column
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted column
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get a column before it and after it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan a column before it and after it
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete joint storefile/memstore family
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get storefile column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get memstore column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan storefile column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan memstore column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get another family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan another family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush everything and rerun delete tests
comment|////////////////////////////////////////////////////////////////////////////
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Try to get storefile column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get memstore column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan storefile column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan memstore column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get another family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan another family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNull
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Null table name (should NOT work)
try|try
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
operator|(
name|TableName
operator|)
literal|null
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creating a table with null name passed, should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
comment|// Null family (should NOT work)
try|try
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
operator|(
name|byte
index|[]
operator|)
literal|null
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creating a table with a null family passed, should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// Null row (should NOT work)
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Inserting a null row worked, should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
comment|// Null qualifier (should work)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|// Use a new table
name|ht
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"2"
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
comment|// Empty qualifier, byte[0] instead of null (should work)
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Flush and try again
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Using a row with null qualifier threw exception, should "
argument_list|)
throw|;
block|}
comment|// Null value
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Null values should be allowed, but threw exception"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullQualifier
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// Work for Put
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Work for Get, Scan
name|getTestNull
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Work for Delete
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Work for Increment/Append
name|Increment
name|increment
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|increment
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|table
operator|.
name|increment
argument_list|(
name|increment
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
literal|null
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|append
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Work for checkAndMutate, checkAndPut, checkAndDelete
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"checkAndPut"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|,
name|put
argument_list|)
expr_stmt|;
name|RowMutations
name|mutate
init|=
operator|new
name|RowMutations
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|mutate
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"checkAndMutate"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"checkAndPut"
argument_list|)
argument_list|,
name|mutate
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"checkAndMutate"
argument_list|)
argument_list|,
name|delete
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert 4 versions of same column
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Flush and redo
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add some memstore and retest
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions of table is respected
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|,
name|VALUES
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|13
index|]
argument_list|,
name|VALUES
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|15
index|]
argument_list|,
name|VALUES
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// Delete a version in the memstore and a version in a storefile
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Test that it's gone
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionLimits
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
index|[]
name|LIMITS
init|=
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|}
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|,
name|LIMITS
argument_list|)
decl_stmt|;
comment|// Insert limit + 1 on each family
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we only get the right number out of each
comment|// Family0
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Family1
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Family2
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Try all families
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteFamilyVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeNAscii
argument_list|(
name|QUALIFIER
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
literal|1
condition|;
name|q
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|5
condition|;
name|t
operator|++
control|)
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|q
index|]
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUES
index|[
name|t
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// delete version '2000'
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// delete version '4000'
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
comment|// verify version '1000'/'3000'/'5000' remains for all columns
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteFamilyVersionWithOtherDeletes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeNAscii
argument_list|(
name|QUALIFIER
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
literal|null
decl_stmt|;
name|Result
name|result
init|=
literal|null
decl_stmt|;
name|Get
name|get
init|=
literal|null
decl_stmt|;
name|Delete
name|delete
init|=
literal|null
decl_stmt|;
comment|// 1. put on ROW
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
literal|5
condition|;
name|q
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|5
condition|;
name|t
operator|++
control|)
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|q
index|]
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUES
index|[
name|t
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// 2. put on ROWS[0]
name|byte
index|[]
name|ROW2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myRowForTest"
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
literal|5
condition|;
name|q
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|5
condition|;
name|t
operator|++
control|)
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|q
index|]
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUES
index|[
name|t
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// 3. delete on ROW
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
comment|// delete version<= 2000 of all columns
comment|// note: addFamily must be the first since it will mask
comment|// the subsequent other type deletes!
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// delete version '4000' of all columns
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// delete version<= 3000 of column 0
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// delete version<= 5000 of column 2
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// delete version 5000 of column 4
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// 4. delete on ROWS[0]
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// delete version '2000'
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// delete version '4000'
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// 5. check ROW
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 6. check ROWS[0]
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// verify version '1000'/'3000'/'5000' remains for all columns
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW2
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteWithFailed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeNAscii
argument_list|(
name|ROW
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// delete wrong family
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeletes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeNAscii
argument_list|(
name|ROW
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test delete latest version
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// ts[4]
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test for HBASE-1847
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Cleanup null qualifier
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Expected client behavior might be that you can re-put deleted values
comment|// But alas, this is not to be.  We can't put them back in either case.
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// 1000
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// 5000
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// It used to be due to the internal implementation of Get, that
comment|// the Get() call would return ts[4] UNLIKE the Scan below. With
comment|// the switch to using Scan for Get this is no longer the case.
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// The Scanner returns the previous values, the expected-naive-unexpected behavior
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test deleting an entire family from one row but not the other various ways
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Assert that above went in.
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 4 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|": "
operator|+
name|result
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test if we delete the family first in one row (HBASE-1541)
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add test of bulk deleting.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Baseline "scalability" test.    *    * Tests one hundred families, one million columns, one million versions    */
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testMillions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// 100 families
comment|// millions of columns
comment|// millions of versions
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testMultipleRegionsAndBatchPuts
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Two family table
comment|// Insert lots of rows
comment|// Insert to the same row with batched puts
comment|// Insert to multiple rows with batched puts
comment|// Split the table
comment|// Get row from first region
comment|// Get row from second region
comment|// Scan all rows
comment|// Insert to multiple regions with batched puts
comment|// Get row from first region
comment|// Get row from second region
comment|// Scan all rows
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|testMultipleRowMultipleFamily
parameter_list|()
throws|throws
name|Exception
block|{    }
comment|//
comment|// JIRA Testers
comment|//
comment|/**    * HBASE-867    *    If millions of columns in a column family, hbase scanner won't come up    *    *    Test will create numRows rows, each with numColsPerRow columns    *    (1 version each), and attempt to scan them all.    *    *    To test at scale, up numColsPerRow to the millions    *    (have not gotten that to work running as junit though)    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest867
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRows
init|=
literal|10
decl_stmt|;
name|int
name|numColsPerRow
init|=
literal|2000
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
name|numRows
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeN
argument_list|(
name|QUALIFIER
argument_list|,
name|numColsPerRow
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// Insert rows
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRows
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numColsPerRow
condition|;
name|j
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|j
index|]
argument_list|,
name|QUALIFIERS
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Put expected to contain "
operator|+
name|numColsPerRow
operator|+
literal|" columns but "
operator|+
literal|"only contains "
operator|+
name|put
operator|.
name|size
argument_list|()
argument_list|,
name|put
operator|.
name|size
argument_list|()
operator|==
name|numColsPerRow
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// Get a row
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|keys
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Scan the rows
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|rowCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColsPerRow
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|rowCount
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|rowCount
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to scan "
operator|+
name|numRows
operator|+
literal|" rows but actually scanned "
operator|+
name|rowCount
operator|+
literal|" rows"
argument_list|,
name|rowCount
operator|==
name|numRows
argument_list|)
expr_stmt|;
comment|// flush and try again
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Get a row
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|keys
operator|=
name|result
operator|.
name|rawCells
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|numRows
operator|-
literal|1
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Scan the rows
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|rowCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
operator|(
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|assertNumKeys
argument_list|(
name|result
argument_list|,
name|numColsPerRow
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColsPerRow
condition|;
name|i
operator|++
control|)
block|{
name|assertKey
argument_list|(
name|kvs
index|[
name|i
index|]
argument_list|,
name|ROWS
index|[
name|rowCount
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|rowCount
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected to scan "
operator|+
name|numRows
operator|+
literal|" rows but actually scanned "
operator|+
name|rowCount
operator|+
literal|" rows"
argument_list|,
name|rowCount
operator|==
name|numRows
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-861    *    get with timestamp will return a value if there is a version with an    *    earlier timestamp    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest861
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert three versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get the middle value
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Try to get one version before (expect fail)
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// Try to get one version after (expect fail)
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Insert two more versions surrounding others, into memstore
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Check we can get everything we should and can't get what we shouldn't
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Try same from two storefiles
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-33    *    Add a HTable get/obtainScanner method that retrieves all versions of a    *    particular column and row between two timestamps    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest33
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-1014    *    commit(BatchUpdate) method should return timestamp    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest1014
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|long
name|manualStamp
init|=
literal|12345
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
operator|-
literal|1
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|manualStamp
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-1182    *    Scan for columns> some timestamp    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest1182
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|getVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanVersionRangeAndVerifyGreaterThan
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|/**    * HBASE-52    *    Add a means of scanning over all versions    */
annotation|@
name|Test
specifier|public
name|void
name|testJiraTest52
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|7
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert lots versions
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// Try same from storefile
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|scanAllVersionsAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Bulk Testers
comment|//
specifier|private
name|void
name|getVersionRangeAndVerifyGreaterThan
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
operator|+
literal|1
index|]
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getVersionRangeAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
index|]
argument_list|,
name|stamps
index|[
name|end
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getAllVersionsAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionRangeAndVerifyGreaterThan
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
operator|+
literal|1
index|]
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
operator|+
literal|1
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionRangeAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
name|stamps
index|[
name|start
index|]
argument_list|,
name|stamps
index|[
name|end
index|]
operator|+
literal|1
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanAllVersionsAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamps
argument_list|,
name|values
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getVersionAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getVersionAndVerifyMissing
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionAndVerify
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|qualifier
argument_list|,
name|stamp
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVersionAndVerifyMissing
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|stamp
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setTimeStamp
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getTestNull
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getTestNull
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanTestNull
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanTestNull
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|value
parameter_list|,
name|boolean
name|isReversedScan
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
name|isReversedScan
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
name|isReversedScan
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
name|isReversedScan
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|family
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
name|isReversedScan
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|row
argument_list|,
name|family
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|singleRowGetTest
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Single column from memstore
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile, family match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// wildcard match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// explicit match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Three column, one from memstore two from storefile, different families,
comment|// wildcard match
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Everything
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|9
block|,
literal|0
block|,
literal|0
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Get around inserted columns
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|singleRowScanTest
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Single column from memstore
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// Single column from storefile, family match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// wildcard match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Two columns, one from memstore one from storefile, same family,
comment|// explicit match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertDoubleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// Three column, one from memstore two from storefile, different families,
comment|// wildcard match
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Multiple columns from everywhere storefile, many family, wildcard
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Everything
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|,
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|2
block|,
literal|2
block|,
literal|2
block|}
block|,
block|{
literal|2
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|4
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|4
block|,
literal|4
block|,
literal|4
block|}
block|,
block|{
literal|6
block|,
literal|6
block|,
literal|6
block|}
block|,
block|{
literal|6
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|7
block|,
literal|7
block|,
literal|7
block|}
block|,
block|{
literal|9
block|,
literal|0
block|,
literal|0
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Scan around inserted columns
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a single column using gets.    * Expects family and qualifier arrays to be valid for at least    * the range:  idx-2< idx< idx+2    */
specifier|private
name|void
name|getVerifySingleColumn
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|,
name|int
name|VALUEIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify a single column using scanners.    * Expects family and qualifier arrays to be valid for at least    * the range:  idx-2 to idx+2    * Expects row array to be valid for at least idx to idx+2    */
specifier|private
name|void
name|scanVerifySingleColumn
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|,
name|byte
index|[]
index|[]
name|VALUES
parameter_list|,
name|int
name|VALUEIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|,
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
index|]
argument_list|,
name|VALUES
index|[
name|VALUEIDX
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * Verify we do not read any values by accident around a single column    * Same requirements as getVerifySingleColumn    */
specifier|private
name|void
name|getVerifySingleEmpty
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|scanVerifySingleEmpty
parameter_list|(
name|Table
name|ht
parameter_list|,
name|byte
index|[]
index|[]
name|ROWS
parameter_list|,
name|int
name|ROWIDX
parameter_list|,
name|byte
index|[]
index|[]
name|FAMILIES
parameter_list|,
name|int
name|FAMILYIDX
parameter_list|,
name|byte
index|[]
index|[]
name|QUALIFIERS
parameter_list|,
name|int
name|QUALIFIERIDX
parameter_list|)
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
name|ROWIDX
operator|+
literal|1
index|]
argument_list|,
name|ROWS
index|[
name|ROWIDX
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|ROWS
index|[
name|ROWIDX
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
index|]
argument_list|,
name|QUALIFIERS
index|[
name|QUALIFIERIDX
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
name|FAMILYIDX
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Verifiers
comment|//
specifier|private
name|void
name|assertKey
parameter_list|(
name|Cell
name|key
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|assertIncrementKey
parameter_list|(
name|Cell
name|key
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|value
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
argument_list|)
operator|==
name|value
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNumKeys
parameter_list|(
name|Result
name|result
parameter_list|,
name|int
name|n
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|n
operator|+
literal|" keys but got "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
name|n
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
index|[]
name|families
parameter_list|,
name|byte
index|[]
index|[]
name|qualifiers
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
index|[]
index|[]
name|idxs
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected "
operator|+
name|idxs
operator|.
name|length
operator|+
literal|" keys but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
name|idxs
operator|.
name|length
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|keys
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|family
init|=
name|families
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|0
index|]
index|]
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|qualifiers
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|1
index|]
index|]
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|values
index|[
name|idxs
index|[
name|i
index|]
index|[
literal|2
index|]
index|]
decl_stmt|;
name|Cell
name|key
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
name|byte
index|[]
name|famb
init|=
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualb
init|=
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|byte
index|[]
name|valb
init|=
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|famb
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|famb
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualb
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|qualb
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valb
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|valb
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|assertNResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
index|[]
name|stamps
parameter_list|,
name|byte
index|[]
index|[]
name|values
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expectedResults
init|=
name|end
operator|-
name|start
operator|+
literal|1
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedResults
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|keys
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|value
init|=
name|values
index|[
name|end
operator|-
name|i
index|]
decl_stmt|;
name|long
name|ts
init|=
name|stamps
index|[
name|end
operator|-
name|i
index|]
decl_stmt|;
name|Cell
name|key
init|=
name|keys
index|[
name|i
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|CellUtil
operator|.
name|matchingFamily
argument_list|(
name|key
argument_list|,
name|family
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|key
argument_list|,
name|qualifier
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ts ["
operator|+
name|ts
operator|+
literal|"] "
operator|+
literal|"Got ts ["
operator|+
name|key
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ts
operator|==
name|key
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"("
operator|+
name|i
operator|+
literal|") Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Validate that result contains two specified keys, exactly.    * It is assumed key A sorts before key B.    */
specifier|private
name|void
name|assertDoubleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|familyA
parameter_list|,
name|byte
index|[]
name|qualifierA
parameter_list|,
name|byte
index|[]
name|valueA
parameter_list|,
name|byte
index|[]
name|familyB
parameter_list|,
name|byte
index|[]
name|qualifierB
parameter_list|,
name|byte
index|[]
name|valueB
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected two keys but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|Cell
name|kvA
init|=
name|kv
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|familyA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kvA
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|familyA
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kvA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifierA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kvA
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifierA
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kvA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(A) Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valueA
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvA
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|valueA
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
name|kvB
init|=
name|kv
index|[
literal|1
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|familyB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kvB
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|familyB
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kvB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifierB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kvB
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifierB
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kvB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"(B) Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|valueB
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvB
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|valueB
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvB
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSingleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a single key but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSingleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a single key but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|value
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|value
operator|==
name|Bytes
operator|.
name|toLong
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSingleResult
parameter_list|(
name|Result
name|result
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|family
parameter_list|,
name|byte
index|[]
name|qualifier
parameter_list|,
name|long
name|ts
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"Expected row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|row
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got row ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|row
argument_list|,
name|result
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a single key but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Cell
name|kv
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|family
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got family ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|family
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|qualifier
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got qualifier ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|qualifier
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected ts ["
operator|+
name|ts
operator|+
literal|"] "
operator|+
literal|"Got ts ["
operator|+
name|kv
operator|.
name|getTimestamp
argument_list|()
operator|+
literal|"]"
argument_list|,
name|ts
operator|==
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|"] "
operator|+
literal|"Got value ["
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
operator|+
literal|"]"
argument_list|,
name|equals
argument_list|(
name|value
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertEmptyResult
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"expected an empty result but result contains "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|" keys"
argument_list|,
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertNullResult
parameter_list|(
name|Result
name|result
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
literal|"expected null result but received a non-null result"
argument_list|,
name|result
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// Helpers
comment|//
specifier|private
name|Result
name|getSingleScanResult
parameter_list|(
name|Table
name|ht
parameter_list|,
name|Scan
name|scan
parameter_list|)
throws|throws
name|IOException
block|{
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|makeNAscii
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>
literal|256
condition|)
block|{
return|return
name|makeNBig
argument_list|(
name|base
argument_list|,
name|n
argument_list|)
return|;
block|}
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|tail
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
name|tail
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|makeN
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|>
literal|256
condition|)
block|{
return|return
name|makeNBig
argument_list|(
name|base
argument_list|,
name|n
argument_list|)
return|;
block|}
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|i
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|byte
index|[]
index|[]
name|makeNBig
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|int
name|byteA
init|=
operator|(
name|i
operator|%
literal|256
operator|)
decl_stmt|;
name|int
name|byteB
init|=
operator|(
name|i
operator|>>
literal|8
operator|)
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|byteB
block|,
operator|(
name|byte
operator|)
name|byteA
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|long
index|[]
name|makeStamps
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|long
index|[]
name|stamps
init|=
operator|new
name|long
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
name|stamps
index|[
name|i
index|]
operator|=
name|i
operator|+
literal|1
expr_stmt|;
return|return
name|stamps
return|;
block|}
specifier|static
name|boolean
name|equals
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|==
literal|null
operator|&&
name|right
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|left
operator|==
literal|null
operator|&&
name|right
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|right
operator|==
literal|null
operator|&&
name|left
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|true
return|;
return|return
name|Bytes
operator|.
name|equals
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateVersions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Insert 4 versions of same column
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Flush and redo
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add some memstore and retest
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|14
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions of table is respected
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|,
name|VALUES
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|13
index|]
argument_list|,
name|VALUES
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|15
index|]
argument_list|,
name|VALUES
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// Delete a version in the memstore and a version in a storefile
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Test that it's gone
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|14
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdates
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// Write a column with values at timestamp 1, 2 and 3
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCol"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|3L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|// Check that the column indeed has the right values at timestamps 1 and
comment|// 2
name|Result
name|result
init|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BBB"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 1
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 2
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Check that the values at timestamp 2 and 1 got updated
name|result
operator|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|navigableMap
operator|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CCC"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DDD"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdatesWithMajorCompaction
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Write a column with values at timestamp 1, 2 and 3
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCol"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|3L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|// Check that the column indeed has the right values at timestamps 1 and
comment|// 2
name|Result
name|result
init|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BBB"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 1
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 2
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Check that the values at timestamp 2 and 1 got updated
name|result
operator|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|navigableMap
operator|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CCC"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DDD"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompactionBetweenTwoUpdates
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|hTable
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// Write a column with values at timestamp 1, 2 and 3
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myCol"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BBB"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|3L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"EEE"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
comment|// Check that the column indeed has the right values at timestamps 1 and
comment|// 2
name|Result
name|result
init|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AAA"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BBB"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 1
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|1L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"CCC"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Update the value at timestamp 2
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qualifier
argument_list|,
literal|2L
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"DDD"
argument_list|)
argument_list|)
expr_stmt|;
name|hTable
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Trigger a major compaction
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6000
argument_list|)
expr_stmt|;
comment|// Check that the values at timestamp 2 and 1 got updated
name|result
operator|=
name|hTable
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|navigableMap
operator|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|qualifier
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"CCC"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"DDD"
argument_list|,
name|Bytes
operator|.
name|toString
argument_list|(
name|navigableMap
operator|.
name|get
argument_list|(
literal|2L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_EmptyTable
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_NullQualifier
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row put"
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_NonExistentRow
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row put"
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Row retrieved successfully"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|missingrow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"missingrow"
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|missingrow
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row missing as it should be"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPut
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SMALL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"smallfam"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FAMILY
block|,
name|SMALL_FAMILY
block|}
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|put
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|put
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|get
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// KeyValue v1 expectation.  Cast for now until we go all Cell all the time. TODO
name|KeyValue
name|kv
init|=
operator|(
name|KeyValue
operator|)
name|put
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|get
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|kv
argument_list|)
argument_list|,
name|CONTENTS_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
comment|// will it return null or an empty byte array?
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|kv
argument_list|)
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kv
argument_list|)
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
for|for
control|(
name|Cell
name|key
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
operator|+
literal|": "
operator|+
name|key
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutNoCF
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|BAD_FAM
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"BAD_CF"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|VAL
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|boolean
name|caughtNSCFE
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|BAD_FAM
argument_list|,
name|QUALIFIER
argument_list|,
name|VAL
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|caughtNSCFE
operator|=
name|e
operator|instanceof
name|NoSuchColumnFamilyException
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Should throw NoSuchColumnFamilyException"
argument_list|,
name|caughtNSCFE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowsPut
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SMALL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"smallfam"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NB_BATCH_ROWS
init|=
literal|10
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FAMILY
block|,
name|SMALL_FAMILY
block|}
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|rowsUpdate
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_BATCH_ROWS
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rowsUpdate
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|rowsUpdate
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|nbRows
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|row
range|:
name|scanner
control|)
name|nbRows
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_BATCH_ROWS
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowsPutBufferedManyManyFlushes
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|SMALL_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"smallfam"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|NB_BATCH_ROWS
init|=
literal|10
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|CONTENTS_FAMILY
block|,
name|SMALL_FAMILY
block|}
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Put
argument_list|>
name|rowsUpdate
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_BATCH_ROWS
operator|*
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|CONTENTS_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|rowsUpdate
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|put
argument_list|(
name|rowsUpdate
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|CONTENTS_FAMILY
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|nbRows
init|=
literal|0
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Result
name|row
range|:
name|scanner
control|)
name|nbRows
operator|++
expr_stmt|;
name|assertEquals
argument_list|(
name|NB_BATCH_ROWS
operator|*
literal|10
argument_list|,
name|nbRows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddKeyValue
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|CONTENTS_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"contents"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf1"
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|row1
argument_list|)
decl_stmt|;
comment|// Adding KeyValue with the same row
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row1
argument_list|,
name|CONTENTS_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
try|try
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|ok
argument_list|)
expr_stmt|;
comment|// Adding KeyValue with the different row
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|row2
argument_list|,
name|CONTENTS_FAMILY
argument_list|,
name|qualifier
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ok
operator|=
literal|true
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|ok
argument_list|)
expr_stmt|;
block|}
comment|/**    * test for HBASE-737    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testHBase737
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|FAM1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAM2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam2"
argument_list|)
decl_stmt|;
comment|// Open table
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAM1
block|,
name|FAM2
block|}
argument_list|)
decl_stmt|;
comment|// Insert some values
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"letters"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcdefg"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{
comment|//ignore
block|}
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"numbers"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"123456"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{
comment|//ignore
block|}
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAM2
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"letters"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hijklmnop"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|long
name|times
index|[]
init|=
operator|new
name|long
index|[
literal|3
index|]
decl_stmt|;
comment|// First scan the memstore
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM2
argument_list|)
expr_stmt|;
name|ResultScanner
name|s
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cell
name|key
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|times
index|[
name|index
operator|++
index|]
operator|=
name|key
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|times
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|times
index|[
name|j
index|]
operator|>
name|times
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Flush data to disk and try again
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Reset times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|times
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|i
parameter_list|)
block|{
comment|//ignore
block|}
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAM2
argument_list|)
expr_stmt|;
name|s
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Result
name|r
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|r
operator|=
name|s
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Cell
name|key
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|times
index|[
name|index
operator|++
index|]
operator|=
name|key
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|times
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|times
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|times
index|[
name|j
index|]
operator|>
name|times
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListTables
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName1
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"2"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName3
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"3"
argument_list|)
decl_stmt|;
name|TableName
index|[]
name|tables
init|=
operator|new
name|TableName
index|[]
block|{
name|tableName1
block|,
name|tableName2
block|,
name|tableName3
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
block|}
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|HTableDescriptor
index|[]
name|ts
init|=
name|admin
operator|.
name|listTables
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|HTableDescriptor
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<
name|HTableDescriptor
argument_list|>
argument_list|(
name|ts
operator|.
name|length
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|result
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|result
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|size
operator|>=
name|tables
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tables
operator|.
name|length
operator|&&
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ts
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|ts
index|[
name|j
index|]
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tables
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Not found: "
operator|+
name|tables
index|[
name|i
index|]
argument_list|,
name|found
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * simple test that just executes parts of the client    * API that accept a pre-created Connection instance    *    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testUnmanagedHConnection
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * test of that unmanaged HConnections are able to reconnect    * properly (see HBASE-5058)    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUnmanagedHConnectionReconnect
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// stop the master
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|stopMaster
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|waitOnMaster
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// start up a new master
name|cluster
operator|.
name|startMaster
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|waitForActiveAndReadyMaster
argument_list|()
argument_list|)
expr_stmt|;
comment|// test that the same unmanaged connection works with a new
comment|// Admin and can connect to the new master;
name|boolean
name|tablesOnMaster
init|=
name|LoadBalancer
operator|.
name|isTablesOnMaster
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|conn
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|admin
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|admin
operator|.
name|getClusterStatus
argument_list|()
operator|.
name|getServersSize
argument_list|()
operator|==
name|SLAVES
operator|+
operator|(
name|tablesOnMaster
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMiscHTableStuff
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableAname
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"A"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableBname
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"B"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|attrName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TESTATTR"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|attrValue
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somevalue"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|Table
name|a
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableAname
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Table
name|b
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableBname
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|a
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// open a new connection to A and a connection to b
name|Table
name|newA
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
comment|// copy data from A to B
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|ResultScanner
name|s
init|=
name|newA
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Result
name|r
range|:
name|s
control|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|r
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|r
operator|.
name|rawCells
argument_list|()
control|)
block|{
name|put
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Opening a new connection to A will cause the tables to be reloaded
name|Table
name|anotherA
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableAname
argument_list|)
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|anotherA
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// We can still access A through newA because it has the table information
comment|// cached. And if it needs to recalibrate, that will cause the information
comment|// to be reloaded.
comment|// Test user metadata
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|// make a modifiable descriptor
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|a
operator|.
name|getTableDescriptor
argument_list|()
argument_list|)
decl_stmt|;
comment|// offline the table
name|admin
operator|.
name|disableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
comment|// add a user attribute to HTD
name|desc
operator|.
name|setValue
argument_list|(
name|attrName
argument_list|,
name|attrValue
argument_list|)
expr_stmt|;
comment|// add a user attribute to HCD
for|for
control|(
name|HColumnDescriptor
name|c
range|:
name|desc
operator|.
name|getFamilies
argument_list|()
control|)
name|c
operator|.
name|setValue
argument_list|(
name|attrName
argument_list|,
name|attrValue
argument_list|)
expr_stmt|;
comment|// update metadata for all regions of this table
name|admin
operator|.
name|modifyTable
argument_list|(
name|tableAname
argument_list|,
name|desc
argument_list|)
expr_stmt|;
comment|// enable the table
name|admin
operator|.
name|enableTable
argument_list|(
name|tableAname
argument_list|)
expr_stmt|;
comment|// Test that attribute changes were applied
name|desc
operator|=
name|a
operator|.
name|getTableDescriptor
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"wrong table descriptor returned"
argument_list|,
name|desc
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableAname
argument_list|)
expr_stmt|;
comment|// check HTD attribute
name|value
operator|=
name|desc
operator|.
name|getValue
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"missing HTD attribute value"
argument_list|,
name|value
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"HTD attribute value is incorrect"
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|value
argument_list|,
name|attrValue
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// check HCD attribute
for|for
control|(
name|HColumnDescriptor
name|c
range|:
name|desc
operator|.
name|getFamilies
argument_list|()
control|)
block|{
name|value
operator|=
name|c
operator|.
name|getValue
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"missing HCD attribute value"
argument_list|,
name|value
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"HCD attribute value is incorrect"
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|value
argument_list|,
name|attrValue
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetClosestRowBefore
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|firstRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row111"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|secondRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row222"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|thirdRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row333"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|forthRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row444"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|beforeFirstRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|beforeSecondRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row22"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|beforeThirdRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row33"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|beforeForthRow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row44"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|HConstants
operator|.
name|CATALOG_FAMILY
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"info2"
argument_list|)
block|}
argument_list|,
literal|1
argument_list|,
literal|1024
argument_list|)
init|;
name|RegionLocator
name|locator
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
comment|// set block size to 64 to making 2 kvs into one block, bypassing the walkForwardInSingleRow
comment|// in Store.rowAtOrBeforeFromStoreFile
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|firstRow
argument_list|)
decl_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|secondRow
argument_list|)
decl_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|thirdRow
argument_list|)
decl_stmt|;
name|Put
name|put4
init|=
operator|new
name|Put
argument_list|(
name|forthRow
argument_list|)
decl_stmt|;
name|byte
index|[]
name|one
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|two
init|=
operator|new
name|byte
index|[]
block|{
literal|2
block|}
decl_stmt|;
name|byte
index|[]
name|three
init|=
operator|new
name|byte
index|[]
block|{
literal|3
block|}
decl_stmt|;
name|byte
index|[]
name|four
init|=
operator|new
name|byte
index|[]
block|{
literal|4
block|}
decl_stmt|;
name|put1
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|one
argument_list|)
expr_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|two
argument_list|)
expr_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|three
argument_list|)
expr_stmt|;
name|put4
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|four
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put4
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Result
name|result
decl_stmt|;
comment|// Test before first that null is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|beforeFirstRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Test at first that first is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|firstRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|firstRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test in between first and second that first is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|beforeSecondRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|firstRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|one
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test at second make sure second is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|secondRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|secondRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test in second and third, make sure second is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|beforeThirdRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|secondRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|two
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test at third make sure third is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|thirdRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|thirdRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|three
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test in third and forth, make sure third is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|beforeForthRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|thirdRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|three
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test at forth make sure forth is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|forthRow
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|forthRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|four
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test after forth make sure forth is returned
name|result
operator|=
name|getReverseScanResult
argument_list|(
name|table
argument_list|,
name|Bytes
operator|.
name|add
argument_list|(
name|forthRow
argument_list|,
name|one
argument_list|)
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|containsColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|forthRow
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|)
argument_list|,
name|four
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Result
name|getReverseScanResult
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|row
parameter_list|,
name|byte
index|[]
name|fam
parameter_list|)
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
return|return
name|scanner
operator|.
name|next
argument_list|()
return|;
block|}
block|}
comment|/**    * For HBASE-2156    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testScanVariableReuse
parameter_list|()
throws|throws
name|Exception
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|ROW
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scan
operator|.
name|getFamilyMap
argument_list|()
operator|.
name|containsKey
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiRowMutation
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testMultiRowMutation"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|ROW1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow1"
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|MutationProto
name|m1
init|=
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|MutationType
operator|.
name|PUT
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|MutationProto
name|m2
init|=
name|ProtobufUtil
operator|.
name|toMutation
argument_list|(
name|MutationType
operator|.
name|PUT
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|MutateRowsRequest
operator|.
name|Builder
name|mrmBuilder
init|=
name|MutateRowsRequest
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|mrmBuilder
operator|.
name|addMutationRequest
argument_list|(
name|m1
argument_list|)
expr_stmt|;
name|mrmBuilder
operator|.
name|addMutationRequest
argument_list|(
name|m2
argument_list|)
expr_stmt|;
name|MutateRowsRequest
name|mrm
init|=
name|mrmBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|CoprocessorRpcChannel
name|channel
init|=
name|t
operator|.
name|coprocessorService
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|MultiRowMutationService
operator|.
name|BlockingInterface
name|service
init|=
name|MultiRowMutationService
operator|.
name|newBlockingStub
argument_list|(
name|channel
argument_list|)
decl_stmt|;
name|service
operator|.
name|mutateRows
argument_list|(
literal|null
argument_list|,
name|mrm
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|=
operator|new
name|Get
argument_list|(
name|ROW1
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRowMutation
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testRowMutation"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|}
decl_stmt|;
name|RowMutations
name|arm
init|=
operator|new
name|RowMutations
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|t
operator|.
name|mutateRow
argument_list|(
name|arm
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|arm
operator|=
operator|new
name|RowMutations
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
comment|// TODO: Trying mutateRow again.  The batch was failing with a one try only.
name|t
operator|.
name|mutateRow
argument_list|(
name|arm
argument_list|)
expr_stmt|;
name|r
operator|=
name|t
operator|.
name|get
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|VALUE
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test that we get a region level exception
try|try
block|{
name|arm
operator|=
operator|new
name|RowMutations
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'b'
block|,
literal|'o'
block|,
literal|'g'
block|,
literal|'u'
block|,
literal|'s'
block|}
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|arm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|t
operator|.
name|mutateRow
argument_list|(
name|arm
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected NoSuchColumnFamilyException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RetriesExhaustedWithDetailsException
name|e
parameter_list|)
block|{
for|for
control|(
name|Throwable
name|rootCause
range|:
name|e
operator|.
name|getCauses
argument_list|()
control|)
block|{
if|if
condition|(
name|rootCause
operator|instanceof
name|NoSuchColumnFamilyException
condition|)
block|{
return|return;
block|}
block|}
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBatchAppendWithReturnResultFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testBatchAppendWithReturnResultFalse"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Append
name|append1
init|=
operator|new
name|Append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|append1
operator|.
name|setReturnResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|append1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
name|Append
name|append2
init|=
operator|new
name|Append
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
decl_stmt|;
name|append2
operator|.
name|setReturnResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|append2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Append
argument_list|>
name|appends
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|appends
operator|.
name|add
argument_list|(
name|append1
argument_list|)
expr_stmt|;
name|appends
operator|.
name|add
argument_list|(
name|append2
argument_list|)
expr_stmt|;
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
literal|2
index|]
decl_stmt|;
name|table
operator|.
name|batch
argument_list|(
name|appends
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|r
range|:
name|results
control|)
block|{
name|Result
name|result
init|=
operator|(
name|Result
operator|)
name|r
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testAppend"
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"42"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"23"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
block|}
decl_stmt|;
name|Append
name|a
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|a
operator|.
name|setReturnResults
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|t
operator|.
name|append
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
name|v1
argument_list|)
expr_stmt|;
name|a
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|v2
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|t
operator|.
name|append
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|Bytes
operator|.
name|add
argument_list|(
name|v2
argument_list|,
name|v1
argument_list|)
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// QUALIFIERS[2] previously not exist, verify both value and timestamp are correct
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|v2
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|r
operator|.
name|getColumnLatestCell
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Result
argument_list|>
name|doAppend
parameter_list|(
specifier|final
name|boolean
name|walUsed
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting testAppend, walUsed is "
operator|+
name|walUsed
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|walUsed
condition|?
literal|"testAppendWithWAL"
else|:
literal|"testAppendWithoutWAL"
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TABLENAME
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|row3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|qual
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qual"
argument_list|)
decl_stmt|;
name|Put
name|put_0
init|=
operator|new
name|Put
argument_list|(
name|row2
argument_list|)
decl_stmt|;
name|put_0
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"put"
argument_list|)
argument_list|)
expr_stmt|;
name|Put
name|put_1
init|=
operator|new
name|Put
argument_list|(
name|row3
argument_list|)
decl_stmt|;
name|put_1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"put"
argument_list|)
argument_list|)
expr_stmt|;
name|Append
name|append_0
init|=
operator|new
name|Append
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|append_0
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"i"
argument_list|)
argument_list|)
expr_stmt|;
name|Append
name|append_1
init|=
operator|new
name|Append
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|append_1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"k"
argument_list|)
argument_list|)
expr_stmt|;
name|Append
name|append_2
init|=
operator|new
name|Append
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|append_2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|walUsed
condition|)
block|{
name|append_2
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
block|}
name|Append
name|append_3
init|=
operator|new
name|Append
argument_list|(
name|row1
argument_list|)
decl_stmt|;
name|append_3
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|qual
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|s
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
name|append_0
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|put_0
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|put_1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|t
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
init|)
block|{
name|t
operator|.
name|append
argument_list|(
name|append_1
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
name|append_2
argument_list|)
expr_stmt|;
name|t
operator|.
name|append
argument_list|(
name|append_3
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendWithoutWAL
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Result
argument_list|>
name|resultsWithWal
init|=
name|doAppend
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|resultsWithoutWal
init|=
name|doAppend
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultsWithWal
operator|.
name|size
argument_list|()
argument_list|,
name|resultsWithoutWal
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|resultsWithWal
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Result
name|resultWithWal
init|=
name|resultsWithWal
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Result
name|resultWithoutWal
init|=
name|resultsWithoutWal
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|resultWithWal
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|,
name|resultWithoutWal
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|!=
name|resultWithWal
operator|.
name|rawCells
argument_list|()
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|Cell
name|cellWithWal
init|=
name|resultWithWal
operator|.
name|rawCells
argument_list|()
index|[
name|j
index|]
decl_stmt|;
name|Cell
name|cellWithoutWal
init|=
name|resultWithoutWal
operator|.
name|rawCells
argument_list|()
index|[
name|j
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cellWithWal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|cellWithoutWal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cellWithWal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|cellWithoutWal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cellWithWal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cellWithoutWal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cellWithWal
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cellWithoutWal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClientPoolRoundRobin
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|poolSize
init|=
literal|3
decl_stmt|;
name|int
name|numVersions
init|=
name|poolSize
operator|*
literal|2
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_TYPE
argument_list|,
literal|"round-robin"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_SIZE
argument_list|,
name|poolSize
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
specifier|final
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|versions
init|=
literal|1
init|;
name|versions
operator|<=
name|numVersions
condition|;
name|versions
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
operator|+
name|versions
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|QUALIFIER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of versions of '"
operator|+
name|FAMILY
operator|+
literal|":"
operator|+
name|QUALIFIER
operator|+
literal|" did not match "
operator|+
name|versions
argument_list|,
name|versions
argument_list|,
name|navigableMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|navigableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"The value at time "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" did not match what was put"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"Flakey: HBASE-8989"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testClientPoolThreadLocal
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|poolSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|numVersions
init|=
literal|3
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_TYPE
argument_list|,
literal|"thread-local"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_IPC_POOL_SIZE
argument_list|,
name|poolSize
argument_list|)
expr_stmt|;
specifier|final
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
specifier|final
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|versions
init|=
literal|1
init|;
name|versions
operator|<=
name|numVersions
condition|;
name|versions
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
operator|+
name|versions
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|QUALIFIER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of versions of '"
operator|+
name|FAMILY
operator|+
literal|":"
operator|+
name|QUALIFIER
operator|+
literal|" did not match "
operator|+
name|versions
operator|+
literal|"; "
operator|+
name|put
operator|.
name|toString
argument_list|()
operator|+
literal|", "
operator|+
name|get
operator|.
name|toString
argument_list|()
argument_list|,
name|versions
argument_list|,
name|navigableMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|navigableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"The value at time "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" did not match what was put"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Object
name|waitLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numVersions
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
argument_list|<
name|AssertionError
argument_list|>
name|error
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|versions
init|=
name|numVersions
init|;
name|versions
operator|<
name|numVersions
operator|*
literal|2
condition|;
name|versions
operator|++
control|)
block|{
specifier|final
name|int
name|versionsCopy
init|=
name|versions
decl_stmt|;
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
block|{
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
operator|+
name|versionsCopy
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|NavigableMap
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|navigableMap
init|=
name|result
operator|.
name|getMap
argument_list|()
operator|.
name|get
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|get
argument_list|(
name|QUALIFIER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The number of versions of '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|FAMILY
argument_list|)
operator|+
literal|":"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|QUALIFIER
argument_list|)
operator|+
literal|" did not match "
operator|+
name|versionsCopy
argument_list|,
name|versionsCopy
argument_list|,
name|navigableMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|navigableMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"The value at time "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" did not match what was put"
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|VALUE
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|waitLock
init|)
block|{
name|waitLock
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{           }
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|// the error happens in a thread, it won't fail the test,
comment|// need to pass it to the caller for proper handling.
name|error
operator|.
name|set
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|waitLock
init|)
block|{
name|waitLock
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|error
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndPut
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|anotherrow
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"anotherrow"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abcd"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// row doesn't exist, so using non-null value should be considered "not match".
name|boolean
name|ok
init|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
name|put1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// row doesn't exist, so using "null" to check for existence should be considered "match".
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|,
name|put1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// row now exists, so using "null" to check for existence should be considered "not match".
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|,
name|put1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value2
argument_list|)
expr_stmt|;
comment|// row now exists, use the matching value to check
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|anotherrow
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// try to do CheckAndPut on different rows
try|try
block|{
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value2
argument_list|,
name|put3
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"trying to check and modify different rows should have failed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndPutWithCompareOp
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaa"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbbb"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cccc"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"dddd"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value3
argument_list|)
expr_stmt|;
comment|// row doesn't exist, so using "null" to check for existence should be considered "match".
name|boolean
name|ok
init|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|,
name|put2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// cell = "bbbb", using "aaaa" to compare only LESS/LESS_OR_EQUAL/NOT_EQUAL
comment|// turns out "match"
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER
argument_list|,
name|value1
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|value1
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value1
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS
argument_list|,
name|value1
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value1
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|value1
argument_list|,
name|put3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// cell = "cccc", using "dddd" to compare only LARGER/LARGER_OR_EQUAL/NOT_EQUAL
comment|// turns out "match"
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS
argument_list|,
name|value4
argument_list|,
name|put3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value4
argument_list|,
name|put3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|value4
argument_list|,
name|put3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER
argument_list|,
name|value4
argument_list|,
name|put3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value4
argument_list|,
name|put3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|value4
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// cell = "bbbb", using "bbbb" to compare only GREATER_OR_EQUAL/LESS_OR_EQUAL/EQUAL
comment|// turns out "match"
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER
argument_list|,
name|value2
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|value2
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS
argument_list|,
name|value2
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value2
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value2
argument_list|,
name|put2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndPut
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|value2
argument_list|,
name|put3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndDelete
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaa"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|boolean
name|ok
init|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value1
argument_list|,
name|delete
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckAndDeleteWithCompareOp
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|value1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaaa"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbbb"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cccc"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|value4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"dddd"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value3
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// cell = "bbbb", using "aaaa" to compare only LESS/LESS_OR_EQUAL/NOT_EQUAL
comment|// turns out "match"
name|boolean
name|ok
init|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER
argument_list|,
name|value1
argument_list|,
name|delete
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|value1
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value1
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS
argument_list|,
name|value1
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value1
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|value1
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// cell = "cccc", using "dddd" to compare only LARGER/LARGER_OR_EQUAL/NOT_EQUAL
comment|// turns out "match"
name|table
operator|.
name|put
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS
argument_list|,
name|value4
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value4
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|value4
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER
argument_list|,
name|value4
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value4
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|value4
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// cell = "bbbb", using "bbbb" to compare only GREATER_OR_EQUAL/LESS_OR_EQUAL/EQUAL
comment|// turns out "match"
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER
argument_list|,
name|value2
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
name|value2
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS
argument_list|,
name|value2
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|GREATER_OR_EQUAL
argument_list|,
name|value2
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|LESS_OR_EQUAL
argument_list|,
name|value2
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|ok
operator|=
name|table
operator|.
name|checkAndDelete
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOp
operator|.
name|EQUAL
argument_list|,
name|value2
argument_list|,
name|delete
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ok
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**   * Test ScanMetrics   * @throws Exception   */
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|public
name|void
name|testScanMetrics
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Set up test table:
comment|// Create table:
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|int
name|numOfRegions
init|=
operator|-
literal|1
decl_stmt|;
try|try
init|(
name|RegionLocator
name|r
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|numOfRegions
operator|=
name|r
operator|.
name|getStartKeys
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
comment|// Create 3 rows in the table, with rowkeys starting with "zzz*" so that
comment|// scan are forced to hit all the regions.
name|Put
name|put1
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz1"
argument_list|)
argument_list|)
decl_stmt|;
name|put1
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Put
name|put2
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz2"
argument_list|)
argument_list|)
decl_stmt|;
name|put2
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Put
name|put3
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz3"
argument_list|)
argument_list|)
decl_stmt|;
name|put3
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|put1
argument_list|,
name|put2
argument_list|,
name|put3
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|scan1
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|int
name|numRecords
init|=
literal|0
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan1
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|numRecords
operator|++
expr_stmt|;
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"test data has "
operator|+
name|numRecords
operator|+
literal|" records."
argument_list|)
expr_stmt|;
comment|// by default, scan metrics collection is turned off
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|scan1
operator|.
name|getScanMetrics
argument_list|()
argument_list|)
expr_stmt|;
comment|// turn on scan metrics
name|Scan
name|scan2
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan2
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan2
operator|.
name|setCaching
argument_list|(
name|numRecords
operator|+
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
operator|.
name|next
argument_list|(
name|numRecords
operator|-
literal|1
argument_list|)
control|)
block|{     }
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// closing the scanner will set the metrics.
name|assertNotNull
argument_list|(
name|scan2
operator|.
name|getScanMetrics
argument_list|()
argument_list|)
expr_stmt|;
comment|// set caching to 1, because metrics are collected in each roundtrip only
name|scan2
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan2
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan2
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
expr_stmt|;
comment|// per HBASE-5717, this should still collect even if you don't run all the way to
comment|// the end of the scanner. So this is asking for 2 of the 3 rows we inserted.
for|for
control|(
name|Result
name|result
range|:
name|scanner
operator|.
name|next
argument_list|(
name|numRecords
operator|-
literal|1
argument_list|)
control|)
block|{     }
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|ScanMetrics
name|scanMetrics
init|=
name|scan2
operator|.
name|getScanMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not access all the regions in the table"
argument_list|,
name|numOfRegions
argument_list|,
name|scanMetrics
operator|.
name|countOfRegions
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// check byte counters
name|scan2
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan2
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan2
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
expr_stmt|;
name|int
name|numBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
operator|.
name|next
argument_list|(
literal|1
argument_list|)
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|result
operator|.
name|listCells
argument_list|()
control|)
block|{
name|numBytes
operator|+=
name|CellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanMetrics
operator|=
name|scan2
operator|.
name|getScanMetrics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Did not count the result bytes"
argument_list|,
name|numBytes
argument_list|,
name|scanMetrics
operator|.
name|countOfBytesInResults
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// check byte counters on a small scan
name|scan2
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan2
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan2
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan2
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan2
argument_list|)
expr_stmt|;
name|numBytes
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
operator|.
name|next
argument_list|(
literal|1
argument_list|)
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|result
operator|.
name|listCells
argument_list|()
control|)
block|{
name|numBytes
operator|+=
name|CellUtil
operator|.
name|estimatedSerializedSizeOf
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|scanMetrics
operator|=
name|scan2
operator|.
name|getScanMetrics
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Did not count the result bytes"
argument_list|,
name|numBytes
argument_list|,
name|scanMetrics
operator|.
name|countOfBytesInResults
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
comment|// now, test that the metrics are still collected even if you don't call close, but do
comment|// run past the end of all the records
comment|/** There seems to be a timing issue here.  Comment out for now. Fix when time.     Scan scanWithoutClose = new Scan();     scanWithoutClose.setCaching(1);     scanWithoutClose.setScanMetricsEnabled(true);     ResultScanner scannerWithoutClose = ht.getScanner(scanWithoutClose);     for (Result result : scannerWithoutClose.next(numRecords + 1)) {     }     ScanMetrics scanMetricsWithoutClose = getScanMetrics(scanWithoutClose);     assertEquals("Did not access all the regions in the table", numOfRegions,         scanMetricsWithoutClose.countOfRegions.get());     */
comment|// finally, test that the metrics are collected correctly if you both run past all the records,
comment|// AND close the scanner
name|Scan
name|scanWithClose
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
comment|// make sure we can set caching up to the number of a scanned values
name|scanWithClose
operator|.
name|setCaching
argument_list|(
name|numRecords
argument_list|)
expr_stmt|;
name|scanWithClose
operator|.
name|setScanMetricsEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|scannerWithClose
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scanWithClose
argument_list|)
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scannerWithClose
operator|.
name|next
argument_list|(
name|numRecords
operator|+
literal|1
argument_list|)
control|)
block|{     }
name|scannerWithClose
operator|.
name|close
argument_list|()
expr_stmt|;
name|ScanMetrics
name|scanMetricsWithClose
init|=
name|getScanMetrics
argument_list|(
name|scanWithClose
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Did not access all the regions in the table"
argument_list|,
name|numOfRegions
argument_list|,
name|scanMetricsWithClose
operator|.
name|countOfRegions
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ScanMetrics
name|getScanMetrics
parameter_list|(
name|Scan
name|scan
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|serializedMetrics
init|=
name|scan
operator|.
name|getAttribute
argument_list|(
name|Scan
operator|.
name|SCAN_ATTRIBUTES_METRICS_DATA
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Serialized metrics were not found."
argument_list|,
name|serializedMetrics
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ScanMetrics
name|scanMetrics
init|=
name|ProtobufUtil
operator|.
name|toScanMetrics
argument_list|(
name|serializedMetrics
argument_list|)
decl_stmt|;
return|return
name|scanMetrics
return|;
block|}
comment|/**    * Tests that cache on write works all the way up from the client-side.    *    * Performs inserts, flushes, and compactions, verifying changes in the block    * cache along the way.    *    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testCacheOnWriteEvictOnClose
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
comment|// get the block cache and region
name|String
name|regionName
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEncodedName
argument_list|()
decl_stmt|;
name|Region
name|region
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|getFromOnlineRegions
argument_list|(
name|regionName
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|CacheConfig
name|cacheConf
init|=
name|store
operator|.
name|getCacheConfig
argument_list|()
decl_stmt|;
name|cacheConf
operator|.
name|setCacheDataOnWrite
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cacheConf
operator|.
name|setEvictOnClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BlockCache
name|cache
init|=
name|cacheConf
operator|.
name|getBlockCache
argument_list|()
decl_stmt|;
comment|// establish baseline stats
name|long
name|startBlockCount
init|=
name|cache
operator|.
name|getBlockCount
argument_list|()
decl_stmt|;
name|long
name|startBlockHits
init|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
decl_stmt|;
name|long
name|startBlockMiss
init|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
decl_stmt|;
comment|// wait till baseline is stable, (minimal 500 ms)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|startBlockCount
operator|!=
name|cache
operator|.
name|getBlockCount
argument_list|()
operator|||
name|startBlockHits
operator|!=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
operator|||
name|startBlockMiss
operator|!=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
condition|)
block|{
name|startBlockCount
operator|=
name|cache
operator|.
name|getBlockCount
argument_list|()
expr_stmt|;
name|startBlockHits
operator|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
expr_stmt|;
name|startBlockMiss
operator|=
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
expr_stmt|;
name|i
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|// insert data
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// data was in memstore so don't expect any changes
name|assertEquals
argument_list|(
name|startBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|startBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush the data
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// expect one more block in cache, no change in hits/misses
name|long
name|expectedBlockCount
init|=
name|startBlockCount
operator|+
literal|1
decl_stmt|;
name|long
name|expectedBlockHits
init|=
name|startBlockHits
decl_stmt|;
name|long
name|expectedBlockMiss
init|=
name|startBlockMiss
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// read the data and expect same blocks, one new hit, no misses
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// insert a second column, read the row, no new blocks, one new hit
name|byte
index|[]
name|QUALIFIER2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|QUALIFIER
argument_list|,
name|QUALIFIER
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data2
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|data
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// flush, one new block
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Flushing cache"
argument_list|)
expr_stmt|;
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// compact, net minus two blocks, two hits, no misses
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Compacting"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|triggerMajorCompaction
argument_list|()
expr_stmt|;
name|region
operator|.
name|compact
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|closeAndArchiveCompactedFiles
argument_list|()
expr_stmt|;
name|waitForStoreFileCount
argument_list|(
name|store
argument_list|,
literal|1
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
comment|// wait 10 seconds max
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|expectedBlockCount
operator|-=
literal|2
expr_stmt|;
comment|// evicted two blocks, cached none
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|expectedBlockHits
operator|+=
literal|2
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// read the row, this should be a cache miss because we don't cache data
comment|// blocks on compaction
name|r
operator|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER2
argument_list|)
argument_list|,
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|expectedBlockCount
operator|+=
literal|1
expr_stmt|;
comment|// cached one data block
name|assertEquals
argument_list|(
name|expectedBlockCount
argument_list|,
name|cache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedBlockHits
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getHitCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|++
name|expectedBlockMiss
argument_list|,
name|cache
operator|.
name|getStats
argument_list|()
operator|.
name|getMissCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|waitForStoreFileCount
parameter_list|(
name|Store
name|store
parameter_list|,
name|int
name|count
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|start
operator|+
name|timeout
operator|>
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|&&
name|store
operator|.
name|getStorefilesCount
argument_list|()
operator|!=
name|count
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"start="
operator|+
name|start
operator|+
literal|", now="
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|", cur="
operator|+
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
argument_list|,
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * Tests the non cached version of getRegionLocator by moving a region.    */
specifier|public
name|void
name|testNonCachedGetRegionLocation
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family1
block|,
name|family2
block|}
argument_list|,
literal|10
argument_list|)
init|;
name|Admin
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
init|;
name|RegionLocator
name|locator
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|allRegionLocations
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allRegionLocations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HRegionInfo
name|regionInfo
init|=
name|allRegionLocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|ServerName
name|addrBefore
init|=
name|allRegionLocations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
comment|// Verify region location before move.
name|HRegionLocation
name|addrCache
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HRegionLocation
name|addrNoCache
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|addrBefore
operator|.
name|getPort
argument_list|()
argument_list|,
name|addrCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|addrBefore
operator|.
name|getPort
argument_list|()
argument_list|,
name|addrNoCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|ServerName
name|addrAfter
init|=
literal|null
decl_stmt|;
comment|// Now move the region to a different server.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SLAVES
condition|;
name|i
operator|++
control|)
block|{
name|HRegionServer
name|regionServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ServerName
name|addr
init|=
name|regionServer
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|getPort
argument_list|()
operator|!=
name|addrBefore
operator|.
name|getPort
argument_list|()
condition|)
block|{
name|admin
operator|.
name|move
argument_list|(
name|regionInfo
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|addr
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for the region to move.
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|addrAfter
operator|=
name|addr
expr_stmt|;
break|break;
block|}
block|}
comment|// Verify the region was moved.
name|addrCache
operator|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addrNoCache
operator|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|regionInfo
operator|.
name|getStartKey
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|addrAfter
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|addrAfter
operator|.
name|getPort
argument_list|()
operator|!=
name|addrCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|addrAfter
operator|.
name|getPort
argument_list|()
argument_list|,
name|addrNoCache
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|/**    * Tests getRegionsInRange by creating some regions over which a range of    * keys spans; then changing the key range.    */
specifier|public
name|void
name|testGetRegionsInRange
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
name|byte
index|[]
name|startKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddc"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mmm"
argument_list|)
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|numOfRegions
init|=
operator|-
literal|1
decl_stmt|;
try|try
init|(
name|RegionLocator
name|r
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|numOfRegions
operator|=
name|r
operator|.
name|getStartKeys
argument_list|()
operator|.
name|length
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|numOfRegions
argument_list|)
expr_stmt|;
comment|// Get the regions in this range
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regionsList
init|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the start key
name|startKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fff"
argument_list|)
expr_stmt|;
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the end key
name|endKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"nnn"
argument_list|)
expr_stmt|;
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Empty start key
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Empty end key
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Both start and end keys empty
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the end key to somewhere in the last block
name|endKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"zzz1"
argument_list|)
expr_stmt|;
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|21
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Change the start key to somewhere in the first block
name|startKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aac"
argument_list|)
expr_stmt|;
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make start and end key the same
name|startKey
operator|=
name|endKey
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
expr_stmt|;
name|regionsList
operator|=
name|getRegionsInRange
argument_list|(
name|tableName
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regionsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|getRegionsInRange
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|startKey
parameter_list|,
name|byte
index|[]
name|endKey
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regionsInRange
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|byte
index|[]
name|currentKey
init|=
name|startKey
decl_stmt|;
specifier|final
name|boolean
name|endKeyIsEndOfTable
init|=
name|Bytes
operator|.
name|equals
argument_list|(
name|endKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
try|try
init|(
name|RegionLocator
name|r
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|;
init|)
block|{
do|do
block|{
name|HRegionLocation
name|regionLocation
init|=
name|r
operator|.
name|getRegionLocation
argument_list|(
name|currentKey
argument_list|)
decl_stmt|;
name|regionsInRange
operator|.
name|add
argument_list|(
name|regionLocation
argument_list|)
expr_stmt|;
name|currentKey
operator|=
name|regionLocation
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getEndKey
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|Bytes
operator|.
name|equals
argument_list|(
name|currentKey
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
operator|&&
operator|(
name|endKeyIsEndOfTable
operator|||
name|Bytes
operator|.
name|compareTo
argument_list|(
name|currentKey
argument_list|,
name|endKey
argument_list|)
operator|<
literal|0
operator|)
condition|)
do|;
return|return
name|regionsInRange
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJira6912
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|foo
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|FAMILY
block|}
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<
name|Put
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|puts
operator|.
name|add
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|foo
operator|.
name|put
argument_list|(
name|puts
argument_list|)
expr_stmt|;
comment|// If i comment this out it works
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|RowFilter
argument_list|(
name|CompareFilter
operator|.
name|CompareOp
operator|.
name|NOT_EQUAL
argument_list|,
operator|new
name|BinaryComparator
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|foo
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|bar
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bar
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScan_NullQualifier
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Row put"
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
index|[]
name|bar
init|=
name|scanner
operator|.
name|next
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bar
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bar
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|bar
operator|=
name|scanner
operator|.
name|next
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bar
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bar
index|[
literal|0
index|]
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNegativeTimestamp
parameter_list|()
throws|throws
name|IOException
block|{
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative timestamps should not have been allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
operator|-
literal|1
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative timestamps should not have been allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative timestamps should not have been allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative timestamps should not have been allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setTimeRange
argument_list|(
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Negative timestamps should not have been allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"negative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// KeyValue should allow negative timestamps for backwards compat. Otherwise, if the user
comment|// already has negative timestamps in cluster data, HBase won't be able to handle that
try|try
block|{
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|42
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|42
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|42
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"KeyValue SHOULD allow negative timestamps"
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRawScanRespectsVersions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
comment|// put the same row 4 times, with different values
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|(
name|long
operator|)
literal|10
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|(
name|long
operator|)
literal|11
argument_list|,
name|ArrayUtils
operator|.
name|add
argument_list|(
name|VALUE
argument_list|,
operator|(
name|byte
operator|)
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|(
name|long
operator|)
literal|12
argument_list|,
name|ArrayUtils
operator|.
name|add
argument_list|(
name|VALUE
argument_list|,
operator|(
name|byte
operator|)
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|(
name|long
operator|)
literal|13
argument_list|,
name|ArrayUtils
operator|.
name|add
argument_list|(
name|VALUE
argument_list|,
operator|(
name|byte
operator|)
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|int
name|versions
init|=
literal|4
decl_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|row
argument_list|)
decl_stmt|;
comment|// get all the possible versions
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
literal|"Found an unexpected number of results for the row!"
argument_list|,
name|versions
argument_list|,
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Found more than a single row when raw scanning the table with a single row!"
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// then if we decrease the number of versions, but keep the scan raw, we should see exactly that
comment|// number of versions
name|versions
operator|=
literal|2
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|(
name|versions
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
literal|"Found an unexpected number of results for the row!"
argument_list|,
name|versions
argument_list|,
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Found more than a single row when raw scanning the table with a single row!"
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// finally, if we turn off raw scanning, but max out the number of versions, we should go back
comment|// to seeing just three
name|versions
operator|=
literal|3
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|(
name|versions
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
literal|"Found an unexpected number of results for the row!"
argument_list|,
name|versions
argument_list|,
name|r
operator|.
name|listCells
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Found more than a single row when raw scanning the table with a single row!"
argument_list|,
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|deleteTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyFilterList
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// Insert one row each region
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|scanResults
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|scanResults
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|scanResults
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
decl_stmt|;
name|g
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|()
argument_list|)
expr_stmt|;
name|Result
name|getResult
init|=
name|table
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|Result
name|scanResult
init|=
name|scanResults
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|scanResult
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|,
name|getResult
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|scanResult
operator|.
name|rawCells
argument_list|()
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Cell
name|scanCell
init|=
name|scanResult
operator|.
name|rawCells
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|Cell
name|getCell
init|=
name|getResult
operator|.
name|rawCells
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|scanCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|getCell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|scanCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneFamily
argument_list|(
name|getCell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|scanCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|getCell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|scanCell
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|getCell
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSmallScan
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// Insert one row each region
name|int
name|insertNum
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%03d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// normal scan
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|insertNum
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// small scan
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|insertNum
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuperSimpleWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000000"
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000002"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000004"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000006"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000008"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b22222-0000000000000000001"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b22222-0000000000000000003"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b22222-0000000000000000005"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b22222-0000000000000000007"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b22222-0000000000000000009"
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-9223372036854775807"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000000"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getRow
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"0-b11111-0000000000000000008"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFiltersWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"col[1-5]"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|expectedIndex
init|=
literal|5
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Cell
name|c
init|=
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getRowArray
argument_list|()
argument_list|,
name|c
operator|.
name|getRowOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getRowLength
argument_list|()
argument_list|,
name|ROWS
index|[
name|expectedIndex
index|]
argument_list|,
literal|0
argument_list|,
name|ROWS
index|[
name|expectedIndex
index|]
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getQualifierArray
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierOffset
argument_list|()
argument_list|,
name|c
operator|.
name|getQualifierLength
argument_list|()
argument_list|,
name|QUALIFIERS
index|[
name|expectedIndex
index|]
argument_list|,
literal|0
argument_list|,
name|QUALIFIERS
index|[
name|expectedIndex
index|]
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|expectedIndex
operator|--
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedIndex
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeyOnlyFilterWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|KeyOnlyFilter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
control|)
block|{
name|assertEquals
argument_list|(
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValueLength
argument_list|()
argument_list|,
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|,
name|VALUE
operator|.
name|length
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|count
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test simple table and non-existent row cases.    */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleMissingWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// Try to get a row on an empty table
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Insert a row
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Make sure we can scan the row
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Try to scan empty rows around it
comment|// Introduced MemStore#shouldSeekForReverseScan to fix the following
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
decl_stmt|;
comment|// Null qualifier (should work)
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Use a new table
name|ht
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"2"
argument_list|)
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
comment|// Empty qualifier, byte[0] instead of null (should work)
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Null value
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeletesWithReverseScan
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeNAscii
argument_list|(
name|ROW
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test delete latest version
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// ts[4]
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test for HBASE-1847
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Cleanup null qualifier
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Expected client behavior might be that you can re-put deleted values
comment|// But alas, this is not to be. We can't put them back in either case.
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// The Scanner returns the previous values, the expected-naive-unexpected
comment|// behavior
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test deleting an entire family from one row but not the other various
comment|// ways
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test if we delete the family first in one row (HBASE-1541)
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests reversed scan under multi regions    */
annotation|@
name|Test
specifier|public
name|void
name|testReversedScanUnderMultiRegions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|maxByteArray
init|=
name|ConnectionUtils
operator|.
name|MAX_BYTE_ARRAY
decl_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"005"
argument_list|)
block|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"005"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|multiple
argument_list|(
name|maxByteArray
argument_list|,
literal|16
argument_list|)
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"006"
argument_list|)
block|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"006"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|multiple
argument_list|(
name|maxByteArray
argument_list|,
literal|8
argument_list|)
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"007"
argument_list|)
block|,
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"007"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|multiple
argument_list|(
name|maxByteArray
argument_list|,
literal|4
argument_list|)
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"008"
argument_list|)
block|,
name|Bytes
operator|.
name|multiple
argument_list|(
name|maxByteArray
argument_list|,
literal|2
argument_list|)
block|}
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
name|splitRows
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|splitRows
operator|.
name|length
operator|+
literal|1
argument_list|,
name|l
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Insert one row each region
name|int
name|insertNum
init|=
name|splitRows
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insertNum
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|splitRows
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// scan forward
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|insertNum
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// scan backward
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|byte
index|[]
name|lastRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|insertNum
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Tests reversed scan under multi regions    */
annotation|@
name|Test
specifier|public
name|void
name|testSmallReversedScanUnderMultiRegions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test Initialization.
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|splitRows
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"000"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"002"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"004"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"006"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"008"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"010"
argument_list|)
block|}
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
name|splitRows
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitUntilAllRegionsAssigned
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|l
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|splitRows
operator|.
name|length
operator|+
literal|1
argument_list|,
name|l
operator|.
name|getAllRegionLocations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|byte
index|[]
name|splitRow
range|:
name|splitRows
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|splitRow
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|byte
index|[]
name|nextRow
init|=
name|Bytes
operator|.
name|copy
argument_list|(
name|splitRow
argument_list|)
decl_stmt|;
name|nextRow
index|[
name|nextRow
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|nextRow
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
comment|// scan forward
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
operator|new
name|Scan
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|reverseScanTest
argument_list|(
name|table
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reverseScanTest
argument_list|(
name|table
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|reverseScanTest
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|small
parameter_list|)
throws|throws
name|IOException
block|{
comment|// scan backward
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|byte
index|[]
name|lastRow
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"002"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|lastRow
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// 000 001 002
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"002"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"000"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|lastRow
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// 001 002
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"001"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|lastRow
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// 000 001
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"000"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|lastRow
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// 000
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|setSmall
argument_list|(
name|small
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setReversed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"006"
argument_list|)
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setStopRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"002"
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|lastRow
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Result
name|r
range|:
name|scanner
control|)
block|{
name|assertTrue
argument_list|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
name|byte
index|[]
name|thisRow
init|=
name|r
operator|.
name|getRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastRow
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Error scan order, last row= "
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|lastRow
argument_list|)
operator|+
literal|",this row="
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|thisRow
argument_list|)
argument_list|,
name|Bytes
operator|.
name|compareTo
argument_list|(
name|thisRow
argument_list|,
name|lastRow
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
name|lastRow
operator|=
name|thisRow
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// 003 004 005 006
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStartEndKeysWithRegionReplicas
parameter_list|()
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|KEYS
init|=
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
decl_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|KEYS
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|regions
init|=
name|admin
operator|.
name|getTableRegions
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionLocator
name|locator
init|=
operator|(
name|HRegionLocator
operator|)
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|regionReplication
init|=
literal|1
init|;
name|regionReplication
operator|<
literal|4
condition|;
name|regionReplication
operator|++
control|)
block|{
name|List
argument_list|<
name|RegionLocations
argument_list|>
name|regionLocations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// mock region locations coming from meta with multiple replicas
for|for
control|(
name|HRegionInfo
name|region
range|:
name|regions
control|)
block|{
name|HRegionLocation
index|[]
name|arr
init|=
operator|new
name|HRegionLocation
index|[
name|regionReplication
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
operator|new
name|HRegionLocation
argument_list|(
name|RegionReplicaUtil
operator|.
name|getRegionInfoForReplica
argument_list|(
name|region
argument_list|,
name|i
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|regionLocations
operator|.
name|add
argument_list|(
operator|new
name|RegionLocations
argument_list|(
name|arr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Pair
argument_list|<
name|byte
index|[]
index|[]
argument_list|,
name|byte
index|[]
index|[]
argument_list|>
name|startEndKeys
init|=
name|locator
operator|.
name|getStartEndKeys
argument_list|(
name|regionLocations
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KEYS
operator|.
name|length
operator|+
literal|1
argument_list|,
name|startEndKeys
operator|.
name|getFirst
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|KEYS
operator|.
name|length
operator|+
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|startKey
init|=
name|i
operator|==
literal|0
condition|?
name|HConstants
operator|.
name|EMPTY_START_ROW
else|:
name|KEYS
index|[
name|i
operator|-
literal|1
index|]
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
name|i
operator|==
name|KEYS
operator|.
name|length
condition|?
name|HConstants
operator|.
name|EMPTY_END_ROW
else|:
name|KEYS
index|[
name|i
index|]
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|startKey
argument_list|,
name|startEndKeys
operator|.
name|getFirst
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|endKey
argument_list|,
name|startEndKeys
operator|.
name|getSecond
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterAllRecords
parameter_list|()
throws|throws
name|IOException
block|{
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|setBatch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setCaching
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Filter out any records
name|scan
operator|.
name|setFilter
argument_list|(
operator|new
name|FilterList
argument_list|(
operator|new
name|FirstKeyOnlyFilter
argument_list|()
argument_list|,
operator|new
name|InclusiveStopFilter
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|NAMESPACE_TABLE_NAME
argument_list|)
init|)
block|{
try|try
init|(
name|ResultScanner
name|s
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|assertNull
argument_list|(
name|s
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionCache
parameter_list|()
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|byte
index|[]
index|[]
name|KEYS
init|=
name|HBaseTestingUtility
operator|.
name|KEYS_FOR_HBA_CREATE_TABLE
decl_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
name|KEYS
argument_list|)
expr_stmt|;
name|HRegionLocator
name|locator
init|=
operator|(
name|HRegionLocator
operator|)
name|admin
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|results
init|=
name|locator
operator|.
name|getAllRegionLocations
argument_list|()
decl_stmt|;
name|int
name|number
init|=
operator|(
operator|(
name|ConnectionImplementation
operator|)
name|admin
operator|.
name|getConnection
argument_list|()
operator|)
operator|.
name|getNumberOfCachedRegionLocations
argument_list|(
name|htd
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|number
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCellSizeLimit
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCellSizeLimit"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|setConfiguration
argument_list|(
name|HRegion
operator|.
name|HBASE_MAX_CELL_SIZE_KEY
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
literal|10
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
comment|// 10K
name|HColumnDescriptor
name|fam
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|FAMILY
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|)
expr_stmt|;
comment|// Will succeed
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|.
name|increment
argument_list|(
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Will succeed
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|byte
index|[
literal|9
operator|*
literal|1024
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Will fail
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
try|try
block|{
name|t
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|byte
index|[
literal|10
operator|*
literal|1024
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Oversize cell failed to trigger exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|t
operator|.
name|append
argument_list|(
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|byte
index|[
literal|10
operator|*
literal|1024
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Oversize cell failed to trigger exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteSpecifiedVersionOfSpecifiedColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// Put version 1000,2000,3000,4000 of column FAMILY:QUALIFIER
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|4
condition|;
name|t
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUES
index|[
name|t
index|]
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// Delete version 3000 of column FAMILY:QUALIFIER
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
comment|// verify version 1000,2000,4000 remains for column FAMILY:QUALIFIER
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
comment|// Delete a version 5000 of column FAMILY:QUALIFIER which didn't exist
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// verify version 1000,2000,4000 remains for column FAMILY:QUALIFIER
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteLatestVersionOfSpecifiedColumn
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// Put version 1000,2000,3000,4000 of column FAMILY:QUALIFIER
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|4
condition|;
name|t
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUES
index|[
name|t
index|]
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// Delete latest version of column FAMILY:QUALIFIER
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
comment|// verify version 1000,2000,3000 remains for column FAMILY:QUALIFIER
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
comment|// Delete two latest version of column FAMILY:QUALIFIER
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// verify version 1000 remains for column FAMILY:QUALIFIER
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
comment|// Put a version 5000 of column FAMILY:QUALIFIER
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// verify version 1000,5000 remains for column FAMILY:QUALIFIER
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ht
operator|.
name|close
argument_list|()
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test for HBASE-17125    */
annotation|@
name|Test
specifier|public
name|void
name|testReadWithFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
name|VALUEA
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value-a"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|VALUEB
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value-b"
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|}
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
comment|// Put version 1000,2000,3000,4000 of column FAMILY:QUALIFIER
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<=
literal|3
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|<=
literal|1
condition|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUEA
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUEB
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|ResultScanner
name|scanner
init|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test with max versions 1, it should still read ts[1]
name|scan
operator|=
operator|new
name|Scan
argument_list|()
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test with max versions 1, it should still read ts[1]
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test with max versions 5, it should still read ts[1]
name|scan
operator|=
operator|new
name|Scan
argument_list|()
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|scanner
operator|=
name|table
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test with max versions 5, it should still read ts[1]
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
operator|.
name|setFilter
argument_list|(
operator|new
name|ValueFilter
argument_list|(
name|CompareOp
operator|.
name|EQUAL
argument_list|,
operator|new
name|SubstringComparator
argument_list|(
literal|"value-a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// ts[0] has gone from user view. Only read ts[2] which value is less or equal to 3
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUEA
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

