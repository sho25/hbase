begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
operator|.
name|countRows
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CompareOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|PrivateCellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNameTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|coprocessor
operator|.
name|MultiRowMutationEndpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|KeyOnlyFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|LongComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|QualifierFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RegexStringComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|SingleColumnValueFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Run tests that use the HBase clients; {@link Table}.  * Sets up the HBase mini cluster once at start and runs through all client tests.  * Each creates a table named for the method and does its stuff against that.  *  * Parameterized to run with different registry implementations.  *  * This class was split in three because it got too big when parameterized. Other classes  * are below.  *  * @see TestFromClientSide4  * @see TestFromClientSide5  */
end_comment

begin_comment
comment|// NOTE: Increment tests were moved to their own class, TestIncrementsFromClientSide.
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestFromClientSide
extends|extends
name|FromClientSideBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestFromClientSide
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestFromClientSide
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TableNameTestRule
name|name
init|=
operator|new
name|TableNameTestRule
argument_list|()
decl_stmt|;
comment|// To keep the child classes happy.
name|TestFromClientSide
parameter_list|()
block|{   }
specifier|public
name|TestFromClientSide
parameter_list|(
name|Class
name|registry
parameter_list|,
name|int
name|numHedgedReqs
parameter_list|)
throws|throws
name|Exception
block|{
name|initialize
argument_list|(
name|registry
argument_list|,
name|numHedgedReqs
argument_list|,
name|MultiRowMutationEndpoint
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Collection
name|parameters
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|MasterRegistry
operator|.
name|class
block|,
literal|1
block|}
block|,
block|{
name|MasterRegistry
operator|.
name|class
block|,
literal|2
block|}
block|,
block|{
name|ZKConnectionRegistry
operator|.
name|class
block|,
literal|1
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|afterClass
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test append result when there are duplicate rpc request.    */
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateAppend
parameter_list|()
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|hdt
init|=
name|TEST_UTIL
operator|.
name|createTableDescriptor
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_MIN_VERSIONS
argument_list|,
literal|3
argument_list|,
name|HConstants
operator|.
name|FOREVER
argument_list|,
name|HColumnDescriptor
operator|.
name|DEFAULT_KEEP_DELETED
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|kvs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|kvs
operator|.
name|put
argument_list|(
name|SleepAtFirstRpcCall
operator|.
name|SLEEP_TIME_CONF_KEY
argument_list|,
literal|"2000"
argument_list|)
expr_stmt|;
name|hdt
operator|.
name|addCoprocessor
argument_list|(
name|SleepAtFirstRpcCall
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
name|kvs
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|hdt
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|ROW
block|}
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|Configuration
name|c
init|=
operator|new
name|Configuration
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_CLIENT_PAUSE
argument_list|,
literal|50
argument_list|)
expr_stmt|;
comment|// Client will retry because rpc timeout is small than the sleep time of first rpc call
name|c
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|c
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTableBuilder
argument_list|(
name|name
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|setOperationTimeout
argument_list|(
literal|3
operator|*
literal|1000
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|append
operator|.
name|addColumn
argument_list|(
name|HBaseTestingUtility
operator|.
name|fam1
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
decl_stmt|;
comment|// Verify expected result
name|Cell
index|[]
name|cells
init|=
name|result
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cells
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertKey
argument_list|(
name|cells
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|HBaseTestingUtility
operator|.
name|fam1
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Verify expected result again
name|Result
name|readResult
init|=
name|table
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
argument_list|)
decl_stmt|;
name|cells
operator|=
name|readResult
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cells
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertKey
argument_list|(
name|cells
index|[
literal|0
index|]
argument_list|,
name|ROW
argument_list|,
name|HBaseTestingUtility
operator|.
name|fam1
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Basic client side validation of HBASE-4536    */
annotation|@
name|Test
specifier|public
name|void
name|testKeepDeletedCells
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|C0
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"c0"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|T1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"T1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|T2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"T2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|T3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"T3"
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|familyDescriptor
init|=
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|FAMILY
argument_list|)
operator|.
name|setKeepDeletedCells
argument_list|(
name|KeepDeletedCells
operator|.
name|TRUE
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
name|tableDescriptor
init|=
operator|new
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|tableDescriptor
operator|.
name|setColumnFamily
argument_list|(
name|familyDescriptor
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|h
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|T1
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|2
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|T2
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|Put
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|4
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|T3
argument_list|)
expr_stmt|;
name|h
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Delete
name|d
init|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
decl_stmt|;
name|h
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|Delete
argument_list|(
name|T1
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|d
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|h
operator|.
name|delete
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|Get
name|g
init|=
operator|new
name|Get
argument_list|(
name|T1
argument_list|)
decl_stmt|;
comment|// does *not* include the delete
name|g
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|Result
name|r
init|=
name|h
operator|.
name|get
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|T2
argument_list|,
name|r
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|C0
argument_list|)
argument_list|)
expr_stmt|;
name|Scan
name|s
init|=
operator|new
name|Scan
argument_list|(
name|T1
argument_list|)
decl_stmt|;
name|s
operator|.
name|setTimeRange
argument_list|(
literal|0
argument_list|,
name|ts
operator|+
literal|3
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|h
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|kvs
init|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|rawCells
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|T2
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T1
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
name|s
operator|=
operator|new
name|Scan
argument_list|(
name|T1
argument_list|)
expr_stmt|;
name|s
operator|.
name|setRaw
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|scanner
operator|=
name|h
operator|.
name|getScanner
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|kvs
operator|=
name|scanner
operator|.
name|next
argument_list|()
operator|.
name|rawCells
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|PrivateCellUtil
operator|.
name|isDeleteFamily
argument_list|(
name|kvs
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T3
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|isDelete
argument_list|(
name|kvs
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T2
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|T1
argument_list|,
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|kvs
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Basic client side validation of HBASE-10118    */
annotation|@
name|Test
specifier|public
name|void
name|testPurgeFutureDeletes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|ROW
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|COLUMN
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|VALUE
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
comment|// future timestamp
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|*
literal|2
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|)
argument_list|)
expr_stmt|;
name|Delete
name|del
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|del
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|)
argument_list|)
expr_stmt|;
comment|// major compaction, purged future deletes
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// waiting for the major compaction to complete
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|6000
argument_list|,
parameter_list|()
lambda|->
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|==
name|CompactionState
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|result
operator|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|VALUE
argument_list|,
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|COLUMN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verifies that getConfiguration returns the same Configuration object used    * to create the HTable instance.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
block|}
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|)
init|)
block|{
name|assertSame
argument_list|(
name|conf
argument_list|,
name|table
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test from client side of an involved filter against a multi family that    * involves deletes.    */
annotation|@
name|Test
specifier|public
name|void
name|testWeirdCacheBehaviour
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-blob"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-type"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-date"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-tags"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"trans-group"
argument_list|)
block|}
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|)
init|)
block|{
name|String
name|value
init|=
literal|"this is the value"
decl_stmt|;
name|String
name|value2
init|=
literal|"this is some other value"
decl_stmt|;
name|String
name|keyPrefix1
init|=
name|HBaseTestingUtility
operator|.
name|getRandomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyPrefix2
init|=
name|HBaseTestingUtility
operator|.
name|getRandomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|keyPrefix3
init|=
name|HBaseTestingUtility
operator|.
name|getRandomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|putRows
argument_list|(
name|ht
argument_list|,
literal|3
argument_list|,
name|value2
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Checking values for key: "
operator|+
name|keyPrefix3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan"
argument_list|,
literal|3
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix3
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|ht
argument_list|,
name|value2
argument_list|,
name|keyPrefix1
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|ht
argument_list|,
name|value2
argument_list|,
name|keyPrefix2
argument_list|)
expr_stmt|;
name|deleteColumns
argument_list|(
name|ht
argument_list|,
name|value2
argument_list|,
name|keyPrefix3
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Starting important checks....."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix1
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix1
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix2
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix2
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got back incorrect number of rows from scan: "
operator|+
name|keyPrefix3
argument_list|,
literal|0
argument_list|,
name|getNumberOfRows
argument_list|(
name|keyPrefix3
argument_list|,
name|value2
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test filters when multiple regions.  It does counts.  Needs eye-balling of    * logs to ensure that we're not scanning more regions that we're supposed to.    * Related to the TestFilterAcrossRegions over in the o.a.h.h.filter package.    */
annotation|@
name|Test
specifier|public
name|void
name|testFilterAcrossMultipleRegions
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|int
name|rowCount
init|=
name|TEST_UTIL
operator|.
name|loadTable
argument_list|(
name|t
argument_list|,
name|FAMILY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertRowCount
argument_list|(
name|t
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Split the table.  Should split on a reasonable key; 'lqj'
name|List
argument_list|<
name|HRegionLocation
argument_list|>
name|regions
init|=
name|splitTable
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|assertRowCount
argument_list|(
name|t
argument_list|,
name|rowCount
argument_list|)
expr_stmt|;
comment|// Get end key of first region.
name|byte
index|[]
name|endKey
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRegion
argument_list|()
operator|.
name|getEndKey
argument_list|()
decl_stmt|;
comment|// Count rows with a filter that stops us before passed 'endKey'.
comment|// Should be count of rows in first region.
name|int
name|endKeyCount
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|endKey
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|endKeyCount
operator|<
name|rowCount
argument_list|)
expr_stmt|;
comment|// How do I know I did not got to second region?  Thats tough.  Can't really
comment|// do that in client-side region test.  I verified by tracing in debugger.
comment|// I changed the messages that come out when set to DEBUG so should see
comment|// when scanner is done. Says "Finished with scanning..." with region name.
comment|// Check that its finished in right region.
comment|// New test.  Make it so scan goes into next region by one and then two.
comment|// Make sure count comes out right.
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[]
block|{
name|endKey
index|[
literal|0
index|]
block|,
name|endKey
index|[
literal|1
index|]
block|,
call|(
name|byte
call|)
argument_list|(
name|endKey
index|[
literal|2
index|]
operator|+
literal|1
argument_list|)
block|}
decl_stmt|;
name|int
name|plusOneCount
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|endKeyCount
operator|+
literal|1
argument_list|,
name|plusOneCount
argument_list|)
expr_stmt|;
name|key
operator|=
operator|new
name|byte
index|[]
block|{
name|endKey
index|[
literal|0
index|]
block|,
name|endKey
index|[
literal|1
index|]
block|,
call|(
name|byte
call|)
argument_list|(
name|endKey
index|[
literal|2
index|]
operator|+
literal|2
argument_list|)
block|}
expr_stmt|;
name|int
name|plusTwoCount
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|endKeyCount
operator|+
literal|2
argument_list|,
name|plusTwoCount
argument_list|)
expr_stmt|;
comment|// New test.  Make it so I scan one less than endkey.
name|key
operator|=
operator|new
name|byte
index|[]
block|{
name|endKey
index|[
literal|0
index|]
block|,
name|endKey
index|[
literal|1
index|]
block|,
call|(
name|byte
call|)
argument_list|(
name|endKey
index|[
literal|2
index|]
operator|-
literal|1
argument_list|)
block|}
expr_stmt|;
name|int
name|minusOneCount
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|endKeyCount
operator|-
literal|1
argument_list|,
name|minusOneCount
argument_list|)
expr_stmt|;
comment|// For above test... study logs.  Make sure we do "Finished with scanning.."
comment|// in first region and that we do not fall into the next region.
name|key
operator|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'a'
block|,
literal|'a'
block|}
expr_stmt|;
name|int
name|countBBB
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
name|CompareOperator
operator|.
name|EQUAL
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|countBBB
argument_list|)
expr_stmt|;
name|int
name|countGreater
init|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|endKey
argument_list|,
literal|null
argument_list|,
name|CompareOperator
operator|.
name|GREATER_OR_EQUAL
argument_list|)
argument_list|)
decl_stmt|;
comment|// Because started at start of table.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|countGreater
argument_list|)
expr_stmt|;
name|countGreater
operator|=
name|countRows
argument_list|(
name|t
argument_list|,
name|createScanWithRowFilter
argument_list|(
name|endKey
argument_list|,
name|endKey
argument_list|,
name|CompareOperator
operator|.
name|GREATER_OR_EQUAL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rowCount
operator|-
name|endKeyCount
argument_list|,
name|countGreater
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuperSimple
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|tableName
operator|.
name|toBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
literal|"Expected null result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMaxKeyValueSize
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|String
name|oldMaxSize
init|=
name|conf
operator|.
name|get
argument_list|(
name|ConnectionConfiguration
operator|.
name|MAX_KEYVALUE_SIZE_KEY
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
name|value
init|=
operator|new
name|byte
index|[
literal|4
operator|*
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
try|try
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|ConnectionConfiguration
operator|.
name|MAX_KEYVALUE_SIZE_KEY
argument_list|,
literal|2
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// Create new table so we pick up the change in Configuration.
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
init|)
block|{
try|try
init|(
name|Table
name|t
init|=
name|connection
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
init|)
block|{
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|t
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"Inserting a too large KeyValue worked, should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{       }
block|}
name|conf
operator|.
name|set
argument_list|(
name|ConnectionConfiguration
operator|.
name|MAX_KEYVALUE_SIZE_KEY
argument_list|,
name|oldMaxSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilters
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|QualifierFilter
argument_list|(
name|CompareOperator
operator|.
name|EQUAL
argument_list|,
operator|new
name|RegexStringComparator
argument_list|(
literal|"col[1-5]"
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|expectedIndex
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
name|expectedIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|QUALIFIERS
index|[
name|expectedIndex
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|expectedIndex
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterWithLongCompartor
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|values
init|=
operator|new
name|byte
index|[
literal|10
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|100L
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|SingleColumnValueFilter
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|CompareOperator
operator|.
name|GREATER
argument_list|,
operator|new
name|LongComparator
argument_list|(
literal|500
argument_list|)
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|expectedIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|toLong
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|)
operator|>
literal|500
argument_list|)
expr_stmt|;
name|expectedIndex
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeyOnlyFilter
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col0-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col2-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col3-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col4-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col5-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col6-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col7-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col8-<d2v1>-<d3v2>"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col9-<d2v1>-<d3v2>"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|Filter
name|filter
init|=
operator|new
name|KeyOnlyFilter
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|scan
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
try|try
init|(
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
init|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Result
name|result
range|:
name|scanner
control|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|,
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
operator|.
name|getValueLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|VALUE
operator|.
name|length
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test simple table and non-existent row cases.    */
annotation|@
name|Test
specifier|public
name|void
name|testSimpleMissing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// Try to get a row on an empty table
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Insert a row
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Try to get empty rows around it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan empty rows around it
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can actually get the row
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Make sure we can scan the row
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test basic puts, gets, scans, and deletes for a single row    * in a multiple family table.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:MethodLength"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testSingleRowMultipleFamily
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeN
argument_list|(
name|ROW
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeN
argument_list|(
name|QUALIFIER
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|10
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|)
init|)
block|{
comment|////////////////////////////////////////////////////////////////////////////
comment|// Insert one column to one family
comment|////////////////////////////////////////////////////////////////////////////
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get the single column
name|getVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Scan the single column
name|scanVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Get empty results around inserted column
name|getVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Scan empty results around inserted column
name|scanVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush memstore and run same tests from storefiles
comment|////////////////////////////////////////////////////////////////////////////
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Redo get and scan tests from storefile
name|getVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanVerifySingleColumn
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|,
name|VALUES
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|getVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scanVerifySingleEmpty
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
literal|0
argument_list|,
name|FAMILIES
argument_list|,
literal|4
argument_list|,
name|QUALIFIERS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Now, Test reading from memstore and storefiles at once
comment|////////////////////////////////////////////////////////////////////////////
comment|// Insert multiple columns to two other families
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|7
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|9
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Get multiple columns across multiple families and get empties around it
name|singleRowGetTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|// Scan multiple columns across multiple families and scan empties around it
name|singleRowScanTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush the table again
comment|////////////////////////////////////////////////////////////////////////////
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Redo tests again
name|singleRowGetTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
name|singleRowScanTest
argument_list|(
name|ht
argument_list|,
name|ROWS
argument_list|,
name|FAMILIES
argument_list|,
name|QUALIFIERS
argument_list|,
name|VALUES
argument_list|)
expr_stmt|;
comment|// Insert more data to memstore
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete a storefile column
comment|////////////////////////////////////////////////////////////////////////////
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get deleted column
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted column
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get a column before it and after it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan a column before it and after it
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete a memstore column
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get deleted column
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted column
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get a column before it and after it
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan a column before it and after it
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Delete joint storefile/memstore family
comment|////////////////////////////////////////////////////////////////////////////
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Try to get storefile column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get memstore column in deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to get deleted family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan storefile column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan memstore column in deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Try to scan deleted family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNullResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Make sure we can still get another family
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan another family
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|()
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|////////////////////////////////////////////////////////////////////////////
comment|// Flush everything and rerun delete tests
comment|////////////////////////////////////////////////////////////////////////////
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Try to get storefile column in deleted family
name|assertEmptyResult
argument_list|(
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to get memstore column in deleted family
name|assertEmptyResult
argument_list|(
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to get deleted family
name|assertEmptyResult
argument_list|(
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to scan storefile column in deleted family
name|assertNullResult
argument_list|(
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to scan memstore column in deleted family
name|assertNullResult
argument_list|(
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Try to scan deleted family
name|assertNullResult
argument_list|(
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|4
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure we can still get another family
name|assertSingleResult
argument_list|(
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
argument_list|)
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
argument_list|)
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Make sure we can still scan another family
name|assertSingleResult
argument_list|(
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|)
argument_list|)
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
operator|new
name|Scan
argument_list|()
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|)
argument_list|)
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|6
index|]
argument_list|,
name|QUALIFIERS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|NullPointerException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullTableName
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Null table name (should NOT work)
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
literal|null
argument_list|,
name|FAMILY
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creating a table with null name passed, should have failed"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNullFamilyName
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
comment|// Null family (should NOT work)
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creating a table with a null family passed, should fail"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullRowAndQualifier
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
comment|// Null row (should NOT work)
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Inserting a null row worked, should throw exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{       }
comment|// Null qualifier (should work)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullEmptyQualifier
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
comment|// Empty qualifier, byte[0] instead of null (should work)
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Flush and try again
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Using a row with null qualifier should not throw exception"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullValue
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
comment|// Null value
try|try
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertSingleResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Null values should be allowed, but threw exception"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullQualifier
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
try|try
init|(
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|)
init|)
block|{
comment|// Work for Put
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Work for Get, Scan
name|getTestNull
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|scanTestNull
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Work for Delete
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|Result
name|result
init|=
name|table
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertEmptyResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Work for Increment/Append
name|Increment
name|increment
init|=
operator|new
name|Increment
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|increment
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|table
operator|.
name|increment
argument_list|(
name|increment
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|table
operator|.
name|incrementColumnValue
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|,
literal|null
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|table
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Append
name|append
init|=
operator|new
name|Append
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|append
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
name|table
operator|.
name|append
argument_list|(
name|append
argument_list|)
expr_stmt|;
name|getTestNull
argument_list|(
name|table
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|VALUE
argument_list|)
expr_stmt|;
comment|// Work for checkAndMutate using thenPut, thenMutate and thenDelete
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"checkAndPut"
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|VALUE
argument_list|)
operator|.
name|thenPut
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|RowMutations
name|mutate
init|=
operator|new
name|RowMutations
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|mutate
operator|.
name|add
argument_list|(
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"checkAndMutate"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"checkAndPut"
argument_list|)
argument_list|)
operator|.
name|thenMutate
argument_list|(
name|mutate
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|table
operator|.
name|checkAndMutate
argument_list|(
name|ROW
argument_list|,
name|FAMILY
argument_list|)
operator|.
name|ifEquals
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"checkAndMutate"
argument_list|)
argument_list|)
operator|.
name|thenDelete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:MethodLength"
argument_list|)
specifier|public
name|void
name|testVersions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|20
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|10
argument_list|)
init|)
block|{
comment|// Insert 4 versions of same column
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Flush and redo
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Add some memstore and retest
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|8
index|]
argument_list|,
name|VALUES
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions in query is respected
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|()
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Verify we can get each one properly
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerify
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|,
name|VALUES
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
comment|// Verify we don't accidentally get others
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|getVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scanVersionAndVerifyMissing
argument_list|(
name|ht
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
comment|// Ensure maxVersions of table is respected
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Insert 4 more versions of same column and a dupe
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|9
index|]
argument_list|,
name|VALUES
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|,
name|VALUES
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|13
index|]
argument_list|,
name|VALUES
index|[
literal|13
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|15
index|]
argument_list|,
name|VALUES
index|[
literal|15
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|7
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|11
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|7
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|11
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// Delete a version in the memstore and a version in a storefile
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|11
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Test that it's gone
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|,
name|STAMPS
index|[
literal|8
index|]
block|,
name|STAMPS
index|[
literal|9
index|]
block|,
name|STAMPS
index|[
literal|13
index|]
block|,
name|STAMPS
index|[
literal|15
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|,
name|VALUES
index|[
literal|8
index|]
block|,
name|VALUES
index|[
literal|9
index|]
block|,
name|VALUES
index|[
literal|13
index|]
block|,
name|VALUES
index|[
literal|15
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:MethodLength"
argument_list|)
specifier|public
name|void
name|testVersionLimits
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|int
index|[]
name|LIMITS
init|=
block|{
literal|1
block|,
literal|3
block|,
literal|5
block|}
decl_stmt|;
name|long
index|[]
name|STAMPS
init|=
name|makeStamps
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeNAscii
argument_list|(
name|VALUE
argument_list|,
literal|10
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|,
name|LIMITS
argument_list|)
init|)
block|{
comment|// Insert limit + 1 on each family
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|5
index|]
argument_list|,
name|VALUES
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|STAMPS
index|[
literal|6
index|]
argument_list|,
name|VALUES
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Verify we only get the right number out of each
comment|// Family0
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Family1
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|1
index|]
block|,
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Family2
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|STAMPS
index|[
literal|2
index|]
block|,
name|STAMPS
index|[
literal|3
index|]
block|,
name|STAMPS
index|[
literal|4
index|]
block|,
name|STAMPS
index|[
literal|5
index|]
block|,
name|STAMPS
index|[
literal|6
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|,
name|VALUES
index|[
literal|5
index|]
block|,
name|VALUES
index|[
literal|6
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Try all families
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 9 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|9
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteFamilyVersion
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
init|)
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeNAscii
argument_list|(
name|QUALIFIER
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
literal|1
condition|;
name|q
operator|++
control|)
block|{
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|5
condition|;
name|t
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|q
index|]
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUES
index|[
name|t
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// delete version '2000'
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// delete version '4000'
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
comment|// verify version '1000'/'3000'/'5000' remains for all columns
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteFamilyVersionWithOtherDeletes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|QUALIFIERS
init|=
name|makeNAscii
argument_list|(
name|QUALIFIER
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
init|;
name|Table
name|ht
operator|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILY
argument_list|,
literal|5
argument_list|)
init|)
block|{
name|Put
name|put
decl_stmt|;
name|Result
name|result
decl_stmt|;
name|Get
name|get
decl_stmt|;
name|Delete
name|delete
init|=
literal|null
decl_stmt|;
comment|// 1. put on ROW
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
literal|5
condition|;
name|q
operator|++
control|)
block|{
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|5
condition|;
name|t
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|q
index|]
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUES
index|[
name|t
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// 2. put on ROWS[0]
name|byte
index|[]
name|ROW2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"myRowForTest"
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|q
init|=
literal|0
init|;
name|q
operator|<
literal|5
condition|;
name|q
operator|++
control|)
block|{
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|5
condition|;
name|t
operator|++
control|)
block|{
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|q
index|]
argument_list|,
name|ts
index|[
name|t
index|]
argument_list|,
name|VALUES
index|[
name|t
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// 3. delete on ROW
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
comment|// delete version<= 2000 of all columns
comment|// note: addFamily must be the first since it will mask
comment|// the subsequent other type deletes!
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// delete version '4000' of all columns
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// delete version<= 3000 of column 0
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
comment|// delete version<= 5000 of column 2
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// delete version 5000 of column 4
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// 4. delete on ROWS[0]
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// delete version '2000'
name|delete
operator|.
name|addFamilyVersion
argument_list|(
name|FAMILY
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
comment|// delete version '4000'
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// 5. check ROW
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|0
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|1
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|3
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
literal|4
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// 6. check ROWS[0]
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW2
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
comment|// verify version '1000'/'3000'/'5000' remains for all columns
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW2
argument_list|,
name|FAMILY
argument_list|,
name|QUALIFIERS
index|[
name|i
index|]
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|4
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|4
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteWithFailed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|,
literal|3
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// delete wrong family
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readAllVersions
argument_list|()
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getValue
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
annotation|@
name|SuppressWarnings
argument_list|(
literal|"checkstyle:MethodLength"
argument_list|)
specifier|public
name|void
name|testDeletes
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|name
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|byte
index|[]
index|[]
name|ROWS
init|=
name|makeNAscii
argument_list|(
name|ROW
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|FAMILIES
init|=
name|makeNAscii
argument_list|(
name|FAMILY
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|VALUES
init|=
name|makeN
argument_list|(
name|VALUE
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|long
index|[]
name|ts
init|=
block|{
literal|1000
block|,
literal|2000
block|,
literal|3000
block|,
literal|4000
block|,
literal|5000
block|}
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|FAMILIES
argument_list|,
literal|3
argument_list|)
init|)
block|{
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|Get
name|get
init|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Result
name|result
init|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
decl_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
decl_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test delete latest version
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
comment|// ts[4]
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test for HBASE-1847
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Cleanup null qualifier
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
comment|// Expected client behavior might be that you can re-put deleted values
comment|// But alas, this is not to be.  We can't put them back in either case.
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// 1000
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|4
index|]
argument_list|,
name|VALUES
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
comment|// 5000
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// It used to be due to the internal implementation of Get, that
comment|// the Get() call would return ts[4] UNLIKE the Scan below. With
comment|// the switch to using Scan for Get this is no longer the case.
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// The Scanner returns the previous values, the expected-naive-unexpected behavior
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROW
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROW
argument_list|,
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|1
index|]
block|,
name|ts
index|[
literal|2
index|]
block|,
name|ts
index|[
literal|3
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|1
index|]
block|,
name|VALUES
index|[
literal|2
index|]
block|,
name|VALUES
index|[
literal|3
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Test deleting an entire family from one row but not the other various ways
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|0
index|]
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|1
index|]
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|2
index|]
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|ts
index|[
literal|3
index|]
argument_list|,
name|VALUES
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
comment|// Assert that above went in.
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 4 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
literal|": "
operator|+
name|result
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumns
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|0
index|]
argument_list|,
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|0
index|]
block|,
name|ts
index|[
literal|1
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|0
index|]
block|,
name|VALUES
index|[
literal|1
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|getSingleScanResult
argument_list|(
name|ht
argument_list|,
name|scan
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNResult
argument_list|(
name|result
argument_list|,
name|ROWS
index|[
literal|2
index|]
argument_list|,
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
operator|new
name|long
index|[]
block|{
name|ts
index|[
literal|2
index|]
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|VALUES
index|[
literal|2
index|]
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test if we delete the family first in one row (HBASE-1541)
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|ROWS
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|get
operator|.
name|readVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|scan
operator|=
operator|new
name|Scan
argument_list|(
name|ROWS
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|scan
operator|.
name|setMaxVersions
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|ht
operator|.
name|getScanner
argument_list|(
name|scan
argument_list|)
decl_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 1 key but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|scanner
operator|.
name|next
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected 2 keys but received "
operator|+
name|result
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|ROWS
index|[
literal|4
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|result
operator|.
name|rawCells
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|VALUES
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Add test of bulk deleting.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|put
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|SKIP_WAL
argument_list|)
expr_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|,
name|QUALIFIER
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|ht
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|Delete
argument_list|>
name|deletes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|delete
operator|=
operator|new
name|Delete
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|deletes
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|ht
operator|.
name|delete
argument_list|(
name|deletes
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|get
operator|=
operator|new
name|Get
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|get
operator|.
name|addFamily
argument_list|(
name|FAMILIES
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|result
operator|=
name|ht
operator|.
name|get
argument_list|(
name|get
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

