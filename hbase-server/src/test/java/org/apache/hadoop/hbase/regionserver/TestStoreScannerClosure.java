begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueTestUtil
operator|.
name|create
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|KeyValueScanFixture
operator|.
name|scanFixture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|CacheConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFileContextBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|RandomKeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This test tests whether parallel {@link StoreScanner#close()} and  * {@link StoreScanner#updateReaders(List, List)} works perfectly ensuring  * that there are no references on the existing Storescanner readers.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStoreScannerClosure
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestStoreScannerClosure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestStoreScannerClosure
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_VALID_KEY_TYPES
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
operator|-
literal|2
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CF_STR
init|=
literal|"cf"
decl_stmt|;
specifier|private
specifier|static
name|HRegion
name|region
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|CF
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|CF_STR
argument_list|)
decl_stmt|;
specifier|static
name|Configuration
name|CONF
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|CacheConfig
name|cacheConf
decl_stmt|;
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
name|ROOT_DIR
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestHFile"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|CONF
argument_list|,
name|CF
argument_list|,
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|CellComparator
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf_1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KeyValue
index|[]
name|kvs
init|=
operator|new
name|KeyValue
index|[]
block|{
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"b"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"c"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"d"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"e"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"f"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"g"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"h"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R1"
argument_list|,
literal|"cf"
argument_list|,
literal|"i"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|,
name|create
argument_list|(
literal|"R2"
argument_list|,
literal|"cf"
argument_list|,
literal|"a"
argument_list|,
literal|11
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Put
argument_list|,
literal|"dont-care"
argument_list|)
block|, }
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|CONF
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|CONF
argument_list|)
expr_stmt|;
name|fs
operator|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
expr_stmt|;
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|fam
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
operator|new
name|HRegionInfo
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|region
operator|=
name|HBaseTestingUtility
operator|.
name|createRegionAndWAL
argument_list|(
name|info
argument_list|,
name|path
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|htd
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScannerCloseAndUpdateReaders1
parameter_list|()
throws|throws
name|Exception
block|{
name|testScannerCloseAndUpdateReaderInternal
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScannerCloseAndUpdateReaders2
parameter_list|()
throws|throws
name|Exception
block|{
name|testScannerCloseAndUpdateReaderInternal
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|writeStoreFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|storeFileParentDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"TestHFile"
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withBlockSize
argument_list|(
literal|64
operator|*
literal|1024
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFileWriter
name|sfw
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|CONF
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|storeFileParentDir
argument_list|)
operator|.
name|withComparator
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|int
name|rowLen
init|=
literal|32
decl_stmt|;
name|Random
name|RNG
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|k
init|=
name|RandomKeyValueUtil
operator|.
name|randomOrderedKey
argument_list|(
name|RNG
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|v
init|=
name|RandomKeyValueUtil
operator|.
name|randomValue
argument_list|(
name|RNG
argument_list|)
decl_stmt|;
name|int
name|cfLen
init|=
name|RNG
operator|.
name|nextInt
argument_list|(
name|k
operator|.
name|length
operator|-
name|rowLen
operator|+
literal|1
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|k
argument_list|,
literal|0
argument_list|,
name|rowLen
argument_list|,
name|k
argument_list|,
name|rowLen
argument_list|,
name|cfLen
argument_list|,
name|k
argument_list|,
name|rowLen
operator|+
name|cfLen
argument_list|,
name|k
operator|.
name|length
operator|-
name|rowLen
operator|-
name|cfLen
argument_list|,
name|RNG
operator|.
name|nextLong
argument_list|()
argument_list|,
name|generateKeyType
argument_list|(
name|RNG
argument_list|)
argument_list|,
name|v
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|)
decl_stmt|;
name|sfw
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|sfw
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|sfw
operator|.
name|getPath
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|KeyValue
operator|.
name|Type
name|generateKeyType
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Let's make half of KVs puts.
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Put
return|;
block|}
else|else
block|{
name|KeyValue
operator|.
name|Type
name|keyType
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|values
argument_list|()
index|[
literal|1
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|NUM_VALID_KEY_TYPES
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|keyType
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|||
name|keyType
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Maximum
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Generated an invalid key type: "
operator|+
name|keyType
operator|+
literal|". "
operator|+
literal|"Probably the layout of KeyValue.Type has changed."
argument_list|)
throw|;
block|}
return|return
name|keyType
return|;
block|}
block|}
specifier|private
name|HStoreFile
name|readStoreFile
parameter_list|(
name|Path
name|storeFilePath
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Open the file reader with block cache disabled.
name|HStoreFile
name|file
init|=
operator|new
name|HStoreFile
argument_list|(
name|fs
argument_list|,
name|storeFilePath
argument_list|,
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|BloomType
operator|.
name|NONE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|file
return|;
block|}
specifier|private
name|void
name|testScannerCloseAndUpdateReaderInternal
parameter_list|(
name|boolean
name|awaitUpdate
parameter_list|,
name|boolean
name|awaitClose
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// start write to store file.
name|Path
name|path
init|=
name|writeStoreFile
argument_list|()
decl_stmt|;
name|HStoreFile
name|file
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|HStoreFile
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<
name|HStoreFile
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|file
operator|=
name|readStoreFile
argument_list|(
name|path
argument_list|,
name|CONF
argument_list|)
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// fail test
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|scanFixture
argument_list|(
name|kvs
argument_list|)
expr_stmt|;
comment|// scanners.add(storeFileScanner);
try|try
init|(
name|ExtendedStoreScanner
name|scan
init|=
operator|new
name|ExtendedStoreScanner
argument_list|(
name|region
operator|.
name|getStore
argument_list|(
name|fam
argument_list|)
argument_list|,
name|scanInfo
argument_list|,
operator|new
name|Scan
argument_list|()
argument_list|,
name|getCols
argument_list|(
literal|"a"
argument_list|,
literal|"d"
argument_list|)
argument_list|,
literal|100L
argument_list|)
init|)
block|{
name|Thread
name|closeThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|scan
operator|.
name|close
argument_list|(
name|awaitClose
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|closeThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
name|updateThread
init|=
operator|new
name|Thread
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|scan
operator|.
name|updateReaders
argument_list|(
name|awaitUpdate
argument_list|,
name|files
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|updateThread
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// complete both the threads
name|closeThread
operator|.
name|join
argument_list|()
expr_stmt|;
comment|// complete both the threads
name|updateThread
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|getReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// the fileReader is not null when the updateReaders has completed first.
comment|// in the other case the fileReader will be null.
name|int
name|refCount
init|=
name|file
operator|.
name|getReader
argument_list|()
operator|.
name|getRefCount
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"the store scanner count is "
operator|+
name|refCount
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The store scanner count should be 0"
argument_list|,
name|refCount
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ExtendedStoreScanner
extends|extends
name|StoreScanner
block|{
specifier|private
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
name|ExtendedStoreScanner
parameter_list|(
name|HStore
name|store
parameter_list|,
name|ScanInfo
name|scanInfo
parameter_list|,
name|Scan
name|scan
parameter_list|,
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|columns
parameter_list|,
name|long
name|readPt
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|store
argument_list|,
name|scanInfo
argument_list|,
name|scan
argument_list|,
name|columns
argument_list|,
name|readPt
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateReaders
parameter_list|(
name|boolean
name|await
parameter_list|,
name|List
argument_list|<
name|HStoreFile
argument_list|>
name|sfs
parameter_list|,
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|memStoreScanners
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|await
condition|)
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|updateReaders
argument_list|(
name|sfs
argument_list|,
name|memStoreScanners
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|await
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|// creating a dummy close
specifier|public
name|void
name|close
parameter_list|(
name|boolean
name|await
parameter_list|,
name|boolean
name|dummy
parameter_list|)
block|{
if|if
condition|(
name|await
condition|)
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// TODO Auto-generated catch block
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|await
condition|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|getCols
parameter_list|(
name|String
modifier|...
name|strCols
parameter_list|)
block|{
name|NavigableSet
argument_list|<
name|byte
index|[]
argument_list|>
name|cols
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|col
range|:
name|strCols
control|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
return|return
name|cols
return|;
block|}
block|}
end_class

end_unit

