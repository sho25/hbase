begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestLruCachedBlock
block|{
name|LruCachedBlock
name|block
decl_stmt|;
name|LruCachedBlock
name|blockEqual
decl_stmt|;
name|LruCachedBlock
name|blockNotEqual
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|BlockCacheKey
name|cacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
literal|"name"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BlockCacheKey
name|otherKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
literal|"name2"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Cacheable
name|cacheable
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Cacheable
operator|.
name|class
argument_list|)
decl_stmt|;
name|Cacheable
name|otheCacheable
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Cacheable
operator|.
name|class
argument_list|)
decl_stmt|;
name|block
operator|=
operator|new
name|LruCachedBlock
argument_list|(
name|cacheKey
argument_list|,
name|cacheable
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|blockEqual
operator|=
operator|new
name|LruCachedBlock
argument_list|(
name|otherKey
argument_list|,
name|otheCacheable
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|blockNotEqual
operator|=
operator|new
name|LruCachedBlock
argument_list|(
name|cacheKey
argument_list|,
name|cacheable
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquality
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|block
operator|.
name|hashCode
argument_list|()
argument_list|,
name|blockEqual
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|block
operator|.
name|hashCode
argument_list|()
argument_list|,
name|blockNotEqual
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|block
argument_list|,
name|blockEqual
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|block
argument_list|,
name|blockNotEqual
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

