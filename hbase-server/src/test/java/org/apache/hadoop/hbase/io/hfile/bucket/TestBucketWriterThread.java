begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright The Apache Software Foundation  *  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|BlockCacheKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|Cacheable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketCache
operator|.
name|BucketEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketCache
operator|.
name|RAMQueueEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|LongAdder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestBucketWriterThread
block|{
specifier|private
name|BucketCache
name|bc
decl_stmt|;
specifier|private
name|BucketCache
operator|.
name|WriterThread
name|wt
decl_stmt|;
specifier|private
name|BlockingQueue
argument_list|<
name|RAMQueueEntry
argument_list|>
name|q
decl_stmt|;
specifier|private
name|Cacheable
name|plainCacheable
decl_stmt|;
specifier|private
name|BlockCacheKey
name|plainKey
decl_stmt|;
comment|/** A BucketCache that does not start its writer threads. */
specifier|private
specifier|static
class|class
name|MockBucketCache
extends|extends
name|BucketCache
block|{
specifier|public
name|MockBucketCache
parameter_list|(
name|String
name|ioEngineName
parameter_list|,
name|long
name|capacity
parameter_list|,
name|int
name|blockSize
parameter_list|,
name|int
index|[]
name|bucketSizes
parameter_list|,
name|int
name|writerThreadNum
parameter_list|,
name|int
name|writerQLen
parameter_list|,
name|String
name|persistencePath
parameter_list|,
name|int
name|ioErrorsTolerationDuration
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|ioEngineName
argument_list|,
name|capacity
argument_list|,
name|blockSize
argument_list|,
name|bucketSizes
argument_list|,
name|writerThreadNum
argument_list|,
name|writerQLen
argument_list|,
name|persistencePath
argument_list|,
name|ioErrorsTolerationDuration
argument_list|,
name|HBaseConfiguration
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|startWriterThreads
parameter_list|()
block|{
comment|// intentional noop
block|}
block|}
comment|/**    * Set up variables and get BucketCache and WriterThread into state where tests can  manually    * control the running of WriterThread and BucketCache is empty.    * @throws Exception    */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Arbitrary capacity.
specifier|final
name|int
name|capacity
init|=
literal|16
decl_stmt|;
comment|// Run with one writer thread only. Means there will be one writer queue only too.  We depend
comment|// on this in below.
specifier|final
name|int
name|writerThreadsCount
init|=
literal|1
decl_stmt|;
name|this
operator|.
name|bc
operator|=
operator|new
name|MockBucketCache
argument_list|(
literal|"heap"
argument_list|,
name|capacity
argument_list|,
literal|1
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
name|writerThreadsCount
argument_list|,
name|capacity
argument_list|,
literal|null
argument_list|,
literal|100
comment|/*Tolerate ioerrors for 100ms*/
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writerThreadsCount
argument_list|,
name|bc
operator|.
name|writerThreads
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writerThreadsCount
argument_list|,
name|bc
operator|.
name|writerQueues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get reference to our single WriterThread instance.
name|this
operator|.
name|wt
operator|=
name|bc
operator|.
name|writerThreads
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|q
operator|=
name|bc
operator|.
name|writerQueues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|wt
operator|.
name|disableWriter
argument_list|()
expr_stmt|;
name|this
operator|.
name|plainKey
operator|=
operator|new
name|BlockCacheKey
argument_list|(
literal|"f"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|this
operator|.
name|plainCacheable
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Cacheable
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|bc
operator|.
name|ramCache
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|this
operator|.
name|bc
operator|!=
literal|null
condition|)
name|this
operator|.
name|bc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test non-error case just works.    * @throws FileNotFoundException    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testNonErrorCase
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|bc
operator|.
name|cacheBlock
argument_list|(
name|this
operator|.
name|plainKey
argument_list|,
name|this
operator|.
name|plainCacheable
argument_list|)
expr_stmt|;
name|doDrainOfOneEntry
argument_list|(
name|this
operator|.
name|bc
argument_list|,
name|this
operator|.
name|wt
argument_list|,
name|this
operator|.
name|q
argument_list|)
expr_stmt|;
block|}
comment|/**    * Pass through a too big entry and ensure it is cleared from queues and ramCache.    * Manually run the WriterThread.    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testTooBigEntry
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Cacheable
name|tooBigCacheable
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Cacheable
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|tooBigCacheable
operator|.
name|getSerializedLength
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|this
operator|.
name|bc
operator|.
name|cacheBlock
argument_list|(
name|this
operator|.
name|plainKey
argument_list|,
name|tooBigCacheable
argument_list|)
expr_stmt|;
name|doDrainOfOneEntry
argument_list|(
name|this
operator|.
name|bc
argument_list|,
name|this
operator|.
name|wt
argument_list|,
name|this
operator|.
name|q
argument_list|)
expr_stmt|;
block|}
comment|/**    * Do IOE. Take the RAMQueueEntry that was on the queue, doctor it to throw exception, then    * put it back and process it.    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testIOE
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|bc
operator|.
name|cacheBlock
argument_list|(
name|this
operator|.
name|plainKey
argument_list|,
name|plainCacheable
argument_list|)
expr_stmt|;
name|RAMQueueEntry
name|rqe
init|=
name|q
operator|.
name|remove
argument_list|()
decl_stmt|;
name|RAMQueueEntry
name|spiedRqe
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|rqe
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"Mocked!"
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spiedRqe
argument_list|)
operator|.
name|writeToCache
argument_list|(
operator|(
name|IOEngine
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|BucketAllocator
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|UniqueIndexMap
argument_list|<
name|Integer
argument_list|>
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|LongAdder
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|q
operator|.
name|add
argument_list|(
name|spiedRqe
argument_list|)
expr_stmt|;
name|doDrainOfOneEntry
argument_list|(
name|bc
argument_list|,
name|wt
argument_list|,
name|q
argument_list|)
expr_stmt|;
comment|// Cache disabled when ioes w/o ever healing.
name|assertTrue
argument_list|(
operator|!
name|bc
operator|.
name|isCacheEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Do Cache full exception    * @throws IOException    * @throws InterruptedException    */
annotation|@
name|Test
argument_list|(
name|timeout
operator|=
literal|30000
argument_list|)
specifier|public
name|void
name|testCacheFullException
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|this
operator|.
name|bc
operator|.
name|cacheBlock
argument_list|(
name|this
operator|.
name|plainKey
argument_list|,
name|plainCacheable
argument_list|)
expr_stmt|;
name|RAMQueueEntry
name|rqe
init|=
name|q
operator|.
name|remove
argument_list|()
decl_stmt|;
name|RAMQueueEntry
name|spiedRqe
init|=
name|Mockito
operator|.
name|spy
argument_list|(
name|rqe
argument_list|)
decl_stmt|;
specifier|final
name|CacheFullException
name|cfe
init|=
operator|new
name|CacheFullException
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|BucketEntry
name|mockedBucketEntry
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|BucketEntry
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|doThrow
argument_list|(
name|cfe
argument_list|)
operator|.
name|doReturn
argument_list|(
name|mockedBucketEntry
argument_list|)
operator|.
name|when
argument_list|(
name|spiedRqe
argument_list|)
operator|.
name|writeToCache
argument_list|(
operator|(
name|IOEngine
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|BucketAllocator
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|UniqueIndexMap
argument_list|<
name|Integer
argument_list|>
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|,
operator|(
name|LongAdder
operator|)
name|Mockito
operator|.
name|any
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|q
operator|.
name|add
argument_list|(
name|spiedRqe
argument_list|)
expr_stmt|;
name|doDrainOfOneEntry
argument_list|(
name|bc
argument_list|,
name|wt
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|doDrainOfOneEntry
parameter_list|(
specifier|final
name|BucketCache
name|bc
parameter_list|,
specifier|final
name|BucketCache
operator|.
name|WriterThread
name|wt
parameter_list|,
specifier|final
name|BlockingQueue
argument_list|<
name|RAMQueueEntry
argument_list|>
name|q
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|List
argument_list|<
name|RAMQueueEntry
argument_list|>
name|rqes
init|=
name|BucketCache
operator|.
name|getRAMQueueEntries
argument_list|(
name|q
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|wt
operator|.
name|doDrain
argument_list|(
name|rqes
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bc
operator|.
name|ramCache
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|bc
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

