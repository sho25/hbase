begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|region
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|LoadCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionProcedureStore
extends|extends
name|RegionProcedureStoreTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionProcedureStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestRegionProcedureStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|void
name|verifyProcIdsOnRestart
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|procIds
parameter_list|)
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"expected: "
operator|+
name|procIds
argument_list|)
expr_stmt|;
name|LoadCounter
name|loader
init|=
operator|new
name|LoadCounter
argument_list|()
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|storeRestart
argument_list|(
name|store
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|procIds
operator|.
name|size
argument_list|()
argument_list|,
name|loader
operator|.
name|getLoadedCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loader
operator|.
name|getCorruptedCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoad
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|procIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Insert something in the log
name|RegionProcedureStoreTestProcedure
name|proc1
init|=
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
decl_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|proc1
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|insert
argument_list|(
name|proc1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|RegionProcedureStoreTestProcedure
name|proc2
init|=
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
decl_stmt|;
name|RegionProcedureStoreTestProcedure
name|proc3
init|=
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
decl_stmt|;
name|proc3
operator|.
name|setParent
argument_list|(
name|proc2
argument_list|)
expr_stmt|;
name|RegionProcedureStoreTestProcedure
name|proc4
init|=
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
decl_stmt|;
name|proc4
operator|.
name|setParent
argument_list|(
name|proc2
argument_list|)
expr_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|proc2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|proc3
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procIds
operator|.
name|add
argument_list|(
name|proc4
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|insert
argument_list|(
name|proc2
argument_list|,
operator|new
name|Procedure
index|[]
block|{
name|proc3
block|,
name|proc4
block|}
argument_list|)
expr_stmt|;
comment|// Verify that everything is there
name|verifyProcIdsOnRestart
argument_list|(
name|procIds
argument_list|)
expr_stmt|;
comment|// Update and delete something
name|proc1
operator|.
name|finish
argument_list|()
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|proc1
argument_list|)
expr_stmt|;
name|proc4
operator|.
name|finish
argument_list|()
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|proc4
argument_list|)
expr_stmt|;
name|store
operator|.
name|delete
argument_list|(
name|proc4
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|procIds
operator|.
name|remove
argument_list|(
name|proc4
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that everything is there
name|verifyProcIdsOnRestart
argument_list|(
name|procIds
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|RegionProcedureStoreTestProcedure
name|proc1
init|=
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
decl_stmt|;
name|store
operator|.
name|insert
argument_list|(
name|proc1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|RegionProcedureStoreTestProcedure
name|proc2
init|=
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
decl_stmt|;
name|store
operator|.
name|insert
argument_list|(
name|proc2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|RegionProcedureStoreTestProcedure
name|proc3
init|=
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
decl_stmt|;
name|store
operator|.
name|insert
argument_list|(
name|proc3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LoadCounter
name|loader
init|=
operator|new
name|LoadCounter
argument_list|()
decl_stmt|;
name|store
operator|.
name|load
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|proc3
operator|.
name|getProcId
argument_list|()
argument_list|,
name|loader
operator|.
name|getMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|loader
operator|.
name|getRunnableCount
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|delete
argument_list|(
name|proc3
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|delete
argument_list|(
name|proc2
operator|.
name|getProcId
argument_list|()
argument_list|)
expr_stmt|;
name|loader
operator|=
operator|new
name|LoadCounter
argument_list|()
expr_stmt|;
name|store
operator|.
name|load
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|proc3
operator|.
name|getProcId
argument_list|()
argument_list|,
name|loader
operator|.
name|getMaxProcId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loader
operator|.
name|getRunnableCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// the row should still be there
name|assertTrue
argument_list|(
name|store
operator|.
name|region
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|proc3
operator|.
name|getProcId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|getExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|store
operator|.
name|region
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|proc2
operator|.
name|getProcId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|getExists
argument_list|()
argument_list|)
expr_stmt|;
comment|// proc2 will be deleted after cleanup, but proc3 should still be there as it holds the max proc
comment|// id
name|store
operator|.
name|cleanup
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|store
operator|.
name|region
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|proc3
operator|.
name|getProcId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|getExists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|region
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|proc2
operator|.
name|getProcId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|getExists
argument_list|()
argument_list|)
expr_stmt|;
name|RegionProcedureStoreTestProcedure
name|proc4
init|=
operator|new
name|RegionProcedureStoreTestProcedure
argument_list|()
decl_stmt|;
name|store
operator|.
name|insert
argument_list|(
name|proc4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|store
operator|.
name|cleanup
argument_list|()
expr_stmt|;
comment|// proc3 should also be deleted as now proc4 holds the max proc id
name|assertFalse
argument_list|(
name|store
operator|.
name|region
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|proc3
operator|.
name|getProcId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setCheckExistenceOnly
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|getExists
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

