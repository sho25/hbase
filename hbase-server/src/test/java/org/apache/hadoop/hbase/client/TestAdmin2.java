begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MiniHBaseCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotDisabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotEnabledException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|UnknownRegionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|constraint
operator|.
name|ConstraintException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FutureUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|AbstractFSWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_comment
comment|/**  * Class to test HBaseAdmin.  * Spins up the minicluster once at test start and then takes it down afterward.  * Add any testing of HBaseAdmin functionality here.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAdmin2
extends|extends
name|TestAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAdmin2
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestAdmin2
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testCreateBadTables
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|msg
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|createTable
argument_list|(
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|e
parameter_list|)
block|{
name|msg
operator|=
name|e
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Unexcepted exception message "
operator|+
name|msg
argument_list|,
name|msg
operator|!=
literal|null
operator|&&
name|msg
operator|.
name|startsWith
argument_list|(
name|TableExistsException
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|msg
operator|.
name|contains
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now try and do concurrent creation with a bunch of threads.
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
name|tableDescriptor
init|=
operator|new
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|familyDescriptor
init|=
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|tableDescriptor
operator|.
name|setColumnFamily
argument_list|(
name|familyDescriptor
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|10
decl_stmt|;
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|count
index|]
decl_stmt|;
specifier|final
name|AtomicInteger
name|successes
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|AtomicInteger
name|failures
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Admin
name|localAdmin
init|=
name|ADMIN
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|localAdmin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
name|successes
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TableExistsException
name|e
parameter_list|)
block|{
name|failures
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed threaded create"
operator|+
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
while|while
condition|(
name|threads
index|[
name|i
index|]
operator|.
name|isAlive
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
comment|// All threads are now dead.  Count up how many tables were created and
comment|// how many failed w/ appropriate exception.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|successes
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|-
literal|1
argument_list|,
name|failures
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test for hadoop-1581 'HBASE: Unopenable tablename bug'.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testTableNameClash
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|name
init|=
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
name|tableDescriptor1
init|=
operator|new
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|+
literal|"SOMEUPPERCASE"
argument_list|)
argument_list|)
decl_stmt|;
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
name|tableDescriptor2
init|=
operator|new
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|tableDescriptor1
operator|.
name|setColumnFamily
argument_list|(
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|tableDescriptor2
operator|.
name|setColumnFamily
argument_list|(
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|tableDescriptor1
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|tableDescriptor2
argument_list|)
expr_stmt|;
comment|// Before fix, below would fail throwing a NoServerForRegionException.
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableDescriptor2
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/***    * HMaster.createTable used to be kind of synchronous call    * Thus creating of table with lots of regions can cause RPC timeout    * After the fix to make createTable truly async, RPC timeout shouldn't be an    * issue anymore    */
annotation|@
name|Test
specifier|public
name|void
name|testCreateTableRPCTimeOut
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|name
init|=
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|int
name|oldTimeout
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|HConstants
operator|.
name|DEFAULT_HBASE_RPC_TIMEOUT
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
literal|1500
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|expectedRegions
init|=
literal|100
decl_stmt|;
comment|// Use 80 bit numbers to make sure we aren't limited
name|byte
index|[]
name|startKey
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
decl_stmt|;
name|Admin
name|hbaseadmin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
name|tableDescriptor
init|=
operator|new
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|tableDescriptor
operator|.
name|setColumnFamily
argument_list|(
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|hbaseadmin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HBASE_RPC_TIMEOUT_KEY
argument_list|,
name|oldTimeout
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test read only tables    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testReadOnlyTable
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|name
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somedata"
argument_list|)
decl_stmt|;
comment|// This used to use an empty row... That must have been a bug
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Test that user table names can contain '-' and '.' so long as they do not    * start with same. HBASE-771    */
annotation|@
name|Test
specifier|public
name|void
name|testTableNames
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
index|[]
name|illegalNames
init|=
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"-bad"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|".bad"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|illegalName
range|:
name|illegalNames
control|)
block|{
try|try
block|{
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|illegalName
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Did not detect '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|illegalName
argument_list|)
operator|+
literal|"' as an illegal user table name"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
name|byte
index|[]
name|legalName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"g-oo.d"
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|legalName
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Legal user table name: '"
operator|+
name|Bytes
operator|.
name|toString
argument_list|(
name|legalName
argument_list|)
operator|+
literal|"' caused IllegalArgumentException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * For HADOOP-2579    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TableExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTableExistsExceptionWithATable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|name
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
block|}
comment|/**    * Can't disable a table if the table isn't in enabled state    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TableNotEnabledException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTableNotEnabledExceptionWithATable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|name
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**    * Can't enable a table if the table isn't in disabled state    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TableNotDisabledException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTableNotDisabledExceptionWithATable
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|name
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|t
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|name
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
init|)
block|{
name|ADMIN
operator|.
name|enableTable
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * For HADOOP-2579    */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|TableNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTableNotFoundExceptionWithoutAnyTables
parameter_list|()
throws|throws
name|IOException
block|{
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testTableNotFoundExceptionWithoutAnyTables"
argument_list|)
decl_stmt|;
try|try
init|(
name|Table
name|ht
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|ht
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"e"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShouldUnassignTheRegion
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|RegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|onlineRegions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|info
operator|=
name|regionInfo
expr_stmt|;
name|ADMIN
operator|.
name|unassign
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|isInList
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
decl_stmt|;
while|while
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
operator|)
operator|&&
operator|(
name|isInList
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|isInList
operator|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"The region should not be present in online regions list."
argument_list|,
name|isInList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionIfInvalidRegionNameIsPassed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|name
init|=
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
name|byte
index|[]
name|tableName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|RegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|onlineRegions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|info
operator|=
name|regionInfo
expr_stmt|;
try|try
block|{
name|ADMIN
operator|.
name|unassign
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"sample"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownRegionException
name|nsre
parameter_list|)
block|{
comment|// expected, ignore it
block|}
block|}
block|}
block|}
name|onlineRegions
operator|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The region should be present in online regions list."
argument_list|,
name|onlineRegions
operator|.
name|contains
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionThatFetchesTheHRIFromMeta
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|RegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|onlineRegions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaRegion
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TestHBACloseRegion2"
argument_list|)
condition|)
block|{
name|info
operator|=
name|regionInfo
expr_stmt|;
name|ADMIN
operator|.
name|unassign
argument_list|(
name|regionInfo
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|isInList
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
decl_stmt|;
while|while
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
operator|)
operator|&&
operator|(
name|isInList
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|isInList
operator|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"The region should not be present in online regions list."
argument_list|,
name|isInList
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Admin
name|createTable
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|TableDescriptorBuilder
name|tableDescriptorBuilder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|columnFamilyDescriptor
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|tableDescriptorBuilder
operator|.
name|setColumnFamily
argument_list|(
name|columnFamilyDescriptor
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptorBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|admin
return|;
block|}
specifier|private
name|void
name|createTableWithDefaultConf
parameter_list|(
name|byte
index|[]
name|TABLENAME
parameter_list|)
throws|throws
name|IOException
block|{
name|createTableWithDefaultConf
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createTableWithDefaultConf
parameter_list|(
name|TableName
name|TABLENAME
parameter_list|)
throws|throws
name|IOException
block|{
name|TableDescriptorBuilder
name|tableDescriptorBuilder
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|columnFamilyDescriptor
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|tableDescriptorBuilder
operator|.
name|setColumnFamily
argument_list|(
name|columnFamilyDescriptor
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|tableDescriptorBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * For HBASE-2556    */
annotation|@
name|Test
specifier|public
name|void
name|testGetTableRegions
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|expectedRegions
init|=
literal|10
decl_stmt|;
comment|// Use 80 bit numbers to make sure we aren't limited
name|byte
index|[]
name|startKey
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|byte
index|[]
name|endKey
init|=
block|{
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|,
literal|9
block|}
decl_stmt|;
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
name|tableDescriptor
init|=
operator|new
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|tableDescriptor
operator|.
name|setColumnFamily
argument_list|(
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|,
name|startKey
argument_list|,
name|endKey
argument_list|,
name|expectedRegions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|RegionInfos
init|=
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tried to create "
operator|+
name|expectedRegions
operator|+
literal|" regions "
operator|+
literal|"but only found "
operator|+
name|RegionInfos
operator|.
name|size
argument_list|()
argument_list|,
name|expectedRegions
argument_list|,
name|RegionInfos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveToPreviouslyAssignedRS
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|MiniHBaseCluster
name|cluster
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|cluster
operator|.
name|getMaster
argument_list|()
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Admin
name|localAdmin
init|=
name|createTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|tableRegions
init|=
name|localAdmin
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|tableRegions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|ServerName
name|server
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|localAdmin
operator|.
name|move
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Current region server and region server before move should be same."
argument_list|,
name|server
argument_list|,
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWALRollWriting
parameter_list|()
throws|throws
name|Exception
block|{
name|setUpforLogRolling
argument_list|()
expr_stmt|;
name|String
name|className
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|StringBuilder
name|v
init|=
operator|new
name|StringBuilder
argument_list|(
name|className
argument_list|)
decl_stmt|;
while|while
condition|(
name|v
operator|.
name|length
argument_list|()
operator|<
literal|1000
condition|)
block|{
name|v
operator|.
name|append
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|value
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|HRegionServer
name|regionServer
init|=
name|startAndWriteData
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"after writing there are "
operator|+
name|AbstractFSWALProvider
operator|.
name|getNumRolledLogFiles
argument_list|(
name|regionServer
operator|.
name|getWAL
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|+
literal|" log files"
argument_list|)
expr_stmt|;
comment|// flush all regions
for|for
control|(
name|HRegion
name|r
range|:
name|regionServer
operator|.
name|getOnlineRegionsLocalContext
argument_list|()
control|)
block|{
name|r
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ADMIN
operator|.
name|rollWALWriter
argument_list|(
name|regionServer
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|AbstractFSWALProvider
operator|.
name|getNumRolledLogFiles
argument_list|(
name|regionServer
operator|.
name|getWAL
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"after flushing all regions and rolling logs there are "
operator|+
name|count
operator|+
literal|" log files"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
literal|"actual count: "
operator|+
name|count
operator|)
argument_list|,
name|count
operator|<=
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setUpforLogRolling
parameter_list|()
block|{
comment|// Force a region split after every 768KB
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
name|HConstants
operator|.
name|HREGION_MAX_FILESIZE
argument_list|,
literal|768L
operator|*
literal|1024L
argument_list|)
expr_stmt|;
comment|// We roll the log after every 32 writes
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.maxlogentries"
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.logroll.errors.tolerated"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.rpc.timeout"
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// For less frequently updated regions flush after every 2 flushes
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.hregion.memstore.optionalflushcount"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// We flush the cache after every 8192 bytes
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|HREGION_MEMSTORE_FLUSH_SIZE
argument_list|,
literal|8192
argument_list|)
expr_stmt|;
comment|// Increase the amount of time between client retries
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setLong
argument_list|(
literal|"hbase.client.pause"
argument_list|,
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// Reduce thread wake frequency so that other threads can get
comment|// a chance to run.
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|THREAD_WAKE_FREQUENCY
argument_list|,
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|/**** configuration for testLogRollOnDatanodeDeath ****/
comment|// lower the namenode& datanode heartbeat so the namenode
comment|// quickly detects datanode failures
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.namenode.heartbeat.recheck-interval"
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.heartbeat.interval"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// the namenode might still try to choose the recently-dead datanode
comment|// for a pipeline, so try to a new pipeline multiple times
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"dfs.client.block.write.retries"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.hlog.tolerable.lowreplication"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
literal|"hbase.regionserver.hlog.lowreplication.rolllimit"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HRegionServer
name|startAndWriteData
parameter_list|(
name|TableName
name|tableName
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// When the hbase:meta table can be opened, the region servers are running
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Create the test table and open it
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
name|tableDescriptor
init|=
operator|new
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|tableDescriptor
operator|.
name|setColumnFamily
argument_list|(
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
argument_list|)
expr_stmt|;
name|ADMIN
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|HRegionServer
name|regionServer
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|256
condition|;
name|i
operator|++
control|)
block|{
comment|// 256 writes should cause 8 log rolls
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|String
operator|.
name|format
argument_list|(
literal|"%1$04d"
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|addColumn
argument_list|(
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
literal|null
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
name|put
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|32
operator|==
literal|0
condition|)
block|{
comment|// After every 32 writes sleep to let the log roller run
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// continue
block|}
block|}
block|}
name|table
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|regionServer
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisableCatalogTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ADMIN
operator|.
name|disableTable
argument_list|(
name|TableName
operator|.
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to throw ConstraintException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintException
name|e
parameter_list|)
block|{     }
comment|// Before the fix for HBASE-6146, the below table creation was failing as the hbase:meta table
comment|// actually getting disabled by the disableTable() call.
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
name|tableDescriptor
init|=
operator|new
name|TableDescriptorBuilder
operator|.
name|ModifyableTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnFamilyDescriptor
name|familyDescriptor
init|=
operator|new
name|ColumnFamilyDescriptorBuilder
operator|.
name|ModifyableColumnFamilyDescriptor
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf1"
argument_list|)
argument_list|)
decl_stmt|;
name|tableDescriptor
operator|.
name|setColumnFamily
argument_list|(
name|familyDescriptor
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsEnabledOrDisabledOnUnknownTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ADMIN
operator|.
name|isTableEnabled
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test should fail if isTableEnabled called on unknown table."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
try|try
block|{
name|ADMIN
operator|.
name|isTableDisabled
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test should fail if isTableDisabled called on unknown table."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBalancer
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|initialState
init|=
name|ADMIN
operator|.
name|isBalancerEnabled
argument_list|()
decl_stmt|;
comment|// Start the balancer, wait for it.
name|boolean
name|prevState
init|=
name|ADMIN
operator|.
name|balancerSwitch
argument_list|(
operator|!
name|initialState
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// The previous state should be the original state we observed
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be opposite of the original
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|ADMIN
operator|.
name|isBalancerEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset it back to what it was
name|prevState
operator|=
name|ADMIN
operator|.
name|balancerSwitch
argument_list|(
name|initialState
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// The previous state should be the opposite of the initial state
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be the original state again
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|ADMIN
operator|.
name|isBalancerEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRegionNormalizer
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|initialState
init|=
name|ADMIN
operator|.
name|isNormalizerEnabled
argument_list|()
decl_stmt|;
comment|// flip state
name|boolean
name|prevState
init|=
name|ADMIN
operator|.
name|normalizerSwitch
argument_list|(
operator|!
name|initialState
argument_list|)
decl_stmt|;
comment|// The previous state should be the original state we observed
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be opposite of the original
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|ADMIN
operator|.
name|isNormalizerEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset it back to what it was
name|prevState
operator|=
name|ADMIN
operator|.
name|normalizerSwitch
argument_list|(
name|initialState
argument_list|)
expr_stmt|;
comment|// The previous state should be the opposite of the initial state
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be the original state again
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|ADMIN
operator|.
name|isNormalizerEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbortProcedureFail
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|randomGenerator
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|long
name|procId
init|=
name|randomGenerator
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|boolean
name|abortResult
init|=
name|ADMIN
operator|.
name|abortProcedure
argument_list|(
name|procId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|abortResult
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProcedures
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|procList
init|=
name|ADMIN
operator|.
name|getProcedures
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|procList
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetLocks
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|lockList
init|=
name|ADMIN
operator|.
name|getLocks
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|lockList
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDecommissionRegionServers
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ServerName
argument_list|>
name|decommissionedRegionServers
init|=
name|ADMIN
operator|.
name|listDecommissionedRegionServers
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|decommissionedRegionServers
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
name|clusterRegionServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ADMIN
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|clusterRegionServers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|ServerName
argument_list|,
name|List
argument_list|<
name|RegionInfo
argument_list|>
argument_list|>
name|serversToDecommssion
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Get a server that has meta online. We will decommission two of the servers,
comment|// leaving one online.
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|clusterRegionServers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regionsOnServer
init|=
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|clusterRegionServers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|clusterRegionServers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|p
lambda|->
name|p
operator|.
name|isMetaRegion
argument_list|()
argument_list|)
condition|)
block|{
name|serversToDecommssion
operator|.
name|put
argument_list|(
name|clusterRegionServers
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|regionsOnServer
argument_list|)
block|;
break|break;
block|}
block|}
name|clusterRegionServers
operator|.
name|remove
parameter_list|(
name|i
parameter_list|)
constructor_decl|;
comment|// Get another server to decommission.
name|serversToDecommssion
operator|.
name|put
argument_list|(
name|clusterRegionServers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|clusterRegionServers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|remainingServer
init|=
name|clusterRegionServers
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Decommission
name|ADMIN
operator|.
name|decommissionRegionServers
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ServerName
argument_list|>
argument_list|(
name|serversToDecommssion
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|ADMIN
operator|.
name|listDecommissionedRegionServers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify the regions have been off the decommissioned servers, all on the one
comment|// remaining server.
for|for
control|(
name|ServerName
name|server
range|:
name|serversToDecommssion
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|RegionInfo
name|region
range|:
name|serversToDecommssion
operator|.
name|get
argument_list|(
name|server
argument_list|)
control|)
block|{
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|region
argument_list|,
name|remainingServer
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Recommission and load the regions.
for|for
control|(
name|ServerName
name|server
range|:
name|serversToDecommssion
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|encodedRegionNames
init|=
name|serversToDecommssion
operator|.
name|get
argument_list|(
name|server
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|region
lambda|->
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|ADMIN
operator|.
name|recommissionRegionServer
argument_list|(
name|server
argument_list|,
name|encodedRegionNames
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ADMIN
operator|.
name|listDecommissionedRegionServers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify the regions have been moved to the recommissioned servers
for|for
control|(
name|ServerName
name|server
range|:
name|serversToDecommssion
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|RegionInfo
name|region
range|:
name|serversToDecommssion
operator|.
name|get
argument_list|(
name|server
argument_list|)
control|)
block|{
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|region
argument_list|,
name|server
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**    * TestCase for HBASE-21355    */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testGetRegionInfo
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ADMIN
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegion
argument_list|>
name|regions
init|=
name|rs
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HRegion
name|region
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|HStore
name|store
init|=
name|region
operator|.
name|getStore
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|expectedStoreFilesSize
init|=
name|store
operator|.
name|getStorefilesSize
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|store
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedStoreFilesSize
argument_list|,
name|store
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|RegionInfo
name|ri
init|=
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|TEST_UTIL
operator|.
name|getAsyncConnection
argument_list|()
operator|.
name|getRegionServerAdmin
argument_list|(
name|rs
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|getRegionInfo
argument_list|(
name|RequestConverter
operator|.
name|buildGetRegionInfoRequest
argument_list|(
name|regionName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|region
operator|.
name|getRegionInfo
argument_list|()
argument_list|,
name|ri
argument_list|)
expr_stmt|;
comment|// Make sure that the store size is still the actual file system's store size.
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedStoreFilesSize
argument_list|,
name|store
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test querying using the encoded name only. When encoded name passed,
comment|// and the target server is the Master, we return the full region name.
comment|// Convenience.
name|ServerName
name|sn
init|=
literal|null
decl_stmt|;
try|try
init|(
name|Admin
name|admin
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|sn
operator|=
name|admin
operator|.
name|getMaster
argument_list|()
expr_stmt|;
block|}
name|RegionInfo
name|ri
init|=
name|region
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|testGetWithRegionName
argument_list|(
name|sn
argument_list|,
name|ri
argument_list|,
name|ri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|testGetWithRegionName
argument_list|(
name|sn
argument_list|,
name|ri
argument_list|,
name|ri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Try querying meta encoded name.
name|ri
operator|=
name|RegionInfoBuilder
operator|.
name|FIRST_META_REGIONINFO
expr_stmt|;
name|testGetWithRegionName
argument_list|(
name|sn
argument_list|,
name|ri
argument_list|,
name|ri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
expr_stmt|;
name|testGetWithRegionName
argument_list|(
name|sn
argument_list|,
name|ri
argument_list|,
name|ri
operator|.
name|getRegionName
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Do get of RegionInfo from Master using encoded region name.    */
end_comment

begin_function
specifier|private
name|void
name|testGetWithRegionName
parameter_list|(
name|ServerName
name|sn
parameter_list|,
name|RegionInfo
name|inputRI
parameter_list|,
name|byte
index|[]
name|regionName
parameter_list|)
throws|throws
name|IOException
block|{
name|RegionInfo
name|ri
init|=
name|ProtobufUtil
operator|.
name|toRegionInfo
argument_list|(
name|FutureUtils
operator|.
name|get
argument_list|(
name|TEST_UTIL
operator|.
name|getAsyncConnection
argument_list|()
operator|.
name|getRegionServerAdmin
argument_list|(
name|sn
argument_list|)
operator|.
name|getRegionInfo
argument_list|(
name|ProtobufUtil
operator|.
name|getGetRegionInfoRequest
argument_list|(
name|regionName
argument_list|)
argument_list|)
argument_list|)
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|inputRI
argument_list|,
name|ri
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testTableSplitFollowedByModify
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
comment|// get the original table region count
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|originalCount
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|originalCount
argument_list|)
expr_stmt|;
comment|// split the table and wait until region count increases
name|ADMIN
operator|.
name|split
argument_list|(
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|>
name|originalCount
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// do some table modification
name|TableDescriptor
name|tableDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setMaxFileSize
argument_list|(
literal|11111111
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|modifyTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11111111
argument_list|,
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|getMaxFileSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testTableMergeFollowedByModify
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|createTable
argument_list|(
name|tableName
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
block|}
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// assert we have at least 2 regions in the table
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|int
name|originalCount
init|=
name|regions
operator|.
name|size
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|originalCount
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|byte
index|[]
name|nameOfRegionA
init|=
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|nameOfRegionB
init|=
name|regions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEncodedNameAsBytes
argument_list|()
decl_stmt|;
comment|// merge the table regions and wait until region count decreases
name|ADMIN
operator|.
name|mergeRegionsAsync
argument_list|(
name|nameOfRegionA
argument_list|,
name|nameOfRegionB
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ADMIN
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
operator|.
name|size
argument_list|()
operator|<
name|originalCount
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// do some table modification
name|TableDescriptor
name|tableDesc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
argument_list|)
operator|.
name|setMaxFileSize
argument_list|(
literal|11111111
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|ADMIN
operator|.
name|modifyTable
argument_list|(
name|tableDesc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11111111
argument_list|,
name|ADMIN
operator|.
name|getDescriptor
argument_list|(
name|tableName
argument_list|)
operator|.
name|getMaxFileSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotCleanupAsync
parameter_list|()
throws|throws
name|Exception
block|{
name|testSnapshotCleanup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotCleanupSync
parameter_list|()
throws|throws
name|Exception
block|{
name|testSnapshotCleanup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|testSnapshotCleanup
parameter_list|(
specifier|final
name|boolean
name|synchronous
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|initialState
init|=
name|ADMIN
operator|.
name|isSnapshotCleanupEnabled
argument_list|()
decl_stmt|;
comment|// Switch the snapshot auto cleanup state to opposite to initial state
name|boolean
name|prevState
init|=
name|ADMIN
operator|.
name|snapshotCleanupSwitch
argument_list|(
operator|!
name|initialState
argument_list|,
name|synchronous
argument_list|)
decl_stmt|;
comment|// The previous state should be the original state we observed
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be opposite of the initial state
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|ADMIN
operator|.
name|isSnapshotCleanupEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// Reset the state back to what it was initially
name|prevState
operator|=
name|ADMIN
operator|.
name|snapshotCleanupSwitch
argument_list|(
name|initialState
argument_list|,
name|synchronous
argument_list|)
expr_stmt|;
comment|// The previous state should be the opposite of the initial state
name|assertEquals
argument_list|(
operator|!
name|initialState
argument_list|,
name|prevState
argument_list|)
expr_stmt|;
comment|// Current state should be the original state again
name|assertEquals
argument_list|(
name|initialState
argument_list|,
name|ADMIN
operator|.
name|isSnapshotCleanupEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testSlowLogResponses
parameter_list|()
throws|throws
name|Exception
block|{
comment|// get all live server names
name|Collection
argument_list|<
name|ServerName
argument_list|>
name|serverNames
init|=
name|ADMIN
operator|.
name|getRegionServers
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ServerName
argument_list|>
name|serverNameList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|serverNames
argument_list|)
decl_stmt|;
comment|// clean up slowlog responses maintained in memory by RegionServers
name|List
argument_list|<
name|Boolean
argument_list|>
name|areSlowLogsCleared
init|=
name|ADMIN
operator|.
name|clearSlowLogResponses
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|serverNameList
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|countFailedClearSlowResponse
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Boolean
name|isSlowLogCleared
range|:
name|areSlowLogsCleared
control|)
block|{
if|if
condition|(
operator|!
name|isSlowLogCleared
condition|)
block|{
operator|++
name|countFailedClearSlowResponse
expr_stmt|;
block|}
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
name|countFailedClearSlowResponse
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|SlowLogQueryFilter
name|slowLogQueryFilter
init|=
operator|new
name|SlowLogQueryFilter
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SlowLogRecord
argument_list|>
name|slowLogRecords
init|=
name|ADMIN
operator|.
name|getSlowLogResponses
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|serverNames
argument_list|)
argument_list|,
name|slowLogQueryFilter
argument_list|)
decl_stmt|;
comment|// after cleanup of slowlog responses, total count of slowlog payloads should be 0
name|Assert
operator|.
name|assertEquals
argument_list|(
name|slowLogRecords
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

