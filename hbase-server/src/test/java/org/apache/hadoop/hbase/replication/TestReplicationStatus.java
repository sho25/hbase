begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterMetrics
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ClusterStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerLoad
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestReplicationStatus
extends|extends
name|TestReplicationBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestReplicationStatus
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestReplicationStatus
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PEER_ID
init|=
literal|"2"
decl_stmt|;
comment|/**    * Test for HBASE-9531    * put a few rows into htable1, which should be replicated to htable2    * create a ClusterStatus instance 'status' from HBaseAdmin    * test : status.getLoad(server).getReplicationLoadSourceList()    * test : status.getLoad(server).getReplicationLoadSink()    * * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testReplicationStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"testReplicationStatus"
argument_list|)
expr_stmt|;
name|utility2
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility2
operator|.
name|startMiniHBaseCluster
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
try|try
init|(
name|Admin
name|hbaseAdmin
init|=
name|utility1
operator|.
name|getConnection
argument_list|()
operator|.
name|getAdmin
argument_list|()
init|)
block|{
comment|// disable peer
name|admin
operator|.
name|disablePeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|qualName
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
name|Put
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|qualName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|ClusterStatus
name|status
init|=
operator|new
name|ClusterStatus
argument_list|(
name|hbaseAdmin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|thread
range|:
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServerThreads
argument_list|()
control|)
block|{
name|ServerName
name|server
init|=
name|thread
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|ServerLoad
name|sl
init|=
name|status
operator|.
name|getLoad
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|rLoadSourceList
init|=
name|sl
operator|.
name|getReplicationLoadSourceList
argument_list|()
decl_stmt|;
name|ReplicationLoadSink
name|rLoadSink
init|=
name|sl
operator|.
name|getReplicationLoadSink
argument_list|()
decl_stmt|;
comment|// check SourceList only has one entry, beacuse only has one peer
name|assertTrue
argument_list|(
literal|"failed to get ReplicationLoadSourceList"
argument_list|,
operator|(
name|rLoadSourceList
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PEER_ID
argument_list|,
name|rLoadSourceList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPeerID
argument_list|()
argument_list|)
expr_stmt|;
comment|// check Sink exist only as it is difficult to verify the value on the fly
name|assertTrue
argument_list|(
literal|"failed to get ReplicationLoadSink.AgeOfLastShippedOp "
argument_list|,
operator|(
name|rLoadSink
operator|.
name|getAgeOfLastAppliedOp
argument_list|()
operator|>=
literal|0
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"failed to get ReplicationLoadSink.TimeStampsOfLastAppliedOp "
argument_list|,
operator|(
name|rLoadSink
operator|.
name|getTimestampsOfLastAppliedOp
argument_list|()
operator|>=
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
comment|// Stop rs1, then the queue of rs1 will be transfered to rs0
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|1
argument_list|)
operator|.
name|stop
argument_list|(
literal|"Stop RegionServer"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|status
operator|=
operator|new
name|ClusterStatus
argument_list|(
name|hbaseAdmin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ServerName
name|server
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|ServerLoad
name|sl
init|=
name|status
operator|.
name|getLoad
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|rLoadSourceList
init|=
name|sl
operator|.
name|getReplicationLoadSourceList
argument_list|()
decl_stmt|;
comment|// check SourceList still only has one entry
name|assertTrue
argument_list|(
literal|"failed to get ReplicationLoadSourceList"
argument_list|,
operator|(
name|rLoadSourceList
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PEER_ID
argument_list|,
name|rLoadSourceList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getPeerID
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|admin
operator|.
name|enablePeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|1
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|//we need to perform initialisations from TestReplicationBase.setUpBeforeClass() on each
comment|//test here, so we override BeforeClass to do nothing and call
comment|// TestReplicationBase.setUpBeforeClass() from setup method
name|TestReplicationBase
operator|.
name|configureClusters
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUpBase
parameter_list|()
throws|throws
name|Exception
block|{
name|TestReplicationBase
operator|.
name|startClusters
argument_list|()
expr_stmt|;
name|super
operator|.
name|setUpBase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|Override
specifier|public
name|void
name|tearDownBase
parameter_list|()
throws|throws
name|Exception
block|{
name|utility2
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
block|{
comment|//We need to override it here to avoid issues when trying to execute super class teardown
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicationStatusSourceStartedTargetStoppedNoOps
parameter_list|()
throws|throws
name|Exception
block|{
name|utility2
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|startMiniHBaseCluster
argument_list|()
expr_stmt|;
name|Admin
name|hbaseAdmin
init|=
name|utility1
operator|.
name|getConnection
argument_list|()
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|ClusterStatus
name|status
init|=
operator|new
name|ClusterStatus
argument_list|(
name|hbaseAdmin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|loadSources
init|=
name|status
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
operator|.
name|getReplicationLoadSourceList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadSources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationLoadSource
name|loadSource
init|=
name|loadSources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|loadSource
operator|.
name|hasEditsSinceRestart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loadSource
operator|.
name|getTimestampOfLastShippedOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loadSource
operator|.
name|getReplicationLag
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loadSource
operator|.
name|isRecovered
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicationStatusSourceStartedTargetStoppedNewOp
parameter_list|()
throws|throws
name|Exception
block|{
name|utility2
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|startMiniHBaseCluster
argument_list|()
expr_stmt|;
name|Admin
name|hbaseAdmin
init|=
name|utility1
operator|.
name|getConnection
argument_list|()
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
comment|//add some values to source cluster
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|ServerName
name|serverName
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|ClusterStatus
name|status
init|=
operator|new
name|ClusterStatus
argument_list|(
name|hbaseAdmin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|loadSources
init|=
name|status
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
operator|.
name|getReplicationLoadSourceList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadSources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationLoadSource
name|loadSource
init|=
name|loadSources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|loadSource
operator|.
name|hasEditsSinceRestart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loadSource
operator|.
name|getTimestampOfLastShippedOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loadSource
operator|.
name|getReplicationLag
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|loadSource
operator|.
name|isRecovered
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicationStatusSourceStartedTargetStoppedWithRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|utility2
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|startMiniHBaseCluster
argument_list|()
expr_stmt|;
comment|//add some values to cluster 1
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|utility1
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|startMiniHBaseCluster
argument_list|()
expr_stmt|;
name|Admin
name|hbaseAdmin
init|=
name|utility1
operator|.
name|getConnection
argument_list|()
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|ClusterStatus
name|status
init|=
operator|new
name|ClusterStatus
argument_list|(
name|hbaseAdmin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|loadSources
init|=
name|status
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
operator|.
name|getReplicationLoadSourceList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loadSources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundRecovery
init|=
literal|false
decl_stmt|;
name|boolean
name|foundNormal
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ReplicationLoadSource
name|loadSource
range|:
name|loadSources
control|)
block|{
if|if
condition|(
name|loadSource
operator|.
name|isRecovered
argument_list|()
condition|)
block|{
name|foundRecovery
operator|=
literal|true
expr_stmt|;
name|assertTrue
argument_list|(
name|loadSource
operator|.
name|hasEditsSinceRestart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loadSource
operator|.
name|getTimestampOfLastShippedOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loadSource
operator|.
name|getReplicationLag
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|foundNormal
operator|=
literal|true
expr_stmt|;
name|assertFalse
argument_list|(
name|loadSource
operator|.
name|hasEditsSinceRestart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loadSource
operator|.
name|getTimestampOfLastShippedOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loadSource
operator|.
name|getReplicationLag
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"No normal queue found."
argument_list|,
name|foundNormal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No recovery queue found."
argument_list|,
name|foundRecovery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicationStatusBothNormalAndRecoveryLagging
parameter_list|()
throws|throws
name|Exception
block|{
name|utility2
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|startMiniHBaseCluster
argument_list|()
expr_stmt|;
comment|//add some values to cluster 1
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|utility1
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|startMiniHBaseCluster
argument_list|()
expr_stmt|;
name|Admin
name|hbaseAdmin
init|=
name|utility1
operator|.
name|getConnection
argument_list|()
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
comment|//add more values to cluster 1, these should cause normal queue to lag
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|ClusterStatus
name|status
init|=
operator|new
name|ClusterStatus
argument_list|(
name|hbaseAdmin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|loadSources
init|=
name|status
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
operator|.
name|getReplicationLoadSourceList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|loadSources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|foundRecovery
init|=
literal|false
decl_stmt|;
name|boolean
name|foundNormal
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ReplicationLoadSource
name|loadSource
range|:
name|loadSources
control|)
block|{
if|if
condition|(
name|loadSource
operator|.
name|isRecovered
argument_list|()
condition|)
block|{
name|foundRecovery
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|foundNormal
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|loadSource
operator|.
name|hasEditsSinceRestart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loadSource
operator|.
name|getTimestampOfLastShippedOp
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loadSource
operator|.
name|getReplicationLag
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"No normal queue found."
argument_list|,
name|foundNormal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"No recovery queue found."
argument_list|,
name|foundRecovery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReplicationStatusAfterLagging
parameter_list|()
throws|throws
name|Exception
block|{
name|utility2
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|utility1
operator|.
name|startMiniHBaseCluster
argument_list|()
expr_stmt|;
comment|//add some values to cluster 1
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NB_ROWS_IN_BATCH
condition|;
name|i
operator|++
control|)
block|{
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|addColumn
argument_list|(
name|famName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|htable1
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|utility2
operator|.
name|startMiniHBaseCluster
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
try|try
init|(
name|Admin
name|hbaseAdmin
init|=
name|utility1
operator|.
name|getConnection
argument_list|()
operator|.
name|getAdmin
argument_list|()
init|)
block|{
name|ServerName
name|serverName
init|=
name|utility1
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegionServer
argument_list|(
literal|0
argument_list|)
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|ClusterStatus
name|status
init|=
operator|new
name|ClusterStatus
argument_list|(
name|hbaseAdmin
operator|.
name|getClusterMetrics
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Option
operator|.
name|LIVE_SERVERS
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ReplicationLoadSource
argument_list|>
name|loadSources
init|=
name|status
operator|.
name|getLiveServerMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|serverName
argument_list|)
operator|.
name|getReplicationLoadSourceList
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|loadSources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ReplicationLoadSource
name|loadSource
init|=
name|loadSources
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|loadSource
operator|.
name|hasEditsSinceRestart
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|loadSource
operator|.
name|getTimestampOfLastShippedOp
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loadSource
operator|.
name|getReplicationLag
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|utility2
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

