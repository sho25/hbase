begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|migration
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FsShell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|FileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|HFileLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileV1Detector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZKUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ToolRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_comment
comment|/**  * Upgrade to 0.96 involves detecting HFileV1 in existing cluster, updating namespace and  * updating znodes. This class tests for HFileV1 detection and upgrading znodes.  * Uprading namespace is tested in {@link TestNamespaceUpgrade}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|MediumTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestUpgradeTo96
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestUpgradeTo96
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|/**    * underlying file system instance    */
specifier|private
specifier|static
name|FileSystem
name|fs
decl_stmt|;
comment|/**    * hbase root dir    */
specifier|private
specifier|static
name|Path
name|hbaseRootDir
decl_stmt|;
specifier|private
specifier|static
name|ZooKeeperWatcher
name|zkw
decl_stmt|;
comment|/**    * replication peer znode (/hbase/replication/peers)    */
specifier|private
specifier|static
name|String
name|replicationPeerZnode
decl_stmt|;
comment|/**    * znode of a table    */
specifier|private
specifier|static
name|String
name|tableAZnode
decl_stmt|;
specifier|private
specifier|static
name|ReplicationPeer
name|peer1
decl_stmt|;
comment|/**    * znode for replication peer1 (/hbase/replication/peers/1)    */
specifier|private
specifier|static
name|String
name|peer1Znode
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Start up the mini cluster on top of an 0.94 root.dir that has data from
comment|// a 0.94 hbase run and see if we can migrate to 0.96
name|TEST_UTIL
operator|.
name|startMiniZKCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniDFSCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hbaseRootDir
operator|=
name|TEST_UTIL
operator|.
name|getDefaultRootDirPath
argument_list|()
expr_stmt|;
name|fs
operator|=
name|FileSystem
operator|.
name|get
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|hbaseRootDir
argument_list|)
expr_stmt|;
name|zkw
operator|=
name|TEST_UTIL
operator|.
name|getZooKeeperWatcher
argument_list|()
expr_stmt|;
name|Path
name|testdir
init|=
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"TestUpgradeTo96"
argument_list|)
decl_stmt|;
comment|// get the untar 0.94 file structure
name|set94FSLayout
argument_list|(
name|testdir
argument_list|)
expr_stmt|;
name|setUp94Znodes
argument_list|()
expr_stmt|;
block|}
comment|/**    * Lays out 0.94 file system layout using {@link TestNamespaceUpgrade} apis.    * @param testdir    * @throws IOException    * @throws Exception    */
specifier|private
specifier|static
name|void
name|set94FSLayout
parameter_list|(
name|Path
name|testdir
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|File
name|untar
init|=
name|TestNamespaceUpgrade
operator|.
name|untar
argument_list|(
operator|new
name|File
argument_list|(
name|testdir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|hbaseRootDir
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
comment|// mkdir at first
name|fs
operator|.
name|mkdirs
argument_list|(
name|hbaseRootDir
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FsShell
name|shell
init|=
operator|new
name|FsShell
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-put"
block|,
name|untar
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|hbaseRootDir
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
comment|// See whats in minihdfs.
name|shell
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-lsr"
block|,
literal|"/"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Sets znodes used in 0.94 version. Only table and replication znodes will be upgraded to PB,    * others would be deleted.    * @throws KeeperException    */
specifier|private
specifier|static
name|void
name|setUp94Znodes
parameter_list|()
throws|throws
name|IOException
throws|,
name|KeeperException
block|{
comment|// add some old znodes, which would be deleted after upgrade.
name|String
name|rootRegionServerZnode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|baseZNode
argument_list|,
literal|"root-region-server"
argument_list|)
decl_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
name|rootRegionServerZnode
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
name|zkw
operator|.
name|backupMasterAddressesZNode
argument_list|)
expr_stmt|;
comment|// add table znode, data of its children would be protobuffized
name|tableAZnode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|tableZNode
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
name|tableAZnode
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|ENABLED
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// add replication znodes, data of its children would be protobuffized
name|String
name|replicationZnode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|baseZNode
argument_list|,
literal|"replication"
argument_list|)
decl_stmt|;
name|replicationPeerZnode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|replicationZnode
argument_list|,
literal|"peers"
argument_list|)
expr_stmt|;
name|peer1Znode
operator|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|replicationPeerZnode
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|peer1
operator|=
name|ReplicationPeer
operator|.
name|newBuilder
argument_list|()
operator|.
name|setClusterkey
argument_list|(
literal|"abc:123:/hbase"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|ZKUtil
operator|.
name|createWithParents
argument_list|(
name|zkw
argument_list|,
name|peer1Znode
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|peer1
operator|.
name|getClusterkey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests a 0.94 filesystem for any HFileV1.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testHFileV1Detector
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|HFileV1Detector
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a corrupt file, and run HFileV1 detector tool    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testHFileV1DetectorWithCorruptFiles
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add a corrupt file.
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|hbaseRootDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|regionsDir
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|tablePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|regionsDir
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"No Regions found for table "
operator|+
literal|"foo"
argument_list|)
throw|;
name|Path
name|columnFamilyDir
init|=
literal|null
decl_stmt|;
name|Path
name|targetRegion
init|=
literal|null
decl_stmt|;
for|for
control|(
name|FileStatus
name|s
range|:
name|regionsDir
control|)
block|{
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|s
operator|.
name|getPath
argument_list|()
argument_list|,
name|HRegionFileSystem
operator|.
name|REGION_INFO_FILE
argument_list|)
argument_list|)
condition|)
block|{
name|targetRegion
operator|=
name|s
operator|.
name|getPath
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|FileStatus
index|[]
name|cfs
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|targetRegion
argument_list|)
decl_stmt|;
for|for
control|(
name|FileStatus
name|f
range|:
name|cfs
control|)
block|{
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|columnFamilyDir
operator|=
name|f
operator|.
name|getPath
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"target columnFamilyDir: "
operator|+
name|columnFamilyDir
argument_list|)
expr_stmt|;
comment|// now insert a corrupt file in the columnfamily.
name|Path
name|corruptFile
init|=
operator|new
name|Path
argument_list|(
name|columnFamilyDir
argument_list|,
literal|"corrupt_file"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fs
operator|.
name|createNewFile
argument_list|(
name|corruptFile
argument_list|)
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create corrupt file: "
operator|+
name|corruptFile
argument_list|)
throw|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|HFileV1Detector
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove the corrupt file
name|FileSystem
operator|.
name|get
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|delete
argument_list|(
name|corruptFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHFileLink
parameter_list|()
throws|throws
name|Exception
block|{
comment|// pass a link, and verify that correct paths are returned.
name|Path
name|rootDir
init|=
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|aFileLink
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"table/2086db948c48/cf/table=21212abcdc33-0906db948c48"
argument_list|)
decl_stmt|;
name|Path
name|preNamespaceTablePath
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|"table/21212abcdc33/cf/0906db948c48"
argument_list|)
decl_stmt|;
name|Path
name|preNamespaceArchivePath
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|".archive/table/21212abcdc33/cf/0906db948c48"
argument_list|)
decl_stmt|;
name|Path
name|preNamespaceTempPath
init|=
operator|new
name|Path
argument_list|(
name|rootDir
argument_list|,
literal|".tmp/table/21212abcdc33/cf/0906db948c48"
argument_list|)
decl_stmt|;
name|boolean
name|preNSTablePathExists
init|=
literal|false
decl_stmt|;
name|boolean
name|preNSArchivePathExists
init|=
literal|false
decl_stmt|;
name|boolean
name|preNSTempPathExists
init|=
literal|false
decl_stmt|;
name|assertTrue
argument_list|(
name|HFileLink
operator|.
name|isHFileLink
argument_list|(
name|aFileLink
argument_list|)
argument_list|)
expr_stmt|;
name|HFileLink
name|hFileLink
init|=
operator|new
name|HFileLink
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|aFileLink
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hFileLink
operator|.
name|getArchivePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|rootDir
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HFileV1Detector
name|t
init|=
operator|new
name|HFileV1Detector
argument_list|()
decl_stmt|;
name|t
operator|.
name|setConf
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|FileLink
name|fileLink
init|=
name|t
operator|.
name|getFileLinkWithPreNSPath
argument_list|(
name|aFileLink
argument_list|)
decl_stmt|;
comment|//assert it has 6 paths (2 NS, 2 Pre NS, and 2 .tmp)  to look.
name|assertTrue
argument_list|(
name|fileLink
operator|.
name|getLocations
argument_list|()
operator|.
name|length
operator|==
literal|6
argument_list|)
expr_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|fileLink
operator|.
name|getLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|preNamespaceArchivePath
argument_list|)
condition|)
name|preNSArchivePathExists
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|preNamespaceTablePath
argument_list|)
condition|)
name|preNSTablePathExists
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|preNamespaceTempPath
argument_list|)
condition|)
name|preNSTempPathExists
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|preNSArchivePathExists
operator|&
name|preNSTablePathExists
operator|&
name|preNSTempPathExists
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testADirForHFileV1
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|tablePath
init|=
operator|new
name|Path
argument_list|(
name|hbaseRootDir
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testADirForHFileV1: "
operator|+
name|tablePath
operator|.
name|makeQualified
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Passed: "
operator|+
name|hbaseRootDir
operator|+
literal|"/foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ToolRunner
operator|.
name|run
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|HFileV1Detector
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-p"
operator|+
literal|"foo"
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testZnodeMigration
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rootRSZnode
init|=
name|ZKUtil
operator|.
name|joinZNode
argument_list|(
name|zkw
operator|.
name|baseZNode
argument_list|,
literal|"root-region-server"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|rootRSZnode
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|ToolRunner
operator|.
name|run
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|UpgradeTo96
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-execute"
block|}
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|ZKUtil
operator|.
name|checkExists
argument_list|(
name|zkw
argument_list|,
name|rootRSZnode
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|tableAZnode
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|checkTableState
argument_list|(
name|data
argument_list|,
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|State
operator|.
name|ENABLED
argument_list|)
expr_stmt|;
comment|// ensure replication znodes are there, and protobuffed.
name|data
operator|=
name|ZKUtil
operator|.
name|getData
argument_list|(
name|zkw
argument_list|,
name|peer1Znode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ProtobufUtil
operator|.
name|isPBMagicPrefix
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|checkReplicationPeerData
argument_list|(
name|data
argument_list|,
name|peer1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkTableState
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|State
name|expectedState
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|Table
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|int
name|magicLen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|Table
name|t
init|=
name|builder
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|magicLen
argument_list|,
name|data
operator|.
name|length
operator|-
name|magicLen
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getState
argument_list|()
operator|==
name|expectedState
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkReplicationPeerData
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|ReplicationPeer
name|peer
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|int
name|magicLen
init|=
name|ProtobufUtil
operator|.
name|lengthOfPBMagic
argument_list|()
decl_stmt|;
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
operator|.
name|Builder
name|builder
init|=
name|ZooKeeperProtos
operator|.
name|ReplicationPeer
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|builder
operator|.
name|mergeFrom
argument_list|(
name|data
argument_list|,
name|magicLen
argument_list|,
name|data
operator|.
name|length
operator|-
name|magicLen
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|getClusterkey
argument_list|()
argument_list|,
name|peer
operator|.
name|getClusterkey
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniHBaseCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniDFSCluster
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|shutdownMiniZKCluster
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

