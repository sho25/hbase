begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|store
operator|.
name|region
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestRegionProcedureStoreFlush
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestRegionProcedureStoreFlush
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|HRegion
name|region
decl_stmt|;
specifier|private
name|RegionFlusherAndCompactor
name|flusher
decl_stmt|;
specifier|private
name|AtomicInteger
name|flushCalled
decl_stmt|;
specifier|private
name|AtomicLong
name|memstoreHeapSize
decl_stmt|;
specifier|private
name|AtomicLong
name|memstoreOffHeapSize
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|region
operator|=
name|mock
argument_list|(
name|HRegion
operator|.
name|class
argument_list|)
expr_stmt|;
name|HStore
name|store
init|=
name|mock
argument_list|(
name|HStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getStorefilesCount
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|region
operator|.
name|getStores
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|store
argument_list|)
argument_list|)
expr_stmt|;
name|flushCalled
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|memstoreHeapSize
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|memstoreOffHeapSize
operator|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|region
operator|.
name|getMemStoreHeapSize
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|memstoreHeapSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|region
operator|.
name|getMemStoreOffHeapSize
argument_list|()
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
name|memstoreOffHeapSize
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|region
operator|.
name|flush
argument_list|(
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|invocation
lambda|->
block|{
name|assertTrue
argument_list|(
name|invocation
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|memstoreHeapSize
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|memstoreOffHeapSize
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|flushCalled
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|flusher
operator|!=
literal|null
condition|)
block|{
name|flusher
operator|.
name|close
argument_list|()
expr_stmt|;
name|flusher
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initFlusher
parameter_list|()
block|{
name|flusher
operator|=
operator|new
name|RegionFlusherAndCompactor
argument_list|(
name|conf
argument_list|,
operator|new
name|Abortable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{       }
block|}
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTriggerFlushBySize
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|RegionFlusherAndCompactor
operator|.
name|FLUSH_SIZE_KEY
argument_list|,
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|initFlusher
argument_list|()
expr_stmt|;
name|memstoreHeapSize
operator|.
name|set
argument_list|(
literal|1000
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|flusher
operator|.
name|onUpdate
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|flushCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|memstoreOffHeapSize
operator|.
name|set
argument_list|(
literal|1000
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|flusher
operator|.
name|onUpdate
argument_list|()
expr_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|conf
argument_list|,
literal|2000
argument_list|,
parameter_list|()
lambda|->
name|flushCalled
operator|.
name|get
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTriggerFlushByChanges
parameter_list|(
name|int
name|changes
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|int
name|currentFlushCalled
init|=
name|flushCalled
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|changes
condition|;
name|i
operator|++
control|)
block|{
name|flusher
operator|.
name|onUpdate
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentFlushCalled
argument_list|,
name|flushCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|flusher
operator|.
name|onUpdate
argument_list|()
expr_stmt|;
name|Waiter
operator|.
name|waitFor
argument_list|(
name|conf
argument_list|,
literal|5000
argument_list|,
parameter_list|()
lambda|->
name|flushCalled
operator|.
name|get
argument_list|()
operator|==
name|currentFlushCalled
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTriggerFlushByChanges
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|RegionFlusherAndCompactor
operator|.
name|FLUSH_PER_CHANGES_KEY
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|initFlusher
argument_list|()
expr_stmt|;
name|assertTriggerFlushByChanges
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertTriggerFlushByChanges
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPeriodicalFlush
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|RegionFlusherAndCompactor
operator|.
name|FLUSH_INTERVAL_MS_KEY
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|initFlusher
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|flushCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|flushCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|flushCalled
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

