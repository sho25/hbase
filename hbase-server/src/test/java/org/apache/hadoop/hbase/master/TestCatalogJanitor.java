begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileArchiveTestingUtil
operator|.
name|assertArchiveEqualToOriginal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doReturn
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FSDataOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CategoryBasedTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MetaMockingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|TableDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|CatalogJanitor
operator|.
name|SplitParentFirstComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|MockMasterServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|ChunkCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|MemStoreLABImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MasterTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|HFileArchiveUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Triple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MasterTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCatalogJanitor
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestCatalogJanitor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestRule
name|timeout
init|=
name|CategoryBasedTimeout
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withLookingForStuckThread
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|HTU
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
name|MockMasterServices
name|masterServices
decl_stmt|;
specifier|private
name|CatalogJanitor
name|janitor
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|ChunkCreator
operator|.
name|initialize
argument_list|(
name|MemStoreLABImpl
operator|.
name|CHUNK_SIZE_DEFAULT
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|setRootDirAndCleanIt
argument_list|(
name|HTU
argument_list|,
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|NavigableMap
argument_list|<
name|ServerName
argument_list|,
name|SortedSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
name|regionsToRegionServers
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|ServerName
argument_list|,
name|SortedSet
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|this
operator|.
name|masterServices
operator|=
operator|new
name|MockMasterServices
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|regionsToRegionServers
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterServices
operator|.
name|start
argument_list|(
literal|10
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|janitor
operator|=
operator|new
name|CatalogJanitor
argument_list|(
name|masterServices
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
block|{
name|this
operator|.
name|janitor
operator|.
name|cancel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|masterServices
operator|.
name|stop
argument_list|(
literal|"DONE"
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test clearing a split parent.    */
annotation|@
name|Test
specifier|public
name|void
name|testCleanParent
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TableDescriptor
name|td
init|=
name|createTableDescriptorForCurrentMethod
argument_list|()
decl_stmt|;
comment|// Create regions.
name|HRegionInfo
name|parent
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splita
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test that when both daughter regions are in place, that we do not remove the parent.
name|Result
name|r
init|=
name|createResult
argument_list|(
name|parent
argument_list|,
name|splita
argument_list|,
name|splitb
argument_list|)
decl_stmt|;
comment|// Add a reference under splitA directory so we don't clear out the parent.
name|Path
name|rootdir
init|=
name|this
operator|.
name|masterServices
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|parentdir
init|=
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|parent
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|storedir
init|=
name|HStore
operator|.
name|getStoreHomedir
argument_list|(
name|tabledir
argument_list|,
name|splita
argument_list|,
name|td
operator|.
name|getColumnFamilies
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Reference
name|ref
init|=
name|Reference
operator|.
name|createTopReference
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Reference name has this format: StoreFile#REF_NAME_PARSER
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|storedir
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|now
argument_list|)
operator|+
literal|"."
operator|+
name|parent
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|this
operator|.
name|masterServices
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|Path
name|path
init|=
name|ref
operator|.
name|write
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created reference "
operator|+
name|path
argument_list|)
expr_stmt|;
comment|// Add a parentdir for kicks so can check it gets removed by the catalogjanitor.
name|fs
operator|.
name|mkdirs
argument_list|(
name|parentdir
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|this
operator|.
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitAllProcedures
argument_list|(
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|parentdir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Remove the reference file and try again.
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|this
operator|.
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
comment|// Parent cleanup is run async as a procedure. Make sure parentdir is removed.
name|ProcedureTestingUtility
operator|.
name|waitAllProcedures
argument_list|(
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|parentdir
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure parent gets cleaned up even if daughter is cleaned up before it.    */
annotation|@
name|Test
specifier|public
name|void
name|testParentCleanedEvenIfDaughterGoneFirst
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|parentWithSpecifiedEndKeyCleanedEvenIfDaughterGoneFirst
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Make sure last parent with empty end key gets cleaned up even if daughter is cleaned up before it.    */
annotation|@
name|Test
specifier|public
name|void
name|testLastParentCleanedEvenIfDaughterGoneFirst
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|parentWithSpecifiedEndKeyCleanedEvenIfDaughterGoneFirst
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return A TableDescriptor with a tableName of current method name and a column    * family that is MockMasterServices.DEFAULT_COLUMN_FAMILY_NAME)    */
specifier|private
name|TableDescriptor
name|createTableDescriptorForCurrentMethod
parameter_list|()
block|{
return|return
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|MockMasterServices
operator|.
name|DEFAULT_COLUMN_FAMILY_NAME
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**    * Make sure parent with specified end key gets cleaned up even if daughter is cleaned up before it.    *    * @param rootDir the test case name, used as the HBase testing utility root    * @param lastEndKey the end key of the split parent    */
specifier|private
name|void
name|parentWithSpecifiedEndKeyCleanedEvenIfDaughterGoneFirst
parameter_list|(
specifier|final
name|String
name|rootDir
parameter_list|,
specifier|final
name|byte
index|[]
name|lastEndKey
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|TableDescriptor
name|td
init|=
name|createTableDescriptorForCurrentMethod
argument_list|()
decl_stmt|;
comment|// Create regions: aaa->{lastEndKey}, aaa->ccc, aaa->bbb, bbb->ccc, etc.
name|HRegionInfo
name|parent
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|lastEndKey
argument_list|)
decl_stmt|;
comment|// Sleep a second else the encoded name on these regions comes out
comment|// same for all with same start key and made in same second.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
comment|// Daughter a
name|HRegionInfo
name|splita
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
comment|// Make daughters of daughter a; splitaa and splitab.
name|HRegionInfo
name|splitaa
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitab
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Daughter b
name|HRegionInfo
name|splitb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|lastEndKey
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
comment|// Make Daughters of daughterb; splitba and splitbb.
name|HRegionInfo
name|splitba
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitbb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
argument_list|,
name|lastEndKey
argument_list|)
decl_stmt|;
comment|// First test that our Comparator works right up in CatalogJanitor.
name|SortedMap
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|regions
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|CatalogJanitor
operator|.
name|SplitParentFirstComparator
argument_list|()
argument_list|)
decl_stmt|;
comment|// Now make sure that this regions map sorts as we expect it to.
name|regions
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|createResult
argument_list|(
name|parent
argument_list|,
name|splita
argument_list|,
name|splitb
argument_list|)
argument_list|)
expr_stmt|;
name|regions
operator|.
name|put
argument_list|(
name|splitb
argument_list|,
name|createResult
argument_list|(
name|splitb
argument_list|,
name|splitba
argument_list|,
name|splitbb
argument_list|)
argument_list|)
expr_stmt|;
name|regions
operator|.
name|put
argument_list|(
name|splita
argument_list|,
name|createResult
argument_list|(
name|splita
argument_list|,
name|splitaa
argument_list|,
name|splitab
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert its properly sorted.
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|e
range|:
name|regions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
literal|1
condition|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|splita
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
literal|2
condition|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getEncodedName
argument_list|()
operator|.
name|equals
argument_list|(
name|splitb
operator|.
name|getEncodedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
comment|// Now play around with the cleanParent function. Create a ref from splita up to the parent.
name|Path
name|splitaRef
init|=
name|createReferences
argument_list|(
name|this
operator|.
name|masterServices
argument_list|,
name|td
argument_list|,
name|parent
argument_list|,
name|splita
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Make sure actual super parent sticks around because splita has a ref.
name|assertFalse
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|parent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//splitba, and split bb, do not have dirs in fs.  That means that if
comment|// we test splitb, it should get cleaned up.
name|assertTrue
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|splitb
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|splitb
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now remove ref from splita to parent... so parent can be let go and so
comment|// the daughter splita can be split (can't split if still references).
comment|// BUT make the timing such that the daughter gets cleaned up before we
comment|// can get a chance to let go of the parent.
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|splitaRef
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create the refs from daughters of splita.
name|Path
name|splitaaRef
init|=
name|createReferences
argument_list|(
name|this
operator|.
name|masterServices
argument_list|,
name|td
argument_list|,
name|splita
argument_list|,
name|splitaa
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Path
name|splitabRef
init|=
name|createReferences
argument_list|(
name|this
operator|.
name|masterServices
argument_list|,
name|td
argument_list|,
name|splita
argument_list|,
name|splitab
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Test splita.  It should stick around because references from splitab, etc.
name|assertFalse
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|splita
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|splita
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now clean up parent daughter first.  Remove references from its daughters.
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|splitaaRef
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|splitabRef
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|splita
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|splita
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Super parent should get cleaned up now both splita and splitb are gone.
name|assertTrue
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|regions
operator|.
name|get
argument_list|(
name|parent
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * CatalogJanitor.scan() should not clean parent regions if their own    * parents are still referencing them. This ensures that grandparent regions    * do not point to deleted parent regions.    */
annotation|@
name|Test
specifier|public
name|void
name|testScanDoesNotCleanRegionsWithExistingParents
parameter_list|()
throws|throws
name|Exception
block|{
name|TableDescriptor
name|td
init|=
name|createTableDescriptorForCurrentMethod
argument_list|()
decl_stmt|;
comment|// Create regions: aaa->{lastEndKey}, aaa->ccc, aaa->bbb, bbb->ccc, etc.
comment|// Parent
name|HRegionInfo
name|parent
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Sleep a second else the encoded name on these regions comes out
comment|// same for all with same start key and made in same second.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
comment|// Daughter a
name|HRegionInfo
name|splita
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
comment|// Make daughters of daughter a; splitaa and splitab.
name|HRegionInfo
name|splitaa
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitab
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// Daughter b
name|HRegionInfo
name|splitb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_BYTE_ARRAY
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1001
argument_list|)
expr_stmt|;
comment|// Parent has daughters splita and splitb. Splita has daughters splitaa and splitab.
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|splitParents
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
operator|new
name|SplitParentFirstComparator
argument_list|()
argument_list|)
decl_stmt|;
name|splitParents
operator|.
name|put
argument_list|(
name|parent
argument_list|,
name|createResult
argument_list|(
name|parent
argument_list|,
name|splita
argument_list|,
name|splitb
argument_list|)
argument_list|)
expr_stmt|;
name|splita
operator|.
name|setOffline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//simulate that splita goes offline when it is split
name|splitParents
operator|.
name|put
argument_list|(
name|splita
argument_list|,
name|createResult
argument_list|(
name|splita
argument_list|,
name|splitaa
argument_list|,
name|splitab
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|HRegionInfo
argument_list|,
name|Result
argument_list|>
name|mergedRegions
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CatalogJanitor
name|spy
init|=
name|spy
argument_list|(
name|this
operator|.
name|janitor
argument_list|)
decl_stmt|;
name|doReturn
argument_list|(
operator|new
name|Triple
argument_list|<>
argument_list|(
literal|10
argument_list|,
name|mergedRegions
argument_list|,
name|splitParents
argument_list|)
argument_list|)
operator|.
name|when
argument_list|(
name|spy
argument_list|)
operator|.
name|getMergedRegionsAndSplitParents
argument_list|()
expr_stmt|;
comment|// Create ref from splita to parent
name|LOG
operator|.
name|info
argument_list|(
literal|"parent="
operator|+
name|parent
operator|.
name|getShortNameToLog
argument_list|()
operator|+
literal|", splita="
operator|+
name|splita
operator|.
name|getShortNameToLog
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|splitaRef
init|=
name|createReferences
argument_list|(
name|this
operator|.
name|masterServices
argument_list|,
name|td
argument_list|,
name|parent
argument_list|,
name|splita
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created reference "
operator|+
name|splitaRef
argument_list|)
expr_stmt|;
comment|// Parent and splita should not be removed because a reference from splita to parent.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|spy
operator|.
name|scan
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now delete the ref
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|splitaRef
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|//now, both parent, and splita can be deleted
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|spy
operator|.
name|scan
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test that we correctly archive all the storefiles when a region is deleted    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testSplitParentFirstComparator
parameter_list|()
block|{
name|SplitParentFirstComparator
name|comp
init|=
operator|new
name|SplitParentFirstComparator
argument_list|()
decl_stmt|;
name|TableDescriptor
name|td
init|=
name|createTableDescriptorForCurrentMethod
argument_list|()
decl_stmt|;
comment|/*  Region splits:      *      *  rootRegion --- firstRegion --- firstRegiona      *              |               |- firstRegionb      *              |      *              |- lastRegion --- lastRegiona  --- lastRegionaa      *                             |                |- lastRegionab      *                             |- lastRegionb      *      *  rootRegion   :   []  - []      *  firstRegion  :   []  - bbb      *  lastRegion   :   bbb - []      *  firstRegiona :   []  - aaa      *  firstRegionb :   aaa - bbb      *  lastRegiona  :   bbb - ddd      *  lastRegionb  :   ddd - []      */
comment|// root region
name|HRegionInfo
name|rootRegion
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegionInfo
name|firstRegion
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegionInfo
name|lastRegion
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|rootRegion
argument_list|,
name|rootRegion
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegion
argument_list|,
name|firstRegion
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|lastRegion
argument_list|,
name|lastRegion
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|rootRegion
argument_list|,
name|firstRegion
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|rootRegion
argument_list|,
name|lastRegion
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegion
argument_list|,
name|lastRegion
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|//first region split into a, b
name|HRegionInfo
name|firstRegiona
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegionInfo
name|firstRegionb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//last region split into a, b
name|HRegionInfo
name|lastRegiona
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HRegionInfo
name|lastRegionb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
argument_list|,
name|HConstants
operator|.
name|EMPTY_END_ROW
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegiona
argument_list|,
name|firstRegiona
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegionb
argument_list|,
name|firstRegionb
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|rootRegion
argument_list|,
name|firstRegiona
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|rootRegion
argument_list|,
name|firstRegionb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegion
argument_list|,
name|firstRegiona
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegion
argument_list|,
name|firstRegionb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegiona
argument_list|,
name|firstRegionb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|lastRegiona
argument_list|,
name|lastRegiona
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|lastRegionb
argument_list|,
name|lastRegionb
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|rootRegion
argument_list|,
name|lastRegiona
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|rootRegion
argument_list|,
name|lastRegionb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|lastRegion
argument_list|,
name|lastRegiona
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|lastRegion
argument_list|,
name|lastRegionb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|lastRegiona
argument_list|,
name|lastRegionb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegiona
argument_list|,
name|lastRegiona
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegiona
argument_list|,
name|lastRegionb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegionb
argument_list|,
name|lastRegiona
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|firstRegionb
argument_list|,
name|lastRegionb
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|HRegionInfo
name|lastRegionaa
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|HRegionInfo
name|lastRegionab
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|lastRegiona
argument_list|,
name|lastRegionaa
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|lastRegiona
argument_list|,
name|lastRegionab
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|comp
operator|.
name|compare
argument_list|(
name|lastRegionaa
argument_list|,
name|lastRegionab
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArchiveOldRegion
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create regions.
name|TableDescriptor
name|td
init|=
name|createTableDescriptorForCurrentMethod
argument_list|()
decl_stmt|;
name|HRegionInfo
name|parent
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splita
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test that when both daughter regions are in place, that we do not
comment|// remove the parent.
name|Result
name|parentMetaRow
init|=
name|createResult
argument_list|(
name|parent
argument_list|,
name|splita
argument_list|,
name|splitb
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|rootdir
init|=
name|this
operator|.
name|masterServices
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
comment|// have to set the root directory since we use it in HFileDisposer to figure out to get to the
comment|// archive directory. Otherwise, it just seems to pick the first root directory it can find (so
comment|// the single test passes, but when the full suite is run, things get borked).
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|td
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|storedir
init|=
name|HStore
operator|.
name|getStoreHomedir
argument_list|(
name|tabledir
argument_list|,
name|parent
argument_list|,
name|td
operator|.
name|getColumnFamilies
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|storeArchive
init|=
name|HFileArchiveUtil
operator|.
name|getStoreArchivePath
argument_list|(
name|this
operator|.
name|masterServices
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|parent
argument_list|,
name|tabledir
argument_list|,
name|td
operator|.
name|getColumnFamilies
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Table dir:"
operator|+
name|tabledir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Store dir:"
operator|+
name|storedir
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Store archive dir:"
operator|+
name|storeArchive
argument_list|)
expr_stmt|;
comment|// add a couple of store files that we can check for
name|FileStatus
index|[]
name|mockFiles
init|=
name|addMockStoreFiles
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|masterServices
argument_list|,
name|storedir
argument_list|)
decl_stmt|;
comment|// get the current store files for comparison
name|FileStatus
index|[]
name|storeFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|storedir
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|storeFiles
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Have store file:"
operator|+
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Got unexpected store file"
argument_list|,
name|mockFiles
index|[
name|index
index|]
operator|.
name|getPath
argument_list|()
argument_list|,
name|storeFiles
index|[
name|index
index|]
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|// do the cleaning of the parent
name|assertTrue
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|parentMetaRow
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|parent
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Cleanup procedure runs async. Wait till it done.
name|ProcedureTestingUtility
operator|.
name|waitAllProcedures
argument_list|(
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|parentDir
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished cleanup of parent region"
argument_list|)
expr_stmt|;
comment|// and now check to make sure that the files have actually been archived
name|FileStatus
index|[]
name|archivedStoreFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|storeArchive
argument_list|)
decl_stmt|;
name|logFiles
argument_list|(
literal|"archived files"
argument_list|,
name|storeFiles
argument_list|)
expr_stmt|;
name|logFiles
argument_list|(
literal|"archived files"
argument_list|,
name|archivedStoreFiles
argument_list|)
expr_stmt|;
name|assertArchiveEqualToOriginal
argument_list|(
name|storeFiles
argument_list|,
name|archivedStoreFiles
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// cleanup
name|FSUtils
operator|.
name|delete
argument_list|(
name|fs
argument_list|,
name|rootdir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param description description of the files for logging    * @param storeFiles the status of the files to log    */
specifier|private
name|void
name|logFiles
parameter_list|(
name|String
name|description
parameter_list|,
name|FileStatus
index|[]
name|storeFiles
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Current "
operator|+
name|description
operator|+
literal|": "
argument_list|)
expr_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|storeFiles
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test that if a store file with the same name is present as those already backed up cause the    * already archived files to be timestamped backup    */
annotation|@
name|Test
specifier|public
name|void
name|testDuplicateHFileResolution
parameter_list|()
throws|throws
name|Exception
block|{
name|TableDescriptor
name|td
init|=
name|createTableDescriptorForCurrentMethod
argument_list|()
decl_stmt|;
comment|// Create regions.
name|HRegionInfo
name|parent
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splita
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|splitb
init|=
operator|new
name|HRegionInfo
argument_list|(
name|td
operator|.
name|getTableName
argument_list|()
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"eee"
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test that when both daughter regions are in place, that we do not
comment|// remove the parent.
name|Result
name|r
init|=
name|createResult
argument_list|(
name|parent
argument_list|,
name|splita
argument_list|,
name|splitb
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|HTU
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|rootdir
init|=
name|this
operator|.
name|masterServices
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
comment|// Have to set the root directory since we use it in HFileDisposer to figure out to get to the
comment|// archive directory. Otherwise, it just seems to pick the first root directory it can find (so
comment|// the single test passes, but when the full suite is run, things get borked).
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|fs
operator|.
name|getConf
argument_list|()
argument_list|,
name|rootdir
argument_list|)
expr_stmt|;
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|parent
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|storedir
init|=
name|HStore
operator|.
name|getStoreHomedir
argument_list|(
name|tabledir
argument_list|,
name|parent
argument_list|,
name|td
operator|.
name|getColumnFamilies
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Old root:"
operator|+
name|rootdir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Old table:"
operator|+
name|tabledir
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Old store:"
operator|+
name|storedir
argument_list|)
expr_stmt|;
name|Path
name|storeArchive
init|=
name|HFileArchiveUtil
operator|.
name|getStoreArchivePath
argument_list|(
name|this
operator|.
name|masterServices
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|parent
argument_list|,
name|tabledir
argument_list|,
name|td
operator|.
name|getColumnFamilies
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Old archive:"
operator|+
name|storeArchive
argument_list|)
expr_stmt|;
comment|// enable archiving, make sure that files get archived
name|addMockStoreFiles
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|masterServices
argument_list|,
name|storedir
argument_list|)
expr_stmt|;
comment|// get the current store files for comparison
name|FileStatus
index|[]
name|storeFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|storedir
argument_list|)
decl_stmt|;
comment|// Do the cleaning of the parent
name|assertTrue
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|parentDir
init|=
operator|new
name|Path
argument_list|(
name|tabledir
argument_list|,
name|parent
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|ProcedureTestingUtility
operator|.
name|waitAllProcedures
argument_list|(
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|parentDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// And now check to make sure that the files have actually been archived
name|FileStatus
index|[]
name|archivedStoreFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|storeArchive
argument_list|)
decl_stmt|;
name|assertArchiveEqualToOriginal
argument_list|(
name|storeFiles
argument_list|,
name|archivedStoreFiles
argument_list|,
name|fs
argument_list|)
expr_stmt|;
comment|// now add store files with the same names as before to check backup
comment|// enable archiving, make sure that files get archived
name|addMockStoreFiles
argument_list|(
literal|2
argument_list|,
name|this
operator|.
name|masterServices
argument_list|,
name|storedir
argument_list|)
expr_stmt|;
comment|// Do the cleaning of the parent
name|assertTrue
argument_list|(
name|janitor
operator|.
name|cleanParent
argument_list|(
name|parent
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cleanup procedure runs async. Wait till it done.
name|ProcedureTestingUtility
operator|.
name|waitAllProcedures
argument_list|(
name|masterServices
operator|.
name|getMasterProcedureExecutor
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|fs
operator|.
name|exists
argument_list|(
name|parentDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// and now check to make sure that the files have actually been archived
name|archivedStoreFiles
operator|=
name|fs
operator|.
name|listStatus
argument_list|(
name|storeArchive
argument_list|)
expr_stmt|;
name|assertArchiveEqualToOriginal
argument_list|(
name|storeFiles
argument_list|,
name|archivedStoreFiles
argument_list|,
name|fs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FileStatus
index|[]
name|addMockStoreFiles
parameter_list|(
name|int
name|count
parameter_list|,
name|MasterServices
name|services
parameter_list|,
name|Path
name|storedir
parameter_list|)
throws|throws
name|IOException
block|{
comment|// get the existing store files
name|FileSystem
name|fs
init|=
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|storedir
argument_list|)
expr_stmt|;
comment|// create the store files in the parent
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|storeFile
init|=
operator|new
name|Path
argument_list|(
name|storedir
argument_list|,
literal|"_store"
operator|+
name|i
argument_list|)
decl_stmt|;
name|FSDataOutputStream
name|dos
init|=
name|fs
operator|.
name|create
argument_list|(
name|storeFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dos
operator|.
name|writeBytes
argument_list|(
literal|"Some data: "
operator|+
name|i
argument_list|)
expr_stmt|;
name|dos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Adding "
operator|+
name|count
operator|+
literal|" store files to the storedir:"
operator|+
name|storedir
argument_list|)
expr_stmt|;
comment|// make sure the mock store files are there
name|FileStatus
index|[]
name|storeFiles
init|=
name|fs
operator|.
name|listStatus
argument_list|(
name|storedir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Didn't have expected store files"
argument_list|,
name|count
argument_list|,
name|storeFiles
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|storeFiles
return|;
block|}
specifier|private
name|String
name|setRootDirAndCleanIt
parameter_list|(
specifier|final
name|HBaseTestingUtility
name|htu
parameter_list|,
specifier|final
name|String
name|subdir
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|testdir
init|=
name|htu
operator|.
name|getDataTestDir
argument_list|(
name|subdir
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|testdir
argument_list|)
condition|)
name|assertTrue
argument_list|(
name|fs
operator|.
name|delete
argument_list|(
name|testdir
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|FSUtils
operator|.
name|setRootDir
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|testdir
argument_list|)
expr_stmt|;
return|return
name|FSUtils
operator|.
name|getRootDir
argument_list|(
name|htu
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Path
name|createReferences
parameter_list|(
specifier|final
name|MasterServices
name|services
parameter_list|,
specifier|final
name|TableDescriptor
name|td
parameter_list|,
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
specifier|final
name|HRegionInfo
name|daughter
parameter_list|,
specifier|final
name|byte
index|[]
name|midkey
parameter_list|,
specifier|final
name|boolean
name|top
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|rootdir
init|=
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getRootDir
argument_list|()
decl_stmt|;
name|Path
name|tabledir
init|=
name|FSUtils
operator|.
name|getTableDir
argument_list|(
name|rootdir
argument_list|,
name|parent
operator|.
name|getTable
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|storedir
init|=
name|HStore
operator|.
name|getStoreHomedir
argument_list|(
name|tabledir
argument_list|,
name|daughter
argument_list|,
name|td
operator|.
name|getColumnFamilies
argument_list|()
index|[
literal|0
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Reference
name|ref
init|=
name|top
condition|?
name|Reference
operator|.
name|createTopReference
argument_list|(
name|midkey
argument_list|)
else|:
name|Reference
operator|.
name|createBottomReference
argument_list|(
name|midkey
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Reference name has this format: StoreFile#REF_NAME_PARSER
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|storedir
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|now
argument_list|)
operator|+
literal|"."
operator|+
name|parent
operator|.
name|getEncodedName
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|services
operator|.
name|getMasterFileSystem
argument_list|()
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
name|ref
operator|.
name|write
argument_list|(
name|fs
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|private
name|Result
name|createResult
parameter_list|(
specifier|final
name|HRegionInfo
name|parent
parameter_list|,
specifier|final
name|HRegionInfo
name|a
parameter_list|,
specifier|final
name|HRegionInfo
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|MetaMockingUtil
operator|.
name|getMetaTableRowResult
argument_list|(
name|parent
argument_list|,
literal|null
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
end_class

end_unit

