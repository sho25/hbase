begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test class for {@link SpaceQuotaViolationPolicyRefresherChore}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSpaceQuotaViolationPolicyRefresherChore
block|{
specifier|private
name|RegionServerSpaceQuotaManager
name|manager
decl_stmt|;
specifier|private
name|RegionServerServices
name|rss
decl_stmt|;
specifier|private
name|SpaceQuotaViolationPolicyRefresherChore
name|chore
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|rss
operator|=
name|mock
argument_list|(
name|RegionServerServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|manager
operator|=
name|mock
argument_list|(
name|RegionServerSpaceQuotaManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|manager
operator|.
name|getRegionServerServices
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rss
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rss
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|chore
operator|=
operator|new
name|SpaceQuotaViolationPolicyRefresherChore
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPoliciesAreEnforced
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|policiesToEnforce
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table2"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table3"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table4"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
argument_list|)
expr_stmt|;
comment|// No active enforcements
name|when
argument_list|(
name|manager
operator|.
name|getActiveViolationPolicyEnforcements
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// Policies to enforce
name|when
argument_list|(
name|manager
operator|.
name|getViolationPoliciesToEnforce
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|policiesToEnforce
argument_list|)
expr_stmt|;
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|entry
range|:
name|policiesToEnforce
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Ensure we enforce the policy
name|verify
argument_list|(
name|manager
argument_list|)
operator|.
name|enforceViolationPolicy
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't disable any policies
name|verify
argument_list|(
name|manager
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|disableViolationPolicyEnforcement
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOldPoliciesAreRemoved
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|policiesToEnforce
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table2"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|previousPolicies
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|previousPolicies
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table3"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
expr_stmt|;
name|previousPolicies
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table4"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
expr_stmt|;
comment|// No active enforcements
name|when
argument_list|(
name|manager
operator|.
name|getActiveViolationPolicyEnforcements
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|previousPolicies
argument_list|)
expr_stmt|;
comment|// Policies to enforce
name|when
argument_list|(
name|manager
operator|.
name|getViolationPoliciesToEnforce
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|policiesToEnforce
argument_list|)
expr_stmt|;
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|entry
range|:
name|policiesToEnforce
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|verify
argument_list|(
name|manager
argument_list|)
operator|.
name|enforceViolationPolicy
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|entry
range|:
name|previousPolicies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|verify
argument_list|(
name|manager
argument_list|)
operator|.
name|disableViolationPolicyEnforcement
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewPolicyOverridesOld
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|policiesToEnforce
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table2"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table3"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|previousPolicies
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|previousPolicies
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
expr_stmt|;
comment|// No active enforcements
name|when
argument_list|(
name|manager
operator|.
name|getActiveViolationPolicyEnforcements
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|previousPolicies
argument_list|)
expr_stmt|;
comment|// Policies to enforce
name|when
argument_list|(
name|manager
operator|.
name|getViolationPoliciesToEnforce
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|policiesToEnforce
argument_list|)
expr_stmt|;
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceViolationPolicy
argument_list|>
name|entry
range|:
name|policiesToEnforce
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|verify
argument_list|(
name|manager
argument_list|)
operator|.
name|enforceViolationPolicy
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|manager
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|disableViolationPolicyEnforcement
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

