begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
operator|.
name|toBytes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doCallRealMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ResultScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
operator|.
name|SpaceQuotaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|RegionServerServices
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Test class for {@link SpaceQuotaRefresherChore}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSpaceQuotaViolationPolicyRefresherChore
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSpaceQuotaViolationPolicyRefresherChore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RegionServerSpaceQuotaManager
name|manager
decl_stmt|;
specifier|private
name|RegionServerServices
name|rss
decl_stmt|;
specifier|private
name|SpaceQuotaRefresherChore
name|chore
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|Connection
name|conn
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
name|rss
operator|=
name|mock
argument_list|(
name|RegionServerServices
operator|.
name|class
argument_list|)
expr_stmt|;
name|manager
operator|=
name|mock
argument_list|(
name|RegionServerSpaceQuotaManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|conn
operator|=
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|manager
operator|.
name|getRegionServerServices
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|rss
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|rss
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|chore
operator|=
name|mock
argument_list|(
name|SpaceQuotaRefresherChore
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|chore
operator|.
name|getConnection
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|conn
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|chore
operator|.
name|getManager
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|chore
argument_list|)
operator|.
name|chore
argument_list|()
expr_stmt|;
name|when
argument_list|(
name|chore
operator|.
name|isInViolation
argument_list|(
name|any
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|doCallRealMethod
argument_list|()
operator|.
name|when
argument_list|(
name|chore
argument_list|)
operator|.
name|extractQuotaSnapshot
argument_list|(
name|any
argument_list|()
argument_list|,
name|any
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPoliciesAreEnforced
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Create a number of policies that should be enforced (usage> limit)
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|policiesToEnforce
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
argument_list|,
literal|1024L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table2"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
argument_list|,
literal|2048L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table3"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
argument_list|,
literal|4096L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table4"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES_COMPACTIONS
argument_list|)
argument_list|,
literal|8192L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
comment|// No active enforcements
name|when
argument_list|(
name|manager
operator|.
name|copyQuotaSnapshots
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
comment|// Policies to enforce
name|when
argument_list|(
name|chore
operator|.
name|fetchSnapshotsFromQuotaTable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|policiesToEnforce
argument_list|)
expr_stmt|;
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|entry
range|:
name|policiesToEnforce
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Ensure we enforce the policy
name|verify
argument_list|(
name|manager
argument_list|)
operator|.
name|enforceViolationPolicy
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't disable any policies
name|verify
argument_list|(
name|manager
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|disableViolationPolicyEnforcement
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOldPoliciesAreRemoved
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|previousPolicies
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|previousPolicies
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table3"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
argument_list|,
literal|4096L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
name|previousPolicies
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table4"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
argument_list|,
literal|8192L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|policiesToEnforce
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
argument_list|,
literal|1024L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table2"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
argument_list|,
literal|2048L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table3"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
name|SpaceQuotaStatus
operator|.
name|notInViolation
argument_list|()
argument_list|,
literal|256L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table4"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
name|SpaceQuotaStatus
operator|.
name|notInViolation
argument_list|()
argument_list|,
literal|128L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
comment|// No active enforcements
name|when
argument_list|(
name|manager
operator|.
name|copyQuotaSnapshots
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|previousPolicies
argument_list|)
expr_stmt|;
comment|// Policies to enforce
name|when
argument_list|(
name|chore
operator|.
name|fetchSnapshotsFromQuotaTable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|policiesToEnforce
argument_list|)
expr_stmt|;
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|manager
argument_list|)
operator|.
name|enforceViolationPolicy
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
name|policiesToEnforce
operator|.
name|get
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|manager
argument_list|)
operator|.
name|enforceViolationPolicy
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table2"
argument_list|)
argument_list|,
name|policiesToEnforce
operator|.
name|get
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|manager
argument_list|)
operator|.
name|disableViolationPolicyEnforcement
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table3"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|manager
argument_list|)
operator|.
name|disableViolationPolicyEnforcement
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewPolicyOverridesOld
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|policiesToEnforce
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|DISABLE
argument_list|)
argument_list|,
literal|1024L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table2"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
argument_list|,
literal|2048L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
name|policiesToEnforce
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table3"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
argument_list|,
literal|4096L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|previousPolicies
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|previousPolicies
operator|.
name|put
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|,
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_WRITES
argument_list|)
argument_list|,
literal|8192L
argument_list|,
literal|512L
argument_list|)
argument_list|)
expr_stmt|;
comment|// No active enforcements
name|when
argument_list|(
name|manager
operator|.
name|getActivePoliciesAsMap
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|previousPolicies
argument_list|)
expr_stmt|;
comment|// Policies to enforce
name|when
argument_list|(
name|chore
operator|.
name|fetchSnapshotsFromQuotaTable
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|policiesToEnforce
argument_list|)
expr_stmt|;
name|chore
operator|.
name|chore
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|TableName
argument_list|,
name|SpaceQuotaSnapshot
argument_list|>
name|entry
range|:
name|policiesToEnforce
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|verify
argument_list|(
name|manager
argument_list|)
operator|.
name|enforceViolationPolicy
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|verify
argument_list|(
name|manager
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|disableViolationPolicyEnforcement
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"table1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingAllColumns
parameter_list|()
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|chore
operator|.
name|fetchSnapshotsFromQuotaTable
argument_list|()
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|mock
argument_list|(
name|ResultScanner
operator|.
name|class
argument_list|)
decl_stmt|;
name|Table
name|quotaTable
init|=
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|conn
operator|.
name|getTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|quotaTable
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|quotaTable
operator|.
name|getScanner
argument_list|(
name|any
argument_list|(
name|Scan
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|Result
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scanner
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|results
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|chore
operator|.
name|fetchSnapshotsFromQuotaTable
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an IOException, but did not receive one."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected an error because we had no cells in the row.
comment|// This should only happen due to programmer error.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingDesiredColumn
parameter_list|()
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|chore
operator|.
name|fetchSnapshotsFromQuotaTable
argument_list|()
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|mock
argument_list|(
name|ResultScanner
operator|.
name|class
argument_list|)
decl_stmt|;
name|Table
name|quotaTable
init|=
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|conn
operator|.
name|getTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|quotaTable
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|quotaTable
operator|.
name|getScanner
argument_list|(
name|any
argument_list|(
name|Scan
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Give a column that isn't the one we want
name|Cell
name|c
init|=
operator|new
name|KeyValue
argument_list|(
name|toBytes
argument_list|(
literal|"t:inviolation"
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|"q"
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|"s"
argument_list|)
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|Result
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scanner
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|results
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|chore
operator|.
name|fetchSnapshotsFromQuotaTable
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an IOException, but did not receive one."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// Expected an error because we were missing the column we expected in this row.
comment|// This should only happen due to programmer error.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParsingError
parameter_list|()
throws|throws
name|IOException
block|{
name|when
argument_list|(
name|chore
operator|.
name|fetchSnapshotsFromQuotaTable
argument_list|()
argument_list|)
operator|.
name|thenCallRealMethod
argument_list|()
expr_stmt|;
name|ResultScanner
name|scanner
init|=
name|mock
argument_list|(
name|ResultScanner
operator|.
name|class
argument_list|)
decl_stmt|;
name|Table
name|quotaTable
init|=
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|conn
operator|.
name|getTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|quotaTable
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|quotaTable
operator|.
name|getScanner
argument_list|(
name|any
argument_list|(
name|Scan
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scanner
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Result
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Cell
name|c
init|=
operator|new
name|KeyValue
argument_list|(
name|toBytes
argument_list|(
literal|"t:inviolation"
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|"u"
argument_list|)
argument_list|,
name|toBytes
argument_list|(
literal|"v"
argument_list|)
argument_list|,
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
name|Result
operator|.
name|create
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scanner
operator|.
name|iterator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|results
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|chore
operator|.
name|fetchSnapshotsFromQuotaTable
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expected an IOException, but did not receive one."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|// We provided a garbage serialized protobuf message (empty byte array), this should
comment|// in turn throw an IOException
block|}
block|}
block|}
end_class

end_unit

