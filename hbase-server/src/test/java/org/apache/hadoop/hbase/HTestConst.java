begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Similar to {@link HConstants} but for tests. Also provides some simple  * static utility functions to generate test data.  */
end_comment

begin_class
specifier|public
class|class
name|HTestConst
block|{
specifier|private
name|HTestConst
parameter_list|()
block|{   }
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_TABLE_STR
init|=
literal|"MyTestTable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|DEFAULT_TABLE_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|DEFAULT_TABLE_STR
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|TableName
name|DEFAULT_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|DEFAULT_TABLE_BYTES
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_CF_STR
init|=
literal|"MyDefaultCF"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|DEFAULT_CF_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|DEFAULT_CF_STR
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_CF_STR_SET
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|DEFAULT_CF_STR
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_ROW_STR
init|=
literal|"MyTestRow"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|DEFAULT_ROW_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|DEFAULT_ROW_STR
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_QUALIFIER_STR
init|=
literal|"MyColumnQualifier"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|DEFAULT_QUALIFIER_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|DEFAULT_QUALIFIER_STR
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|DEFAULT_VALUE_STR
init|=
literal|"MyTestValue"
decl_stmt|;
specifier|public
specifier|static
name|byte
index|[]
name|DEFAULT_VALUE_BYTES
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|DEFAULT_VALUE_STR
argument_list|)
decl_stmt|;
comment|/**    * Generate the given number of unique byte sequences by appending numeric    * suffixes (ASCII representations of decimal numbers).    */
specifier|public
specifier|static
name|byte
index|[]
index|[]
name|makeNAscii
parameter_list|(
name|byte
index|[]
name|base
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|ret
init|=
operator|new
name|byte
index|[
name|n
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|byte
index|[]
name|tail
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|ret
index|[
name|i
index|]
operator|=
name|Bytes
operator|.
name|add
argument_list|(
name|base
argument_list|,
name|tail
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

