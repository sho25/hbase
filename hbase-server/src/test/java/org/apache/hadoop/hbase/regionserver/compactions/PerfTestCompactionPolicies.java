begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|RandomStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|PerfTestCompactionPolicies
block|{
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|PerfTestCompactionPolicies
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CompactionPolicy
name|cp
decl_stmt|;
specifier|private
specifier|final
name|int
name|max
decl_stmt|;
specifier|private
specifier|final
name|int
name|min
decl_stmt|;
specifier|private
specifier|final
name|float
name|ratio
decl_stmt|;
specifier|private
name|long
name|written
init|=
literal|0
decl_stmt|;
specifier|private
name|long
name|fileDiff
init|=
literal|0
decl_stmt|;
specifier|private
name|Random
name|random
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
operator|new
name|DefaultCompactionPolicy
argument_list|()
block|,
literal|3
block|,
literal|2
block|,
literal|1.2f
block|}
block|,
block|{
operator|new
name|DefaultCompactionPolicy
argument_list|()
block|,
literal|4
block|,
literal|2
block|,
literal|1.2f
block|}
block|,
block|{
operator|new
name|DefaultCompactionPolicy
argument_list|()
block|,
literal|5
block|,
literal|2
block|,
literal|1.2f
block|}
block|,
block|{
operator|new
name|DefaultCompactionPolicy
argument_list|()
block|,
literal|4
block|,
literal|2
block|,
literal|1.3f
block|}
block|,
block|{
operator|new
name|DefaultCompactionPolicy
argument_list|()
block|,
literal|4
block|,
literal|2
block|,
literal|1.4f
block|}
block|,      }
argument_list|)
return|;
block|}
comment|/**    * Test the perf of a CompactionPolicy with settings    * @param cp The compaction policy to test    * @param max The maximum number of file to compact    * @param min The min number of files to compact    * @param ratio The ratio that files must be under to be compacted.    */
specifier|public
name|PerfTestCompactionPolicies
parameter_list|(
name|CompactionPolicy
name|cp
parameter_list|,
name|int
name|max
parameter_list|,
name|int
name|min
parameter_list|,
name|float
name|ratio
parameter_list|)
block|{
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|ratio
operator|=
name|ratio
expr_stmt|;
comment|//Hide lots of logging so the sysout is usable as a tab delimited file.
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|CompactionConfiguration
operator|.
name|class
argument_list|)
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
operator|.
name|getLogger
argument_list|(
name|cp
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|setLevel
argument_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|this
operator|.
name|cp
operator|=
name|cp
expr_stmt|;
name|Configuration
name|configuration
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
comment|//Make sure that this doesn't include every file.
name|configuration
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.max"
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setInt
argument_list|(
literal|"hbase.hstore.compaction.min"
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|configuration
operator|.
name|setFloat
argument_list|(
literal|"hbase.hstore.compaction.ratio"
argument_list|,
name|ratio
argument_list|)
expr_stmt|;
name|cp
operator|.
name|store
operator|=
name|createMockStore
argument_list|()
expr_stmt|;
comment|//Now set the conf.
name|cp
operator|.
name|setConf
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
comment|//Used for making paths
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|42
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSelection
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Some special cases. To simulate bulk loading patterns.
name|int
index|[]
index|[]
name|fileSizes
init|=
operator|new
name|int
index|[]
index|[]
block|{
block|{
literal|1000
block|,
literal|350
block|,
literal|200
block|,
literal|100
block|,
literal|20
block|,
literal|10
block|,
literal|10
block|}
block|,
block|{
literal|1000
block|,
literal|450
block|,
literal|200
block|,
literal|100
block|,
literal|20
block|,
literal|10
block|,
literal|10
block|}
block|,
block|{
literal|1000
block|,
literal|550
block|,
literal|200
block|,
literal|100
block|,
literal|20
block|,
literal|10
block|,
literal|10
block|}
block|,
block|{
literal|1000
block|,
literal|650
block|,
literal|200
block|,
literal|100
block|,
literal|20
block|,
literal|10
block|,
literal|10
block|}
block|,
block|{
literal|1000
block|,
literal|250
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|}
block|,
block|{
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|25
block|,
literal|500
block|}
block|,
block|{
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|1000
block|,
literal|900
block|}
block|,
block|{
literal|107
block|,
literal|50
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|}
block|,
block|{
literal|2000
block|,
literal|107
block|,
literal|50
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|,
literal|10
block|}
block|,
block|{
literal|9
block|,
literal|8
block|,
literal|7
block|,
literal|6
block|,
literal|5
block|,
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|}
block|,
block|{
literal|11
block|,
literal|18
block|,
literal|9
block|,
literal|8
block|,
literal|7
block|,
literal|6
block|,
literal|5
block|,
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|}
block|,
block|{
literal|110
block|,
literal|18
block|,
literal|18
block|,
literal|18
block|,
literal|18
block|,
literal|9
block|,
literal|8
block|,
literal|7
block|,
literal|6
block|,
literal|5
block|,
literal|4
block|,
literal|3
block|,
literal|2
block|,
literal|1
block|}
block|,
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|,
literal|10
block|,
literal|11
block|,
literal|12
block|,
literal|13
block|,
literal|15
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
index|[]
name|fs
range|:
name|fileSizes
control|)
block|{
name|List
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
name|createStoreFileList
argument_list|(
name|fs
argument_list|)
decl_stmt|;
name|storeFiles
operator|=
name|runIteration
argument_list|(
name|storeFiles
argument_list|)
expr_stmt|;
name|runIteration
argument_list|(
name|storeFiles
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
operator|new
name|LinkedList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
comment|//Add some files to start with so that things are more normal
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|1700
argument_list|)
operator|+
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|700
argument_list|)
operator|+
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|400
argument_list|)
operator|+
literal|300
argument_list|)
argument_list|)
expr_stmt|;
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|400
argument_list|)
operator|+
literal|200
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|50
condition|;
name|x
operator|++
control|)
block|{
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|90
argument_list|)
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|90
argument_list|)
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|90
argument_list|)
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|90
argument_list|)
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|90
argument_list|)
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
literal|90
argument_list|)
operator|+
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|storeFiles
operator|=
name|runIteration
argument_list|(
name|storeFiles
argument_list|)
expr_stmt|;
name|storeFiles
operator|=
name|runIteration
argument_list|(
name|storeFiles
argument_list|)
expr_stmt|;
block|}
block|}
comment|//print out tab delimited so that it can be used in excel/gdocs.
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|cp
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"\t"
operator|+
name|max
operator|+
literal|"\t"
operator|+
name|min
operator|+
literal|"\t"
operator|+
name|ratio
operator|+
literal|"\t"
operator|+
name|written
operator|+
literal|"\t"
operator|+
name|fileDiff
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|StoreFile
argument_list|>
name|runIteration
parameter_list|(
name|List
argument_list|<
name|StoreFile
argument_list|>
name|startingStoreFiles
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|(
name|startingStoreFiles
argument_list|)
decl_stmt|;
name|CompactSelection
name|sel
init|=
name|cp
operator|.
name|selectCompaction
argument_list|(
name|storeFiles
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|newFileSize
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|StoreFile
argument_list|>
name|filesToCompact
init|=
name|sel
operator|.
name|getFilesToCompact
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|filesToCompact
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|storeFiles
operator|=
operator|new
name|ArrayList
argument_list|<
name|StoreFile
argument_list|>
argument_list|(
name|storeFiles
argument_list|)
expr_stmt|;
name|storeFiles
operator|.
name|removeAll
argument_list|(
name|filesToCompact
argument_list|)
expr_stmt|;
for|for
control|(
name|StoreFile
name|storeFile
range|:
name|filesToCompact
control|)
block|{
name|newFileSize
operator|+=
name|storeFile
operator|.
name|getReader
argument_list|()
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|newFileSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|written
operator|+=
name|newFileSize
expr_stmt|;
name|fileDiff
operator|+=
name|storeFiles
operator|.
name|size
argument_list|()
operator|-
name|startingStoreFiles
operator|.
name|size
argument_list|()
expr_stmt|;
return|return
name|storeFiles
return|;
block|}
specifier|private
name|List
argument_list|<
name|StoreFile
argument_list|>
name|createStoreFileList
parameter_list|(
name|int
index|[]
name|fs
parameter_list|)
block|{
name|List
argument_list|<
name|StoreFile
argument_list|>
name|storeFiles
init|=
operator|new
name|LinkedList
argument_list|<
name|StoreFile
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|fileSize
range|:
name|fs
control|)
block|{
name|storeFiles
operator|.
name|add
argument_list|(
name|createMockStoreFile
argument_list|(
name|fileSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|storeFiles
return|;
block|}
specifier|private
name|StoreFile
name|createMockStoreFile
parameter_list|(
name|int
name|sizeMb
parameter_list|)
block|{
return|return
name|createMockStoreFile
argument_list|(
name|sizeMb
argument_list|,
operator|-
literal|1l
argument_list|)
return|;
block|}
specifier|private
name|StoreFile
name|createMockStoreFile
parameter_list|(
name|int
name|sizeMb
parameter_list|,
name|long
name|seqId
parameter_list|)
block|{
name|StoreFile
name|mockSf
init|=
name|mock
argument_list|(
name|StoreFile
operator|.
name|class
argument_list|)
decl_stmt|;
name|StoreFile
operator|.
name|Reader
name|reader
init|=
name|mock
argument_list|(
name|StoreFile
operator|.
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|stringPath
init|=
literal|"/hbase/"
operator|+
name|RandomStringUtils
operator|.
name|random
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|random
argument_list|)
decl_stmt|;
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|stringPath
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|reader
operator|.
name|getSequenceID
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|seqId
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|reader
operator|.
name|getTotalUncompressedBytes
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|sizeMb
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|reader
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|sizeMb
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockSf
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockSf
operator|.
name|excludeFromMinorCompaction
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|mockSf
operator|.
name|isReference
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// TODO come back to
comment|// this when selection takes this into account
name|when
argument_list|(
name|mockSf
operator|.
name|getReader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|String
name|toString
init|=
name|Objects
operator|.
name|toStringHelper
argument_list|(
literal|"MockStoreFile"
argument_list|)
operator|.
name|add
argument_list|(
literal|"isReference"
argument_list|,
literal|false
argument_list|)
operator|.
name|add
argument_list|(
literal|"fileSize"
argument_list|,
name|sizeMb
argument_list|)
operator|.
name|add
argument_list|(
literal|"seqId"
argument_list|,
name|seqId
argument_list|)
operator|.
name|add
argument_list|(
literal|"path"
argument_list|,
name|stringPath
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|mockSf
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|toString
argument_list|)
expr_stmt|;
return|return
name|mockSf
return|;
block|}
specifier|private
name|HStore
name|createMockStore
parameter_list|()
block|{
name|HStore
name|s
init|=
name|mock
argument_list|(
name|HStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|s
operator|.
name|getStoreFileTtl
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
block|}
end_class

end_unit

