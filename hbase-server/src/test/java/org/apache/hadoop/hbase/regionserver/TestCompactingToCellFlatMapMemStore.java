begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|MemoryCompactionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ClassSize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * compacted memstore test case  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestCompactingToCellFlatMapMemStore
extends|extends
name|TestCompactingMemStore
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestCompactingToCellFlatMapMemStore
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Object
index|[]
name|data
parameter_list|()
block|{
return|return
operator|new
name|Object
index|[]
block|{
literal|"CHUNK_MAP"
block|,
literal|"ARRAY_MAP"
block|}
return|;
comment|// test different immutable indexes
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCompactingToCellFlatMapMemStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
name|boolean
name|toCellChunkMap
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Helpers
comment|//////////////////////////////////////////////////////////////////////////////
specifier|public
name|TestCompactingToCellFlatMapMemStore
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|"CHUNK_MAP"
condition|)
block|{
name|toCellChunkMap
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|toCellChunkMap
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|chunkCreator
operator|.
name|clearChunksInPool
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|compactingSetUp
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
comment|// set memstore to do data compaction
name|conf
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|MemoryCompactionPolicy
operator|.
name|EAGER
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setDouble
argument_list|(
name|CompactingMemStore
operator|.
name|IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY
argument_list|,
literal|0.02
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|=
operator|new
name|MyCompactingMemStore
argument_list|(
name|conf
argument_list|,
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|,
name|store
argument_list|,
name|regionServicesForStores
argument_list|,
name|MemoryCompactionPolicy
operator|.
name|EAGER
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Compaction tests
comment|//////////////////////////////////////////////////////////////////////////////
annotation|@
name|Override
specifier|public
name|void
name|testCompaction1Bucket
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
decl_stmt|;
comment|//A1, A2, B3, C4
if|if
condition|(
name|toCellChunkMap
condition|)
block|{
comment|// set memstore to flat into CellChunkMap
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|CHUNK_MAP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|ARRAY_MAP
argument_list|)
expr_stmt|;
block|}
comment|// test 1 bucket
name|long
name|totalCellsLen
init|=
name|addRowsByKeysDataSize
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|)
decl_stmt|;
name|long
name|cellBeforeFlushSize
init|=
name|cellBeforeFlushSize
argument_list|()
decl_stmt|;
name|long
name|cellAfterFlushSize
init|=
name|cellAfterFlushSize
argument_list|()
decl_stmt|;
name|long
name|totalHeapSize
init|=
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
literal|4
operator|*
name|cellBeforeFlushSize
decl_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// One cell is duplicated and the compaction will remove it. All cells of same size so adjusting
comment|// totalCellsLen
name|totalCellsLen
operator|=
operator|(
name|totalCellsLen
operator|*
literal|3
operator|)
operator|/
literal|4
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|totalHeapSize
operator|=
literal|3
operator|*
name|cellAfterFlushSize
operator|+
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
operator|(
name|toCellChunkMap
condition|?
name|CellChunkImmutableSegment
operator|.
name|DEEP_OVERHEAD_CCM
else|:
name|CellArrayImmutableSegment
operator|.
name|DEEP_OVERHEAD_CAM
operator|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Segment
name|s
range|:
name|memstore
operator|.
name|getSegments
argument_list|()
control|)
block|{
name|counter
operator|+=
name|s
operator|.
name|getCellsCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|MemStoreSize
name|mss
init|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
decl_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// push keys to snapshot
name|region
operator|.
name|decrMemStoreSize
argument_list|(
name|mss
argument_list|)
expr_stmt|;
comment|// simulate flusher
name|ImmutableSegment
name|s
init|=
name|memstore
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|s
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testCompaction2Buckets
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|toCellChunkMap
condition|)
block|{
comment|// set memstore to flat into CellChunkMap
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|CHUNK_MAP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|ARRAY_MAP
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
decl_stmt|;
name|String
index|[]
name|keys2
init|=
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"D"
block|}
decl_stmt|;
name|long
name|totalCellsLen1
init|=
name|addRowsByKeysDataSize
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|)
decl_stmt|;
comment|// INSERT 4
name|long
name|cellBeforeFlushSize
init|=
name|cellBeforeFlushSize
argument_list|()
decl_stmt|;
name|long
name|cellAfterFlushSize
init|=
name|cellAfterFlushSize
argument_list|()
decl_stmt|;
name|long
name|totalHeapSize1
init|=
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
literal|4
operator|*
name|cellBeforeFlushSize
decl_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen1
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize1
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
name|int
name|counter
init|=
literal|0
decl_stmt|;
comment|// COMPACT 4->3
for|for
control|(
name|Segment
name|s
range|:
name|memstore
operator|.
name|getSegments
argument_list|()
control|)
block|{
name|counter
operator|+=
name|s
operator|.
name|getCellsCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// One cell is duplicated and the compaction will remove it. All cells of same size so adjusting
comment|// totalCellsLen
name|totalCellsLen1
operator|=
operator|(
name|totalCellsLen1
operator|*
literal|3
operator|)
operator|/
literal|4
expr_stmt|;
name|totalHeapSize1
operator|=
literal|3
operator|*
name|cellAfterFlushSize
operator|+
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
operator|(
name|toCellChunkMap
condition|?
name|CellChunkImmutableSegment
operator|.
name|DEEP_OVERHEAD_CCM
else|:
name|CellArrayImmutableSegment
operator|.
name|DEEP_OVERHEAD_CAM
operator|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen1
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize1
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|totalCellsLen2
init|=
name|addRowsByKeysDataSize
argument_list|(
name|memstore
argument_list|,
name|keys2
argument_list|)
decl_stmt|;
comment|// INSERT 3 (3+3=6)
name|long
name|totalHeapSize2
init|=
literal|3
operator|*
name|cellBeforeFlushSize
decl_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen1
operator|+
name|totalCellsLen2
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize1
operator|+
name|totalHeapSize2
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// COMPACT 6->4
name|counter
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Segment
name|s
range|:
name|memstore
operator|.
name|getSegments
argument_list|()
control|)
block|{
name|counter
operator|+=
name|s
operator|.
name|getCellsCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|totalCellsLen2
operator|=
name|totalCellsLen2
operator|/
literal|3
expr_stmt|;
comment|// 2 cells duplicated in set 2
name|assertEquals
argument_list|(
name|totalCellsLen1
operator|+
name|totalCellsLen2
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|totalHeapSize2
operator|=
literal|1
operator|*
name|cellAfterFlushSize
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize1
operator|+
name|totalHeapSize2
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|MemStoreSize
name|mss
init|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
decl_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// push keys to snapshot
comment|// simulate flusher
name|region
operator|.
name|decrMemStoreSize
argument_list|(
name|mss
argument_list|)
expr_stmt|;
name|ImmutableSegment
name|s
init|=
name|memstore
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|s
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|testCompaction3Buckets
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|toCellChunkMap
condition|)
block|{
comment|// set memstore to flat into CellChunkMap
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|CHUNK_MAP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set to CellArrayMap as CCM is configured by default due to MSLAB usage
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|ARRAY_MAP
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
decl_stmt|;
name|String
index|[]
name|keys2
init|=
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"D"
block|}
decl_stmt|;
name|String
index|[]
name|keys3
init|=
block|{
literal|"D"
block|,
literal|"B"
block|,
literal|"B"
block|}
decl_stmt|;
name|long
name|totalCellsLen1
init|=
name|addRowsByKeysDataSize
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|)
decl_stmt|;
name|long
name|cellBeforeFlushSize
init|=
name|cellBeforeFlushSize
argument_list|()
decl_stmt|;
name|long
name|cellAfterFlushSize
init|=
name|cellAfterFlushSize
argument_list|()
decl_stmt|;
name|long
name|totalHeapSize1
init|=
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
literal|4
operator|*
name|cellBeforeFlushSize
decl_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen1
argument_list|,
name|region
operator|.
name|getMemStoreDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize1
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|MemStoreSize
name|mss
init|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
decl_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// One cell is duplicated and the compaction will remove it. All cells of same size so adjusting
comment|// totalCellsLen
name|totalCellsLen1
operator|=
operator|(
name|totalCellsLen1
operator|*
literal|3
operator|)
operator|/
literal|4
expr_stmt|;
name|totalHeapSize1
operator|=
literal|3
operator|*
name|cellAfterFlushSize
operator|+
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
operator|(
name|toCellChunkMap
condition|?
name|CellChunkImmutableSegment
operator|.
name|DEEP_OVERHEAD_CCM
else|:
name|CellArrayImmutableSegment
operator|.
name|DEEP_OVERHEAD_CAM
operator|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen1
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize1
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|totalCellsLen2
init|=
name|addRowsByKeysDataSize
argument_list|(
name|memstore
argument_list|,
name|keys2
argument_list|)
decl_stmt|;
name|long
name|totalHeapSize2
init|=
literal|3
operator|*
name|cellBeforeFlushSize
decl_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen1
operator|+
name|totalCellsLen2
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize1
operator|+
name|totalHeapSize2
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyCompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|disableCompaction
argument_list|()
expr_stmt|;
name|mss
operator|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline without compaction
name|totalHeapSize2
operator|=
name|totalHeapSize2
operator|+
name|CSLMImmutableSegment
operator|.
name|DEEP_OVERHEAD_CSLM
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen1
operator|+
name|totalCellsLen2
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize1
operator|+
name|totalHeapSize2
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|totalCellsLen3
init|=
name|addRowsByKeysDataSize
argument_list|(
name|memstore
argument_list|,
name|keys3
argument_list|)
decl_stmt|;
name|long
name|totalHeapSize3
init|=
literal|3
operator|*
name|cellBeforeFlushSize
decl_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen1
operator|+
name|totalCellsLen2
operator|+
name|totalCellsLen3
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize1
operator|+
name|totalHeapSize2
operator|+
name|totalHeapSize3
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyCompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|enableCompaction
argument_list|()
expr_stmt|;
name|mss
operator|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// active flushed to pipeline and all 3 segments compacted. Will get rid of duplicated cells.
comment|// Out of total 10, only 4 cells are unique
name|totalCellsLen2
operator|=
name|totalCellsLen2
operator|/
literal|3
expr_stmt|;
comment|// 2 out of 3 cells are duplicated
name|totalCellsLen3
operator|=
literal|0
expr_stmt|;
comment|// All duplicated cells.
name|assertEquals
argument_list|(
name|totalCellsLen1
operator|+
name|totalCellsLen2
operator|+
name|totalCellsLen3
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only 4 unique cells left
name|long
name|totalHeapSize4
init|=
literal|4
operator|*
name|cellAfterFlushSize
operator|+
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
operator|(
name|toCellChunkMap
condition|?
name|CellChunkImmutableSegment
operator|.
name|DEEP_OVERHEAD_CCM
else|:
name|CellArrayImmutableSegment
operator|.
name|DEEP_OVERHEAD_CAM
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize4
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|mss
operator|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
expr_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// push keys to snapshot
comment|// simulate flusher
name|region
operator|.
name|decrMemStoreSize
argument_list|(
name|mss
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|mss
operator|.
name|getHeapSize
argument_list|()
argument_list|,
name|mss
operator|.
name|getOffHeapSize
argument_list|()
argument_list|)
expr_stmt|;
name|ImmutableSegment
name|s
init|=
name|memstore
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|s
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Merging tests
comment|//////////////////////////////////////////////////////////////////////////////
annotation|@
name|Test
specifier|public
name|void
name|testMerging
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|toCellChunkMap
condition|)
block|{
comment|// set memstore to flat into CellChunkMap
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|CHUNK_MAP
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|,
literal|"F"
block|,
literal|"H"
block|}
decl_stmt|;
name|String
index|[]
name|keys2
init|=
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"D"
block|,
literal|"G"
block|,
literal|"I"
block|,
literal|"J"
block|}
decl_stmt|;
name|String
index|[]
name|keys3
init|=
block|{
literal|"D"
block|,
literal|"B"
block|,
literal|"B"
block|,
literal|"E"
block|}
decl_stmt|;
name|MemoryCompactionPolicy
name|compactionType
init|=
name|MemoryCompactionPolicy
operator|.
name|BASIC
decl_stmt|;
name|memstore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|compactionType
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyCompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|initiateType
argument_list|(
name|compactionType
argument_list|,
name|memstore
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|addRowsByKeysDataSize
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline should not compact
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|addRowsByKeysDataSize
argument_list|(
name|memstore
argument_list|,
name|keys2
argument_list|)
expr_stmt|;
comment|// also should only flatten
name|int
name|counter2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
name|s
range|:
name|memstore
operator|.
name|getSegments
argument_list|()
control|)
block|{
name|counter2
operator|+=
name|s
operator|.
name|getCellsCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|counter2
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyCompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|disableCompaction
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline without flattening
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter3
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
name|s
range|:
name|memstore
operator|.
name|getSegments
argument_list|()
control|)
block|{
name|counter3
operator|+=
name|s
operator|.
name|getCellsCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|counter3
argument_list|)
expr_stmt|;
name|addRowsByKeysDataSize
argument_list|(
name|memstore
argument_list|,
name|keys3
argument_list|)
expr_stmt|;
name|int
name|counter4
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
name|s
range|:
name|memstore
operator|.
name|getSegments
argument_list|()
control|)
block|{
name|counter4
operator|+=
name|s
operator|.
name|getCellsCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|counter4
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyCompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|enableCompaction
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and compact
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Segment
name|s
range|:
name|memstore
operator|.
name|getSegments
argument_list|()
control|)
block|{
name|counter
operator|+=
name|s
operator|.
name|getCellsCount
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|16
argument_list|,
name|counter
argument_list|)
expr_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// push keys to snapshot
name|ImmutableSegment
name|s
init|=
name|memstore
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeRangeAfterCompaction
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|toCellChunkMap
condition|)
block|{
comment|// set memstore to flat into CellChunkMap
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|CHUNK_MAP
argument_list|)
expr_stmt|;
block|}
name|testTimeRange
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeRangeAfterMerge
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|toCellChunkMap
condition|)
block|{
comment|// set memstore to flat into CellChunkMap
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|CHUNK_MAP
argument_list|)
expr_stmt|;
block|}
name|MemoryCompactionPolicy
name|compactionType
init|=
name|MemoryCompactionPolicy
operator|.
name|BASIC
decl_stmt|;
name|memstore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|compactionType
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyCompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|initiateType
argument_list|(
name|compactionType
argument_list|,
name|memstore
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|testTimeRange
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testTimeRange
parameter_list|(
name|boolean
name|isCompaction
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|initTs
init|=
literal|100
decl_stmt|;
name|long
name|currentTs
init|=
name|initTs
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"qf1"
argument_list|)
decl_stmt|;
comment|// first segment in pipeline
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
operator|++
name|currentTs
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|long
name|minTs
init|=
name|currentTs
decl_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
operator|++
name|currentTs
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|long
name|numberOfCell
init|=
literal|2
decl_stmt|;
name|assertEquals
argument_list|(
name|numberOfCell
argument_list|,
name|memstore
operator|.
name|getSegments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|Segment
operator|::
name|getCellsCount
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minTs
argument_list|,
name|memstore
operator|.
name|getSegments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getTimeRangeTracker
argument_list|()
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|min
argument_list|()
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentTs
argument_list|,
name|memstore
operator|.
name|getSegments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getTimeRangeTracker
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|max
argument_list|()
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isCompaction
condition|)
block|{
comment|// max version = 1, so one cell will be dropped.
name|numberOfCell
operator|=
literal|1
expr_stmt|;
name|minTs
operator|=
name|currentTs
expr_stmt|;
block|}
comment|// second segment in pipeline
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
operator|++
name|currentTs
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf1
argument_list|,
operator|++
name|currentTs
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|numberOfCell
operator|+=
literal|2
expr_stmt|;
name|assertEquals
argument_list|(
name|numberOfCell
argument_list|,
name|memstore
operator|.
name|getSegments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|Segment
operator|::
name|getCellsCount
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minTs
argument_list|,
name|memstore
operator|.
name|getSegments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getTimeRangeTracker
argument_list|()
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|min
argument_list|()
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentTs
argument_list|,
name|memstore
operator|.
name|getSegments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getTimeRangeTracker
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|max
argument_list|()
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// trigger the merge
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isCompaction
condition|)
block|{
comment|// max version = 1, so one cell will be dropped.
name|numberOfCell
operator|=
literal|1
expr_stmt|;
name|minTs
operator|=
name|currentTs
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|numberOfCell
argument_list|,
name|memstore
operator|.
name|getSegments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|Segment
operator|::
name|getCellsCount
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|minTs
argument_list|,
name|memstore
operator|.
name|getSegments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getTimeRangeTracker
argument_list|()
operator|.
name|getMin
argument_list|()
argument_list|)
operator|.
name|min
argument_list|()
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|currentTs
argument_list|,
name|memstore
operator|.
name|getSegments
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|m
lambda|->
name|m
operator|.
name|getTimeRangeTracker
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
operator|.
name|max
argument_list|()
operator|.
name|getAsLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountOfCellsAfterFlatteningByScan
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
decl_stmt|;
comment|// A, B, C
name|addRowsByKeysWith50Cols
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|)
expr_stmt|;
comment|// this should only flatten as there are no duplicates
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|memstore
operator|.
name|getScanners
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
comment|// seek
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scanners
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|scanners
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|seek
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
expr_stmt|;
while|while
condition|(
name|scanners
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"the count should be "
argument_list|,
literal|150
argument_list|,
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scanners
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|scanners
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCountOfCellsAfterFlatteningByIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
decl_stmt|;
comment|// A, B, C
name|addRowsByKeysWith50Cols
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|)
expr_stmt|;
comment|// this should only flatten as there are no duplicates
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// Just doing the cnt operation here
name|MemStoreSegmentsIterator
name|itr
init|=
operator|new
name|MemStoreMergerSegmentsIterator
argument_list|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|getImmutableSegments
argument_list|()
operator|.
name|getStoreSegments
argument_list|()
argument_list|,
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|itr
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|itr
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"the count should be "
argument_list|,
literal|150
argument_list|,
name|cnt
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addRowsByKeysWith50Cols
parameter_list|(
name|AbstractMemStore
name|hmc
parameter_list|,
name|String
index|[]
name|keys
parameter_list|)
block|{
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// to make sure each kv gets a different ts
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|50
condition|;
name|j
operator|++
control|)
block|{
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
operator|+
name|j
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keys
index|[
name|i
index|]
operator|+
name|j
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|timestamp
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|hmc
operator|.
name|add
argument_list|(
name|kv
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testPuttingBackChunksWithOpeningScanner
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf6
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier6"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf7
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier7"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
comment|// Setting up memstore
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Creating a snapshot
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Adding value to "new" memstore
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf4
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf5
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// opening scanner before clear the snapshot
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|scanners
init|=
name|memstore
operator|.
name|getScanners
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Shouldn't putting back the chunks to pool,since some scanners are opening
comment|// based on their data
comment|// close the scanners
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|snapshot
operator|.
name|getScanners
argument_list|()
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chunkCreator
operator|.
name|getPoolSize
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Chunks will be put back to pool after close scanners;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|chunkCreator
operator|.
name|getPoolSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// clear chunks
name|chunkCreator
operator|.
name|clearChunksInPool
argument_list|()
expr_stmt|;
comment|// Creating another snapshot
name|snapshot
operator|=
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
comment|// Adding more value
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf6
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf7
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// opening scanners
name|scanners
operator|=
name|memstore
operator|.
name|getScanners
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// close scanners before clear the snapshot
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|scanners
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Since no opening scanner, the chunks of snapshot should be put back to
comment|// pool
comment|// close the scanners
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|snapshot
operator|.
name|getScanners
argument_list|()
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|chunkCreator
operator|.
name|getPoolSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Test
specifier|public
name|void
name|testPuttingBackChunksAfterFlushing
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
comment|// Setting up memstore
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Creating a snapshot
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Adding value to "new" memstore
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf4
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf5
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// close the scanners
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|snapshot
operator|.
name|getScanners
argument_list|()
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|chunkCount
init|=
name|chunkCreator
operator|.
name|getPoolSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|chunkCount
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlatteningToCellChunkMap
parameter_list|()
throws|throws
name|IOException
block|{
comment|// set memstore to flat into CellChunkMap
name|MemoryCompactionPolicy
name|compactionType
init|=
name|MemoryCompactionPolicy
operator|.
name|BASIC
decl_stmt|;
name|memstore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|compactionType
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyCompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|initiateType
argument_list|(
name|compactionType
argument_list|,
name|memstore
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|CHUNK_MAP
argument_list|)
expr_stmt|;
name|int
name|numOfCells
init|=
literal|8
decl_stmt|;
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|,
literal|"D"
block|,
literal|"D"
block|,
literal|"E"
block|,
literal|"F"
block|}
decl_stmt|;
comment|//A1, A2, B3, C4, D5, D6, E7, F8
comment|// make one cell
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keys1
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keys1
index|[
literal|0
index|]
operator|+
literal|0
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
comment|// test 1 bucket
name|int
name|totalCellsLen
init|=
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|)
decl_stmt|;
name|long
name|oneCellOnCSLMHeapSize
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|CONCURRENT_SKIPLISTMAP_ENTRY
operator|+
name|KeyValue
operator|.
name|FIXED_OVERHEAD
operator|+
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|kv
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|totalHeapSize
init|=
name|numOfCells
operator|*
name|oneCellOnCSLMHeapSize
operator|+
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
decl_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and flatten
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|oneCellOnCCMHeapSize
init|=
name|ClassSize
operator|.
name|CELL_CHUNK_MAP_ENTRY
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|kv
argument_list|)
argument_list|)
decl_stmt|;
name|totalHeapSize
operator|=
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
name|CellChunkImmutableSegment
operator|.
name|DEEP_OVERHEAD_CCM
operator|+
name|numOfCells
operator|*
name|oneCellOnCCMHeapSize
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|MemStoreSize
name|mss
init|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
decl_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// push keys to snapshot
comment|// simulate flusher
name|region
operator|.
name|decrMemStoreSize
argument_list|(
name|mss
argument_list|)
expr_stmt|;
name|ImmutableSegment
name|s
init|=
name|memstore
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numOfCells
argument_list|,
name|s
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * CellChunkMap Segment index requires all cell data to be written in the MSLAB Chunks.    * Even though MSLAB is enabled, cells bigger than maxAlloc    * (even if smaller than the size of a chunk) are not written in the MSLAB Chunks.    * If such cells are found in the process of flattening into CellChunkMap    * (in-memory-flush) they need to be copied into MSLAB.    * testFlatteningToBigCellChunkMap checks that the process of flattening into    * CellChunkMap succeeds, even when such big cells are allocated.    */
annotation|@
name|Test
specifier|public
name|void
name|testFlatteningToBigCellChunkMap
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|toCellChunkMap
operator|==
literal|false
condition|)
block|{
return|return;
block|}
comment|// set memstore to flat into CellChunkMap
name|MemoryCompactionPolicy
name|compactionType
init|=
name|MemoryCompactionPolicy
operator|.
name|BASIC
decl_stmt|;
name|memstore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|compactionType
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyCompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|initiateType
argument_list|(
name|compactionType
argument_list|,
name|memstore
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|CHUNK_MAP
argument_list|)
expr_stmt|;
name|int
name|numOfCells
init|=
literal|4
decl_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|MemStoreLAB
operator|.
name|MAX_ALLOC_DEFAULT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chars
index|[
name|i
index|]
operator|=
literal|'A'
expr_stmt|;
block|}
name|String
name|bigVal
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
decl_stmt|;
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|,
literal|"D"
block|}
decl_stmt|;
comment|// make one cell
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keys1
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|bigVal
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
comment|// test 1 bucket
name|int
name|totalCellsLen
init|=
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|oneCellOnCSLMHeapSize
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|CONCURRENT_SKIPLISTMAP_ENTRY
operator|+
name|kv
operator|.
name|heapSize
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|totalHeapSize
init|=
name|numOfCells
operator|*
name|oneCellOnCSLMHeapSize
operator|+
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
decl_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and flatten
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// One cell is duplicated, but it shouldn't be compacted because we are in BASIC mode.
comment|// totalCellsLen should remain the same
name|long
name|oneCellOnCCMHeapSize
init|=
name|ClassSize
operator|.
name|CELL_CHUNK_MAP_ENTRY
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|kv
argument_list|)
argument_list|)
decl_stmt|;
name|totalHeapSize
operator|=
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
name|CellChunkImmutableSegment
operator|.
name|DEEP_OVERHEAD_CCM
operator|+
name|numOfCells
operator|*
name|oneCellOnCCMHeapSize
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|MemStoreSize
name|mss
init|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
decl_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// push keys to snapshot
comment|// simulate flusher
name|region
operator|.
name|decrMemStoreSize
argument_list|(
name|mss
argument_list|)
expr_stmt|;
name|ImmutableSegment
name|s
init|=
name|memstore
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numOfCells
argument_list|,
name|s
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * CellChunkMap Segment index requires all cell data to be written in the MSLAB Chunks.    * Even though MSLAB is enabled, cells bigger than the size of a chunk are not    * written in the MSLAB Chunks.    * If such cells are found in the process of flattening into CellChunkMap    * (in-memory-flush) they need to be copied into MSLAB.    * testFlatteningToJumboCellChunkMap checks that the process of flattening    * into CellChunkMap succeeds, even when such big cells are allocated.    */
annotation|@
name|Test
specifier|public
name|void
name|testFlatteningToJumboCellChunkMap
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|toCellChunkMap
operator|==
literal|false
condition|)
block|{
return|return;
block|}
comment|// set memstore to flat into CellChunkMap
name|MemoryCompactionPolicy
name|compactionType
init|=
name|MemoryCompactionPolicy
operator|.
name|BASIC
decl_stmt|;
name|memstore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|compactionType
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyCompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|initiateType
argument_list|(
name|compactionType
argument_list|,
name|memstore
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|CHUNK_MAP
argument_list|)
expr_stmt|;
name|int
name|numOfCells
init|=
literal|1
decl_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|MemStoreLAB
operator|.
name|CHUNK_SIZE_DEFAULT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chars
index|[
name|i
index|]
operator|=
literal|'A'
expr_stmt|;
block|}
name|String
name|bigVal
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
decl_stmt|;
name|String
index|[]
name|keys1
init|=
block|{
literal|"A"
block|}
decl_stmt|;
comment|// make one cell
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keys1
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|bigVal
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
comment|// test 1 bucket
name|int
name|totalCellsLen
init|=
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keys1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|oneCellOnCSLMHeapSize
init|=
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|CONCURRENT_SKIPLISTMAP_ENTRY
operator|+
name|kv
operator|.
name|heapSize
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|totalHeapSize
init|=
name|numOfCells
operator|*
name|oneCellOnCSLMHeapSize
operator|+
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
decl_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|flushInMemory
argument_list|()
expr_stmt|;
comment|// push keys to pipeline and flatten
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// One cell is duplicated, but it shouldn't be compacted because we are in BASIC mode.
comment|// totalCellsLen should remain the same
name|long
name|oneCellOnCCMHeapSize
init|=
name|ClassSize
operator|.
name|CELL_CHUNK_MAP_ENTRY
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|kv
argument_list|)
argument_list|)
decl_stmt|;
name|totalHeapSize
operator|=
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
name|CellChunkImmutableSegment
operator|.
name|DEEP_OVERHEAD_CCM
operator|+
name|numOfCells
operator|*
name|oneCellOnCCMHeapSize
expr_stmt|;
name|assertEquals
argument_list|(
name|totalCellsLen
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
name|MemStoreSize
name|mss
init|=
name|memstore
operator|.
name|getFlushableSize
argument_list|()
decl_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// push keys to snapshot
comment|// simulate flusher
name|region
operator|.
name|decrMemStoreSize
argument_list|(
name|mss
argument_list|)
expr_stmt|;
name|ImmutableSegment
name|s
init|=
name|memstore
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numOfCells
argument_list|,
name|s
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|regionServicesForStores
operator|.
name|getMemStoreSize
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Allocating two big cells (too big for being copied into a regular chunk).
name|String
index|[]
name|keys2
init|=
block|{
literal|"C"
block|,
literal|"D"
block|}
decl_stmt|;
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keys2
argument_list|,
name|val
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// The in-memory flush size is bigger than the size of a single cell,
comment|// but smaller than the size of two cells.
comment|// Therefore, the two created cells are flattened together.
name|totalHeapSize
operator|=
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|+
name|CellChunkImmutableSegment
operator|.
name|DEEP_OVERHEAD_CCM
operator|+
literal|2
operator|*
name|oneCellOnCCMHeapSize
expr_stmt|;
name|assertEquals
argument_list|(
name|totalHeapSize
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * CellChunkMap Segment index requires all cell data to be written in the MSLAB Chunks.    * Even though MSLAB is enabled, cells bigger than the size of a chunk are not    * written in the MSLAB Chunks.    * If such cells are found in the process of a merge they need to be copied into MSLAB.    * testForceCopyOfBigCellIntoImmutableSegment checks that the    * ImmutableMemStoreLAB's forceCopyOfBigCellInto does what it's supposed to do.    */
annotation|@
name|Test
specifier|public
name|void
name|testForceCopyOfBigCellIntoImmutableSegment
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|toCellChunkMap
operator|==
literal|false
condition|)
block|{
return|return;
block|}
comment|// set memstore to flat into CellChunkMap
name|MemoryCompactionPolicy
name|compactionType
init|=
name|MemoryCompactionPolicy
operator|.
name|BASIC
decl_stmt|;
name|memstore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setInt
argument_list|(
name|MemStoreCompactionStrategy
operator|.
name|COMPACTING_MEMSTORE_THRESHOLD_KEY
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|getConfiguration
argument_list|()
operator|.
name|set
argument_list|(
name|CompactingMemStore
operator|.
name|COMPACTING_MEMSTORE_TYPE_KEY
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|compactionType
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MyCompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|initiateType
argument_list|(
name|compactionType
argument_list|,
name|memstore
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|setIndexType
argument_list|(
name|CompactingMemStore
operator|.
name|IndexType
operator|.
name|CHUNK_MAP
argument_list|)
expr_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|MemStoreLAB
operator|.
name|CHUNK_SIZE_DEFAULT
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chars
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|chars
index|[
name|i
index|]
operator|=
literal|'A'
expr_stmt|;
block|}
name|String
name|bigVal
init|=
operator|new
name|String
argument_list|(
name|chars
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|bigVal
argument_list|)
decl_stmt|;
comment|// We need to add two cells, five times, in order to guarantee a merge
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|keysList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|keysList
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|}
argument_list|)
expr_stmt|;
name|keysList
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"C"
block|,
literal|"D"
block|}
argument_list|)
expr_stmt|;
name|keysList
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"E"
block|,
literal|"F"
block|}
argument_list|)
expr_stmt|;
name|keysList
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"G"
block|,
literal|"H"
block|}
argument_list|)
expr_stmt|;
name|keysList
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"I"
block|,
literal|"J"
block|}
argument_list|)
expr_stmt|;
comment|// Measuring the size of a single kv
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|oneCellOnCCMHeapSize
init|=
name|ClassSize
operator|.
name|CELL_CHUNK_MAP_ENTRY
operator|+
name|ClassSize
operator|.
name|align
argument_list|(
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|kv
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|totalHeapSize
init|=
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|addRowsByKeys
argument_list|(
name|memstore
argument_list|,
name|keysList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|isMemStoreFlushingInMemory
argument_list|()
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
comment|// The in-memory flush size is bigger than the size of a single cell,
comment|// but smaller than the size of two cells.
comment|// Therefore, the two created cells are flattened together.
name|totalHeapSize
operator|+=
name|CellChunkImmutableSegment
operator|.
name|DEEP_OVERHEAD_CCM
operator|+
literal|2
operator|*
name|oneCellOnCCMHeapSize
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|4
condition|)
block|{
comment|// Four out of the five are merged into one,
comment|// and the segment becomes immutable
name|totalHeapSize
operator|-=
operator|(
literal|3
operator|*
name|CellChunkImmutableSegment
operator|.
name|DEEP_OVERHEAD_CCM
operator|+
name|MutableSegment
operator|.
name|DEEP_OVERHEAD
operator|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|totalHeapSize
argument_list|,
operator|(
operator|(
name|CompactingMemStore
operator|)
name|memstore
operator|)
operator|.
name|heapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|addRowsByKeysDataSize
parameter_list|(
specifier|final
name|AbstractMemStore
name|hmc
parameter_list|,
name|String
index|[]
name|keys
parameter_list|)
block|{
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
decl_stmt|;
name|MemStoreSizing
name|memstoreSizing
init|=
operator|new
name|NonThreadSafeMemStoreSizing
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Threads
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// to make sure each kv gets a different ts
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keys
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|keys
index|[
name|i
index|]
operator|+
name|i
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|timestamp
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|hmc
operator|.
name|add
argument_list|(
name|kv
argument_list|,
name|memstoreSizing
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"added kv: "
operator|+
name|kv
operator|.
name|getKeyString
argument_list|()
operator|+
literal|", timestamp"
operator|+
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MemStoreSize
name|mss
init|=
name|memstoreSizing
operator|.
name|getMemStoreSize
argument_list|()
decl_stmt|;
name|regionServicesForStores
operator|.
name|addMemStoreSize
argument_list|(
name|mss
operator|.
name|getDataSize
argument_list|()
argument_list|,
name|mss
operator|.
name|getHeapSize
argument_list|()
argument_list|,
name|mss
operator|.
name|getOffHeapSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|mss
operator|.
name|getDataSize
argument_list|()
return|;
block|}
specifier|private
name|long
name|cellBeforeFlushSize
parameter_list|()
block|{
comment|// make one cell
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
operator|+
literal|0
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
return|return
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|CONCURRENT_SKIPLISTMAP_ENTRY
operator|+
name|KeyValue
operator|.
name|FIXED_OVERHEAD
operator|+
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|kv
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|long
name|cellAfterFlushSize
parameter_list|()
block|{
comment|// make one cell
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
operator|+
literal|0
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|val
argument_list|)
decl_stmt|;
return|return
name|toCellChunkMap
condition|?
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|CELL_CHUNK_MAP_ENTRY
operator|+
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|kv
argument_list|)
argument_list|)
else|:
name|ClassSize
operator|.
name|align
argument_list|(
name|ClassSize
operator|.
name|CELL_ARRAY_MAP_ENTRY
operator|+
name|KeyValue
operator|.
name|FIXED_OVERHEAD
operator|+
name|KeyValueUtil
operator|.
name|length
argument_list|(
name|kv
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

