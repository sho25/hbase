begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|IntStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SmallTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAllowPartialScanResultCache
block|{
specifier|private
specifier|static
name|byte
index|[]
name|CF
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cf"
argument_list|)
decl_stmt|;
specifier|private
name|AllowPartialScanResultCache
name|resultCache
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|resultCache
operator|=
operator|new
name|AllowPartialScanResultCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|resultCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resultCache
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
name|Cell
name|createCell
parameter_list|(
name|int
name|key
parameter_list|,
name|int
name|cq
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|,
name|CF
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq"
operator|+
name|cq
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|assertSame
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
name|resultCache
operator|.
name|addAndGet
argument_list|(
name|ScanResultCache
operator|.
name|EMPTY_RESULT_ARRAY
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
index|[]
name|cells1
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
name|createCell
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|Cell
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|Cell
index|[]
name|cells2
init|=
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|i
lambda|->
name|createCell
argument_list|(
literal|2
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|Cell
index|[]
operator|::
operator|new
argument_list|)
decl_stmt|;
name|Result
index|[]
name|results1
init|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|cells1
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results1
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results1
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results1
index|[
literal|0
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results1
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Result
index|[]
name|results2
init|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|Result
operator|.
name|create
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|cells1
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results2
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results2
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results2
index|[
literal|0
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results2
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Result
index|[]
name|results3
init|=
name|resultCache
operator|.
name|addAndGet
argument_list|(
operator|new
name|Result
index|[]
block|{
name|Result
operator|.
name|create
argument_list|(
name|cells1
argument_list|)
block|,
name|Result
operator|.
name|create
argument_list|(
name|cells2
argument_list|)
block|}
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results3
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results3
index|[
literal|0
index|]
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|results3
index|[
literal|0
index|]
operator|.
name|rawCells
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|IntStream
operator|.
name|range
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|forEach
argument_list|(
name|i
lambda|->
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|Bytes
operator|.
name|toInt
argument_list|(
name|results3
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|(
name|CF
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"cq"
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

