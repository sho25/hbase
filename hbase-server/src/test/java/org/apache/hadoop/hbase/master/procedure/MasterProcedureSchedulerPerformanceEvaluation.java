begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|procedure
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|TableLockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|Procedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|ProcedureTestingUtility
operator|.
name|TestProcedure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|procedure2
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|AbstractHBaseTool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_comment
comment|/**  * Tool to test performance of locks and queues in procedure scheduler independently from other  * framework components.  * Inserts table and region operations in the scheduler, then polls them and exercises their locks  * Number of tables, regions and operations can be set using cli args.  */
end_comment

begin_class
specifier|public
class|class
name|MasterProcedureSchedulerPerformanceEvaluation
extends|extends
name|AbstractHBaseTool
block|{
specifier|protected
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// Command line options and defaults.
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_TABLES
init|=
literal|5
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Option
name|NUM_TABLES_OPTION
init|=
operator|new
name|Option
argument_list|(
literal|"num_table"
argument_list|,
literal|true
argument_list|,
literal|"Number of tables to use for table operations. Default: "
operator|+
name|DEFAULT_NUM_TABLES
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_REGIONS_PER_TABLE
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Option
name|REGIONS_PER_TABLE_OPTION
init|=
operator|new
name|Option
argument_list|(
literal|"regions_per_table"
argument_list|,
literal|true
argument_list|,
literal|"Total number of regions per table. Default: "
operator|+
name|DEFAULT_REGIONS_PER_TABLE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_OPERATIONS
init|=
literal|10000000
decl_stmt|;
comment|// 10M
specifier|public
specifier|static
specifier|final
name|Option
name|NUM_OPERATIONS_OPTION
init|=
operator|new
name|Option
argument_list|(
literal|"num_ops"
argument_list|,
literal|true
argument_list|,
literal|"Total number of operations to schedule. Default: "
operator|+
name|DEFAULT_NUM_OPERATIONS
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_NUM_THREADS
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Option
name|NUM_THREADS_OPTION
init|=
operator|new
name|Option
argument_list|(
literal|"threads"
argument_list|,
literal|true
argument_list|,
literal|"Number of procedure executor threads. Default: "
operator|+
name|DEFAULT_NUM_THREADS
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_OPS_TYPE
init|=
literal|"both"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Option
name|OPS_TYPE_OPTION
init|=
operator|new
name|Option
argument_list|(
literal|"ops_type"
argument_list|,
literal|true
argument_list|,
literal|"Type of operations to run. Value can be table/region/both. In case of 'both', "
operator|+
literal|"proportion of table:region ops is 1:regions_per_table. Default: "
operator|+
name|DEFAULT_OPS_TYPE
argument_list|)
decl_stmt|;
specifier|private
name|int
name|numTables
decl_stmt|;
specifier|private
name|int
name|regionsPerTable
decl_stmt|;
specifier|private
name|int
name|numOps
decl_stmt|;
specifier|private
name|int
name|numThreads
decl_stmt|;
specifier|private
name|String
name|opsType
decl_stmt|;
specifier|private
name|MasterProcedureScheduler
name|procedureScheduler
decl_stmt|;
comment|// List of table/region procedures to schedule.
name|ProcedureFactory
index|[]
name|ops
decl_stmt|;
comment|// Using factory pattern to build a collection of operations which can be executed in an
comment|// abstract manner by worker threads.
specifier|private
interface|interface
name|ProcedureFactory
block|{
name|Procedure
name|newProcedure
parameter_list|(
name|long
name|procId
parameter_list|)
function_decl|;
block|}
specifier|private
class|class
name|RegionProcedure
extends|extends
name|TestMasterProcedureScheduler
operator|.
name|TestRegionProcedure
block|{
name|RegionProcedure
parameter_list|(
name|long
name|procId
parameter_list|,
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|super
argument_list|(
name|procId
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
argument_list|,
name|TableOperationType
operator|.
name|UNASSIGN
argument_list|,
name|hri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|acquireLock
parameter_list|(
name|Void
name|env
parameter_list|)
block|{
return|return
operator|!
name|procedureScheduler
operator|.
name|waitRegions
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|getRegionInfo
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|releaseLock
parameter_list|(
name|Void
name|env
parameter_list|)
block|{
name|procedureScheduler
operator|.
name|wakeRegions
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|,
name|getRegionInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|RegionProcedureFactory
implements|implements
name|ProcedureFactory
block|{
specifier|final
name|HRegionInfo
name|hri
decl_stmt|;
name|RegionProcedureFactory
parameter_list|(
name|HRegionInfo
name|hri
parameter_list|)
block|{
name|this
operator|.
name|hri
operator|=
name|hri
expr_stmt|;
block|}
specifier|public
name|Procedure
name|newProcedure
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
return|return
operator|new
name|RegionProcedure
argument_list|(
name|procId
argument_list|,
name|hri
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|TableProcedure
extends|extends
name|TestMasterProcedureScheduler
operator|.
name|TestTableProcedure
block|{
name|TableProcedure
parameter_list|(
name|long
name|procId
parameter_list|,
name|TableName
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|procId
argument_list|,
name|tableName
argument_list|,
name|TableOperationType
operator|.
name|EDIT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|acquireLock
parameter_list|(
name|Void
name|env
parameter_list|)
block|{
return|return
name|procedureScheduler
operator|.
name|tryAcquireTableExclusiveLock
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|releaseLock
parameter_list|(
name|Void
name|env
parameter_list|)
block|{
name|procedureScheduler
operator|.
name|releaseTableExclusiveLock
argument_list|(
name|this
argument_list|,
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|TableProcedureFactory
implements|implements
name|ProcedureFactory
block|{
specifier|final
name|TableName
name|tableName
decl_stmt|;
name|TableProcedureFactory
parameter_list|(
name|TableName
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|Procedure
name|newProcedure
parameter_list|(
name|long
name|procId
parameter_list|)
block|{
return|return
operator|new
name|TableProcedure
argument_list|(
name|procId
argument_list|,
name|tableName
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|setupOperations
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create set of operations based on --ops_type command line argument.
specifier|final
name|ProcedureFactory
index|[]
name|tableOps
init|=
operator|new
name|ProcedureFactory
index|[
name|numTables
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTables
condition|;
operator|++
name|i
control|)
block|{
name|tableOps
index|[
name|i
index|]
operator|=
operator|new
name|TableProcedureFactory
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testTableLock-"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ProcedureFactory
index|[]
name|regionOps
init|=
operator|new
name|ProcedureFactory
index|[
name|numTables
operator|*
name|regionsPerTable
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTables
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|regionsPerTable
condition|;
operator|++
name|j
control|)
block|{
name|regionOps
index|[
name|i
operator|*
name|regionsPerTable
operator|+
name|j
index|]
operator|=
operator|new
name|RegionProcedureFactory
argument_list|(
operator|new
name|HRegionInfo
argument_list|(
operator|(
operator|(
name|TableProcedureFactory
operator|)
name|tableOps
index|[
name|i
index|]
operator|)
operator|.
name|tableName
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|j
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|opsType
operator|.
name|equals
argument_list|(
literal|"table"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Operations: table only"
argument_list|)
expr_stmt|;
name|ops
operator|=
name|tableOps
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opsType
operator|.
name|equals
argument_list|(
literal|"region"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Operations: region only"
argument_list|)
expr_stmt|;
name|ops
operator|=
name|regionOps
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opsType
operator|.
name|equals
argument_list|(
literal|"both"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Operations: both (table + region)"
argument_list|)
expr_stmt|;
name|ops
operator|=
operator|(
name|ProcedureFactory
index|[]
operator|)
name|ArrayUtils
operator|.
name|addAll
argument_list|(
name|tableOps
argument_list|,
name|regionOps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"-ops_type should be one of table/region/both."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addOptions
parameter_list|()
block|{
name|addOption
argument_list|(
name|NUM_TABLES_OPTION
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
name|REGIONS_PER_TABLE_OPTION
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
name|NUM_OPERATIONS_OPTION
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
name|NUM_THREADS_OPTION
argument_list|)
expr_stmt|;
name|addOption
argument_list|(
name|OPS_TYPE_OPTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|processOptions
parameter_list|(
name|CommandLine
name|cmd
parameter_list|)
block|{
name|numTables
operator|=
name|getOptionAsInt
argument_list|(
name|cmd
argument_list|,
name|NUM_TABLES_OPTION
operator|.
name|getOpt
argument_list|()
argument_list|,
name|DEFAULT_NUM_TABLES
argument_list|)
expr_stmt|;
name|regionsPerTable
operator|=
name|getOptionAsInt
argument_list|(
name|cmd
argument_list|,
name|REGIONS_PER_TABLE_OPTION
operator|.
name|getOpt
argument_list|()
argument_list|,
name|DEFAULT_REGIONS_PER_TABLE
argument_list|)
expr_stmt|;
name|numOps
operator|=
name|getOptionAsInt
argument_list|(
name|cmd
argument_list|,
name|NUM_OPERATIONS_OPTION
operator|.
name|getOpt
argument_list|()
argument_list|,
name|DEFAULT_NUM_OPERATIONS
argument_list|)
expr_stmt|;
name|numThreads
operator|=
name|getOptionAsInt
argument_list|(
name|cmd
argument_list|,
name|NUM_THREADS_OPTION
operator|.
name|getOpt
argument_list|()
argument_list|,
name|DEFAULT_NUM_THREADS
argument_list|)
expr_stmt|;
name|opsType
operator|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|OPS_TYPE_OPTION
operator|.
name|getOpt
argument_list|()
argument_list|,
name|DEFAULT_OPS_TYPE
argument_list|)
expr_stmt|;
block|}
comment|/*******************    * WORKERS    *******************/
specifier|private
specifier|final
name|AtomicLong
name|procIds
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|yield
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|completed
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
class|class
name|AddProcsWorker
extends|extends
name|Thread
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
specifier|final
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|procId
init|=
name|procIds
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|int
name|index
decl_stmt|;
while|while
condition|(
name|procId
operator|<=
name|numOps
condition|)
block|{
name|index
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|ops
operator|.
name|length
argument_list|)
expr_stmt|;
name|procedureScheduler
operator|.
name|addBack
argument_list|(
name|ops
index|[
name|index
index|]
operator|.
name|newProcedure
argument_list|(
name|procId
argument_list|)
argument_list|)
expr_stmt|;
name|procId
operator|=
name|procIds
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|PollAndLockWorker
extends|extends
name|Thread
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|completed
operator|.
name|get
argument_list|()
operator|<
name|numOps
condition|)
block|{
comment|// With lock/unlock being ~100ns, and no other workload, 1000ns wait seams reasonable.
name|TestProcedure
name|proc
init|=
operator|(
name|TestProcedure
operator|)
name|procedureScheduler
operator|.
name|poll
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
name|proc
operator|==
literal|null
condition|)
block|{
name|yield
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|proc
operator|.
name|acquireLock
argument_list|(
literal|null
argument_list|)
condition|)
block|{
name|completed
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|proc
operator|.
name|releaseLock
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|procedureScheduler
operator|.
name|yield
argument_list|(
name|proc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|completed
operator|.
name|get
argument_list|()
operator|%
literal|100000
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Completed "
operator|+
name|completed
operator|.
name|get
argument_list|()
operator|+
literal|" procedures."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * Starts the threads and waits for them to finish.    * @return time taken by threads to complete, in milliseconds.    */
name|long
name|runThreads
parameter_list|(
name|Thread
index|[]
name|threads
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|t
range|:
name|threads
control|)
block|{
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|doWork
parameter_list|()
throws|throws
name|Exception
block|{
name|procedureScheduler
operator|=
operator|new
name|MasterProcedureScheduler
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
operator|new
name|TableLockManager
operator|.
name|NullTableLockManager
argument_list|()
argument_list|)
expr_stmt|;
name|procedureScheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|setupOperations
argument_list|()
expr_stmt|;
specifier|final
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
name|numThreads
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|AddProcsWorker
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|addBackTime
init|=
name|runThreads
argument_list|(
name|threads
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Added "
operator|+
name|numOps
operator|+
literal|" procedures to scheduler."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numThreads
condition|;
operator|++
name|i
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|PollAndLockWorker
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|pollTime
init|=
name|runThreads
argument_list|(
name|threads
argument_list|)
decl_stmt|;
name|procedureScheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
specifier|final
name|float
name|pollTimeSec
init|=
name|pollTime
operator|/
literal|1000.0f
decl_stmt|;
specifier|final
name|float
name|addBackTimeSec
init|=
name|addBackTime
operator|/
literal|1000.0f
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"******************************************"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time - addBack     : "
operator|+
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|addBackTime
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ops/sec - addBack  : "
operator|+
name|StringUtils
operator|.
name|humanSize
argument_list|(
name|numOps
operator|/
name|addBackTimeSec
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time - poll        : "
operator|+
name|StringUtils
operator|.
name|humanTimeDiff
argument_list|(
name|pollTime
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Ops/sec - poll     : "
operator|+
name|StringUtils
operator|.
name|humanSize
argument_list|(
name|numOps
operator|/
name|pollTimeSec
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Num Operations     : "
operator|+
name|numOps
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Completed          : "
operator|+
name|completed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Yield              : "
operator|+
name|yield
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Num Tables         : "
operator|+
name|numTables
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Regions per table  : "
operator|+
name|regionsPerTable
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Operations type    : "
operator|+
name|opsType
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Threads            : "
operator|+
name|numThreads
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"******************************************"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Raw format for scripts"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"RESULT [%s=%s, %s=%s, %s=%s, %s=%s, %s=%s, "
operator|+
literal|"num_yield=%s, time_addback_ms=%s, time_poll_ms=%s]"
argument_list|,
name|NUM_OPERATIONS_OPTION
operator|.
name|getOpt
argument_list|()
argument_list|,
name|numOps
argument_list|,
name|OPS_TYPE_OPTION
operator|.
name|getOpt
argument_list|()
argument_list|,
name|opsType
argument_list|,
name|NUM_TABLES_OPTION
operator|.
name|getOpt
argument_list|()
argument_list|,
name|numTables
argument_list|,
name|REGIONS_PER_TABLE_OPTION
operator|.
name|getOpt
argument_list|()
argument_list|,
name|regionsPerTable
argument_list|,
name|NUM_THREADS_OPTION
operator|.
name|getOpt
argument_list|()
argument_list|,
name|numThreads
argument_list|,
name|yield
operator|.
name|get
argument_list|()
argument_list|,
name|addBackTime
argument_list|,
name|pollTime
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|MasterProcedureSchedulerPerformanceEvaluation
name|tool
init|=
operator|new
name|MasterProcedureSchedulerPerformanceEvaluation
argument_list|()
decl_stmt|;
name|tool
operator|.
name|setConf
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|tool
operator|.
name|run
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

