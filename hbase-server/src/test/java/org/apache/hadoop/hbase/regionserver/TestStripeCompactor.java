begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeStoreFileManager
operator|.
name|OPEN_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeStoreFileManager
operator|.
name|STRIPE_END_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StripeStoreFileManager
operator|.
name|STRIPE_START_KEY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|HFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|NoLimitCompactionThroughputController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|compactions
operator|.
name|StripeCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestStripeCompactor
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|NAME_OF_THINGS
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TableName
name|TABLE_NAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
name|NAME_OF_THINGS
argument_list|,
name|NAME_OF_THINGS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEY_B
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"bbb"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEY_C
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ccc"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|KEY_D
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"ddd"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KeyValue
name|KV_A
init|=
name|kvAfter
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"aaa"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KeyValue
name|KV_B
init|=
name|kvAfter
argument_list|(
name|KEY_B
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KeyValue
name|KV_C
init|=
name|kvAfter
argument_list|(
name|KEY_C
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|KeyValue
name|KV_D
init|=
name|kvAfter
argument_list|(
name|KEY_D
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|KeyValue
name|kvAfter
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
return|return
operator|new
name|KeyValue
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|key
argument_list|,
name|key
operator|.
name|length
operator|+
literal|1
argument_list|)
argument_list|,
literal|0L
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
index|[]
name|a
parameter_list|(
name|T
modifier|...
name|a
parameter_list|)
block|{
return|return
name|a
return|;
block|}
specifier|private
specifier|static
name|KeyValue
index|[]
name|e
parameter_list|()
block|{
return|return
name|TestStripeCompactor
operator|.
expr|<
name|KeyValue
operator|>
name|a
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBoundaryCompactions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// General verification
name|verifyBoundaryCompaction
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_A
argument_list|,
name|KV_B
argument_list|,
name|KV_B
argument_list|,
name|KV_C
argument_list|,
name|KV_D
argument_list|)
argument_list|,
name|a
argument_list|(
name|OPEN_KEY
argument_list|,
name|KEY_B
argument_list|,
name|KEY_D
argument_list|,
name|OPEN_KEY
argument_list|)
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_A
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_B
argument_list|,
name|KV_B
argument_list|,
name|KV_C
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyBoundaryCompaction
argument_list|(
name|a
argument_list|(
name|KV_B
argument_list|,
name|KV_C
argument_list|)
argument_list|,
name|a
argument_list|(
name|KEY_B
argument_list|,
name|KEY_C
argument_list|,
name|KEY_D
argument_list|)
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_B
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_C
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifyBoundaryCompaction
argument_list|(
name|a
argument_list|(
name|KV_B
argument_list|,
name|KV_C
argument_list|)
argument_list|,
name|a
argument_list|(
name|KEY_B
argument_list|,
name|KEY_D
argument_list|)
argument_list|,
operator|new
name|KeyValue
index|[]
index|[]
block|{
name|a
argument_list|(
name|KV_B
argument_list|,
name|KV_C
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBoundaryCompactionEmptyFiles
parameter_list|()
throws|throws
name|Exception
block|{
comment|// No empty file if there're already files.
name|verifyBoundaryCompaction
argument_list|(
name|a
argument_list|(
name|KV_B
argument_list|)
argument_list|,
name|a
argument_list|(
name|KEY_B
argument_list|,
name|KEY_C
argument_list|,
name|KEY_D
argument_list|,
name|OPEN_KEY
argument_list|)
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_B
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyBoundaryCompaction
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_C
argument_list|)
argument_list|,
name|a
argument_list|(
name|OPEN_KEY
argument_list|,
name|KEY_B
argument_list|,
name|KEY_C
argument_list|,
name|KEY_D
argument_list|)
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|)
argument_list|,
literal|null
argument_list|,
name|a
argument_list|(
name|KV_C
argument_list|)
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// But should be created if there are no file.
name|verifyBoundaryCompaction
argument_list|(
name|e
argument_list|()
argument_list|,
name|a
argument_list|(
name|OPEN_KEY
argument_list|,
name|KEY_B
argument_list|,
name|KEY_C
argument_list|,
name|OPEN_KEY
argument_list|)
argument_list|,
name|a
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|e
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// In major range if there's major range.
name|verifyBoundaryCompaction
argument_list|(
name|e
argument_list|()
argument_list|,
name|a
argument_list|(
name|OPEN_KEY
argument_list|,
name|KEY_B
argument_list|,
name|KEY_C
argument_list|,
name|OPEN_KEY
argument_list|)
argument_list|,
name|a
argument_list|(
literal|null
argument_list|,
name|e
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|KEY_B
argument_list|,
name|KEY_C
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyBoundaryCompaction
argument_list|(
name|e
argument_list|()
argument_list|,
name|a
argument_list|(
name|OPEN_KEY
argument_list|,
name|KEY_B
argument_list|,
name|KEY_C
argument_list|,
name|OPEN_KEY
argument_list|)
argument_list|,
name|a
argument_list|(
name|e
argument_list|()
argument_list|,
name|e
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|OPEN_KEY
argument_list|,
name|KEY_C
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Major range should have files regardless of KVs.
name|verifyBoundaryCompaction
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|)
argument_list|,
name|a
argument_list|(
name|OPEN_KEY
argument_list|,
name|KEY_B
argument_list|,
name|KEY_C
argument_list|,
name|KEY_D
argument_list|,
name|OPEN_KEY
argument_list|)
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|)
argument_list|,
name|e
argument_list|()
argument_list|,
name|e
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|KEY_B
argument_list|,
name|KEY_D
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|verifyBoundaryCompaction
argument_list|(
name|a
argument_list|(
name|KV_C
argument_list|)
argument_list|,
name|a
argument_list|(
name|OPEN_KEY
argument_list|,
name|KEY_B
argument_list|,
name|KEY_C
argument_list|,
name|KEY_D
argument_list|,
name|OPEN_KEY
argument_list|)
argument_list|,
name|a
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|a
argument_list|(
name|KV_C
argument_list|)
argument_list|,
name|e
argument_list|()
argument_list|)
argument_list|,
name|KEY_C
argument_list|,
name|OPEN_KEY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|verifyBoundaryCompaction
parameter_list|(
name|KeyValue
index|[]
name|input
parameter_list|,
name|byte
index|[]
index|[]
name|boundaries
parameter_list|,
name|KeyValue
index|[]
index|[]
name|output
parameter_list|)
throws|throws
name|Exception
block|{
name|verifyBoundaryCompaction
argument_list|(
name|input
argument_list|,
name|boundaries
argument_list|,
name|output
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|verifyBoundaryCompaction
parameter_list|(
name|KeyValue
index|[]
name|input
parameter_list|,
name|byte
index|[]
index|[]
name|boundaries
parameter_list|,
name|KeyValue
index|[]
index|[]
name|output
parameter_list|,
name|byte
index|[]
name|majorFrom
parameter_list|,
name|byte
index|[]
name|majorTo
parameter_list|,
name|boolean
name|allFiles
parameter_list|)
throws|throws
name|Exception
block|{
name|StoreFileWritersCapture
name|writers
init|=
operator|new
name|StoreFileWritersCapture
argument_list|()
decl_stmt|;
name|StripeCompactor
name|sc
init|=
name|createCompactor
argument_list|(
name|writers
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|sc
operator|.
name|compact
argument_list|(
name|createDummyRequest
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|boundaries
argument_list|)
argument_list|,
name|majorFrom
argument_list|,
name|majorTo
argument_list|,
name|NoLimitCompactionThroughputController
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|writers
operator|.
name|verifyKvs
argument_list|(
name|output
argument_list|,
name|allFiles
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|allFiles
condition|)
block|{
name|assertEquals
argument_list|(
name|output
operator|.
name|length
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writers
operator|.
name|verifyBoundaries
argument_list|(
name|boundaries
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSizeCompactions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// General verification with different sizes.
name|verifySizeCompaction
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_A
argument_list|,
name|KV_B
argument_list|,
name|KV_C
argument_list|,
name|KV_D
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_A
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_B
argument_list|,
name|KV_C
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifySizeCompaction
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_B
argument_list|,
name|KV_C
argument_list|,
name|KV_D
argument_list|)
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_B
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_C
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifySizeCompaction
argument_list|(
name|a
argument_list|(
name|KV_B
argument_list|,
name|KV_C
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|KEY_B
argument_list|,
name|KEY_D
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_B
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_C
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify row boundaries are preserved.
name|verifySizeCompaction
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_A
argument_list|,
name|KV_A
argument_list|,
name|KV_C
argument_list|,
name|KV_D
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_A
argument_list|,
name|KV_A
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_C
argument_list|,
name|KV_D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifySizeCompaction
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_B
argument_list|,
name|KV_B
argument_list|,
name|KV_C
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_B
argument_list|,
name|KV_B
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_C
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Too much data, count limits the number of files.
name|verifySizeCompaction
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_B
argument_list|,
name|KV_C
argument_list|,
name|KV_D
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_B
argument_list|,
name|KV_C
argument_list|,
name|KV_D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verifySizeCompaction
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_B
argument_list|,
name|KV_C
argument_list|)
argument_list|,
literal|1
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|OPEN_KEY
argument_list|,
name|KEY_D
argument_list|,
operator|new
name|KeyValue
index|[]
index|[]
block|{
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_B
argument_list|,
name|KV_C
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// Too little data/large count, no extra files.
name|verifySizeCompaction
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_B
argument_list|,
name|KV_C
argument_list|,
name|KV_D
argument_list|)
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|2
argument_list|,
name|OPEN_KEY
argument_list|,
name|OPEN_KEY
argument_list|,
name|a
argument_list|(
name|a
argument_list|(
name|KV_A
argument_list|,
name|KV_B
argument_list|)
argument_list|,
name|a
argument_list|(
name|KV_C
argument_list|,
name|KV_D
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|verifySizeCompaction
parameter_list|(
name|KeyValue
index|[]
name|input
parameter_list|,
name|int
name|targetCount
parameter_list|,
name|long
name|targetSize
parameter_list|,
name|byte
index|[]
name|left
parameter_list|,
name|byte
index|[]
name|right
parameter_list|,
name|KeyValue
index|[]
index|[]
name|output
parameter_list|)
throws|throws
name|Exception
block|{
name|StoreFileWritersCapture
name|writers
init|=
operator|new
name|StoreFileWritersCapture
argument_list|()
decl_stmt|;
name|StripeCompactor
name|sc
init|=
name|createCompactor
argument_list|(
name|writers
argument_list|,
name|input
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|paths
init|=
name|sc
operator|.
name|compact
argument_list|(
name|createDummyRequest
argument_list|()
argument_list|,
name|targetCount
argument_list|,
name|targetSize
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|NoLimitCompactionThroughputController
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|output
operator|.
name|length
argument_list|,
name|paths
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|writers
operator|.
name|verifyKvs
argument_list|(
name|output
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|boundaries
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|boundaries
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|output
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|boundaries
operator|.
name|add
argument_list|(
name|CellUtil
operator|.
name|cloneRow
argument_list|(
name|output
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boundaries
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|writers
operator|.
name|verifyBoundaries
argument_list|(
name|boundaries
operator|.
name|toArray
argument_list|(
operator|new
name|byte
index|[]
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|StripeCompactor
name|createCompactor
parameter_list|(
name|StoreFileWritersCapture
name|writers
parameter_list|,
name|KeyValue
index|[]
name|input
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|Scanner
name|scanner
init|=
operator|new
name|Scanner
argument_list|(
name|input
argument_list|)
decl_stmt|;
comment|// Create store mock that is satisfactory for compactor.
name|HColumnDescriptor
name|col
init|=
operator|new
name|HColumnDescriptor
argument_list|(
name|NAME_OF_THINGS
argument_list|)
decl_stmt|;
name|ScanInfo
name|si
init|=
operator|new
name|ScanInfo
argument_list|(
name|col
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|Store
name|store
init|=
name|mock
argument_list|(
name|Store
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getFamily
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getScanInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|si
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|areWritesEnabled
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getFileSystem
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|FileSystem
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|HRegionInfo
argument_list|(
name|TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|createWriterInTmp
argument_list|(
name|anyLong
argument_list|()
argument_list|,
name|any
argument_list|(
name|Compression
operator|.
name|Algorithm
operator|.
name|class
argument_list|)
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
name|writers
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|getComparator
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|CellComparator
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
return|return
operator|new
name|StripeCompactor
argument_list|(
name|conf
argument_list|,
name|store
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|InternalScanner
name|createScanner
parameter_list|(
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|long
name|earliestPutTs
parameter_list|,
name|byte
index|[]
name|dropDeletesFromRow
parameter_list|,
name|byte
index|[]
name|dropDeletesToRow
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scanner
return|;
block|}
annotation|@
name|Override
specifier|protected
name|InternalScanner
name|createScanner
parameter_list|(
name|Store
name|store
parameter_list|,
name|List
argument_list|<
name|StoreFileScanner
argument_list|>
name|scanners
parameter_list|,
name|ScanType
name|scanType
parameter_list|,
name|long
name|smallestReadPoint
parameter_list|,
name|long
name|earliestPutTs
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|scanner
return|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
name|CompactionRequest
name|createDummyRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// "Files" are totally unused, it's Scanner class below that gives compactor fake KVs.
comment|// But compaction depends on everything under the sun, so stub everything with dummies.
name|StoreFile
name|sf
init|=
name|mock
argument_list|(
name|StoreFile
operator|.
name|class
argument_list|)
decl_stmt|;
name|StoreFile
operator|.
name|Reader
name|r
init|=
name|mock
argument_list|(
name|StoreFile
operator|.
name|Reader
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|r
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getBloomFilterType
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|BloomType
operator|.
name|NONE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getHFileReader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|HFile
operator|.
name|Reader
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|r
operator|.
name|getStoreFileScanner
argument_list|(
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyBoolean
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|StoreFileScanner
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|getReader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sf
operator|.
name|createReader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompactionRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|sf
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|Scanner
implements|implements
name|InternalScanner
block|{
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
name|kvs
decl_stmt|;
specifier|public
name|Scanner
parameter_list|(
name|KeyValue
modifier|...
name|kvs
parameter_list|)
block|{
name|this
operator|.
name|kvs
operator|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|kvs
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|results
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|kvs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|results
operator|.
name|add
argument_list|(
name|kvs
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|!
name|kvs
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|next
parameter_list|(
name|List
argument_list|<
name|Cell
argument_list|>
name|result
parameter_list|,
name|ScannerContext
name|scannerContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|next
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{}
block|}
comment|// StoreFile.Writer has private ctor and is unwieldy, so this has to be convoluted.
specifier|public
specifier|static
class|class
name|StoreFileWritersCapture
implements|implements
name|Answer
argument_list|<
name|StoreFile
operator|.
name|Writer
argument_list|>
implements|,
name|StripeMultiFileWriter
operator|.
name|WriterFactory
block|{
specifier|public
specifier|static
class|class
name|Writer
block|{
specifier|public
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
name|kvs
init|=
operator|new
name|ArrayList
argument_list|<
name|KeyValue
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
name|data
init|=
operator|new
name|TreeMap
argument_list|<
name|byte
index|[]
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|(
name|Bytes
operator|.
name|BYTES_COMPARATOR
argument_list|)
decl_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Writer
argument_list|>
name|writers
init|=
operator|new
name|ArrayList
argument_list|<
name|Writer
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|StoreFile
operator|.
name|Writer
name|createWriter
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Writer
name|realWriter
init|=
operator|new
name|Writer
argument_list|()
decl_stmt|;
name|writers
operator|.
name|add
argument_list|(
name|realWriter
argument_list|)
expr_stmt|;
name|StoreFile
operator|.
name|Writer
name|writer
init|=
name|mock
argument_list|(
name|StoreFile
operator|.
name|Writer
operator|.
name|class
argument_list|)
decl_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
return|return
name|realWriter
operator|.
name|kvs
operator|.
name|add
argument_list|(
operator|(
name|KeyValue
operator|)
name|invocation
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|writer
argument_list|)
operator|.
name|append
argument_list|(
name|any
argument_list|(
name|KeyValue
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
name|Object
index|[]
name|args
init|=
name|invocation
operator|.
name|getArguments
argument_list|()
decl_stmt|;
return|return
name|realWriter
operator|.
name|data
operator|.
name|put
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|args
index|[
literal|0
index|]
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|args
index|[
literal|1
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|writer
argument_list|)
operator|.
name|appendFileInfo
argument_list|(
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|writer
return|;
block|}
annotation|@
name|Override
specifier|public
name|StoreFile
operator|.
name|Writer
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
return|return
name|createWriter
argument_list|()
return|;
block|}
specifier|public
name|void
name|verifyKvs
parameter_list|(
name|KeyValue
index|[]
index|[]
name|kvss
parameter_list|,
name|boolean
name|allFiles
parameter_list|,
name|boolean
name|requireMetadata
parameter_list|)
block|{
if|if
condition|(
name|allFiles
condition|)
block|{
name|assertEquals
argument_list|(
name|kvss
operator|.
name|length
argument_list|,
name|writers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|skippedWriters
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|kvss
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|KeyValue
index|[]
name|kvs
init|=
name|kvss
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|kvs
operator|!=
literal|null
condition|)
block|{
name|Writer
name|w
init|=
name|writers
operator|.
name|get
argument_list|(
name|i
operator|-
name|skippedWriters
argument_list|)
decl_stmt|;
if|if
condition|(
name|requireMetadata
condition|)
block|{
name|assertNotNull
argument_list|(
name|w
operator|.
name|data
operator|.
name|get
argument_list|(
name|STRIPE_START_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|w
operator|.
name|data
operator|.
name|get
argument_list|(
name|STRIPE_END_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|w
operator|.
name|data
operator|.
name|get
argument_list|(
name|STRIPE_START_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|w
operator|.
name|data
operator|.
name|get
argument_list|(
name|STRIPE_END_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|kvs
operator|.
name|length
argument_list|,
name|w
operator|.
name|kvs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|kvs
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|assertEquals
argument_list|(
name|kvs
index|[
name|j
index|]
argument_list|,
name|w
operator|.
name|kvs
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|allFiles
argument_list|)
expr_stmt|;
operator|++
name|skippedWriters
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|verifyBoundaries
parameter_list|(
name|byte
index|[]
index|[]
name|boundaries
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|boundaries
operator|.
name|length
operator|-
literal|1
argument_list|,
name|writers
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|writers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|assertArrayEquals
argument_list|(
literal|"i = "
operator|+
name|i
argument_list|,
name|boundaries
index|[
name|i
index|]
argument_list|,
name|writers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|data
operator|.
name|get
argument_list|(
name|STRIPE_START_KEY
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
literal|"i = "
operator|+
name|i
argument_list|,
name|boundaries
index|[
name|i
operator|+
literal|1
index|]
argument_list|,
name|writers
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|data
operator|.
name|get
argument_list|(
name|STRIPE_END_KEY
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

