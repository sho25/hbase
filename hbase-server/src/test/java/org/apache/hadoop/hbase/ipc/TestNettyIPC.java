begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|DoNotRetryIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|codec
operator|.
name|Codec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|nio
operator|.
name|ByteBuff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RPCTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|Channel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollEventLoopGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|epoll
operator|.
name|EpollSocketChannel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|nio
operator|.
name|NioEventLoopGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|io
operator|.
name|netty
operator|.
name|channel
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketChannel
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|RPCTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestNettyIPC
extends|extends
name|AbstractTestIPC
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestNettyIPC
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{index}: EventLoop={0}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"nio"
block|}
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"perClientNio"
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|JVM
operator|.
name|isLinux
argument_list|()
operator|&&
name|JVM
operator|.
name|isAmd64
argument_list|()
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
literal|"epoll"
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
annotation|@
name|Parameter
specifier|public
name|String
name|eventLoopType
decl_stmt|;
specifier|private
specifier|static
name|NioEventLoopGroup
name|NIO
decl_stmt|;
specifier|private
specifier|static
name|EpollEventLoopGroup
name|EPOLL
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setUpBeforeClass
parameter_list|()
block|{
name|NIO
operator|=
operator|new
name|NioEventLoopGroup
argument_list|()
expr_stmt|;
if|if
condition|(
name|JVM
operator|.
name|isLinux
argument_list|()
operator|&&
name|JVM
operator|.
name|isAmd64
argument_list|()
condition|)
block|{
name|EPOLL
operator|=
operator|new
name|EpollEventLoopGroup
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownAfterClass
parameter_list|()
block|{
if|if
condition|(
name|NIO
operator|!=
literal|null
condition|)
block|{
name|NIO
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|EPOLL
operator|!=
literal|null
condition|)
block|{
name|EPOLL
operator|.
name|shutdownGracefully
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
switch|switch
condition|(
name|eventLoopType
condition|)
block|{
case|case
literal|"nio"
case|:
name|NettyRpcClientConfigHelper
operator|.
name|setEventLoopConfig
argument_list|(
name|conf
argument_list|,
name|NIO
argument_list|,
name|NioSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"epoll"
case|:
name|NettyRpcClientConfigHelper
operator|.
name|setEventLoopConfig
argument_list|(
name|conf
argument_list|,
name|EPOLL
argument_list|,
name|EpollSocketChannel
operator|.
name|class
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"perClientNio"
case|:
name|NettyRpcClientConfigHelper
operator|.
name|createEventLoopPerClient
argument_list|(
name|conf
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|RpcServer
name|createRpcServer
parameter_list|(
name|Server
name|server
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|RpcServer
operator|.
name|BlockingServiceAndInterface
argument_list|>
name|services
parameter_list|,
name|InetSocketAddress
name|bindAddress
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RpcScheduler
name|scheduler
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|NettyRpcServer
argument_list|(
name|server
argument_list|,
name|name
argument_list|,
name|services
argument_list|,
name|bindAddress
argument_list|,
name|conf
argument_list|,
name|scheduler
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|NettyRpcClient
name|createRpcClientNoCodec
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|NettyRpcClient
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
name|Codec
name|getCodec
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|NettyRpcClient
name|createRpcClient
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|NettyRpcClient
argument_list|(
name|conf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|NettyRpcClient
name|createRpcClientRTEDuringConnectionSetup
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
operator|new
name|NettyRpcClient
argument_list|(
name|conf
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|isTcpNoDelay
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Injected fault"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
specifier|private
specifier|static
class|class
name|TestFailingRpcServer
extends|extends
name|NettyRpcServer
block|{
name|TestFailingRpcServer
parameter_list|(
name|Server
name|server
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|RpcServer
operator|.
name|BlockingServiceAndInterface
argument_list|>
name|services
parameter_list|,
name|InetSocketAddress
name|bindAddress
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RpcScheduler
name|scheduler
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|server
argument_list|,
name|name
argument_list|,
name|services
argument_list|,
name|bindAddress
argument_list|,
name|conf
argument_list|,
name|scheduler
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|final
class|class
name|FailingConnection
extends|extends
name|NettyServerRpcConnection
block|{
specifier|private
name|FailingConnection
parameter_list|(
name|TestFailingRpcServer
name|rpcServer
parameter_list|,
name|Channel
name|channel
parameter_list|)
block|{
name|super
argument_list|(
name|rpcServer
argument_list|,
name|channel
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|processRequest
parameter_list|(
name|ByteBuff
name|buf
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// this will throw exception after the connection header is read, and an RPC is sent
comment|// from client
throw|throw
operator|new
name|DoNotRetryIOException
argument_list|(
literal|"Failing for test"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|NettyRpcServerPreambleHandler
name|createNettyRpcServerPreambleHandler
parameter_list|()
block|{
return|return
operator|new
name|NettyRpcServerPreambleHandler
argument_list|(
name|TestFailingRpcServer
operator|.
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|NettyServerRpcConnection
name|createNettyServerRpcConnection
parameter_list|(
name|Channel
name|channel
parameter_list|)
block|{
return|return
operator|new
name|FailingConnection
argument_list|(
name|TestFailingRpcServer
operator|.
name|this
argument_list|,
name|channel
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|RpcServer
name|createTestFailingRpcServer
parameter_list|(
name|Server
name|server
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|RpcServer
operator|.
name|BlockingServiceAndInterface
argument_list|>
name|services
parameter_list|,
name|InetSocketAddress
name|bindAddress
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|RpcScheduler
name|scheduler
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|TestFailingRpcServer
argument_list|(
name|server
argument_list|,
name|name
argument_list|,
name|services
argument_list|,
name|bindAddress
argument_list|,
name|conf
argument_list|,
name|scheduler
argument_list|)
return|;
block|}
block|}
end_class

end_unit

