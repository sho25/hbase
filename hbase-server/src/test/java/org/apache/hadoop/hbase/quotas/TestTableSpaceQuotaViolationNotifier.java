begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|argThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Mutation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaSnapshot
operator|.
name|SpaceQuotaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|QuotaProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatcher
import|;
end_import

begin_comment
comment|/**  * Test case for {@link TableSpaceQuotaSnapshotNotifier}.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestTableSpaceQuotaViolationNotifier
block|{
specifier|private
name|TableSpaceQuotaSnapshotNotifier
name|notifier
decl_stmt|;
specifier|private
name|Connection
name|conn
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|notifier
operator|=
operator|new
name|TableSpaceQuotaSnapshotNotifier
argument_list|()
expr_stmt|;
name|conn
operator|=
name|mock
argument_list|(
name|Connection
operator|.
name|class
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|initialize
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToViolation
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|TableName
name|tn
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"inviolation"
argument_list|)
decl_stmt|;
specifier|final
name|SpaceQuotaSnapshot
name|snapshot
init|=
operator|new
name|SpaceQuotaSnapshot
argument_list|(
operator|new
name|SpaceQuotaStatus
argument_list|(
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
argument_list|,
literal|1024L
argument_list|,
literal|512L
argument_list|)
decl_stmt|;
specifier|final
name|Table
name|quotaTable
init|=
name|mock
argument_list|(
name|Table
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|conn
operator|.
name|getTable
argument_list|(
name|QuotaTableUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|quotaTable
argument_list|)
expr_stmt|;
specifier|final
name|Put
name|expectedPut
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"t."
operator|+
name|tn
operator|.
name|getNameAsString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|QuotaProtos
operator|.
name|SpaceQuotaSnapshot
name|protoQuota
init|=
name|QuotaProtos
operator|.
name|SpaceQuotaSnapshot
operator|.
name|newBuilder
argument_list|()
operator|.
name|setQuotaStatus
argument_list|(
name|QuotaProtos
operator|.
name|SpaceQuotaStatus
operator|.
name|newBuilder
argument_list|()
operator|.
name|setInViolation
argument_list|(
literal|true
argument_list|)
operator|.
name|setViolationPolicy
argument_list|(
name|QuotaProtos
operator|.
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
argument_list|)
operator|.
name|setQuotaLimit
argument_list|(
literal|512L
argument_list|)
operator|.
name|setQuotaUsage
argument_list|(
literal|1024L
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|expectedPut
operator|.
name|addColumn
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"u"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"p"
argument_list|)
argument_list|,
name|protoQuota
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|notifier
operator|.
name|transitionTable
argument_list|(
name|tn
argument_list|,
name|snapshot
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|quotaTable
argument_list|)
operator|.
name|put
argument_list|(
name|argThat
argument_list|(
operator|new
name|SingleCellMutationMatcher
argument_list|<
name|Put
argument_list|>
argument_list|(
name|expectedPut
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Quick hack to verify a Mutation with one column.    */
specifier|final
specifier|private
specifier|static
class|class
name|SingleCellMutationMatcher
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ArgumentMatcher
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|final
name|Mutation
name|expected
decl_stmt|;
specifier|private
name|SingleCellMutationMatcher
parameter_list|(
name|Mutation
name|expected
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|T
name|argument
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expected
operator|.
name|getClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|argument
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Mutation
name|actual
init|=
operator|(
name|Mutation
operator|)
name|argument
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|expected
operator|.
name|getRow
argument_list|()
argument_list|,
name|actual
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|expected
operator|.
name|size
argument_list|()
operator|!=
name|actual
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|expectedCells
init|=
name|expected
operator|.
name|getFamilyCellMap
argument_list|()
decl_stmt|;
name|NavigableMap
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|actualCells
init|=
name|actual
operator|.
name|getFamilyCellMap
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|expectedEntry
init|=
name|expectedCells
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Cell
argument_list|>
argument_list|>
name|actualEntry
init|=
name|actualCells
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|actualEntry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|expectedEntry
operator|.
name|getValue
argument_list|()
argument_list|,
name|actualEntry
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

