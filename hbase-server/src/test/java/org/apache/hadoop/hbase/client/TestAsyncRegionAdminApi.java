begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CompletableFuture
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|HMaster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|RegionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|ServerManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|AssignmentManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|assignment
operator|.
name|RegionStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|JVMClusterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Class to test asynchronous region admin operations.  * @see TestAsyncRegionAdminApi2 This test and it used to be joined it was taking longer than our  * ten minute timeout so they were split.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|LargeTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncRegionAdminApi
extends|extends
name|TestAsyncAdminBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestAsyncRegionAdminApi
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testAssignRegionAndUnassignRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// assign region.
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|AssignmentManager
name|am
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
decl_stmt|;
name|RegionInfo
name|hri
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// assert region on server
name|RegionStates
name|regionStates
init|=
name|am
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|regionStates
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|assertRegionOnServer
argument_list|(
name|hri
argument_list|,
name|serverName
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
operator|.
name|isOpened
argument_list|()
argument_list|)
expr_stmt|;
comment|// Region is assigned now. Let's assign it again.
comment|// Master should not abort, and region should stay assigned.
try|try
block|{
name|admin
operator|.
name|assign
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Should fail when assigning an already onlined region"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
comment|// Expected
name|assertThat
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|DoNotRetryRegionException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionStateNode
argument_list|(
name|hri
argument_list|)
operator|.
name|isInTransition
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
operator|.
name|isOpened
argument_list|()
argument_list|)
expr_stmt|;
comment|// unassign region
name|admin
operator|.
name|unassign
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|am
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionStateNode
argument_list|(
name|hri
argument_list|)
operator|.
name|isInTransition
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|getRegionState
argument_list|(
name|hri
argument_list|)
operator|.
name|isClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RegionInfo
name|createTableAndGetOneRegion
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|TableDescriptor
name|desc
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|ColumnFamilyDescriptorBuilder
operator|.
name|of
argument_list|(
name|FAMILY
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|desc
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"A"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"Z"
argument_list|)
argument_list|,
literal|5
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// wait till the table is assigned
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|long
name|timeoutTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|3000
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|RegionInfo
argument_list|>
name|regions
init|=
name|master
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionsOfTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|regions
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
return|return
name|regions
operator|.
name|get
argument_list|(
literal|2
argument_list|)
return|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|timeoutTime
condition|)
block|{
name|fail
argument_list|(
literal|"Could not find an online region"
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRegionByStateOfTable
parameter_list|()
throws|throws
name|Exception
block|{
name|RegionInfo
name|hri
init|=
name|createTableAndGetOneRegion
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|RegionStates
name|regionStates
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|regionStates
operator|.
name|getRegionByStateOfTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|r
lambda|->
name|RegionInfo
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|r
argument_list|,
name|hri
argument_list|)
operator|==
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|regionStates
operator|.
name|getRegionByStateOfTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"I_am_the_phantom"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|RegionState
operator|.
name|State
operator|.
name|OPEN
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|r
lambda|->
name|RegionInfo
operator|.
name|COMPARATOR
operator|.
name|compare
argument_list|(
name|r
argument_list|,
name|hri
argument_list|)
operator|==
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMoveRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|admin
operator|.
name|balancerSwitch
argument_list|(
literal|false
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|RegionInfo
name|hri
init|=
name|createTableAndGetOneRegion
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|RawAsyncHBaseAdmin
name|rawAdmin
init|=
operator|(
name|RawAsyncHBaseAdmin
operator|)
name|ASYNC_CONN
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
name|ServerName
name|serverName
init|=
name|rawAdmin
operator|.
name|getRegionLocation
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
name|HMaster
name|master
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
decl_stmt|;
name|ServerManager
name|serverManager
init|=
name|master
operator|.
name|getServerManager
argument_list|()
decl_stmt|;
name|ServerName
name|destServerName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|JVMClusterUtil
operator|.
name|RegionServerThread
argument_list|>
name|regionServers
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
decl_stmt|;
for|for
control|(
name|JVMClusterUtil
operator|.
name|RegionServerThread
name|regionServer
range|:
name|regionServers
control|)
block|{
name|HRegionServer
name|destServer
init|=
name|regionServer
operator|.
name|getRegionServer
argument_list|()
decl_stmt|;
name|destServerName
operator|=
name|destServer
operator|.
name|getServerName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|destServerName
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
operator|&&
name|serverManager
operator|.
name|isServerOnline
argument_list|(
name|destServerName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|destServerName
operator|!=
literal|null
operator|&&
operator|!
name|destServerName
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|move
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|,
name|destServerName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|long
name|timeoutTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|30000
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|ServerName
name|sn
init|=
name|rawAdmin
operator|.
name|getRegionLocation
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getServerName
argument_list|()
decl_stmt|;
if|if
condition|(
name|sn
operator|!=
literal|null
operator|&&
name|sn
operator|.
name|equals
argument_list|(
name|destServerName
argument_list|)
condition|)
block|{
break|break;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|>
name|timeoutTime
condition|)
block|{
name|fail
argument_list|(
literal|"Failed to move the region in time: "
operator|+
name|hri
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|admin
operator|.
name|balancerSwitch
argument_list|(
literal|true
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOnlineRegions
parameter_list|()
throws|throws
name|Exception
block|{
name|createTableAndGetOneRegion
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|AtomicInteger
name|regionServerCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|rsThread
lambda|->
name|rsThread
operator|.
name|getRegionServer
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|rs
lambda|->
block|{
name|ServerName
name|serverName
operator|=
name|rs
operator|.
name|getServerName
argument_list|()
argument_list|;             try
block|{
name|assertEquals
argument_list|(
name|admin
operator|.
name|getRegions
argument_list|(
name|serverName
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|rs
operator|.
name|getRegions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"admin.getOnlineRegions() method throws a exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|regionServerCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|)
class|;
end_class

begin_expr_stmt
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|regionServerCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    @
name|Test
specifier|public
name|void
name|testFlushTableAndRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|RegionInfo
name|hri
init|=
name|createTableAndGetOneRegion
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|ServerName
name|serverName
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getAssignmentManager
argument_list|()
operator|.
name|getRegionStates
argument_list|()
operator|.
name|getRegionServerOfRegion
argument_list|(
name|hri
argument_list|)
decl_stmt|;
name|HRegionServer
name|regionServer
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|rsThread
lambda|->
name|rsThread
operator|.
name|getRegionServer
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|rs
lambda|->
name|rs
operator|.
name|getServerName
argument_list|()
operator|.
name|equals
argument_list|(
name|serverName
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// write a put into the specific region
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY_0
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value-1"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|regionServer
operator|.
name|getOnlineRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|getMemStoreDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// flush region and wait flush operation finished.
name|LOG
operator|.
name|info
argument_list|(
literal|"flushing region: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flushRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"blocking until flush is complete: "
operator|+
name|Bytes
operator|.
name|toStringBinary
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|500
argument_list|)
expr_stmt|;
while|while
condition|(
name|regionServer
operator|.
name|getOnlineRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|getMemStoreDataSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
comment|// check the memstore.
name|assertEquals
argument_list|(
name|regionServer
operator|.
name|getOnlineRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|getMemStoreDataSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// write another put into the specific region
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|hri
operator|.
name|getStartKey
argument_list|()
argument_list|)
operator|.
name|addColumn
argument_list|(
name|FAMILY
argument_list|,
name|FAMILY_0
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value-2"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|regionServer
operator|.
name|getOnlineRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|getMemStoreDataSize
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
literal|500
argument_list|)
expr_stmt|;
while|while
condition|(
name|regionServer
operator|.
name|getOnlineRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|getMemStoreDataSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Threads
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
comment|// check the memstore.
name|assertEquals
argument_list|(
name|regionServer
operator|.
name|getOnlineRegion
argument_list|(
name|hri
operator|.
name|getRegionName
argument_list|()
argument_list|)
operator|.
name|getMemStoreDataSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|waitUntilMobCompactionFinished
parameter_list|(
name|TableName
name|tableName
parameter_list|)
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
name|long
name|finished
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|+
literal|60000
decl_stmt|;
name|CompactionState
name|state
init|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
operator|<
name|finished
condition|)
block|{
if|if
condition|(
name|state
operator|==
name|CompactionState
operator|.
name|NONE
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|CompactionState
operator|.
name|NONE
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCompactMob
parameter_list|()
throws|throws
name|Exception
block|{
name|ColumnFamilyDescriptor
name|columnDescriptor
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mob"
argument_list|)
argument_list|)
operator|.
name|setMobEnabled
argument_list|(
literal|true
argument_list|)
operator|.
name|setMobThreshold
argument_list|(
literal|0
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TableDescriptor
name|tableDescriptor
init|=
name|TableDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|tableName
argument_list|)
operator|.
name|setColumnFamily
argument_list|(
name|columnDescriptor
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|tableDescriptor
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mob"
argument_list|)
block|}
decl_stmt|;
name|loadData
argument_list|(
name|tableName
argument_list|,
name|families
argument_list|,
literal|3000
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|CompactionState
name|state
init|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|,
name|CompactType
operator|.
name|MOB
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertNotEquals
argument_list|(
name|CompactionState
operator|.
name|NONE
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|waitUntilMobCompactionFinished
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCompactRegionServer
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f2"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f3"
argument_list|)
block|}
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|tableName
argument_list|,
name|families
argument_list|,
literal|3000
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HRegionServer
argument_list|>
name|rsList
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|rsThread
lambda|->
name|rsThread
operator|.
name|getRegionServer
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Region
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|rsList
operator|.
name|forEach
argument_list|(
name|rs
lambda|->
name|regions
operator|.
name|addAll
argument_list|(
name|rs
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|countBefore
init|=
name|countStoreFilesInFamilies
argument_list|(
name|regions
argument_list|,
name|families
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|countBefore
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Minor compaction for all region servers.
for|for
control|(
name|HRegionServer
name|rs
range|:
name|rsList
control|)
name|admin
operator|.
name|compactRegionServer
argument_list|(
name|rs
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|int
name|countAfterMinorCompaction
init|=
name|countStoreFilesInFamilies
argument_list|(
name|regions
argument_list|,
name|families
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|countAfterMinorCompaction
operator|<
name|countBefore
argument_list|)
expr_stmt|;
comment|// Major compaction for all region servers.
for|for
control|(
name|HRegionServer
name|rs
range|:
name|rsList
control|)
name|admin
operator|.
name|majorCompactRegionServer
argument_list|(
name|rs
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|int
name|countAfterMajorCompaction
init|=
name|countStoreFilesInFamilies
argument_list|(
name|regions
argument_list|,
name|families
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|countAfterMajorCompaction
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCompactionSwitchStates
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Create a table with regions
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|family
block|,
name|Bytes
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
block|,
name|Bytes
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|tableName
argument_list|,
name|families
argument_list|,
literal|3000
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Region
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|forEach
argument_list|(
name|rsThread
lambda|->
name|regions
operator|.
name|addAll
argument_list|(
name|rsThread
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CompletableFuture
argument_list|<
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|listCompletableFuture
init|=
name|admin
operator|.
name|compactionSwitch
argument_list|(
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
name|pairs
init|=
name|listCompletableFuture
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
name|p
range|:
name|pairs
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"Default compaction state, expected=enabled actual=disabled"
argument_list|,
literal|true
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|listCompletableFuture1
init|=
name|admin
operator|.
name|compactionSwitch
argument_list|(
literal|false
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
name|pairs1
init|=
name|listCompletableFuture1
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
name|p
range|:
name|pairs1
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"Last compaction state, expected=enabled actual=disabled"
argument_list|,
literal|true
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompletableFuture
argument_list|<
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|listCompletableFuture2
init|=
name|admin
operator|.
name|compactionSwitch
argument_list|(
literal|true
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
name|pairs2
init|=
name|listCompletableFuture2
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ServerName
argument_list|,
name|Boolean
argument_list|>
name|p
range|:
name|pairs2
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"Last compaction state, expected=disabled actual=enabled"
argument_list|,
literal|false
argument_list|,
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCompact
parameter_list|()
throws|throws
name|Exception
block|{
name|compactionTest
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCompact1"
argument_list|)
argument_list|,
literal|8
argument_list|,
name|CompactionState
operator|.
name|MAJOR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|compactionTest
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCompact2"
argument_list|)
argument_list|,
literal|15
argument_list|,
name|CompactionState
operator|.
name|MINOR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|compactionTest
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCompact3"
argument_list|)
argument_list|,
literal|8
argument_list|,
name|CompactionState
operator|.
name|MAJOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|compactionTest
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testCompact4"
argument_list|)
argument_list|,
literal|15
argument_list|,
name|CompactionState
operator|.
name|MINOR
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|compactionTest
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|int
name|flushes
parameter_list|,
specifier|final
name|CompactionState
name|expectedState
parameter_list|,
name|boolean
name|singleFamily
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Create a table with regions
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
name|byte
index|[]
index|[]
name|families
init|=
block|{
name|family
block|,
name|Bytes
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"2"
argument_list|)
argument_list|)
block|,
name|Bytes
operator|.
name|add
argument_list|(
name|family
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"3"
argument_list|)
argument_list|)
block|}
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|tableName
argument_list|,
literal|null
argument_list|,
name|families
argument_list|)
expr_stmt|;
name|loadData
argument_list|(
name|tableName
argument_list|,
name|families
argument_list|,
literal|3000
argument_list|,
name|flushes
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Region
argument_list|>
name|regions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getLiveRegionServerThreads
argument_list|()
operator|.
name|forEach
argument_list|(
name|rsThread
lambda|->
name|regions
operator|.
name|addAll
argument_list|(
name|rsThread
operator|.
name|getRegionServer
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tableName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|regions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|countBefore
init|=
name|countStoreFilesInFamilies
argument_list|(
name|regions
argument_list|,
name|families
argument_list|)
decl_stmt|;
name|int
name|countBeforeSingleFamily
init|=
name|countStoreFilesInFamily
argument_list|(
name|regions
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|countBefore
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// there should be some data files
if|if
condition|(
name|expectedState
operator|==
name|CompactionState
operator|.
name|MINOR
condition|)
block|{
if|if
condition|(
name|singleFamily
condition|)
block|{
name|admin
operator|.
name|compact
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|compact
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|singleFamily
condition|)
block|{
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|,
name|family
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|majorCompact
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
name|long
name|curt
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|waitTime
init|=
literal|5000
decl_stmt|;
name|long
name|endt
init|=
name|curt
operator|+
name|waitTime
decl_stmt|;
name|CompactionState
name|state
init|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
name|state
operator|==
name|CompactionState
operator|.
name|NONE
operator|&&
name|curt
operator|<
name|endt
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|curt
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|// Now, should have the right compaction state,
comment|// otherwise, the compaction should have already been done
if|if
condition|(
name|expectedState
operator|!=
name|state
condition|)
block|{
for|for
control|(
name|Region
name|region
range|:
name|regions
control|)
block|{
name|state
operator|=
name|CompactionState
operator|.
name|valueOf
argument_list|(
name|region
operator|.
name|getCompactionState
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompactionState
operator|.
name|NONE
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Wait until the compaction is done
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
while|while
condition|(
name|state
operator|!=
name|CompactionState
operator|.
name|NONE
operator|&&
name|curt
operator|<
name|endt
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|state
operator|=
name|admin
operator|.
name|getCompactionState
argument_list|(
name|tableName
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// Now, compaction should be done.
name|assertEquals
argument_list|(
name|CompactionState
operator|.
name|NONE
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|int
name|countAfter
init|=
name|countStoreFilesInFamilies
argument_list|(
name|regions
argument_list|,
name|families
argument_list|)
decl_stmt|;
name|int
name|countAfterSingleFamily
init|=
name|countStoreFilesInFamily
argument_list|(
name|regions
argument_list|,
name|family
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|countAfter
operator|<
name|countBefore
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|singleFamily
condition|)
block|{
if|if
condition|(
name|expectedState
operator|==
name|CompactionState
operator|.
name|MAJOR
condition|)
name|assertTrue
argument_list|(
name|families
operator|.
name|length
operator|==
name|countAfter
argument_list|)
expr_stmt|;
else|else
name|assertTrue
argument_list|(
name|families
operator|.
name|length
operator|<
name|countAfter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|singleFamDiff
init|=
name|countBeforeSingleFamily
operator|-
name|countAfterSingleFamily
decl_stmt|;
comment|// assert only change was to single column family
name|assertTrue
argument_list|(
name|singleFamDiff
operator|==
operator|(
name|countBefore
operator|-
name|countAfter
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedState
operator|==
name|CompactionState
operator|.
name|MAJOR
condition|)
block|{
name|assertTrue
argument_list|(
literal|1
operator|==
name|countAfterSingleFamily
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|1
operator|<
name|countAfterSingleFamily
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testNonExistentTableCompaction
parameter_list|()
block|{
name|testNonExistentTableCompaction
argument_list|(
name|CompactionState
operator|.
name|MINOR
argument_list|)
expr_stmt|;
name|testNonExistentTableCompaction
argument_list|(
name|CompactionState
operator|.
name|MAJOR
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|testNonExistentTableCompaction
parameter_list|(
name|CompactionState
name|compactionState
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|compactionState
operator|==
name|CompactionState
operator|.
name|MINOR
condition|)
block|{
name|admin
operator|.
name|compact
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"NonExistentTable"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|admin
operator|.
name|majorCompact
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"NonExistentTable"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Expected TableNotFoundException when table doesn't exist"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected.
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TableNotFoundException
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
specifier|static
name|int
name|countStoreFilesInFamily
parameter_list|(
name|List
argument_list|<
name|Region
argument_list|>
name|regions
parameter_list|,
specifier|final
name|byte
index|[]
name|family
parameter_list|)
block|{
return|return
name|countStoreFilesInFamilies
argument_list|(
name|regions
argument_list|,
operator|new
name|byte
index|[]
index|[]
block|{
name|family
block|}
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
name|int
name|countStoreFilesInFamilies
parameter_list|(
name|List
argument_list|<
name|Region
argument_list|>
name|regions
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|families
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Region
name|region
range|:
name|regions
control|)
block|{
name|count
operator|+=
name|region
operator|.
name|getStoreFileList
argument_list|(
name|families
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|loadData
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|families
parameter_list|,
specifier|final
name|int
name|rows
parameter_list|)
throws|throws
name|IOException
block|{
name|loadData
argument_list|(
name|tableName
argument_list|,
name|families
argument_list|,
name|rows
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|loadData
parameter_list|(
specifier|final
name|TableName
name|tableName
parameter_list|,
specifier|final
name|byte
index|[]
index|[]
name|families
parameter_list|,
specifier|final
name|int
name|rows
parameter_list|,
specifier|final
name|int
name|flushes
parameter_list|)
throws|throws
name|IOException
block|{
name|AsyncTable
argument_list|<
name|?
argument_list|>
name|table
init|=
name|ASYNC_CONN
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Put
argument_list|>
name|puts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rows
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"val"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|flushes
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|rows
condition|;
name|k
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|add
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|k
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|families
operator|.
name|length
condition|;
operator|++
name|j
control|)
block|{
name|p
operator|.
name|addColumn
argument_list|(
name|families
index|[
name|j
index|]
argument_list|,
name|qualifier
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
name|puts
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|putAll
argument_list|(
name|puts
argument_list|)
operator|.
name|join
argument_list|()
expr_stmt|;
name|TEST_UTIL
operator|.
name|flush
argument_list|()
expr_stmt|;
name|puts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

