begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ServerName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|protobuf
operator|.
name|ProtobufUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ClientTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * Class to test asynchronous region admin operations.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|,
name|ClientTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestAsyncRegionAdminApi
extends|extends
name|TestAsyncAdminBase
block|{
specifier|private
name|void
name|createTableWithDefaultConf
parameter_list|(
name|TableName
name|TABLENAME
parameter_list|)
throws|throws
name|Exception
block|{
name|HTableDescriptor
name|htd
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|HColumnDescriptor
name|hcd
init|=
operator|new
name|HColumnDescriptor
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|htd
operator|.
name|addFamily
argument_list|(
name|hcd
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|htd
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|TABLENAME
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"TestHBACloseRegion"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TABLENAME
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TABLENAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|getTable
argument_list|()
operator|.
name|isSystemTable
argument_list|()
condition|)
block|{
name|info
operator|=
name|regionInfo
expr_stmt|;
name|boolean
name|closed
init|=
name|admin
operator|.
name|closeRegionWithEncodedRegionName
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
name|rs
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|closed
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|isInList
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|long
name|timeout
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|10000
decl_stmt|;
while|while
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|<
name|timeout
operator|)
operator|&&
operator|(
name|isInList
operator|)
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|isInList
operator|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"The region should not be present in online regions list."
argument_list|,
name|isInList
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionIfInvalidRegionNameIsPassed
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|name
init|=
literal|"TestHBACloseRegion1"
decl_stmt|;
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|info
operator|=
name|regionInfo
expr_stmt|;
name|boolean
name|catchNotServingException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|closeRegionWithEncodedRegionName
argument_list|(
literal|"sample"
argument_list|,
name|rs
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|catchNotServingException
operator|=
literal|true
expr_stmt|;
comment|// expected, ignore it
block|}
name|assertTrue
argument_list|(
name|catchNotServingException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|onlineRegions
operator|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The region should be present in online regions list."
argument_list|,
name|onlineRegions
operator|.
name|contains
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionWhenServerNameIsNull
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestHBACloseRegion3"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TestHBACloseRegion3"
argument_list|)
condition|)
block|{
name|admin
operator|.
name|closeRegionWithEncodedRegionName
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|fail
argument_list|(
literal|"The test should throw exception if the servername passed is null."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionWhenServerNameIsEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestHBACloseRegionWhenServerNameIsEmpty"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TestHBACloseRegionWhenServerNameIsEmpty"
argument_list|)
condition|)
block|{
name|admin
operator|.
name|closeRegionWithEncodedRegionName
argument_list|(
name|regionInfo
operator|.
name|getEncodedName
argument_list|()
argument_list|,
literal|" "
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|fail
argument_list|(
literal|"The test should throw exception if the servername passed is empty."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseRegionWhenEncodedRegionNameIsNotGiven
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|TABLENAME
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"TestHBACloseRegion4"
argument_list|)
decl_stmt|;
name|createTableWithDefaultConf
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
expr_stmt|;
name|HRegionInfo
name|info
init|=
literal|null
decl_stmt|;
name|HRegionServer
name|rs
init|=
name|TEST_UTIL
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|TABLENAME
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|HRegionInfo
argument_list|>
name|onlineRegions
init|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HRegionInfo
name|regionInfo
range|:
name|onlineRegions
control|)
block|{
if|if
condition|(
operator|!
name|regionInfo
operator|.
name|isMetaTable
argument_list|()
condition|)
block|{
if|if
condition|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"TestHBACloseRegion4"
argument_list|)
condition|)
block|{
name|info
operator|=
name|regionInfo
expr_stmt|;
name|boolean
name|catchNotServingException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|closeRegionWithEncodedRegionName
argument_list|(
name|regionInfo
operator|.
name|getRegionNameAsString
argument_list|()
argument_list|,
name|rs
operator|.
name|getServerName
argument_list|()
operator|.
name|getServerName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected, ignore it.
name|catchNotServingException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|catchNotServingException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|onlineRegions
operator|=
name|ProtobufUtil
operator|.
name|getOnlineRegions
argument_list|(
name|rs
operator|.
name|getRSRpcServices
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The region should be present in online regions list."
argument_list|,
name|onlineRegions
operator|.
name|contains
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRegion
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncHBaseAdmin
name|rawAdmin
init|=
operator|(
name|AsyncHBaseAdmin
operator|)
name|admin
decl_stmt|;
specifier|final
name|TableName
name|tableName
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"testGetRegion"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Started "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|createMultiRegionTable
argument_list|(
name|tableName
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|)
expr_stmt|;
try|try
init|(
name|RegionLocator
name|locator
init|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getRegionLocator
argument_list|(
name|tableName
argument_list|)
init|)
block|{
name|HRegionLocation
name|regionLocation
init|=
name|locator
operator|.
name|getRegionLocation
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"mmm"
argument_list|)
argument_list|)
decl_stmt|;
name|HRegionInfo
name|region
init|=
name|regionLocation
operator|.
name|getRegionInfo
argument_list|()
decl_stmt|;
name|byte
index|[]
name|regionName
init|=
name|region
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
name|Pair
argument_list|<
name|HRegionInfo
argument_list|,
name|ServerName
argument_list|>
name|pair
init|=
name|rawAdmin
operator|.
name|getRegion
argument_list|(
name|regionName
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionName
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pair
operator|=
name|rawAdmin
operator|.
name|getRegion
argument_list|(
name|region
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|equals
argument_list|(
name|regionName
argument_list|,
name|pair
operator|.
name|getFirst
argument_list|()
operator|.
name|getRegionName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

