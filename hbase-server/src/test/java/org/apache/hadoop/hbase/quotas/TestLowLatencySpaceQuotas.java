begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to you under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|SnapshotType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|quotas
operator|.
name|SpaceQuotaHelperForTests
operator|.
name|SpaceQuotaSnapshotPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|tool
operator|.
name|BulkLoadHFiles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestLowLatencySpaceQuotas
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestLowLatencySpaceQuotas
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
comment|// Global for all tests in the class
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|COUNTER
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
specifier|private
name|SpaceQuotaHelperForTests
name|helper
decl_stmt|;
specifier|private
name|Connection
name|conn
decl_stmt|;
specifier|private
name|Admin
name|admin
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// The default 1s period for QuotaObserverChore is good.
name|SpaceQuotaHelperForTests
operator|.
name|updateConfigForQuotas
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Set the period/delay to read region size from HDFS to be very long
name|conf
operator|.
name|setInt
argument_list|(
name|FileSystemUtilizationChore
operator|.
name|FS_UTILIZATION_CHORE_PERIOD_KEY
argument_list|,
literal|1000
operator|*
literal|120
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|FileSystemUtilizationChore
operator|.
name|FS_UTILIZATION_CHORE_DELAY_KEY
argument_list|,
literal|1000
operator|*
literal|120
argument_list|)
expr_stmt|;
comment|// Set the same long period/delay to compute snapshot sizes
name|conf
operator|.
name|setInt
argument_list|(
name|SnapshotQuotaObserverChore
operator|.
name|SNAPSHOT_QUOTA_CHORE_PERIOD_KEY
argument_list|,
literal|1000
operator|*
literal|120
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|SnapshotQuotaObserverChore
operator|.
name|SNAPSHOT_QUOTA_CHORE_DELAY_KEY
argument_list|,
literal|1000
operator|*
literal|120
argument_list|)
expr_stmt|;
comment|// Clean up the compacted files faster than normal (5s instead of 2mins)
name|conf
operator|.
name|setInt
argument_list|(
literal|"hbase.hfile.compaction.discharger.interval"
argument_list|,
literal|5
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|TEST_UTIL
operator|.
name|startMiniCluster
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TEST_UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|removeAllQuotas
parameter_list|()
throws|throws
name|Exception
block|{
name|helper
operator|=
operator|new
name|SpaceQuotaHelperForTests
argument_list|(
name|TEST_UTIL
argument_list|,
name|testName
argument_list|,
name|COUNTER
argument_list|)
expr_stmt|;
name|conn
operator|=
name|TEST_UTIL
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|admin
operator|=
name|TEST_UTIL
operator|.
name|getAdmin
argument_list|()
expr_stmt|;
name|helper
operator|.
name|waitForQuotaTable
argument_list|(
name|conn
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFlushes
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Set a quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Write some data
specifier|final
name|long
name|initialSize
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
comment|// Make sure a flush happened
name|admin
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
comment|// We should be able to observe the system recording an increase in size (even
comment|// though we know the filesystem scanning did not happen).
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|initialSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMajorCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Set a quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Write some data and flush it to disk.
specifier|final
name|long
name|sizePerBatch
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|sizePerBatch
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
comment|// Write the same data again, flushing it to a second file
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|sizePerBatch
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
comment|// After two flushes, both hfiles would contain similar data. We should see 2x the data.
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
literal|2L
operator|*
name|sizePerBatch
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Rewrite the two files into one.
name|admin
operator|.
name|majorCompact
argument_list|(
name|tn
argument_list|)
expr_stmt|;
comment|// After we major compact the table, we should notice quickly that the amount of data in the
comment|// table is much closer to reality (the duplicate entries across the two files are removed).
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|sizePerBatch
operator|&&
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|<=
literal|2L
operator|*
name|sizePerBatch
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMinorCompaction
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Set a quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Write some data and flush it to disk.
specifier|final
name|long
name|sizePerBatch
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
specifier|final
name|long
name|numBatches
init|=
literal|6
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBatches
condition|;
name|i
operator|++
control|)
block|{
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|sizePerBatch
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
block|}
name|HRegion
name|region
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tn
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|numFiles
init|=
name|getNumHFilesForRegion
argument_list|(
name|region
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|numBatches
argument_list|,
name|numFiles
argument_list|)
expr_stmt|;
comment|// After two flushes, both hfiles would contain similar data. We should see 2x the data.
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|numFiles
operator|*
name|sizePerBatch
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Rewrite some files into fewer
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tn
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|numFilesAfterMinorCompaction
init|=
name|getNumHFilesForRegion
argument_list|(
name|region
argument_list|)
decl_stmt|;
comment|// After we major compact the table, we should notice quickly that the amount of data in the
comment|// table is much closer to reality (the duplicate entries across the two files are removed).
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|numFilesAfterMinorCompaction
operator|*
name|sizePerBatch
operator|&&
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|<=
operator|(
name|numFilesAfterMinorCompaction
operator|+
literal|1
operator|)
operator|*
name|sizePerBatch
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|getNumHFilesForRegion
parameter_list|(
name|HRegion
name|region
parameter_list|)
block|{
return|return
name|region
operator|.
name|getStores
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
parameter_list|(
name|s
parameter_list|)
lambda|->
name|s
operator|.
name|getNumHFiles
argument_list|()
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBulkLoading
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Set a quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|List
argument_list|<
name|Path
argument_list|>
argument_list|>
name|family2Files
init|=
name|helper
operator|.
name|generateFileToLoad
argument_list|(
name|tn
argument_list|,
literal|3
argument_list|,
literal|550
argument_list|)
decl_stmt|;
comment|// Make sure the files are about as long as we expect
name|FileSystem
name|fs
init|=
name|TEST_UTIL
operator|.
name|getTestFileSystem
argument_list|()
decl_stmt|;
name|FileStatus
index|[]
name|files
init|=
name|fs
operator|.
name|listStatus
argument_list|(
operator|new
name|Path
argument_list|(
name|fs
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
name|testName
operator|.
name|getMethodName
argument_list|()
operator|+
literal|"_files"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FileStatus
name|file
range|:
name|files
control|)
block|{
name|assertTrue
argument_list|(
literal|"Expected the file, "
operator|+
name|file
operator|.
name|getPath
argument_list|()
operator|+
literal|",  length to be larger than 25KB, but was "
operator|+
name|file
operator|.
name|getLen
argument_list|()
argument_list|,
name|file
operator|.
name|getLen
argument_list|()
operator|>
literal|25
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_KILOBYTE
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|file
operator|.
name|getLen
argument_list|()
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"The bulk load failed"
argument_list|,
name|BulkLoadHFiles
operator|.
name|create
argument_list|(
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
operator|.
name|bulkLoad
argument_list|(
name|tn
argument_list|,
name|family2Files
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|finalTotalSize
init|=
name|totalSize
decl_stmt|;
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
name|finalTotalSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotSizes
parameter_list|()
throws|throws
name|Exception
block|{
name|TableName
name|tn
init|=
name|helper
operator|.
name|createTableWithRegions
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// Set a quota
name|QuotaSettings
name|settings
init|=
name|QuotaSettingsFactory
operator|.
name|limitTableSpace
argument_list|(
name|tn
argument_list|,
name|SpaceQuotaHelperForTests
operator|.
name|ONE_GIGABYTE
argument_list|,
name|SpaceViolationPolicy
operator|.
name|NO_INSERTS
argument_list|)
decl_stmt|;
name|admin
operator|.
name|setQuota
argument_list|(
name|settings
argument_list|)
expr_stmt|;
comment|// Write some data and flush it to disk.
specifier|final
name|long
name|sizePerBatch
init|=
literal|2L
operator|*
name|SpaceQuotaHelperForTests
operator|.
name|ONE_MEGABYTE
decl_stmt|;
name|helper
operator|.
name|writeData
argument_list|(
name|tn
argument_list|,
name|sizePerBatch
argument_list|)
expr_stmt|;
name|admin
operator|.
name|flush
argument_list|(
name|tn
argument_list|)
expr_stmt|;
specifier|final
name|String
name|snapshot1
init|=
literal|"snapshot1"
decl_stmt|;
name|admin
operator|.
name|snapshot
argument_list|(
name|snapshot1
argument_list|,
name|tn
argument_list|,
name|SnapshotType
operator|.
name|SKIPFLUSH
argument_list|)
expr_stmt|;
comment|// Compute the size of the file for the Region we'll send to archive
name|Region
name|region
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getRegions
argument_list|(
name|tn
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|Store
argument_list|>
name|stores
init|=
name|region
operator|.
name|getStores
argument_list|()
decl_stmt|;
name|long
name|summer
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Store
name|store
range|:
name|stores
control|)
block|{
name|summer
operator|+=
name|store
operator|.
name|getStorefilesSize
argument_list|()
expr_stmt|;
block|}
specifier|final
name|long
name|storeFileSize
init|=
name|summer
decl_stmt|;
comment|// Wait for the table to show the usage
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|==
name|storeFileSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Spoof a "full" computation of snapshot size. Normally the chore handles this, but we want
comment|// to test in the absence of this chore.
name|FileArchiverNotifier
name|notifier
init|=
name|TEST_UTIL
operator|.
name|getHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getSnapshotQuotaObserverChore
argument_list|()
operator|.
name|getNotifierForTable
argument_list|(
name|tn
argument_list|)
decl_stmt|;
name|notifier
operator|.
name|computeAndStoreSnapshotSizes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|snapshot1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Force a major compaction to create a new file and push the old file to the archive
name|TEST_UTIL
operator|.
name|compact
argument_list|(
name|tn
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// After moving the old file to archive/, the space of this table should double
comment|// We have a new file created by the majc referenced by the table and the snapshot still
comment|// referencing the old file.
name|TEST_UTIL
operator|.
name|waitFor
argument_list|(
literal|30
operator|*
literal|1000
argument_list|,
literal|500
argument_list|,
operator|new
name|SpaceQuotaSnapshotPredicate
argument_list|(
name|conn
argument_list|,
name|tn
argument_list|)
block|{
annotation|@
name|Override
name|boolean
name|evaluate
parameter_list|(
name|SpaceQuotaSnapshot
name|snapshot
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|snapshot
operator|.
name|getUsage
argument_list|()
operator|>=
literal|2
operator|*
name|storeFileSize
return|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
init|(
name|Table
name|quotaTable
init|=
name|conn
operator|.
name|getTable
argument_list|(
name|QuotaUtil
operator|.
name|QUOTA_TABLE_NAME
argument_list|)
init|)
block|{
name|Result
name|r
init|=
name|quotaTable
operator|.
name|get
argument_list|(
name|QuotaTableUtil
operator|.
name|makeGetForSnapshotSize
argument_list|(
name|tn
argument_list|,
name|snapshot1
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a non-null, non-empty Result"
argument_list|,
name|r
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The snapshot's size should be the same as the origin store file"
argument_list|,
name|storeFileSize
argument_list|,
name|QuotaTableUtil
operator|.
name|parseSnapshotSize
argument_list|(
name|r
operator|.
name|current
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|quotaTable
operator|.
name|get
argument_list|(
name|QuotaTableUtil
operator|.
name|createGetNamespaceSnapshotSize
argument_list|(
name|tn
operator|.
name|getNamespaceAsString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected a non-null, non-empty Result"
argument_list|,
name|r
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r
operator|.
name|advance
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"The snapshot's size should be the same as the origin store file"
argument_list|,
name|storeFileSize
argument_list|,
name|QuotaTableUtil
operator|.
name|parseSnapshotSize
argument_list|(
name|r
operator|.
name|current
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

