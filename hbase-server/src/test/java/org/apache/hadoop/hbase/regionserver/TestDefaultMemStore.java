begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CategoryBasedTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellComparatorImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HRegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeepDeletedCells
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValueUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|RegionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Scan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|UnexpectedStateException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|MediumTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RegionServerTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|FSTableDescriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|WALFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|shaded
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/** memstore test case */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RegionServerTests
operator|.
name|class
block|,
name|MediumTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestDefaultMemStore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestDefaultMemStore
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TestName
name|name
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|TestRule
name|timeout
init|=
name|CategoryBasedTimeout
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withLookingForStuckThread
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|protected
name|AbstractMemStore
name|memstore
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|ROW_COUNT
init|=
literal|10
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|QUALIFIER_COUNT
init|=
name|ROW_COUNT
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|byte
index|[]
name|FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"column"
argument_list|)
decl_stmt|;
specifier|protected
name|MultiVersionConcurrencyControl
name|mvcc
decl_stmt|;
specifier|protected
name|AtomicLong
name|startSeqNum
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|protected
name|ChunkCreator
name|chunkCreator
decl_stmt|;
specifier|private
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|.
name|getMethodName
argument_list|()
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|internalSetUp
argument_list|()
expr_stmt|;
comment|// no pool
name|this
operator|.
name|chunkCreator
operator|=
name|ChunkCreator
operator|.
name|initialize
argument_list|(
name|MemStoreLABImpl
operator|.
name|CHUNK_SIZE_DEFAULT
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|=
operator|new
name|DefaultMemStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
throws|throws
name|Exception
block|{
name|ChunkCreator
operator|.
name|getInstance
argument_list|()
operator|.
name|clearChunkIds
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|internalSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|mvcc
operator|=
operator|new
name|MultiVersionConcurrencyControl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutSameKey
parameter_list|()
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|bytes
argument_list|,
name|bytes
argument_list|,
name|bytes
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|byte
index|[]
name|other
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"somethingelse"
argument_list|)
decl_stmt|;
name|KeyValue
name|samekey
init|=
operator|new
name|KeyValue
argument_list|(
name|bytes
argument_list|,
name|bytes
argument_list|,
name|bytes
argument_list|,
name|other
argument_list|)
decl_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|samekey
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Cell
name|found
init|=
name|this
operator|.
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|this
operator|.
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|toString
argument_list|(
name|found
operator|.
name|getValueArray
argument_list|()
argument_list|)
argument_list|,
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|samekey
argument_list|,
name|found
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPutSameCell
parameter_list|()
block|{
name|byte
index|[]
name|bytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|bytes
argument_list|,
name|bytes
argument_list|,
name|bytes
argument_list|,
name|bytes
argument_list|)
decl_stmt|;
name|MemStoreSize
name|sizeChangeForFirstCell
init|=
operator|new
name|MemStoreSize
argument_list|()
decl_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv
argument_list|,
name|sizeChangeForFirstCell
argument_list|)
expr_stmt|;
name|MemStoreSize
name|sizeChangeForSecondCell
init|=
operator|new
name|MemStoreSize
argument_list|()
decl_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv
argument_list|,
name|sizeChangeForSecondCell
argument_list|)
expr_stmt|;
comment|// make sure memstore size increase won't double-count MSLAB chunk size
name|assertEquals
argument_list|(
name|Segment
operator|.
name|getCellLength
argument_list|(
name|kv
argument_list|)
argument_list|,
name|sizeChangeForFirstCell
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|Segment
name|segment
init|=
name|this
operator|.
name|memstore
operator|.
name|getActive
argument_list|()
decl_stmt|;
name|MemStoreLAB
name|msLab
init|=
name|segment
operator|.
name|getMemStoreLAB
argument_list|()
decl_stmt|;
if|if
condition|(
name|msLab
operator|!=
literal|null
condition|)
block|{
comment|// make sure memstore size increased even when writing the same cell, if using MSLAB
name|assertEquals
argument_list|(
name|Segment
operator|.
name|getCellLength
argument_list|(
name|kv
argument_list|)
argument_list|,
name|sizeChangeForSecondCell
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure chunk size increased even when writing the same cell, if using MSLAB
if|if
condition|(
name|msLab
operator|instanceof
name|MemStoreLABImpl
condition|)
block|{
comment|// since we add the chunkID at the 0th offset of the chunk and the
comment|// chunkid is an int we need to account for those 4 bytes
name|assertEquals
argument_list|(
literal|2
operator|*
name|Segment
operator|.
name|getCellLength
argument_list|(
name|kv
argument_list|)
operator|+
name|Bytes
operator|.
name|SIZEOF_INT
argument_list|,
operator|(
operator|(
name|MemStoreLABImpl
operator|)
name|msLab
operator|)
operator|.
name|getCurrentChunk
argument_list|()
operator|.
name|getNextFreeOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// make sure no memstore size change w/o MSLAB
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sizeChangeForSecondCell
operator|.
name|getDataSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|sizeChangeForSecondCell
operator|.
name|getHeapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test memstore snapshot happening while scanning.    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanAcrossSnapshot
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|rowCount
init|=
name|addRows
argument_list|(
name|this
operator|.
name|memstore
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|memstorescanners
init|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Scan
name|scan
init|=
operator|new
name|Scan
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|memstore
operator|.
name|getComparator
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
try|try
init|(
name|StoreScanner
name|s
init|=
operator|new
name|StoreScanner
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
literal|null
argument_list|,
name|memstorescanners
argument_list|)
init|)
block|{
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
comment|// Row count is same as column count.
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|memstorescanners
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|memstorescanners
operator|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now assert can count same number even if a snapshot mid-scan.
name|count
operator|=
literal|0
expr_stmt|;
try|try
init|(
name|StoreScanner
name|s
init|=
operator|new
name|StoreScanner
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
literal|null
argument_list|,
name|memstorescanners
argument_list|)
init|)
block|{
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Assert the stuff is coming out in right order.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|count
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
comment|// Row count is same as column count.
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|2
condition|)
block|{
name|this
operator|.
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshotted"
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|KeyValueScanner
name|scanner
range|:
name|memstorescanners
control|)
block|{
name|scanner
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|memstorescanners
operator|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert that new values are seen in kvset as we scan.
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|int
name|snapshotIndex
init|=
literal|5
decl_stmt|;
try|try
init|(
name|StoreScanner
name|s
init|=
operator|new
name|StoreScanner
argument_list|(
name|scan
argument_list|,
name|scanInfo
argument_list|,
literal|null
argument_list|,
name|memstorescanners
argument_list|)
init|)
block|{
while|while
condition|(
name|s
operator|.
name|next
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|result
argument_list|)
expr_stmt|;
comment|// Assert the stuff is coming out in right order.
name|assertTrue
argument_list|(
name|CellUtil
operator|.
name|matchingRow
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|count
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Row count is same as column count.
name|assertEquals
argument_list|(
literal|"count="
operator|+
name|count
operator|+
literal|", result="
operator|+
name|result
argument_list|,
name|rowCount
argument_list|,
name|result
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
if|if
condition|(
name|count
operator|==
name|snapshotIndex
condition|)
block|{
name|MemStoreSnapshot
name|snapshot
init|=
name|this
operator|.
name|memstore
operator|.
name|snapshot
argument_list|()
decl_stmt|;
name|this
operator|.
name|memstore
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Added more rows into kvset. But the scanner wont see these rows.
name|addRows
argument_list|(
name|this
operator|.
name|memstore
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Snapshotted, cleared it and then added values (which wont be seen)"
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|rowCount
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/**    * A simple test which verifies the 3 possible states when scanning across snapshot.    * @throws IOException    * @throws CloneNotSupportedException    */
annotation|@
name|Test
specifier|public
name|void
name|testScanAcrossSnapshot2
parameter_list|()
throws|throws
name|IOException
throws|,
name|CloneNotSupportedException
block|{
comment|// we are going to the scanning across snapshot with two kvs
comment|// kv1 should always be returned before kv2
specifier|final
name|byte
index|[]
name|one
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|two
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|q
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|v
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|one
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|v
argument_list|)
decl_stmt|;
specifier|final
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|two
argument_list|,
name|f
argument_list|,
name|q
argument_list|,
name|v
argument_list|)
decl_stmt|;
comment|// use case 1: both kvs in kvset
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv1
operator|.
name|clone
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv2
operator|.
name|clone
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyScanAcrossSnapshot2
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
comment|// use case 2: both kvs in snapshot
name|this
operator|.
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|verifyScanAcrossSnapshot2
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
comment|// use case 3: first in snapshot second in kvset
name|this
operator|.
name|memstore
operator|=
operator|new
name|DefaultMemStore
argument_list|()
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv1
operator|.
name|clone
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|add
argument_list|(
name|kv2
operator|.
name|clone
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyScanAcrossSnapshot2
argument_list|(
name|kv1
argument_list|,
name|kv2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|verifyScanAcrossSnapshot2
parameter_list|(
name|KeyValue
name|kv1
parameter_list|,
name|KeyValue
name|kv2
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|KeyValueScanner
argument_list|>
name|memstorescanners
init|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstorescanners
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|KeyValueScanner
name|scanner0
init|=
name|memstorescanners
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|KeyValueScanner
name|scanner1
init|=
name|memstorescanners
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|scanner0
operator|.
name|seek
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
argument_list|)
expr_stmt|;
name|scanner1
operator|.
name|seek
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
name|HConstants
operator|.
name|EMPTY_START_ROW
argument_list|)
argument_list|)
expr_stmt|;
name|Cell
name|n0
init|=
name|scanner0
operator|.
name|next
argument_list|()
decl_stmt|;
name|Cell
name|n1
init|=
name|scanner1
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|kv1
operator|.
name|equals
argument_list|(
name|n0
argument_list|)
operator|||
name|kv1
operator|.
name|equals
argument_list|(
name|n1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|kv2
operator|.
name|equals
argument_list|(
name|n0
argument_list|)
operator|||
name|kv2
operator|.
name|equals
argument_list|(
name|n1
argument_list|)
operator|||
name|kv2
operator|.
name|equals
argument_list|(
name|scanner0
operator|.
name|next
argument_list|()
argument_list|)
operator|||
name|kv2
operator|.
name|equals
argument_list|(
name|scanner1
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scanner0
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scanner1
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertScannerResults
parameter_list|(
name|KeyValueScanner
name|scanner
parameter_list|,
name|KeyValue
index|[]
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|scanner
operator|.
name|seek
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|returned
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Cell
name|next
init|=
name|scanner
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
literal|null
condition|)
break|break;
name|returned
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Got:\n"
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|returned
argument_list|)
operator|+
literal|"\nExpected:\n"
operator|+
name|Joiner
operator|.
name|on
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|join
argument_list|(
name|expected
argument_list|)
argument_list|,
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
argument_list|,
name|returned
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|scanner
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMemstoreConcurrentControl
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|v
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
name|MultiVersionConcurrencyControl
operator|.
name|WriteEntry
name|w
init|=
name|mvcc
operator|.
name|begin
argument_list|()
decl_stmt|;
name|KeyValue
name|kv1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q1
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|kv1
operator|.
name|setSequenceId
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|kv1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|KeyValueScanner
name|s
init|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertScannerResults
argument_list|(
name|s
argument_list|,
operator|new
name|KeyValue
index|[]
block|{}
argument_list|)
expr_stmt|;
name|mvcc
operator|.
name|completeAndWait
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|s
operator|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertScannerResults
argument_list|(
name|s
argument_list|,
operator|new
name|KeyValue
index|[]
block|{
name|kv1
block|}
argument_list|)
expr_stmt|;
name|w
operator|=
name|mvcc
operator|.
name|begin
argument_list|()
expr_stmt|;
name|KeyValue
name|kv2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q2
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|kv2
operator|.
name|setSequenceId
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|kv2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|s
operator|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertScannerResults
argument_list|(
name|s
argument_list|,
operator|new
name|KeyValue
index|[]
block|{
name|kv1
block|}
argument_list|)
expr_stmt|;
name|mvcc
operator|.
name|completeAndWait
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|s
operator|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertScannerResults
argument_list|(
name|s
argument_list|,
operator|new
name|KeyValue
index|[]
block|{
name|kv1
block|,
name|kv2
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Regression test for HBASE-2616, HBASE-2670.    * When we insert a higher-memstoreTS version of a cell but with    * the same timestamp, we still need to provide consistent reads    * for the same scanner.    */
annotation|@
name|Test
specifier|public
name|void
name|testMemstoreEditsVisibilityWithSameKey
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|v2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
decl_stmt|;
comment|// INSERT 1: Write both columns val1
name|MultiVersionConcurrencyControl
operator|.
name|WriteEntry
name|w
init|=
name|mvcc
operator|.
name|begin
argument_list|()
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q1
argument_list|,
name|v1
argument_list|)
decl_stmt|;
name|kv11
operator|.
name|setSequenceId
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|kv11
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q2
argument_list|,
name|v1
argument_list|)
decl_stmt|;
name|kv12
operator|.
name|setSequenceId
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|kv12
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mvcc
operator|.
name|completeAndWait
argument_list|(
name|w
argument_list|)
expr_stmt|;
comment|// BEFORE STARTING INSERT 2, SEE FIRST KVS
name|KeyValueScanner
name|s
init|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertScannerResults
argument_list|(
name|s
argument_list|,
operator|new
name|KeyValue
index|[]
block|{
name|kv11
block|,
name|kv12
block|}
argument_list|)
expr_stmt|;
comment|// START INSERT 2: Write both columns val2
name|w
operator|=
name|mvcc
operator|.
name|begin
argument_list|()
expr_stmt|;
name|KeyValue
name|kv21
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q1
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|kv21
operator|.
name|setSequenceId
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|kv21
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|KeyValue
name|kv22
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q2
argument_list|,
name|v2
argument_list|)
decl_stmt|;
name|kv22
operator|.
name|setSequenceId
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|kv22
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// BEFORE COMPLETING INSERT 2, SEE FIRST KVS
name|s
operator|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertScannerResults
argument_list|(
name|s
argument_list|,
operator|new
name|KeyValue
index|[]
block|{
name|kv11
block|,
name|kv12
block|}
argument_list|)
expr_stmt|;
comment|// COMPLETE INSERT 2
name|mvcc
operator|.
name|completeAndWait
argument_list|(
name|w
argument_list|)
expr_stmt|;
comment|// NOW SHOULD SEE NEW KVS IN ADDITION TO OLD KVS.
comment|// See HBASE-1485 for discussion about what we should do with
comment|// the duplicate-TS inserts
name|s
operator|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertScannerResults
argument_list|(
name|s
argument_list|,
operator|new
name|KeyValue
index|[]
block|{
name|kv21
block|,
name|kv11
block|,
name|kv22
block|,
name|kv12
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * When we insert a higher-memstoreTS deletion of a cell but with    * the same timestamp, we still need to provide consistent reads    * for the same scanner.    */
annotation|@
name|Test
specifier|public
name|void
name|testMemstoreDeletesVisibilityWithSameKey
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|q2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q2"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|v1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
decl_stmt|;
comment|// INSERT 1: Write both columns val1
name|MultiVersionConcurrencyControl
operator|.
name|WriteEntry
name|w
init|=
name|mvcc
operator|.
name|begin
argument_list|()
decl_stmt|;
name|KeyValue
name|kv11
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q1
argument_list|,
name|v1
argument_list|)
decl_stmt|;
name|kv11
operator|.
name|setSequenceId
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|kv11
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|KeyValue
name|kv12
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q2
argument_list|,
name|v1
argument_list|)
decl_stmt|;
name|kv12
operator|.
name|setSequenceId
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|kv12
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mvcc
operator|.
name|completeAndWait
argument_list|(
name|w
argument_list|)
expr_stmt|;
comment|// BEFORE STARTING INSERT 2, SEE FIRST KVS
name|KeyValueScanner
name|s
init|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertScannerResults
argument_list|(
name|s
argument_list|,
operator|new
name|KeyValue
index|[]
block|{
name|kv11
block|,
name|kv12
block|}
argument_list|)
expr_stmt|;
comment|// START DELETE: Insert delete for one of the columns
name|w
operator|=
name|mvcc
operator|.
name|begin
argument_list|()
expr_stmt|;
name|KeyValue
name|kvDel
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q2
argument_list|,
name|kv11
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|)
decl_stmt|;
name|kvDel
operator|.
name|setSequenceId
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|kvDel
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// BEFORE COMPLETING DELETE, SEE FIRST KVS
name|s
operator|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertScannerResults
argument_list|(
name|s
argument_list|,
operator|new
name|KeyValue
index|[]
block|{
name|kv11
block|,
name|kv12
block|}
argument_list|)
expr_stmt|;
comment|// COMPLETE DELETE
name|mvcc
operator|.
name|completeAndWait
argument_list|(
name|w
argument_list|)
expr_stmt|;
comment|// NOW WE SHOULD SEE DELETE
name|s
operator|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertScannerResults
argument_list|(
name|s
argument_list|,
operator|new
name|KeyValue
index|[]
block|{
name|kv11
block|,
name|kvDel
block|,
name|kv12
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ReadOwnWritesTester
extends|extends
name|Thread
block|{
specifier|static
specifier|final
name|int
name|NUM_TRIES
init|=
literal|1000
decl_stmt|;
specifier|final
name|byte
index|[]
name|row
decl_stmt|;
specifier|final
name|byte
index|[]
name|f
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"family"
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|q1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"q1"
argument_list|)
decl_stmt|;
specifier|final
name|MultiVersionConcurrencyControl
name|mvcc
decl_stmt|;
specifier|final
name|MemStore
name|memstore
decl_stmt|;
specifier|final
name|AtomicLong
name|startSeqNum
decl_stmt|;
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|caughtException
decl_stmt|;
specifier|public
name|ReadOwnWritesTester
parameter_list|(
name|int
name|id
parameter_list|,
name|MemStore
name|memstore
parameter_list|,
name|MultiVersionConcurrencyControl
name|mvcc
parameter_list|,
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|caughtException
parameter_list|,
name|AtomicLong
name|startSeqNum
parameter_list|)
block|{
name|this
operator|.
name|mvcc
operator|=
name|mvcc
expr_stmt|;
name|this
operator|.
name|memstore
operator|=
name|memstore
expr_stmt|;
name|this
operator|.
name|caughtException
operator|=
name|caughtException
expr_stmt|;
name|row
operator|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|this
operator|.
name|startSeqNum
operator|=
name|startSeqNum
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|internalRun
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|caughtException
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|internalRun
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_TRIES
operator|&&
name|caughtException
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|;
name|i
operator|++
control|)
block|{
name|MultiVersionConcurrencyControl
operator|.
name|WriteEntry
name|w
init|=
name|mvcc
operator|.
name|begin
argument_list|()
decl_stmt|;
comment|// Insert the sequence value (i)
name|byte
index|[]
name|v
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|f
argument_list|,
name|q1
argument_list|,
name|i
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|kv
operator|.
name|setSequenceId
argument_list|(
name|w
operator|.
name|getWriteNumber
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|kv
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mvcc
operator|.
name|completeAndWait
argument_list|(
name|w
argument_list|)
expr_stmt|;
comment|// Assert that we can read back
name|KeyValueScanner
name|s
init|=
name|this
operator|.
name|memstore
operator|.
name|getScanners
argument_list|(
name|mvcc
operator|.
name|getReadPoint
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|s
operator|.
name|seek
argument_list|(
name|kv
argument_list|)
expr_stmt|;
name|Cell
name|ret
init|=
name|s
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Didnt find own write at all"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Didnt read own writes"
argument_list|,
name|kv
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|ret
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadOwnWritesUnderConcurrency
parameter_list|()
throws|throws
name|Throwable
block|{
name|int
name|NUM_THREADS
init|=
literal|8
decl_stmt|;
name|ReadOwnWritesTester
name|threads
index|[]
init|=
operator|new
name|ReadOwnWritesTester
index|[
name|NUM_THREADS
index|]
decl_stmt|;
name|AtomicReference
argument_list|<
name|Throwable
argument_list|>
name|caught
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|ReadOwnWritesTester
argument_list|(
name|i
argument_list|,
name|memstore
argument_list|,
name|mvcc
argument_list|,
name|caught
argument_list|,
name|this
operator|.
name|startSeqNum
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|caught
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
name|caught
operator|.
name|get
argument_list|()
throw|;
block|}
block|}
comment|/**    * Test memstore snapshots    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testSnapshotting
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|snapshotCount
init|=
literal|5
decl_stmt|;
comment|// Add some rows, run a snapshot. Do it a few times.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|snapshotCount
condition|;
name|i
operator|++
control|)
block|{
name|addRows
argument_list|(
name|this
operator|.
name|memstore
argument_list|)
expr_stmt|;
name|runSnapshot
argument_list|(
name|this
operator|.
name|memstore
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"History not being cleared"
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleVersionsSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultMemStore
name|m
init|=
operator|new
name|DefaultMemStore
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testRow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|family
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testFamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testQualifier"
argument_list|)
decl_stmt|;
name|long
index|[]
name|stamps
init|=
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
decl_stmt|;
name|byte
index|[]
index|[]
name|values
init|=
block|{
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value0"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value1"
argument_list|)
block|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"value2"
argument_list|)
block|}
decl_stmt|;
name|KeyValue
name|key0
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf
argument_list|,
name|stamps
index|[
literal|0
index|]
argument_list|,
name|values
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|KeyValue
name|key1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf
argument_list|,
name|stamps
index|[
literal|1
index|]
argument_list|,
name|values
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|KeyValue
name|key2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|family
argument_list|,
name|qf
argument_list|,
name|stamps
index|[
literal|2
index|]
argument_list|,
name|values
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
name|key0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|key1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|key2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected memstore to hold 3 values, actually has "
operator|+
name|m
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|,
name|m
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Get tests
comment|//////////////////////////////////////////////////////////////////////////////
comment|/** Test getNextRow from memstore    * @throws InterruptedException    */
annotation|@
name|Test
specifier|public
name|void
name|testGetNextRow
parameter_list|()
throws|throws
name|Exception
block|{
name|addRows
argument_list|(
name|this
operator|.
name|memstore
argument_list|)
expr_stmt|;
comment|// Add more versions to make it a little more interesting.
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|addRows
argument_list|(
name|this
operator|.
name|memstore
argument_list|)
expr_stmt|;
name|Cell
name|closestToEmpty
init|=
operator|(
operator|(
name|DefaultMemStore
operator|)
name|this
operator|.
name|memstore
operator|)
operator|.
name|getNextRow
argument_list|(
name|KeyValue
operator|.
name|LOWESTKEY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|closestToEmpty
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|Cell
name|nr
init|=
operator|(
operator|(
name|DefaultMemStore
operator|)
name|this
operator|.
name|memstore
operator|)
operator|.
name|getNextRow
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|ROW_COUNT
condition|)
block|{
name|assertEquals
argument_list|(
name|nr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|nr
argument_list|,
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|//starting from each row, validate results should contain the starting row
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|startRowId
init|=
literal|0
init|;
name|startRowId
operator|<
name|ROW_COUNT
condition|;
name|startRowId
operator|++
control|)
block|{
name|ScanInfo
name|scanInfo
init|=
operator|new
name|ScanInfo
argument_list|(
name|conf
argument_list|,
name|FAMILY
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|KeepDeletedCells
operator|.
name|FALSE
argument_list|,
name|HConstants
operator|.
name|DEFAULT_BLOCKSIZE
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|memstore
operator|.
name|getComparator
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
name|InternalScanner
name|scanner
init|=
operator|new
name|StoreScanner
argument_list|(
operator|new
name|Scan
argument_list|()
operator|.
name|withStartRow
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|startRowId
argument_list|)
argument_list|)
argument_list|,
name|scanInfo
argument_list|,
literal|null
argument_list|,
name|memstore
operator|.
name|getScanners
argument_list|(
literal|0
argument_list|)
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|scanner
operator|.
name|next
argument_list|(
name|results
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|rowId
init|=
name|startRowId
operator|+
name|i
decl_stmt|;
name|Cell
name|left
init|=
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|row1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowId
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Row name"
argument_list|,
name|CellComparatorImpl
operator|.
name|COMPARATOR
operator|.
name|compareRows
argument_list|(
name|left
argument_list|,
name|row1
argument_list|,
literal|0
argument_list|,
name|row1
operator|.
name|length
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Count of columns"
argument_list|,
name|QUALIFIER_COUNT
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|results
control|)
block|{
name|row
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|isExpectedRowWithoutTimestamps
argument_list|(
name|rowId
argument_list|,
name|row
argument_list|)
expr_stmt|;
comment|// Clear out set. Otherwise row results accumulate.
name|results
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGet_memstoreAndSnapShot
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf4
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier4"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf5
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
comment|//Setting up memstore
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Creating a snapshot
name|memstore
operator|.
name|snapshot
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memstore
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//Adding value to "new" memstore
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf4
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf5
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Delete tests
comment|//////////////////////////////////////////////////////////////////////////////
annotation|@
name|Test
specifier|public
name|void
name|testGetWithDelete
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|KeyValue
name|put1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|KeyValue
name|put2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|ts3
init|=
name|ts2
operator|+
literal|1
decl_stmt|;
name|KeyValue
name|put3
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|put1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|put2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|put3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|del2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|del2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|del2
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellSet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWithDeleteColumn
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
name|long
name|ts1
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|KeyValue
name|put1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|ts2
init|=
name|ts1
operator|+
literal|1
decl_stmt|;
name|KeyValue
name|put2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|long
name|ts3
init|=
name|ts2
operator|+
literal|1
decl_stmt|;
name|KeyValue
name|put3
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts3
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|put1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|put2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|put3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|KeyValue
name|del2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts2
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|del2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|del2
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellSet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWithDeleteFamily
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf1
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier1"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf2
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier2"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf3
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier3"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|KeyValue
name|put1
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf1
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|put2
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf2
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|put3
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|KeyValue
name|put4
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf3
argument_list|,
name|ts
operator|+
literal|1
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|put1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|put2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|put3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|put4
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|KeyValue
name|del
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
literal|null
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|del
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|expected
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|del
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put1
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put2
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put4
argument_list|)
expr_stmt|;
name|expected
operator|.
name|add
argument_list|(
name|put3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellSet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|i
operator|++
argument_list|)
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testKeepDeleteInmemstore
parameter_list|()
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testrow"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|fam
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testfamily"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testqualifier"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|val
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testval"
argument_list|)
decl_stmt|;
name|long
name|ts
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|ts
argument_list|,
name|val
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|KeyValue
name|delete
init|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|fam
argument_list|,
name|qf
argument_list|,
name|ts
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
name|val
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetainsDeleteVersion
parameter_list|()
throws|throws
name|IOException
block|{
comment|// add a put to memstore
name|memstore
operator|.
name|add
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
literal|"dont-care"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// now process a specific delete:
name|KeyValue
name|delete
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"dont-care"
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetainsDeleteColumn
parameter_list|()
throws|throws
name|IOException
block|{
comment|// add a put to memstore
name|memstore
operator|.
name|add
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
literal|"dont-care"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// now process a specific delete:
name|KeyValue
name|delete
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteColumn
argument_list|,
literal|"dont-care"
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRetainsDeleteFamily
parameter_list|()
throws|throws
name|IOException
block|{
comment|// add a put to memstore
name|memstore
operator|.
name|add
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
literal|"dont-care"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// now process a specific delete:
name|KeyValue
name|delete
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"row1"
argument_list|,
literal|"fam"
argument_list|,
literal|"a"
argument_list|,
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|DeleteFamily
argument_list|,
literal|"dont-care"
argument_list|)
decl_stmt|;
name|memstore
operator|.
name|add
argument_list|(
name|delete
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|delete
argument_list|,
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//////////////////////////////////////////////////////////////////////////////
comment|// Helpers
comment|//////////////////////////////////////////////////////////////////////////////
specifier|private
specifier|static
name|byte
index|[]
name|makeQualifier
parameter_list|(
specifier|final
name|int
name|i1
parameter_list|,
specifier|final
name|int
name|i2
parameter_list|)
block|{
return|return
name|Bytes
operator|.
name|toBytes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i1
argument_list|)
operator|+
literal|";"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|i2
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Add keyvalues with a fixed memstoreTs, and checks that memstore size is decreased    * as older keyvalues are deleted from the memstore.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUpsertMemstoreSize
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|memstore
operator|=
operator|new
name|DefaultMemStore
argument_list|(
name|conf
argument_list|,
name|CellComparatorImpl
operator|.
name|COMPARATOR
argument_list|)
expr_stmt|;
name|MemStoreSize
name|oldSize
init|=
name|memstore
operator|.
name|size
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cell
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|KeyValue
name|kv1
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|100
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|KeyValue
name|kv2
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|101
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|KeyValue
name|kv3
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|102
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|kv1
operator|.
name|setSequenceId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|kv2
operator|.
name|setSequenceId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|kv3
operator|.
name|setSequenceId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|kv2
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|kv3
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|upsert
argument_list|(
name|l
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// readpoint is 2
name|MemStoreSize
name|newSize
init|=
name|this
operator|.
name|memstore
operator|.
name|size
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|newSize
operator|.
name|getDataSize
argument_list|()
operator|>
name|oldSize
operator|.
name|getDataSize
argument_list|()
operator|)
assert|;
comment|//The kv1 should be removed.
assert|assert
operator|(
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|KeyValue
name|kv4
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|104
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|kv4
operator|.
name|setSequenceId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|l
operator|.
name|clear
argument_list|()
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|kv4
argument_list|)
expr_stmt|;
name|this
operator|.
name|memstore
operator|.
name|upsert
argument_list|(
name|l
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newSize
argument_list|,
name|this
operator|.
name|memstore
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//The kv2 should be removed.
assert|assert
operator|(
name|memstore
operator|.
name|getActive
argument_list|()
operator|.
name|getCellsCount
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|//this.memstore = null;
block|}
comment|////////////////////////////////////
comment|// Test for periodic memstore flushes
comment|// based on time of oldest edit
comment|////////////////////////////////////
comment|/**    * Tests that the timeOfOldestEdit is updated correctly for the    * various edit operations in memstore.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testUpdateToTimeOfOldestEdit
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|EnvironmentEdgeForMemstoreTest
name|edge
init|=
operator|new
name|EnvironmentEdgeForMemstoreTest
argument_list|()
decl_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|DefaultMemStore
name|memstore
init|=
operator|new
name|DefaultMemStore
argument_list|()
decl_stmt|;
name|long
name|t
init|=
name|memstore
operator|.
name|timeOfOldestEdit
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|t
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// test the case that the timeOfOldestEdit is updated after a KV add
name|memstore
operator|.
name|add
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|100
argument_list|,
literal|"v"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|memstore
operator|.
name|timeOfOldestEdit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|==
literal|1234
argument_list|)
expr_stmt|;
comment|// snapshot() will reset timeOfOldestEdit. The method will also assert the
comment|// value is reset to Long.MAX_VALUE
name|t
operator|=
name|runSnapshot
argument_list|(
name|memstore
argument_list|)
expr_stmt|;
comment|// test the case that the timeOfOldestEdit is updated after a KV delete
name|memstore
operator|.
name|add
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|100
argument_list|,
name|KeyValue
operator|.
name|Type
operator|.
name|Delete
argument_list|,
literal|"v"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|memstore
operator|.
name|timeOfOldestEdit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|==
literal|1234
argument_list|)
expr_stmt|;
name|t
operator|=
name|runSnapshot
argument_list|(
name|memstore
argument_list|)
expr_stmt|;
comment|// test the case that the timeOfOldestEdit is updated after a KV upsert
name|List
argument_list|<
name|Cell
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|KeyValue
name|kv1
init|=
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
literal|"f"
argument_list|,
literal|"q"
argument_list|,
literal|100
argument_list|,
literal|"v"
argument_list|)
decl_stmt|;
name|kv1
operator|.
name|setSequenceId
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|kv1
argument_list|)
expr_stmt|;
name|memstore
operator|.
name|upsert
argument_list|(
name|l
argument_list|,
literal|1000
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|t
operator|=
name|memstore
operator|.
name|timeOfOldestEdit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|==
literal|1234
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Tests the HRegion.shouldFlush method - adds an edit in the memstore    * and checks that shouldFlush returns true, and another where it disables    * the periodic flush functionality and tests whether shouldFlush returns    * false.    * @throws Exception    */
annotation|@
name|Test
specifier|public
name|void
name|testShouldFlush
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HRegion
operator|.
name|MEMSTORE_PERIODIC_FLUSH_INTERVAL
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|checkShouldFlush
argument_list|(
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// test disable flush
name|conf
operator|.
name|setInt
argument_list|(
name|HRegion
operator|.
name|MEMSTORE_PERIODIC_FLUSH_INTERVAL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|checkShouldFlush
argument_list|(
name|conf
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkShouldFlush
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|boolean
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|EnvironmentEdgeForMemstoreTest
name|edge
init|=
operator|new
name|EnvironmentEdgeForMemstoreTest
argument_list|()
decl_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
name|hbaseUtility
init|=
name|HBaseTestingUtility
operator|.
name|createLocalHTU
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|String
name|cf
init|=
literal|"foo"
decl_stmt|;
name|HRegion
name|region
init|=
name|hbaseUtility
operator|.
name|createTestRegion
argument_list|(
literal|"foobar"
argument_list|,
operator|new
name|HColumnDescriptor
argument_list|(
name|cf
argument_list|)
argument_list|)
decl_stmt|;
name|edge
operator|.
name|setCurrentTimeMillis
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"r"
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|KeyValueTestUtil
operator|.
name|create
argument_list|(
literal|"r"
argument_list|,
name|cf
argument_list|,
literal|"q"
argument_list|,
literal|100
argument_list|,
literal|"v"
argument_list|)
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|edge
operator|.
name|setCurrentTimeMillis
argument_list|(
literal|1234
operator|+
literal|100
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|!
name|region
operator|.
name|shouldFlush
argument_list|(
name|sb
argument_list|)
argument_list|)
expr_stmt|;
name|edge
operator|.
name|setCurrentTimeMillis
argument_list|(
literal|1234
operator|+
literal|10000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|region
operator|.
name|shouldFlush
argument_list|(
name|sb
argument_list|)
operator|==
name|expected
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|EnvironmentEdgeManager
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShouldFlushMeta
parameter_list|()
throws|throws
name|Exception
block|{
comment|// write an edit in the META and ensure the shouldFlush (that the periodic memstore
comment|// flusher invokes) returns true after SYSTEM_CACHE_FLUSH_INTERVAL (even though
comment|// the MEMSTORE_PERIODIC_FLUSH_INTERVAL is set to a higher value)
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HRegion
operator|.
name|MEMSTORE_PERIODIC_FLUSH_INTERVAL
argument_list|,
name|HRegion
operator|.
name|SYSTEM_CACHE_FLUSH_INTERVAL
operator|*
literal|10
argument_list|)
expr_stmt|;
name|HBaseTestingUtility
name|hbaseUtility
init|=
name|HBaseTestingUtility
operator|.
name|createLocalHTU
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|Path
name|testDir
init|=
name|hbaseUtility
operator|.
name|getDataTestDir
argument_list|()
decl_stmt|;
name|EnvironmentEdgeForMemstoreTest
name|edge
init|=
operator|new
name|EnvironmentEdgeForMemstoreTest
argument_list|()
decl_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|edge
argument_list|)
expr_stmt|;
name|edge
operator|.
name|setCurrentTimeMillis
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
name|WALFactory
name|wFactory
init|=
operator|new
name|WALFactory
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|"1234"
argument_list|)
decl_stmt|;
name|HRegion
name|meta
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
argument_list|,
name|testDir
argument_list|,
name|conf
argument_list|,
name|FSTableDescriptors
operator|.
name|createMetaTableDescriptor
argument_list|(
name|conf
argument_list|)
argument_list|,
name|wFactory
operator|.
name|getMetaWAL
argument_list|(
name|HRegionInfo
operator|.
name|FIRST_META_REGIONINFO
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// parameterized tests add [#] suffix get rid of [ and ].
name|HRegionInfo
name|hri
init|=
operator|new
name|HRegionInfo
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[\\[\\]]"
argument_list|,
literal|"_"
argument_list|)
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_0200"
argument_list|)
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row_0300"
argument_list|)
argument_list|)
decl_stmt|;
name|HTableDescriptor
name|desc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|name
operator|.
name|getMethodName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[\\[\\]]"
argument_list|,
literal|"_"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|desc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|HRegion
name|r
init|=
name|HRegion
operator|.
name|createHRegion
argument_list|(
name|hri
argument_list|,
name|testDir
argument_list|,
name|conf
argument_list|,
name|desc
argument_list|,
name|wFactory
operator|.
name|getWAL
argument_list|(
name|hri
operator|.
name|getEncodedNameAsBytes
argument_list|()
argument_list|,
name|hri
operator|.
name|getTable
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|addRegionToMETA
argument_list|(
name|meta
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|edge
operator|.
name|setCurrentTimeMillis
argument_list|(
literal|1234
operator|+
literal|100
argument_list|)
expr_stmt|;
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|shouldFlush
argument_list|(
name|sb
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|edge
operator|.
name|setCurrentTimeMillis
argument_list|(
name|edge
operator|.
name|currentTime
argument_list|()
operator|+
name|HRegion
operator|.
name|SYSTEM_CACHE_FLUSH_INTERVAL
operator|+
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|meta
operator|.
name|shouldFlush
argument_list|(
name|sb
argument_list|)
operator|==
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Inserts a new region's meta information into the passed    *<code>meta</code> region. Used by the HMaster bootstrap code adding    * new table to hbase:meta table.    *    * @param meta hbase:meta HRegion to be updated    * @param r HRegion to add to<code>meta</code>    *    * @throws IOException    */
specifier|public
specifier|static
name|void
name|addRegionToMETA
parameter_list|(
specifier|final
name|HRegion
name|meta
parameter_list|,
specifier|final
name|HRegion
name|r
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|checkResources
argument_list|()
expr_stmt|;
comment|// The row key is the region name
name|byte
index|[]
name|row
init|=
name|r
operator|.
name|getRegionInfo
argument_list|()
operator|.
name|getRegionName
argument_list|()
decl_stmt|;
specifier|final
name|long
name|now
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|cells
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|REGIONINFO_QUALIFIER
argument_list|,
name|now
argument_list|,
name|RegionInfo
operator|.
name|toByteArray
argument_list|(
name|r
operator|.
name|getRegionInfo
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set into the root table the version of the meta table.
name|cells
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|HConstants
operator|.
name|META_VERSION_QUALIFIER
argument_list|,
name|now
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|HConstants
operator|.
name|META_VERSION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|meta
operator|.
name|put
argument_list|(
name|row
argument_list|,
name|HConstants
operator|.
name|CATALOG_FAMILY
argument_list|,
name|cells
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|EnvironmentEdgeForMemstoreTest
implements|implements
name|EnvironmentEdge
block|{
name|long
name|t
init|=
literal|1234
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|currentTime
parameter_list|()
block|{
return|return
name|t
return|;
block|}
specifier|public
name|void
name|setCurrentTimeMillis
parameter_list|(
name|long
name|t
parameter_list|)
block|{
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
block|}
block|}
comment|/**    * Adds {@link #ROW_COUNT} rows and {@link #QUALIFIER_COUNT}    * @param hmc Instance to add rows to.    * @return How many rows we added.    * @throws IOException    */
specifier|protected
name|int
name|addRows
parameter_list|(
specifier|final
name|AbstractMemStore
name|hmc
parameter_list|)
block|{
return|return
name|addRows
argument_list|(
name|hmc
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|)
return|;
block|}
comment|/**    * Adds {@link #ROW_COUNT} rows and {@link #QUALIFIER_COUNT}    * @param hmc Instance to add rows to.    * @return How many rows we added.    * @throws IOException    */
specifier|protected
name|int
name|addRows
parameter_list|(
specifier|final
name|MemStore
name|hmc
parameter_list|,
specifier|final
name|long
name|ts
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ROW_COUNT
condition|;
name|i
operator|++
control|)
block|{
name|long
name|timestamp
init|=
name|ts
operator|==
name|HConstants
operator|.
name|LATEST_TIMESTAMP
condition|?
name|System
operator|.
name|currentTimeMillis
argument_list|()
else|:
name|ts
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|QUALIFIER_COUNT
condition|;
name|ii
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|makeQualifier
argument_list|(
name|i
argument_list|,
name|ii
argument_list|)
decl_stmt|;
name|hmc
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|FAMILY
argument_list|,
name|qf
argument_list|,
name|timestamp
argument_list|,
name|qf
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ROW_COUNT
return|;
block|}
specifier|private
name|long
name|runSnapshot
parameter_list|(
specifier|final
name|AbstractMemStore
name|hmc
parameter_list|)
throws|throws
name|UnexpectedStateException
block|{
comment|// Save off old state.
name|int
name|oldHistorySize
init|=
name|hmc
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
decl_stmt|;
name|MemStoreSnapshot
name|snapshot
init|=
name|hmc
operator|.
name|snapshot
argument_list|()
decl_stmt|;
comment|// Make some assertions about what just happened.
name|assertTrue
argument_list|(
literal|"History size has not increased"
argument_list|,
name|oldHistorySize
operator|<
name|hmc
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getCellsCount
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|t
init|=
name|memstore
operator|.
name|timeOfOldestEdit
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Time of oldest edit is not Long.MAX_VALUE"
argument_list|,
name|t
operator|==
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|hmc
operator|.
name|clearSnapshot
argument_list|(
name|snapshot
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|private
name|void
name|isExpectedRowWithoutTimestamps
parameter_list|(
specifier|final
name|int
name|rowIndex
parameter_list|,
name|List
argument_list|<
name|Cell
argument_list|>
name|kvs
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Cell
name|kv
range|:
name|kvs
control|)
block|{
name|byte
index|[]
name|expectedColname
init|=
name|makeQualifier
argument_list|(
name|rowIndex
argument_list|,
name|i
operator|++
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Column name"
argument_list|,
name|CellUtil
operator|.
name|matchingQualifier
argument_list|(
name|kv
argument_list|,
name|expectedColname
argument_list|)
argument_list|)
expr_stmt|;
comment|// Value is column name as bytes.  Usually result is
comment|// 100 bytes in size at least. This is the default size
comment|// for BytesWriteable.  For comparison, convert bytes to
comment|// String and trim to remove trailing null bytes.
name|assertTrue
argument_list|(
literal|"Content"
argument_list|,
name|CellUtil
operator|.
name|matchingValue
argument_list|(
name|kv
argument_list|,
name|expectedColname
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|addRows
parameter_list|(
name|int
name|count
parameter_list|,
specifier|final
name|MemStore
name|mem
parameter_list|)
block|{
name|long
name|nanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|" Took for 1k usec: "
operator|+
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|nanos
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|nanos
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|QUALIFIER_COUNT
condition|;
name|ii
operator|++
control|)
block|{
name|byte
index|[]
name|row
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qf
init|=
name|makeQualifier
argument_list|(
name|i
argument_list|,
name|ii
argument_list|)
decl_stmt|;
name|mem
operator|.
name|add
argument_list|(
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
name|FAMILY
argument_list|,
name|qf
argument_list|,
name|timestamp
argument_list|,
name|qf
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|doScan
parameter_list|(
name|MemStore
name|ms
parameter_list|,
name|int
name|iteration
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|nanos
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|KeyValueScanner
name|s
init|=
name|ms
operator|.
name|getScanners
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|s
operator|.
name|seek
argument_list|(
name|KeyValueUtil
operator|.
name|createFirstOnRow
argument_list|(
operator|new
name|byte
index|[]
block|{}
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|iteration
operator|+
literal|" create/seek took: "
operator|+
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|nanos
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|s
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
operator|++
name|cnt
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|iteration
operator|+
literal|" took usec: "
operator|+
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|nanos
operator|)
operator|/
literal|1000
operator|+
literal|" for: "
operator|+
name|cnt
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|MemStore
name|ms
init|=
operator|new
name|DefaultMemStore
argument_list|()
decl_stmt|;
name|long
name|n1
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|addRows
argument_list|(
literal|25000
argument_list|,
name|ms
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Took for insert: "
operator|+
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|n1
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
name|doScan
argument_list|(
name|ms
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

