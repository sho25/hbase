begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
operator|.
name|getClientKeytabForTesting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
operator|.
name|getClientPrincipalForTesting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
operator|.
name|getKeytabFileForTesting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
operator|.
name|getPrincipalForTesting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
operator|.
name|getSecuredConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|AuthUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|minikdc
operator|.
name|MiniKdc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestUsersOperationsWithSecureHadoop
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestUsersOperationsWithSecureHadoop
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|File
name|KEYTAB_FILE
init|=
operator|new
name|File
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|(
literal|"keytab"
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|MiniKdc
name|KDC
decl_stmt|;
specifier|private
specifier|static
name|String
name|HOST
init|=
literal|"localhost"
decl_stmt|;
specifier|private
specifier|static
name|String
name|PRINCIPAL
decl_stmt|;
specifier|private
specifier|static
name|String
name|CLIENT_NAME
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|destroyAndSetup
parameter_list|()
throws|throws
name|Exception
block|{
comment|//destroy localhost kerberos users
name|Process
name|process
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"bash"
block|,
literal|"-c"
block|,
literal|"kdestroy"
block|}
argument_list|)
decl_stmt|;
name|process
operator|.
name|waitFor
argument_list|(
literal|2
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// setup mini kdc
name|KDC
operator|=
name|TEST_UTIL
operator|.
name|setupMiniKdc
argument_list|(
name|KEYTAB_FILE
argument_list|)
expr_stmt|;
name|PRINCIPAL
operator|=
literal|"hbase/"
operator|+
name|HOST
expr_stmt|;
name|CLIENT_NAME
operator|=
literal|"foo"
expr_stmt|;
name|KDC
operator|.
name|createPrincipal
argument_list|(
name|KEYTAB_FILE
argument_list|,
name|PRINCIPAL
argument_list|,
name|CLIENT_NAME
argument_list|)
expr_stmt|;
name|HBaseKerberosUtils
operator|.
name|setPrincipalForTesting
argument_list|(
name|PRINCIPAL
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseKerberosUtils
operator|.
name|setKeytabFileForTesting
argument_list|(
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseKerberosUtils
operator|.
name|setClientPrincipalForTesting
argument_list|(
name|CLIENT_NAME
operator|+
literal|"@"
operator|+
name|KDC
operator|.
name|getRealm
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseKerberosUtils
operator|.
name|setClientKeytabForTesting
argument_list|(
name|KEYTAB_FILE
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|KDC
operator|!=
literal|null
condition|)
block|{
name|KDC
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
comment|/**    * test login with security enabled configuration To run this test, we must specify the following    * system properties:    *<p>    *<b> hbase.regionserver.kerberos.principal</b>    *<p>    *<b> hbase.regionserver.keytab.file</b>    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testUserLoginInSecureHadoop
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Default login is system user.
name|UserGroupInformation
name|defaultLogin
init|=
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
decl_stmt|;
name|String
name|nnKeyTab
init|=
name|getKeytabFileForTesting
argument_list|()
decl_stmt|;
name|String
name|dnPrincipal
init|=
name|getPrincipalForTesting
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"KerberosKeytab was not specified"
argument_list|,
name|nnKeyTab
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"KerberosPrincipal was not specified"
argument_list|,
name|dnPrincipal
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getSecuredConfiguration
argument_list|()
decl_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|User
operator|.
name|login
argument_list|(
name|conf
argument_list|,
name|HBaseKerberosUtils
operator|.
name|KRB_KEYTAB_FILE
argument_list|,
name|HBaseKerberosUtils
operator|.
name|KRB_PRINCIPAL
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|successLogin
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"ugi should be different in in case success login"
argument_list|,
name|defaultLogin
operator|.
name|equals
argument_list|(
name|successLogin
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoginWithUserKeytabAndPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|clientKeytab
init|=
name|getClientKeytabForTesting
argument_list|()
decl_stmt|;
name|String
name|clientPrincipal
init|=
name|getClientPrincipalForTesting
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Path for client keytab is not specified."
argument_list|,
name|clientKeytab
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Client principal is not specified."
argument_list|,
name|clientPrincipal
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getSecuredConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AuthUtil
operator|.
name|HBASE_CLIENT_KEYTAB_FILE
argument_list|,
name|clientKeytab
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AuthUtil
operator|.
name|HBASE_CLIENT_KERBEROS_PRINCIPAL
argument_list|,
name|clientPrincipal
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UserProvider
name|provider
init|=
name|UserProvider
operator|.
name|instantiate
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Client principal or keytab is empty"
argument_list|,
name|provider
operator|.
name|shouldLoginFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|provider
operator|.
name|login
argument_list|(
name|AuthUtil
operator|.
name|HBASE_CLIENT_KEYTAB_FILE
argument_list|,
name|AuthUtil
operator|.
name|HBASE_CLIENT_KERBEROS_PRINCIPAL
argument_list|)
expr_stmt|;
name|User
name|loginUser
init|=
name|provider
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|CLIENT_NAME
argument_list|,
name|loginUser
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getClientPrincipalForTesting
argument_list|()
argument_list|,
name|loginUser
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthUtilLogin
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|clientKeytab
init|=
name|getClientKeytabForTesting
argument_list|()
decl_stmt|;
name|String
name|clientPrincipal
init|=
name|getClientPrincipalForTesting
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getSecuredConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AuthUtil
operator|.
name|HBASE_CLIENT_KEYTAB_FILE
argument_list|,
name|clientKeytab
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AuthUtil
operator|.
name|HBASE_CLIENT_KERBEROS_PRINCIPAL
argument_list|,
name|clientPrincipal
argument_list|)
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|User
name|user
init|=
name|AuthUtil
operator|.
name|loginClient
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|user
operator|.
name|isLoginFromKeytab
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CLIENT_NAME
argument_list|,
name|user
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|getClientPrincipalForTesting
argument_list|()
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

