begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
operator|.
name|getConfigurationWoPrincipal
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
operator|.
name|getKeytabFileForTesting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
operator|.
name|getPrincipalForTesting
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
operator|.
name|getSecuredConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|HBaseKerberosUtils
operator|.
name|isKerberosPropertySetted
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestUsersOperationsWithSecureHadoop
block|{
comment|/**    * test login with security enabled configuration    *    * To run this test, we must specify the following system properties:    *<p>    *<b> hbase.regionserver.kerberos.principal</b>    *<p>    *<b> hbase.regionserver.keytab.file</b>    *    * @throws IOException    */
annotation|@
name|Test
specifier|public
name|void
name|testUserLoginInSecureHadoop
parameter_list|()
throws|throws
name|Exception
block|{
name|UserGroupInformation
name|defaultLogin
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
name|getConfigurationWoPrincipal
argument_list|()
decl_stmt|;
name|User
operator|.
name|login
argument_list|(
name|conf
argument_list|,
name|HBaseKerberosUtils
operator|.
name|KRB_KEYTAB_FILE
argument_list|,
name|HBaseKerberosUtils
operator|.
name|KRB_PRINCIPAL
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|failLogin
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"ugi should be the same in case fail login"
argument_list|,
name|defaultLogin
operator|.
name|equals
argument_list|(
name|failLogin
argument_list|)
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
name|isKerberosPropertySetted
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|nnKeyTab
init|=
name|getKeytabFileForTesting
argument_list|()
decl_stmt|;
name|String
name|dnPrincipal
init|=
name|getPrincipalForTesting
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"KerberosKeytab was not specified"
argument_list|,
name|nnKeyTab
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"KerberosPrincipal was not specified"
argument_list|,
name|dnPrincipal
argument_list|)
expr_stmt|;
name|conf
operator|=
name|getSecuredConfiguration
argument_list|()
expr_stmt|;
name|UserGroupInformation
operator|.
name|setConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|User
operator|.
name|login
argument_list|(
name|conf
argument_list|,
name|HBaseKerberosUtils
operator|.
name|KRB_KEYTAB_FILE
argument_list|,
name|HBaseKerberosUtils
operator|.
name|KRB_PRINCIPAL
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|UserGroupInformation
name|successLogin
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"ugi should be different in in case success login"
argument_list|,
name|defaultLogin
operator|.
name|equals
argument_list|(
name|successLogin
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

