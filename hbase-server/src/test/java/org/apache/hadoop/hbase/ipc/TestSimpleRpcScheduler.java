begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|LinkedBlockingQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CategoryBasedTimeout
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|Call
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|monitoring
operator|.
name|MonitoredRPCHandlerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|RequestConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|ClientProtos
operator|.
name|ScanRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
operator|.
name|RequestHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|RPCTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Threads
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|RPCTests
operator|.
name|class
block|,
name|SmallTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSimpleRpcScheduler
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TestRule
name|timeout
init|=
name|CategoryBasedTimeout
operator|.
name|builder
argument_list|()
operator|.
name|withTimeout
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withLookingForStuckThread
argument_list|(
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestSimpleRpcScheduler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RpcScheduler
operator|.
name|Context
name|CONTEXT
init|=
operator|new
name|RpcScheduler
operator|.
name|Context
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InetSocketAddress
name|getListenerAddress
parameter_list|()
block|{
return|return
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|PriorityFunction
name|qosFunction
init|=
name|mock
argument_list|(
name|PriorityFunction
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcScheduler
name|scheduler
init|=
operator|new
name|SimpleRpcScheduler
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qosFunction
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|CONTEXT
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|CallRunner
name|task
init|=
name|createMockTask
argument_list|()
decl_stmt|;
name|task
operator|.
name|setStatus
argument_list|(
operator|new
name|MonitoredRPCHandlerImpl
argument_list|()
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|task
argument_list|,
name|timeout
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlerIsolation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|CallRunner
name|generalTask
init|=
name|createMockTask
argument_list|()
decl_stmt|;
name|CallRunner
name|priorityTask
init|=
name|createMockTask
argument_list|()
decl_stmt|;
name|CallRunner
name|replicationTask
init|=
name|createMockTask
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CallRunner
argument_list|>
name|tasks
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|generalTask
argument_list|,
name|priorityTask
argument_list|,
name|replicationTask
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|CallRunner
argument_list|,
name|Integer
argument_list|>
name|qos
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|generalTask
argument_list|,
literal|0
argument_list|,
name|priorityTask
argument_list|,
name|HConstants
operator|.
name|HIGH_QOS
operator|+
literal|1
argument_list|,
name|replicationTask
argument_list|,
name|HConstants
operator|.
name|REPLICATION_QOS
argument_list|)
decl_stmt|;
name|PriorityFunction
name|qosFunction
init|=
name|mock
argument_list|(
name|PriorityFunction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|CallRunner
argument_list|,
name|Thread
argument_list|>
name|handlerThreads
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Answer
argument_list|<
name|Void
argument_list|>
name|answerToRun
init|=
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
synchronized|synchronized
init|(
name|handlerThreads
init|)
block|{
name|handlerThreads
operator|.
name|put
argument_list|(
operator|(
name|CallRunner
operator|)
name|invocationOnMock
operator|.
name|getMock
argument_list|()
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|CallRunner
name|task
range|:
name|tasks
control|)
block|{
name|task
operator|.
name|setStatus
argument_list|(
operator|new
name|MonitoredRPCHandlerImpl
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
name|answerToRun
argument_list|)
operator|.
name|when
argument_list|(
name|task
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|RpcScheduler
name|scheduler
init|=
operator|new
name|SimpleRpcScheduler
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|qosFunction
argument_list|,
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|CONTEXT
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|CallRunner
name|task
range|:
name|tasks
control|)
block|{
name|when
argument_list|(
name|qosFunction
operator|.
name|getPriority
argument_list|(
operator|(
name|RPCProtos
operator|.
name|RequestHeader
operator|)
name|anyObject
argument_list|()
argument_list|,
operator|(
name|Message
operator|)
name|anyObject
argument_list|()
argument_list|,
operator|(
name|User
operator|)
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|qos
operator|.
name|get
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CallRunner
name|task
range|:
name|tasks
control|)
block|{
name|verify
argument_list|(
name|task
argument_list|,
name|timeout
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Tests that these requests are handled by three distinct threads.
name|countDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|handlerThreads
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CallRunner
name|createMockTask
parameter_list|()
block|{
name|Call
name|call
init|=
name|mock
argument_list|(
name|Call
operator|.
name|class
argument_list|)
decl_stmt|;
name|CallRunner
name|task
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|call
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRpcScheduler
parameter_list|()
throws|throws
name|Exception
block|{
name|testRpcScheduler
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_TYPE_DEADLINE_CONF_VALUE
argument_list|)
expr_stmt|;
name|testRpcScheduler
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_TYPE_FIFO_CONF_VALUE
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testRpcScheduler
parameter_list|(
specifier|final
name|String
name|queueType
parameter_list|)
throws|throws
name|Exception
block|{
name|Configuration
name|schedConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|schedConf
operator|.
name|set
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_TYPE_CONF_KEY
argument_list|,
name|queueType
argument_list|)
expr_stmt|;
name|PriorityFunction
name|priority
init|=
name|mock
argument_list|(
name|PriorityFunction
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|priority
operator|.
name|getPriority
argument_list|(
name|any
argument_list|(
name|RequestHeader
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HConstants
operator|.
name|NORMAL_QOS
argument_list|)
expr_stmt|;
name|RpcScheduler
name|scheduler
init|=
operator|new
name|SimpleRpcScheduler
argument_list|(
name|schedConf
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|HConstants
operator|.
name|QOS_THRESHOLD
argument_list|)
decl_stmt|;
try|try
block|{
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|CallRunner
name|smallCallTask
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcServer
operator|.
name|Call
name|smallCall
init|=
name|mock
argument_list|(
name|RpcServer
operator|.
name|Call
operator|.
name|class
argument_list|)
decl_stmt|;
name|RequestHeader
name|smallHead
init|=
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCallId
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|smallCallTask
operator|.
name|getCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|smallCall
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|smallCall
operator|.
name|getHeader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|smallHead
argument_list|)
expr_stmt|;
name|CallRunner
name|largeCallTask
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcServer
operator|.
name|Call
name|largeCall
init|=
name|mock
argument_list|(
name|RpcServer
operator|.
name|Call
operator|.
name|class
argument_list|)
decl_stmt|;
name|RequestHeader
name|largeHead
init|=
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCallId
argument_list|(
literal|50
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|largeCallTask
operator|.
name|getCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|largeCall
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|largeCall
operator|.
name|getHeader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|largeHead
argument_list|)
expr_stmt|;
name|CallRunner
name|hugeCallTask
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcServer
operator|.
name|Call
name|hugeCall
init|=
name|mock
argument_list|(
name|RpcServer
operator|.
name|Call
operator|.
name|class
argument_list|)
decl_stmt|;
name|RequestHeader
name|hugeHead
init|=
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setCallId
argument_list|(
literal|100
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|hugeCallTask
operator|.
name|getCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hugeCall
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|hugeCall
operator|.
name|getHeader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|hugeHead
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|priority
operator|.
name|getDeadline
argument_list|(
name|eq
argument_list|(
name|smallHead
argument_list|)
argument_list|,
name|any
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|priority
operator|.
name|getDeadline
argument_list|(
name|eq
argument_list|(
name|largeHead
argument_list|)
argument_list|,
name|any
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|priority
operator|.
name|getDeadline
argument_list|(
name|eq
argument_list|(
name|hugeHead
argument_list|)
argument_list|,
name|any
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|100L
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|work
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|doAnswerTaskExecution
argument_list|(
name|smallCallTask
argument_list|,
name|work
argument_list|,
literal|10
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|doAnswerTaskExecution
argument_list|(
name|largeCallTask
argument_list|,
name|work
argument_list|,
literal|50
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|doAnswerTaskExecution
argument_list|(
name|hugeCallTask
argument_list|,
name|work
argument_list|,
literal|100
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|smallCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|smallCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|smallCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|hugeCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|smallCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|largeCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|smallCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|smallCallTask
argument_list|)
expr_stmt|;
while|while
condition|(
name|work
operator|.
name|size
argument_list|()
operator|<
literal|8
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|int
name|seqSum
init|=
literal|0
decl_stmt|;
name|int
name|totalTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|work
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Request i="
operator|+
name|i
operator|+
literal|" value="
operator|+
name|work
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|seqSum
operator|+=
name|work
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|totalTime
operator|+=
name|seqSum
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Total Time: "
operator|+
name|totalTime
argument_list|)
expr_stmt|;
comment|// -> [small small small huge small large small small]
comment|// -> NO REORDER   [10 10 10 100 10 50 10 10] -> 930 (FIFO Queue)
comment|// -> WITH REORDER [10 10 10 10 10 10 50 100] -> 530 (Deadline Queue)
if|if
condition|(
name|queueType
operator|.
name|equals
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_TYPE_DEADLINE_CONF_VALUE
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|530
argument_list|,
name|totalTime
argument_list|)
expr_stmt|;
block|}
else|else
comment|/* if (queueType.equals(SimpleRpcScheduler.CALL_QUEUE_TYPE_FIFO_CONF_VALUE)) */
block|{
name|assertEquals
argument_list|(
literal|930
argument_list|,
name|totalTime
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanQueueWithZeroScanRatio
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|schedConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|schedConf
operator|.
name|setFloat
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_HANDLER_FACTOR_CONF_KEY
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|schedConf
operator|.
name|setFloat
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_READ_SHARE_CONF_KEY
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|schedConf
operator|.
name|setFloat
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_SCAN_SHARE_CONF_KEY
argument_list|,
literal|0f
argument_list|)
expr_stmt|;
name|PriorityFunction
name|priority
init|=
name|mock
argument_list|(
name|PriorityFunction
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|priority
operator|.
name|getPriority
argument_list|(
name|any
argument_list|(
name|RequestHeader
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HConstants
operator|.
name|NORMAL_QOS
argument_list|)
expr_stmt|;
name|RpcScheduler
name|scheduler
init|=
operator|new
name|SimpleRpcScheduler
argument_list|(
name|schedConf
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|HConstants
operator|.
name|QOS_THRESHOLD
argument_list|)
decl_stmt|;
name|assertNotEquals
argument_list|(
name|scheduler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testScanQueues
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|schedConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|schedConf
operator|.
name|setFloat
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_HANDLER_FACTOR_CONF_KEY
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|schedConf
operator|.
name|setFloat
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_READ_SHARE_CONF_KEY
argument_list|,
literal|0.7f
argument_list|)
expr_stmt|;
name|schedConf
operator|.
name|setFloat
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_SCAN_SHARE_CONF_KEY
argument_list|,
literal|0.5f
argument_list|)
expr_stmt|;
name|PriorityFunction
name|priority
init|=
name|mock
argument_list|(
name|PriorityFunction
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|priority
operator|.
name|getPriority
argument_list|(
name|any
argument_list|(
name|RequestHeader
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HConstants
operator|.
name|NORMAL_QOS
argument_list|)
expr_stmt|;
name|RpcScheduler
name|scheduler
init|=
operator|new
name|SimpleRpcScheduler
argument_list|(
name|schedConf
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|HConstants
operator|.
name|QOS_THRESHOLD
argument_list|)
decl_stmt|;
try|try
block|{
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|CallRunner
name|putCallTask
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcServer
operator|.
name|Call
name|putCall
init|=
name|mock
argument_list|(
name|RpcServer
operator|.
name|Call
operator|.
name|class
argument_list|)
decl_stmt|;
name|putCall
operator|.
name|param
operator|=
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RequestHeader
name|putHead
init|=
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMethodName
argument_list|(
literal|"mutate"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|putCallTask
operator|.
name|getCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|putCall
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|putCall
operator|.
name|getHeader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|putHead
argument_list|)
expr_stmt|;
name|CallRunner
name|getCallTask
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcServer
operator|.
name|Call
name|getCall
init|=
name|mock
argument_list|(
name|RpcServer
operator|.
name|Call
operator|.
name|class
argument_list|)
decl_stmt|;
name|RequestHeader
name|getHead
init|=
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMethodName
argument_list|(
literal|"get"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|getCallTask
operator|.
name|getCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getCall
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|getCall
operator|.
name|getHeader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|getHead
argument_list|)
expr_stmt|;
name|CallRunner
name|scanCallTask
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcServer
operator|.
name|Call
name|scanCall
init|=
name|mock
argument_list|(
name|RpcServer
operator|.
name|Call
operator|.
name|class
argument_list|)
decl_stmt|;
name|scanCall
operator|.
name|param
operator|=
name|ScanRequest
operator|.
name|newBuilder
argument_list|()
operator|.
name|setScannerId
argument_list|(
literal|1
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|RequestHeader
name|scanHead
init|=
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMethodName
argument_list|(
literal|"scan"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|scanCallTask
operator|.
name|getCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scanCall
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|scanCall
operator|.
name|getHeader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|scanHead
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|work
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|doAnswerTaskExecution
argument_list|(
name|putCallTask
argument_list|,
name|work
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|doAnswerTaskExecution
argument_list|(
name|getCallTask
argument_list|,
name|work
argument_list|,
literal|2
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|doAnswerTaskExecution
argument_list|(
name|scanCallTask
argument_list|,
name|work
argument_list|,
literal|3
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// There are 3 queues: [puts], [gets], [scans]
comment|// so the calls will be interleaved
name|scheduler
operator|.
name|dispatch
argument_list|(
name|putCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|putCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|putCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|getCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|getCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|getCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|scanCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|scanCallTask
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|scanCallTask
argument_list|)
expr_stmt|;
while|while
condition|(
name|work
operator|.
name|size
argument_list|()
operator|<
literal|6
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|work
operator|.
name|size
argument_list|()
operator|-
literal|2
condition|;
name|i
operator|+=
literal|3
control|)
block|{
name|assertNotEquals
argument_list|(
name|work
operator|.
name|get
argument_list|(
name|i
operator|+
literal|0
argument_list|)
argument_list|,
name|work
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|work
operator|.
name|get
argument_list|(
name|i
operator|+
literal|0
argument_list|)
argument_list|,
name|work
operator|.
name|get
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|work
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|work
operator|.
name|get
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doAnswerTaskExecution
parameter_list|(
specifier|final
name|CallRunner
name|callTask
parameter_list|,
specifier|final
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|results
parameter_list|,
specifier|final
name|int
name|value
parameter_list|,
specifier|final
name|int
name|sleepInterval
parameter_list|)
block|{
name|callTask
operator|.
name|setStatus
argument_list|(
operator|new
name|MonitoredRPCHandlerImpl
argument_list|()
argument_list|)
expr_stmt|;
name|doAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
block|{
synchronized|synchronized
init|(
name|results
init|)
block|{
name|results
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|Threads
operator|.
name|sleepWithoutInterrupt
argument_list|(
name|sleepInterval
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
operator|.
name|when
argument_list|(
name|callTask
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|waitUntilQueueEmpty
parameter_list|(
name|SimpleRpcScheduler
name|scheduler
parameter_list|)
throws|throws
name|InterruptedException
block|{
while|while
condition|(
name|scheduler
operator|.
name|getGeneralQueueLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSoftAndHardQueueLimits
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|schedConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|schedConf
operator|.
name|setInt
argument_list|(
name|HConstants
operator|.
name|REGION_SERVER_HANDLER_COUNT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|schedConf
operator|.
name|setInt
argument_list|(
literal|"hbase.ipc.server.max.callqueue.length"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|PriorityFunction
name|priority
init|=
name|mock
argument_list|(
name|PriorityFunction
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|priority
operator|.
name|getPriority
argument_list|(
name|any
argument_list|(
name|RequestHeader
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HConstants
operator|.
name|NORMAL_QOS
argument_list|)
expr_stmt|;
name|SimpleRpcScheduler
name|scheduler
init|=
operator|new
name|SimpleRpcScheduler
argument_list|(
name|schedConf
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|priority
argument_list|,
name|HConstants
operator|.
name|QOS_THRESHOLD
argument_list|)
decl_stmt|;
try|try
block|{
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|CallRunner
name|putCallTask
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcServer
operator|.
name|Call
name|putCall
init|=
name|mock
argument_list|(
name|RpcServer
operator|.
name|Call
operator|.
name|class
argument_list|)
decl_stmt|;
name|putCall
operator|.
name|param
operator|=
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RequestHeader
name|putHead
init|=
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMethodName
argument_list|(
literal|"mutate"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|putCallTask
operator|.
name|getCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|putCall
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|putCall
operator|.
name|getHeader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|putHead
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|dispatch
argument_list|(
name|putCallTask
argument_list|)
argument_list|)
expr_stmt|;
name|schedConf
operator|.
name|setInt
argument_list|(
literal|"hbase.ipc.server.max.callqueue.length"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|onConfigurationChange
argument_list|(
name|schedConf
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|scheduler
operator|.
name|dispatch
argument_list|(
name|putCallTask
argument_list|)
argument_list|)
expr_stmt|;
name|waitUntilQueueEmpty
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|schedConf
operator|.
name|setInt
argument_list|(
literal|"hbase.ipc.server.max.callqueue.length"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|onConfigurationChange
argument_list|(
name|schedConf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|scheduler
operator|.
name|dispatch
argument_list|(
name|putCallTask
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|CoDelEnvironmentEdge
implements|implements
name|EnvironmentEdge
block|{
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|Long
argument_list|>
name|timeQ
init|=
operator|new
name|LinkedBlockingQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|long
name|offset
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|threadNamePrefixs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|long
name|currentTime
parameter_list|()
block|{
for|for
control|(
name|String
name|threadNamePrefix
range|:
name|threadNamePrefixs
control|)
block|{
if|if
condition|(
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|threadNamePrefix
argument_list|)
condition|)
block|{
return|return
name|timeQ
operator|.
name|poll
argument_list|()
operator|.
name|longValue
argument_list|()
operator|+
name|offset
return|;
block|}
block|}
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCoDelScheduling
parameter_list|()
throws|throws
name|Exception
block|{
name|CoDelEnvironmentEdge
name|envEdge
init|=
operator|new
name|CoDelEnvironmentEdge
argument_list|()
decl_stmt|;
name|envEdge
operator|.
name|threadNamePrefixs
operator|.
name|add
argument_list|(
literal|"RW.default"
argument_list|)
expr_stmt|;
name|envEdge
operator|.
name|threadNamePrefixs
operator|.
name|add
argument_list|(
literal|"B.default"
argument_list|)
expr_stmt|;
name|Configuration
name|schedConf
init|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
decl_stmt|;
name|schedConf
operator|.
name|set
argument_list|(
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_TYPE_CONF_KEY
argument_list|,
name|SimpleRpcScheduler
operator|.
name|CALL_QUEUE_TYPE_CODEL_CONF_VALUE
argument_list|)
expr_stmt|;
name|PriorityFunction
name|priority
init|=
name|mock
argument_list|(
name|PriorityFunction
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|priority
operator|.
name|getPriority
argument_list|(
name|any
argument_list|(
name|RPCProtos
operator|.
name|RequestHeader
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|User
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|HConstants
operator|.
name|NORMAL_QOS
argument_list|)
expr_stmt|;
name|SimpleRpcScheduler
name|scheduler
init|=
operator|new
name|SimpleRpcScheduler
argument_list|(
name|schedConf
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|priority
argument_list|,
name|HConstants
operator|.
name|QOS_THRESHOLD
argument_list|)
decl_stmt|;
try|try
block|{
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|EnvironmentEdgeManager
operator|.
name|injectEdge
argument_list|(
name|envEdge
argument_list|)
expr_stmt|;
name|envEdge
operator|.
name|offset
operator|=
literal|5
expr_stmt|;
comment|// calls faster than min delay
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|envEdge
operator|.
name|timeQ
operator|.
name|put
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|CallRunner
name|cr
init|=
name|getMockedCallRunner
argument_list|(
name|time
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
comment|// make sure fast calls are handled
name|waitUntilQueueEmpty
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"None of these calls should have been discarded"
argument_list|,
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumGeneralCallsDropped
argument_list|()
argument_list|)
expr_stmt|;
name|envEdge
operator|.
name|offset
operator|=
literal|6
expr_stmt|;
comment|// calls slower than min delay, but not individually slow enough to be dropped
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|envEdge
operator|.
name|timeQ
operator|.
name|put
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|CallRunner
name|cr
init|=
name|getMockedCallRunner
argument_list|(
name|time
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
comment|// make sure somewhat slow calls are handled
name|waitUntilQueueEmpty
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"None of these calls should have been discarded"
argument_list|,
literal|0
argument_list|,
name|scheduler
operator|.
name|getNumGeneralCallsDropped
argument_list|()
argument_list|)
expr_stmt|;
name|envEdge
operator|.
name|offset
operator|=
literal|12
expr_stmt|;
comment|// now slow calls and the ones to be dropped
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|envEdge
operator|.
name|timeQ
operator|.
name|put
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|CallRunner
name|cr
init|=
name|getMockedCallRunner
argument_list|(
name|time
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
comment|// make sure somewhat slow calls are handled
name|waitUntilQueueEmpty
argument_list|(
name|scheduler
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"There should have been at least 12 calls dropped"
argument_list|,
name|scheduler
operator|.
name|getNumGeneralCallsDropped
argument_list|()
operator|>
literal|12
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|CallRunner
name|getMockedCallRunner
parameter_list|(
name|long
name|timestamp
parameter_list|)
throws|throws
name|IOException
block|{
name|CallRunner
name|putCallTask
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcServer
operator|.
name|Call
name|putCall
init|=
name|mock
argument_list|(
name|RpcServer
operator|.
name|Call
operator|.
name|class
argument_list|)
decl_stmt|;
name|putCall
operator|.
name|param
operator|=
name|RequestConverter
operator|.
name|buildMutateRequest
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|RPCProtos
operator|.
name|RequestHeader
name|putHead
init|=
name|RPCProtos
operator|.
name|RequestHeader
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMethodName
argument_list|(
literal|"mutate"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|when
argument_list|(
name|putCallTask
operator|.
name|getCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|putCall
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|putCall
operator|.
name|getHeader
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|putHead
argument_list|)
expr_stmt|;
name|putCall
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
return|return
name|putCallTask
return|;
block|}
block|}
end_class

end_unit

