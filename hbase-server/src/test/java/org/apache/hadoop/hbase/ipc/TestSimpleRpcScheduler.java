begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|SmallTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ipc
operator|.
name|RpcServer
operator|.
name|Call
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|protobuf
operator|.
name|generated
operator|.
name|RPCProtos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|anyObject
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|doAnswer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|timeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
name|SmallTests
operator|.
name|class
argument_list|)
specifier|public
class|class
name|TestSimpleRpcScheduler
block|{
specifier|private
specifier|final
name|RpcScheduler
operator|.
name|Context
name|CONTEXT
init|=
operator|new
name|RpcScheduler
operator|.
name|Context
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|InetSocketAddress
name|getListenerAddress
parameter_list|()
block|{
return|return
name|InetSocketAddress
operator|.
name|createUnresolved
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|1000
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|conf
operator|=
name|HBaseConfiguration
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|PriorityFunction
name|qosFunction
init|=
name|mock
argument_list|(
name|PriorityFunction
operator|.
name|class
argument_list|)
decl_stmt|;
name|RpcScheduler
name|scheduler
init|=
operator|new
name|SimpleRpcScheduler
argument_list|(
name|conf
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|qosFunction
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|CONTEXT
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
name|CallRunner
name|task
init|=
name|createMockTask
argument_list|()
decl_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|task
argument_list|,
name|timeout
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHandlerIsolation
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|CallRunner
name|generalTask
init|=
name|createMockTask
argument_list|()
decl_stmt|;
name|CallRunner
name|priorityTask
init|=
name|createMockTask
argument_list|()
decl_stmt|;
name|CallRunner
name|replicationTask
init|=
name|createMockTask
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CallRunner
argument_list|>
name|tasks
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|generalTask
argument_list|,
name|priorityTask
argument_list|,
name|replicationTask
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|CallRunner
argument_list|,
name|Integer
argument_list|>
name|qos
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|generalTask
argument_list|,
literal|0
argument_list|,
name|priorityTask
argument_list|,
name|HConstants
operator|.
name|HIGH_QOS
operator|+
literal|1
argument_list|,
name|replicationTask
argument_list|,
name|HConstants
operator|.
name|REPLICATION_QOS
argument_list|)
decl_stmt|;
name|PriorityFunction
name|qosFunction
init|=
name|mock
argument_list|(
name|PriorityFunction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|CallRunner
argument_list|,
name|Thread
argument_list|>
name|handlerThreads
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|Answer
argument_list|<
name|Void
argument_list|>
name|answerToRun
init|=
operator|new
name|Answer
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|handlerThreads
operator|.
name|put
argument_list|(
operator|(
name|CallRunner
operator|)
name|invocationOnMock
operator|.
name|getMock
argument_list|()
argument_list|,
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|CallRunner
name|task
range|:
name|tasks
control|)
block|{
name|doAnswer
argument_list|(
name|answerToRun
argument_list|)
operator|.
name|when
argument_list|(
name|task
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|RpcScheduler
name|scheduler
init|=
operator|new
name|SimpleRpcScheduler
argument_list|(
name|conf
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|qosFunction
argument_list|,
name|HConstants
operator|.
name|HIGH_QOS
argument_list|)
decl_stmt|;
name|scheduler
operator|.
name|init
argument_list|(
name|CONTEXT
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|CallRunner
name|task
range|:
name|tasks
control|)
block|{
name|when
argument_list|(
name|qosFunction
operator|.
name|getPriority
argument_list|(
operator|(
name|RPCProtos
operator|.
name|RequestHeader
operator|)
name|anyObject
argument_list|()
argument_list|,
operator|(
name|Message
operator|)
name|anyObject
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|qos
operator|.
name|get
argument_list|(
name|task
argument_list|)
argument_list|)
expr_stmt|;
name|scheduler
operator|.
name|dispatch
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CallRunner
name|task
range|:
name|tasks
control|)
block|{
name|verify
argument_list|(
name|task
argument_list|,
name|timeout
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|scheduler
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Tests that these requests are handled by three distinct threads.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|handlerThreads
operator|.
name|values
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CallRunner
name|createMockTask
parameter_list|()
block|{
name|Call
name|call
init|=
name|mock
argument_list|(
name|Call
operator|.
name|class
argument_list|)
decl_stmt|;
name|CallRunner
name|task
init|=
name|mock
argument_list|(
name|CallRunner
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|task
operator|.
name|getCall
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|call
argument_list|)
expr_stmt|;
return|return
name|task
return|;
block|}
block|}
end_class

end_unit

