begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|ArrayBackedTag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseCommonTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|KeyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Tag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ColumnFamilyDescriptorBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Durability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|fs
operator|.
name|HFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|compress
operator|.
name|Compression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|encoding
operator|.
name|DataBlockEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|io
operator|.
name|hfile
operator|.
name|bucket
operator|.
name|BucketCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|BloomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|StoreFileWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|IOTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|BloomFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|ChecksumType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|EnvironmentEdgeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hbase
operator|.
name|thirdparty
operator|.
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Tests {@link HFile} cache-on-write functionality for the following block  * types: data blocks, non-root index blocks, and Bloom filter blocks.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
annotation|@
name|Category
argument_list|(
block|{
name|IOTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestCacheOnWrite
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestCacheOnWrite
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestCacheOnWrite
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|TEST_UTIL
init|=
name|HBaseTestingUtility
operator|.
name|createLocalHTU
argument_list|()
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|CacheConfig
name|cacheConf
decl_stmt|;
specifier|private
name|FileSystem
name|fs
decl_stmt|;
specifier|private
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
literal|12983177L
argument_list|)
decl_stmt|;
specifier|private
name|Path
name|storeFilePath
decl_stmt|;
specifier|private
name|BlockCache
name|blockCache
decl_stmt|;
specifier|private
name|String
name|testDescription
decl_stmt|;
specifier|private
specifier|final
name|CacheOnWriteType
name|cowType
decl_stmt|;
specifier|private
specifier|final
name|Compression
operator|.
name|Algorithm
name|compress
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cacheCompressedData
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DATA_BLOCK_SIZE
init|=
literal|2048
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_KV
init|=
literal|25000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_BLOCK_SIZE
init|=
literal|512
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BLOOM_BLOCK_SIZE
init|=
literal|4096
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BloomType
name|BLOOM_TYPE
init|=
name|BloomType
operator|.
name|ROWCOL
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CKBYTES
init|=
literal|512
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|BlockType
argument_list|>
name|INDEX_BLOCK_TYPES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|BlockType
operator|.
name|INDEX_V1
argument_list|,
name|BlockType
operator|.
name|INTERMEDIATE_INDEX
argument_list|,
name|BlockType
operator|.
name|ROOT_INDEX
argument_list|,
name|BlockType
operator|.
name|LEAF_INDEX
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|BlockType
argument_list|>
name|BLOOM_BLOCK_TYPES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|BlockType
operator|.
name|BLOOM_CHUNK
argument_list|,
name|BlockType
operator|.
name|GENERAL_BLOOM_META
argument_list|,
name|BlockType
operator|.
name|DELETE_FAMILY_BLOOM_META
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|BlockType
argument_list|>
name|DATA_BLOCK_TYPES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|BlockType
operator|.
name|ENCODED_DATA
argument_list|,
name|BlockType
operator|.
name|DATA
argument_list|)
decl_stmt|;
comment|// All test cases are supposed to generate files for compaction within this range
specifier|private
specifier|static
specifier|final
name|long
name|CACHE_COMPACTION_LOW_THRESHOLD
init|=
literal|10L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|CACHE_COMPACTION_HIGH_THRESHOLD
init|=
literal|1
operator|*
literal|1024
operator|*
literal|1024
operator|*
literal|1024L
decl_stmt|;
comment|/** The number of valid key types possible in a store file */
specifier|private
specifier|static
specifier|final
name|int
name|NUM_VALID_KEY_TYPES
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
operator|-
literal|2
decl_stmt|;
specifier|private
enum|enum
name|CacheOnWriteType
block|{
name|DATA_BLOCKS
parameter_list|(
name|CacheConfig
operator|.
name|CACHE_BLOCKS_ON_WRITE_KEY
parameter_list|,
name|BlockType
operator|.
name|DATA
parameter_list|,
name|BlockType
operator|.
name|ENCODED_DATA
parameter_list|)
operator|,
constructor|BLOOM_BLOCKS(CacheConfig.CACHE_BLOOM_BLOCKS_ON_WRITE_KEY
operator|,
constructor|BlockType.BLOOM_CHUNK
block|)
enum|,
name|INDEX_BLOCKS
parameter_list|(
name|CacheConfig
operator|.
name|CACHE_INDEX_BLOCKS_ON_WRITE_KEY
parameter_list|,
name|BlockType
operator|.
name|LEAF_INDEX
parameter_list|,
name|BlockType
operator|.
name|INTERMEDIATE_INDEX
parameter_list|)
constructor_decl|;
specifier|private
specifier|final
name|String
name|confKey
decl_stmt|;
specifier|private
specifier|final
name|BlockType
name|blockType1
decl_stmt|;
specifier|private
specifier|final
name|BlockType
name|blockType2
decl_stmt|;
name|CacheOnWriteType
parameter_list|(
name|String
name|confKey
parameter_list|,
name|BlockType
name|blockType
parameter_list|)
block|{
name|this
argument_list|(
name|confKey
argument_list|,
name|blockType
argument_list|,
name|blockType
argument_list|)
expr_stmt|;
block|}
name|CacheOnWriteType
parameter_list|(
name|String
name|confKey
parameter_list|,
name|BlockType
name|blockType1
parameter_list|,
name|BlockType
name|blockType2
parameter_list|)
block|{
name|this
operator|.
name|blockType1
operator|=
name|blockType1
expr_stmt|;
name|this
operator|.
name|blockType2
operator|=
name|blockType2
expr_stmt|;
name|this
operator|.
name|confKey
operator|=
name|confKey
expr_stmt|;
block|}
specifier|public
name|boolean
name|shouldBeCached
parameter_list|(
name|BlockType
name|blockType
parameter_list|)
block|{
return|return
name|blockType
operator|==
name|blockType1
operator|||
name|blockType
operator|==
name|blockType2
return|;
block|}
specifier|public
name|void
name|modifyConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
for|for
control|(
name|CacheOnWriteType
name|cowType
range|:
name|CacheOnWriteType
operator|.
name|values
argument_list|()
control|)
block|{
name|conf
operator|.
name|setBoolean
argument_list|(
name|cowType
operator|.
name|confKey
argument_list|,
name|cowType
operator|==
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_constructor
specifier|public
name|TestCacheOnWrite
parameter_list|(
name|CacheOnWriteType
name|cowType
parameter_list|,
name|Compression
operator|.
name|Algorithm
name|compress
parameter_list|,
name|boolean
name|cacheCompressedData
parameter_list|,
name|BlockCache
name|blockCache
parameter_list|)
block|{
name|this
operator|.
name|cowType
operator|=
name|cowType
expr_stmt|;
name|this
operator|.
name|compress
operator|=
name|compress
expr_stmt|;
name|this
operator|.
name|cacheCompressedData
operator|=
name|cacheCompressedData
expr_stmt|;
name|this
operator|.
name|blockCache
operator|=
name|blockCache
expr_stmt|;
name|testDescription
operator|=
literal|"[cacheOnWrite="
operator|+
name|cowType
operator|+
literal|", compress="
operator|+
name|compress
operator|+
literal|", cacheCompressedData="
operator|+
name|cacheCompressedData
operator|+
literal|"]"
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|testDescription
argument_list|)
expr_stmt|;
block|}
end_constructor

begin_function
specifier|private
specifier|static
name|List
argument_list|<
name|BlockCache
argument_list|>
name|getBlockCaches
parameter_list|()
throws|throws
name|IOException
block|{
name|Configuration
name|conf
init|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BlockCache
argument_list|>
name|blockcaches
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// default
name|blockcaches
operator|.
name|add
argument_list|(
name|BlockCacheFactory
operator|.
name|createBlockCache
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|//set LruBlockCache.LRU_HARD_CAPACITY_LIMIT_FACTOR_CONFIG_NAME to 2.0f due to HBASE-16287
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
operator|.
name|setFloat
argument_list|(
name|LruBlockCache
operator|.
name|LRU_HARD_CAPACITY_LIMIT_FACTOR_CONFIG_NAME
argument_list|,
literal|2.0f
argument_list|)
expr_stmt|;
comment|// memory
name|BlockCache
name|lru
init|=
operator|new
name|LruBlockCache
argument_list|(
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|64
operator|*
literal|1024
argument_list|,
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|blockcaches
operator|.
name|add
argument_list|(
name|lru
argument_list|)
expr_stmt|;
comment|// bucket cache
name|FileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|)
expr_stmt|;
name|int
index|[]
name|bucketSizes
init|=
block|{
name|INDEX_BLOCK_SIZE
block|,
name|DATA_BLOCK_SIZE
block|,
name|BLOOM_BLOCK_SIZE
block|,
literal|64
operator|*
literal|1024
block|,
literal|128
operator|*
literal|1024
block|}
decl_stmt|;
name|BlockCache
name|bucketcache
init|=
operator|new
name|BucketCache
argument_list|(
literal|"offheap"
argument_list|,
literal|128
operator|*
literal|1024
operator|*
literal|1024
argument_list|,
literal|64
operator|*
literal|1024
argument_list|,
name|bucketSizes
argument_list|,
literal|5
argument_list|,
literal|64
operator|*
literal|100
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|blockcaches
operator|.
name|add
argument_list|(
name|bucketcache
argument_list|)
expr_stmt|;
return|return
name|blockcaches
return|;
block|}
end_function

begin_function
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|getParameters
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|BlockCache
name|blockCache
range|:
name|getBlockCaches
argument_list|()
control|)
block|{
for|for
control|(
name|CacheOnWriteType
name|cowType
range|:
name|CacheOnWriteType
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Compression
operator|.
name|Algorithm
name|compress
range|:
name|HBaseCommonTestingUtility
operator|.
name|COMPRESSION_ALGORITHMS
control|)
block|{
for|for
control|(
name|boolean
name|cacheCompressedData
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|params
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|cowType
block|,
name|compress
block|,
name|cacheCompressedData
block|,
name|blockCache
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|params
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|clearBlockCache
parameter_list|(
name|BlockCache
name|blockCache
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|blockCache
operator|instanceof
name|LruBlockCache
condition|)
block|{
operator|(
operator|(
name|LruBlockCache
operator|)
name|blockCache
operator|)
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// BucketCache may not return all cached blocks(blocks in write queue), so check it here.
for|for
control|(
name|int
name|clearCount
init|=
literal|0
init|;
name|blockCache
operator|.
name|getBlockCount
argument_list|()
operator|>
literal|0
condition|;
name|clearCount
operator|++
control|)
block|{
if|if
condition|(
name|clearCount
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"clear block cache "
operator|+
name|blockCache
operator|+
literal|" "
operator|+
name|clearCount
operator|+
literal|" times, "
operator|+
name|blockCache
operator|.
name|getBlockCount
argument_list|()
operator|+
literal|" blocks remaining"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CachedBlock
name|block
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|blockCache
argument_list|)
control|)
block|{
name|BlockCacheKey
name|key
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|block
operator|.
name|getFilename
argument_list|()
argument_list|,
name|block
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
comment|// CombinedBucketCache may need evict two times.
for|for
control|(
name|int
name|evictCount
init|=
literal|0
init|;
name|blockCache
operator|.
name|evictBlock
argument_list|(
name|key
argument_list|)
condition|;
name|evictCount
operator|++
control|)
block|{
if|if
condition|(
name|evictCount
operator|>
literal|1
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"evict block "
operator|+
name|block
operator|+
literal|" in "
operator|+
name|blockCache
operator|+
literal|" "
operator|+
name|evictCount
operator|+
literal|" times, maybe a bug here"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|IOException
block|{
name|conf
operator|=
name|TEST_UTIL
operator|.
name|getConfiguration
argument_list|()
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|set
argument_list|(
literal|"dfs.datanode.data.dir.perm"
argument_list|,
literal|"700"
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|HFileBlockIndex
operator|.
name|MAX_CHUNK_SIZE_KEY
argument_list|,
name|INDEX_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setInt
argument_list|(
name|BloomFilterFactory
operator|.
name|IO_STOREFILE_BLOOM_BLOCK_SIZE
argument_list|,
name|BLOOM_BLOCK_SIZE
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_DATA_BLOCKS_COMPRESSED_KEY
argument_list|,
name|cacheCompressedData
argument_list|)
expr_stmt|;
name|cowType
operator|.
name|modifyConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_BLOCKS_ON_WRITE_KEY
argument_list|,
name|cowType
operator|.
name|shouldBeCached
argument_list|(
name|BlockType
operator|.
name|DATA
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_INDEX_BLOCKS_ON_WRITE_KEY
argument_list|,
name|cowType
operator|.
name|shouldBeCached
argument_list|(
name|BlockType
operator|.
name|LEAF_INDEX
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_BLOOM_BLOCKS_ON_WRITE_KEY
argument_list|,
name|cowType
operator|.
name|shouldBeCached
argument_list|(
name|BlockType
operator|.
name|BLOOM_CHUNK
argument_list|)
argument_list|)
expr_stmt|;
name|cacheConf
operator|=
operator|new
name|CacheConfig
argument_list|(
name|conf
argument_list|,
name|blockCache
argument_list|)
expr_stmt|;
name|fs
operator|=
name|HFileSystem
operator|.
name|get
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|clearBlockCache
argument_list|(
name|blockCache
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|IOException
block|{
name|TEST_UTIL
operator|.
name|cleanupTestDir
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|testStoreFileCacheOnWriteInternals
parameter_list|(
name|boolean
name|useTags
parameter_list|)
throws|throws
name|IOException
block|{
name|writeStoreFile
argument_list|(
name|useTags
argument_list|)
expr_stmt|;
name|readStoreFile
argument_list|(
name|useTags
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|readStoreFile
parameter_list|(
name|boolean
name|useTags
parameter_list|)
throws|throws
name|IOException
block|{
name|HFile
operator|.
name|Reader
name|reader
init|=
name|HFile
operator|.
name|createReader
argument_list|(
name|fs
argument_list|,
name|storeFilePath
argument_list|,
name|cacheConf
argument_list|,
literal|true
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"HFile information: "
operator|+
name|reader
argument_list|)
expr_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withCompression
argument_list|(
name|compress
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|CKBYTES
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|ChecksumType
operator|.
name|NULL
argument_list|)
operator|.
name|withBlockSize
argument_list|(
name|DATA_BLOCK_SIZE
argument_list|)
operator|.
name|withDataBlockEncoding
argument_list|(
name|NoOpDataBlockEncoder
operator|.
name|INSTANCE
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|)
operator|.
name|withIncludesTags
argument_list|(
name|useTags
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|cacheBlocks
init|=
literal|false
decl_stmt|;
specifier|final
name|boolean
name|pread
init|=
literal|false
decl_stmt|;
name|HFileScanner
name|scanner
init|=
name|reader
operator|.
name|getScanner
argument_list|(
name|cacheBlocks
argument_list|,
name|pread
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|testDescription
argument_list|,
name|scanner
operator|.
name|seekTo
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
name|EnumMap
argument_list|<
name|BlockType
argument_list|,
name|Integer
argument_list|>
name|blockCountByType
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|BlockType
operator|.
name|class
argument_list|)
decl_stmt|;
name|DataBlockEncoding
name|encodingInCache
init|=
name|NoOpDataBlockEncoder
operator|.
name|INSTANCE
operator|.
name|getDataBlockEncoding
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|cachedBlocksOffset
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Pair
argument_list|<
name|HFileBlock
argument_list|,
name|HFileBlock
argument_list|>
argument_list|>
name|cachedBlocks
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|offset
operator|<
name|reader
operator|.
name|getTrailer
argument_list|()
operator|.
name|getLoadOnOpenDataOffset
argument_list|()
condition|)
block|{
comment|// Flags: don't cache the block, use pread, this is not a compaction.
comment|// Also, pass null for expected block type to avoid checking it.
name|HFileBlock
name|block
init|=
name|reader
operator|.
name|readBlock
argument_list|(
name|offset
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|encodingInCache
argument_list|)
decl_stmt|;
name|BlockCacheKey
name|blockCacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|reader
operator|.
name|getName
argument_list|()
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|HFileBlock
name|fromCache
init|=
operator|(
name|HFileBlock
operator|)
name|blockCache
operator|.
name|getBlock
argument_list|(
name|blockCacheKey
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|isCached
init|=
name|fromCache
operator|!=
literal|null
decl_stmt|;
name|cachedBlocksOffset
operator|.
name|add
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|cachedBlocks
operator|.
name|put
argument_list|(
name|offset
argument_list|,
name|fromCache
operator|==
literal|null
condition|?
literal|null
else|:
name|Pair
operator|.
name|newPair
argument_list|(
name|block
argument_list|,
name|fromCache
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|shouldBeCached
init|=
name|cowType
operator|.
name|shouldBeCached
argument_list|(
name|block
operator|.
name|getBlockType
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"shouldBeCached: "
operator|+
name|shouldBeCached
operator|+
literal|"\n"
operator|+
literal|"isCached: "
operator|+
name|isCached
operator|+
literal|"\n"
operator|+
literal|"Test description: "
operator|+
name|testDescription
operator|+
literal|"\n"
operator|+
literal|"block: "
operator|+
name|block
operator|+
literal|"\n"
operator|+
literal|"encodingInCache: "
operator|+
name|encodingInCache
operator|+
literal|"\n"
operator|+
literal|"blockCacheKey: "
operator|+
name|blockCacheKey
argument_list|,
name|shouldBeCached
operator|==
name|isCached
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCached
condition|)
block|{
if|if
condition|(
name|cacheConf
operator|.
name|shouldCacheCompressed
argument_list|(
name|fromCache
operator|.
name|getBlockType
argument_list|()
operator|.
name|getCategory
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|compress
operator|!=
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
condition|)
block|{
name|assertFalse
argument_list|(
name|fromCache
operator|.
name|isUnpacked
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fromCache
operator|=
name|fromCache
operator|.
name|unpack
argument_list|(
name|meta
argument_list|,
name|reader
operator|.
name|getUncachedBlockReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|fromCache
operator|.
name|isUnpacked
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// block we cached at write-time and block read from file should be identical
name|assertEquals
argument_list|(
name|block
operator|.
name|getChecksumType
argument_list|()
argument_list|,
name|fromCache
operator|.
name|getChecksumType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|block
operator|.
name|getBlockType
argument_list|()
argument_list|,
name|fromCache
operator|.
name|getBlockType
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|BlockType
operator|.
name|ENCODED_DATA
argument_list|,
name|block
operator|.
name|getBlockType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|block
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
argument_list|,
name|fromCache
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|block
operator|.
name|getOnDiskSizeWithoutHeader
argument_list|()
argument_list|,
name|fromCache
operator|.
name|getOnDiskSizeWithoutHeader
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|block
operator|.
name|getUncompressedSizeWithoutHeader
argument_list|()
argument_list|,
name|fromCache
operator|.
name|getUncompressedSizeWithoutHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|offset
operator|+=
name|block
operator|.
name|getOnDiskSizeWithHeader
argument_list|()
expr_stmt|;
name|BlockType
name|bt
init|=
name|block
operator|.
name|getBlockType
argument_list|()
decl_stmt|;
name|Integer
name|count
init|=
name|blockCountByType
operator|.
name|get
argument_list|(
name|bt
argument_list|)
decl_stmt|;
name|blockCountByType
operator|.
name|put
argument_list|(
name|bt
argument_list|,
operator|(
name|count
operator|==
literal|null
condition|?
literal|0
else|:
name|count
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Block count by type: "
operator|+
name|blockCountByType
argument_list|)
expr_stmt|;
name|String
name|countByType
init|=
name|blockCountByType
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|useTags
condition|)
block|{
name|assertEquals
argument_list|(
literal|"{"
operator|+
name|BlockType
operator|.
name|DATA
operator|+
literal|"=2663, LEAF_INDEX=297, BLOOM_CHUNK=9, INTERMEDIATE_INDEX=32}"
argument_list|,
name|countByType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"{"
operator|+
name|BlockType
operator|.
name|DATA
operator|+
literal|"=2498, LEAF_INDEX=278, BLOOM_CHUNK=9, INTERMEDIATE_INDEX=31}"
argument_list|,
name|countByType
argument_list|)
expr_stmt|;
block|}
comment|// iterate all the keyvalue from hfile
while|while
condition|(
name|scanner
operator|.
name|next
argument_list|()
condition|)
block|{
name|scanner
operator|.
name|getCell
argument_list|()
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|Long
argument_list|>
name|iterator
init|=
name|cachedBlocksOffset
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Long
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|BlockCacheKey
name|blockCacheKey
init|=
operator|new
name|BlockCacheKey
argument_list|(
name|reader
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
argument_list|)
decl_stmt|;
name|Pair
argument_list|<
name|HFileBlock
argument_list|,
name|HFileBlock
argument_list|>
name|blockPair
init|=
name|cachedBlocks
operator|.
name|get
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockPair
operator|!=
literal|null
condition|)
block|{
comment|// Call return twice because for the isCache cased the counter would have got incremented
comment|// twice. Notice that here we need to returnBlock with different blocks. see comments in
comment|// BucketCache#returnBlock.
name|blockPair
operator|.
name|getSecond
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
if|if
condition|(
name|cacheCompressedData
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|compress
operator|==
name|Compression
operator|.
name|Algorithm
operator|.
name|NONE
operator|||
name|cowType
operator|==
name|CacheOnWriteType
operator|.
name|INDEX_BLOCKS
operator|||
name|cowType
operator|==
name|CacheOnWriteType
operator|.
name|BLOOM_BLOCKS
condition|)
block|{
name|blockPair
operator|.
name|getFirst
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|blockPair
operator|.
name|getFirst
argument_list|()
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|scanner
operator|.
name|shipped
argument_list|()
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|public
specifier|static
name|KeyValue
operator|.
name|Type
name|generateKeyType
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// Let's make half of KVs puts.
return|return
name|KeyValue
operator|.
name|Type
operator|.
name|Put
return|;
block|}
else|else
block|{
name|KeyValue
operator|.
name|Type
name|keyType
init|=
name|KeyValue
operator|.
name|Type
operator|.
name|values
argument_list|()
index|[
literal|1
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|NUM_VALID_KEY_TYPES
argument_list|)
index|]
decl_stmt|;
if|if
condition|(
name|keyType
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Minimum
operator|||
name|keyType
operator|==
name|KeyValue
operator|.
name|Type
operator|.
name|Maximum
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Generated an invalid key type: "
operator|+
name|keyType
operator|+
literal|". "
operator|+
literal|"Probably the layout of KeyValue.Type has changed."
argument_list|)
throw|;
block|}
return|return
name|keyType
return|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|writeStoreFile
parameter_list|(
name|boolean
name|useTags
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|storeFileParentDir
init|=
operator|new
name|Path
argument_list|(
name|TEST_UTIL
operator|.
name|getDataTestDir
argument_list|()
argument_list|,
literal|"test_cache_on_write"
argument_list|)
decl_stmt|;
name|HFileContext
name|meta
init|=
operator|new
name|HFileContextBuilder
argument_list|()
operator|.
name|withCompression
argument_list|(
name|compress
argument_list|)
operator|.
name|withBytesPerCheckSum
argument_list|(
name|CKBYTES
argument_list|)
operator|.
name|withChecksumType
argument_list|(
name|ChecksumType
operator|.
name|NULL
argument_list|)
operator|.
name|withBlockSize
argument_list|(
name|DATA_BLOCK_SIZE
argument_list|)
operator|.
name|withDataBlockEncoding
argument_list|(
name|NoOpDataBlockEncoder
operator|.
name|INSTANCE
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|)
operator|.
name|withIncludesTags
argument_list|(
name|useTags
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|StoreFileWriter
name|sfw
init|=
operator|new
name|StoreFileWriter
operator|.
name|Builder
argument_list|(
name|conf
argument_list|,
name|cacheConf
argument_list|,
name|fs
argument_list|)
operator|.
name|withOutputDir
argument_list|(
name|storeFileParentDir
argument_list|)
operator|.
name|withFileContext
argument_list|(
name|meta
argument_list|)
operator|.
name|withBloomType
argument_list|(
name|BLOOM_TYPE
argument_list|)
operator|.
name|withMaxKeyCount
argument_list|(
name|NUM_KV
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|byte
index|[]
name|cf
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"fam"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_KV
condition|;
operator|++
name|i
control|)
block|{
name|byte
index|[]
name|row
init|=
name|RandomKeyValueUtil
operator|.
name|randomOrderedKey
argument_list|(
name|rand
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|byte
index|[]
name|qualifier
init|=
name|RandomKeyValueUtil
operator|.
name|randomRowOrQualifier
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|RandomKeyValueUtil
operator|.
name|randomValue
argument_list|(
name|rand
argument_list|)
decl_stmt|;
name|KeyValue
name|kv
decl_stmt|;
if|if
condition|(
name|useTags
condition|)
block|{
name|Tag
name|t
init|=
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|"visibility"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tag
argument_list|>
name|tagList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|tagList
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|Tag
index|[]
name|tags
init|=
operator|new
name|Tag
index|[
literal|1
index|]
decl_stmt|;
name|tags
index|[
literal|0
index|]
operator|=
name|t
expr_stmt|;
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|,
name|cf
argument_list|,
literal|0
argument_list|,
name|cf
operator|.
name|length
argument_list|,
name|qualifier
argument_list|,
literal|0
argument_list|,
name|qualifier
operator|.
name|length
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|generateKeyType
argument_list|(
name|rand
argument_list|)
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|,
name|tagList
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|kv
operator|=
operator|new
name|KeyValue
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|length
argument_list|,
name|cf
argument_list|,
literal|0
argument_list|,
name|cf
operator|.
name|length
argument_list|,
name|qualifier
argument_list|,
literal|0
argument_list|,
name|qualifier
operator|.
name|length
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|rand
operator|.
name|nextLong
argument_list|()
argument_list|)
argument_list|,
name|generateKeyType
argument_list|(
name|rand
argument_list|)
argument_list|,
name|value
argument_list|,
literal|0
argument_list|,
name|value
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|sfw
operator|.
name|append
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
name|sfw
operator|.
name|close
argument_list|()
expr_stmt|;
name|storeFilePath
operator|=
name|sfw
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|testCachingDataBlocksDuringCompactionInternals
parameter_list|(
name|boolean
name|useTags
parameter_list|,
name|boolean
name|cacheBlocksOnCompaction
parameter_list|,
name|long
name|cacheBlocksOnCompactionThreshold
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
comment|// create a localConf
name|boolean
name|localValue
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_COMPACTED_BLOCKS_ON_WRITE_KEY
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|long
name|localCacheCompactedBlocksThreshold
init|=
name|conf
operator|.
name|getLong
argument_list|(
name|CacheConfig
operator|.
name|CACHE_COMPACTED_BLOCKS_ON_WRITE_THRESHOLD_KEY
argument_list|,
name|CacheConfig
operator|.
name|DEFAULT_CACHE_COMPACTED_BLOCKS_ON_WRITE_THRESHOLD
argument_list|)
decl_stmt|;
name|boolean
name|localCacheBloomBlocksValue
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_BLOOM_BLOCKS_ON_WRITE_KEY
argument_list|,
name|CacheConfig
operator|.
name|DEFAULT_CACHE_BLOOMS_ON_WRITE
argument_list|)
decl_stmt|;
name|boolean
name|localCacheIndexBlocksValue
init|=
name|conf
operator|.
name|getBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_INDEX_BLOCKS_ON_WRITE_KEY
argument_list|,
name|CacheConfig
operator|.
name|DEFAULT_CACHE_INDEXES_ON_WRITE
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Set the conf if testing caching compacted blocks on write
name|conf
operator|.
name|setBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_COMPACTED_BLOCKS_ON_WRITE_KEY
argument_list|,
name|cacheBlocksOnCompaction
argument_list|)
expr_stmt|;
comment|// set size threshold if testing compaction size threshold
if|if
condition|(
name|cacheBlocksOnCompactionThreshold
operator|>
literal|0
condition|)
block|{
name|conf
operator|.
name|setLong
argument_list|(
name|CacheConfig
operator|.
name|CACHE_COMPACTED_BLOCKS_ON_WRITE_THRESHOLD_KEY
argument_list|,
name|cacheBlocksOnCompactionThreshold
argument_list|)
expr_stmt|;
block|}
comment|// TODO: need to change this test if we add a cache size threshold for
comment|// compactions, or if we implement some other kind of intelligent logic for
comment|// deciding what blocks to cache-on-write on compaction.
specifier|final
name|String
name|table
init|=
literal|"CompactionCacheOnWrite"
decl_stmt|;
specifier|final
name|String
name|cf
init|=
literal|"myCF"
decl_stmt|;
specifier|final
name|byte
index|[]
name|cfBytes
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
name|cf
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxVersions
init|=
literal|3
decl_stmt|;
name|ColumnFamilyDescriptor
name|cfd
init|=
name|ColumnFamilyDescriptorBuilder
operator|.
name|newBuilder
argument_list|(
name|cfBytes
argument_list|)
operator|.
name|setCompressionType
argument_list|(
name|compress
argument_list|)
operator|.
name|setBloomFilterType
argument_list|(
name|BLOOM_TYPE
argument_list|)
operator|.
name|setMaxVersions
argument_list|(
name|maxVersions
argument_list|)
operator|.
name|setDataBlockEncoding
argument_list|(
name|NoOpDataBlockEncoder
operator|.
name|INSTANCE
operator|.
name|getDataBlockEncoding
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HRegion
name|region
init|=
name|TEST_UTIL
operator|.
name|createTestRegion
argument_list|(
name|table
argument_list|,
name|cfd
argument_list|,
name|blockCache
argument_list|)
decl_stmt|;
name|int
name|rowIdx
init|=
literal|0
decl_stmt|;
name|long
name|ts
init|=
name|EnvironmentEdgeManager
operator|.
name|currentTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iFile
init|=
literal|0
init|;
name|iFile
operator|<
literal|5
condition|;
operator|++
name|iFile
control|)
block|{
for|for
control|(
name|int
name|iRow
init|=
literal|0
init|;
name|iRow
operator|<
literal|500
condition|;
operator|++
name|iRow
control|)
block|{
name|String
name|rowStr
init|=
literal|""
operator|+
operator|(
name|rowIdx
operator|*
name|rowIdx
operator|*
name|rowIdx
operator|)
operator|+
literal|"row"
operator|+
name|iFile
operator|+
literal|"_"
operator|+
name|iRow
decl_stmt|;
name|Put
name|p
init|=
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowStr
argument_list|)
argument_list|)
decl_stmt|;
operator|++
name|rowIdx
expr_stmt|;
for|for
control|(
name|int
name|iCol
init|=
literal|0
init|;
name|iCol
operator|<
literal|10
condition|;
operator|++
name|iCol
control|)
block|{
name|String
name|qualStr
init|=
literal|"col"
operator|+
name|iCol
decl_stmt|;
name|String
name|valueStr
init|=
literal|"value_"
operator|+
name|rowStr
operator|+
literal|"_"
operator|+
name|qualStr
decl_stmt|;
for|for
control|(
name|int
name|iTS
init|=
literal|0
init|;
name|iTS
operator|<
literal|5
condition|;
operator|++
name|iTS
control|)
block|{
if|if
condition|(
name|useTags
condition|)
block|{
name|Tag
name|t
init|=
operator|new
name|ArrayBackedTag
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|"visibility"
argument_list|)
decl_stmt|;
name|Tag
index|[]
name|tags
init|=
operator|new
name|Tag
index|[
literal|1
index|]
decl_stmt|;
name|tags
index|[
literal|0
index|]
operator|=
name|t
expr_stmt|;
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowStr
argument_list|)
argument_list|,
name|cfBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualStr
argument_list|)
argument_list|,
name|HConstants
operator|.
name|LATEST_TIMESTAMP
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|valueStr
argument_list|)
argument_list|,
name|tags
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|KeyValue
name|kv
init|=
operator|new
name|KeyValue
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
name|rowStr
argument_list|)
argument_list|,
name|cfBytes
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|qualStr
argument_list|)
argument_list|,
name|ts
operator|++
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
name|valueStr
argument_list|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
name|kv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|p
operator|.
name|setDurability
argument_list|(
name|Durability
operator|.
name|ASYNC_WAL
argument_list|)
expr_stmt|;
name|region
operator|.
name|put
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|region
operator|.
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|clearBlockCache
argument_list|(
name|blockCache
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|blockCache
operator|.
name|getBlockCount
argument_list|()
argument_list|)
expr_stmt|;
name|region
operator|.
name|compact
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"compactStores() returned"
argument_list|)
expr_stmt|;
name|boolean
name|dataBlockCached
init|=
literal|false
decl_stmt|;
name|boolean
name|bloomBlockCached
init|=
literal|false
decl_stmt|;
name|boolean
name|indexBlockCached
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CachedBlock
name|block
range|:
name|blockCache
control|)
block|{
if|if
condition|(
name|DATA_BLOCK_TYPES
operator|.
name|contains
argument_list|(
name|block
operator|.
name|getBlockType
argument_list|()
argument_list|)
condition|)
block|{
name|dataBlockCached
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|BLOOM_BLOCK_TYPES
operator|.
name|contains
argument_list|(
name|block
operator|.
name|getBlockType
argument_list|()
argument_list|)
condition|)
block|{
name|bloomBlockCached
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|INDEX_BLOCK_TYPES
operator|.
name|contains
argument_list|(
name|block
operator|.
name|getBlockType
argument_list|()
argument_list|)
condition|)
block|{
name|indexBlockCached
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Data blocks should be cached in instances where we are caching blocks on write. In the case
comment|// of testing
comment|// BucketCache, we cannot verify block type as it is not stored in the cache.
name|boolean
name|cacheOnCompactAndNonBucketCache
init|=
name|cacheBlocksOnCompaction
operator|&&
operator|!
operator|(
name|blockCache
operator|instanceof
name|BucketCache
operator|)
decl_stmt|;
name|String
name|assertErrorMessage
init|=
literal|"\nTest description: "
operator|+
name|testDescription
operator|+
literal|"\ncacheBlocksOnCompaction: "
operator|+
name|cacheBlocksOnCompaction
operator|+
literal|"\n"
decl_stmt|;
if|if
condition|(
name|cacheOnCompactAndNonBucketCache
operator|&&
name|cacheBlocksOnCompactionThreshold
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|cacheBlocksOnCompactionThreshold
operator|==
name|CACHE_COMPACTION_HIGH_THRESHOLD
condition|)
block|{
name|assertTrue
argument_list|(
name|assertErrorMessage
argument_list|,
name|dataBlockCached
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertErrorMessage
argument_list|,
name|bloomBlockCached
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertErrorMessage
argument_list|,
name|indexBlockCached
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|assertErrorMessage
argument_list|,
name|dataBlockCached
argument_list|)
expr_stmt|;
if|if
condition|(
name|localCacheBloomBlocksValue
condition|)
block|{
name|assertTrue
argument_list|(
name|assertErrorMessage
argument_list|,
name|bloomBlockCached
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|assertErrorMessage
argument_list|,
name|bloomBlockCached
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localCacheIndexBlocksValue
condition|)
block|{
name|assertTrue
argument_list|(
name|assertErrorMessage
argument_list|,
name|indexBlockCached
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|assertErrorMessage
argument_list|,
name|indexBlockCached
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|assertErrorMessage
argument_list|,
name|cacheOnCompactAndNonBucketCache
argument_list|,
name|dataBlockCached
argument_list|)
expr_stmt|;
if|if
condition|(
name|cacheOnCompactAndNonBucketCache
condition|)
block|{
name|assertTrue
argument_list|(
name|assertErrorMessage
argument_list|,
name|bloomBlockCached
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|assertErrorMessage
argument_list|,
name|indexBlockCached
argument_list|)
expr_stmt|;
block|}
block|}
name|region
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// reset back
name|conf
operator|.
name|setBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_COMPACTED_BLOCKS_ON_WRITE_KEY
argument_list|,
name|localValue
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setLong
argument_list|(
name|CacheConfig
operator|.
name|CACHE_COMPACTED_BLOCKS_ON_WRITE_THRESHOLD_KEY
argument_list|,
name|localCacheCompactedBlocksThreshold
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_BLOOM_BLOCKS_ON_WRITE_KEY
argument_list|,
name|localCacheBloomBlocksValue
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|CacheConfig
operator|.
name|CACHE_INDEX_BLOCKS_ON_WRITE_KEY
argument_list|,
name|localCacheIndexBlocksValue
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testStoreFileCacheOnWrite
parameter_list|()
throws|throws
name|IOException
block|{
name|testStoreFileCacheOnWriteInternals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testStoreFileCacheOnWriteInternals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCachingDataBlocksDuringCompaction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testCachingDataBlocksDuringCompactionInternals
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testCachingDataBlocksDuringCompactionInternals
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|testCachingDataBlocksThresholdDuringCompaction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|testCachingDataBlocksDuringCompactionInternals
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|CACHE_COMPACTION_HIGH_THRESHOLD
argument_list|)
expr_stmt|;
name|testCachingDataBlocksDuringCompactionInternals
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
name|CACHE_COMPACTION_LOW_THRESHOLD
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

