begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|access
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Abortable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Admin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|ConnectionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseTestingUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|SecurityTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|zookeeper
operator|.
name|ZooKeeperWatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_comment
comment|/**  * Test the reading and writing of access permissions on {@code _acl_} table.  */
end_comment

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|SecurityTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestTablePermissions
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestTablePermissions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HBaseTestingUtility
name|UTIL
init|=
operator|new
name|HBaseTestingUtility
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ZooKeeperWatcher
name|ZKW
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Abortable
name|ABORTABLE
init|=
operator|new
name|Abortable
argument_list|()
block|{
specifier|private
specifier|final
name|AtomicBoolean
name|abort
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|abort
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|why
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|abort
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAborted
parameter_list|()
block|{
return|return
name|abort
operator|.
name|get
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
name|TEST_NAMESPACE
init|=
literal|"perms_test_ns"
decl_stmt|;
specifier|private
specifier|static
name|String
name|TEST_NAMESPACE2
init|=
literal|"perms_test_ns2"
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|TEST_TABLE
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"perms_test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|TableName
name|TEST_TABLE2
init|=
name|TableName
operator|.
name|valueOf
argument_list|(
literal|"perms_test2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_FAMILY
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"f1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|TEST_QUALIFIER
init|=
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"col1"
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setup configuration
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|SecureTestUtil
operator|.
name|enableSecurity
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|startMiniCluster
argument_list|()
expr_stmt|;
comment|// Wait for the ACL table to become available
name|UTIL
operator|.
name|waitTableEnabled
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
expr_stmt|;
name|ZKW
operator|=
operator|new
name|ZooKeeperWatcher
argument_list|(
name|UTIL
operator|.
name|getConfiguration
argument_list|()
argument_list|,
literal|"TestTablePermissions"
argument_list|,
name|ABORTABLE
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|)
expr_stmt|;
name|UTIL
operator|.
name|createTable
argument_list|(
name|TEST_TABLE2
argument_list|,
name|TEST_FAMILY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL
operator|.
name|shutdownMiniCluster
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|AccessControlLists
operator|.
name|removeTablePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|AccessControlLists
operator|.
name|removeTablePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE2
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|AccessControlLists
operator|.
name|removeTablePermissions
argument_list|(
name|conf
argument_list|,
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test we can read permissions serialized with Writables.    * @throws DeserializationException    */
annotation|@
name|Test
specifier|public
name|void
name|testMigration
parameter_list|()
throws|throws
name|DeserializationException
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|permissions
init|=
name|createPermissions
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|writePermissionsAsBytes
argument_list|(
name|permissions
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|AccessControlLists
operator|.
name|readPermissions
argument_list|(
name|bytes
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Writes a set of permissions as {@link org.apache.hadoop.io.Writable} instances    * and returns the resulting byte array.  Used to verify we can read stuff written    * with Writable.    */
specifier|public
specifier|static
name|byte
index|[]
name|writePermissionsAsBytes
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Permission
argument_list|>
name|perms
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|writePermissions
argument_list|(
operator|new
name|DataOutputStream
argument_list|(
name|bos
argument_list|)
argument_list|,
name|perms
argument_list|,
name|conf
argument_list|)
expr_stmt|;
return|return
name|bos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// shouldn't happen here
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error serializing permissions"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
comment|/**    * Writes a set of permissions as {@link org.apache.hadoop.io.Writable} instances    * to the given output stream.    * @param out    * @param perms    * @param conf    * @throws IOException   */
specifier|public
specifier|static
name|void
name|writePermissions
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|?
extends|extends
name|Permission
argument_list|>
name|perms
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
name|perms
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|keys
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|Text
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|HbaseObjectWritableFor96Migration
operator|.
name|writeObject
argument_list|(
name|out
argument_list|,
name|perms
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|List
operator|.
name|class
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * The AccessControlLists.addUserPermission may throw exception before closing the table.    */
specifier|private
name|void
name|addUserPermission
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|UserPermission
name|userPerm
parameter_list|,
name|Table
name|t
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|AccessControlLists
operator|.
name|addUserPermission
argument_list|(
name|conf
argument_list|,
name|userPerm
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|t
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasicWrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
comment|// add some permissions
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"george"
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|UserPermission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|UserPermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hubert"
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|UserPermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"humphrey"
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|UserPermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// retrieve the same
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TablePermission
argument_list|>
name|userPerms
init|=
name|perms
operator|.
name|get
argument_list|(
literal|"george"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have permissions for george"
argument_list|,
name|userPerms
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have 1 permission for george"
argument_list|,
literal|1
argument_list|,
name|userPerms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TablePermission
name|permission
init|=
name|userPerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Permission should be for "
operator|+
name|TEST_TABLE
argument_list|,
name|TEST_TABLE
argument_list|,
name|permission
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Column family should be empty"
argument_list|,
name|permission
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
comment|// check actions
name|assertNotNull
argument_list|(
name|permission
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TablePermission
operator|.
name|Action
argument_list|>
name|actions
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|permission
operator|.
name|getActions
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|actions
operator|.
name|contains
argument_list|(
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actions
operator|.
name|contains
argument_list|(
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|userPerms
operator|=
name|perms
operator|.
name|get
argument_list|(
literal|"hubert"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have permissions for hubert"
argument_list|,
name|userPerms
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have 1 permission for hubert"
argument_list|,
literal|1
argument_list|,
name|userPerms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|userPerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Permission should be for "
operator|+
name|TEST_TABLE
argument_list|,
name|TEST_TABLE
argument_list|,
name|permission
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Column family should be empty"
argument_list|,
name|permission
operator|.
name|getFamily
argument_list|()
argument_list|)
expr_stmt|;
comment|// check actions
name|assertNotNull
argument_list|(
name|permission
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|actions
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|permission
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actions
operator|.
name|contains
argument_list|(
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|actions
operator|.
name|contains
argument_list|(
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|userPerms
operator|=
name|perms
operator|.
name|get
argument_list|(
literal|"humphrey"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have permissions for humphrey"
argument_list|,
name|userPerms
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have 1 permission for humphrey"
argument_list|,
literal|1
argument_list|,
name|userPerms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|userPerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Permission should be for "
operator|+
name|TEST_TABLE
argument_list|,
name|TEST_TABLE
argument_list|,
name|permission
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission should be for family "
operator|+
name|TEST_FAMILY
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|TEST_FAMILY
argument_list|,
name|permission
operator|.
name|getFamily
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Permission should be for qualifier "
operator|+
name|TEST_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|equals
argument_list|(
name|TEST_QUALIFIER
argument_list|,
name|permission
operator|.
name|getQualifier
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// check actions
name|assertNotNull
argument_list|(
name|permission
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|actions
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|permission
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actions
operator|.
name|contains
argument_list|(
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|actions
operator|.
name|contains
argument_list|(
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
comment|// table 2 permissions
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|;
name|Table
name|table
operator|=
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
init|)
block|{
name|AccessControlLists
operator|.
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"hubert"
argument_list|)
argument_list|,
name|TEST_TABLE2
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|,
name|table
argument_list|)
expr_stmt|;
block|}
comment|// check full load
name|Map
argument_list|<
name|byte
index|[]
argument_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
argument_list|>
name|allPerms
init|=
name|AccessControlLists
operator|.
name|loadAll
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Full permission map should have entries for both test tables"
argument_list|,
literal|2
argument_list|,
name|allPerms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|userPerms
operator|=
name|allPerms
operator|.
name|get
argument_list|(
name|TEST_TABLE
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"hubert"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userPerms
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userPerms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|userPerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_TABLE
argument_list|,
name|permission
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|userPerms
operator|=
name|allPerms
operator|.
name|get
argument_list|(
name|TEST_TABLE2
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|"hubert"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userPerms
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|userPerms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|permission
operator|=
name|userPerms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TEST_TABLE2
argument_list|,
name|permission
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|permission
operator|.
name|getActions
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|actions
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|permission
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actions
operator|.
name|contains
argument_list|(
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|actions
operator|.
name|contains
argument_list|(
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPersistence
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"albert"
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"betty"
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
index|[]
operator|)
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"clark"
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"dwight"
argument_list|)
argument_list|,
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify permissions survive changes in table metadata
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|preperms
init|=
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|UTIL
operator|.
name|getConnection
argument_list|()
operator|.
name|getTable
argument_list|(
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row1"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|put
argument_list|(
operator|new
name|Put
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"row2"
argument_list|)
argument_list|)
operator|.
name|addColumn
argument_list|(
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"v2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Admin
name|admin
init|=
name|UTIL
operator|.
name|getAdmin
argument_list|()
decl_stmt|;
try|try
block|{
name|admin
operator|.
name|split
argument_list|(
name|TEST_TABLE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//although split fail, this may not affect following check
comment|//In old Split API without AM2, if region's best split key is not found,
comment|//there are not exception thrown. But in current API, exception
comment|//will be thrown.
name|LOG
operator|.
name|debug
argument_list|(
literal|"region is not splittable, because "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
comment|// wait for split
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|postperms
init|=
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
name|TEST_TABLE
argument_list|)
decl_stmt|;
name|checkMultimapEqual
argument_list|(
name|preperms
argument_list|,
name|postperms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|permissions
init|=
name|createPermissions
argument_list|()
decl_stmt|;
name|byte
index|[]
name|permsData
init|=
name|AccessControlLists
operator|.
name|writePermissionsAsBytes
argument_list|(
name|permissions
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|copy
init|=
name|AccessControlLists
operator|.
name|readPermissions
argument_list|(
name|permsData
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|checkMultimapEqual
argument_list|(
name|permissions
argument_list|,
name|copy
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|createPermissions
parameter_list|()
block|{
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|permissions
init|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
decl_stmt|;
name|permissions
operator|.
name|put
argument_list|(
literal|"george"
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|put
argument_list|(
literal|"george"
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|put
argument_list|(
literal|"george"
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE2
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|put
argument_list|(
literal|"hubert"
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE2
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|permissions
operator|.
name|put
argument_list|(
literal|"bruce"
argument_list|,
operator|new
name|TablePermission
argument_list|(
name|TEST_NAMESPACE
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|permissions
return|;
block|}
specifier|public
name|void
name|checkMultimapEqual
parameter_list|(
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|first
parameter_list|,
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|second
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|first
operator|.
name|size
argument_list|()
argument_list|,
name|second
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|first
operator|.
name|keySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|TablePermission
argument_list|>
name|firstPerms
init|=
name|first
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TablePermission
argument_list|>
name|secondPerms
init|=
name|second
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|secondPerms
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|firstPerms
operator|.
name|size
argument_list|()
argument_list|,
name|secondPerms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"First permissions: "
operator|+
name|firstPerms
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Second permissions: "
operator|+
name|secondPerms
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TablePermission
name|p
range|:
name|firstPerms
control|)
block|{
name|assertTrue
argument_list|(
literal|"Permission "
operator|+
name|p
operator|.
name|toString
argument_list|()
operator|+
literal|" not found"
argument_list|,
name|secondPerms
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEquals
parameter_list|()
throws|throws
name|Exception
block|{
name|TablePermission
name|p1
init|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
decl_stmt|;
name|TablePermission
name|p2
init|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p2
operator|.
name|equals
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|p2
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p2
operator|.
name|equals
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|p2
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p2
operator|.
name|equals
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|p2
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TEST_QUALIFIER
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p2
operator|.
name|equals
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|p2
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
name|TEST_FAMILY
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p2
operator|.
name|equals
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|p2
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p2
operator|.
name|equals
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p2
operator|.
name|equals
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|p2
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE2
argument_list|,
literal|null
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p2
operator|.
name|equals
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_TABLE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p2
operator|.
name|equals
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_NAMESPACE
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|p2
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_NAMESPACE
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|p1
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_NAMESPACE
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|p2
operator|=
operator|new
name|TablePermission
argument_list|(
name|TEST_NAMESPACE2
argument_list|,
name|TablePermission
operator|.
name|Action
operator|.
name|READ
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|p2
operator|.
name|equals
argument_list|(
name|p1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGlobalPermission
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|// add some permissions
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"user1"
argument_list|)
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"user2"
argument_list|)
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"user3"
argument_list|)
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ListMultimap
argument_list|<
name|String
argument_list|,
name|TablePermission
argument_list|>
name|perms
init|=
name|AccessControlLists
operator|.
name|getTablePermissions
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TablePermission
argument_list|>
name|user1Perms
init|=
name|perms
operator|.
name|get
argument_list|(
literal|"user1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have 1 permission for user1"
argument_list|,
literal|1
argument_list|,
name|user1Perms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user1 should have WRITE permission"
argument_list|,
operator|new
name|Permission
operator|.
name|Action
index|[]
block|{
name|Permission
operator|.
name|Action
operator|.
name|READ
block|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
block|}
argument_list|,
name|user1Perms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TablePermission
argument_list|>
name|user2Perms
init|=
name|perms
operator|.
name|get
argument_list|(
literal|"user2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have 1 permission for user2"
argument_list|,
literal|1
argument_list|,
name|user2Perms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user2 should have CREATE permission"
argument_list|,
operator|new
name|Permission
operator|.
name|Action
index|[]
block|{
name|Permission
operator|.
name|Action
operator|.
name|CREATE
block|}
argument_list|,
name|user2Perms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TablePermission
argument_list|>
name|user3Perms
init|=
name|perms
operator|.
name|get
argument_list|(
literal|"user3"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Should have 1 permission for user3"
argument_list|,
literal|1
argument_list|,
name|user3Perms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"user3 should have ADMIN, READ, CREATE permission"
argument_list|,
operator|new
name|Permission
operator|.
name|Action
index|[]
block|{
name|Permission
operator|.
name|Action
operator|.
name|READ
block|,
name|Permission
operator|.
name|Action
operator|.
name|CREATE
block|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
block|}
argument_list|,
name|user3Perms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getActions
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthManager
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|UTIL
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
comment|/* test a race condition causing TableAuthManager to sometimes fail global permissions checks      * when the global cache is being updated      */
name|TableAuthManager
name|authManager
init|=
name|TableAuthManager
operator|.
name|getOrCreate
argument_list|(
name|ZKW
argument_list|,
name|conf
argument_list|)
decl_stmt|;
comment|// currently running user is the system user and should have global admin perms
name|User
name|currentUser
init|=
name|User
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|authManager
operator|.
name|authorize
argument_list|(
name|currentUser
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Connection
name|connection
init|=
name|ConnectionFactory
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|50
condition|;
name|i
operator|++
control|)
block|{
name|addUserPermission
argument_list|(
name|conf
argument_list|,
operator|new
name|UserPermission
argument_list|(
name|Bytes
operator|.
name|toBytes
argument_list|(
literal|"testauth"
operator|+
name|i
argument_list|)
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|READ
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|WRITE
argument_list|)
argument_list|,
name|connection
operator|.
name|getTable
argument_list|(
name|AccessControlLists
operator|.
name|ACL_TABLE_NAME
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the system user still shows as authorized
name|assertTrue
argument_list|(
literal|"Failed current user auth check on iter "
operator|+
name|i
argument_list|,
name|authManager
operator|.
name|authorize
argument_list|(
name|currentUser
argument_list|,
name|Permission
operator|.
name|Action
operator|.
name|ADMIN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

