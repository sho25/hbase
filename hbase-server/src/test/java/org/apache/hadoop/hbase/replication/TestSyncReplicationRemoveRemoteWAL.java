begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|replication
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|endsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HBaseClassTestRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Waiter
operator|.
name|ExplainingPredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|master
operator|.
name|MasterFileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|regionserver
operator|.
name|HRegionServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|LargeTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|testclassification
operator|.
name|ReplicationTests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|wal
operator|.
name|SyncReplicationWALProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|experimental
operator|.
name|categories
operator|.
name|Category
import|;
end_import

begin_class
annotation|@
name|Category
argument_list|(
block|{
name|ReplicationTests
operator|.
name|class
block|,
name|LargeTests
operator|.
name|class
block|}
argument_list|)
specifier|public
class|class
name|TestSyncReplicationRemoveRemoteWAL
extends|extends
name|SyncReplicationTestBase
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|HBaseClassTestRule
name|CLASS_RULE
init|=
name|HBaseClassTestRule
operator|.
name|forClass
argument_list|(
name|TestSyncReplicationRemoveRemoteWAL
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|void
name|waitUntilDeleted
parameter_list|(
name|Path
name|remoteWAL
parameter_list|)
throws|throws
name|Exception
block|{
name|MasterFileSystem
name|mfs
init|=
name|UTIL2
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
name|UTIL1
operator|.
name|waitFor
argument_list|(
literal|30000
argument_list|,
operator|new
name|ExplainingPredicate
argument_list|<
name|Exception
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|!
name|mfs
operator|.
name|getWALFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|remoteWAL
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|explainFailure
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|remoteWAL
operator|+
literal|" has not been deleted yet"
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveRemoteWAL
parameter_list|()
throws|throws
name|Exception
block|{
name|UTIL2
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|STANDBY
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|MasterFileSystem
name|mfs
init|=
name|UTIL2
operator|.
name|getMiniHBaseCluster
argument_list|()
operator|.
name|getMaster
argument_list|()
operator|.
name|getMasterFileSystem
argument_list|()
decl_stmt|;
name|Path
name|remoteWALDir
init|=
name|ReplicationUtils
operator|.
name|getRemoteWALDirForPeer
argument_list|(
operator|new
name|Path
argument_list|(
name|mfs
operator|.
name|getWALRootDir
argument_list|()
argument_list|,
name|ReplicationUtils
operator|.
name|REMOTE_WAL_DIR_NAME
argument_list|)
argument_list|,
name|PEER_ID
argument_list|)
decl_stmt|;
name|FileStatus
index|[]
name|remoteWALStatus
init|=
name|mfs
operator|.
name|getWALFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|remoteWALDir
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remoteWALStatus
operator|.
name|length
argument_list|)
expr_stmt|;
name|Path
name|remoteWAL
init|=
name|remoteWALStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|remoteWAL
operator|.
name|getName
argument_list|()
argument_list|,
name|endsWith
argument_list|(
name|SyncReplicationWALProvider
operator|.
name|LOG_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|writeAndVerifyReplication
argument_list|(
name|UTIL1
argument_list|,
name|UTIL2
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|HRegionServer
name|rs
init|=
name|UTIL1
operator|.
name|getRSForFirstRegionInTable
argument_list|(
name|TABLE_NAME
argument_list|)
decl_stmt|;
name|rs
operator|.
name|getWalRoller
argument_list|()
operator|.
name|requestRollAll
argument_list|()
expr_stmt|;
comment|// The replicated wal file should be deleted finally
name|waitUntilDeleted
argument_list|(
name|remoteWAL
argument_list|)
expr_stmt|;
name|remoteWALStatus
operator|=
name|mfs
operator|.
name|getWALFileSystem
argument_list|()
operator|.
name|listStatus
argument_list|(
name|remoteWALDir
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|remoteWALStatus
operator|.
name|length
argument_list|)
expr_stmt|;
name|remoteWAL
operator|=
name|remoteWALStatus
index|[
literal|0
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
name|remoteWAL
operator|.
name|getName
argument_list|()
argument_list|,
name|endsWith
argument_list|(
name|SyncReplicationWALProvider
operator|.
name|LOG_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|disableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|UTIL1
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|transitReplicationPeerSyncReplicationState
argument_list|(
name|PEER_ID
argument_list|,
name|SyncReplicationState
operator|.
name|DOWNGRADE_ACTIVE
argument_list|)
expr_stmt|;
comment|// should still be there since the peer is disabled and we haven't replicated the data yet
name|assertTrue
argument_list|(
name|mfs
operator|.
name|getWALFileSystem
argument_list|()
operator|.
name|exists
argument_list|(
name|remoteWAL
argument_list|)
argument_list|)
expr_stmt|;
name|UTIL1
operator|.
name|getAdmin
argument_list|()
operator|.
name|enableReplicationPeer
argument_list|(
name|PEER_ID
argument_list|)
expr_stmt|;
name|waitUntilReplicationDone
argument_list|(
name|UTIL2
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|verifyThroughRegion
argument_list|(
name|UTIL2
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// Confirm that we will also remove the remote wal files in DA state
name|waitUntilDeleted
argument_list|(
name|remoteWAL
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

